* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 7285
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3993861030
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:19:56.820 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:19:59.158 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;
[MASTER] 10:19:59.160 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true
[MASTER] 10:19:59.161 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false
[MASTER] 10:19:59.196 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 10:19:59.197 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 10:20:06.421 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false in context: com.google.javascript.rhino.Node:getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 10:20:07.584 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V
[MASTER] 10:20:07.770 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false
[MASTER] 10:20:07.847 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622
[MASTER] 10:20:08.779 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.setDouble(D)V
[MASTER] 10:20:11.011 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:20:37.305 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:28:19.674 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.UnionType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 10:28:23.521 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:29:16.114 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.EnumElementType canUseFunctionalMocks=false, canBeMocked: true
Number of times BBC is called in total: 0
* Search finished after 604s and 436 generations, 212323 statements, best individual has fitness: 2707.0
* Minimizing test suite
[MASTER] 10:31:21.430 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 812
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 621
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 106
* Number of covered goals: 106
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 472
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 4536
* Number of covered goals: 2313
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 583
* Generated 1090 tests with total length 11396
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:32:32.075 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6754% of time used, but only 80/1090 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 18%
[MASTER] 10:32:51.660 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 10:33:06.230 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 14 seconds more than allowed.
[MASTER] 10:33:13.468 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1628159593099/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1628159593099/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:13.468 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:13.468 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:13.473 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2292
[MASTER] 10:33:13.475 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1628159593099/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(2786, "m=XnkW");
21:       assertEquals(4095, Node.COLUMN_MASK);
22:       assertEquals(55, Node.INFERRED_FUNCTION);
23:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
24:       assertEquals(8, Node.FLAG_NO_THROWS);
25:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
26:       assertEquals(39, Node.EMPTY_BLOCK);
27:       assertEquals(53, Node.INPUT_ID);
28:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
29:       assertEquals(57, Node.REFLECTED_OBJECT);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(52, Node.LENGTH);
32:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
33:       assertEquals(56, Node.CHANGE_TIME);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
37:       assertEquals(37, Node.OPT_ARG_NAME);
38:       assertEquals(48, Node.DIRECTIVES);
39:       assertEquals(49, Node.DIRECT_EVAL);
40:       assertEquals(51, Node.STATIC_SOURCE_FILE);
41:       assertEquals(12, Node.COLUMN_BITS);
42:       assertEquals(46, Node.IS_NAMESPACE);
43:       assertEquals(2, Node.POST_FLAG);
44:       assertEquals(30, Node.VAR_ARGS_NAME);
45:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
46:       assertEquals(15, Node.NO_SIDE_EFFECTS);
47:       assertEquals(57, Node.LAST_PROP);
48:       assertEquals(47, Node.IS_DISPATCHER);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(32, Node.INCRDECR_PROP);
51:       assertEquals(1, Node.DECR_FLAG);
52:       assertEquals(40, Node.ORIGINALNAME_PROP);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(50, Node.FREE_CALL);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(54, Node.SLASH_V);
57:       assertNotNull(node0);
58:       assertEquals(0, node0.getChildCount());
59:       assertFalse(node0.isCatch());
60:       assertFalse(node0.isSetterDef());
61:       assertFalse(node0.isVar());
62:       assertFalse(node0.isDefaultCase());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isDebugger());
66:       assertFalse(node0.isFunction());
67:       assertEquals(2786, node0.getType());
68:       assertFalse(node0.isGetterDef());
69:       assertFalse(node0.isStringKey());
70:       assertFalse(node0.isParamList());
71:       assertEquals((-1), node0.getLineno());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isNumber());
74:       assertFalse(node0.isIn());
75:       assertFalse(node0.isContinue());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.isCase());
78:       assertFalse(node0.isBlock());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isInc());
81:       assertFalse(node0.isRegExp());
82:       assertFalse(node0.isNE());
83:       assertFalse(node0.isIf());
84:       assertFalse(node0.isGetProp());
85:       assertFalse(node0.isComma());
86:       assertFalse(node0.isObjectLit());
87:       assertFalse(node0.isInstanceOf());
88:       assertFalse(node0.isWith());
89:       assertFalse(node0.isThis());
90:       assertFalse(node0.isThrow());
91:       assertFalse(node0.hasOneChild());
92:       assertEquals((-1), node0.getCharno());
93:       assertFalse(node0.isCast());
94:       assertFalse(node0.isScript());
95:       assertFalse(node0.isFalse());
96:       assertFalse(node0.isString());
97:       assertFalse(node0.isNot());
98:       assertFalse(node0.isLabelName());
99:       assertEquals((-1), node0.getSourcePosition());
100:       assertFalse(node0.isSwitch());
101:       assertFalse(node0.isAnd());
102:       assertFalse(node0.isReturn());
103:       assertFalse(node0.isAssignAdd());
104:       assertFalse(node0.isOr());
105:       assertFalse(node0.isLabel());
106:       assertFalse(node0.isTypeOf());
107:       assertFalse(node0.isDo());
108:       assertFalse(node0.isAssign());
109:       assertFalse(node0.isEmpty());
110:       assertFalse(node0.isDec());
111:       assertFalse(node0.hasChildren());
112:       assertFalse(node0.isWhile());
113:       assertFalse(node0.isAdd());
114:       assertFalse(node0.isNew());
115:       assertFalse(node0.isExprResult());
116:       assertFalse(node0.isCall());
117:       assertFalse(node0.isName());
118:       assertFalse(node0.isDelProp());
119:       assertFalse(node0.isGetElem());
120:       assertFalse(node0.isBreak());
121:       assertFalse(node0.isVoid());
122:       assertFalse(node0.isNull());
123:       assertFalse(node0.isTrue());
124:       
125:       Node node1 = new Node(561);
126:       assertEquals(36, Node.QUOTED_PROP);
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
129:       assertEquals(56, Node.CHANGE_TIME);
130:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
131:       assertEquals(43, Node.IS_CONSTANT_NAME);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
134:       assertEquals(37, Node.OPT_ARG_NAME);
135:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
138:       assertEquals(4095, Node.COLUMN_MASK);
139:       assertEquals(12, Node.COLUMN_BITS);
140:       assertEquals(1, Node.DECR_FLAG);
141:       assertEquals(32, Node.INCRDECR_PROP);
142:       assertEquals(54, Node.SLASH_V);
143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(30, Node.VAR_ARGS_NAME);
146:       assertEquals(52, Node.LENGTH);
147:       assertEquals(40, Node.ORIGINALNAME_PROP);
148:       assertEquals(57, Node.REFLECTED_OBJECT);
149:       assertEquals(51, Node.STATIC_SOURCE_FILE);
150:       assertEquals(49, Node.DIRECT_EVAL);
151:       assertEquals(46, Node.IS_NAMESPACE);
152:       assertEquals(2, Node.POST_FLAG);
153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(39, Node.EMPTY_BLOCK);
156:       assertEquals(47, Node.IS_DISPATCHER);
157:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
158:       assertEquals(29, Node.JSDOC_INFO_PROP);
159:       assertEquals(55, Node.INFERRED_FUNCTION);
160:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
161:       assertEquals(57, Node.LAST_PROP);
162:       assertFalse(node1.equals((Object)node0));
163:       assertNotNull(node1);
164:       assertFalse(node1.isDefaultCase());
165:       assertFalse(node1.isFunction());
166:       assertFalse(node1.isRegExp());
167:       assertFalse(node1.isVoid());
168:       assertFalse(node1.isCatch());
169:       assertFalse(node1.isArrayLit());
170:       assertFalse(node1.isParamList());
171:       assertFalse(node1.isDebugger());
172:       assertFalse(node1.isNull());
173:       assertFalse(node1.isTrue());
174:       assertFalse(node1.isEmpty());
175:       assertFalse(node1.isSetterDef());
176:       assertEquals(0, node1.getChildCount());
177:       assertFalse(node1.isVar());
178:       assertFalse(node1.isWhile());
179:       assertFalse(node1.isString());
180:       assertFalse(node1.isDo());
181:       assertFalse(node1.isContinue());
182:       assertFalse(node1.isNew());
183:       assertFalse(node1.isAdd());
184:       assertFalse(node1.isOr());
185:       assertFalse(node1.hasChildren());
186:       assertFalse(node1.isBreak());
187:       assertFalse(node1.isDelProp());
188:       assertFalse(node1.isDec());
189:       assertEquals((-1), node1.getSourcePosition());
190:       assertFalse(node1.isAssign());
191:       assertFalse(node1.isTypeOf());
192:       assertFalse(node1.isName());
193:       assertFalse(node1.isGetProp());
194:       assertEquals(561, node1.getType());
195:       assertFalse(node1.isGetElem());
196:       assertFalse(node1.isCall());
197:       assertFalse(node1.isComma());
198:       assertFalse(node1.isReturn());
199:       assertFalse(node1.isNot());
200:       assertFalse(node1.isWith());
201:       assertFalse(node1.isScript());
202:       assertFalse(node1.isExprResult());
203:       assertFalse(node1.isObjectLit());
204:       assertFalse(node1.isAnd());
205:       assertFalse(node1.isLabelName());
206:       assertFalse(node1.isFalse());
207:       assertFalse(node1.isCast());
208:       assertFalse(node1.isAssignAdd());
209:       assertFalse(node1.isThrow());
210:       assertFalse(node1.isLabel());
211:       assertFalse(node1.isSwitch());
212:       assertFalse(node1.isCase());
213:       assertFalse(node1.isInc());
214:       assertFalse(node1.isIn());
215:       assertEquals((-1), node1.getLineno());
216:       assertEquals((-1), node1.getCharno());
217:       assertFalse(node1.isStringKey());
218:       assertFalse(node1.isNE());
219:       assertFalse(node1.isGetterDef());
220:       assertFalse(node1.isIf());
221:       assertFalse(node1.isNumber());
222:       assertFalse(node1.hasOneChild());
223:       assertFalse(node1.isInstanceOf());
224:       assertFalse(node1.hasMoreThanOneChild());
225:       assertFalse(node1.isTry());
226:       assertFalse(node1.isFor());
227:       assertFalse(node1.isBlock());
228:       assertFalse(node1.isHook());
229:       assertFalse(node1.isThis());
230:       
231:       Node node2 = new Node(1038, node0, node0, node0, node1);
232:       assertEquals(4095, Node.COLUMN_MASK);
233:       assertEquals(55, Node.INFERRED_FUNCTION);
234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
235:       assertEquals(8, Node.FLAG_NO_THROWS);
236:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
237:       assertEquals(39, Node.EMPTY_BLOCK);
238:       assertEquals(53, Node.INPUT_ID);
239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
240:       assertEquals(57, Node.REFLECTED_OBJECT);
241:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
242:       assertEquals(52, Node.LENGTH);
243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
244:       assertEquals(56, Node.CHANGE_TIME);
245:       assertEquals(36, Node.QUOTED_PROP);
246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
247:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
248:       assertEquals(37, Node.OPT_ARG_NAME);
249:       assertEquals(48, Node.DIRECTIVES);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(51, Node.STATIC_SOURCE_FILE);
252:       assertEquals(12, Node.COLUMN_BITS);
253:       assertEquals(46, Node.IS_NAMESPACE);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(30, Node.VAR_ARGS_NAME);
256:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
257:       assertEquals(15, Node.NO_SIDE_EFFECTS);
258:       assertEquals(57, Node.LAST_PROP);
259:       assertEquals(47, Node.IS_DISPATCHER);
260:       assertEquals(29, Node.JSDOC_INFO_PROP);
261:       assertEquals(32, Node.INCRDECR_PROP);
262:       assertEquals(1, Node.DECR_FLAG);
263:       assertEquals(40, Node.ORIGINALNAME_PROP);
264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
265:       assertEquals(50, Node.FREE_CALL);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(54, Node.SLASH_V);
268:       assertEquals(36, Node.QUOTED_PROP);
269:       assertEquals(53, Node.INPUT_ID);
270:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
271:       assertEquals(56, Node.CHANGE_TIME);
272:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
273:       assertEquals(43, Node.IS_CONSTANT_NAME);
274:       assertEquals(48, Node.DIRECTIVES);
275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
276:       assertEquals(37, Node.OPT_ARG_NAME);
277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
278:       assertEquals(50, Node.FREE_CALL);
279:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
280:       assertEquals(4095, Node.COLUMN_MASK);
281:       assertEquals(12, Node.COLUMN_BITS);
282:       assertEquals(1, Node.DECR_FLAG);
283:       assertEquals(32, Node.INCRDECR_PROP);
284:       assertEquals(54, Node.SLASH_V);
285:       assertEquals(15, Node.NO_SIDE_EFFECTS);
286:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
287:       assertEquals(30, Node.VAR_ARGS_NAME);
288:       assertEquals(52, Node.LENGTH);
289:       assertEquals(40, Node.ORIGINALNAME_PROP);
290:       assertEquals(57, Node.REFLECTED_OBJECT);
291:       assertEquals(51, Node.STATIC_SOURCE_FILE);
292:       assertEquals(49, Node.DIRECT_EVAL);
293:       assertEquals(46, Node.IS_NAMESPACE);
294:       assertEquals(2, Node.POST_FLAG);
295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
296:       assertEquals(8, Node.FLAG_NO_THROWS);
297:       assertEquals(39, Node.EMPTY_BLOCK);
298:       assertEquals(47, Node.IS_DISPATCHER);
299:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
300:       assertEquals(29, Node.JSDOC_INFO_PROP);
301:       assertEquals(55, Node.INFERRED_FUNCTION);
302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
303:       assertEquals(57, Node.LAST_PROP);
304:       assertEquals(52, Node.LENGTH);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(57, Node.REFLECTED_OBJECT);
307:       assertEquals(54, Node.SLASH_V);
308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
309:       assertEquals(57, Node.LAST_PROP);
310:       assertEquals(1, Node.DECR_FLAG);
311:       assertEquals(50, Node.FREE_CALL);
312:       assertEquals(8, Node.FLAG_NO_THROWS);
313:       assertEquals(39, Node.EMPTY_BLOCK);
314:       assertEquals(15, Node.NO_SIDE_EFFECTS);
315:       assertEquals(48, Node.DIRECTIVES);
316:       assertEquals(32, Node.INCRDECR_PROP);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(12, Node.COLUMN_BITS);
319:       assertEquals(49, Node.DIRECT_EVAL);
320:       assertEquals(37, Node.OPT_ARG_NAME);
321:       assertEquals(4095, Node.COLUMN_MASK);
322:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(43, Node.IS_CONSTANT_NAME);
326:       assertEquals(36, Node.QUOTED_PROP);
327:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
328:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
329:       assertEquals(53, Node.INPUT_ID);
330:       assertEquals(55, Node.INFERRED_FUNCTION);
331:       assertEquals(29, Node.JSDOC_INFO_PROP);
332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
333:       assertEquals(51, Node.STATIC_SOURCE_FILE);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(46, Node.IS_NAMESPACE);
336:       assertEquals(47, Node.IS_DISPATCHER);
337:       assertEquals(2, Node.POST_FLAG);
338:       assertEquals(30, Node.VAR_ARGS_NAME);
339:       assertEquals(40, Node.ORIGINALNAME_PROP);
340:       assertFalse(node0.equals((Object)node1));
341:       assertFalse(node1.equals((Object)node0));
342:       assertFalse(node2.equals((Object)node1));
343:       assertFalse(node2.equals((Object)node0));
344:       assertNotNull(node2);
345:       assertEquals(0, node0.getChildCount());
346:       assertFalse(node0.isCatch());
347:       assertFalse(node0.isSetterDef());
348:       assertFalse(node0.isVar());
349:       assertFalse(node0.isDefaultCase());
350:       assertFalse(node0.isTry());
351:       assertFalse(node0.isArrayLit());
352:       assertFalse(node0.isDebugger());
353:       assertFalse(node0.isFunction());
354:       assertEquals(2786, node0.getType());
355:       assertFalse(node0.isGetterDef());
356:       assertFalse(node0.isStringKey());
357:       assertFalse(node0.isParamList());
358:       assertEquals((-1), node0.getLineno());
359:       assertFalse(node0.hasMoreThanOneChild());
360:       assertFalse(node0.isNumber());
361:       assertFalse(node0.isIn());
362:       assertFalse(node0.isContinue());
363:       assertFalse(node0.isFor());
364:       assertFalse(node0.isCase());
365:       assertFalse(node0.isBlock());
366:       assertFalse(node0.isHook());
367:       assertFalse(node0.isInc());
368:       assertFalse(node0.isRegExp());
369:       assertFalse(node0.isNE());
370:       assertFalse(node0.isIf());
371:       assertFalse(node0.isGetProp());
372:       assertFalse(node0.isComma());
373:       assertFalse(node0.isObjectLit());
374:       assertFalse(node0.isInstanceOf());
375:       assertFalse(node0.isWith());
376:       assertFalse(node0.isThis());
377:       assertFalse(node0.isThrow());
378:       assertFalse(node0.hasOneChild());
379:       assertEquals((-1), node0.getCharno());
380:       assertFalse(node0.isCast());
381:       assertFalse(node0.isScript());
382:       assertFalse(node0.isFalse());
383:       assertFalse(node0.isString());
384:       assertFalse(node0.isNot());
385:       assertFalse(node0.isLabelName());
386:       assertEquals((-1), node0.getSourcePosition());
387:       assertFalse(node0.isSwitch());
388:       assertFalse(node0.isAnd());
389:       assertFalse(node0.isReturn());
390:       assertFalse(node0.isAssignAdd());
391:       assertFalse(node0.isOr());
392:       assertFalse(node0.isLabel());
393:       assertFalse(node0.isTypeOf());
394:       assertFalse(node0.isDo());
395:       assertFalse(node0.isAssign());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isDec());
398:       assertFalse(node0.hasChildren());
399:       assertFalse(node0.isWhile());
400:       assertFalse(node0.isAdd());
401:       assertFalse(node0.isNew());
402:       assertFalse(node0.isExprResult());
403:       assertFalse(node0.isCall());
404:       assertFalse(node0.isName());
405:       assertFalse(node0.isDelProp());
406:       assertFalse(node0.isGetElem());
407:       assertFalse(node0.isBreak());
408:       assertFalse(node0.isVoid());
409:       assertFalse(node0.isNull());
410:       assertFalse(node0.isTrue());
411:       assertFalse(node1.isDefaultCase());
412:       assertFalse(node1.isFunction());
413:       assertFalse(node1.isRegExp());
414:       assertFalse(node1.isVoid());
415:       assertFalse(node1.isCatch());
416:       assertFalse(node1.isArrayLit());
417:       assertFalse(node1.isParamList());
418:       assertFalse(node1.isDebugger());
419:       assertFalse(node1.isNull());
420:       assertFalse(node1.isTrue());
421:       assertFalse(node1.isEmpty());
422:       assertFalse(node1.isSetterDef());
423:       assertEquals(0, node1.getChildCount());
424:       assertFalse(node1.isVar());
425:       assertFalse(node1.isWhile());
426:       assertFalse(node1.isString());
427:       assertFalse(node1.isDo());
428:       assertFalse(node1.isContinue());
429:       assertFalse(node1.isNew());
430:       assertFalse(node1.isAdd());
431:       assertFalse(node1.isOr());
432:       assertFalse(node1.hasChildren());
433:       assertFalse(node1.isBreak());
434:       assertFalse(node1.isDelProp());
435:       assertFalse(node1.isDec());
436:       assertEquals((-1), node1.getSourcePosition());
437:       assertFalse(node1.isAssign());
438:       assertFalse(node1.isTypeOf());
439:       assertFalse(node1.isName());
440:       assertFalse(node1.isGetProp());
441:       assertEquals(561, node1.getType());
442:       assertFalse(node1.isGetElem());
443:       assertFalse(node1.isCall());
444:       assertFalse(node1.isComma());
445:       assertFalse(node1.isReturn());
446:       assertFalse(node1.isNot());
447:       assertFalse(node1.isWith());
448:       assertFalse(node1.isScript());
449:       assertFalse(node1.isExprResult());
450:       assertFalse(node1.isObjectLit());
451:       assertFalse(node1.isAnd());
452:       assertFalse(node1.isLabelName());
453:       assertFalse(node1.isFalse());
454:       assertFalse(node1.isCast());
455:       assertFalse(node1.isAssignAdd());
456:       assertFalse(node1.isThrow());
457:       assertFalse(node1.isLabel());
458:       assertFalse(node1.isSwitch());
459:       assertFalse(node1.isCase());
460:       assertFalse(node1.isInc());
461:       assertFalse(node1.isIn());
462:       assertEquals((-1), node1.getLineno());
463:       assertEquals((-1), node1.getCharno());
464:       assertFalse(node1.isStringKey());
465:       assertFalse(node1.isNE());
466:       assertFalse(node1.isGetterDef());
467:       assertFalse(node1.isIf());
468:       assertFalse(node1.isNumber());
469:       assertFalse(node1.hasOneChild());
470:       assertFalse(node1.isInstanceOf());
471:       assertFalse(node1.hasMoreThanOneChild());
472:       assertFalse(node1.isTry());
473:       assertFalse(node1.isFor());
474:       assertFalse(node1.isBlock());
475:       assertFalse(node1.isHook());
476:       assertFalse(node1.isThis());
477:       assertFalse(node2.isSwitch());
478:       assertFalse(node2.isHook());
479:       assertEquals((-1), node2.getCharno());
480:       assertFalse(node2.isThrow());
481:       assertFalse(node2.isString());
482:       assertFalse(node2.isInc());
483:       assertFalse(node2.isCase());
484:       assertFalse(node2.isGetProp());
485:       assertFalse(node2.isGetterDef());
486:       assertEquals(2, node2.getChildCount());
487:       assertFalse(node2.isFalse());
488:       assertFalse(node2.isAnd());
489:       assertFalse(node2.isArrayLit());
490:       assertFalse(node2.isTry());
491:       assertFalse(node2.isFunction());
492:       assertFalse(node2.isRegExp());
493:       assertFalse(node2.isFor());
494:       assertFalse(node2.hasOneChild());
495:       assertFalse(node2.isScript());
496:       assertTrue(node2.hasChildren());
497:       assertFalse(node2.isNE());
498:       assertFalse(node2.isIn());
499:       assertFalse(node2.isThis());
500:       assertFalse(node2.isCatch());
501:       assertFalse(node2.isWith());
502:       assertFalse(node2.isInstanceOf());
503:       assertFalse(node2.isIf());
504:       assertEquals((-1), node2.getLineno());
505:       assertFalse(node2.isBlock());
506:       assertFalse(node2.isAdd());
507:       assertFalse(node2.isVar());
508:       assertFalse(node2.isWhile());
509:       assertFalse(node2.isDo());
510:       assertFalse(node2.isSetterDef());
511:       assertEquals(1038, node2.getType());
512:       assertFalse(node2.isNew());
513:       assertFalse(node2.isAssignAdd());
514:       assertFalse(node2.isParamList());
515:       assertFalse(node2.isNumber());
516:       assertFalse(node2.isLabel());
517:       assertEquals((-1), node2.getSourcePosition());
518:       assertFalse(node2.isStringKey());
519:       assertFalse(node2.isCast());
520:       assertFalse(node2.isContinue());
521:       assertFalse(node2.isLabelName());
522:       assertFalse(node2.isExprResult());
523:       assertFalse(node2.isVoid());
524:       assertFalse(node2.isTrue());
525:       assertFalse(node2.isNot());
526:       assertFalse(node2.isDebugger());
527:       assertFalse(node2.isEmpty());
528:       assertFalse(node2.isObjectLit());
529:       assertFalse(node2.isDefaultCase());
530:       assertFalse(node2.isDec());
531:       assertFalse(node2.isTypeOf());
532:       assertFalse(node2.isNull());
533:       assertFalse(node2.isReturn());
534:       assertFalse(node2.isAssign());
535:       assertFalse(node2.isComma());
536:       assertFalse(node2.isOr());
537:       assertFalse(node2.isGetElem());
538:       assertFalse(node2.isCall());
539:       assertFalse(node2.isName());
540:       assertTrue(node2.hasMoreThanOneChild());
541:       assertFalse(node2.isDelProp());
542:       assertFalse(node2.isBreak());
543:       
544:       Node node3 = node0.srcrefTree(node2);
545:       assertEquals(4095, Node.COLUMN_MASK);
546:       assertEquals(55, Node.INFERRED_FUNCTION);
547:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
548:       assertEquals(8, Node.FLAG_NO_THROWS);
549:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
550:       assertEquals(39, Node.EMPTY_BLOCK);
551:       assertEquals(53, Node.INPUT_ID);
552:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
553:       assertEquals(57, Node.REFLECTED_OBJECT);
554:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
555:       assertEquals(52, Node.LENGTH);
556:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
557:       assertEquals(56, Node.CHANGE_TIME);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
560:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
561:       assertEquals(37, Node.OPT_ARG_NAME);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(49, Node.DIRECT_EVAL);
564:       assertEquals(51, Node.STATIC_SOURCE_FILE);
565:       assertEquals(12, Node.COLUMN_BITS);
566:       assertEquals(46, Node.IS_NAMESPACE);
567:       assertEquals(2, Node.POST_FLAG);
568:       assertEquals(30, Node.VAR_ARGS_NAME);
569:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
570:       assertEquals(15, Node.NO_SIDE_EFFECTS);
571:       assertEquals(57, Node.LAST_PROP);
572:       assertEquals(47, Node.IS_DISPATCHER);
573:       assertEquals(29, Node.JSDOC_INFO_PROP);
574:       assertEquals(32, Node.INCRDECR_PROP);
575:       assertEquals(1, Node.DECR_FLAG);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
578:       assertEquals(50, Node.FREE_CALL);
579:       assertEquals(43, Node.IS_CONSTANT_NAME);
580:       assertEquals(54, Node.SLASH_V);
581:       assertEquals(36, Node.QUOTED_PROP);
582:       assertEquals(53, Node.INPUT_ID);
583:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
584:       assertEquals(56, Node.CHANGE_TIME);
585:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
586:       assertEquals(43, Node.IS_CONSTANT_NAME);
587:       assertEquals(48, Node.DIRECTIVES);
588:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
589:       assertEquals(37, Node.OPT_ARG_NAME);
590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
591:       assertEquals(50, Node.FREE_CALL);
592:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
593:       assertEquals(4095, Node.COLUMN_MASK);
594:       assertEquals(12, Node.COLUMN_BITS);
595:       assertEquals(1, Node.DECR_FLAG);
596:       assertEquals(32, Node.INCRDECR_PROP);
597:       assertEquals(54, Node.SLASH_V);
598:       assertEquals(15, Node.NO_SIDE_EFFECTS);
599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
600:       assertEquals(30, Node.VAR_ARGS_NAME);
601:       assertEquals(52, Node.LENGTH);
602:       assertEquals(40, Node.ORIGINALNAME_PROP);
603:       assertEquals(57, Node.REFLECTED_OBJECT);
604:       assertEquals(51, Node.STATIC_SOURCE_FILE);
605:       assertEquals(49, Node.DIRECT_EVAL);
606:       assertEquals(46, Node.IS_NAMESPACE);
607:       assertEquals(2, Node.POST_FLAG);
608:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
609:       assertEquals(8, Node.FLAG_NO_THROWS);
610:       assertEquals(39, Node.EMPTY_BLOCK);
611:       assertEquals(47, Node.IS_DISPATCHER);
612:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
613:       assertEquals(29, Node.JSDOC_INFO_PROP);
614:       assertEquals(55, Node.INFERRED_FUNCTION);
615:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
616:       assertEquals(57, Node.LAST_PROP);
617:       assertEquals(52, Node.LENGTH);
618:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
619:       assertEquals(57, Node.REFLECTED_OBJECT);
620:       assertEquals(54, Node.SLASH_V);
621:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
622:       assertEquals(57, Node.LAST_PROP);
623:       assertEquals(1, Node.DECR_FLAG);
624:       assertEquals(50, Node.FREE_CALL);
625:       assertEquals(8, Node.FLAG_NO_THROWS);
626:       assertEquals(39, Node.EMPTY_BLOCK);
627:       assertEquals(15, Node.NO_SIDE_EFFECTS);
628:       assertEquals(48, Node.DIRECTIVES);
629:       assertEquals(32, Node.INCRDECR_PROP);
630:       assertEquals(56, Node.CHANGE_TIME);
631:       assertEquals(12, Node.COLUMN_BITS);
632:       assertEquals(49, Node.DIRECT_EVAL);
633:       assertEquals(37, Node.OPT_ARG_NAME);
634:       assertEquals(4095, Node.COLUMN_MASK);
635:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
636:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
637:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
638:       assertEquals(43, Node.IS_CONSTANT_NAME);
639:       assertEquals(36, Node.QUOTED_PROP);
640:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
641:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
642:       assertEquals(53, Node.INPUT_ID);
643:       assertEquals(55, Node.INFERRED_FUNCTION);
644:       assertEquals(29, Node.JSDOC_INFO_PROP);
645:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
647:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
648:       assertEquals(46, Node.IS_NAMESPACE);
649:       assertEquals(47, Node.IS_DISPATCHER);
650:       assertEquals(2, Node.POST_FLAG);
651:       assertEquals(30, Node.VAR_ARGS_NAME);
652:       assertEquals(40, Node.ORIGINALNAME_PROP);
653:       assertEquals(51, Node.STATIC_SOURCE_FILE);
654:       assertEquals(46, Node.IS_NAMESPACE);
655:       assertEquals(12, Node.COLUMN_BITS);
656:       assertEquals(49, Node.DIRECT_EVAL);
657:       assertEquals(57, Node.LAST_PROP);
658:       assertEquals(1, Node.DECR_FLAG);
659:       assertEquals(32, Node.INCRDECR_PROP);
660:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
661:       assertEquals(56, Node.CHANGE_TIME);
662:       assertEquals(15, Node.NO_SIDE_EFFECTS);
663:       assertEquals(54, Node.SLASH_V);
664:       assertEquals(29, Node.JSDOC_INFO_PROP);
665:       assertEquals(52, Node.LENGTH);
666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
667:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
668:       assertEquals(57, Node.REFLECTED_OBJECT);
669:       assertEquals(37, Node.OPT_ARG_NAME);
670:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
671:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
672:       assertEquals(55, Node.INFERRED_FUNCTION);
673:       assertEquals(4095, Node.COLUMN_MASK);
674:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
675:       assertEquals(48, Node.DIRECTIVES);
676:       assertEquals(8, Node.FLAG_NO_THROWS);
677:       assertEquals(39, Node.EMPTY_BLOCK);
678:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
679:       assertEquals(43, Node.IS_CONSTANT_NAME);
680:       assertEquals(36, Node.QUOTED_PROP);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
683:       assertEquals(50, Node.FREE_CALL);
684:       assertEquals(40, Node.ORIGINALNAME_PROP);
685:       assertEquals(2, Node.POST_FLAG);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(30, Node.VAR_ARGS_NAME);
689:       assertFalse(node0.equals((Object)node2));
690:       assertFalse(node0.equals((Object)node1));
691:       assertFalse(node1.equals((Object)node0));
692:       assertFalse(node1.equals((Object)node2));
693:       assertFalse(node2.equals((Object)node1));
694:       assertFalse(node2.equals((Object)node0));
695:       assertFalse(node3.equals((Object)node1));
696:       assertFalse(node3.equals((Object)node2));
697:       assertNotNull(node3);
698:       assertSame(node0, node3);
699:       assertNotSame(node1, node2);
700:       assertNotSame(node2, node1);
701:       assertSame(node3, node0);
702:       assertEquals(0, node0.getChildCount());
703:       assertFalse(node0.isCatch());
704:       assertFalse(node0.isSetterDef());
705:       assertFalse(node0.isVar());
706:       assertFalse(node0.isDefaultCase());
707:       assertFalse(node0.isTry());
708:       assertFalse(node0.isArrayLit());
709:       assertFalse(node0.isDebugger());
710:       assertFalse(node0.isFunction());
711:       assertEquals(2786, node0.getType());
712:       assertFalse(node0.isGetterDef());
713:       assertFalse(node0.isStringKey());
714:       assertFalse(node0.isParamList());
715:       assertEquals((-1), node0.getLineno());
716:       assertFalse(node0.hasMoreThanOneChild());
717:       assertFalse(node0.isNumber());
718:       assertFalse(node0.isIn());
719:       assertFalse(node0.isContinue());
720:       assertFalse(node0.isFor());
721:       assertFalse(node0.isCase());
722:       assertFalse(node0.isBlock());
723:       assertFalse(node0.isHook());
724:       assertFalse(node0.isInc());
725:       assertFalse(node0.isRegExp());
726:       assertFalse(node0.isNE());
727:       assertFalse(node0.isIf());
728:       assertFalse(node0.isGetProp());
729:       assertFalse(node0.isComma());
730:       assertFalse(node0.isObjectLit());
731:       assertFalse(node0.isInstanceOf());
732:       assertFalse(node0.isWith());
733:       assertFalse(node0.isThis());
734:       assertFalse(node0.isThrow());
735:       assertFalse(node0.hasOneChild());
736:       assertEquals((-1), node0.getCharno());
737:       assertFalse(node0.isCast());
738:       assertFalse(node0.isScript());
739:       assertFalse(node0.isFalse());
740:       assertFalse(node0.isString());
741:       assertFalse(node0.isNot());
742:       assertFalse(node0.isLabelName());
743:       assertEquals((-1), node0.getSourcePosition());
744:       assertFalse(node0.isSwitch());
745:       assertFalse(node0.isAnd());
746:       assertFalse(node0.isReturn());
747:       assertFalse(node0.isAssignAdd());
748:       assertFalse(node0.isOr());
749:       assertFalse(node0.isLabel());
750:       assertFalse(node0.isTypeOf());
751:       assertFalse(node0.isDo());
752:       assertFalse(node0.isAssign());
753:       assertFalse(node0.isEmpty());
754:       assertFalse(node0.isDec());
755:       assertFalse(node0.hasChildren());
756:       assertFalse(node0.isWhile());
757:       assertFalse(node0.isAdd());
758:       assertFalse(node0.isNew());
759:       assertFalse(node0.isExprResult());
760:       assertFalse(node0.isCall());
761:       assertFalse(node0.isName());
762:       assertFalse(node0.isDelProp());
763:       assertFalse(node0.isGetElem());
764:       assertFalse(node0.isBreak());
765:       assertFalse(node0.isVoid());
766:       assertFalse(node0.isNull());
767:       assertFalse(node0.isTrue());
768:       assertFalse(node1.isDefaultCase());
769:       assertFalse(node1.isFunction());
770:       assertFalse(node1.isRegExp());
771:       assertFalse(node1.isVoid());
772:       assertFalse(node1.isCatch());
773:       assertFalse(node1.isArrayLit());
774:       assertFalse(node1.isParamList());
775:       assertFalse(node1.isDebugger());
776:       assertFalse(node1.isNull());
777:       assertFalse(node1.isTrue());
778:       assertFalse(node1.isEmpty());
779:       assertFalse(node1.isSetterDef());
780:       assertEquals(0, node1.getChildCount());
781:       assertFalse(node1.isVar());
782:       assertFalse(node1.isWhile());
783:       assertFalse(node1.isString());
784:       assertFalse(node1.isDo());
785:       assertFalse(node1.isContinue());
786:       assertFalse(node1.isNew());
787:       assertFalse(node1.isAdd());
788:       assertFalse(node1.isOr());
789:       assertFalse(node1.hasChildren());
790:       assertFalse(node1.isBreak());
791:       assertFalse(node1.isDelProp());
792:       assertFalse(node1.isDec());
793:       assertEquals((-1), node1.getSourcePosition());
794:       assertFalse(node1.isAssign());
795:       assertFalse(node1.isTypeOf());
796:       assertFalse(node1.isName());
797:       assertFalse(node1.isGetProp());
798:       assertEquals(561, node1.getType());
799:       assertFalse(node1.isGetElem());
800:       assertFalse(node1.isCall());
801:       assertFalse(node1.isComma());
802:       assertFalse(node1.isReturn());
803:       assertFalse(node1.isNot());
804:       assertFalse(node1.isWith());
805:       assertFalse(node1.isScript());
806:       assertFalse(node1.isExprResult());
807:       assertFalse(node1.isObjectLit());
808:       assertFalse(node1.isAnd());
809:       assertFalse(node1.isLabelName());
810:       assertFalse(node1.isFalse());
811:       assertFalse(node1.isCast());
812:       assertFalse(node1.isAssignAdd());
813:       assertFalse(node1.isThrow());
814:       assertFalse(node1.isLabel());
815:       assertFalse(node1.isSwitch());
816:       assertFalse(node1.isCase());
817:       assertFalse(node1.isInc());
818:       assertFalse(node1.isIn());
819:       assertEquals((-1), node1.getLineno());
820:       assertEquals((-1), node1.getCharno());
821:       assertFalse(node1.isStringKey());
822:       assertFalse(node1.isNE());
823:       assertFalse(node1.isGetterDef());
824:       assertFalse(node1.isIf());
825:       assertFalse(node1.isNumber());
826:       assertFalse(node1.hasOneChild());
827:       assertFalse(node1.isInstanceOf());
828:       assertFalse(node1.hasMoreThanOneChild());
829:       assertFalse(node1.isTry());
830:       assertFalse(node1.isFor());
831:       assertFalse(node1.isBlock());
832:       assertFalse(node1.isHook());
833:       assertFalse(node1.isThis());
834:       assertFalse(node2.isSwitch());
835:       assertFalse(node2.isHook());
836:       assertEquals((-1), node2.getCharno());
837:       assertFalse(node2.isThrow());
838:       assertFalse(node2.isString());
839:       assertFalse(node2.isInc());
840:       assertFalse(node2.isCase());
841:       assertFalse(node2.isGetProp());
842:       assertFalse(node2.isGetterDef());
843:       assertEquals(2, node2.getChildCount());
844:       assertFalse(node2.isFalse());
845:       assertFalse(node2.isAnd());
846:       assertFalse(node2.isArrayLit());
847:       assertFalse(node2.isTry());
848:       assertFalse(node2.isFunction());
849:       assertFalse(node2.isRegExp());
850:       assertFalse(node2.isFor());
851:       assertFalse(node2.hasOneChild());
852:       assertFalse(node2.isScript());
853:       assertTrue(node2.hasChildren());
854:       assertFalse(node2.isNE());
855:       assertFalse(node2.isIn());
856:       assertFalse(node2.isThis());
857:       assertFalse(node2.isCatch());
858:       assertFalse(node2.isWith());
859:       assertFalse(node2.isInstanceOf());
860:       assertFalse(node2.isIf());
861:       assertEquals((-1), node2.getLineno());
862:       assertFalse(node2.isBlock());
863:       assertFalse(node2.isAdd());
864:       assertFalse(node2.isVar());
865:       assertFalse(node2.isWhile());
866:       assertFalse(node2.isDo());
867:       assertFalse(node2.isSetterDef());
868:       assertEquals(1038, node2.getType());
869:       assertFalse(node2.isNew());
870:       assertFalse(node2.isAssignAdd());
871:       assertFalse(node2.isParamList());
872:       assertFalse(node2.isNumber());
873:       assertFalse(node2.isLabel());
874:       assertEquals((-1), node2.getSourcePosition());
875:       assertFalse(node2.isStringKey());
876:       assertFalse(node2.isCast());
877:       assertFalse(node2.isContinue());
878:       assertFalse(node2.isLabelName());
879:       assertFalse(node2.isExprResult());
880:       assertFalse(node2.isVoid());
881:       assertFalse(node2.isTrue());
882:       assertFalse(node2.isNot());
883:       assertFalse(node2.isDebugger());
884:       assertFalse(node2.isEmpty());
885:       assertFalse(node2.isObjectLit());
886:       assertFalse(node2.isDefaultCase());
887:       assertFalse(node2.isDec());
888:       assertFalse(node2.isTypeOf());
889:       assertFalse(node2.isNull());
890:       assertFalse(node2.isReturn());
891:       assertFalse(node2.isAssign());
892:       assertFalse(node2.isComma());
893:       assertFalse(node2.isOr());
894:       assertFalse(node2.isGetElem());
895:       assertFalse(node2.isCall());
896:       assertFalse(node2.isName());
897:       assertTrue(node2.hasMoreThanOneChild());
898:       assertFalse(node2.isDelProp());
899:       assertFalse(node2.isBreak());
900:       assertFalse(node3.isReturn());
901:       assertFalse(node3.isLabel());
902:       assertFalse(node3.isOr());
903:       assertEquals((-1), node3.getLineno());
904:       assertFalse(node3.isAssignAdd());
905:       assertFalse(node3.isWhile());
906:       assertFalse(node3.isNumber());
907:       assertFalse(node3.isDo());
908:       assertEquals((-1), node3.getSourcePosition());
909:       assertFalse(node3.isAdd());
910:       assertFalse(node3.isNew());
911:       assertFalse(node3.isVar());
912:       assertFalse(node3.isStringKey());
913:       assertFalse(node3.isLabelName());
914:       assertFalse(node3.isContinue());
915:       assertFalse(node3.isCast());
916:       assertEquals(0, node3.getChildCount());
917:       assertFalse(node3.isAnd());
918:       assertFalse(node3.isNull());
919:       assertFalse(node3.isDefaultCase());
920:       assertFalse(node3.isNot());
921:       assertFalse(node3.isGetProp());
922:       assertFalse(node3.isObjectLit());
923:       assertFalse(node3.isVoid());
924:       assertFalse(node3.isTrue());
925:       assertFalse(node3.hasChildren());
926:       assertFalse(node3.isBreak());
927:       assertFalse(node3.isDelProp());
928:       assertFalse(node3.isTypeOf());
929:       assertFalse(node3.isAssign());
930:       assertFalse(node3.isName());
931:       assertFalse(node3.isDec());
932:       assertFalse(node3.isComma());
933:       assertFalse(node3.isExprResult());
934:       assertFalse(node3.isCall());
935:       assertFalse(node3.isGetElem());
936:       assertFalse(node3.isIn());
937:       assertFalse(node3.isNE());
938:       assertFalse(node3.isGetterDef());
939:       assertFalse(node3.isString());
940:       assertFalse(node3.isCase());
941:       assertFalse(node3.isInc());
942:       assertFalse(node3.isEmpty());
943:       assertFalse(node3.isArrayLit());
944:       assertEquals((-1), node3.getCharno());
945:       assertFalse(node3.isDebugger());
946:       assertFalse(node3.isThrow());
947:       assertFalse(node3.isSwitch());
948:       assertFalse(node3.isFunction());
949:       assertFalse(node3.isFalse());
950:       assertEquals(2786, node3.getType());
951:       assertFalse(node3.isThis());
952:       assertFalse(node3.isParamList());
953:       assertFalse(node3.isSetterDef());
954:       assertFalse(node3.isScript());
955:       assertFalse(node3.isHook());
956:       assertFalse(node3.isTry());
957:       assertFalse(node3.hasOneChild());
958:       assertFalse(node3.isBlock());
959:       assertFalse(node3.isFor());
960:       assertFalse(node3.isIf());
961:       assertFalse(node3.isWith());
962:       assertFalse(node3.isRegExp());
963:       assertFalse(node3.hasMoreThanOneChild());
964:       assertFalse(node3.isCatch());
965:       assertFalse(node3.isInstanceOf());
966:       
967:       boolean boolean0 = node0.isCase();
968:       assertEquals(4095, Node.COLUMN_MASK);
969:       assertEquals(55, Node.INFERRED_FUNCTION);
970:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
971:       assertEquals(8, Node.FLAG_NO_THROWS);
972:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
973:       assertEquals(39, Node.EMPTY_BLOCK);
974:       assertEquals(53, Node.INPUT_ID);
975:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
976:       assertEquals(57, Node.REFLECTED_OBJECT);
977:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
978:       assertEquals(52, Node.LENGTH);
979:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
980:       assertEquals(56, Node.CHANGE_TIME);
981:       assertEquals(36, Node.QUOTED_PROP);
982:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
983:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
984:       assertEquals(37, Node.OPT_ARG_NAME);
985:       assertEquals(48, Node.DIRECTIVES);
986:       assertEquals(49, Node.DIRECT_EVAL);
987:       assertEquals(51, Node.STATIC_SOURCE_FILE);
988:       assertEquals(12, Node.COLUMN_BITS);
989:       assertEquals(46, Node.IS_NAMESPACE);
990:       assertEquals(2, Node.POST_FLAG);
991:       assertEquals(30, Node.VAR_ARGS_NAME);
992:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
993:       assertEquals(15, Node.NO_SIDE_EFFECTS);
994:       assertEquals(57, Node.LAST_PROP);
995:       assertEquals(47, Node.IS_DISPATCHER);
996:       assertEquals(29, Node.JSDOC_INFO_PROP);
997:       assertEquals(32, Node.INCRDECR_PROP);
998:       assertEquals(1, Node.DECR_FLAG);
999:       assertEquals(40, Node.ORIGINALNAME_PROP);
1000:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1001:       assertEquals(50, Node.FREE_CALL);
1002:       assertEquals(43, Node.IS_CONSTANT_NAME);
1003:       assertEquals(54, Node.SLASH_V);
1004:       assertFalse(node0.equals((Object)node2));
1005:       assertFalse(node0.equals((Object)node1));
1006:       assertSame(node0, node3);
1007:       assertFalse(boolean0);
1008:       assertEquals(0, node0.getChildCount());
1009:       assertFalse(node0.isCatch());
1010:       assertFalse(node0.isSetterDef());
1011:       assertFalse(node0.isVar());
1012:       assertFalse(node0.isDefaultCase());
1013:       assertFalse(node0.isTry());
1014:       assertFalse(node0.isArrayLit());
1015:       assertFalse(node0.isDebugger());
1016:       assertFalse(node0.isFunction());
1017:       assertEquals(2786, node0.getType());
1018:       assertFalse(node0.isGetterDef());
1019:       assertFalse(node0.isStringKey());
1020:       assertFalse(node0.isParamList());
1021:       assertEquals((-1), node0.getLineno());
1022:       assertFalse(node0.hasMoreThanOneChild());
1023:       assertFalse(node0.isNumber());
1024:       assertFalse(node0.isIn());
1025:       assertFalse(node0.isContinue());
1026:       assertFalse(node0.isFor());
1027:       assertFalse(node0.isCase());
1028:       assertFalse(node0.isBlock());
1029:       assertFalse(node0.isHook());
1030:       assertFalse(node0.isInc());
1031:       assertFalse(node0.isRegExp());
1032:       assertFalse(node0.isNE());
1033:       assertFalse(node0.isIf());
1034:       assertFalse(node0.isGetProp());
1035:       assertFalse(node0.isComma());
1036:       assertFalse(node0.isObjectLit());
1037:       assertFalse(node0.isInstanceOf());
1038:       assertFalse(node0.isWith());
1039:       assertFalse(node0.isThis());
1040:       assertFalse(node0.isThrow());
1041:       assertFalse(node0.hasOneChild());
1042:       assertEquals((-1), node0.getCharno());
1043:       assertFalse(node0.isCast());
1044:       assertFalse(node0.isScript());
1045:       assertFalse(node0.isFalse());
1046:       assertFalse(node0.isString());
1047:       assertFalse(node0.isNot());
1048:       assertFalse(node0.isLabelName());
1049:       assertEquals((-1), node0.getSourcePosition());
1050:       assertFalse(node0.isSwitch());
1051:       assertFalse(node0.isAnd());
1052:       assertFalse(node0.isReturn());
1053:       assertFalse(node0.isAssignAdd());
1054:       assertFalse(node0.isOr());
1055:       assertFalse(node0.isLabel());
1056:       assertFalse(node0.isTypeOf());
1057:       assertFalse(node0.isDo());
1058:       assertFalse(node0.isAssign());
1059:       assertFalse(node0.isEmpty());
1060:       assertFalse(node0.isDec());
1061:       assertFalse(node0.hasChildren());
1062:       assertFalse(node0.isWhile());
1063:       assertFalse(node0.isAdd());
1064:       assertFalse(node0.isNew());
1065:       assertFalse(node0.isExprResult());
1066:       assertFalse(node0.isCall());
1067:       assertFalse(node0.isName());
1068:       assertFalse(node0.isDelProp());
1069:       assertFalse(node0.isGetElem());
1070:       assertFalse(node0.isBreak());
1071:       assertFalse(node0.isVoid());
1072:       assertFalse(node0.isNull());
1073:       assertFalse(node0.isTrue());
1074:       
1075:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
1076:       assertEquals(4095, Node.COLUMN_MASK);
1077:       assertEquals(55, Node.INFERRED_FUNCTION);
1078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1079:       assertEquals(8, Node.FLAG_NO_THROWS);
1080:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1081:       assertEquals(39, Node.EMPTY_BLOCK);
1082:       assertEquals(53, Node.INPUT_ID);
1083:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1084:       assertEquals(57, Node.REFLECTED_OBJECT);
1085:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1086:       assertEquals(52, Node.LENGTH);
1087:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1088:       assertEquals(56, Node.CHANGE_TIME);
1089:       assertEquals(36, Node.QUOTED_PROP);
1090:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1091:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1092:       assertEquals(37, Node.OPT_ARG_NAME);
1093:       assertEquals(48, Node.DIRECTIVES);
1094:       assertEquals(49, Node.DIRECT_EVAL);
1095:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1096:       assertEquals(12, Node.COLUMN_BITS);
1097:       assertEquals(46, Node.IS_NAMESPACE);
1098:       assertEquals(2, Node.POST_FLAG);
1099:       assertEquals(30, Node.VAR_ARGS_NAME);
1100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1101:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1102:       assertEquals(57, Node.LAST_PROP);
1103:       assertEquals(47, Node.IS_DISPATCHER);
1104:       assertEquals(29, Node.JSDOC_INFO_PROP);
1105:       assertEquals(32, Node.INCRDECR_PROP);
1106:       assertEquals(1, Node.DECR_FLAG);
1107:       assertEquals(40, Node.ORIGINALNAME_PROP);
1108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1109:       assertEquals(50, Node.FREE_CALL);
1110:       assertEquals(43, Node.IS_CONSTANT_NAME);
1111:       assertEquals(54, Node.SLASH_V);
1112:       assertFalse(node0.equals((Object)node2));
1113:       assertFalse(node0.equals((Object)node1));
1114:       assertNotNull(node_FileLevelJsDocBuilder0);
1115:       assertEquals(0, node0.getChildCount());
1116:       assertFalse(node0.isCatch());
1117:       assertFalse(node0.isSetterDef());
1118:       assertFalse(node0.isVar());
1119:       assertFalse(node0.isDefaultCase());
1120:       assertFalse(node0.isTry());
1121:       assertFalse(node0.isArrayLit());
1122:       assertFalse(node0.isDebugger());
1123:       assertFalse(node0.isFunction());
1124:       assertEquals(2786, node0.getType());
1125:       assertFalse(node0.isGetterDef());
1126:       assertFalse(node0.isStringKey());
1127:       assertFalse(node0.isParamList());
1128:       assertEquals((-1), node0.getLineno());
1129:       assertFalse(node0.hasMoreThanOneChild());
1130:       assertFalse(node0.isNumber());
1131:       assertFalse(node0.isIn());
1132:       assertFalse(node0.isContinue());
1133:       assertFalse(node0.isFor());
1134:       assertFalse(node0.isCase());
1135:       assertFalse(node0.isBlock());
1136:       assertFalse(node0.isHook());
1137:       assertFalse(node0.isInc());
1138:       assertFalse(node0.isRegExp());
1139:       assertFalse(node0.isNE());
1140:       assertFalse(node0.isIf());
1141:       assertFalse(node0.isGetProp());
1142:       assertFalse(node0.isComma());
1143:       assertFalse(node0.isObjectLit());
1144:       assertFalse(node0.isInstanceOf());
1145:       assertFalse(node0.isWith());
1146:       assertFalse(node0.isThis());
1147:       assertFalse(node0.isThrow());
1148:       assertFalse(node0.hasOneChild());
1149:       assertEquals((-1), node0.getCharno());
1150:       assertFalse(node0.isCast());
1151:       assertFalse(node0.isScript());
1152:       assertFalse(node0.isFalse());
1153:       assertFalse(node0.isString());
1154:       assertFalse(node0.isNot());
1155:       assertFalse(node0.isLabelName());
1156:       assertEquals((-1), node0.getSourcePosition());
1157:       assertFalse(node0.isSwitch());
1158:       assertFalse(node0.isAnd());
1159:       assertFalse(node0.isReturn());
1160:       assertFalse(node0.isAssignAdd());
1161:       assertFalse(node0.isOr());
1162:       assertFalse(node0.isLabel());
1163:       assertFalse(node0.isTypeOf());
1164:       assertFalse(node0.isDo());
1165:       assertFalse(node0.isAssign());
1166:       assertFalse(node0.isEmpty());
1167:       assertFalse(node0.isDec());
1168:       assertFalse(node0.hasChildren());
1169:       assertFalse(node0.isWhile());
1170:       assertFalse(node0.isAdd());
1171:       assertFalse(node0.isNew());
1172:       assertFalse(node0.isExprResult());
1173:       assertFalse(node0.isCall());
1174:       assertFalse(node0.isName());
1175:       assertFalse(node0.isDelProp());
1176:       assertFalse(node0.isGetElem());
1177:       assertFalse(node0.isBreak());
1178:       assertFalse(node0.isVoid());
1179:       assertFalse(node0.isNull());
1180:       assertFalse(node0.isTrue());
1181:       
1182:       node_FileLevelJsDocBuilder0.append("wc,fK~F");
1183:       assertEquals(4095, Node.COLUMN_MASK);
1184:       assertEquals(55, Node.INFERRED_FUNCTION);
1185:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1186:       assertEquals(8, Node.FLAG_NO_THROWS);
1187:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1188:       assertEquals(39, Node.EMPTY_BLOCK);
1189:       assertEquals(53, Node.INPUT_ID);
1190:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1191:       assertEquals(57, Node.REFLECTED_OBJECT);
1192:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1193:       assertEquals(52, Node.LENGTH);
1194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1195:       assertEquals(56, Node.CHANGE_TIME);
1196:       assertEquals(36, Node.QUOTED_PROP);
1197:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1199:       assertEquals(37, Node.OPT_ARG_NAME);
1200:       assertEquals(48, Node.DIRECTIVES);
1201:       assertEquals(49, Node.DIRECT_EVAL);
1202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1203:       assertEquals(12, Node.COLUMN_BITS);
1204:       assertEquals(46, Node.IS_NAMESPACE);
1205:       assertEquals(2, Node.POST_FLAG);
1206:       assertEquals(30, Node.VAR_ARGS_NAME);
1207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1209:       assertEquals(57, Node.LAST_PROP);
1210:       assertEquals(47, Node.IS_DISPATCHER);
1211:       assertEquals(29, Node.JSDOC_INFO_PROP);
1212:       assertEquals(32, Node.INCRDECR_PROP);
1213:       assertEquals(1, Node.DECR_FLAG);
1214:       assertEquals(40, Node.ORIGINALNAME_PROP);
1215:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1216:       assertEquals(50, Node.FREE_CALL);
1217:       assertEquals(43, Node.IS_CONSTANT_NAME);
1218:       assertEquals(54, Node.SLASH_V);
1219:       assertFalse(node0.equals((Object)node2));
1220:       assertFalse(node0.equals((Object)node1));
1221:       assertSame(node0, node3);
1222:       assertEquals(0, node0.getChildCount());
1223:       assertFalse(node0.isCatch());
1224:       assertFalse(node0.isSetterDef());
1225:       assertFalse(node0.isVar());
1226:       assertFalse(node0.isDefaultCase());
1227:       assertFalse(node0.isTry());
1228:       assertFalse(node0.isArrayLit());
1229:       assertFalse(node0.isDebugger());
1230:       assertFalse(node0.isFunction());
1231:       assertEquals(2786, node0.getType());
1232:       assertFalse(node0.isGetterDef());
1233:       assertFalse(node0.isStringKey());
1234:       assertFalse(node0.isParamList());
1235:       assertEquals((-1), node0.getLineno());
1236:       assertFalse(node0.hasMoreThanOneChild());
1237:       assertFalse(node0.isNumber());
1238:       assertFalse(node0.isIn());
1239:       assertFalse(node0.isContinue());
1240:       assertFalse(node0.isFor());
1241:       assertFalse(node0.isCase());
1242:       assertFalse(node0.isBlock());
1243:       assertFalse(node0.isHook());
1244:       assertFalse(node0.isInc());
1245:       assertFalse(node0.isRegExp());
1246:       assertFalse(node0.isNE());
1247:       assertFalse(node0.isIf());
1248:       assertFalse(node0.isGetProp());
1249:       assertFalse(node0.isComma());
1250:       assertFalse(node0.isObjectLit());
1251:       assertFalse(node0.isInstanceOf());
1252:       assertFalse(node0.isWith());
1253:       assertFalse(node0.isThis());
1254:       assertFalse(node0.isThrow());
1255:       assertFalse(node0.hasOneChild());
1256:       assertEquals((-1), node0.getCharno());
1257:       assertFalse(node0.isCast());
1258:       assertFalse(node0.isScript());
1259:       assertFalse(node0.isFalse());
1260:       assertFalse(node0.isString());
1261:       assertFalse(node0.isNot());
1262:       assertFalse(node0.isLabelName());
1263:       assertEquals((-1), node0.getSourcePosition());
1264:       assertFalse(node0.isSwitch());
1265:       assertFalse(node0.isAnd());
1266:       assertFalse(node0.isReturn());
1267:       assertFalse(node0.isAssignAdd());
1268:       assertFalse(node0.isOr());
1269:       assertFalse(node0.isLabel());
1270:       assertFalse(node0.isTypeOf());
1271:       assertFalse(node0.isDo());
1272:       assertFalse(node0.isAssign());
1273:       assertFalse(node0.isEmpty());
1274:       assertFalse(node0.isDec());
1275:       assertFalse(node0.hasChildren());
1276:       assertFalse(node0.isWhile());
1277:       assertFalse(node0.isAdd());
1278:       assertFalse(node0.isNew());
1279:       assertFalse(node0.isExprResult());
1280:       assertFalse(node0.isCall());
1281:       assertFalse(node0.isName());
1282:       assertFalse(node0.isDelProp());
1283:       assertFalse(node0.isGetElem());
1284:       assertFalse(node0.isBreak());
1285:       assertFalse(node0.isVoid());
1286:       assertFalse(node0.isNull());
1287:       assertFalse(node0.isTrue());
1288:       
1289:       String string0 = node2.getSourceFileName();
1290:       assertEquals(4095, Node.COLUMN_MASK);
1291:       assertEquals(55, Node.INFERRED_FUNCTION);
1292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1293:       assertEquals(8, Node.FLAG_NO_THROWS);
1294:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1295:       assertEquals(39, Node.EMPTY_BLOCK);
1296:       assertEquals(53, Node.INPUT_ID);
1297:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1298:       assertEquals(57, Node.REFLECTED_OBJECT);
1299:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1300:       assertEquals(52, Node.LENGTH);
1301:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1302:       assertEquals(56, Node.CHANGE_TIME);
1303:       assertEquals(36, Node.QUOTED_PROP);
1304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1305:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1306:       assertEquals(37, Node.OPT_ARG_NAME);
1307:       assertEquals(48, Node.DIRECTIVES);
1308:       assertEquals(49, Node.DIRECT_EVAL);
1309:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1310:       assertEquals(12, Node.COLUMN_BITS);
1311:       assertEquals(46, Node.IS_NAMESPACE);
1312:       assertEquals(2, Node.POST_FLAG);
1313:       assertEquals(30, Node.VAR_ARGS_NAME);
1314:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1316:       assertEquals(57, Node.LAST_PROP);
1317:       assertEquals(47, Node.IS_DISPATCHER);
1318:       assertEquals(29, Node.JSDOC_INFO_PROP);
1319:       assertEquals(32, Node.INCRDECR_PROP);
1320:       assertEquals(1, Node.DECR_FLAG);
1321:       assertEquals(40, Node.ORIGINALNAME_PROP);
1322:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1323:       assertEquals(50, Node.FREE_CALL);
1324:       assertEquals(43, Node.IS_CONSTANT_NAME);
1325:       assertEquals(54, Node.SLASH_V);
1326:       assertEquals(36, Node.QUOTED_PROP);
1327:       assertEquals(53, Node.INPUT_ID);
1328:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1329:       assertEquals(56, Node.CHANGE_TIME);
1330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1331:       assertEquals(43, Node.IS_CONSTANT_NAME);
1332:       assertEquals(48, Node.DIRECTIVES);
1333:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1334:       assertEquals(37, Node.OPT_ARG_NAME);
1335:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1336:       assertEquals(50, Node.FREE_CALL);
1337:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1338:       assertEquals(4095, Node.COLUMN_MASK);
1339:       assertEquals(12, Node.COLUMN_BITS);
1340:       assertEquals(1, Node.DECR_FLAG);
1341:       assertEquals(32, Node.INCRDECR_PROP);
1342:       assertEquals(54, Node.SLASH_V);
1343:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1345:       assertEquals(30, Node.VAR_ARGS_NAME);
1346:       assertEquals(52, Node.LENGTH);
1347:       assertEquals(40, Node.ORIGINALNAME_PROP);
1348:       assertEquals(57, Node.REFLECTED_OBJECT);
1349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1350:       assertEquals(49, Node.DIRECT_EVAL);
1351:       assertEquals(46, Node.IS_NAMESPACE);
1352:       assertEquals(2, Node.POST_FLAG);
1353:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1354:       assertEquals(8, Node.FLAG_NO_THROWS);
1355:       assertEquals(39, Node.EMPTY_BLOCK);
1356:       assertEquals(47, Node.IS_DISPATCHER);
1357:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1358:       assertEquals(29, Node.JSDOC_INFO_PROP);
1359:       assertEquals(55, Node.INFERRED_FUNCTION);
1360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1361:       assertEquals(57, Node.LAST_PROP);
1362:       assertEquals(52, Node.LENGTH);
1363:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1364:       assertEquals(57, Node.REFLECTED_OBJECT);
1365:       assertEquals(54, Node.SLASH_V);
1366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1367:       assertEquals(57, Node.LAST_PROP);
1368:       assertEquals(1, Node.DECR_FLAG);
1369:       assertEquals(50, Node.FREE_CALL);
1370:       assertEquals(8, Node.FLAG_NO_THROWS);
1371:       assertEquals(39, Node.EMPTY_BLOCK);
1372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1373:       assertEquals(48, Node.DIRECTIVES);
1374:       assertEquals(32, Node.INCRDECR_PROP);
1375:       assertEquals(56, Node.CHANGE_TIME);
1376:       assertEquals(12, Node.COLUMN_BITS);
1377:       assertEquals(49, Node.DIRECT_EVAL);
1378:       assertEquals(37, Node.OPT_ARG_NAME);
1379:       assertEquals(4095, Node.COLUMN_MASK);
1380:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1381:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1383:       assertEquals(43, Node.IS_CONSTANT_NAME);
1384:       assertEquals(36, Node.QUOTED_PROP);
1385:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1386:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1387:       assertEquals(53, Node.INPUT_ID);
1388:       assertEquals(55, Node.INFERRED_FUNCTION);
1389:       assertEquals(29, Node.JSDOC_INFO_PROP);
1390:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1391:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1392:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1393:       assertEquals(46, Node.IS_NAMESPACE);
1394:       assertEquals(47, Node.IS_DISPATCHER);
1395:       assertEquals(2, Node.POST_FLAG);
1396:       assertEquals(30, Node.VAR_ARGS_NAME);
1397:       assertEquals(40, Node.ORIGINALNAME_PROP);
1398:       assertFalse(node0.equals((Object)node2));
1399:       assertFalse(node0.equals((Object)node1));
1400:       assertFalse(node1.equals((Object)node3));
1401:       assertFalse(node1.equals((Object)node0));
1402:       assertFalse(node1.equals((Object)node2));
1403:       assertFalse(node2.equals((Object)node1));
1404:       assertFalse(node2.equals((Object)node0));
1405:       assertFalse(node2.equals((Object)node3));
1406:       assertNull(string0);
1407:       assertSame(node0, node3);
1408:       assertNotSame(node1, node2);
1409:       assertNotSame(node2, node1);
1410:       assertEquals(0, node0.getChildCount());
1411:       assertFalse(node0.isCatch());
1412:       assertFalse(node0.isSetterDef());
1413:       assertFalse(node0.isVar());
1414:       assertFalse(node0.isDefaultCase());
1415:       assertFalse(node0.isTry());
1416:       assertFalse(node0.isArrayLit());
1417:       assertFalse(node0.isDebugger());
1418:       assertFalse(node0.isFunction());
1419:       assertEquals(2786, node0.getType());
1420:       assertFalse(node0.isGetterDef());
1421:       assertFalse(node0.isStringKey());
1422:       assertFalse(node0.isParamList());
1423:       assertEquals((-1), node0.getLineno());
1424:       assertFalse(node0.hasMoreThanOneChild());
1425:       assertFalse(node0.isNumber());
1426:       assertFalse(node0.isIn());
1427:       assertFalse(node0.isContinue());
1428:       assertFalse(node0.isFor());
1429:       assertFalse(node0.isCase());
1430:       assertFalse(node0.isBlock());
1431:       assertFalse(node0.isHook());
1432:       assertFalse(node0.isInc());
1433:       assertFalse(node0.isRegExp());
1434:       assertFalse(node0.isNE());
1435:       assertFalse(node0.isIf());
1436:       assertFalse(node0.isGetProp());
1437:       assertFalse(node0.isComma());
1438:       assertFalse(node0.isObjectLit());
1439:       assertFalse(node0.isInstanceOf());
1440:       assertFalse(node0.isWith());
1441:       assertFalse(node0.isThis());
1442:       assertFalse(node0.isThrow());
1443:       assertFalse(node0.hasOneChild());
1444:       assertEquals((-1), node0.getCharno());
1445:       assertFalse(node0.isCast());
1446:       assertFalse(node0.isScript());
1447:       assertFalse(node0.isFalse());
1448:       assertFalse(node0.isString());
1449:       assertFalse(node0.isNot());
1450:       assertFalse(node0.isLabelName());
1451:       assertEquals((-1), node0.getSourcePosition());
1452:       assertFalse(node0.isSwitch());
1453:       assertFalse(node0.isAnd());
1454:       assertFalse(node0.isReturn());
1455:       assertFalse(node0.isAssignAdd());
1456:       assertFalse(node0.isOr());
1457:       assertFalse(node0.isLabel());
1458:       assertFalse(node0.isTypeOf());
1459:       assertFalse(node0.isDo());
1460:       assertFalse(node0.isAssign());
1461:       assertFalse(node0.isEmpty());
1462:       assertFalse(node0.isDec());
1463:       assertFalse(node0.hasChildren());
1464:       assertFalse(node0.isWhile());
1465:       assertFalse(node0.isAdd());
1466:       assertFalse(node0.isNew());
1467:       assertFalse(node0.isExprResult());
1468:       assertFalse(node0.isCall());
1469:       assertFalse(node0.isName());
1470:       assertFalse(node0.isDelProp());
1471:       assertFalse(node0.isGetElem());
1472:       assertFalse(node0.isBreak());
1473:       assertFalse(node0.isVoid());
1474:       assertFalse(node0.isNull());
1475:       assertFalse(node0.isTrue());
1476:       assertFalse(node1.isDefaultCase());
1477:       assertFalse(node1.isFunction());
1478:       assertFalse(node1.isRegExp());
1479:       assertFalse(node1.isVoid());
1480:       assertFalse(node1.isCatch());
1481:       assertFalse(node1.isArrayLit());
1482:       assertFalse(node1.isParamList());
1483:       assertFalse(node1.isDebugger());
1484:       assertFalse(node1.isNull());
1485:       assertFalse(node1.isTrue());
1486:       assertFalse(node1.isEmpty());
1487:       assertFalse(node1.isSetterDef());
1488:       assertEquals(0, node1.getChildCount());
1489:       assertFalse(node1.isVar());
1490:       assertFalse(node1.isWhile());
1491:       assertFalse(node1.isString());
1492:       assertFalse(node1.isDo());
1493:       assertFalse(node1.isContinue());
1494:       assertFalse(node1.isNew());
1495:       assertFalse(node1.isAdd());
1496:       assertFalse(node1.isOr());
1497:       assertFalse(node1.hasChildren());
1498:       assertFalse(node1.isBreak());
1499:       assertFalse(node1.isDelProp());
1500:       assertFalse(node1.isDec());
1501:       assertEquals((-1), node1.getSourcePosition());
1502:       assertFalse(node1.isAssign());
1503:       assertFalse(node1.isTypeOf());
1504:       assertFalse(node1.isName());
1505:       assertFalse(node1.isGetProp());
1506:       assertEquals(561, node1.getType());
1507:       assertFalse(node1.isGetElem());
1508:       assertFalse(node1.isCall());
1509:       assertFalse(node1.isComma());
1510:       assertFalse(node1.isReturn());
1511:       assertFalse(node1.isNot());
1512:       assertFalse(node1.isWith());
1513:       assertFalse(node1.isScript());
1514:       assertFalse(node1.isExprResult());
1515:       assertFalse(node1.isObjectLit());
1516:       assertFalse(node1.isAnd());
1517:       assertFalse(node1.isLabelName());
1518:       assertFalse(node1.isFalse());
1519:       assertFalse(node1.isCast());
1520:       assertFalse(node1.isAssignAdd());
1521:       assertFalse(node1.isThrow());
1522:       assertFalse(node1.isLabel());
1523:       assertFalse(node1.isSwitch());
1524:       assertFalse(node1.isCase());
1525:       assertFalse(node1.isInc());
1526:       assertFalse(node1.isIn());
1527:       assertEquals((-1), node1.getLineno());
1528:       assertEquals((-1), node1.getCharno());
1529:       assertFalse(node1.isStringKey());
1530:       assertFalse(node1.isNE());
1531:       assertFalse(node1.isGetterDef());
1532:       assertFalse(node1.isIf());
1533:       assertFalse(node1.isNumber());
1534:       assertFalse(node1.hasOneChild());
1535:       assertFalse(node1.isInstanceOf());
1536:       assertFalse(node1.hasMoreThanOneChild());
1537:       assertFalse(node1.isTry());
1538:       assertFalse(node1.isFor());
1539:       assertFalse(node1.isBlock());
1540:       assertFalse(node1.isHook());
1541:       assertFalse(node1.isThis());
1542:       assertFalse(node2.isSwitch());
1543:       assertFalse(node2.isHook());
1544:       assertEquals((-1), node2.getCharno());
1545:       assertFalse(node2.isThrow());
1546:       assertFalse(node2.isString());
1547:       assertFalse(node2.isInc());
1548:       assertFalse(node2.isCase());
1549:       assertFalse(node2.isGetProp());
1550:       assertFalse(node2.isGetterDef());
1551:       assertEquals(2, node2.getChildCount());
1552:       assertFalse(node2.isFalse());
1553:       assertFalse(node2.isAnd());
1554:       assertFalse(node2.isArrayLit());
1555:       assertFalse(node2.isTry());
1556:       assertFalse(node2.isFunction());
1557:       assertFalse(node2.isRegExp());
1558:       assertFalse(node2.isFor());
1559:       assertFalse(node2.hasOneChild());
1560:       assertFalse(node2.isScript());
1561:       assertTrue(node2.hasChildren());
1562:       assertFalse(node2.isNE());
1563:       assertFalse(node2.isIn());
1564:       assertFalse(node2.isThis());
1565:       assertFalse(node2.isCatch());
1566:       assertFalse(node2.isWith());
1567:       assertFalse(node2.isInstanceOf());
1568:       assertFalse(node2.isIf());
1569:       assertEquals((-1), node2.getLineno());
1570:       assertFalse(node2.isBlock());
1571:       assertFalse(node2.isAdd());
1572:       assertFalse(node2.isVar());
1573:       assertFalse(node2.isWhile());
1574:       assertFalse(node2.isDo());
1575:       assertFalse(node2.isSetterDef());
1576:       assertEquals(1038, node2.getType());
1577:       assertFalse(node2.isNew());
1578:       assertFalse(node2.isAssignAdd());
1579:       assertFalse(node2.isParamList());
1580:       assertFalse(node2.isNumber());
1581:       assertFalse(node2.isLabel());
1582:       assertEquals((-1), node2.getSourcePosition());
1583:       assertFalse(node2.isStringKey());
1584:       assertFalse(node2.isCast());
1585:       assertFalse(node2.isContinue());
1586:       assertFalse(node2.isLabelName());
1587:       assertFalse(node2.isExprResult());
1588:       assertFalse(node2.isVoid());
1589:       assertFalse(node2.isTrue());
1590:       assertFalse(node2.isNot());
1591:       assertFalse(node2.isDebugger());
1592:       assertFalse(node2.isEmpty());
1593:       assertFalse(node2.isObjectLit());
1594:       assertFalse(node2.isDefaultCase());
1595:       assertFalse(node2.isDec());
1596:       assertFalse(node2.isTypeOf());
1597:       assertFalse(node2.isNull());
1598:       assertFalse(node2.isReturn());
1599:       assertFalse(node2.isAssign());
1600:       assertFalse(node2.isComma());
1601:       assertFalse(node2.isOr());
1602:       assertFalse(node2.isGetElem());
1603:       assertFalse(node2.isCall());
1604:       assertFalse(node2.isName());
1605:       assertTrue(node2.hasMoreThanOneChild());
1606:       assertFalse(node2.isDelProp());
1607:       assertFalse(node2.isBreak());
1608:       
1609:       int int0 = node2.getLineno();
1610:       assertEquals(4095, Node.COLUMN_MASK);
1611:       assertEquals(55, Node.INFERRED_FUNCTION);
1612:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1613:       assertEquals(8, Node.FLAG_NO_THROWS);
1614:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1615:       assertEquals(39, Node.EMPTY_BLOCK);
1616:       assertEquals(53, Node.INPUT_ID);
1617:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1618:       assertEquals(57, Node.REFLECTED_OBJECT);
1619:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1620:       assertEquals(52, Node.LENGTH);
1621:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1622:       assertEquals(56, Node.CHANGE_TIME);
1623:       assertEquals(36, Node.QUOTED_PROP);
1624:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1625:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1626:       assertEquals(37, Node.OPT_ARG_NAME);
1627:       assertEquals(48, Node.DIRECTIVES);
1628:       assertEquals(49, Node.DIRECT_EVAL);
1629:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1630:       assertEquals(12, Node.COLUMN_BITS);
1631:       assertEquals(46, Node.IS_NAMESPACE);
1632:       assertEquals(2, Node.POST_FLAG);
1633:       assertEquals(30, Node.VAR_ARGS_NAME);
1634:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1636:       assertEquals(57, Node.LAST_PROP);
1637:       assertEquals(47, Node.IS_DISPATCHER);
1638:       assertEquals(29, Node.JSDOC_INFO_PROP);
1639:       assertEquals(32, Node.INCRDECR_PROP);
1640:       assertEquals(1, Node.DECR_FLAG);
1641:       assertEquals(40, Node.ORIGINALNAME_PROP);
1642:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1643:       assertEquals(50, Node.FREE_CALL);
1644:       assertEquals(43, Node.IS_CONSTANT_NAME);
1645:       assertEquals(54, Node.SLASH_V);
1646:       assertEquals(36, Node.QUOTED_PROP);
1647:       assertEquals(53, Node.INPUT_ID);
1648:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1649:       assertEquals(56, Node.CHANGE_TIME);
1650:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1651:       assertEquals(43, Node.IS_CONSTANT_NAME);
1652:       assertEquals(48, Node.DIRECTIVES);
1653:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1654:       assertEquals(37, Node.OPT_ARG_NAME);
1655:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1656:       assertEquals(50, Node.FREE_CALL);
1657:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1658:       assertEquals(4095, Node.COLUMN_MASK);
1659:       assertEquals(12, Node.COLUMN_BITS);
1660:       assertEquals(1, Node.DECR_FLAG);
1661:       assertEquals(32, Node.INCRDECR_PROP);
1662:       assertEquals(54, Node.SLASH_V);
1663:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1664:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1665:       assertEquals(30, Node.VAR_ARGS_NAME);
1666:       assertEquals(52, Node.LENGTH);
1667:       assertEquals(40, Node.ORIGINALNAME_PROP);
1668:       assertEquals(57, Node.REFLECTED_OBJECT);
1669:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1670:       assertEquals(49, Node.DIRECT_EVAL);
1671:       assertEquals(46, Node.IS_NAMESPACE);
1672:       assertEquals(2, Node.POST_FLAG);
1673:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1674:       assertEquals(8, Node.FLAG_NO_THROWS);
1675:       assertEquals(39, Node.EMPTY_BLOCK);
1676:       assertEquals(47, Node.IS_DISPATCHER);
1677:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1678:       assertEquals(29, Node.JSDOC_INFO_PROP);
1679:       assertEquals(55, Node.INFERRED_FUNCTION);
1680:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1681:       assertEquals(57, Node.LAST_PROP);
1682:       assertEquals(52, Node.LENGTH);
1683:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1684:       assertEquals(57, Node.REFLECTED_OBJECT);
1685:       assertEquals(54, Node.SLASH_V);
1686:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1687:       assertEquals(57, Node.LAST_PROP);
1688:       assertEquals(1, Node.DECR_FLAG);
1689:       assertEquals(50, Node.FREE_CALL);
1690:       assertEquals(8, Node.FLAG_NO_THROWS);
1691:       assertEquals(39, Node.EMPTY_BLOCK);
1692:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1693:       assertEquals(48, Node.DIRECTIVES);
1694:       assertEquals(32, Node.INCRDECR_PROP);
1695:       assertEquals(56, Node.CHANGE_TIME);
1696:       assertEquals(12, Node.COLUMN_BITS);
1697:       assertEquals(49, Node.DIRECT_EVAL);
1698:       assertEquals(37, Node.OPT_ARG_NAME);
1699:       assertEquals(4095, Node.COLUMN_MASK);
1700:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1701:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1702:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1703:       assertEquals(43, Node.IS_CONSTANT_NAME);
1704:       assertEquals(36, Node.QUOTED_PROP);
1705:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1706:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1707:       assertEquals(53, Node.INPUT_ID);
1708:       assertEquals(55, Node.INFERRED_FUNCTION);
1709:       assertEquals(29, Node.JSDOC_INFO_PROP);
1710:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1711:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1712:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1713:       assertEquals(46, Node.IS_NAMESPACE);
1714:       assertEquals(47, Node.IS_DISPATCHER);
1715:       assertEquals(2, Node.POST_FLAG);
1716:       assertEquals(30, Node.VAR_ARGS_NAME);
1717:       assertEquals(40, Node.ORIGINALNAME_PROP);
1718:       assertFalse(node0.equals((Object)node2));
1719:       assertFalse(node0.equals((Object)node1));
1720:       assertFalse(node1.equals((Object)node3));
1721:       assertFalse(node1.equals((Object)node0));
1722:       assertFalse(node1.equals((Object)node2));
1723:       assertFalse(node2.equals((Object)node1));
1724:       assertFalse(node2.equals((Object)node0));
1725:       assertFalse(node2.equals((Object)node3));
1726:       assertSame(node0, node3);
1727:       assertNotSame(node1, node2);
1728:       assertNotSame(node2, node1);
1729:       assertEquals((-1), int0);
1730:       assertEquals(0, node0.getChildCount());
1731:       assertFalse(node0.isCatch());
1732:       assertFalse(node0.isSetterDef());
1733:       assertFalse(node0.isVar());
1734:       assertFalse(node0.isDefaultCase());
1735:       assertFalse(node0.isTry());
1736:       assertFalse(node0.isArrayLit());
1737:       assertFalse(node0.isDebugger());
1738:       assertFalse(node0.isFunction());
1739:       assertEquals(2786, node0.getType());
1740:       assertFalse(node0.isGetterDef());
1741:       assertFalse(node0.isStringKey());
1742:       assertFalse(node0.isParamList());
1743:       assertEquals((-1), node0.getLineno());
1744:       assertFalse(node0.hasMoreThanOneChild());
1745:       assertFalse(node0.isNumber());
1746:       assertFalse(node0.isIn());
1747:       assertFalse(node0.isContinue());
1748:       assertFalse(node0.isFor());
1749:       assertFalse(node0.isCase());
1750:       assertFalse(node0.isBlock());
1751:       assertFalse(node0.isHook());
1752:       assertFalse(node0.isInc());
1753:       assertFalse(node0.isRegExp());
1754:       assertFalse(node0.isNE());
1755:       assertFalse(node0.isIf());
1756:       assertFalse(node0.isGetProp());
1757:       assertFalse(node0.isComma());
1758:       assertFalse(node0.isObjectLit());
1759:       assertFalse(node0.isInstanceOf());
1760:       assertFalse(node0.isWith());
1761:       assertFalse(node0.isThis());
1762:       assertFalse(node0.isThrow());
1763:       assertFalse(node0.hasOneChild());
1764:       assertEquals((-1), node0.getCharno());
1765:       assertFalse(node0.isCast());
1766:       assertFalse(node0.isScript());
1767:       assertFalse(node0.isFalse());
1768:       assertFalse(node0.isString());
1769:       assertFalse(node0.isNot());
1770:       assertFalse(node0.isLabelName());
1771:       assertEquals((-1), node0.getSourcePosition());
1772:       assertFalse(node0.isSwitch());
1773:       assertFalse(node0.isAnd());
1774:       assertFalse(node0.isReturn());
1775:       assertFalse(node0.isAssignAdd());
1776:       assertFalse(node0.isOr());
1777:       assertFalse(node0.isLabel());
1778:       assertFalse(node0.isTypeOf());
1779:       assertFalse(node0.isDo());
1780:       assertFalse(node0.isAssign());
1781:       assertFalse(node0.isEmpty());
1782:       assertFalse(node0.isDec());
1783:       assertFalse(node0.hasChildren());
1784:       assertFalse(node0.isWhile());
1785:       assertFalse(node0.isAdd());
1786:       assertFalse(node0.isNew());
1787:       assertFalse(node0.isExprResult());
1788:       assertFalse(node0.isCall());
1789:       assertFalse(node0.isName());
1790:       assertFalse(node0.isDelProp());
1791:       assertFalse(node0.isGetElem());
1792:       assertFalse(node0.isBreak());
1793:       assertFalse(node0.isVoid());
1794:       assertFalse(node0.isNull());
1795:       assertFalse(node0.isTrue());
1796:       assertFalse(node1.isDefaultCase());
1797:       assertFalse(node1.isFunction());
1798:       assertFalse(node1.isRegExp());
1799:       assertFalse(node1.isVoid());
1800:       assertFalse(node1.isCatch());
1801:       assertFalse(node1.isArrayLit());
1802:       assertFalse(node1.isParamList());
1803:       assertFalse(node1.isDebugger());
1804:       assertFalse(node1.isNull());
1805:       assertFalse(node1.isTrue());
1806:       assertFalse(node1.isEmpty());
1807:       assertFalse(node1.isSetterDef());
1808:       assertEquals(0, node1.getChildCount());
1809:       assertFalse(node1.isVar());
1810:       assertFalse(node1.isWhile());
1811:       assertFalse(node1.isString());
1812:       assertFalse(node1.isDo());
1813:       assertFalse(node1.isContinue());
1814:       assertFalse(node1.isNew());
1815:       assertFalse(node1.isAdd());
1816:       assertFalse(node1.isOr());
1817:       assertFalse(node1.hasChildren());
1818:       assertFalse(node1.isBreak());
1819:       assertFalse(node1.isDelProp());
1820:       assertFalse(node1.isDec());
1821:       assertEquals((-1), node1.getSourcePosition());
1822:       assertFalse(node1.isAssign());
1823:       assertFalse(node1.isTypeOf());
1824:       assertFalse(node1.isName());
1825:       assertFalse(node1.isGetProp());
1826:       assertEquals(561, node1.getType());
1827:       assertFalse(node1.isGetElem());
1828:       assertFalse(node1.isCall());
1829:       assertFalse(node1.isComma());
1830:       assertFalse(node1.isReturn());
1831:       assertFalse(node1.isNot());
1832:       assertFalse(node1.isWith());
1833:       assertFalse(node1.isScript());
1834:       assertFalse(node1.isExprResult());
1835:       assertFalse(node1.isObjectLit());
1836:       assertFalse(node1.isAnd());
1837:       assertFalse(node1.isLabelName());
1838:       assertFalse(node1.isFalse());
1839:       assertFalse(node1.isCast());
1840:       assertFalse(node1.isAssignAdd());
1841:       assertFalse(node1.isThrow());
1842:       assertFalse(node1.isLabel());
1843:       assertFalse(node1.isSwitch());
1844:       assertFalse(node1.isCase());
1845:       assertFalse(node1.isInc());
1846:       assertFalse(node1.isIn());
1847:       assertEquals((-1), node1.getLineno());
1848:       assertEquals((-1), node1.getCharno());
1849:       assertFalse(node1.isStringKey());
1850:       assertFalse(node1.isNE());
1851:       assertFalse(node1.isGetterDef());
1852:       assertFalse(node1.isIf());
1853:       assertFalse(node1.isNumber());
1854:       assertFalse(node1.hasOneChild());
1855:       assertFalse(node1.isInstanceOf());
1856:       assertFalse(node1.hasMoreThanOneChild());
1857:       assertFalse(node1.isTry());
1858:       assertFalse(node1.isFor());
1859:       assertFalse(node1.isBlock());
1860:       assertFalse(node1.isHook());
1861:       assertFalse(node1.isThis());
1862:       assertFalse(node2.isSwitch());
1863:       assertFalse(node2.isHook());
1864:       assertEquals((-1), node2.getCharno());
1865:       assertFalse(node2.isThrow());
1866:       assertFalse(node2.isString());
1867:       assertFalse(node2.isInc());
1868:       assertFalse(node2.isCase());
1869:       assertFalse(node2.isGetProp());
1870:       assertFalse(node2.isGetterDef());
1871:       assertEquals(2, node2.getChildCount());
1872:       assertFalse(node2.isFalse());
1873:       assertFalse(node2.isAnd());
1874:       assertFalse(node2.isArrayLit());
1875:       assertFalse(node2.isTry());
1876:       assertFalse(node2.isFunction());
1877:       assertFalse(node2.isRegExp());
1878:       assertFalse(node2.isFor());
1879:       assertFalse(node2.hasOneChild());
1880:       assertFalse(node2.isScript());
1881:       assertTrue(node2.hasChildren());
1882:       assertFalse(node2.isNE());
1883:       assertFalse(node2.isIn());
1884:       assertFalse(node2.isThis());
1885:       assertFalse(node2.isCatch());
1886:       assertFalse(node2.isWith());
1887:       assertFalse(node2.isInstanceOf());
1888:       assertFalse(node2.isIf());
1889:       assertEquals((-1), node2.getLineno());
1890:       assertFalse(node2.isBlock());
1891:       assertFalse(node2.isAdd());
1892:       assertFalse(node2.isVar());
1893:       assertFalse(node2.isWhile());
1894:       assertFalse(node2.isDo());
1895:       assertFalse(node2.isSetterDef());
1896:       assertEquals(1038, node2.getType());
1897:       assertFalse(node2.isNew());
1898:       assertFalse(node2.isAssignAdd());
1899:       assertFalse(node2.isParamList());
1900:       assertFalse(node2.isNumber());
1901:       assertFalse(node2.isLabel());
1902:       assertEquals((-1), node2.getSourcePosition());
1903:       assertFalse(node2.isStringKey());
1904:       assertFalse(node2.isCast());
1905:       assertFalse(node2.isContinue());
1906:       assertFalse(node2.isLabelName());
1907:       assertFalse(node2.isExprResult());
1908:       assertFalse(node2.isVoid());
1909:       assertFalse(node2.isTrue());
1910:       assertFalse(node2.isNot());
1911:       assertFalse(node2.isDebugger());
1912:       assertFalse(node2.isEmpty());
1913:       assertFalse(node2.isObjectLit());
1914:       assertFalse(node2.isDefaultCase());
1915:       assertFalse(node2.isDec());
1916:       assertFalse(node2.isTypeOf());
1917:       assertFalse(node2.isNull());
1918:       assertFalse(node2.isReturn());
1919:       assertFalse(node2.isAssign());
1920:       assertFalse(node2.isComma());
1921:       assertFalse(node2.isOr());
1922:       assertFalse(node2.isGetElem());
1923:       assertFalse(node2.isCall());
1924:       assertFalse(node2.isName());
1925:       assertTrue(node2.hasMoreThanOneChild());
1926:       assertFalse(node2.isDelProp());
1927:       assertFalse(node2.isBreak());
1928:       
1929:       boolean boolean1 = node2.mayMutateArguments();
1930:       assertEquals(4095, Node.COLUMN_MASK);
1931:       assertEquals(55, Node.INFERRED_FUNCTION);
1932:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1933:       assertEquals(8, Node.FLAG_NO_THROWS);
1934:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1935:       assertEquals(39, Node.EMPTY_BLOCK);
1936:       assertEquals(53, Node.INPUT_ID);
1937:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1938:       assertEquals(57, Node.REFLECTED_OBJECT);
1939:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1940:       assertEquals(52, Node.LENGTH);
1941:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1942:       assertEquals(56, Node.CHANGE_TIME);
1943:       assertEquals(36, Node.QUOTED_PROP);
1944:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1945:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1946:       assertEquals(37, Node.OPT_ARG_NAME);
1947:       assertEquals(48, Node.DIRECTIVES);
1948:       assertEquals(49, Node.DIRECT_EVAL);
1949:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1950:       assertEquals(12, Node.COLUMN_BITS);
1951:       assertEquals(46, Node.IS_NAMESPACE);
1952:       assertEquals(2, Node.POST_FLAG);
1953:       assertEquals(30, Node.VAR_ARGS_NAME);
1954:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1955:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1956:       assertEquals(57, Node.LAST_PROP);
1957:       assertEquals(47, Node.IS_DISPATCHER);
1958:       assertEquals(29, Node.JSDOC_INFO_PROP);
1959:       assertEquals(32, Node.INCRDECR_PROP);
1960:       assertEquals(1, Node.DECR_FLAG);
1961:       assertEquals(40, Node.ORIGINALNAME_PROP);
1962:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1963:       assertEquals(50, Node.FREE_CALL);
1964:       assertEquals(43, Node.IS_CONSTANT_NAME);
1965:       assertEquals(54, Node.SLASH_V);
1966:       assertEquals(36, Node.QUOTED_PROP);
1967:       assertEquals(53, Node.INPUT_ID);
1968:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1969:       assertEquals(56, Node.CHANGE_TIME);
1970:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1971:       assertEquals(43, Node.IS_CONSTANT_NAME);
1972:       assertEquals(48, Node.DIRECTIVES);
1973:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1974:       assertEquals(37, Node.OPT_ARG_NAME);
1975:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1976:       assertEquals(50, Node.FREE_CALL);
1977:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1978:       assertEquals(4095, Node.COLUMN_MASK);
1979:       assertEquals(12, Node.COLUMN_BITS);
1980:       assertEquals(1, Node.DECR_FLAG);
1981:       assertEquals(32, Node.INCRDECR_PROP);
1982:       assertEquals(54, Node.SLASH_V);
1983:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1984:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1985:       assertEquals(30, Node.VAR_ARGS_NAME);
1986:       assertEquals(52, Node.LENGTH);
1987:       assertEquals(40, Node.ORIGINALNAME_PROP);
1988:       assertEquals(57, Node.REFLECTED_OBJECT);
1989:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1990:       assertEquals(49, Node.DIRECT_EVAL);
1991:       assertEquals(46, Node.IS_NAMESPACE);
1992:       assertEquals(2, Node.POST_FLAG);
1993:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1994:       assertEquals(8, Node.FLAG_NO_THROWS);
1995:       assertEquals(39, Node.EMPTY_BLOCK);
1996:       assertEquals(47, Node.IS_DISPATCHER);
1997:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1998:       assertEquals(29, Node.JSDOC_INFO_PROP);
1999:       assertEquals(55, Node.INFERRED_FUNCTION);
2000:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2001:       assertEquals(57, Node.LAST_PROP);
2002:       assertEquals(52, Node.LENGTH);
2003:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2004:       assertEquals(57, Node.REFLECTED_OBJECT);
2005:       assertEquals(54, Node.SLASH_V);
2006:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2007:       assertEquals(57, Node.LAST_PROP);
2008:       assertEquals(1, Node.DECR_FLAG);
2009:       assertEquals(50, Node.FREE_CALL);
2010:       assertEquals(8, Node.FLAG_NO_THROWS);
2011:       assertEquals(39, Node.EMPTY_BLOCK);
2012:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2013:       assertEquals(48, Node.DIRECTIVES);
2014:       assertEquals(32, Node.INCRDECR_PROP);
2015:       assertEquals(56, Node.CHANGE_TIME);
2016:       assertEquals(12, Node.COLUMN_BITS);
2017:       assertEquals(49, Node.DIRECT_EVAL);
2018:       assertEquals(37, Node.OPT_ARG_NAME);
2019:       assertEquals(4095, Node.COLUMN_MASK);
2020:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2021:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2022:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2023:       assertEquals(43, Node.IS_CONSTANT_NAME);
2024:       assertEquals(36, Node.QUOTED_PROP);
2025:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2026:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2027:       assertEquals(53, Node.INPUT_ID);
2028:       assertEquals(55, Node.INFERRED_FUNCTION);
2029:       assertEquals(29, Node.JSDOC_INFO_PROP);
2030:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2031:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2032:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2033:       assertEquals(46, Node.IS_NAMESPACE);
2034:       assertEquals(47, Node.IS_DISPATCHER);
2035:       assertEquals(2, Node.POST_FLAG);
2036:       assertEquals(30, Node.VAR_ARGS_NAME);
2037:       assertEquals(40, Node.ORIGINALNAME_PROP);
2038:       assertFalse(node0.equals((Object)node2));
2039:       assertFalse(node0.equals((Object)node1));
2040:       assertFalse(node1.equals((Object)node3));
2041:       assertFalse(node1.equals((Object)node0));
2042:       assertFalse(node1.equals((Object)node2));
2043:       assertFalse(node2.equals((Object)node1));
2044:       assertFalse(node2.equals((Object)node0));
2045:       assertFalse(node2.equals((Object)node3));
2046:       assertFalse(boolean1 == boolean0);
2047:       assertSame(node0, node3);
2048:       assertNotSame(node1, node2);
2049:       assertNotSame(node2, node1);
2050:       assertTrue(boolean1);
2051:       assertEquals(0, node0.getChildCount());
2052:       assertFalse(node0.isCatch());
2053:       assertFalse(node0.isSetterDef());
2054:       assertFalse(node0.isVar());
2055:       assertFalse(node0.isDefaultCase());
2056:       assertFalse(node0.isTry());
2057:       assertFalse(node0.isArrayLit());
2058:       assertFalse(node0.isDebugger());
2059:       assertFalse(node0.isFunction());
2060:       assertEquals(2786, node0.getType());
2061:       assertFalse(node0.isGetterDef());
2062:       assertFalse(node0.isStringKey());
2063:       assertFalse(node0.isParamList());
2064:       assertEquals((-1), node0.getLineno());
2065:       assertFalse(node0.hasMoreThanOneChild());
2066:       assertFalse(node0.isNumber());
2067:       assertFalse(node0.isIn());
2068:       assertFalse(node0.isContinue());
2069:       assertFalse(node0.isFor());
2070:       assertFalse(node0.isCase());
2071:       assertFalse(node0.isBlock());
2072:       assertFalse(node0.isHook());
2073:       assertFalse(node0.isInc());
2074:       assertFalse(node0.isRegExp());
2075:       assertFalse(node0.isNE());
2076:       assertFalse(node0.isIf());
2077:       assertFalse(node0.isGetProp());
2078:       assertFalse(node0.isComma());
2079:       assertFalse(node0.isObjectLit());
2080:       assertFalse(node0.isInstanceOf());
2081:       assertFalse(node0.isWith());
2082:       assertFalse(node0.isThis());
2083:       assertFalse(node0.isThrow());
2084:       assertFalse(node0.hasOneChild());
2085:       assertEquals((-1), node0.getCharno());
2086:       assertFalse(node0.isCast());
2087:       assertFalse(node0.isScript());
2088:       assertFalse(node0.isFalse());
2089:       assertFalse(node0.isString());
2090:       assertFalse(node0.isNot());
2091:       assertFalse(node0.isLabelName());
2092:       assertEquals((-1), node0.getSourcePosition());
2093:       assertFalse(node0.isSwitch());
2094:       assertFalse(node0.isAnd());
2095:       assertFalse(node0.isReturn());
2096:       assertFalse(node0.isAssignAdd());
2097:       assertFalse(node0.isOr());
2098:       assertFalse(node0.isLabel());
2099:       assertFalse(node0.isTypeOf());
2100:       assertFalse(node0.isDo());
2101:       assertFalse(node0.isAssign());
2102:       assertFalse(node0.isEmpty());
2103:       assertFalse(node0.isDec());
2104:       assertFalse(node0.hasChildren());
2105:       assertFalse(node0.isWhile());
2106:       assertFalse(node0.isAdd());
2107:       assertFalse(node0.isNew());
2108:       assertFalse(node0.isExprResult());
2109:       assertFalse(node0.isCall());
2110:       assertFalse(node0.isName());
2111:       assertFalse(node0.isDelProp());
2112:       assertFalse(node0.isGetElem());
2113:       assertFalse(node0.isBreak());
2114:       assertFalse(node0.isVoid());
2115:       assertFalse(node0.isNull());
2116:       assertFalse(node0.isTrue());
2117:       assertFalse(node1.isDefaultCase());
2118:       assertFalse(node1.isFunction());
2119:       assertFalse(node1.isRegExp());
2120:       assertFalse(node1.isVoid());
2121:       assertFalse(node1.isCatch());
2122:       assertFalse(node1.isArrayLit());
2123:       assertFalse(node1.isParamList());
2124:       assertFalse(node1.isDebugger());
2125:       assertFalse(node1.isNull());
2126:       assertFalse(node1.isTrue());
2127:       assertFalse(node1.isEmpty());
2128:       assertFalse(node1.isSetterDef());
2129:       assertEquals(0, node1.getChildCount());
2130:       assertFalse(node1.isVar());
2131:       assertFalse(node1.isWhile());
2132:       assertFalse(node1.isString());
2133:       assertFalse(node1.isDo());
2134:       assertFalse(node1.isContinue());
2135:       assertFalse(node1.isNew());
2136:       assertFalse(node1.isAdd());
2137:       assertFalse(node1.isOr());
2138:       assertFalse(node1.hasChildren());
2139:       assertFalse(node1.isBreak());
2140:       assertFalse(node1.isDelProp());
2141:       assertFalse(node1.isDec());
2142:       assertEquals((-1), node1.getSourcePosition());
2143:       assertFalse(node1.isAssign());
2144:       assertFalse(node1.isTypeOf());
2145:       assertFalse(node1.isName());
2146:       assertFalse(node1.isGetProp());
2147:       assertEquals(561, node1.getType());
2148:       assertFalse(node1.isGetElem());
2149:       assertFalse(node1.isCall());
2150:       assertFalse(node1.isComma());
2151:       assertFalse(node1.isReturn());
2152:       assertFalse(node1.isNot());
2153:       assertFalse(node1.isWith());
2154:       assertFalse(node1.isScript());
2155:       assertFalse(node1.isExprResult());
2156:       assertFalse(node1.isObjectLit());
2157:       assertFalse(node1.isAnd());
2158:       assertFalse(node1.isLabelName());
2159:       assertFalse(node1.isFalse());
2160:       assertFalse(node1.isCast());
2161:       assertFalse(node1.isAssignAdd());
2162:       assertFalse(node1.isThrow());
2163:       assertFalse(node1.isLabel());
2164:       assertFalse(node1.isSwitch());
2165:       assertFalse(node1.isCase());
2166:       assertFalse(node1.isInc());
2167:       assertFalse(node1.isIn());
2168:       assertEquals((-1), node1.getLineno());
2169:       assertEquals((-1), node1.getCharno());
2170:       assertFalse(node1.isStringKey());
2171:       assertFalse(node1.isNE());
2172:       assertFalse(node1.isGetterDef());
2173:       assertFalse(node1.isIf());
2174:       assertFalse(node1.isNumber());
2175:       assertFalse(node1.hasOneChild());
2176:       assertFalse(node1.isInstanceOf());
2177:       assertFalse(node1.hasMoreThanOneChild());
2178:       assertFalse(node1.isTry());
2179:       assertFalse(node1.isFor());
2180:       assertFalse(node1.isBlock());
2181:       assertFalse(node1.isHook());
2182:       assertFalse(node1.isThis());
2183:       assertFalse(node2.isSwitch());
2184:       assertFalse(node2.isHook());
2185:       assertEquals((-1), node2.getCharno());
2186:       assertFalse(node2.isThrow());
2187:       assertFalse(node2.isString());
2188:       assertFalse(node2.isInc());
2189:       assertFalse(node2.isCase());
2190:       assertFalse(node2.isGetProp());
2191:       assertFalse(node2.isGetterDef());
2192:       assertEquals(2, node2.getChildCount());
2193:       assertFalse(node2.isFalse());
2194:       assertFalse(node2.isAnd());
2195:       assertFalse(node2.isArrayLit());
2196:       assertFalse(node2.isTry());
2197:       assertFalse(node2.isFunction());
2198:       assertFalse(node2.isRegExp());
2199:       assertFalse(node2.isFor());
2200:       assertFalse(node2.hasOneChild());
2201:       assertFalse(node2.isScript());
2202:       assertTrue(node2.hasChildren());
2203:       assertFalse(node2.isNE());
2204:       assertFalse(node2.isIn());
2205:       assertFalse(node2.isThis());
2206:       assertFalse(node2.isCatch());
2207:       assertFalse(node2.isWith());
2208:       assertFalse(node2.isInstanceOf());
2209:       assertFalse(node2.isIf());
2210:       assertEquals((-1), node2.getLineno());
2211:       assertFalse(node2.isBlock());
2212:       assertFalse(node2.isAdd());
2213:       assertFalse(node2.isVar());
2214:       assertFalse(node2.isWhile());
2215:       assertFalse(node2.isDo());
2216:       assertFalse(node2.isSetterDef());
2217:       assertEquals(1038, node2.getType());
2218:       assertFalse(node2.isNew());
2219:       assertFalse(node2.isAssignAdd());
2220:       assertFalse(node2.isParamList());
2221:       assertFalse(node2.isNumber());
2222:       assertFalse(node2.isLabel());
2223:       assertEquals((-1), node2.getSourcePosition());
2224:       assertFalse(node2.isStringKey());
2225:       assertFalse(node2.isCast());
2226:       assertFalse(node2.isContinue());
2227:       assertFalse(node2.isLabelName());
2228:       assertFalse(node2.isExprResult());
2229:       assertFalse(node2.isVoid());
2230:       assertFalse(node2.isTrue());
2231:       assertFalse(node2.isNot());
2232:       assertFalse(node2.isDebugger());
2233:       assertFalse(node2.isEmpty());
2234:       assertFalse(node2.isObjectLit());
2235:       assertFalse(node2.isDefaultCase());
2236:       assertFalse(node2.isDec());
2237:       assertFalse(node2.isTypeOf());
2238:       assertFalse(node2.isNull());
2239:       assertFalse(node2.isReturn());
2240:       assertFalse(node2.isAssign());
2241:       assertFalse(node2.isComma());
2242:       assertFalse(node2.isOr());
2243:       assertFalse(node2.isGetElem());
2244:       assertFalse(node2.isCall());
2245:       assertFalse(node2.isName());
2246:       assertTrue(node2.hasMoreThanOneChild());
2247:       assertFalse(node2.isDelProp());
2248:       assertFalse(node2.isBreak());
2249:       
2250:       Iterable<Node> iterable0 = node1.children();
2251:       assertEquals(36, Node.QUOTED_PROP);
2252:       assertEquals(53, Node.INPUT_ID);
2253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2254:       assertEquals(56, Node.CHANGE_TIME);
2255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2256:       assertEquals(43, Node.IS_CONSTANT_NAME);
2257:       assertEquals(48, Node.DIRECTIVES);
2258:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2259:       assertEquals(37, Node.OPT_ARG_NAME);
2260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2261:       assertEquals(50, Node.FREE_CALL);
2262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2263:       assertEquals(4095, Node.COLUMN_MASK);
2264:       assertEquals(12, Node.COLUMN_BITS);
2265:       assertEquals(1, Node.DECR_FLAG);
2266:       assertEquals(32, Node.INCRDECR_PROP);
2267:       assertEquals(54, Node.SLASH_V);
2268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2269:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2270:       assertEquals(30, Node.VAR_ARGS_NAME);
2271:       assertEquals(52, Node.LENGTH);
2272:       assertEquals(40, Node.ORIGINALNAME_PROP);
2273:       assertEquals(57, Node.REFLECTED_OBJECT);
2274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2275:       assertEquals(49, Node.DIRECT_EVAL);
2276:       assertEquals(46, Node.IS_NAMESPACE);
2277:       assertEquals(2, Node.POST_FLAG);
2278:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2279:       assertEquals(8, Node.FLAG_NO_THROWS);
2280:       assertEquals(39, Node.EMPTY_BLOCK);
2281:       assertEquals(47, Node.IS_DISPATCHER);
2282:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2283:       assertEquals(29, Node.JSDOC_INFO_PROP);
2284:       assertEquals(55, Node.INFERRED_FUNCTION);
2285:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2286:       assertEquals(57, Node.LAST_PROP);
2287:       assertFalse(node1.equals((Object)node3));
2288:       assertFalse(node1.equals((Object)node0));
2289:       assertFalse(node1.equals((Object)node2));
2290:       assertNotNull(iterable0);
2291:       assertNotSame(node1, node2);
2292:       assertFalse(iterable0.contains(node1));
2293:       assertFalse(node1.isDefaultCase());
2294:       assertFalse(node1.isFunction());
2295:       assertFalse(node1.isRegExp());
2296:       assertFalse(node1.isVoid());
2297:       assertFalse(node1.isCatch());
2298:       assertFalse(node1.isArrayLit());
2299:       assertFalse(node1.isParamList());
2300:       assertFalse(node1.isDebugger());
2301:       assertFalse(node1.isNull());
2302:       assertFalse(node1.isTrue());
2303:       assertFalse(node1.isEmpty());
2304:       assertFalse(node1.isSetterDef());
2305:       assertEquals(0, node1.getChildCount());
2306:       assertFalse(node1.isVar());
2307:       assertFalse(node1.isWhile());
2308:       assertFalse(node1.isString());
2309:       assertFalse(node1.isDo());
2310:       assertFalse(node1.isContinue());
2311:       assertFalse(node1.isNew());
2312:       assertFalse(node1.isAdd());
2313:       assertFalse(node1.isOr());
2314:       assertFalse(node1.hasChildren());
2315:       assertFalse(node1.isBreak());
2316:       assertFalse(node1.isDelProp());
2317:       assertFalse(node1.isDec());
2318:       
2319:       boolean boolean2 = node2.isRegExp();
2320:       assertEquals(4095, Node.COLUMN_MASK);
2321:       assertEquals(55, Node.INFERRED_FUNCTION);
2322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2323:       assertEquals(8, Node.FLAG_NO_THROWS);
2324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2325:       assertEquals(39, Node.EMPTY_BLOCK);
2326:       assertEquals(53, Node.INPUT_ID);
2327:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2328:       assertEquals(57, Node.REFLECTED_OBJECT);
2329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2330:       assertEquals(52, Node.LENGTH);
2331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2332:       assertEquals(56, Node.CHANGE_TIME);
2333:       assertEquals(36, Node.QUOTED_PROP);
2334:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2335:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2336:       assertEquals(37, Node.OPT_ARG_NAME);
2337:       assertEquals(48, Node.DIRECTIVES);
2338:       assertEquals(49, Node.DIRECT_EVAL);
2339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2340:       assertEquals(12, Node.COLUMN_BITS);
2341:       assertEquals(46, Node.IS_NAMESPACE);
2342:       assertEquals(2, Node.POST_FLAG);
2343:       assertEquals(30, Node.VAR_ARGS_NAME);
2344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2346:       assertEquals(57, Node.LAST_PROP);
2347:       assertEquals(47, Node.IS_DISPATCHER);
2348:       assertEquals(29, Node.JSDOC_INFO_PROP);
2349:       assertEquals(32, Node.INCRDECR_PROP);
2350:       assertEquals(1, Node.DECR_FLAG);
2351:       assertEquals(40, Node.ORIGINALNAME_PROP);
2352:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2353:       assertEquals(50, Node.FREE_CALL);
2354:       assertEquals(43, Node.IS_CONSTANT_NAME);
2355:       assertEquals(54, Node.SLASH_V);
2356:       assertEquals(36, Node.QUOTED_PROP);
2357:       assertEquals(53, Node.INPUT_ID);
2358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2359:       assertEquals(56, Node.CHANGE_TIME);
2360:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2361:       assertEquals(43, Node.IS_CONSTANT_NAME);
2362:       assertEquals(48, Node.DIRECTIVES);
2363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2364:       assertEquals(37, Node.OPT_ARG_NAME);
2365:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2366:       assertEquals(50, Node.FREE_CALL);
2367:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2368:       assertEquals(4095, Node.COLUMN_MASK);
2369:       assertEquals(12, Node.COLUMN_BITS);
2370:       assertEquals(1, Node.DECR_FLAG);
2371:       assertEquals(32, Node.INCRDECR_PROP);
2372:       assertEquals(54, Node.SLASH_V);
2373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2374:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2375:       assertEquals(30, Node.VAR_ARGS_NAME);
2376:       assertEquals(52, Node.LENGTH);
2377:       assertEquals(40, Node.ORIGINALNAME_PROP);
2378:       assertEquals(57, Node.REFLECTED_OBJECT);
2379:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2380:       assertEquals(49, Node.DIRECT_EVAL);
2381:       assertEquals(46, Node.IS_NAMESPACE);
2382:       assertEquals(2, Node.POST_FLAG);
2383:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2384:       assertEquals(8, Node.FLAG_NO_THROWS);
2385:       assertEquals(39, Node.EMPTY_BLOCK);
2386:       assertEquals(47, Node.IS_DISPATCHER);
2387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2388:       assertEquals(29, Node.JSDOC_INFO_PROP);
2389:       assertEquals(55, Node.INFERRED_FUNCTION);
2390:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2391:       assertEquals(57, Node.LAST_PROP);
2392:       assertEquals(52, Node.LENGTH);
2393:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2394:       assertEquals(57, Node.REFLECTED_OBJECT);
2395:       assertEquals(54, Node.SLASH_V);
2396:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2397:       assertEquals(57, Node.LAST_PROP);
2398:       assertEquals(1, Node.DECR_FLAG);
2399:       assertEquals(50, Node.FREE_CALL);
2400:       assertEquals(8, Node.FLAG_NO_THROWS);
2401:       assertEquals(39, Node.EMPTY_BLOCK);
2402:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2403:       assertEquals(48, Node.DIRECTIVES);
2404:       assertEquals(32, Node.INCRDECR_PROP);
2405:       assertEquals(56, Node.CHANGE_TIME);
2406:       assertEquals(12, Node.COLUMN_BITS);
2407:       assertEquals(49, Node.DIRECT_EVAL);
2408:       assertEquals(37, Node.OPT_ARG_NAME);
2409:       assertEquals(4095, Node.COLUMN_MASK);
2410:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2411:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2413:       assertEquals(43, Node.IS_CONSTANT_NAME);
2414:       assertEquals(36, Node.QUOTED_PROP);
2415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2416:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2417:       assertEquals(53, Node.INPUT_ID);
2418:       assertEquals(55, Node.INFERRED_FUNCTION);
2419:       assertEquals(29, Node.JSDOC_INFO_PROP);
2420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2423:       assertEquals(46, Node.IS_NAMESPACE);
2424:       assertEquals(47, Node.IS_DISPATCHER);
2425:       assertEquals(2, Node.POST_FLAG);
2426:       assertEquals(30, Node.VAR_ARGS_NAME);
2427:       assertEquals(40, Node.ORIGINALNAME_PROP);
2428:       assertFalse(node0.equals((Object)node2));
2429:       assertFalse(node0.equals((Object)node1));
2430:       assertFalse(node1.equals((Object)node3));
2431:       assertFalse(node1.equals((Object)node0));
2432:       assertFalse(node1.equals((Object)node2));
2433:       assertFalse(node2.equals((Object)node1));
2434:       assertFalse(node2.equals((Object)node0));
2435:       assertFalse(node2.equals((Object)node3));
2436:       assertFalse(boolean2 == boolean1);
2437:       assertTrue(boolean2 == boolean0);
2438:       assertSame(node0, node3);
2439:       assertNotSame(node1, node2);
2440:       assertNotSame(node2, node1);
2441:       assertFalse(boolean2);
2442:       
2443:       boolean boolean3 = node1.isOnlyModifiesThisCall();
2444:       assertEquals(36, Node.QUOTED_PROP);
2445:       assertEquals(53, Node.INPUT_ID);
2446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2447:       assertEquals(56, Node.CHANGE_TIME);
2448:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2449:       assertEquals(43, Node.IS_CONSTANT_NAME);
2450:       assertEquals(48, Node.DIRECTIVES);
2451:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2452:       assertEquals(37, Node.OPT_ARG_NAME);
2453:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2454:       assertEquals(50, Node.FREE_CALL);
2455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2456:       assertEquals(4095, Node.COLUMN_MASK);
2457:       assertEquals(12, Node.COLUMN_BITS);
2458:       assertEquals(1, Node.DECR_FLAG);
2459:       assertEquals(32, Node.INCRDECR_PROP);
2460:       assertEquals(54, Node.SLASH_V);
2461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2462:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2463:       assertEquals(30, Node.VAR_ARGS_NAME);
2464:       assertEquals(52, Node.LENGTH);
2465:       assertEquals(40, Node.ORIGINALNAME_PROP);
2466:       assertEquals(57, Node.REFLECTED_OBJECT);
2467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2468:       assertEquals(49, Node.DIRECT_EVAL);
2469:       assertEquals(46, Node.IS_NAMESPACE);
2470:       assertEquals(2, Node.POST_FLAG);
2471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2472:       assertEquals(8, Node.FLAG_NO_THROWS);
2473:       assertEquals(39, Node.EMPTY_BLOCK);
2474:       assertEquals(47, Node.IS_DISPATCHER);
2475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2476:       assertEquals(29, Node.JSDOC_INFO_PROP);
2477:       assertEquals(55, Node.INFERRED_FUNCTION);
2478:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2479:       assertEquals(57, Node.LAST_PROP);
2480:       assertFalse(node1.equals((Object)node3));
2481:       assertFalse(node1.equals((Object)node0));
2482:       assertFalse(node1.equals((Object)node2));
2483:       assertFalse(boolean3 == boolean1);
2484:       assertTrue(boolean3 == boolean2);
2485:       assertTrue(boolean3 == boolean0);
2486:       assertNotSame(node1, node2);
2487:       assertFalse(boolean3);
2488:       
2489:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
2490:       assertEquals(36, Node.QUOTED_PROP);
2491:       assertEquals(53, Node.INPUT_ID);
2492:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2493:       assertEquals(56, Node.CHANGE_TIME);
2494:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2495:       assertEquals(43, Node.IS_CONSTANT_NAME);
2496:       assertEquals(48, Node.DIRECTIVES);
2497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2498:       assertEquals(37, Node.OPT_ARG_NAME);
2499:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2500:       assertEquals(50, Node.FREE_CALL);
2501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2502:       assertEquals(4095, Node.COLUMN_MASK);
2503:       assertEquals(12, Node.COLUMN_BITS);
2504:       assertEquals(1, Node.DECR_FLAG);
2505:       assertEquals(32, Node.INCRDECR_PROP);
2506:       assertEquals(54, Node.SLASH_V);
2507:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2508:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2509:       assertEquals(30, Node.VAR_ARGS_NAME);
2510:       assertEquals(52, Node.LENGTH);
2511:       assertEquals(40, Node.ORIGINALNAME_PROP);
2512:       assertEquals(57, Node.REFLECTED_OBJECT);
2513:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2514:       assertEquals(49, Node.DIRECT_EVAL);
2515:       assertEquals(46, Node.IS_NAMESPACE);
2516:       assertEquals(2, Node.POST_FLAG);
2517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2518:       assertEquals(8, Node.FLAG_NO_THROWS);
2519:       assertEquals(39, Node.EMPTY_BLOCK);
2520:       assertEquals(47, Node.IS_DISPATCHER);
2521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2522:       assertEquals(29, Node.JSDOC_INFO_PROP);
2523:       assertEquals(55, Node.INFERRED_FUNCTION);
2524:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2525:       assertEquals(57, Node.LAST_PROP);
2526:       assertFalse(node1.equals((Object)node3));
2527:       assertFalse(node1.equals((Object)node0));
2528:       assertFalse(node1.equals((Object)node2));
2529:       assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
2530:       assertNotNull(node_FileLevelJsDocBuilder1);
2531:       assertNotSame(node1, node2);
2532:       assertNotSame(node_FileLevelJsDocBuilder1, node_FileLevelJsDocBuilder0);
2533:   }
2534: }
RegularFileObject[/tmp/EvoSuite_144_1628159593099/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_144_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:13.620 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(2786, "m=XnkW");
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertNotNull(node0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(2786, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());

Node node1 = new Node(561);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertEquals(561, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());

Node node2 = new Node(1038, node0, node0, node0, node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(2786, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertEquals(561, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertEquals(1038, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());

Node node3 = node0.srcrefTree(node2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertNotNull(node3);
assertSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertSame(node3, node0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(2786, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertEquals(561, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertEquals(1038, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isNumber());
assertFalse(node3.isDo());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAnd());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isGetterDef());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isThrow());
assertFalse(node3.isSwitch());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertEquals(2786, node3.getType());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isHook());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());

boolean boolean0 = node0.isCase();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertSame(node0, node3);
assertFalse(boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(2786, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(2786, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());

node_FileLevelJsDocBuilder0.append("wc,fK~F");
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertSame(node0, node3);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(2786, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());

String string0 = node2.getSourceFileName();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertNull(string0);
assertSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(2786, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertEquals(561, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertEquals(1038, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());

int int0 = node2.getLineno();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertEquals((-1), int0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(2786, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertEquals(561, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertEquals(1038, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());

boolean boolean1 = node2.mayMutateArguments();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(boolean1 == boolean0);
assertSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertTrue(boolean1);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(2786, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertEquals(561, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertEquals(1038, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());

Iterable<Node> iterable0 = node1.children();
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotNull(iterable0);
assertNotSame(node1, node2);
assertFalse(iterable0.contains(node1));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());

boolean boolean2 = node2.isRegExp();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(boolean2);

boolean boolean3 = node1.isOnlyModifiesThisCall();
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertNotSame(node1, node2);
assertFalse(boolean3);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
assertNotNull(node_FileLevelJsDocBuilder1);
assertNotSame(node1, node2);
assertNotSame(node_FileLevelJsDocBuilder1, node_FileLevelJsDocBuilder0);


[MASTER] 10:33:13.933 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_153_1628159593911/com/google/javascript/rhino/Node_153_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_153_1628159593911/com/google/javascript/rhino/Node_153_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:13.933 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:13.933 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:14.015 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 268
[MASTER] 10:33:14.016 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_153_1628159593911/com/google/javascript/rhino/Node_153_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_153_tmp__ESTest extends Node_153_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(42, "");
21:       assertEquals(52, Node.LENGTH);
22:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
23:       assertEquals(54, Node.SLASH_V);
24:       assertEquals(57, Node.REFLECTED_OBJECT);
25:       assertEquals(57, Node.LAST_PROP);
26:       assertEquals(30, Node.VAR_ARGS_NAME);
27:       assertEquals(49, Node.DIRECT_EVAL);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(40, Node.ORIGINALNAME_PROP);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
33:       assertEquals(1, Node.DECR_FLAG);
34:       assertEquals(32, Node.INCRDECR_PROP);
35:       assertEquals(50, Node.FREE_CALL);
36:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
37:       assertEquals(51, Node.STATIC_SOURCE_FILE);
38:       assertEquals(53, Node.INPUT_ID);
39:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
40:       assertEquals(43, Node.IS_CONSTANT_NAME);
41:       assertEquals(47, Node.IS_DISPATCHER);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(4095, Node.COLUMN_MASK);
45:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
46:       assertEquals(39, Node.EMPTY_BLOCK);
47:       assertEquals(37, Node.OPT_ARG_NAME);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
51:       assertEquals(29, Node.JSDOC_INFO_PROP);
52:       assertEquals(15, Node.NO_SIDE_EFFECTS);
53:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(8, Node.FLAG_NO_THROWS);
56:       assertEquals(36, Node.QUOTED_PROP);
57:       assertNotNull(node0);
58:       assertFalse(node0.isBlock());
59:       assertFalse(node0.isNew());
60:       assertFalse(node0.isVar());
61:       assertFalse(node0.isWhile());
62:       assertFalse(node0.isContinue());
63:       assertFalse(node0.hasMoreThanOneChild());
64:       assertFalse(node0.isCall());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isOr());
69:       assertEquals((-1), node0.getLineno());
70:       assertFalse(node0.isAssignAdd());
71:       assertFalse(node0.isNull());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isTry());
75:       assertFalse(node0.isRegExp());
76:       assertFalse(node0.isDefaultCase());
77:       assertFalse(node0.isLabelName());
78:       assertFalse(node0.isArrayLit());
79:       assertEquals(0, node0.getChildCount());
80:       assertFalse(node0.isWith());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isInstanceOf());
83:       assertFalse(node0.isFor());
84:       assertFalse(node0.isStringKey());
85:       assertFalse(node0.isParamList());
86:       assertFalse(node0.hasOneChild());
87:       assertFalse(node0.isCase());
88:       assertFalse(node0.isGetterDef());
89:       assertFalse(node0.isNumber());
90:       assertFalse(node0.isScript());
91:       assertEquals((-1), node0.getCharno());
92:       assertFalse(node0.isSwitch());
93:       assertFalse(node0.isInc());
94:       assertFalse(node0.isHook());
95:       assertFalse(node0.isThrow());
96:       assertFalse(node0.isFalse());
97:       assertFalse(node0.isBreak());
98:       assertFalse(node0.isDelProp());
99:       assertFalse(node0.isIf());
100:       assertFalse(node0.isNE());
101:       assertEquals(42, node0.getType());
102:       assertFalse(node0.isIn());
103:       assertFalse(node0.isEmpty());
104:       assertFalse(node0.isVoid());
105:       assertFalse(node0.isDebugger());
106:       assertFalse(node0.isExprResult());
107:       assertFalse(node0.isTrue());
108:       assertFalse(node0.isFunction());
109:       assertFalse(node0.isAnd());
110:       assertFalse(node0.isGetElem());
111:       assertFalse(node0.isAssign());
112:       assertFalse(node0.isCast());
113:       assertTrue(node0.isThis());
114:       assertFalse(node0.isGetProp());
115:       assertFalse(node0.isTypeOf());
116:       assertFalse(node0.isDec());
117:       assertFalse(node0.isComma());
118:       assertEquals((-1), node0.getSourcePosition());
119:       assertFalse(node0.hasChildren());
120:       assertFalse(node0.isReturn());
121:       assertFalse(node0.isObjectLit());
122:       assertFalse(node0.isNot());
123:       assertFalse(node0.isString());
124:       
125:       boolean boolean0 = node0.wasEmptyNode();
126:       assertEquals(52, Node.LENGTH);
127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
128:       assertEquals(54, Node.SLASH_V);
129:       assertEquals(57, Node.REFLECTED_OBJECT);
130:       assertEquals(57, Node.LAST_PROP);
131:       assertEquals(30, Node.VAR_ARGS_NAME);
132:       assertEquals(49, Node.DIRECT_EVAL);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(40, Node.ORIGINALNAME_PROP);
135:       assertEquals(12, Node.COLUMN_BITS);
136:       assertEquals(46, Node.IS_NAMESPACE);
137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
138:       assertEquals(1, Node.DECR_FLAG);
139:       assertEquals(32, Node.INCRDECR_PROP);
140:       assertEquals(50, Node.FREE_CALL);
141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
142:       assertEquals(51, Node.STATIC_SOURCE_FILE);
143:       assertEquals(53, Node.INPUT_ID);
144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
145:       assertEquals(43, Node.IS_CONSTANT_NAME);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(2, Node.POST_FLAG);
148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
149:       assertEquals(4095, Node.COLUMN_MASK);
150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
151:       assertEquals(39, Node.EMPTY_BLOCK);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(29, Node.JSDOC_INFO_PROP);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
159:       assertEquals(55, Node.INFERRED_FUNCTION);
160:       assertEquals(8, Node.FLAG_NO_THROWS);
161:       assertEquals(36, Node.QUOTED_PROP);
162:       assertFalse(boolean0);
163:       assertFalse(node0.isBlock());
164:       assertFalse(node0.isNew());
165:       assertFalse(node0.isVar());
166:       assertFalse(node0.isWhile());
167:       assertFalse(node0.isContinue());
168:       assertFalse(node0.hasMoreThanOneChild());
169:       assertFalse(node0.isCall());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isSetterDef());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.isOr());
174:       assertEquals((-1), node0.getLineno());
175:       assertFalse(node0.isAssignAdd());
176:       assertFalse(node0.isNull());
177:       assertFalse(node0.isDo());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isTry());
180:       assertFalse(node0.isRegExp());
181:       assertFalse(node0.isDefaultCase());
182:       assertFalse(node0.isLabelName());
183:       assertFalse(node0.isArrayLit());
184:       assertEquals(0, node0.getChildCount());
185:       assertFalse(node0.isWith());
186:       assertFalse(node0.isCatch());
187:       assertFalse(node0.isInstanceOf());
188:       assertFalse(node0.isFor());
189:       assertFalse(node0.isStringKey());
190:       assertFalse(node0.isParamList());
191:       assertFalse(node0.hasOneChild());
192:       assertFalse(node0.isCase());
193:       assertFalse(node0.isGetterDef());
194:       assertFalse(node0.isNumber());
195:       assertFalse(node0.isScript());
196:       assertEquals((-1), node0.getCharno());
197:       assertFalse(node0.isSwitch());
198:       assertFalse(node0.isInc());
199:       assertFalse(node0.isHook());
200:       assertFalse(node0.isThrow());
201:       assertFalse(node0.isFalse());
202:       assertFalse(node0.isBreak());
203:       assertFalse(node0.isDelProp());
204:       assertFalse(node0.isIf());
205:       assertFalse(node0.isNE());
206:       assertEquals(42, node0.getType());
207:       assertFalse(node0.isIn());
208:       assertFalse(node0.isEmpty());
209:       assertFalse(node0.isVoid());
210:       assertFalse(node0.isDebugger());
211:       assertFalse(node0.isExprResult());
212:       assertFalse(node0.isTrue());
213:       assertFalse(node0.isFunction());
214:       assertFalse(node0.isAnd());
215:       assertFalse(node0.isGetElem());
216:       assertFalse(node0.isAssign());
217:       assertFalse(node0.isCast());
218:       assertTrue(node0.isThis());
219:       assertFalse(node0.isGetProp());
220:       assertFalse(node0.isTypeOf());
221:       assertFalse(node0.isDec());
222:       assertFalse(node0.isComma());
223:       assertEquals((-1), node0.getSourcePosition());
224:       assertFalse(node0.hasChildren());
225:       assertFalse(node0.isReturn());
226:       assertFalse(node0.isObjectLit());
227:       assertFalse(node0.isNot());
228:       assertFalse(node0.isString());
229:       
230:       Iterable<Node> iterable0 = node0.children();
231:       assertEquals(52, Node.LENGTH);
232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
233:       assertEquals(54, Node.SLASH_V);
234:       assertEquals(57, Node.REFLECTED_OBJECT);
235:       assertEquals(57, Node.LAST_PROP);
236:       assertEquals(30, Node.VAR_ARGS_NAME);
237:       assertEquals(49, Node.DIRECT_EVAL);
238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
239:       assertEquals(40, Node.ORIGINALNAME_PROP);
240:       assertEquals(12, Node.COLUMN_BITS);
241:       assertEquals(46, Node.IS_NAMESPACE);
242:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
243:       assertEquals(1, Node.DECR_FLAG);
244:       assertEquals(32, Node.INCRDECR_PROP);
245:       assertEquals(50, Node.FREE_CALL);
246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
247:       assertEquals(51, Node.STATIC_SOURCE_FILE);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
250:       assertEquals(43, Node.IS_CONSTANT_NAME);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(2, Node.POST_FLAG);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(4095, Node.COLUMN_MASK);
255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
256:       assertEquals(39, Node.EMPTY_BLOCK);
257:       assertEquals(37, Node.OPT_ARG_NAME);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(48, Node.DIRECTIVES);
260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
261:       assertEquals(29, Node.JSDOC_INFO_PROP);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
264:       assertEquals(55, Node.INFERRED_FUNCTION);
265:       assertEquals(8, Node.FLAG_NO_THROWS);
266:       assertEquals(36, Node.QUOTED_PROP);
267:       assertNotNull(iterable0);
268:       assertFalse(iterable0.contains(node0));
269:       assertFalse(node0.isBlock());
270:       assertFalse(node0.isNew());
271:       assertFalse(node0.isVar());
272:       assertFalse(node0.isWhile());
273:       assertFalse(node0.isContinue());
274:       assertFalse(node0.hasMoreThanOneChild());
275:       assertFalse(node0.isCall());
276:       assertFalse(node0.isName());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isLabel());
279:       assertFalse(node0.isOr());
280:       assertEquals((-1), node0.getLineno());
281:       assertFalse(node0.isAssignAdd());
282:       assertFalse(node0.isNull());
283:       assertFalse(node0.isDo());
284:       assertFalse(node0.isAdd());
285:       assertFalse(node0.isTry());
286:       assertFalse(node0.isRegExp());
287:       assertFalse(node0.isDefaultCase());
288:       assertFalse(node0.isLabelName());
289:       assertFalse(node0.isArrayLit());
290:       assertEquals(0, node0.getChildCount());
291:       assertFalse(node0.isWith());
292:       assertFalse(node0.isCatch());
293:       assertFalse(node0.isInstanceOf());
294:       assertFalse(node0.isFor());
295:       assertFalse(node0.isStringKey());
296:       assertFalse(node0.isParamList());
297:       assertFalse(node0.hasOneChild());
298:       assertFalse(node0.isCase());
299:       assertFalse(node0.isGetterDef());
300:       assertFalse(node0.isNumber());
301:       assertFalse(node0.isScript());
302:       assertEquals((-1), node0.getCharno());
303:       assertFalse(node0.isSwitch());
304:       assertFalse(node0.isInc());
305:       assertFalse(node0.isHook());
306:       assertFalse(node0.isThrow());
307:       assertFalse(node0.isFalse());
308:       assertFalse(node0.isBreak());
309:       assertFalse(node0.isDelProp());
310:       assertFalse(node0.isIf());
311:       assertFalse(node0.isNE());
312:       assertEquals(42, node0.getType());
313:       assertFalse(node0.isIn());
314:       assertFalse(node0.isEmpty());
315:       assertFalse(node0.isVoid());
316:       assertFalse(node0.isDebugger());
317:       assertFalse(node0.isExprResult());
318:       assertFalse(node0.isTrue());
319:       assertFalse(node0.isFunction());
320:       assertFalse(node0.isAnd());
321:       assertFalse(node0.isGetElem());
322:       assertFalse(node0.isAssign());
323:       assertFalse(node0.isCast());
324:       assertTrue(node0.isThis());
325:       assertFalse(node0.isGetProp());
326:       assertFalse(node0.isTypeOf());
327:       assertFalse(node0.isDec());
328:       assertFalse(node0.isComma());
329:       assertEquals((-1), node0.getSourcePosition());
330:       assertFalse(node0.hasChildren());
331:       assertFalse(node0.isReturn());
332:       assertFalse(node0.isObjectLit());
333:       assertFalse(node0.isNot());
334:       assertFalse(node0.isString());
335:   }
336: }
RegularFileObject[/tmp/EvoSuite_153_1628159593911/com/google/javascript/rhino/Node_153_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_153_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_153_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_153_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:14.019 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(42, "");
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node0);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(42, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertTrue(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());

boolean boolean0 = node0.wasEmptyNode();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(boolean0);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(42, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertTrue(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());

Iterable<Node> iterable0 = node0.children();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(42, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertTrue(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());


[MASTER] 10:33:16.205 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_183_1628159596114/com/google/javascript/rhino/Node_183_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_183_1628159596114/com/google/javascript/rhino/Node_183_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:16.205 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:16.205 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:16.205 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 590
[MASTER] 10:33:16.206 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_183_1628159596114/com/google/javascript/rhino/Node_183_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:16 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_183_tmp__ESTest extends Node_183_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(2976, "com.google.javascript.rhino.jstype.RecordType", 2520, 2520);
21:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
22:       assertEquals(43, Node.IS_CONSTANT_NAME);
23:       assertEquals(4095, Node.COLUMN_MASK);
24:       assertEquals(36, Node.QUOTED_PROP);
25:       assertEquals(53, Node.INPUT_ID);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(55, Node.INFERRED_FUNCTION);
28:       assertEquals(39, Node.EMPTY_BLOCK);
29:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
30:       assertEquals(29, Node.JSDOC_INFO_PROP);
31:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
32:       assertEquals(56, Node.CHANGE_TIME);
33:       assertEquals(8, Node.FLAG_NO_THROWS);
34:       assertEquals(57, Node.REFLECTED_OBJECT);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
37:       assertEquals(48, Node.DIRECTIVES);
38:       assertEquals(37, Node.OPT_ARG_NAME);
39:       assertEquals(30, Node.VAR_ARGS_NAME);
40:       assertEquals(49, Node.DIRECT_EVAL);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(12, Node.COLUMN_BITS);
43:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
44:       assertEquals(51, Node.STATIC_SOURCE_FILE);
45:       assertEquals(52, Node.LENGTH);
46:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
47:       assertEquals(15, Node.NO_SIDE_EFFECTS);
48:       assertEquals(32, Node.INCRDECR_PROP);
49:       assertEquals(1, Node.DECR_FLAG);
50:       assertEquals(50, Node.FREE_CALL);
51:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
52:       assertEquals(2, Node.POST_FLAG);
53:       assertEquals(47, Node.IS_DISPATCHER);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(54, Node.SLASH_V);
56:       assertEquals(40, Node.ORIGINALNAME_PROP);
57:       assertNotNull(node0);
58:       assertFalse(node0.isCatch());
59:       assertEquals(0, node0.getChildCount());
60:       assertFalse(node0.isRegExp());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isStringKey());
66:       assertEquals(2520, node0.getCharno());
67:       assertFalse(node0.isVar());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isGetterDef());
70:       assertFalse(node0.isParamList());
71:       assertFalse(node0.isDebugger());
72:       assertEquals(2976, node0.getType());
73:       assertFalse(node0.isContinue());
74:       assertFalse(node0.isCase());
75:       assertFalse(node0.hasMoreThanOneChild());
76:       assertFalse(node0.isIn());
77:       assertFalse(node0.isBlock());
78:       assertFalse(node0.isInc());
79:       assertFalse(node0.isFor());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.isNE());
82:       assertEquals(10324440, node0.getSourcePosition());
83:       assertFalse(node0.isIf());
84:       assertFalse(node0.isAnd());
85:       assertFalse(node0.isObjectLit());
86:       assertFalse(node0.isNot());
87:       assertFalse(node0.isInstanceOf());
88:       assertFalse(node0.isWith());
89:       assertFalse(node0.isComma());
90:       assertFalse(node0.isScript());
91:       assertFalse(node0.isGetProp());
92:       assertFalse(node0.isThis());
93:       assertFalse(node0.hasOneChild());
94:       assertFalse(node0.isCast());
95:       assertFalse(node0.isThrow());
96:       assertFalse(node0.isNumber());
97:       assertFalse(node0.isFalse());
98:       assertFalse(node0.isLabelName());
99:       assertFalse(node0.isSwitch());
100:       assertEquals(2520, node0.getLineno());
101:       assertFalse(node0.isString());
102:       assertFalse(node0.isOr());
103:       assertFalse(node0.isLabel());
104:       assertFalse(node0.isNew());
105:       assertFalse(node0.isAdd());
106:       assertFalse(node0.isReturn());
107:       assertFalse(node0.isWhile());
108:       assertFalse(node0.isDo());
109:       assertFalse(node0.isAssignAdd());
110:       assertFalse(node0.isCall());
111:       assertFalse(node0.isEmpty());
112:       assertFalse(node0.isGetElem());
113:       assertFalse(node0.hasChildren());
114:       assertFalse(node0.isDec());
115:       assertFalse(node0.isAssign());
116:       assertFalse(node0.isTypeOf());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.isVoid());
119:       assertFalse(node0.isTrue());
120:       assertFalse(node0.isNull());
121:       assertFalse(node0.isBreak());
122:       assertFalse(node0.isDelProp());
123:       assertFalse(node0.isName());
124:       
125:       Node node1 = Node.newString(30, "X/*EGw^TTE.a+E1#X", 8232, 147);
126:       assertEquals(43, Node.IS_CONSTANT_NAME);
127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
128:       assertEquals(36, Node.QUOTED_PROP);
129:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
130:       assertEquals(55, Node.INFERRED_FUNCTION);
131:       assertEquals(29, Node.JSDOC_INFO_PROP);
132:       assertEquals(53, Node.INPUT_ID);
133:       assertEquals(39, Node.EMPTY_BLOCK);
134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
135:       assertEquals(50, Node.FREE_CALL);
136:       assertEquals(2, Node.POST_FLAG);
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(47, Node.IS_DISPATCHER);
139:       assertEquals(46, Node.IS_NAMESPACE);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(30, Node.VAR_ARGS_NAME);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(57, Node.LAST_PROP);
144:       assertEquals(54, Node.SLASH_V);
145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
146:       assertEquals(12, Node.COLUMN_BITS);
147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
148:       assertEquals(32, Node.INCRDECR_PROP);
149:       assertEquals(52, Node.LENGTH);
150:       assertEquals(1, Node.DECR_FLAG);
151:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(8, Node.FLAG_NO_THROWS);
157:       assertEquals(57, Node.REFLECTED_OBJECT);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(4095, Node.COLUMN_MASK);
160:       assertEquals(37, Node.OPT_ARG_NAME);
161:       assertEquals(48, Node.DIRECTIVES);
162:       assertFalse(node1.equals((Object)node0));
163:       assertNotNull(node1);
164:       assertNotSame(node1, node0);
165:       assertFalse(node1.isCatch());
166:       assertFalse(node1.isFunction());
167:       assertEquals(0, node1.getChildCount());
168:       assertFalse(node1.isRegExp());
169:       assertFalse(node1.isSetterDef());
170:       assertFalse(node1.isDefaultCase());
171:       assertFalse(node1.isTry());
172:       assertFalse(node1.isName());
173:       assertFalse(node1.isCall());
174:       assertFalse(node1.isEmpty());
175:       assertFalse(node1.isFor());
176:       assertFalse(node1.isNull());
177:       assertFalse(node1.isTrue());
178:       assertFalse(node1.isNE());
179:       assertFalse(node1.isIf());
180:       assertFalse(node1.isVoid());
181:       assertFalse(node1.isDelProp());
182:       assertFalse(node1.isCase());
183:       assertFalse(node1.hasMoreThanOneChild());
184:       assertFalse(node1.isOr());
185:       assertFalse(node1.isBlock());
186:       assertFalse(node1.isLabel());
187:       assertFalse(node1.isAssignAdd());
188:       assertFalse(node1.isAdd());
189:       assertEquals(147, node1.getCharno());
190:       assertFalse(node1.isDo());
191:       assertFalse(node1.isStringKey());
192:       assertFalse(node1.isVar());
193:       assertFalse(node1.isNumber());
194:       assertFalse(node1.isGetterDef());
195:       assertFalse(node1.isParamList());
196:       assertFalse(node1.isSwitch());
197:       assertFalse(node1.isArrayLit());
198:       assertEquals(30, node1.getType());
199:       assertFalse(node1.isLabelName());
200:       assertEquals(33718419, node1.getSourcePosition());
201:       assertFalse(node1.isAnd());
202:       assertFalse(node1.isInstanceOf());
203:       assertFalse(node1.isWith());
204:       assertFalse(node1.isNot());
205:       assertFalse(node1.isObjectLit());
206:       assertFalse(node1.isGetProp());
207:       assertFalse(node1.isThis());
208:       assertFalse(node1.isScript());
209:       assertFalse(node1.hasOneChild());
210:       assertFalse(node1.isGetElem());
211:       assertFalse(node1.isDec());
212:       assertFalse(node1.isTypeOf());
213:       assertFalse(node1.isHook());
214:       assertFalse(node1.hasChildren());
215:       assertEquals(8232, node1.getLineno());
216:       assertFalse(node1.isComma());
217:       assertFalse(node1.isAssign());
218:       assertFalse(node1.isExprResult());
219:       assertFalse(node1.isBreak());
220:       assertFalse(node1.isContinue());
221:       assertFalse(node1.isWhile());
222:       assertFalse(node1.isString());
223:       assertFalse(node1.isIn());
224:       assertFalse(node1.isReturn());
225:       assertFalse(node1.isInc());
226:       assertFalse(node1.isFalse());
227:       assertTrue(node1.isNew());
228:       assertFalse(node1.isCast());
229:       assertFalse(node1.isThrow());
230:       assertFalse(node1.isDebugger());
231:       
232:       Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
233:       assertEquals(43, Node.IS_CONSTANT_NAME);
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       assertEquals(36, Node.QUOTED_PROP);
236:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
237:       assertEquals(55, Node.INFERRED_FUNCTION);
238:       assertEquals(29, Node.JSDOC_INFO_PROP);
239:       assertEquals(53, Node.INPUT_ID);
240:       assertEquals(39, Node.EMPTY_BLOCK);
241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(2, Node.POST_FLAG);
244:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
245:       assertEquals(47, Node.IS_DISPATCHER);
246:       assertEquals(46, Node.IS_NAMESPACE);
247:       assertEquals(40, Node.ORIGINALNAME_PROP);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(49, Node.DIRECT_EVAL);
250:       assertEquals(57, Node.LAST_PROP);
251:       assertEquals(54, Node.SLASH_V);
252:       assertEquals(51, Node.STATIC_SOURCE_FILE);
253:       assertEquals(12, Node.COLUMN_BITS);
254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
255:       assertEquals(32, Node.INCRDECR_PROP);
256:       assertEquals(52, Node.LENGTH);
257:       assertEquals(1, Node.DECR_FLAG);
258:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
259:       assertEquals(15, Node.NO_SIDE_EFFECTS);
260:       assertEquals(56, Node.CHANGE_TIME);
261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
262:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
263:       assertEquals(8, Node.FLAG_NO_THROWS);
264:       assertEquals(57, Node.REFLECTED_OBJECT);
265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
266:       assertEquals(4095, Node.COLUMN_MASK);
267:       assertEquals(37, Node.OPT_ARG_NAME);
268:       assertEquals(48, Node.DIRECTIVES);
269:       assertFalse(node1.equals((Object)node0));
270:       assertNotNull(node_AncestorIterable0);
271:       assertNotSame(node1, node0);
272:       assertFalse(node1.isCatch());
273:       assertFalse(node1.isFunction());
274:       assertEquals(0, node1.getChildCount());
275:       assertFalse(node1.isRegExp());
276:       assertFalse(node1.isSetterDef());
277:       assertFalse(node1.isDefaultCase());
278:       assertFalse(node1.isTry());
279:       assertFalse(node1.isName());
280:       assertFalse(node1.isCall());
281:       assertFalse(node1.isEmpty());
282:       assertFalse(node1.isFor());
283:       assertFalse(node1.isNull());
284:       assertFalse(node1.isTrue());
285:       assertFalse(node1.isNE());
286:       assertFalse(node1.isIf());
287:       assertFalse(node1.isVoid());
288:       assertFalse(node1.isDelProp());
289:       assertFalse(node1.isCase());
290:       assertFalse(node1.hasMoreThanOneChild());
291:       assertFalse(node1.isOr());
292:       assertFalse(node1.isBlock());
293:       assertFalse(node1.isLabel());
294:       assertFalse(node1.isAssignAdd());
295:       assertFalse(node1.isAdd());
296:       assertEquals(147, node1.getCharno());
297:       assertFalse(node1.isDo());
298:       assertFalse(node1.isStringKey());
299:       assertFalse(node1.isVar());
300:       assertFalse(node1.isNumber());
301:       assertFalse(node1.isGetterDef());
302:       assertFalse(node1.isParamList());
303:       assertFalse(node1.isSwitch());
304:       assertFalse(node1.isArrayLit());
305:       assertEquals(30, node1.getType());
306:       assertFalse(node1.isLabelName());
307:       assertEquals(33718419, node1.getSourcePosition());
308:       assertFalse(node1.isAnd());
309:       assertFalse(node1.isInstanceOf());
310:       assertFalse(node1.isWith());
311:       assertFalse(node1.isNot());
312:       assertFalse(node1.isObjectLit());
313:       assertFalse(node1.isGetProp());
314:       assertFalse(node1.isThis());
315:       assertFalse(node1.isScript());
316:       assertFalse(node1.hasOneChild());
317:       assertFalse(node1.isGetElem());
318:       assertFalse(node1.isDec());
319:       assertFalse(node1.isTypeOf());
320:       assertFalse(node1.isHook());
321:       assertFalse(node1.hasChildren());
322:       assertEquals(8232, node1.getLineno());
323:       assertFalse(node1.isComma());
324:       assertFalse(node1.isAssign());
325:       assertFalse(node1.isExprResult());
326:       assertFalse(node1.isBreak());
327:       assertFalse(node1.isContinue());
328:       assertFalse(node1.isWhile());
329:       assertFalse(node1.isString());
330:       assertFalse(node1.isIn());
331:       assertFalse(node1.isReturn());
332:       assertFalse(node1.isInc());
333:       assertFalse(node1.isFalse());
334:       assertTrue(node1.isNew());
335:       assertFalse(node1.isCast());
336:       assertFalse(node1.isThrow());
337:       assertFalse(node1.isDebugger());
338:       
339:       Node node2 = new Node(152, node1, 29, 165);
340:       assertEquals(43, Node.IS_CONSTANT_NAME);
341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
342:       assertEquals(36, Node.QUOTED_PROP);
343:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
344:       assertEquals(55, Node.INFERRED_FUNCTION);
345:       assertEquals(29, Node.JSDOC_INFO_PROP);
346:       assertEquals(53, Node.INPUT_ID);
347:       assertEquals(39, Node.EMPTY_BLOCK);
348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
349:       assertEquals(50, Node.FREE_CALL);
350:       assertEquals(2, Node.POST_FLAG);
351:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
352:       assertEquals(47, Node.IS_DISPATCHER);
353:       assertEquals(46, Node.IS_NAMESPACE);
354:       assertEquals(40, Node.ORIGINALNAME_PROP);
355:       assertEquals(30, Node.VAR_ARGS_NAME);
356:       assertEquals(49, Node.DIRECT_EVAL);
357:       assertEquals(57, Node.LAST_PROP);
358:       assertEquals(54, Node.SLASH_V);
359:       assertEquals(51, Node.STATIC_SOURCE_FILE);
360:       assertEquals(12, Node.COLUMN_BITS);
361:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
362:       assertEquals(32, Node.INCRDECR_PROP);
363:       assertEquals(52, Node.LENGTH);
364:       assertEquals(1, Node.DECR_FLAG);
365:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
366:       assertEquals(15, Node.NO_SIDE_EFFECTS);
367:       assertEquals(56, Node.CHANGE_TIME);
368:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
369:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(57, Node.REFLECTED_OBJECT);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(37, Node.OPT_ARG_NAME);
375:       assertEquals(48, Node.DIRECTIVES);
376:       assertEquals(30, Node.VAR_ARGS_NAME);
377:       assertEquals(57, Node.LAST_PROP);
378:       assertEquals(1, Node.DECR_FLAG);
379:       assertEquals(49, Node.DIRECT_EVAL);
380:       assertEquals(15, Node.NO_SIDE_EFFECTS);
381:       assertEquals(32, Node.INCRDECR_PROP);
382:       assertEquals(2, Node.POST_FLAG);
383:       assertEquals(47, Node.IS_DISPATCHER);
384:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
385:       assertEquals(12, Node.COLUMN_BITS);
386:       assertEquals(50, Node.FREE_CALL);
387:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
389:       assertEquals(40, Node.ORIGINALNAME_PROP);
390:       assertEquals(43, Node.IS_CONSTANT_NAME);
391:       assertEquals(51, Node.STATIC_SOURCE_FILE);
392:       assertEquals(46, Node.IS_NAMESPACE);
393:       assertEquals(54, Node.SLASH_V);
394:       assertEquals(55, Node.INFERRED_FUNCTION);
395:       assertEquals(4095, Node.COLUMN_MASK);
396:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
397:       assertEquals(53, Node.INPUT_ID);
398:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
399:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
400:       assertEquals(8, Node.FLAG_NO_THROWS);
401:       assertEquals(39, Node.EMPTY_BLOCK);
402:       assertEquals(37, Node.OPT_ARG_NAME);
403:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
404:       assertEquals(29, Node.JSDOC_INFO_PROP);
405:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
406:       assertEquals(52, Node.LENGTH);
407:       assertEquals(48, Node.DIRECTIVES);
408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
409:       assertEquals(36, Node.QUOTED_PROP);
410:       assertEquals(56, Node.CHANGE_TIME);
411:       assertEquals(57, Node.REFLECTED_OBJECT);
412:       assertFalse(node1.equals((Object)node0));
413:       assertFalse(node2.equals((Object)node1));
414:       assertFalse(node2.equals((Object)node0));
415:       assertNotNull(node2);
416:       assertFalse(node1.isCatch());
417:       assertFalse(node1.isFunction());
418:       assertEquals(0, node1.getChildCount());
419:       assertFalse(node1.isRegExp());
420:       assertFalse(node1.isSetterDef());
421:       assertFalse(node1.isDefaultCase());
422:       assertFalse(node1.isTry());
423:       assertFalse(node1.isName());
424:       assertFalse(node1.isCall());
425:       assertFalse(node1.isEmpty());
426:       assertFalse(node1.isFor());
427:       assertFalse(node1.isNull());
428:       assertFalse(node1.isTrue());
429:       assertFalse(node1.isNE());
430:       assertFalse(node1.isIf());
431:       assertFalse(node1.isVoid());
432:       assertFalse(node1.isDelProp());
433:       assertFalse(node1.isCase());
434:       assertFalse(node1.hasMoreThanOneChild());
435:       assertFalse(node1.isOr());
436:       assertFalse(node1.isBlock());
437:       assertFalse(node1.isLabel());
438:       assertFalse(node1.isAssignAdd());
439:       assertFalse(node1.isAdd());
440:       assertEquals(147, node1.getCharno());
441:       assertFalse(node1.isDo());
442:       assertFalse(node1.isStringKey());
443:       assertFalse(node1.isVar());
444:       assertFalse(node1.isNumber());
445:       assertFalse(node1.isGetterDef());
446:       assertFalse(node1.isParamList());
447:       assertFalse(node1.isSwitch());
448:       assertFalse(node1.isArrayLit());
449:       assertEquals(30, node1.getType());
450:       assertFalse(node1.isLabelName());
451:       assertEquals(33718419, node1.getSourcePosition());
452:       assertFalse(node1.isAnd());
453:       assertFalse(node1.isInstanceOf());
454:       assertFalse(node1.isWith());
455:       assertFalse(node1.isNot());
456:       assertFalse(node1.isObjectLit());
457:       assertFalse(node1.isGetProp());
458:       assertFalse(node1.isThis());
459:       assertFalse(node1.isScript());
460:       assertFalse(node1.hasOneChild());
461:       assertFalse(node1.isGetElem());
462:       assertFalse(node1.isDec());
463:       assertFalse(node1.isTypeOf());
464:       assertFalse(node1.isHook());
465:       assertFalse(node1.hasChildren());
466:       assertEquals(8232, node1.getLineno());
467:       assertFalse(node1.isComma());
468:       assertFalse(node1.isAssign());
469:       assertFalse(node1.isExprResult());
470:       assertFalse(node1.isBreak());
471:       assertFalse(node1.isContinue());
472:       assertFalse(node1.isWhile());
473:       assertFalse(node1.isString());
474:       assertFalse(node1.isIn());
475:       assertFalse(node1.isReturn());
476:       assertFalse(node1.isInc());
477:       assertFalse(node1.isFalse());
478:       assertTrue(node1.isNew());
479:       assertFalse(node1.isCast());
480:       assertFalse(node1.isThrow());
481:       assertFalse(node1.isDebugger());
482:       assertFalse(node2.isContinue());
483:       assertFalse(node2.hasMoreThanOneChild());
484:       assertFalse(node2.isWhile());
485:       assertFalse(node2.isDo());
486:       assertFalse(node2.isBlock());
487:       assertFalse(node2.isAssignAdd());
488:       assertFalse(node2.isReturn());
489:       assertFalse(node2.isTypeOf());
490:       assertFalse(node2.isLabel());
491:       assertFalse(node2.isAssign());
492:       assertFalse(node2.isDec());
493:       assertFalse(node2.isGetElem());
494:       assertFalse(node2.isCall());
495:       assertFalse(node2.isName());
496:       assertFalse(node2.isVar());
497:       assertFalse(node2.isNew());
498:       assertFalse(node2.isSetterDef());
499:       assertFalse(node2.isAdd());
500:       assertFalse(node2.isNull());
501:       assertFalse(node2.isOr());
502:       assertFalse(node2.isWith());
503:       assertFalse(node2.isCatch());
504:       assertFalse(node2.isInstanceOf());
505:       assertFalse(node2.isDefaultCase());
506:       assertEquals(165, node2.getCharno());
507:       assertEquals(118949, node2.getSourcePosition());
508:       assertFalse(node2.isThis());
509:       assertFalse(node2.isRegExp());
510:       assertFalse(node2.isFor());
511:       assertTrue(node2.isDebugger());
512:       assertFalse(node2.isStringKey());
513:       assertFalse(node2.isLabelName());
514:       assertFalse(node2.isArrayLit());
515:       assertFalse(node2.isTry());
516:       assertFalse(node2.isScript());
517:       assertFalse(node2.isSwitch());
518:       assertFalse(node2.isParamList());
519:       assertFalse(node2.isGetterDef());
520:       assertFalse(node2.isNumber());
521:       assertFalse(node2.isString());
522:       assertFalse(node2.isCase());
523:       assertTrue(node2.hasChildren());
524:       assertTrue(node2.hasOneChild());
525:       assertFalse(node2.isHook());
526:       assertEquals(1, node2.getChildCount());
527:       assertFalse(node2.isThrow());
528:       assertFalse(node2.isEmpty());
529:       assertFalse(node2.isBreak());
530:       assertFalse(node2.isDelProp());
531:       assertFalse(node2.isIf());
532:       assertFalse(node2.isVoid());
533:       assertFalse(node2.isTrue());
534:       assertFalse(node2.isInc());
535:       assertFalse(node2.isNE());
536:       assertFalse(node2.isIn());
537:       assertFalse(node2.isAnd());
538:       assertFalse(node2.isObjectLit());
539:       assertEquals(29, node2.getLineno());
540:       assertFalse(node2.isExprResult());
541:       assertFalse(node2.isFunction());
542:       assertFalse(node2.isComma());
543:       assertFalse(node2.isFalse());
544:       assertEquals(152, node2.getType());
545:       assertFalse(node2.isCast());
546:       assertFalse(node2.isGetProp());
547:       assertFalse(node2.isNot());
548:       
549:       Iterable<Node> iterable0 = node1.children();
550:       assertEquals(43, Node.IS_CONSTANT_NAME);
551:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
552:       assertEquals(36, Node.QUOTED_PROP);
553:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
554:       assertEquals(55, Node.INFERRED_FUNCTION);
555:       assertEquals(29, Node.JSDOC_INFO_PROP);
556:       assertEquals(53, Node.INPUT_ID);
557:       assertEquals(39, Node.EMPTY_BLOCK);
558:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
559:       assertEquals(50, Node.FREE_CALL);
560:       assertEquals(2, Node.POST_FLAG);
561:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
562:       assertEquals(47, Node.IS_DISPATCHER);
563:       assertEquals(46, Node.IS_NAMESPACE);
564:       assertEquals(40, Node.ORIGINALNAME_PROP);
565:       assertEquals(30, Node.VAR_ARGS_NAME);
566:       assertEquals(49, Node.DIRECT_EVAL);
567:       assertEquals(57, Node.LAST_PROP);
568:       assertEquals(54, Node.SLASH_V);
569:       assertEquals(51, Node.STATIC_SOURCE_FILE);
570:       assertEquals(12, Node.COLUMN_BITS);
571:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
572:       assertEquals(32, Node.INCRDECR_PROP);
573:       assertEquals(52, Node.LENGTH);
574:       assertEquals(1, Node.DECR_FLAG);
575:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
576:       assertEquals(15, Node.NO_SIDE_EFFECTS);
577:       assertEquals(56, Node.CHANGE_TIME);
578:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
579:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
580:       assertEquals(8, Node.FLAG_NO_THROWS);
581:       assertEquals(57, Node.REFLECTED_OBJECT);
582:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertEquals(37, Node.OPT_ARG_NAME);
585:       assertEquals(48, Node.DIRECTIVES);
586:       assertFalse(node1.equals((Object)node2));
587:       assertFalse(node1.equals((Object)node0));
588:       assertNotNull(iterable0);
589:       assertNotSame(node1, node0);
590:       assertFalse(iterable0.contains(node1));
591:       assertFalse(node1.isCatch());
592:       assertFalse(node1.isFunction());
593:       assertEquals(0, node1.getChildCount());
594:       assertFalse(node1.isRegExp());
595:       assertFalse(node1.isSetterDef());
596:       assertFalse(node1.isDefaultCase());
597:       assertFalse(node1.isTry());
598:       assertFalse(node1.isName());
599:       assertFalse(node1.isCall());
600:       assertFalse(node1.isEmpty());
601:       assertFalse(node1.isFor());
602:       assertFalse(node1.isNull());
603:       assertFalse(node1.isTrue());
604:       assertFalse(node1.isNE());
605:       assertFalse(node1.isIf());
606:       assertFalse(node1.isVoid());
607:       assertFalse(node1.isDelProp());
608:       assertFalse(node1.isCase());
609:       assertFalse(node1.hasMoreThanOneChild());
610:       assertFalse(node1.isOr());
611:       assertFalse(node1.isBlock());
612:       assertFalse(node1.isLabel());
613:       assertFalse(node1.isAssignAdd());
614:       assertFalse(node1.isAdd());
615:       assertEquals(147, node1.getCharno());
616:       assertFalse(node1.isDo());
617:       assertFalse(node1.isStringKey());
618:       assertFalse(node1.isVar());
619:       assertFalse(node1.isNumber());
620:       assertFalse(node1.isGetterDef());
621:       assertFalse(node1.isParamList());
622:       assertFalse(node1.isSwitch());
623:       assertFalse(node1.isArrayLit());
624:       assertEquals(30, node1.getType());
625:       assertFalse(node1.isLabelName());
626:       assertEquals(33718419, node1.getSourcePosition());
627:       assertFalse(node1.isAnd());
628:       assertFalse(node1.isInstanceOf());
629:       assertFalse(node1.isWith());
630:       assertFalse(node1.isNot());
631:       assertFalse(node1.isObjectLit());
632:       assertFalse(node1.isGetProp());
633:       assertFalse(node1.isThis());
634:       assertFalse(node1.isScript());
635:       assertFalse(node1.hasOneChild());
636:       assertFalse(node1.isGetElem());
637:       assertFalse(node1.isDec());
638:       assertFalse(node1.isTypeOf());
639:       assertFalse(node1.isHook());
640:       assertFalse(node1.hasChildren());
641:       assertEquals(8232, node1.getLineno());
642:       assertFalse(node1.isComma());
643:       assertFalse(node1.isAssign());
644:       assertFalse(node1.isExprResult());
645:       assertFalse(node1.isBreak());
646:       assertFalse(node1.isContinue());
647:       assertFalse(node1.isWhile());
648:       assertFalse(node1.isString());
649:       assertFalse(node1.isIn());
650:       assertFalse(node1.isReturn());
651:       assertFalse(node1.isInc());
652:       assertFalse(node1.isFalse());
653:       assertTrue(node1.isNew());
654:       assertFalse(node1.isCast());
655:       assertFalse(node1.isThrow());
656:       assertFalse(node1.isDebugger());
657:       
658:       boolean boolean0 = node0.isSetterDef();
659:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
660:       assertEquals(43, Node.IS_CONSTANT_NAME);
661:       assertEquals(4095, Node.COLUMN_MASK);
662:       assertEquals(36, Node.QUOTED_PROP);
663:       assertEquals(53, Node.INPUT_ID);
664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
665:       assertEquals(55, Node.INFERRED_FUNCTION);
666:       assertEquals(39, Node.EMPTY_BLOCK);
667:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
668:       assertEquals(29, Node.JSDOC_INFO_PROP);
669:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
670:       assertEquals(56, Node.CHANGE_TIME);
671:       assertEquals(8, Node.FLAG_NO_THROWS);
672:       assertEquals(57, Node.REFLECTED_OBJECT);
673:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
674:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
675:       assertEquals(48, Node.DIRECTIVES);
676:       assertEquals(37, Node.OPT_ARG_NAME);
677:       assertEquals(30, Node.VAR_ARGS_NAME);
678:       assertEquals(49, Node.DIRECT_EVAL);
679:       assertEquals(57, Node.LAST_PROP);
680:       assertEquals(12, Node.COLUMN_BITS);
681:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
682:       assertEquals(51, Node.STATIC_SOURCE_FILE);
683:       assertEquals(52, Node.LENGTH);
684:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
685:       assertEquals(15, Node.NO_SIDE_EFFECTS);
686:       assertEquals(32, Node.INCRDECR_PROP);
687:       assertEquals(1, Node.DECR_FLAG);
688:       assertEquals(50, Node.FREE_CALL);
689:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
690:       assertEquals(2, Node.POST_FLAG);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(46, Node.IS_NAMESPACE);
693:       assertEquals(54, Node.SLASH_V);
694:       assertEquals(40, Node.ORIGINALNAME_PROP);
695:       assertFalse(node0.equals((Object)node1));
696:       assertFalse(node0.equals((Object)node2));
697:       assertNotSame(node0, node1);
698:       assertFalse(boolean0);
699:       assertFalse(node0.isCatch());
700:       assertEquals(0, node0.getChildCount());
701:       assertFalse(node0.isRegExp());
702:       assertFalse(node0.isFunction());
703:       assertFalse(node0.isSetterDef());
704:       assertFalse(node0.isTry());
705:       assertFalse(node0.isDefaultCase());
706:       assertFalse(node0.isStringKey());
707:       assertEquals(2520, node0.getCharno());
708:       assertFalse(node0.isVar());
709:       assertFalse(node0.isArrayLit());
710:       assertFalse(node0.isGetterDef());
711:       assertFalse(node0.isParamList());
712:       assertFalse(node0.isDebugger());
713:       assertEquals(2976, node0.getType());
714:       assertFalse(node0.isContinue());
715:       assertFalse(node0.isCase());
716:       assertFalse(node0.hasMoreThanOneChild());
717:       assertFalse(node0.isIn());
718:       assertFalse(node0.isBlock());
719:       assertFalse(node0.isInc());
720:       assertFalse(node0.isFor());
721:       assertFalse(node0.isHook());
722:       assertFalse(node0.isNE());
723:       assertEquals(10324440, node0.getSourcePosition());
724:       assertFalse(node0.isIf());
725:       assertFalse(node0.isAnd());
726:       assertFalse(node0.isObjectLit());
727:       assertFalse(node0.isNot());
728:       assertFalse(node0.isInstanceOf());
729:       assertFalse(node0.isWith());
730:       assertFalse(node0.isComma());
731:       assertFalse(node0.isScript());
732:       assertFalse(node0.isGetProp());
733:       assertFalse(node0.isThis());
734:       assertFalse(node0.hasOneChild());
735:       assertFalse(node0.isCast());
736:       assertFalse(node0.isThrow());
737:       assertFalse(node0.isNumber());
738:       assertFalse(node0.isFalse());
739:       assertFalse(node0.isLabelName());
740:       assertFalse(node0.isSwitch());
741:       assertEquals(2520, node0.getLineno());
742:       assertFalse(node0.isString());
743:       assertFalse(node0.isOr());
744:       assertFalse(node0.isLabel());
745:       assertFalse(node0.isNew());
746:       assertFalse(node0.isAdd());
747:       assertFalse(node0.isReturn());
748:       assertFalse(node0.isWhile());
749:       assertFalse(node0.isDo());
750:       assertFalse(node0.isAssignAdd());
751:       assertFalse(node0.isCall());
752:       assertFalse(node0.isEmpty());
753:       assertFalse(node0.isGetElem());
754:       assertFalse(node0.hasChildren());
755:       assertFalse(node0.isDec());
756:       assertFalse(node0.isAssign());
757:       assertFalse(node0.isTypeOf());
758:       assertFalse(node0.isExprResult());
759:       assertFalse(node0.isVoid());
760:       assertFalse(node0.isTrue());
761:       assertFalse(node0.isNull());
762:       assertFalse(node0.isBreak());
763:       assertFalse(node0.isDelProp());
764:       assertFalse(node0.isName());
765:       
766:       int int0 = node2.getSideEffectFlags();
767:       assertEquals(43, Node.IS_CONSTANT_NAME);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(36, Node.QUOTED_PROP);
770:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
771:       assertEquals(55, Node.INFERRED_FUNCTION);
772:       assertEquals(29, Node.JSDOC_INFO_PROP);
773:       assertEquals(53, Node.INPUT_ID);
774:       assertEquals(39, Node.EMPTY_BLOCK);
775:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
776:       assertEquals(50, Node.FREE_CALL);
777:       assertEquals(2, Node.POST_FLAG);
778:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
779:       assertEquals(47, Node.IS_DISPATCHER);
780:       assertEquals(46, Node.IS_NAMESPACE);
781:       assertEquals(40, Node.ORIGINALNAME_PROP);
782:       assertEquals(30, Node.VAR_ARGS_NAME);
783:       assertEquals(49, Node.DIRECT_EVAL);
784:       assertEquals(57, Node.LAST_PROP);
785:       assertEquals(54, Node.SLASH_V);
786:       assertEquals(51, Node.STATIC_SOURCE_FILE);
787:       assertEquals(12, Node.COLUMN_BITS);
788:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
789:       assertEquals(32, Node.INCRDECR_PROP);
790:       assertEquals(52, Node.LENGTH);
791:       assertEquals(1, Node.DECR_FLAG);
792:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
793:       assertEquals(15, Node.NO_SIDE_EFFECTS);
794:       assertEquals(56, Node.CHANGE_TIME);
795:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
796:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
797:       assertEquals(8, Node.FLAG_NO_THROWS);
798:       assertEquals(57, Node.REFLECTED_OBJECT);
799:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
800:       assertEquals(4095, Node.COLUMN_MASK);
801:       assertEquals(37, Node.OPT_ARG_NAME);
802:       assertEquals(48, Node.DIRECTIVES);
803:       assertEquals(30, Node.VAR_ARGS_NAME);
804:       assertEquals(57, Node.LAST_PROP);
805:       assertEquals(1, Node.DECR_FLAG);
806:       assertEquals(49, Node.DIRECT_EVAL);
807:       assertEquals(15, Node.NO_SIDE_EFFECTS);
808:       assertEquals(32, Node.INCRDECR_PROP);
809:       assertEquals(2, Node.POST_FLAG);
810:       assertEquals(47, Node.IS_DISPATCHER);
811:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
812:       assertEquals(12, Node.COLUMN_BITS);
813:       assertEquals(50, Node.FREE_CALL);
814:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
815:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
816:       assertEquals(40, Node.ORIGINALNAME_PROP);
817:       assertEquals(43, Node.IS_CONSTANT_NAME);
818:       assertEquals(51, Node.STATIC_SOURCE_FILE);
819:       assertEquals(46, Node.IS_NAMESPACE);
820:       assertEquals(54, Node.SLASH_V);
821:       assertEquals(55, Node.INFERRED_FUNCTION);
822:       assertEquals(4095, Node.COLUMN_MASK);
823:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
824:       assertEquals(53, Node.INPUT_ID);
825:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
826:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
827:       assertEquals(8, Node.FLAG_NO_THROWS);
828:       assertEquals(39, Node.EMPTY_BLOCK);
829:       assertEquals(37, Node.OPT_ARG_NAME);
830:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
831:       assertEquals(29, Node.JSDOC_INFO_PROP);
832:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
833:       assertEquals(52, Node.LENGTH);
834:       assertEquals(48, Node.DIRECTIVES);
835:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
836:       assertEquals(36, Node.QUOTED_PROP);
837:       assertEquals(56, Node.CHANGE_TIME);
838:       assertEquals(57, Node.REFLECTED_OBJECT);
839:       assertFalse(node1.equals((Object)node2));
840:       assertFalse(node1.equals((Object)node0));
841:       assertFalse(node2.equals((Object)node1));
842:       assertFalse(node2.equals((Object)node0));
843:       assertNotSame(node1, node0);
844:       assertEquals(0, int0);
845:       assertFalse(node1.isCatch());
846:       assertFalse(node1.isFunction());
847:       assertEquals(0, node1.getChildCount());
848:       assertFalse(node1.isRegExp());
849:       assertFalse(node1.isSetterDef());
850:       assertFalse(node1.isDefaultCase());
851:       assertFalse(node1.isTry());
852:       assertFalse(node1.isName());
853:       assertFalse(node1.isCall());
854:       assertFalse(node1.isEmpty());
855:       assertFalse(node1.isFor());
856:       assertFalse(node1.isNull());
857:       assertFalse(node1.isTrue());
858:       assertFalse(node1.isNE());
859:       assertFalse(node1.isIf());
860:       assertFalse(node1.isVoid());
861:       assertFalse(node1.isDelProp());
862:       assertFalse(node1.isCase());
863:       assertFalse(node1.hasMoreThanOneChild());
864:       assertFalse(node1.isOr());
865:       assertFalse(node1.isBlock());
866:       assertFalse(node1.isLabel());
867:       assertFalse(node1.isAssignAdd());
868:       assertFalse(node1.isAdd());
869:       assertEquals(147, node1.getCharno());
870:       assertFalse(node1.isDo());
871:       assertFalse(node1.isStringKey());
872:       assertFalse(node1.isVar());
873:       assertFalse(node1.isNumber());
874:       assertFalse(node1.isGetterDef());
875:       assertFalse(node1.isParamList());
876:       assertFalse(node1.isSwitch());
877:       assertFalse(node1.isArrayLit());
878:       assertEquals(30, node1.getType());
879:       assertFalse(node1.isLabelName());
880:       assertEquals(33718419, node1.getSourcePosition());
881:       assertFalse(node1.isAnd());
882:       assertFalse(node1.isInstanceOf());
883:       assertFalse(node1.isWith());
884:       assertFalse(node1.isNot());
885:       assertFalse(node1.isObjectLit());
886:       assertFalse(node1.isGetProp());
887:       assertFalse(node1.isThis());
888:       assertFalse(node1.isScript());
889:       assertFalse(node1.hasOneChild());
890:       assertFalse(node1.isGetElem());
891:       assertFalse(node1.isDec());
892:       assertFalse(node1.isTypeOf());
893:       assertFalse(node1.isHook());
894:       assertFalse(node1.hasChildren());
895:       assertEquals(8232, node1.getLineno());
896:       assertFalse(node1.isComma());
897:       assertFalse(node1.isAssign());
898:       assertFalse(node1.isExprResult());
899:       assertFalse(node1.isBreak());
900:       assertFalse(node1.isContinue());
901:       assertFalse(node1.isWhile());
902:       assertFalse(node1.isString());
903:       assertFalse(node1.isIn());
904:       assertFalse(node1.isReturn());
905:       assertFalse(node1.isInc());
906:       assertFalse(node1.isFalse());
907:       assertTrue(node1.isNew());
908:       assertFalse(node1.isCast());
909:       assertFalse(node1.isThrow());
910:       assertFalse(node1.isDebugger());
911:       assertFalse(node2.isContinue());
912:       assertFalse(node2.hasMoreThanOneChild());
913:       assertFalse(node2.isWhile());
914:       assertFalse(node2.isDo());
915:       assertFalse(node2.isBlock());
916:       assertFalse(node2.isAssignAdd());
917:       assertFalse(node2.isReturn());
918:       assertFalse(node2.isTypeOf());
919:       assertFalse(node2.isLabel());
920:       assertFalse(node2.isAssign());
921:       assertFalse(node2.isDec());
922:       assertFalse(node2.isGetElem());
923:       assertFalse(node2.isCall());
924:       assertFalse(node2.isName());
925:       assertFalse(node2.isVar());
926:       assertFalse(node2.isNew());
927:       assertFalse(node2.isSetterDef());
928:       assertFalse(node2.isAdd());
929:       assertFalse(node2.isNull());
930:       assertFalse(node2.isOr());
931:       assertFalse(node2.isWith());
932:       assertFalse(node2.isCatch());
933:       assertFalse(node2.isInstanceOf());
934:       assertFalse(node2.isDefaultCase());
935:       assertEquals(165, node2.getCharno());
936:       assertEquals(118949, node2.getSourcePosition());
937:       assertFalse(node2.isThis());
938:       assertFalse(node2.isRegExp());
939:       assertFalse(node2.isFor());
940:       assertTrue(node2.isDebugger());
941:       assertFalse(node2.isStringKey());
942:       assertFalse(node2.isLabelName());
943:       assertFalse(node2.isArrayLit());
944:       assertFalse(node2.isTry());
945:       assertFalse(node2.isScript());
946:       assertFalse(node2.isSwitch());
947:       assertFalse(node2.isParamList());
948:       assertFalse(node2.isGetterDef());
949:       assertFalse(node2.isNumber());
950:       assertFalse(node2.isString());
951:       assertFalse(node2.isCase());
952:       assertTrue(node2.hasChildren());
953:       assertTrue(node2.hasOneChild());
954:       assertFalse(node2.isHook());
955:       assertEquals(1, node2.getChildCount());
956:       assertFalse(node2.isThrow());
957:       assertFalse(node2.isEmpty());
958:       assertFalse(node2.isBreak());
959:       assertFalse(node2.isDelProp());
960:       assertFalse(node2.isIf());
961:       assertFalse(node2.isVoid());
962:       assertFalse(node2.isTrue());
963:       assertFalse(node2.isInc());
964:       assertFalse(node2.isNE());
965:       assertFalse(node2.isIn());
966:       assertFalse(node2.isAnd());
967:       assertFalse(node2.isObjectLit());
968:       assertEquals(29, node2.getLineno());
969:       assertFalse(node2.isExprResult());
970:       assertFalse(node2.isFunction());
971:       assertFalse(node2.isComma());
972:       assertFalse(node2.isFalse());
973:       assertEquals(152, node2.getType());
974:       assertFalse(node2.isCast());
975:       assertFalse(node2.isGetProp());
976:       assertFalse(node2.isNot());
977:       
978:       boolean boolean1 = node1.isNew();
979:       assertEquals(43, Node.IS_CONSTANT_NAME);
980:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
981:       assertEquals(36, Node.QUOTED_PROP);
982:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
983:       assertEquals(55, Node.INFERRED_FUNCTION);
984:       assertEquals(29, Node.JSDOC_INFO_PROP);
985:       assertEquals(53, Node.INPUT_ID);
986:       assertEquals(39, Node.EMPTY_BLOCK);
987:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
988:       assertEquals(50, Node.FREE_CALL);
989:       assertEquals(2, Node.POST_FLAG);
990:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
991:       assertEquals(47, Node.IS_DISPATCHER);
992:       assertEquals(46, Node.IS_NAMESPACE);
993:       assertEquals(40, Node.ORIGINALNAME_PROP);
994:       assertEquals(30, Node.VAR_ARGS_NAME);
995:       assertEquals(49, Node.DIRECT_EVAL);
996:       assertEquals(57, Node.LAST_PROP);
997:       assertEquals(54, Node.SLASH_V);
998:       assertEquals(51, Node.STATIC_SOURCE_FILE);
999:       assertEquals(12, Node.COLUMN_BITS);
1000:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1001:       assertEquals(32, Node.INCRDECR_PROP);
1002:       assertEquals(52, Node.LENGTH);
1003:       assertEquals(1, Node.DECR_FLAG);
1004:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1005:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1006:       assertEquals(56, Node.CHANGE_TIME);
1007:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1008:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1009:       assertEquals(8, Node.FLAG_NO_THROWS);
1010:       assertEquals(57, Node.REFLECTED_OBJECT);
1011:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1012:       assertEquals(4095, Node.COLUMN_MASK);
1013:       assertEquals(37, Node.OPT_ARG_NAME);
1014:       assertEquals(48, Node.DIRECTIVES);
1015:       assertFalse(node1.equals((Object)node2));
1016:       assertFalse(node1.equals((Object)node0));
1017:       assertFalse(boolean1 == boolean0);
1018:       assertNotSame(node1, node0);
1019:       assertTrue(boolean1);
1020:       assertFalse(node1.isCatch());
1021:       assertFalse(node1.isFunction());
1022:       assertEquals(0, node1.getChildCount());
1023:       assertFalse(node1.isRegExp());
1024:       assertFalse(node1.isSetterDef());
1025:       assertFalse(node1.isDefaultCase());
1026:       assertFalse(node1.isTry());
1027:       assertFalse(node1.isName());
1028:       assertFalse(node1.isCall());
1029:       assertFalse(node1.isEmpty());
1030:       assertFalse(node1.isFor());
1031:       assertFalse(node1.isNull());
1032:       assertFalse(node1.isTrue());
1033:       assertFalse(node1.isNE());
1034:       assertFalse(node1.isIf());
1035:       assertFalse(node1.isVoid());
1036:       assertFalse(node1.isDelProp());
1037:       assertFalse(node1.isCase());
1038:       assertFalse(node1.hasMoreThanOneChild());
1039:       assertFalse(node1.isOr());
1040:       assertFalse(node1.isBlock());
1041:       assertFalse(node1.isLabel());
1042:       assertFalse(node1.isAssignAdd());
1043:       assertFalse(node1.isAdd());
1044:       assertEquals(147, node1.getCharno());
1045:       assertFalse(node1.isDo());
1046:       assertFalse(node1.isStringKey());
1047:       assertFalse(node1.isVar());
1048:       assertFalse(node1.isNumber());
1049:       assertFalse(node1.isGetterDef());
1050:       assertFalse(node1.isParamList());
1051:       assertFalse(node1.isSwitch());
1052:       assertFalse(node1.isArrayLit());
1053:       assertEquals(30, node1.getType());
1054:       assertFalse(node1.isLabelName());
1055:       assertEquals(33718419, node1.getSourcePosition());
1056:       assertFalse(node1.isAnd());
1057:       assertFalse(node1.isInstanceOf());
1058:       assertFalse(node1.isWith());
1059:       assertFalse(node1.isNot());
1060:       assertFalse(node1.isObjectLit());
1061:       assertFalse(node1.isGetProp());
1062:       assertFalse(node1.isThis());
1063:       assertFalse(node1.isScript());
1064:       assertFalse(node1.hasOneChild());
1065:       assertFalse(node1.isGetElem());
1066:       assertFalse(node1.isDec());
1067:       assertFalse(node1.isTypeOf());
1068:       assertFalse(node1.isHook());
1069:       assertFalse(node1.hasChildren());
1070:       assertEquals(8232, node1.getLineno());
1071:       assertFalse(node1.isComma());
1072:       assertFalse(node1.isAssign());
1073:       assertFalse(node1.isExprResult());
1074:       assertFalse(node1.isBreak());
1075:       assertFalse(node1.isContinue());
1076:       assertFalse(node1.isWhile());
1077:       assertFalse(node1.isString());
1078:       assertFalse(node1.isIn());
1079:       assertFalse(node1.isReturn());
1080:       assertFalse(node1.isInc());
1081:       assertFalse(node1.isFalse());
1082:       assertTrue(node1.isNew());
1083:       assertFalse(node1.isCast());
1084:       assertFalse(node1.isThrow());
1085:       assertFalse(node1.isDebugger());
1086:   }
1087: }
RegularFileObject[/tmp/EvoSuite_183_1628159596114/com/google/javascript/rhino/Node_183_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:16 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_183_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_183_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_183_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:16.400 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(2976, "com.google.javascript.rhino.jstype.RecordType", 2520, 2520);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertEquals(2520, node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertEquals(2976, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertEquals(10324440, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertEquals(2520, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());

Node node1 = Node.newString(30, "X/*EGw^TTE.a+E1#X", 8232, 147);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertNotSame(node1, node0);
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertEquals(147, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(30, node1.getType());
assertFalse(node1.isLabelName());
assertEquals(33718419, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertEquals(8232, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertTrue(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());

Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node1.equals((Object)node0));
assertNotNull(node_AncestorIterable0);
assertNotSame(node1, node0);
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertEquals(147, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(30, node1.getType());
assertFalse(node1.isLabelName());
assertEquals(33718419, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertEquals(8232, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertTrue(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());

Node node2 = new Node(152, node1, 29, 165);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertEquals(147, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(30, node1.getType());
assertFalse(node1.isLabelName());
assertEquals(33718419, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertEquals(8232, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertTrue(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDefaultCase());
assertEquals(165, node2.getCharno());
assertEquals(118949, node2.getSourcePosition());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertTrue(node2.isDebugger());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertTrue(node2.hasOneChild());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals(29, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(152, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());

Iterable<Node> iterable0 = node1.children();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotNull(iterable0);
assertNotSame(node1, node0);
assertFalse(iterable0.contains(node1));
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertEquals(147, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(30, node1.getType());
assertFalse(node1.isLabelName());
assertEquals(33718419, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertEquals(8232, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertTrue(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());

boolean boolean0 = node0.isSetterDef();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertNotSame(node0, node1);
assertFalse(boolean0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertEquals(2520, node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertEquals(2976, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertEquals(10324440, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertEquals(2520, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());

int int0 = node2.getSideEffectFlags();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node1, node0);
assertEquals(0, int0);
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertEquals(147, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(30, node1.getType());
assertFalse(node1.isLabelName());
assertEquals(33718419, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertEquals(8232, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertTrue(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDefaultCase());
assertEquals(165, node2.getCharno());
assertEquals(118949, node2.getSourcePosition());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertTrue(node2.isDebugger());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertTrue(node2.hasOneChild());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals(29, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(152, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());

boolean boolean1 = node1.isNew();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertNotSame(node1, node0);
assertTrue(boolean1);
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertEquals(147, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(30, node1.getType());
assertFalse(node1.isLabelName());
assertEquals(33718419, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertEquals(8232, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertTrue(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());


[MASTER] 10:33:20.751 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_231_1628159600350/com/google/javascript/rhino/Node_231_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_231_1628159600350/com/google/javascript/rhino/Node_231_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:20.751 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:20.751 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:20.752 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2139
[MASTER] 10:33:20.753 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_231_1628159600350/com/google/javascript/rhino/Node_231_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_231_tmp__ESTest extends Node_231_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("");
21:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
22:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
23:       assertEquals(8, Node.FLAG_NO_THROWS);
24:       assertEquals(50, Node.FREE_CALL);
25:       assertEquals(52, Node.LENGTH);
26:       assertEquals(55, Node.INFERRED_FUNCTION);
27:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
28:       assertEquals(39, Node.EMPTY_BLOCK);
29:       assertEquals(57, Node.LAST_PROP);
30:       assertEquals(43, Node.IS_CONSTANT_NAME);
31:       assertEquals(51, Node.STATIC_SOURCE_FILE);
32:       assertEquals(30, Node.VAR_ARGS_NAME);
33:       assertEquals(46, Node.IS_NAMESPACE);
34:       assertEquals(54, Node.SLASH_V);
35:       assertEquals(40, Node.ORIGINALNAME_PROP);
36:       assertEquals(47, Node.IS_DISPATCHER);
37:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
38:       assertEquals(56, Node.CHANGE_TIME);
39:       assertEquals(29, Node.JSDOC_INFO_PROP);
40:       assertEquals(2, Node.POST_FLAG);
41:       assertEquals(12, Node.COLUMN_BITS);
42:       assertEquals(53, Node.INPUT_ID);
43:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
44:       assertEquals(32, Node.INCRDECR_PROP);
45:       assertEquals(1, Node.DECR_FLAG);
46:       assertEquals(15, Node.NO_SIDE_EFFECTS);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
49:       assertEquals(4095, Node.COLUMN_MASK);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
52:       assertEquals(57, Node.REFLECTED_OBJECT);
53:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
54:       assertEquals(37, Node.OPT_ARG_NAME);
55:       assertEquals(48, Node.DIRECTIVES);
56:       assertEquals(49, Node.DIRECT_EVAL);
57:       assertNotNull(node0);
58:       assertFalse(node0.isFalse());
59:       assertFalse(node0.isThrow());
60:       assertFalse(node0.isBreak());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isInc());
65:       assertFalse(node0.isHook());
66:       assertFalse(node0.isInstanceOf());
67:       assertFalse(node0.isIn());
68:       assertFalse(node0.isWith());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isIf());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isNE());
73:       assertFalse(node0.isGetElem());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isCast());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isNot());
81:       assertFalse(node0.isObjectLit());
82:       assertEquals(40, node0.getType());
83:       assertFalse(node0.isFunction());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isDebugger());
86:       assertEquals((-1), node0.getSourcePosition());
87:       assertFalse(node0.isAnd());
88:       assertFalse(node0.isStringKey());
89:       assertFalse(node0.isCall());
90:       assertFalse(node0.isName());
91:       assertFalse(node0.isNew());
92:       assertFalse(node0.isBlock());
93:       assertFalse(node0.isAdd());
94:       assertTrue(node0.isString());
95:       assertFalse(node0.isSetterDef());
96:       assertFalse(node0.isVar());
97:       assertFalse(node0.isWhile());
98:       assertFalse(node0.isDo());
99:       assertFalse(node0.isRegExp());
100:       assertFalse(node0.hasMoreThanOneChild());
101:       assertFalse(node0.isCatch());
102:       assertFalse(node0.isVoid());
103:       assertFalse(node0.isTrue());
104:       assertEquals((-1), node0.getLineno());
105:       assertFalse(node0.isOr());
106:       assertFalse(node0.isNull());
107:       assertFalse(node0.isLabelName());
108:       assertFalse(node0.isEmpty());
109:       assertFalse(node0.isFor());
110:       assertFalse(node0.isArrayLit());
111:       assertFalse(node0.isNumber());
112:       assertFalse(node0.isGetterDef());
113:       assertFalse(node0.isTry());
114:       assertFalse(node0.isLabel());
115:       assertFalse(node0.hasOneChild());
116:       assertFalse(node0.isDefaultCase());
117:       assertFalse(node0.isAssignAdd());
118:       assertFalse(node0.isCase());
119:       assertEquals(0, node0.getChildCount());
120:       assertFalse(node0.isScript());
121:       assertEquals((-1), node0.getCharno());
122:       assertFalse(node0.isSwitch());
123:       assertFalse(node0.isParamList());
124:       
125:       boolean boolean0 = node0.isDefaultCase();
126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
128:       assertEquals(8, Node.FLAG_NO_THROWS);
129:       assertEquals(50, Node.FREE_CALL);
130:       assertEquals(52, Node.LENGTH);
131:       assertEquals(55, Node.INFERRED_FUNCTION);
132:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
133:       assertEquals(39, Node.EMPTY_BLOCK);
134:       assertEquals(57, Node.LAST_PROP);
135:       assertEquals(43, Node.IS_CONSTANT_NAME);
136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
137:       assertEquals(30, Node.VAR_ARGS_NAME);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(47, Node.IS_DISPATCHER);
142:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
143:       assertEquals(56, Node.CHANGE_TIME);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(12, Node.COLUMN_BITS);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
149:       assertEquals(32, Node.INCRDECR_PROP);
150:       assertEquals(1, Node.DECR_FLAG);
151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
154:       assertEquals(4095, Node.COLUMN_MASK);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
157:       assertEquals(57, Node.REFLECTED_OBJECT);
158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
159:       assertEquals(37, Node.OPT_ARG_NAME);
160:       assertEquals(48, Node.DIRECTIVES);
161:       assertEquals(49, Node.DIRECT_EVAL);
162:       assertFalse(boolean0);
163:       assertFalse(node0.isFalse());
164:       assertFalse(node0.isThrow());
165:       assertFalse(node0.isBreak());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isComma());
168:       assertFalse(node0.isThis());
169:       assertFalse(node0.isInc());
170:       assertFalse(node0.isHook());
171:       assertFalse(node0.isInstanceOf());
172:       assertFalse(node0.isIn());
173:       assertFalse(node0.isWith());
174:       assertFalse(node0.isExprResult());
175:       assertFalse(node0.isIf());
176:       assertFalse(node0.isDelProp());
177:       assertFalse(node0.isNE());
178:       assertFalse(node0.isGetElem());
179:       assertFalse(node0.isAssign());
180:       assertFalse(node0.hasChildren());
181:       assertFalse(node0.isDec());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isCast());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isNot());
186:       assertFalse(node0.isObjectLit());
187:       assertEquals(40, node0.getType());
188:       assertFalse(node0.isFunction());
189:       assertFalse(node0.isContinue());
190:       assertFalse(node0.isDebugger());
191:       assertEquals((-1), node0.getSourcePosition());
192:       assertFalse(node0.isAnd());
193:       assertFalse(node0.isStringKey());
194:       assertFalse(node0.isCall());
195:       assertFalse(node0.isName());
196:       assertFalse(node0.isNew());
197:       assertFalse(node0.isBlock());
198:       assertFalse(node0.isAdd());
199:       assertTrue(node0.isString());
200:       assertFalse(node0.isSetterDef());
201:       assertFalse(node0.isVar());
202:       assertFalse(node0.isWhile());
203:       assertFalse(node0.isDo());
204:       assertFalse(node0.isRegExp());
205:       assertFalse(node0.hasMoreThanOneChild());
206:       assertFalse(node0.isCatch());
207:       assertFalse(node0.isVoid());
208:       assertFalse(node0.isTrue());
209:       assertEquals((-1), node0.getLineno());
210:       assertFalse(node0.isOr());
211:       assertFalse(node0.isNull());
212:       assertFalse(node0.isLabelName());
213:       assertFalse(node0.isEmpty());
214:       assertFalse(node0.isFor());
215:       assertFalse(node0.isArrayLit());
216:       assertFalse(node0.isNumber());
217:       assertFalse(node0.isGetterDef());
218:       assertFalse(node0.isTry());
219:       assertFalse(node0.isLabel());
220:       assertFalse(node0.hasOneChild());
221:       assertFalse(node0.isDefaultCase());
222:       assertFalse(node0.isAssignAdd());
223:       assertFalse(node0.isCase());
224:       assertEquals(0, node0.getChildCount());
225:       assertFalse(node0.isScript());
226:       assertEquals((-1), node0.getCharno());
227:       assertFalse(node0.isSwitch());
228:       assertFalse(node0.isParamList());
229:       
230:       Node node1 = new Node(42, node0, node0, node0);
231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
232:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
233:       assertEquals(8, Node.FLAG_NO_THROWS);
234:       assertEquals(50, Node.FREE_CALL);
235:       assertEquals(52, Node.LENGTH);
236:       assertEquals(55, Node.INFERRED_FUNCTION);
237:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
238:       assertEquals(39, Node.EMPTY_BLOCK);
239:       assertEquals(57, Node.LAST_PROP);
240:       assertEquals(43, Node.IS_CONSTANT_NAME);
241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
242:       assertEquals(30, Node.VAR_ARGS_NAME);
243:       assertEquals(46, Node.IS_NAMESPACE);
244:       assertEquals(54, Node.SLASH_V);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
248:       assertEquals(56, Node.CHANGE_TIME);
249:       assertEquals(29, Node.JSDOC_INFO_PROP);
250:       assertEquals(2, Node.POST_FLAG);
251:       assertEquals(12, Node.COLUMN_BITS);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
254:       assertEquals(32, Node.INCRDECR_PROP);
255:       assertEquals(1, Node.DECR_FLAG);
256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
259:       assertEquals(4095, Node.COLUMN_MASK);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
262:       assertEquals(57, Node.REFLECTED_OBJECT);
263:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
264:       assertEquals(37, Node.OPT_ARG_NAME);
265:       assertEquals(48, Node.DIRECTIVES);
266:       assertEquals(49, Node.DIRECT_EVAL);
267:       assertEquals(37, Node.OPT_ARG_NAME);
268:       assertEquals(2, Node.POST_FLAG);
269:       assertEquals(32, Node.INCRDECR_PROP);
270:       assertEquals(56, Node.CHANGE_TIME);
271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
272:       assertEquals(12, Node.COLUMN_BITS);
273:       assertEquals(47, Node.IS_DISPATCHER);
274:       assertEquals(46, Node.IS_NAMESPACE);
275:       assertEquals(30, Node.VAR_ARGS_NAME);
276:       assertEquals(49, Node.DIRECT_EVAL);
277:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
279:       assertEquals(43, Node.IS_CONSTANT_NAME);
280:       assertEquals(54, Node.SLASH_V);
281:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
282:       assertEquals(1, Node.DECR_FLAG);
283:       assertEquals(50, Node.FREE_CALL);
284:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
285:       assertEquals(8, Node.FLAG_NO_THROWS);
286:       assertEquals(48, Node.DIRECTIVES);
287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
288:       assertEquals(4095, Node.COLUMN_MASK);
289:       assertEquals(40, Node.ORIGINALNAME_PROP);
290:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
291:       assertEquals(53, Node.INPUT_ID);
292:       assertEquals(52, Node.LENGTH);
293:       assertEquals(36, Node.QUOTED_PROP);
294:       assertEquals(57, Node.REFLECTED_OBJECT);
295:       assertEquals(57, Node.LAST_PROP);
296:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
297:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
298:       assertEquals(15, Node.NO_SIDE_EFFECTS);
299:       assertEquals(39, Node.EMPTY_BLOCK);
300:       assertEquals(55, Node.INFERRED_FUNCTION);
301:       assertEquals(29, Node.JSDOC_INFO_PROP);
302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
303:       assertFalse(node1.equals((Object)node0));
304:       assertNotNull(node1);
305:       assertFalse(node0.isFalse());
306:       assertFalse(node0.isThrow());
307:       assertFalse(node0.isBreak());
308:       assertFalse(node0.isGetProp());
309:       assertFalse(node0.isComma());
310:       assertFalse(node0.isThis());
311:       assertFalse(node0.isInc());
312:       assertFalse(node0.isHook());
313:       assertFalse(node0.isInstanceOf());
314:       assertFalse(node0.isIn());
315:       assertFalse(node0.isWith());
316:       assertFalse(node0.isExprResult());
317:       assertFalse(node0.isIf());
318:       assertFalse(node0.isDelProp());
319:       assertFalse(node0.isNE());
320:       assertFalse(node0.isGetElem());
321:       assertFalse(node0.isAssign());
322:       assertFalse(node0.hasChildren());
323:       assertFalse(node0.isDec());
324:       assertFalse(node0.isTypeOf());
325:       assertFalse(node0.isCast());
326:       assertFalse(node0.isReturn());
327:       assertFalse(node0.isNot());
328:       assertFalse(node0.isObjectLit());
329:       assertEquals(40, node0.getType());
330:       assertFalse(node0.isFunction());
331:       assertFalse(node0.isContinue());
332:       assertFalse(node0.isDebugger());
333:       assertEquals((-1), node0.getSourcePosition());
334:       assertFalse(node0.isAnd());
335:       assertFalse(node0.isStringKey());
336:       assertFalse(node0.isCall());
337:       assertFalse(node0.isName());
338:       assertFalse(node0.isNew());
339:       assertFalse(node0.isBlock());
340:       assertFalse(node0.isAdd());
341:       assertTrue(node0.isString());
342:       assertFalse(node0.isSetterDef());
343:       assertFalse(node0.isVar());
344:       assertFalse(node0.isWhile());
345:       assertFalse(node0.isDo());
346:       assertFalse(node0.isRegExp());
347:       assertFalse(node0.hasMoreThanOneChild());
348:       assertFalse(node0.isCatch());
349:       assertFalse(node0.isVoid());
350:       assertFalse(node0.isTrue());
351:       assertEquals((-1), node0.getLineno());
352:       assertFalse(node0.isOr());
353:       assertFalse(node0.isNull());
354:       assertFalse(node0.isLabelName());
355:       assertFalse(node0.isEmpty());
356:       assertFalse(node0.isFor());
357:       assertFalse(node0.isArrayLit());
358:       assertFalse(node0.isNumber());
359:       assertFalse(node0.isGetterDef());
360:       assertFalse(node0.isTry());
361:       assertFalse(node0.isLabel());
362:       assertFalse(node0.hasOneChild());
363:       assertFalse(node0.isDefaultCase());
364:       assertFalse(node0.isAssignAdd());
365:       assertFalse(node0.isCase());
366:       assertEquals(0, node0.getChildCount());
367:       assertFalse(node0.isScript());
368:       assertEquals((-1), node0.getCharno());
369:       assertFalse(node0.isSwitch());
370:       assertFalse(node0.isParamList());
371:       assertFalse(node1.isTypeOf());
372:       assertFalse(node1.isNumber());
373:       assertFalse(node1.isReturn());
374:       assertFalse(node1.isAssign());
375:       assertFalse(node1.isOr());
376:       assertFalse(node1.isDec());
377:       assertFalse(node1.isLabel());
378:       assertEquals((-1), node1.getSourcePosition());
379:       assertFalse(node1.hasMoreThanOneChild());
380:       assertFalse(node1.isCast());
381:       assertFalse(node1.isContinue());
382:       assertEquals((-1), node1.getLineno());
383:       assertFalse(node1.isLabelName());
384:       assertFalse(node1.isGetElem());
385:       assertFalse(node1.isVar());
386:       assertEquals(42, node1.getType());
387:       assertFalse(node1.isDo());
388:       assertFalse(node1.isAssignAdd());
389:       assertFalse(node1.isAdd());
390:       assertFalse(node1.isNew());
391:       assertFalse(node1.isComma());
392:       assertFalse(node1.isNull());
393:       assertFalse(node1.isCall());
394:       assertTrue(node1.isThis());
395:       assertFalse(node1.isFalse());
396:       assertFalse(node1.isAnd());
397:       assertFalse(node1.isName());
398:       assertFalse(node1.isBreak());
399:       assertFalse(node1.isExprResult());
400:       assertFalse(node1.isWhile());
401:       assertFalse(node1.isString());
402:       assertFalse(node1.isNot());
403:       assertFalse(node1.isDebugger());
404:       assertFalse(node1.isObjectLit());
405:       assertFalse(node1.isGetProp());
406:       assertFalse(node1.isNE());
407:       assertFalse(node1.isIf());
408:       assertTrue(node1.hasOneChild());
409:       assertFalse(node1.isFor());
410:       assertFalse(node1.isGetterDef());
411:       assertEquals(1, node1.getChildCount());
412:       assertTrue(node1.hasChildren());
413:       assertFalse(node1.isDelProp());
414:       assertFalse(node1.isArrayLit());
415:       assertFalse(node1.isFunction());
416:       assertFalse(node1.isInc());
417:       assertFalse(node1.isVoid());
418:       assertFalse(node1.isTrue());
419:       assertFalse(node1.isDefaultCase());
420:       assertFalse(node1.isThrow());
421:       assertFalse(node1.isIn());
422:       assertFalse(node1.isEmpty());
423:       assertFalse(node1.isSetterDef());
424:       assertFalse(node1.isParamList());
425:       assertFalse(node1.isCatch());
426:       assertFalse(node1.isStringKey());
427:       assertFalse(node1.isInstanceOf());
428:       assertFalse(node1.isSwitch());
429:       assertFalse(node1.isScript());
430:       assertFalse(node1.isRegExp());
431:       assertFalse(node1.isWith());
432:       assertFalse(node1.isBlock());
433:       assertFalse(node1.isHook());
434:       assertEquals((-1), node1.getCharno());
435:       assertFalse(node1.isTry());
436:       assertFalse(node1.isCase());
437:       
438:       boolean boolean1 = node1.isEquivalentToTyped(node0);
439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
441:       assertEquals(8, Node.FLAG_NO_THROWS);
442:       assertEquals(50, Node.FREE_CALL);
443:       assertEquals(52, Node.LENGTH);
444:       assertEquals(55, Node.INFERRED_FUNCTION);
445:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
446:       assertEquals(39, Node.EMPTY_BLOCK);
447:       assertEquals(57, Node.LAST_PROP);
448:       assertEquals(43, Node.IS_CONSTANT_NAME);
449:       assertEquals(51, Node.STATIC_SOURCE_FILE);
450:       assertEquals(30, Node.VAR_ARGS_NAME);
451:       assertEquals(46, Node.IS_NAMESPACE);
452:       assertEquals(54, Node.SLASH_V);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
456:       assertEquals(56, Node.CHANGE_TIME);
457:       assertEquals(29, Node.JSDOC_INFO_PROP);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(12, Node.COLUMN_BITS);
460:       assertEquals(53, Node.INPUT_ID);
461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
462:       assertEquals(32, Node.INCRDECR_PROP);
463:       assertEquals(1, Node.DECR_FLAG);
464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
467:       assertEquals(4095, Node.COLUMN_MASK);
468:       assertEquals(36, Node.QUOTED_PROP);
469:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
470:       assertEquals(57, Node.REFLECTED_OBJECT);
471:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
472:       assertEquals(37, Node.OPT_ARG_NAME);
473:       assertEquals(48, Node.DIRECTIVES);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(37, Node.OPT_ARG_NAME);
476:       assertEquals(2, Node.POST_FLAG);
477:       assertEquals(32, Node.INCRDECR_PROP);
478:       assertEquals(56, Node.CHANGE_TIME);
479:       assertEquals(51, Node.STATIC_SOURCE_FILE);
480:       assertEquals(12, Node.COLUMN_BITS);
481:       assertEquals(47, Node.IS_DISPATCHER);
482:       assertEquals(46, Node.IS_NAMESPACE);
483:       assertEquals(30, Node.VAR_ARGS_NAME);
484:       assertEquals(49, Node.DIRECT_EVAL);
485:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
486:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
487:       assertEquals(43, Node.IS_CONSTANT_NAME);
488:       assertEquals(54, Node.SLASH_V);
489:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
490:       assertEquals(1, Node.DECR_FLAG);
491:       assertEquals(50, Node.FREE_CALL);
492:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
493:       assertEquals(8, Node.FLAG_NO_THROWS);
494:       assertEquals(48, Node.DIRECTIVES);
495:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
496:       assertEquals(4095, Node.COLUMN_MASK);
497:       assertEquals(40, Node.ORIGINALNAME_PROP);
498:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
499:       assertEquals(53, Node.INPUT_ID);
500:       assertEquals(52, Node.LENGTH);
501:       assertEquals(36, Node.QUOTED_PROP);
502:       assertEquals(57, Node.REFLECTED_OBJECT);
503:       assertEquals(57, Node.LAST_PROP);
504:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
506:       assertEquals(15, Node.NO_SIDE_EFFECTS);
507:       assertEquals(39, Node.EMPTY_BLOCK);
508:       assertEquals(55, Node.INFERRED_FUNCTION);
509:       assertEquals(29, Node.JSDOC_INFO_PROP);
510:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
511:       assertFalse(node0.equals((Object)node1));
512:       assertFalse(node1.equals((Object)node0));
513:       assertTrue(boolean1 == boolean0);
514:       assertFalse(boolean1);
515:       assertFalse(node0.isFalse());
516:       assertFalse(node0.isThrow());
517:       assertFalse(node0.isBreak());
518:       assertFalse(node0.isGetProp());
519:       assertFalse(node0.isComma());
520:       assertFalse(node0.isThis());
521:       assertFalse(node0.isInc());
522:       assertFalse(node0.isHook());
523:       assertFalse(node0.isInstanceOf());
524:       assertFalse(node0.isIn());
525:       assertFalse(node0.isWith());
526:       assertFalse(node0.isExprResult());
527:       assertFalse(node0.isIf());
528:       assertFalse(node0.isDelProp());
529:       assertFalse(node0.isNE());
530:       assertFalse(node0.isGetElem());
531:       assertFalse(node0.isAssign());
532:       assertFalse(node0.hasChildren());
533:       assertFalse(node0.isDec());
534:       assertFalse(node0.isTypeOf());
535:       assertFalse(node0.isCast());
536:       assertFalse(node0.isReturn());
537:       assertFalse(node0.isNot());
538:       assertFalse(node0.isObjectLit());
539:       assertEquals(40, node0.getType());
540:       assertFalse(node0.isFunction());
541:       assertFalse(node0.isContinue());
542:       assertFalse(node0.isDebugger());
543:       assertEquals((-1), node0.getSourcePosition());
544:       assertFalse(node0.isAnd());
545:       assertFalse(node0.isStringKey());
546:       assertFalse(node0.isCall());
547:       assertFalse(node0.isName());
548:       assertFalse(node0.isNew());
549:       assertFalse(node0.isBlock());
550:       assertFalse(node0.isAdd());
551:       assertTrue(node0.isString());
552:       assertFalse(node0.isSetterDef());
553:       assertFalse(node0.isVar());
554:       assertFalse(node0.isWhile());
555:       assertFalse(node0.isDo());
556:       assertFalse(node0.isRegExp());
557:       assertFalse(node0.hasMoreThanOneChild());
558:       assertFalse(node0.isCatch());
559:       assertFalse(node0.isVoid());
560:       assertFalse(node0.isTrue());
561:       assertEquals((-1), node0.getLineno());
562:       assertFalse(node0.isOr());
563:       assertFalse(node0.isNull());
564:       assertFalse(node0.isLabelName());
565:       assertFalse(node0.isEmpty());
566:       assertFalse(node0.isFor());
567:       assertFalse(node0.isArrayLit());
568:       assertFalse(node0.isNumber());
569:       assertFalse(node0.isGetterDef());
570:       assertFalse(node0.isTry());
571:       assertFalse(node0.isLabel());
572:       assertFalse(node0.hasOneChild());
573:       assertFalse(node0.isDefaultCase());
574:       assertFalse(node0.isAssignAdd());
575:       assertFalse(node0.isCase());
576:       assertEquals(0, node0.getChildCount());
577:       assertFalse(node0.isScript());
578:       assertEquals((-1), node0.getCharno());
579:       assertFalse(node0.isSwitch());
580:       assertFalse(node0.isParamList());
581:       assertFalse(node1.isTypeOf());
582:       assertFalse(node1.isNumber());
583:       assertFalse(node1.isReturn());
584:       assertFalse(node1.isAssign());
585:       assertFalse(node1.isOr());
586:       assertFalse(node1.isDec());
587:       assertFalse(node1.isLabel());
588:       assertEquals((-1), node1.getSourcePosition());
589:       assertFalse(node1.hasMoreThanOneChild());
590:       assertFalse(node1.isCast());
591:       assertFalse(node1.isContinue());
592:       assertEquals((-1), node1.getLineno());
593:       assertFalse(node1.isLabelName());
594:       assertFalse(node1.isGetElem());
595:       assertFalse(node1.isVar());
596:       assertEquals(42, node1.getType());
597:       assertFalse(node1.isDo());
598:       assertFalse(node1.isAssignAdd());
599:       assertFalse(node1.isAdd());
600:       assertFalse(node1.isNew());
601:       assertFalse(node1.isComma());
602:       assertFalse(node1.isNull());
603:       assertFalse(node1.isCall());
604:       assertTrue(node1.isThis());
605:       assertFalse(node1.isFalse());
606:       assertFalse(node1.isAnd());
607:       assertFalse(node1.isName());
608:       assertFalse(node1.isBreak());
609:       assertFalse(node1.isExprResult());
610:       assertFalse(node1.isWhile());
611:       assertFalse(node1.isString());
612:       assertFalse(node1.isNot());
613:       assertFalse(node1.isDebugger());
614:       assertFalse(node1.isObjectLit());
615:       assertFalse(node1.isGetProp());
616:       assertFalse(node1.isNE());
617:       assertFalse(node1.isIf());
618:       assertTrue(node1.hasOneChild());
619:       assertFalse(node1.isFor());
620:       assertFalse(node1.isGetterDef());
621:       assertEquals(1, node1.getChildCount());
622:       assertTrue(node1.hasChildren());
623:       assertFalse(node1.isDelProp());
624:       assertFalse(node1.isArrayLit());
625:       assertFalse(node1.isFunction());
626:       assertFalse(node1.isInc());
627:       assertFalse(node1.isVoid());
628:       assertFalse(node1.isTrue());
629:       assertFalse(node1.isDefaultCase());
630:       assertFalse(node1.isThrow());
631:       assertFalse(node1.isIn());
632:       assertFalse(node1.isEmpty());
633:       assertFalse(node1.isSetterDef());
634:       assertFalse(node1.isParamList());
635:       assertFalse(node1.isCatch());
636:       assertFalse(node1.isStringKey());
637:       assertFalse(node1.isInstanceOf());
638:       assertFalse(node1.isSwitch());
639:       assertFalse(node1.isScript());
640:       assertFalse(node1.isRegExp());
641:       assertFalse(node1.isWith());
642:       assertFalse(node1.isBlock());
643:       assertFalse(node1.isHook());
644:       assertEquals((-1), node1.getCharno());
645:       assertFalse(node1.isTry());
646:       assertFalse(node1.isCase());
647:       
648:       Node node2 = node0.srcrefTree(node1);
649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       assertEquals(8, Node.FLAG_NO_THROWS);
652:       assertEquals(50, Node.FREE_CALL);
653:       assertEquals(52, Node.LENGTH);
654:       assertEquals(55, Node.INFERRED_FUNCTION);
655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
656:       assertEquals(39, Node.EMPTY_BLOCK);
657:       assertEquals(57, Node.LAST_PROP);
658:       assertEquals(43, Node.IS_CONSTANT_NAME);
659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
660:       assertEquals(30, Node.VAR_ARGS_NAME);
661:       assertEquals(46, Node.IS_NAMESPACE);
662:       assertEquals(54, Node.SLASH_V);
663:       assertEquals(40, Node.ORIGINALNAME_PROP);
664:       assertEquals(47, Node.IS_DISPATCHER);
665:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
666:       assertEquals(56, Node.CHANGE_TIME);
667:       assertEquals(29, Node.JSDOC_INFO_PROP);
668:       assertEquals(2, Node.POST_FLAG);
669:       assertEquals(12, Node.COLUMN_BITS);
670:       assertEquals(53, Node.INPUT_ID);
671:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
672:       assertEquals(32, Node.INCRDECR_PROP);
673:       assertEquals(1, Node.DECR_FLAG);
674:       assertEquals(15, Node.NO_SIDE_EFFECTS);
675:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
676:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
677:       assertEquals(4095, Node.COLUMN_MASK);
678:       assertEquals(36, Node.QUOTED_PROP);
679:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
680:       assertEquals(57, Node.REFLECTED_OBJECT);
681:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
682:       assertEquals(37, Node.OPT_ARG_NAME);
683:       assertEquals(48, Node.DIRECTIVES);
684:       assertEquals(49, Node.DIRECT_EVAL);
685:       assertEquals(37, Node.OPT_ARG_NAME);
686:       assertEquals(2, Node.POST_FLAG);
687:       assertEquals(32, Node.INCRDECR_PROP);
688:       assertEquals(56, Node.CHANGE_TIME);
689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
690:       assertEquals(12, Node.COLUMN_BITS);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(46, Node.IS_NAMESPACE);
693:       assertEquals(30, Node.VAR_ARGS_NAME);
694:       assertEquals(49, Node.DIRECT_EVAL);
695:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
696:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
697:       assertEquals(43, Node.IS_CONSTANT_NAME);
698:       assertEquals(54, Node.SLASH_V);
699:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
700:       assertEquals(1, Node.DECR_FLAG);
701:       assertEquals(50, Node.FREE_CALL);
702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
703:       assertEquals(8, Node.FLAG_NO_THROWS);
704:       assertEquals(48, Node.DIRECTIVES);
705:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
706:       assertEquals(4095, Node.COLUMN_MASK);
707:       assertEquals(40, Node.ORIGINALNAME_PROP);
708:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
709:       assertEquals(53, Node.INPUT_ID);
710:       assertEquals(52, Node.LENGTH);
711:       assertEquals(36, Node.QUOTED_PROP);
712:       assertEquals(57, Node.REFLECTED_OBJECT);
713:       assertEquals(57, Node.LAST_PROP);
714:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
715:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
716:       assertEquals(15, Node.NO_SIDE_EFFECTS);
717:       assertEquals(39, Node.EMPTY_BLOCK);
718:       assertEquals(55, Node.INFERRED_FUNCTION);
719:       assertEquals(29, Node.JSDOC_INFO_PROP);
720:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
721:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
722:       assertEquals(29, Node.JSDOC_INFO_PROP);
723:       assertEquals(47, Node.IS_DISPATCHER);
724:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
725:       assertEquals(2, Node.POST_FLAG);
726:       assertEquals(37, Node.OPT_ARG_NAME);
727:       assertEquals(43, Node.IS_CONSTANT_NAME);
728:       assertEquals(56, Node.CHANGE_TIME);
729:       assertEquals(46, Node.IS_NAMESPACE);
730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
731:       assertEquals(30, Node.VAR_ARGS_NAME);
732:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
733:       assertEquals(15, Node.NO_SIDE_EFFECTS);
734:       assertEquals(36, Node.QUOTED_PROP);
735:       assertEquals(55, Node.INFERRED_FUNCTION);
736:       assertEquals(53, Node.INPUT_ID);
737:       assertEquals(39, Node.EMPTY_BLOCK);
738:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
739:       assertEquals(57, Node.LAST_PROP);
740:       assertEquals(50, Node.FREE_CALL);
741:       assertEquals(40, Node.ORIGINALNAME_PROP);
742:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(48, Node.DIRECTIVES);
747:       assertEquals(54, Node.SLASH_V);
748:       assertEquals(57, Node.REFLECTED_OBJECT);
749:       assertEquals(49, Node.DIRECT_EVAL);
750:       assertEquals(1, Node.DECR_FLAG);
751:       assertEquals(51, Node.STATIC_SOURCE_FILE);
752:       assertEquals(4095, Node.COLUMN_MASK);
753:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
754:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
755:       assertEquals(12, Node.COLUMN_BITS);
756:       assertEquals(32, Node.INCRDECR_PROP);
757:       assertFalse(node0.equals((Object)node1));
758:       assertFalse(node1.equals((Object)node0));
759:       assertFalse(node2.equals((Object)node1));
760:       assertNotNull(node2);
761:       assertSame(node0, node2);
762:       assertSame(node2, node0);
763:       assertFalse(node0.isFalse());
764:       assertFalse(node0.isThrow());
765:       assertFalse(node0.isBreak());
766:       assertFalse(node0.isGetProp());
767:       assertFalse(node0.isComma());
768:       assertFalse(node0.isThis());
769:       assertFalse(node0.isInc());
770:       assertFalse(node0.isHook());
771:       assertFalse(node0.isInstanceOf());
772:       assertFalse(node0.isIn());
773:       assertFalse(node0.isWith());
774:       assertFalse(node0.isExprResult());
775:       assertFalse(node0.isIf());
776:       assertFalse(node0.isDelProp());
777:       assertFalse(node0.isNE());
778:       assertFalse(node0.isGetElem());
779:       assertFalse(node0.isAssign());
780:       assertFalse(node0.hasChildren());
781:       assertFalse(node0.isDec());
782:       assertFalse(node0.isTypeOf());
783:       assertFalse(node0.isCast());
784:       assertFalse(node0.isReturn());
785:       assertFalse(node0.isNot());
786:       assertFalse(node0.isObjectLit());
787:       assertEquals(40, node0.getType());
788:       assertFalse(node0.isFunction());
789:       assertFalse(node0.isContinue());
790:       assertFalse(node0.isDebugger());
791:       assertEquals((-1), node0.getSourcePosition());
792:       assertFalse(node0.isAnd());
793:       assertFalse(node0.isStringKey());
794:       assertFalse(node0.isCall());
795:       assertFalse(node0.isName());
796:       assertFalse(node0.isNew());
797:       assertFalse(node0.isBlock());
798:       assertFalse(node0.isAdd());
799:       assertTrue(node0.isString());
800:       assertFalse(node0.isSetterDef());
801:       assertFalse(node0.isVar());
802:       assertFalse(node0.isWhile());
803:       assertFalse(node0.isDo());
804:       assertFalse(node0.isRegExp());
805:       assertFalse(node0.hasMoreThanOneChild());
806:       assertFalse(node0.isCatch());
807:       assertFalse(node0.isVoid());
808:       assertFalse(node0.isTrue());
809:       assertEquals((-1), node0.getLineno());
810:       assertFalse(node0.isOr());
811:       assertFalse(node0.isNull());
812:       assertFalse(node0.isLabelName());
813:       assertFalse(node0.isEmpty());
814:       assertFalse(node0.isFor());
815:       assertFalse(node0.isArrayLit());
816:       assertFalse(node0.isNumber());
817:       assertFalse(node0.isGetterDef());
818:       assertFalse(node0.isTry());
819:       assertFalse(node0.isLabel());
820:       assertFalse(node0.hasOneChild());
821:       assertFalse(node0.isDefaultCase());
822:       assertFalse(node0.isAssignAdd());
823:       assertFalse(node0.isCase());
824:       assertEquals(0, node0.getChildCount());
825:       assertFalse(node0.isScript());
826:       assertEquals((-1), node0.getCharno());
827:       assertFalse(node0.isSwitch());
828:       assertFalse(node0.isParamList());
829:       assertFalse(node1.isTypeOf());
830:       assertFalse(node1.isNumber());
831:       assertFalse(node1.isReturn());
832:       assertFalse(node1.isAssign());
833:       assertFalse(node1.isOr());
834:       assertFalse(node1.isDec());
835:       assertFalse(node1.isLabel());
836:       assertEquals((-1), node1.getSourcePosition());
837:       assertFalse(node1.hasMoreThanOneChild());
838:       assertFalse(node1.isCast());
839:       assertFalse(node1.isContinue());
840:       assertEquals((-1), node1.getLineno());
841:       assertFalse(node1.isLabelName());
842:       assertFalse(node1.isGetElem());
843:       assertFalse(node1.isVar());
844:       assertEquals(42, node1.getType());
845:       assertFalse(node1.isDo());
846:       assertFalse(node1.isAssignAdd());
847:       assertFalse(node1.isAdd());
848:       assertFalse(node1.isNew());
849:       assertFalse(node1.isComma());
850:       assertFalse(node1.isNull());
851:       assertFalse(node1.isCall());
852:       assertTrue(node1.isThis());
853:       assertFalse(node1.isFalse());
854:       assertFalse(node1.isAnd());
855:       assertFalse(node1.isName());
856:       assertFalse(node1.isBreak());
857:       assertFalse(node1.isExprResult());
858:       assertFalse(node1.isWhile());
859:       assertFalse(node1.isString());
860:       assertFalse(node1.isNot());
861:       assertFalse(node1.isDebugger());
862:       assertFalse(node1.isObjectLit());
863:       assertFalse(node1.isGetProp());
864:       assertFalse(node1.isNE());
865:       assertFalse(node1.isIf());
866:       assertTrue(node1.hasOneChild());
867:       assertFalse(node1.isFor());
868:       assertFalse(node1.isGetterDef());
869:       assertEquals(1, node1.getChildCount());
870:       assertTrue(node1.hasChildren());
871:       assertFalse(node1.isDelProp());
872:       assertFalse(node1.isArrayLit());
873:       assertFalse(node1.isFunction());
874:       assertFalse(node1.isInc());
875:       assertFalse(node1.isVoid());
876:       assertFalse(node1.isTrue());
877:       assertFalse(node1.isDefaultCase());
878:       assertFalse(node1.isThrow());
879:       assertFalse(node1.isIn());
880:       assertFalse(node1.isEmpty());
881:       assertFalse(node1.isSetterDef());
882:       assertFalse(node1.isParamList());
883:       assertFalse(node1.isCatch());
884:       assertFalse(node1.isStringKey());
885:       assertFalse(node1.isInstanceOf());
886:       assertFalse(node1.isSwitch());
887:       assertFalse(node1.isScript());
888:       assertFalse(node1.isRegExp());
889:       assertFalse(node1.isWith());
890:       assertFalse(node1.isBlock());
891:       assertFalse(node1.isHook());
892:       assertEquals((-1), node1.getCharno());
893:       assertFalse(node1.isTry());
894:       assertFalse(node1.isCase());
895:       assertFalse(node2.isArrayLit());
896:       assertFalse(node2.isEmpty());
897:       assertFalse(node2.isDebugger());
898:       assertFalse(node2.isVoid());
899:       assertFalse(node2.isDelProp());
900:       assertFalse(node2.isGetterDef());
901:       assertFalse(node2.isIf());
902:       assertFalse(node2.isTrue());
903:       assertFalse(node2.isNE());
904:       assertFalse(node2.isCatch());
905:       assertFalse(node2.isCase());
906:       assertFalse(node2.isTry());
907:       assertFalse(node2.isRegExp());
908:       assertFalse(node2.isHook());
909:       assertFalse(node2.isFor());
910:       assertFalse(node2.isFalse());
911:       assertFalse(node2.isContinue());
912:       assertFalse(node2.isAnd());
913:       assertFalse(node2.isIn());
914:       assertFalse(node2.isFunction());
915:       assertFalse(node2.isSetterDef());
916:       assertFalse(node2.isInc());
917:       assertFalse(node2.isThrow());
918:       assertEquals(40, node2.getType());
919:       assertFalse(node2.isCast());
920:       assertFalse(node2.hasOneChild());
921:       assertFalse(node2.isAssign());
922:       assertFalse(node2.isLabelName());
923:       assertFalse(node2.isGetElem());
924:       assertFalse(node2.isExprResult());
925:       assertFalse(node2.isNumber());
926:       assertEquals((-1), node2.getSourcePosition());
927:       assertFalse(node2.isOr());
928:       assertFalse(node2.hasMoreThanOneChild());
929:       assertFalse(node2.isNot());
930:       assertFalse(node2.isObjectLit());
931:       assertEquals((-1), node2.getLineno());
932:       assertFalse(node2.isWith());
933:       assertFalse(node2.isGetProp());
934:       assertFalse(node2.isInstanceOf());
935:       assertFalse(node2.isScript());
936:       assertFalse(node2.isComma());
937:       assertFalse(node2.isThis());
938:       assertFalse(node2.isDec());
939:       assertFalse(node2.isTypeOf());
940:       assertTrue(node2.isString());
941:       assertFalse(node2.isReturn());
942:       assertFalse(node2.isWhile());
943:       assertFalse(node2.hasChildren());
944:       assertFalse(node2.isBlock());
945:       assertFalse(node2.isName());
946:       assertFalse(node2.isBreak());
947:       assertFalse(node2.isCall());
948:       assertFalse(node2.isAdd());
949:       assertFalse(node2.isParamList());
950:       assertFalse(node2.isSwitch());
951:       assertEquals((-1), node2.getCharno());
952:       assertFalse(node2.isStringKey());
953:       assertFalse(node2.isNull());
954:       assertEquals(0, node2.getChildCount());
955:       assertFalse(node2.isDo());
956:       assertFalse(node2.isDefaultCase());
957:       assertFalse(node2.isNew());
958:       assertFalse(node2.isLabel());
959:       assertFalse(node2.isAssignAdd());
960:       assertFalse(node2.isVar());
961:       
962:       boolean boolean2 = node1.isCase();
963:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
964:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
965:       assertEquals(8, Node.FLAG_NO_THROWS);
966:       assertEquals(50, Node.FREE_CALL);
967:       assertEquals(52, Node.LENGTH);
968:       assertEquals(55, Node.INFERRED_FUNCTION);
969:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
970:       assertEquals(39, Node.EMPTY_BLOCK);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(43, Node.IS_CONSTANT_NAME);
973:       assertEquals(51, Node.STATIC_SOURCE_FILE);
974:       assertEquals(30, Node.VAR_ARGS_NAME);
975:       assertEquals(46, Node.IS_NAMESPACE);
976:       assertEquals(54, Node.SLASH_V);
977:       assertEquals(40, Node.ORIGINALNAME_PROP);
978:       assertEquals(47, Node.IS_DISPATCHER);
979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
980:       assertEquals(56, Node.CHANGE_TIME);
981:       assertEquals(29, Node.JSDOC_INFO_PROP);
982:       assertEquals(2, Node.POST_FLAG);
983:       assertEquals(12, Node.COLUMN_BITS);
984:       assertEquals(53, Node.INPUT_ID);
985:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
986:       assertEquals(32, Node.INCRDECR_PROP);
987:       assertEquals(1, Node.DECR_FLAG);
988:       assertEquals(15, Node.NO_SIDE_EFFECTS);
989:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
990:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
991:       assertEquals(4095, Node.COLUMN_MASK);
992:       assertEquals(36, Node.QUOTED_PROP);
993:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
994:       assertEquals(57, Node.REFLECTED_OBJECT);
995:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
996:       assertEquals(37, Node.OPT_ARG_NAME);
997:       assertEquals(48, Node.DIRECTIVES);
998:       assertEquals(49, Node.DIRECT_EVAL);
999:       assertEquals(37, Node.OPT_ARG_NAME);
1000:       assertEquals(2, Node.POST_FLAG);
1001:       assertEquals(32, Node.INCRDECR_PROP);
1002:       assertEquals(56, Node.CHANGE_TIME);
1003:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1004:       assertEquals(12, Node.COLUMN_BITS);
1005:       assertEquals(47, Node.IS_DISPATCHER);
1006:       assertEquals(46, Node.IS_NAMESPACE);
1007:       assertEquals(30, Node.VAR_ARGS_NAME);
1008:       assertEquals(49, Node.DIRECT_EVAL);
1009:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1010:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1011:       assertEquals(43, Node.IS_CONSTANT_NAME);
1012:       assertEquals(54, Node.SLASH_V);
1013:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1014:       assertEquals(1, Node.DECR_FLAG);
1015:       assertEquals(50, Node.FREE_CALL);
1016:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1017:       assertEquals(8, Node.FLAG_NO_THROWS);
1018:       assertEquals(48, Node.DIRECTIVES);
1019:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1020:       assertEquals(4095, Node.COLUMN_MASK);
1021:       assertEquals(40, Node.ORIGINALNAME_PROP);
1022:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1023:       assertEquals(53, Node.INPUT_ID);
1024:       assertEquals(52, Node.LENGTH);
1025:       assertEquals(36, Node.QUOTED_PROP);
1026:       assertEquals(57, Node.REFLECTED_OBJECT);
1027:       assertEquals(57, Node.LAST_PROP);
1028:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1029:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1030:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1031:       assertEquals(39, Node.EMPTY_BLOCK);
1032:       assertEquals(55, Node.INFERRED_FUNCTION);
1033:       assertEquals(29, Node.JSDOC_INFO_PROP);
1034:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1035:       assertFalse(node0.equals((Object)node1));
1036:       assertFalse(node1.equals((Object)node0));
1037:       assertFalse(node1.equals((Object)node2));
1038:       assertTrue(boolean2 == boolean1);
1039:       assertTrue(boolean2 == boolean0);
1040:       assertSame(node0, node2);
1041:       assertFalse(boolean2);
1042:       assertFalse(node0.isFalse());
1043:       assertFalse(node0.isThrow());
1044:       assertFalse(node0.isBreak());
1045:       assertFalse(node0.isGetProp());
1046:       assertFalse(node0.isComma());
1047:       assertFalse(node0.isThis());
1048:       assertFalse(node0.isInc());
1049:       assertFalse(node0.isHook());
1050:       assertFalse(node0.isInstanceOf());
1051:       assertFalse(node0.isIn());
1052:       assertFalse(node0.isWith());
1053:       assertFalse(node0.isExprResult());
1054:       assertFalse(node0.isIf());
1055:       assertFalse(node0.isDelProp());
1056:       assertFalse(node0.isNE());
1057:       assertFalse(node0.isGetElem());
1058:       assertFalse(node0.isAssign());
1059:       assertFalse(node0.hasChildren());
1060:       assertFalse(node0.isDec());
1061:       assertFalse(node0.isTypeOf());
1062:       assertFalse(node0.isCast());
1063:       assertFalse(node0.isReturn());
1064:       assertFalse(node0.isNot());
1065:       assertFalse(node0.isObjectLit());
1066:       assertEquals(40, node0.getType());
1067:       assertFalse(node0.isFunction());
1068:       assertFalse(node0.isContinue());
1069:       assertFalse(node0.isDebugger());
1070:       assertEquals((-1), node0.getSourcePosition());
1071:       assertFalse(node0.isAnd());
1072:       assertFalse(node0.isStringKey());
1073:       assertFalse(node0.isCall());
1074:       assertFalse(node0.isName());
1075:       assertFalse(node0.isNew());
1076:       assertFalse(node0.isBlock());
1077:       assertFalse(node0.isAdd());
1078:       assertTrue(node0.isString());
1079:       assertFalse(node0.isSetterDef());
1080:       assertFalse(node0.isVar());
1081:       assertFalse(node0.isWhile());
1082:       assertFalse(node0.isDo());
1083:       assertFalse(node0.isRegExp());
1084:       assertFalse(node0.hasMoreThanOneChild());
1085:       assertFalse(node0.isCatch());
1086:       assertFalse(node0.isVoid());
1087:       assertFalse(node0.isTrue());
1088:       assertEquals((-1), node0.getLineno());
1089:       assertFalse(node0.isOr());
1090:       assertFalse(node0.isNull());
1091:       assertFalse(node0.isLabelName());
1092:       assertFalse(node0.isEmpty());
1093:       assertFalse(node0.isFor());
1094:       assertFalse(node0.isArrayLit());
1095:       assertFalse(node0.isNumber());
1096:       assertFalse(node0.isGetterDef());
1097:       assertFalse(node0.isTry());
1098:       assertFalse(node0.isLabel());
1099:       assertFalse(node0.hasOneChild());
1100:       assertFalse(node0.isDefaultCase());
1101:       assertFalse(node0.isAssignAdd());
1102:       assertFalse(node0.isCase());
1103:       assertEquals(0, node0.getChildCount());
1104:       assertFalse(node0.isScript());
1105:       assertEquals((-1), node0.getCharno());
1106:       assertFalse(node0.isSwitch());
1107:       assertFalse(node0.isParamList());
1108:       assertFalse(node1.isTypeOf());
1109:       assertFalse(node1.isNumber());
1110:       assertFalse(node1.isReturn());
1111:       assertFalse(node1.isAssign());
1112:       assertFalse(node1.isOr());
1113:       assertFalse(node1.isDec());
1114:       assertFalse(node1.isLabel());
1115:       assertEquals((-1), node1.getSourcePosition());
1116:       assertFalse(node1.hasMoreThanOneChild());
1117:       assertFalse(node1.isCast());
1118:       assertFalse(node1.isContinue());
1119:       assertEquals((-1), node1.getLineno());
1120:       assertFalse(node1.isLabelName());
1121:       assertFalse(node1.isGetElem());
1122:       assertFalse(node1.isVar());
1123:       assertEquals(42, node1.getType());
1124:       assertFalse(node1.isDo());
1125:       assertFalse(node1.isAssignAdd());
1126:       assertFalse(node1.isAdd());
1127:       assertFalse(node1.isNew());
1128:       assertFalse(node1.isComma());
1129:       assertFalse(node1.isNull());
1130:       assertFalse(node1.isCall());
1131:       assertTrue(node1.isThis());
1132:       assertFalse(node1.isFalse());
1133:       assertFalse(node1.isAnd());
1134:       assertFalse(node1.isName());
1135:       assertFalse(node1.isBreak());
1136:       assertFalse(node1.isExprResult());
1137:       assertFalse(node1.isWhile());
1138:       assertFalse(node1.isString());
1139:       assertFalse(node1.isNot());
1140:       assertFalse(node1.isDebugger());
1141:       assertFalse(node1.isObjectLit());
1142:       assertFalse(node1.isGetProp());
1143:       assertFalse(node1.isNE());
1144:       assertFalse(node1.isIf());
1145:       assertTrue(node1.hasOneChild());
1146:       assertFalse(node1.isFor());
1147:       assertFalse(node1.isGetterDef());
1148:       assertEquals(1, node1.getChildCount());
1149:       assertTrue(node1.hasChildren());
1150:       assertFalse(node1.isDelProp());
1151:       assertFalse(node1.isArrayLit());
1152:       assertFalse(node1.isFunction());
1153:       assertFalse(node1.isInc());
1154:       assertFalse(node1.isVoid());
1155:       assertFalse(node1.isTrue());
1156:       assertFalse(node1.isDefaultCase());
1157:       assertFalse(node1.isThrow());
1158:       assertFalse(node1.isIn());
1159:       assertFalse(node1.isEmpty());
1160:       assertFalse(node1.isSetterDef());
1161:       assertFalse(node1.isParamList());
1162:       assertFalse(node1.isCatch());
1163:       assertFalse(node1.isStringKey());
1164:       assertFalse(node1.isInstanceOf());
1165:       assertFalse(node1.isSwitch());
1166:       assertFalse(node1.isScript());
1167:       assertFalse(node1.isRegExp());
1168:       assertFalse(node1.isWith());
1169:       assertFalse(node1.isBlock());
1170:       assertFalse(node1.isHook());
1171:       assertEquals((-1), node1.getCharno());
1172:       assertFalse(node1.isTry());
1173:       assertFalse(node1.isCase());
1174:       
1175:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
1176:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1177:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1178:       assertEquals(8, Node.FLAG_NO_THROWS);
1179:       assertEquals(50, Node.FREE_CALL);
1180:       assertEquals(52, Node.LENGTH);
1181:       assertEquals(55, Node.INFERRED_FUNCTION);
1182:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1183:       assertEquals(39, Node.EMPTY_BLOCK);
1184:       assertEquals(57, Node.LAST_PROP);
1185:       assertEquals(43, Node.IS_CONSTANT_NAME);
1186:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1187:       assertEquals(30, Node.VAR_ARGS_NAME);
1188:       assertEquals(46, Node.IS_NAMESPACE);
1189:       assertEquals(54, Node.SLASH_V);
1190:       assertEquals(40, Node.ORIGINALNAME_PROP);
1191:       assertEquals(47, Node.IS_DISPATCHER);
1192:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1193:       assertEquals(56, Node.CHANGE_TIME);
1194:       assertEquals(29, Node.JSDOC_INFO_PROP);
1195:       assertEquals(2, Node.POST_FLAG);
1196:       assertEquals(12, Node.COLUMN_BITS);
1197:       assertEquals(53, Node.INPUT_ID);
1198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1199:       assertEquals(32, Node.INCRDECR_PROP);
1200:       assertEquals(1, Node.DECR_FLAG);
1201:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1202:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1203:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1204:       assertEquals(4095, Node.COLUMN_MASK);
1205:       assertEquals(36, Node.QUOTED_PROP);
1206:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1207:       assertEquals(57, Node.REFLECTED_OBJECT);
1208:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1209:       assertEquals(37, Node.OPT_ARG_NAME);
1210:       assertEquals(48, Node.DIRECTIVES);
1211:       assertEquals(49, Node.DIRECT_EVAL);
1212:       assertFalse(node0.equals((Object)node1));
1213:       assertNotNull(node_FileLevelJsDocBuilder0);
1214:       assertFalse(node0.isFalse());
1215:       assertFalse(node0.isThrow());
1216:       assertFalse(node0.isBreak());
1217:       assertFalse(node0.isGetProp());
1218:       assertFalse(node0.isComma());
1219:       assertFalse(node0.isThis());
1220:       assertFalse(node0.isInc());
1221:       assertFalse(node0.isHook());
1222:       assertFalse(node0.isInstanceOf());
1223:       assertFalse(node0.isIn());
1224:       assertFalse(node0.isWith());
1225:       assertFalse(node0.isExprResult());
1226:       assertFalse(node0.isIf());
1227:       assertFalse(node0.isDelProp());
1228:       assertFalse(node0.isNE());
1229:       assertFalse(node0.isGetElem());
1230:       assertFalse(node0.isAssign());
1231:       assertFalse(node0.hasChildren());
1232:       assertFalse(node0.isDec());
1233:       assertFalse(node0.isTypeOf());
1234:       assertFalse(node0.isCast());
1235:       assertFalse(node0.isReturn());
1236:       assertFalse(node0.isNot());
1237:       assertFalse(node0.isObjectLit());
1238:       assertEquals(40, node0.getType());
1239:       assertFalse(node0.isFunction());
1240:       assertFalse(node0.isContinue());
1241:       assertFalse(node0.isDebugger());
1242:       assertEquals((-1), node0.getSourcePosition());
1243:       assertFalse(node0.isAnd());
1244:       assertFalse(node0.isStringKey());
1245:       assertFalse(node0.isCall());
1246:       assertFalse(node0.isName());
1247:       assertFalse(node0.isNew());
1248:       assertFalse(node0.isBlock());
1249:       assertFalse(node0.isAdd());
1250:       assertTrue(node0.isString());
1251:       assertFalse(node0.isSetterDef());
1252:       assertFalse(node0.isVar());
1253:       assertFalse(node0.isWhile());
1254:       assertFalse(node0.isDo());
1255:       assertFalse(node0.isRegExp());
1256:       assertFalse(node0.hasMoreThanOneChild());
1257:       assertFalse(node0.isCatch());
1258:       assertFalse(node0.isVoid());
1259:       assertFalse(node0.isTrue());
1260:       assertEquals((-1), node0.getLineno());
1261:       assertFalse(node0.isOr());
1262:       assertFalse(node0.isNull());
1263:       assertFalse(node0.isLabelName());
1264:       assertFalse(node0.isEmpty());
1265:       assertFalse(node0.isFor());
1266:       assertFalse(node0.isArrayLit());
1267:       assertFalse(node0.isNumber());
1268:       assertFalse(node0.isGetterDef());
1269:       assertFalse(node0.isTry());
1270:       assertFalse(node0.isLabel());
1271:       assertFalse(node0.hasOneChild());
1272:       assertFalse(node0.isDefaultCase());
1273:       assertFalse(node0.isAssignAdd());
1274:       assertFalse(node0.isCase());
1275:       assertEquals(0, node0.getChildCount());
1276:       assertFalse(node0.isScript());
1277:       assertEquals((-1), node0.getCharno());
1278:       assertFalse(node0.isSwitch());
1279:       assertFalse(node0.isParamList());
1280:       
1281:       node_FileLevelJsDocBuilder0.append("@OARlm%7gewnZs`H)");
1282:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1283:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1284:       assertEquals(8, Node.FLAG_NO_THROWS);
1285:       assertEquals(50, Node.FREE_CALL);
1286:       assertEquals(52, Node.LENGTH);
1287:       assertEquals(55, Node.INFERRED_FUNCTION);
1288:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1289:       assertEquals(39, Node.EMPTY_BLOCK);
1290:       assertEquals(57, Node.LAST_PROP);
1291:       assertEquals(43, Node.IS_CONSTANT_NAME);
1292:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1293:       assertEquals(30, Node.VAR_ARGS_NAME);
1294:       assertEquals(46, Node.IS_NAMESPACE);
1295:       assertEquals(54, Node.SLASH_V);
1296:       assertEquals(40, Node.ORIGINALNAME_PROP);
1297:       assertEquals(47, Node.IS_DISPATCHER);
1298:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1299:       assertEquals(56, Node.CHANGE_TIME);
1300:       assertEquals(29, Node.JSDOC_INFO_PROP);
1301:       assertEquals(2, Node.POST_FLAG);
1302:       assertEquals(12, Node.COLUMN_BITS);
1303:       assertEquals(53, Node.INPUT_ID);
1304:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1305:       assertEquals(32, Node.INCRDECR_PROP);
1306:       assertEquals(1, Node.DECR_FLAG);
1307:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1310:       assertEquals(4095, Node.COLUMN_MASK);
1311:       assertEquals(36, Node.QUOTED_PROP);
1312:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1313:       assertEquals(57, Node.REFLECTED_OBJECT);
1314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1315:       assertEquals(37, Node.OPT_ARG_NAME);
1316:       assertEquals(48, Node.DIRECTIVES);
1317:       assertEquals(49, Node.DIRECT_EVAL);
1318:       assertFalse(node0.equals((Object)node1));
1319:       assertSame(node0, node2);
1320:       assertFalse(node0.isFalse());
1321:       assertFalse(node0.isThrow());
1322:       assertFalse(node0.isBreak());
1323:       assertFalse(node0.isGetProp());
1324:       assertFalse(node0.isComma());
1325:       assertFalse(node0.isThis());
1326:       assertFalse(node0.isInc());
1327:       assertFalse(node0.isHook());
1328:       assertFalse(node0.isInstanceOf());
1329:       assertFalse(node0.isIn());
1330:       assertFalse(node0.isWith());
1331:       assertFalse(node0.isExprResult());
1332:       assertFalse(node0.isIf());
1333:       assertFalse(node0.isDelProp());
1334:       assertFalse(node0.isNE());
1335:       assertFalse(node0.isGetElem());
1336:       assertFalse(node0.isAssign());
1337:       assertFalse(node0.hasChildren());
1338:       assertFalse(node0.isDec());
1339:       assertFalse(node0.isTypeOf());
1340:       assertFalse(node0.isCast());
1341:       assertFalse(node0.isReturn());
1342:       assertFalse(node0.isNot());
1343:       assertFalse(node0.isObjectLit());
1344:       assertEquals(40, node0.getType());
1345:       assertFalse(node0.isFunction());
1346:       assertFalse(node0.isContinue());
1347:       assertFalse(node0.isDebugger());
1348:       assertEquals((-1), node0.getSourcePosition());
1349:       assertFalse(node0.isAnd());
1350:       assertFalse(node0.isStringKey());
1351:       assertFalse(node0.isCall());
1352:       assertFalse(node0.isName());
1353:       assertFalse(node0.isNew());
1354:       assertFalse(node0.isBlock());
1355:       assertFalse(node0.isAdd());
1356:       assertTrue(node0.isString());
1357:       assertFalse(node0.isSetterDef());
1358:       assertFalse(node0.isVar());
1359:       assertFalse(node0.isWhile());
1360:       assertFalse(node0.isDo());
1361:       assertFalse(node0.isRegExp());
1362:       assertFalse(node0.hasMoreThanOneChild());
1363:       assertFalse(node0.isCatch());
1364:       assertFalse(node0.isVoid());
1365:       assertFalse(node0.isTrue());
1366:       assertEquals((-1), node0.getLineno());
1367:       assertFalse(node0.isOr());
1368:       assertFalse(node0.isNull());
1369:       assertFalse(node0.isLabelName());
1370:       assertFalse(node0.isEmpty());
1371:       assertFalse(node0.isFor());
1372:       assertFalse(node0.isArrayLit());
1373:       assertFalse(node0.isNumber());
1374:       assertFalse(node0.isGetterDef());
1375:       assertFalse(node0.isTry());
1376:       assertFalse(node0.isLabel());
1377:       assertFalse(node0.hasOneChild());
1378:       assertFalse(node0.isDefaultCase());
1379:       assertFalse(node0.isAssignAdd());
1380:       assertFalse(node0.isCase());
1381:       assertEquals(0, node0.getChildCount());
1382:       assertFalse(node0.isScript());
1383:       assertEquals((-1), node0.getCharno());
1384:       assertFalse(node0.isSwitch());
1385:       assertFalse(node0.isParamList());
1386:       
1387:       String string0 = node0.getSourceFileName();
1388:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1389:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1390:       assertEquals(8, Node.FLAG_NO_THROWS);
1391:       assertEquals(50, Node.FREE_CALL);
1392:       assertEquals(52, Node.LENGTH);
1393:       assertEquals(55, Node.INFERRED_FUNCTION);
1394:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1395:       assertEquals(39, Node.EMPTY_BLOCK);
1396:       assertEquals(57, Node.LAST_PROP);
1397:       assertEquals(43, Node.IS_CONSTANT_NAME);
1398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1399:       assertEquals(30, Node.VAR_ARGS_NAME);
1400:       assertEquals(46, Node.IS_NAMESPACE);
1401:       assertEquals(54, Node.SLASH_V);
1402:       assertEquals(40, Node.ORIGINALNAME_PROP);
1403:       assertEquals(47, Node.IS_DISPATCHER);
1404:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1405:       assertEquals(56, Node.CHANGE_TIME);
1406:       assertEquals(29, Node.JSDOC_INFO_PROP);
1407:       assertEquals(2, Node.POST_FLAG);
1408:       assertEquals(12, Node.COLUMN_BITS);
1409:       assertEquals(53, Node.INPUT_ID);
1410:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1411:       assertEquals(32, Node.INCRDECR_PROP);
1412:       assertEquals(1, Node.DECR_FLAG);
1413:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1415:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1416:       assertEquals(4095, Node.COLUMN_MASK);
1417:       assertEquals(36, Node.QUOTED_PROP);
1418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1419:       assertEquals(57, Node.REFLECTED_OBJECT);
1420:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1421:       assertEquals(37, Node.OPT_ARG_NAME);
1422:       assertEquals(48, Node.DIRECTIVES);
1423:       assertEquals(49, Node.DIRECT_EVAL);
1424:       assertFalse(node0.equals((Object)node1));
1425:       assertNull(string0);
1426:       assertSame(node0, node2);
1427:       assertFalse(node0.isFalse());
1428:       assertFalse(node0.isThrow());
1429:       assertFalse(node0.isBreak());
1430:       assertFalse(node0.isGetProp());
1431:       assertFalse(node0.isComma());
1432:       assertFalse(node0.isThis());
1433:       assertFalse(node0.isInc());
1434:       assertFalse(node0.isHook());
1435:       assertFalse(node0.isInstanceOf());
1436:       assertFalse(node0.isIn());
1437:       assertFalse(node0.isWith());
1438:       assertFalse(node0.isExprResult());
1439:       assertFalse(node0.isIf());
1440:       assertFalse(node0.isDelProp());
1441:       assertFalse(node0.isNE());
1442:       assertFalse(node0.isGetElem());
1443:       assertFalse(node0.isAssign());
1444:       assertFalse(node0.hasChildren());
1445:       assertFalse(node0.isDec());
1446:       assertFalse(node0.isTypeOf());
1447:       assertFalse(node0.isCast());
1448:       assertFalse(node0.isReturn());
1449:       assertFalse(node0.isNot());
1450:       assertFalse(node0.isObjectLit());
1451:       assertEquals(40, node0.getType());
1452:       assertFalse(node0.isFunction());
1453:       assertFalse(node0.isContinue());
1454:       assertFalse(node0.isDebugger());
1455:       assertEquals((-1), node0.getSourcePosition());
1456:       assertFalse(node0.isAnd());
1457:       assertFalse(node0.isStringKey());
1458:       assertFalse(node0.isCall());
1459:       assertFalse(node0.isName());
1460:       assertFalse(node0.isNew());
1461:       assertFalse(node0.isBlock());
1462:       assertFalse(node0.isAdd());
1463:       assertTrue(node0.isString());
1464:       assertFalse(node0.isSetterDef());
1465:       assertFalse(node0.isVar());
1466:       assertFalse(node0.isWhile());
1467:       assertFalse(node0.isDo());
1468:       assertFalse(node0.isRegExp());
1469:       assertFalse(node0.hasMoreThanOneChild());
1470:       assertFalse(node0.isCatch());
1471:       assertFalse(node0.isVoid());
1472:       assertFalse(node0.isTrue());
1473:       assertEquals((-1), node0.getLineno());
1474:       assertFalse(node0.isOr());
1475:       assertFalse(node0.isNull());
1476:       assertFalse(node0.isLabelName());
1477:       assertFalse(node0.isEmpty());
1478:       assertFalse(node0.isFor());
1479:       assertFalse(node0.isArrayLit());
1480:       assertFalse(node0.isNumber());
1481:       assertFalse(node0.isGetterDef());
1482:       assertFalse(node0.isTry());
1483:       assertFalse(node0.isLabel());
1484:       assertFalse(node0.hasOneChild());
1485:       assertFalse(node0.isDefaultCase());
1486:       assertFalse(node0.isAssignAdd());
1487:       assertFalse(node0.isCase());
1488:       assertEquals(0, node0.getChildCount());
1489:       assertFalse(node0.isScript());
1490:       assertEquals((-1), node0.getCharno());
1491:       assertFalse(node0.isSwitch());
1492:       assertFalse(node0.isParamList());
1493:       
1494:       int int0 = node1.getLineno();
1495:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1496:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1497:       assertEquals(8, Node.FLAG_NO_THROWS);
1498:       assertEquals(50, Node.FREE_CALL);
1499:       assertEquals(52, Node.LENGTH);
1500:       assertEquals(55, Node.INFERRED_FUNCTION);
1501:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1502:       assertEquals(39, Node.EMPTY_BLOCK);
1503:       assertEquals(57, Node.LAST_PROP);
1504:       assertEquals(43, Node.IS_CONSTANT_NAME);
1505:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1506:       assertEquals(30, Node.VAR_ARGS_NAME);
1507:       assertEquals(46, Node.IS_NAMESPACE);
1508:       assertEquals(54, Node.SLASH_V);
1509:       assertEquals(40, Node.ORIGINALNAME_PROP);
1510:       assertEquals(47, Node.IS_DISPATCHER);
1511:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1512:       assertEquals(56, Node.CHANGE_TIME);
1513:       assertEquals(29, Node.JSDOC_INFO_PROP);
1514:       assertEquals(2, Node.POST_FLAG);
1515:       assertEquals(12, Node.COLUMN_BITS);
1516:       assertEquals(53, Node.INPUT_ID);
1517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1518:       assertEquals(32, Node.INCRDECR_PROP);
1519:       assertEquals(1, Node.DECR_FLAG);
1520:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1522:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1523:       assertEquals(4095, Node.COLUMN_MASK);
1524:       assertEquals(36, Node.QUOTED_PROP);
1525:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1526:       assertEquals(57, Node.REFLECTED_OBJECT);
1527:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1528:       assertEquals(37, Node.OPT_ARG_NAME);
1529:       assertEquals(48, Node.DIRECTIVES);
1530:       assertEquals(49, Node.DIRECT_EVAL);
1531:       assertEquals(37, Node.OPT_ARG_NAME);
1532:       assertEquals(2, Node.POST_FLAG);
1533:       assertEquals(32, Node.INCRDECR_PROP);
1534:       assertEquals(56, Node.CHANGE_TIME);
1535:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1536:       assertEquals(12, Node.COLUMN_BITS);
1537:       assertEquals(47, Node.IS_DISPATCHER);
1538:       assertEquals(46, Node.IS_NAMESPACE);
1539:       assertEquals(30, Node.VAR_ARGS_NAME);
1540:       assertEquals(49, Node.DIRECT_EVAL);
1541:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1543:       assertEquals(43, Node.IS_CONSTANT_NAME);
1544:       assertEquals(54, Node.SLASH_V);
1545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1546:       assertEquals(1, Node.DECR_FLAG);
1547:       assertEquals(50, Node.FREE_CALL);
1548:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1549:       assertEquals(8, Node.FLAG_NO_THROWS);
1550:       assertEquals(48, Node.DIRECTIVES);
1551:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1552:       assertEquals(4095, Node.COLUMN_MASK);
1553:       assertEquals(40, Node.ORIGINALNAME_PROP);
1554:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1555:       assertEquals(53, Node.INPUT_ID);
1556:       assertEquals(52, Node.LENGTH);
1557:       assertEquals(36, Node.QUOTED_PROP);
1558:       assertEquals(57, Node.REFLECTED_OBJECT);
1559:       assertEquals(57, Node.LAST_PROP);
1560:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1561:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1563:       assertEquals(39, Node.EMPTY_BLOCK);
1564:       assertEquals(55, Node.INFERRED_FUNCTION);
1565:       assertEquals(29, Node.JSDOC_INFO_PROP);
1566:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1567:       assertFalse(node0.equals((Object)node1));
1568:       assertFalse(node1.equals((Object)node0));
1569:       assertFalse(node1.equals((Object)node2));
1570:       assertSame(node0, node2);
1571:       assertEquals((-1), int0);
1572:       assertFalse(node0.isFalse());
1573:       assertFalse(node0.isThrow());
1574:       assertFalse(node0.isBreak());
1575:       assertFalse(node0.isGetProp());
1576:       assertFalse(node0.isComma());
1577:       assertFalse(node0.isThis());
1578:       assertFalse(node0.isInc());
1579:       assertFalse(node0.isHook());
1580:       assertFalse(node0.isInstanceOf());
1581:       assertFalse(node0.isIn());
1582:       assertFalse(node0.isWith());
1583:       assertFalse(node0.isExprResult());
1584:       assertFalse(node0.isIf());
1585:       assertFalse(node0.isDelProp());
1586:       assertFalse(node0.isNE());
1587:       assertFalse(node0.isGetElem());
1588:       assertFalse(node0.isAssign());
1589:       assertFalse(node0.hasChildren());
1590:       assertFalse(node0.isDec());
1591:       assertFalse(node0.isTypeOf());
1592:       assertFalse(node0.isCast());
1593:       assertFalse(node0.isReturn());
1594:       assertFalse(node0.isNot());
1595:       assertFalse(node0.isObjectLit());
1596:       assertEquals(40, node0.getType());
1597:       assertFalse(node0.isFunction());
1598:       assertFalse(node0.isContinue());
1599:       assertFalse(node0.isDebugger());
1600:       assertEquals((-1), node0.getSourcePosition());
1601:       assertFalse(node0.isAnd());
1602:       assertFalse(node0.isStringKey());
1603:       assertFalse(node0.isCall());
1604:       assertFalse(node0.isName());
1605:       assertFalse(node0.isNew());
1606:       assertFalse(node0.isBlock());
1607:       assertFalse(node0.isAdd());
1608:       assertTrue(node0.isString());
1609:       assertFalse(node0.isSetterDef());
1610:       assertFalse(node0.isVar());
1611:       assertFalse(node0.isWhile());
1612:       assertFalse(node0.isDo());
1613:       assertFalse(node0.isRegExp());
1614:       assertFalse(node0.hasMoreThanOneChild());
1615:       assertFalse(node0.isCatch());
1616:       assertFalse(node0.isVoid());
1617:       assertFalse(node0.isTrue());
1618:       assertEquals((-1), node0.getLineno());
1619:       assertFalse(node0.isOr());
1620:       assertFalse(node0.isNull());
1621:       assertFalse(node0.isLabelName());
1622:       assertFalse(node0.isEmpty());
1623:       assertFalse(node0.isFor());
1624:       assertFalse(node0.isArrayLit());
1625:       assertFalse(node0.isNumber());
1626:       assertFalse(node0.isGetterDef());
1627:       assertFalse(node0.isTry());
1628:       assertFalse(node0.isLabel());
1629:       assertFalse(node0.hasOneChild());
1630:       assertFalse(node0.isDefaultCase());
1631:       assertFalse(node0.isAssignAdd());
1632:       assertFalse(node0.isCase());
1633:       assertEquals(0, node0.getChildCount());
1634:       assertFalse(node0.isScript());
1635:       assertEquals((-1), node0.getCharno());
1636:       assertFalse(node0.isSwitch());
1637:       assertFalse(node0.isParamList());
1638:       assertFalse(node1.isTypeOf());
1639:       assertFalse(node1.isNumber());
1640:       assertFalse(node1.isReturn());
1641:       assertFalse(node1.isAssign());
1642:       assertFalse(node1.isOr());
1643:       assertFalse(node1.isDec());
1644:       assertFalse(node1.isLabel());
1645:       assertEquals((-1), node1.getSourcePosition());
1646:       assertFalse(node1.hasMoreThanOneChild());
1647:       assertFalse(node1.isCast());
1648:       assertFalse(node1.isContinue());
1649:       assertEquals((-1), node1.getLineno());
1650:       assertFalse(node1.isLabelName());
1651:       assertFalse(node1.isGetElem());
1652:       assertFalse(node1.isVar());
1653:       assertEquals(42, node1.getType());
1654:       assertFalse(node1.isDo());
1655:       assertFalse(node1.isAssignAdd());
1656:       assertFalse(node1.isAdd());
1657:       assertFalse(node1.isNew());
1658:       assertFalse(node1.isComma());
1659:       assertFalse(node1.isNull());
1660:       assertFalse(node1.isCall());
1661:       assertTrue(node1.isThis());
1662:       assertFalse(node1.isFalse());
1663:       assertFalse(node1.isAnd());
1664:       assertFalse(node1.isName());
1665:       assertFalse(node1.isBreak());
1666:       assertFalse(node1.isExprResult());
1667:       assertFalse(node1.isWhile());
1668:       assertFalse(node1.isString());
1669:       assertFalse(node1.isNot());
1670:       assertFalse(node1.isDebugger());
1671:       assertFalse(node1.isObjectLit());
1672:       assertFalse(node1.isGetProp());
1673:       assertFalse(node1.isNE());
1674:       assertFalse(node1.isIf());
1675:       assertTrue(node1.hasOneChild());
1676:       assertFalse(node1.isFor());
1677:       assertFalse(node1.isGetterDef());
1678:       assertEquals(1, node1.getChildCount());
1679:       assertTrue(node1.hasChildren());
1680:       assertFalse(node1.isDelProp());
1681:       assertFalse(node1.isArrayLit());
1682:       assertFalse(node1.isFunction());
1683:       assertFalse(node1.isInc());
1684:       assertFalse(node1.isVoid());
1685:       assertFalse(node1.isTrue());
1686:       assertFalse(node1.isDefaultCase());
1687:       assertFalse(node1.isThrow());
1688:       assertFalse(node1.isIn());
1689:       assertFalse(node1.isEmpty());
1690:       assertFalse(node1.isSetterDef());
1691:       assertFalse(node1.isParamList());
1692:       assertFalse(node1.isCatch());
1693:       assertFalse(node1.isStringKey());
1694:       assertFalse(node1.isInstanceOf());
1695:       assertFalse(node1.isSwitch());
1696:       assertFalse(node1.isScript());
1697:       assertFalse(node1.isRegExp());
1698:       assertFalse(node1.isWith());
1699:       assertFalse(node1.isBlock());
1700:       assertFalse(node1.isHook());
1701:       assertEquals((-1), node1.getCharno());
1702:       assertFalse(node1.isTry());
1703:       assertFalse(node1.isCase());
1704:       
1705:       boolean boolean3 = node2.mayMutateArguments();
1706:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1708:       assertEquals(8, Node.FLAG_NO_THROWS);
1709:       assertEquals(50, Node.FREE_CALL);
1710:       assertEquals(52, Node.LENGTH);
1711:       assertEquals(55, Node.INFERRED_FUNCTION);
1712:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1713:       assertEquals(39, Node.EMPTY_BLOCK);
1714:       assertEquals(57, Node.LAST_PROP);
1715:       assertEquals(43, Node.IS_CONSTANT_NAME);
1716:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1717:       assertEquals(30, Node.VAR_ARGS_NAME);
1718:       assertEquals(46, Node.IS_NAMESPACE);
1719:       assertEquals(54, Node.SLASH_V);
1720:       assertEquals(40, Node.ORIGINALNAME_PROP);
1721:       assertEquals(47, Node.IS_DISPATCHER);
1722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1723:       assertEquals(56, Node.CHANGE_TIME);
1724:       assertEquals(29, Node.JSDOC_INFO_PROP);
1725:       assertEquals(2, Node.POST_FLAG);
1726:       assertEquals(12, Node.COLUMN_BITS);
1727:       assertEquals(53, Node.INPUT_ID);
1728:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1729:       assertEquals(32, Node.INCRDECR_PROP);
1730:       assertEquals(1, Node.DECR_FLAG);
1731:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1732:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1733:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1734:       assertEquals(4095, Node.COLUMN_MASK);
1735:       assertEquals(36, Node.QUOTED_PROP);
1736:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1737:       assertEquals(57, Node.REFLECTED_OBJECT);
1738:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1739:       assertEquals(37, Node.OPT_ARG_NAME);
1740:       assertEquals(48, Node.DIRECTIVES);
1741:       assertEquals(49, Node.DIRECT_EVAL);
1742:       assertEquals(37, Node.OPT_ARG_NAME);
1743:       assertEquals(2, Node.POST_FLAG);
1744:       assertEquals(32, Node.INCRDECR_PROP);
1745:       assertEquals(56, Node.CHANGE_TIME);
1746:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1747:       assertEquals(12, Node.COLUMN_BITS);
1748:       assertEquals(47, Node.IS_DISPATCHER);
1749:       assertEquals(46, Node.IS_NAMESPACE);
1750:       assertEquals(30, Node.VAR_ARGS_NAME);
1751:       assertEquals(49, Node.DIRECT_EVAL);
1752:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1753:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1754:       assertEquals(43, Node.IS_CONSTANT_NAME);
1755:       assertEquals(54, Node.SLASH_V);
1756:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1757:       assertEquals(1, Node.DECR_FLAG);
1758:       assertEquals(50, Node.FREE_CALL);
1759:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1760:       assertEquals(8, Node.FLAG_NO_THROWS);
1761:       assertEquals(48, Node.DIRECTIVES);
1762:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1763:       assertEquals(4095, Node.COLUMN_MASK);
1764:       assertEquals(40, Node.ORIGINALNAME_PROP);
1765:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1766:       assertEquals(53, Node.INPUT_ID);
1767:       assertEquals(52, Node.LENGTH);
1768:       assertEquals(36, Node.QUOTED_PROP);
1769:       assertEquals(57, Node.REFLECTED_OBJECT);
1770:       assertEquals(57, Node.LAST_PROP);
1771:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1772:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1773:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1774:       assertEquals(39, Node.EMPTY_BLOCK);
1775:       assertEquals(55, Node.INFERRED_FUNCTION);
1776:       assertEquals(29, Node.JSDOC_INFO_PROP);
1777:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1778:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1779:       assertEquals(29, Node.JSDOC_INFO_PROP);
1780:       assertEquals(47, Node.IS_DISPATCHER);
1781:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1782:       assertEquals(2, Node.POST_FLAG);
1783:       assertEquals(37, Node.OPT_ARG_NAME);
1784:       assertEquals(43, Node.IS_CONSTANT_NAME);
1785:       assertEquals(56, Node.CHANGE_TIME);
1786:       assertEquals(46, Node.IS_NAMESPACE);
1787:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1788:       assertEquals(30, Node.VAR_ARGS_NAME);
1789:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1791:       assertEquals(36, Node.QUOTED_PROP);
1792:       assertEquals(55, Node.INFERRED_FUNCTION);
1793:       assertEquals(53, Node.INPUT_ID);
1794:       assertEquals(39, Node.EMPTY_BLOCK);
1795:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1796:       assertEquals(57, Node.LAST_PROP);
1797:       assertEquals(50, Node.FREE_CALL);
1798:       assertEquals(40, Node.ORIGINALNAME_PROP);
1799:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1800:       assertEquals(8, Node.FLAG_NO_THROWS);
1801:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1802:       assertEquals(52, Node.LENGTH);
1803:       assertEquals(48, Node.DIRECTIVES);
1804:       assertEquals(54, Node.SLASH_V);
1805:       assertEquals(57, Node.REFLECTED_OBJECT);
1806:       assertEquals(49, Node.DIRECT_EVAL);
1807:       assertEquals(1, Node.DECR_FLAG);
1808:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1809:       assertEquals(4095, Node.COLUMN_MASK);
1810:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1811:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1812:       assertEquals(12, Node.COLUMN_BITS);
1813:       assertEquals(32, Node.INCRDECR_PROP);
1814:       assertFalse(node0.equals((Object)node1));
1815:       assertFalse(node1.equals((Object)node0));
1816:       assertFalse(node1.equals((Object)node2));
1817:       assertFalse(node2.equals((Object)node1));
1818:       assertFalse(boolean3 == boolean0);
1819:       assertFalse(boolean3 == boolean1);
1820:       assertFalse(boolean3 == boolean2);
1821:       assertSame(node0, node2);
1822:       assertSame(node2, node0);
1823:       assertTrue(boolean3);
1824:       assertFalse(node0.isFalse());
1825:       assertFalse(node0.isThrow());
1826:       assertFalse(node0.isBreak());
1827:       assertFalse(node0.isGetProp());
1828:       assertFalse(node0.isComma());
1829:       assertFalse(node0.isThis());
1830:       assertFalse(node0.isInc());
1831:       assertFalse(node0.isHook());
1832:       assertFalse(node0.isInstanceOf());
1833:       assertFalse(node0.isIn());
1834:       assertFalse(node0.isWith());
1835:       assertFalse(node0.isExprResult());
1836:       assertFalse(node0.isIf());
1837:       assertFalse(node0.isDelProp());
1838:       assertFalse(node0.isNE());
1839:       assertFalse(node0.isGetElem());
1840:       assertFalse(node0.isAssign());
1841:       assertFalse(node0.hasChildren());
1842:       assertFalse(node0.isDec());
1843:       assertFalse(node0.isTypeOf());
1844:       assertFalse(node0.isCast());
1845:       assertFalse(node0.isReturn());
1846:       assertFalse(node0.isNot());
1847:       assertFalse(node0.isObjectLit());
1848:       assertEquals(40, node0.getType());
1849:       assertFalse(node0.isFunction());
1850:       assertFalse(node0.isContinue());
1851:       assertFalse(node0.isDebugger());
1852:       assertEquals((-1), node0.getSourcePosition());
1853:       assertFalse(node0.isAnd());
1854:       assertFalse(node0.isStringKey());
1855:       assertFalse(node0.isCall());
1856:       assertFalse(node0.isName());
1857:       assertFalse(node0.isNew());
1858:       assertFalse(node0.isBlock());
1859:       assertFalse(node0.isAdd());
1860:       assertTrue(node0.isString());
1861:       assertFalse(node0.isSetterDef());
1862:       assertFalse(node0.isVar());
1863:       assertFalse(node0.isWhile());
1864:       assertFalse(node0.isDo());
1865:       assertFalse(node0.isRegExp());
1866:       assertFalse(node0.hasMoreThanOneChild());
1867:       assertFalse(node0.isCatch());
1868:       assertFalse(node0.isVoid());
1869:       assertFalse(node0.isTrue());
1870:       assertEquals((-1), node0.getLineno());
1871:       assertFalse(node0.isOr());
1872:       assertFalse(node0.isNull());
1873:       assertFalse(node0.isLabelName());
1874:       assertFalse(node0.isEmpty());
1875:       assertFalse(node0.isFor());
1876:       assertFalse(node0.isArrayLit());
1877:       assertFalse(node0.isNumber());
1878:       assertFalse(node0.isGetterDef());
1879:       assertFalse(node0.isTry());
1880:       assertFalse(node0.isLabel());
1881:       assertFalse(node0.hasOneChild());
1882:       assertFalse(node0.isDefaultCase());
1883:       assertFalse(node0.isAssignAdd());
1884:       assertFalse(node0.isCase());
1885:       assertEquals(0, node0.getChildCount());
1886:       assertFalse(node0.isScript());
1887:       assertEquals((-1), node0.getCharno());
1888:       assertFalse(node0.isSwitch());
1889:       assertFalse(node0.isParamList());
1890:       assertFalse(node1.isTypeOf());
1891:       assertFalse(node1.isNumber());
1892:       assertFalse(node1.isReturn());
1893:       assertFalse(node1.isAssign());
1894:       assertFalse(node1.isOr());
1895:       assertFalse(node1.isDec());
1896:       assertFalse(node1.isLabel());
1897:       assertEquals((-1), node1.getSourcePosition());
1898:       assertFalse(node1.hasMoreThanOneChild());
1899:       assertFalse(node1.isCast());
1900:       assertFalse(node1.isContinue());
1901:       assertEquals((-1), node1.getLineno());
1902:       assertFalse(node1.isLabelName());
1903:       assertFalse(node1.isGetElem());
1904:       assertFalse(node1.isVar());
1905:       assertEquals(42, node1.getType());
1906:       assertFalse(node1.isDo());
1907:       assertFalse(node1.isAssignAdd());
1908:       assertFalse(node1.isAdd());
1909:       assertFalse(node1.isNew());
1910:       assertFalse(node1.isComma());
1911:       assertFalse(node1.isNull());
1912:       assertFalse(node1.isCall());
1913:       assertTrue(node1.isThis());
1914:       assertFalse(node1.isFalse());
1915:       assertFalse(node1.isAnd());
1916:       assertFalse(node1.isName());
1917:       assertFalse(node1.isBreak());
1918:       assertFalse(node1.isExprResult());
1919:       assertFalse(node1.isWhile());
1920:       assertFalse(node1.isString());
1921:       assertFalse(node1.isNot());
1922:       assertFalse(node1.isDebugger());
1923:       assertFalse(node1.isObjectLit());
1924:       assertFalse(node1.isGetProp());
1925:       assertFalse(node1.isNE());
1926:       assertFalse(node1.isIf());
1927:       assertTrue(node1.hasOneChild());
1928:       assertFalse(node1.isFor());
1929:       assertFalse(node1.isGetterDef());
1930:       assertEquals(1, node1.getChildCount());
1931:       assertTrue(node1.hasChildren());
1932:       assertFalse(node1.isDelProp());
1933:       assertFalse(node1.isArrayLit());
1934:       assertFalse(node1.isFunction());
1935:       assertFalse(node1.isInc());
1936:       assertFalse(node1.isVoid());
1937:       assertFalse(node1.isTrue());
1938:       assertFalse(node1.isDefaultCase());
1939:       assertFalse(node1.isThrow());
1940:       assertFalse(node1.isIn());
1941:       assertFalse(node1.isEmpty());
1942:       assertFalse(node1.isSetterDef());
1943:       assertFalse(node1.isParamList());
1944:       assertFalse(node1.isCatch());
1945:       assertFalse(node1.isStringKey());
1946:       assertFalse(node1.isInstanceOf());
1947:       assertFalse(node1.isSwitch());
1948:       assertFalse(node1.isScript());
1949:       assertFalse(node1.isRegExp());
1950:       assertFalse(node1.isWith());
1951:       assertFalse(node1.isBlock());
1952:       assertFalse(node1.isHook());
1953:       assertEquals((-1), node1.getCharno());
1954:       assertFalse(node1.isTry());
1955:       assertFalse(node1.isCase());
1956:       assertFalse(node2.isArrayLit());
1957:       assertFalse(node2.isEmpty());
1958:       assertFalse(node2.isDebugger());
1959:       assertFalse(node2.isVoid());
1960:       assertFalse(node2.isDelProp());
1961:       assertFalse(node2.isGetterDef());
1962:       assertFalse(node2.isIf());
1963:       assertFalse(node2.isTrue());
1964:       assertFalse(node2.isNE());
1965:       assertFalse(node2.isCatch());
1966:       assertFalse(node2.isCase());
1967:       assertFalse(node2.isTry());
1968:       assertFalse(node2.isRegExp());
1969:       assertFalse(node2.isHook());
1970:       assertFalse(node2.isFor());
1971:       assertFalse(node2.isFalse());
1972:       assertFalse(node2.isContinue());
1973:       assertFalse(node2.isAnd());
1974:       assertFalse(node2.isIn());
1975:       assertFalse(node2.isFunction());
1976:       assertFalse(node2.isSetterDef());
1977:       assertFalse(node2.isInc());
1978:       assertFalse(node2.isThrow());
1979:       assertEquals(40, node2.getType());
1980:       assertFalse(node2.isCast());
1981:       assertFalse(node2.hasOneChild());
1982:       assertFalse(node2.isAssign());
1983:       assertFalse(node2.isLabelName());
1984:       assertFalse(node2.isGetElem());
1985:       assertFalse(node2.isExprResult());
1986:       assertFalse(node2.isNumber());
1987:       assertEquals((-1), node2.getSourcePosition());
1988:       assertFalse(node2.isOr());
1989:       assertFalse(node2.hasMoreThanOneChild());
1990:       assertFalse(node2.isNot());
1991:       assertFalse(node2.isObjectLit());
1992:       assertEquals((-1), node2.getLineno());
1993:       assertFalse(node2.isWith());
1994:       assertFalse(node2.isGetProp());
1995:       assertFalse(node2.isInstanceOf());
1996:       assertFalse(node2.isScript());
1997:       assertFalse(node2.isComma());
1998:       assertFalse(node2.isThis());
1999:       assertFalse(node2.isDec());
2000:       assertFalse(node2.isTypeOf());
2001:       assertTrue(node2.isString());
2002:       assertFalse(node2.isReturn());
2003:       assertFalse(node2.isWhile());
2004:       assertFalse(node2.hasChildren());
2005:       assertFalse(node2.isBlock());
2006:       assertFalse(node2.isName());
2007:       assertFalse(node2.isBreak());
2008:       assertFalse(node2.isCall());
2009:       assertFalse(node2.isAdd());
2010:       assertFalse(node2.isParamList());
2011:       assertFalse(node2.isSwitch());
2012:       assertEquals((-1), node2.getCharno());
2013:       assertFalse(node2.isStringKey());
2014:       assertFalse(node2.isNull());
2015:       assertEquals(0, node2.getChildCount());
2016:       assertFalse(node2.isDo());
2017:       assertFalse(node2.isDefaultCase());
2018:       assertFalse(node2.isNew());
2019:       assertFalse(node2.isLabel());
2020:       assertFalse(node2.isAssignAdd());
2021:       assertFalse(node2.isVar());
2022:       
2023:       Iterable<Node> iterable0 = node2.children();
2024:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2025:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2026:       assertEquals(8, Node.FLAG_NO_THROWS);
2027:       assertEquals(50, Node.FREE_CALL);
2028:       assertEquals(52, Node.LENGTH);
2029:       assertEquals(55, Node.INFERRED_FUNCTION);
2030:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2031:       assertEquals(39, Node.EMPTY_BLOCK);
2032:       assertEquals(57, Node.LAST_PROP);
2033:       assertEquals(43, Node.IS_CONSTANT_NAME);
2034:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2035:       assertEquals(30, Node.VAR_ARGS_NAME);
2036:       assertEquals(46, Node.IS_NAMESPACE);
2037:       assertEquals(54, Node.SLASH_V);
2038:       assertEquals(40, Node.ORIGINALNAME_PROP);
2039:       assertEquals(47, Node.IS_DISPATCHER);
2040:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2041:       assertEquals(56, Node.CHANGE_TIME);
2042:       assertEquals(29, Node.JSDOC_INFO_PROP);
2043:       assertEquals(2, Node.POST_FLAG);
2044:       assertEquals(12, Node.COLUMN_BITS);
2045:       assertEquals(53, Node.INPUT_ID);
2046:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2047:       assertEquals(32, Node.INCRDECR_PROP);
2048:       assertEquals(1, Node.DECR_FLAG);
2049:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2050:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2051:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2052:       assertEquals(4095, Node.COLUMN_MASK);
2053:       assertEquals(36, Node.QUOTED_PROP);
2054:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2055:       assertEquals(57, Node.REFLECTED_OBJECT);
2056:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2057:       assertEquals(37, Node.OPT_ARG_NAME);
2058:       assertEquals(48, Node.DIRECTIVES);
2059:       assertEquals(49, Node.DIRECT_EVAL);
2060:       assertEquals(37, Node.OPT_ARG_NAME);
2061:       assertEquals(2, Node.POST_FLAG);
2062:       assertEquals(32, Node.INCRDECR_PROP);
2063:       assertEquals(56, Node.CHANGE_TIME);
2064:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2065:       assertEquals(12, Node.COLUMN_BITS);
2066:       assertEquals(47, Node.IS_DISPATCHER);
2067:       assertEquals(46, Node.IS_NAMESPACE);
2068:       assertEquals(30, Node.VAR_ARGS_NAME);
2069:       assertEquals(49, Node.DIRECT_EVAL);
2070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2071:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2072:       assertEquals(43, Node.IS_CONSTANT_NAME);
2073:       assertEquals(54, Node.SLASH_V);
2074:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2075:       assertEquals(1, Node.DECR_FLAG);
2076:       assertEquals(50, Node.FREE_CALL);
2077:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2078:       assertEquals(8, Node.FLAG_NO_THROWS);
2079:       assertEquals(48, Node.DIRECTIVES);
2080:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2081:       assertEquals(4095, Node.COLUMN_MASK);
2082:       assertEquals(40, Node.ORIGINALNAME_PROP);
2083:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2084:       assertEquals(53, Node.INPUT_ID);
2085:       assertEquals(52, Node.LENGTH);
2086:       assertEquals(36, Node.QUOTED_PROP);
2087:       assertEquals(57, Node.REFLECTED_OBJECT);
2088:       assertEquals(57, Node.LAST_PROP);
2089:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2090:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2091:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2092:       assertEquals(39, Node.EMPTY_BLOCK);
2093:       assertEquals(55, Node.INFERRED_FUNCTION);
2094:       assertEquals(29, Node.JSDOC_INFO_PROP);
2095:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2097:       assertEquals(29, Node.JSDOC_INFO_PROP);
2098:       assertEquals(47, Node.IS_DISPATCHER);
2099:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2100:       assertEquals(2, Node.POST_FLAG);
2101:       assertEquals(37, Node.OPT_ARG_NAME);
2102:       assertEquals(43, Node.IS_CONSTANT_NAME);
2103:       assertEquals(56, Node.CHANGE_TIME);
2104:       assertEquals(46, Node.IS_NAMESPACE);
2105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2106:       assertEquals(30, Node.VAR_ARGS_NAME);
2107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2108:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2109:       assertEquals(36, Node.QUOTED_PROP);
2110:       assertEquals(55, Node.INFERRED_FUNCTION);
2111:       assertEquals(53, Node.INPUT_ID);
2112:       assertEquals(39, Node.EMPTY_BLOCK);
2113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2114:       assertEquals(57, Node.LAST_PROP);
2115:       assertEquals(50, Node.FREE_CALL);
2116:       assertEquals(40, Node.ORIGINALNAME_PROP);
2117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2118:       assertEquals(8, Node.FLAG_NO_THROWS);
2119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2120:       assertEquals(52, Node.LENGTH);
2121:       assertEquals(48, Node.DIRECTIVES);
2122:       assertEquals(54, Node.SLASH_V);
2123:       assertEquals(57, Node.REFLECTED_OBJECT);
2124:       assertEquals(49, Node.DIRECT_EVAL);
2125:       assertEquals(1, Node.DECR_FLAG);
2126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2127:       assertEquals(4095, Node.COLUMN_MASK);
2128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2130:       assertEquals(12, Node.COLUMN_BITS);
2131:       assertEquals(32, Node.INCRDECR_PROP);
2132:       assertFalse(node0.equals((Object)node1));
2133:       assertFalse(node1.equals((Object)node0));
2134:       assertFalse(node1.equals((Object)node2));
2135:       assertFalse(node2.equals((Object)node1));
2136:       assertNotNull(iterable0);
2137:       assertSame(node0, node2);
2138:       assertSame(node2, node0);
2139:       assertFalse(iterable0.contains(node1));
2140:       assertFalse(node0.isFalse());
2141:       assertFalse(node0.isThrow());
2142:       assertFalse(node0.isBreak());
2143:       assertFalse(node0.isGetProp());
2144:       assertFalse(node0.isComma());
2145:       assertFalse(node0.isThis());
2146:       assertFalse(node0.isInc());
2147:       assertFalse(node0.isHook());
2148:       assertFalse(node0.isInstanceOf());
2149:       assertFalse(node0.isIn());
2150:       assertFalse(node0.isWith());
2151:       assertFalse(node0.isExprResult());
2152:       assertFalse(node0.isIf());
2153:       assertFalse(node0.isDelProp());
2154:       assertFalse(node0.isNE());
2155:       assertFalse(node0.isGetElem());
2156:       assertFalse(node0.isAssign());
2157:       assertFalse(node0.hasChildren());
2158:       assertFalse(node0.isDec());
2159:       assertFalse(node0.isTypeOf());
2160:       assertFalse(node0.isCast());
2161:       assertFalse(node0.isReturn());
2162:       assertFalse(node0.isNot());
2163:       assertFalse(node0.isObjectLit());
2164:       assertEquals(40, node0.getType());
2165:       assertFalse(node0.isFunction());
2166:       assertFalse(node0.isContinue());
2167:       assertFalse(node0.isDebugger());
2168:       assertEquals((-1), node0.getSourcePosition());
2169:       assertFalse(node0.isAnd());
2170:       assertFalse(node0.isStringKey());
2171:       assertFalse(node0.isCall());
2172:       assertFalse(node0.isName());
2173:       assertFalse(node0.isNew());
2174:       assertFalse(node0.isBlock());
2175:       assertFalse(node0.isAdd());
2176:       assertTrue(node0.isString());
2177:       assertFalse(node0.isSetterDef());
2178:       assertFalse(node0.isVar());
2179:       assertFalse(node0.isWhile());
2180:       assertFalse(node0.isDo());
2181:       assertFalse(node0.isRegExp());
2182:       assertFalse(node0.hasMoreThanOneChild());
2183:       assertFalse(node0.isCatch());
2184:       assertFalse(node0.isVoid());
2185:       assertFalse(node0.isTrue());
2186:       assertEquals((-1), node0.getLineno());
2187:       assertFalse(node0.isOr());
2188:       assertFalse(node0.isNull());
2189:       assertFalse(node0.isLabelName());
2190:       assertFalse(node0.isEmpty());
2191:       assertFalse(node0.isFor());
2192:       assertFalse(node0.isArrayLit());
2193:       assertFalse(node0.isNumber());
2194:       assertFalse(node0.isGetterDef());
2195:       assertFalse(node0.isTry());
2196:       assertFalse(node0.isLabel());
2197:       assertFalse(node0.hasOneChild());
2198:       assertFalse(node0.isDefaultCase());
2199:       assertFalse(node0.isAssignAdd());
2200:       assertFalse(node0.isCase());
2201:       assertEquals(0, node0.getChildCount());
2202:       assertFalse(node0.isScript());
2203:       assertEquals((-1), node0.getCharno());
2204:       assertFalse(node0.isSwitch());
2205:       assertFalse(node0.isParamList());
2206:       assertFalse(node1.isTypeOf());
2207:       assertFalse(node1.isNumber());
2208:       assertFalse(node1.isReturn());
2209:       assertFalse(node1.isAssign());
2210:       assertFalse(node1.isOr());
2211:       assertFalse(node1.isDec());
2212:       assertFalse(node1.isLabel());
2213:       assertEquals((-1), node1.getSourcePosition());
2214:       assertFalse(node1.hasMoreThanOneChild());
2215:       assertFalse(node1.isCast());
2216:       assertFalse(node1.isContinue());
2217:       assertEquals((-1), node1.getLineno());
2218:       assertFalse(node1.isLabelName());
2219:       assertFalse(node1.isGetElem());
2220:       assertFalse(node1.isVar());
2221:       assertEquals(42, node1.getType());
2222:       assertFalse(node1.isDo());
2223:       assertFalse(node1.isAssignAdd());
2224:       assertFalse(node1.isAdd());
2225:       assertFalse(node1.isNew());
2226:       assertFalse(node1.isComma());
2227:       assertFalse(node1.isNull());
2228:       assertFalse(node1.isCall());
2229:       assertTrue(node1.isThis());
2230:       assertFalse(node1.isFalse());
2231:       assertFalse(node1.isAnd());
2232:       assertFalse(node1.isName());
2233:       assertFalse(node1.isBreak());
2234:       assertFalse(node1.isExprResult());
2235:       assertFalse(node1.isWhile());
2236:       assertFalse(node1.isString());
2237:       assertFalse(node1.isNot());
2238:       assertFalse(node1.isDebugger());
2239:       assertFalse(node1.isObjectLit());
2240:       assertFalse(node1.isGetProp());
2241:       assertFalse(node1.isNE());
2242:       assertFalse(node1.isIf());
2243:       assertTrue(node1.hasOneChild());
2244:       assertFalse(node1.isFor());
2245:       assertFalse(node1.isGetterDef());
2246:       assertEquals(1, node1.getChildCount());
2247:       assertTrue(node1.hasChildren());
2248:       assertFalse(node1.isDelProp());
2249:       assertFalse(node1.isArrayLit());
2250:       assertFalse(node1.isFunction());
2251:       assertFalse(node1.isInc());
2252:       assertFalse(node1.isVoid());
2253:       assertFalse(node1.isTrue());
2254:       assertFalse(node1.isDefaultCase());
2255:       assertFalse(node1.isThrow());
2256:       assertFalse(node1.isIn());
2257:       assertFalse(node1.isEmpty());
2258:       assertFalse(node1.isSetterDef());
2259:       assertFalse(node1.isParamList());
2260:       assertFalse(node1.isCatch());
2261:       assertFalse(node1.isStringKey());
2262:       assertFalse(node1.isInstanceOf());
2263:       assertFalse(node1.isSwitch());
2264:       assertFalse(node1.isScript());
2265:       assertFalse(node1.isRegExp());
2266:       assertFalse(node1.isWith());
2267:       assertFalse(node1.isBlock());
2268:       assertFalse(node1.isHook());
2269:       assertEquals((-1), node1.getCharno());
2270:       assertFalse(node1.isTry());
2271:       assertFalse(node1.isCase());
2272:       assertFalse(node2.isArrayLit());
2273:       assertFalse(node2.isEmpty());
2274:       assertFalse(node2.isDebugger());
2275:       assertFalse(node2.isVoid());
2276:       assertFalse(node2.isDelProp());
2277:       assertFalse(node2.isGetterDef());
2278:       assertFalse(node2.isIf());
2279:       assertFalse(node2.isTrue());
2280:       assertFalse(node2.isNE());
2281:       assertFalse(node2.isCatch());
2282:       assertFalse(node2.isCase());
2283:       assertFalse(node2.isTry());
2284:       assertFalse(node2.isRegExp());
2285:       assertFalse(node2.isHook());
2286:       assertFalse(node2.isFor());
2287:       assertFalse(node2.isFalse());
2288:       assertFalse(node2.isContinue());
2289:       assertFalse(node2.isAnd());
2290:       assertFalse(node2.isIn());
2291:       assertFalse(node2.isFunction());
2292:       assertFalse(node2.isSetterDef());
2293:       assertFalse(node2.isInc());
2294:       assertFalse(node2.isThrow());
2295:       assertEquals(40, node2.getType());
2296:       assertFalse(node2.isCast());
2297:       assertFalse(node2.hasOneChild());
2298:       assertFalse(node2.isAssign());
2299:       assertFalse(node2.isLabelName());
2300:       assertFalse(node2.isGetElem());
2301:       assertFalse(node2.isExprResult());
2302:       assertFalse(node2.isNumber());
2303:       assertEquals((-1), node2.getSourcePosition());
2304:       assertFalse(node2.isOr());
2305:       assertFalse(node2.hasMoreThanOneChild());
2306:       assertFalse(node2.isNot());
2307:       assertFalse(node2.isObjectLit());
2308:       assertEquals((-1), node2.getLineno());
2309:       assertFalse(node2.isWith());
2310:       assertFalse(node2.isGetProp());
2311:       assertFalse(node2.isInstanceOf());
2312:       assertFalse(node2.isScript());
2313:       assertFalse(node2.isComma());
2314:       
2315:       Node node3 = new Node((-476), 10, 56);
2316:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2317:       assertEquals(8, Node.FLAG_NO_THROWS);
2318:       assertEquals(55, Node.INFERRED_FUNCTION);
2319:       assertEquals(4095, Node.COLUMN_MASK);
2320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2321:       assertEquals(50, Node.FREE_CALL);
2322:       assertEquals(36, Node.QUOTED_PROP);
2323:       assertEquals(48, Node.DIRECTIVES);
2324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2325:       assertEquals(43, Node.IS_CONSTANT_NAME);
2326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2327:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2329:       assertEquals(1, Node.DECR_FLAG);
2330:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2331:       assertEquals(46, Node.IS_NAMESPACE);
2332:       assertEquals(12, Node.COLUMN_BITS);
2333:       assertEquals(32, Node.INCRDECR_PROP);
2334:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2335:       assertEquals(49, Node.DIRECT_EVAL);
2336:       assertEquals(37, Node.OPT_ARG_NAME);
2337:       assertEquals(54, Node.SLASH_V);
2338:       assertEquals(56, Node.CHANGE_TIME);
2339:       assertEquals(57, Node.REFLECTED_OBJECT);
2340:       assertEquals(40, Node.ORIGINALNAME_PROP);
2341:       assertEquals(53, Node.INPUT_ID);
2342:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2343:       assertEquals(29, Node.JSDOC_INFO_PROP);
2344:       assertEquals(52, Node.LENGTH);
2345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2346:       assertEquals(57, Node.LAST_PROP);
2347:       assertEquals(47, Node.IS_DISPATCHER);
2348:       assertEquals(2, Node.POST_FLAG);
2349:       assertEquals(30, Node.VAR_ARGS_NAME);
2350:       assertEquals(39, Node.EMPTY_BLOCK);
2351:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2352:       assertFalse(node3.equals((Object)node0));
2353:       assertFalse(node3.equals((Object)node2));
2354:       assertFalse(node3.equals((Object)node1));
2355:       assertNotNull(node3);
2356:       
2357:       boolean boolean4 = node1.isRegExp();
2358:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2360:       assertEquals(8, Node.FLAG_NO_THROWS);
2361:       assertEquals(50, Node.FREE_CALL);
2362:       assertEquals(52, Node.LENGTH);
2363:       assertEquals(55, Node.INFERRED_FUNCTION);
2364:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2365:       assertEquals(39, Node.EMPTY_BLOCK);
2366:       assertEquals(57, Node.LAST_PROP);
2367:       assertEquals(43, Node.IS_CONSTANT_NAME);
2368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2369:       assertEquals(30, Node.VAR_ARGS_NAME);
2370:       assertEquals(46, Node.IS_NAMESPACE);
2371:       assertEquals(54, Node.SLASH_V);
2372:       assertEquals(40, Node.ORIGINALNAME_PROP);
2373:       assertEquals(47, Node.IS_DISPATCHER);
2374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2375:       assertEquals(56, Node.CHANGE_TIME);
2376:       assertEquals(29, Node.JSDOC_INFO_PROP);
2377:       assertEquals(2, Node.POST_FLAG);
2378:       assertEquals(12, Node.COLUMN_BITS);
2379:       assertEquals(53, Node.INPUT_ID);
2380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2381:       assertEquals(32, Node.INCRDECR_PROP);
2382:       assertEquals(1, Node.DECR_FLAG);
2383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2384:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2386:       assertEquals(4095, Node.COLUMN_MASK);
2387:       assertEquals(36, Node.QUOTED_PROP);
2388:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2389:       assertEquals(57, Node.REFLECTED_OBJECT);
2390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2391:       assertEquals(37, Node.OPT_ARG_NAME);
2392:       assertEquals(48, Node.DIRECTIVES);
2393:       assertEquals(49, Node.DIRECT_EVAL);
2394:       assertEquals(37, Node.OPT_ARG_NAME);
2395:       assertEquals(2, Node.POST_FLAG);
2396:       assertEquals(32, Node.INCRDECR_PROP);
2397:       assertEquals(56, Node.CHANGE_TIME);
2398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2399:       assertEquals(12, Node.COLUMN_BITS);
2400:       assertEquals(47, Node.IS_DISPATCHER);
2401:       assertEquals(46, Node.IS_NAMESPACE);
2402:       assertEquals(30, Node.VAR_ARGS_NAME);
2403:       assertEquals(49, Node.DIRECT_EVAL);
2404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2405:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2406:       assertEquals(43, Node.IS_CONSTANT_NAME);
2407:       assertEquals(54, Node.SLASH_V);
2408:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2409:       assertEquals(1, Node.DECR_FLAG);
2410:       assertEquals(50, Node.FREE_CALL);
2411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2412:       assertEquals(8, Node.FLAG_NO_THROWS);
2413:       assertEquals(48, Node.DIRECTIVES);
2414:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2415:       assertEquals(4095, Node.COLUMN_MASK);
2416:       assertEquals(40, Node.ORIGINALNAME_PROP);
2417:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2418:       assertEquals(53, Node.INPUT_ID);
2419:       assertEquals(52, Node.LENGTH);
2420:       assertEquals(36, Node.QUOTED_PROP);
2421:       assertEquals(57, Node.REFLECTED_OBJECT);
2422:       assertEquals(57, Node.LAST_PROP);
2423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2426:       assertEquals(39, Node.EMPTY_BLOCK);
2427:       assertEquals(55, Node.INFERRED_FUNCTION);
2428:       assertEquals(29, Node.JSDOC_INFO_PROP);
2429:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2430:       assertFalse(node0.equals((Object)node1));
2431:       assertFalse(node0.equals((Object)node3));
2432:       assertFalse(node1.equals((Object)node3));
2433:       assertFalse(node1.equals((Object)node0));
2434:       assertFalse(node1.equals((Object)node2));
2435:       assertFalse(boolean4 == boolean3);
2436:       assertTrue(boolean4 == boolean1);
2437:       assertTrue(boolean4 == boolean2);
2438:       assertTrue(boolean4 == boolean0);
2439:       assertSame(node0, node2);
2440:       assertNotSame(node1, node3);
2441:       assertFalse(boolean4);
2442:       
2443:       boolean boolean5 = node3.isOnlyModifiesThisCall();
2444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2445:       assertEquals(8, Node.FLAG_NO_THROWS);
2446:       assertEquals(55, Node.INFERRED_FUNCTION);
2447:       assertEquals(4095, Node.COLUMN_MASK);
2448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2449:       assertEquals(50, Node.FREE_CALL);
2450:       assertEquals(36, Node.QUOTED_PROP);
2451:       assertEquals(48, Node.DIRECTIVES);
2452:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2453:       assertEquals(43, Node.IS_CONSTANT_NAME);
2454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2455:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2456:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2457:       assertEquals(1, Node.DECR_FLAG);
2458:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2459:       assertEquals(46, Node.IS_NAMESPACE);
2460:       assertEquals(12, Node.COLUMN_BITS);
2461:       assertEquals(32, Node.INCRDECR_PROP);
2462:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2463:       assertEquals(49, Node.DIRECT_EVAL);
2464:       assertEquals(37, Node.OPT_ARG_NAME);
2465:       assertEquals(54, Node.SLASH_V);
2466:       assertEquals(56, Node.CHANGE_TIME);
2467:       assertEquals(57, Node.REFLECTED_OBJECT);
2468:       assertEquals(40, Node.ORIGINALNAME_PROP);
2469:       assertEquals(53, Node.INPUT_ID);
2470:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2471:       assertEquals(29, Node.JSDOC_INFO_PROP);
2472:       assertEquals(52, Node.LENGTH);
2473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2474:       assertEquals(57, Node.LAST_PROP);
2475:       assertEquals(47, Node.IS_DISPATCHER);
2476:       assertEquals(2, Node.POST_FLAG);
2477:       assertEquals(30, Node.VAR_ARGS_NAME);
2478:       assertEquals(39, Node.EMPTY_BLOCK);
2479:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2480:       assertFalse(node3.equals((Object)node0));
2481:       assertFalse(node3.equals((Object)node2));
2482:       assertFalse(node3.equals((Object)node1));
2483:       assertTrue(boolean5 == boolean1);
2484:       assertTrue(boolean5 == boolean0);
2485:       assertTrue(boolean5 == boolean4);
2486:       assertTrue(boolean5 == boolean2);
2487:       assertFalse(boolean5 == boolean3);
2488:       assertNotSame(node3, node1);
2489:       assertFalse(boolean5);
2490:       
2491:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node3.getJsDocBuilderForNode();
2492:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2493:       assertEquals(8, Node.FLAG_NO_THROWS);
2494:       assertEquals(55, Node.INFERRED_FUNCTION);
2495:       assertEquals(4095, Node.COLUMN_MASK);
2496:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2497:       assertEquals(50, Node.FREE_CALL);
2498:       assertEquals(36, Node.QUOTED_PROP);
2499:       assertEquals(48, Node.DIRECTIVES);
2500:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2501:       assertEquals(43, Node.IS_CONSTANT_NAME);
2502:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2503:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2504:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2505:       assertEquals(1, Node.DECR_FLAG);
2506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2507:       assertEquals(46, Node.IS_NAMESPACE);
2508:       assertEquals(12, Node.COLUMN_BITS);
2509:       assertEquals(32, Node.INCRDECR_PROP);
2510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2511:       assertEquals(49, Node.DIRECT_EVAL);
2512:       assertEquals(37, Node.OPT_ARG_NAME);
2513:       assertEquals(54, Node.SLASH_V);
2514:       assertEquals(56, Node.CHANGE_TIME);
2515:       assertEquals(57, Node.REFLECTED_OBJECT);
2516:       assertEquals(40, Node.ORIGINALNAME_PROP);
2517:       assertEquals(53, Node.INPUT_ID);
2518:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2519:       assertEquals(29, Node.JSDOC_INFO_PROP);
2520:       assertEquals(52, Node.LENGTH);
2521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2522:       assertEquals(57, Node.LAST_PROP);
2523:       assertEquals(47, Node.IS_DISPATCHER);
2524:       assertEquals(2, Node.POST_FLAG);
2525:       assertEquals(30, Node.VAR_ARGS_NAME);
2526:       assertEquals(39, Node.EMPTY_BLOCK);
2527:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2528:       assertFalse(node3.equals((Object)node0));
2529:       assertFalse(node3.equals((Object)node2));
2530:       assertFalse(node3.equals((Object)node1));
2531:       assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
2532:       assertNotNull(node_FileLevelJsDocBuilder1);
2533:       assertNotSame(node3, node1);
2534:       assertNotSame(node_FileLevelJsDocBuilder1, node_FileLevelJsDocBuilder0);
2535:   }
2536: }
RegularFileObject[/tmp/EvoSuite_231_1628159600350/com/google/javascript/rhino/Node_231_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_231_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_231_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_231_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:20.953 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());

boolean boolean0 = node0.isDefaultCase();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(boolean0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());

Node node1 = new Node(42, node0, node0, node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());

boolean boolean1 = node1.isEquivalentToTyped(node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());

Node node2 = node0.srcrefTree(node1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertFalse(node2.isFunction());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertTrue(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());

boolean boolean2 = node1.isCase();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertSame(node0, node2);
assertFalse(boolean2);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node1));
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());

node_FileLevelJsDocBuilder0.append("@OARlm%7gewnZs`H)");
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node1));
assertSame(node0, node2);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());

String string0 = node0.getSourceFileName();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node1));
assertNull(string0);
assertSame(node0, node2);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());

int int0 = node1.getLineno();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertSame(node0, node2);
assertEquals((-1), int0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());

boolean boolean3 = node2.mayMutateArguments();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);
assertSame(node0, node2);
assertSame(node2, node0);
assertTrue(boolean3);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertFalse(node2.isFunction());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertTrue(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());

Iterable<Node> iterable0 = node2.children();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertNotNull(iterable0);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(iterable0.contains(node1));
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertFalse(node2.isFunction());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isComma());

Node node3 = new Node((-476), 10, 56);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);

boolean boolean4 = node1.isRegExp();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertSame(node0, node2);
assertNotSame(node1, node3);
assertFalse(boolean4);

boolean boolean5 = node3.isOnlyModifiesThisCall();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertFalse(boolean5 == boolean3);
assertNotSame(node3, node1);
assertFalse(boolean5);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node3.getJsDocBuilderForNode();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
assertNotNull(node_FileLevelJsDocBuilder1);
assertNotSame(node3, node1);
assertNotSame(node_FileLevelJsDocBuilder1, node_FileLevelJsDocBuilder0);


[MASTER] 10:33:27.015 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_291_1628159606634/com/google/javascript/rhino/Node_291_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_291_1628159606634/com/google/javascript/rhino/Node_291_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:27.015 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:27.016 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:27.016 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2139
[MASTER] 10:33:27.017 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_291_1628159606634/com/google/javascript/rhino/Node_291_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:26 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_291_tmp__ESTest extends Node_291_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("");
21:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
22:       assertEquals(50, Node.FREE_CALL);
23:       assertEquals(40, Node.ORIGINALNAME_PROP);
24:       assertEquals(8, Node.FLAG_NO_THROWS);
25:       assertEquals(39, Node.EMPTY_BLOCK);
26:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
27:       assertEquals(52, Node.LENGTH);
28:       assertEquals(48, Node.DIRECTIVES);
29:       assertEquals(57, Node.REFLECTED_OBJECT);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(49, Node.DIRECT_EVAL);
32:       assertEquals(1, Node.DECR_FLAG);
33:       assertEquals(4095, Node.COLUMN_MASK);
34:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
35:       assertEquals(32, Node.INCRDECR_PROP);
36:       assertEquals(12, Node.COLUMN_BITS);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
40:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
41:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
42:       assertEquals(37, Node.OPT_ARG_NAME);
43:       assertEquals(51, Node.STATIC_SOURCE_FILE);
44:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
45:       assertEquals(46, Node.IS_NAMESPACE);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(30, Node.VAR_ARGS_NAME);
49:       assertEquals(36, Node.QUOTED_PROP);
50:       assertEquals(15, Node.NO_SIDE_EFFECTS);
51:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
52:       assertEquals(55, Node.INFERRED_FUNCTION);
53:       assertEquals(53, Node.INPUT_ID);
54:       assertEquals(47, Node.IS_DISPATCHER);
55:       assertEquals(57, Node.LAST_PROP);
56:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
57:       assertNotNull(node0);
58:       assertFalse(node0.isCall());
59:       assertFalse(node0.isStringKey());
60:       assertFalse(node0.isVar());
61:       assertFalse(node0.isName());
62:       assertFalse(node0.isNew());
63:       assertFalse(node0.isAdd());
64:       assertFalse(node0.isSetterDef());
65:       assertFalse(node0.isParamList());
66:       assertFalse(node0.isNull());
67:       assertFalse(node0.isContinue());
68:       assertFalse(node0.isDo());
69:       assertFalse(node0.isFunction());
70:       assertFalse(node0.isAssignAdd());
71:       assertFalse(node0.isDefaultCase());
72:       assertEquals(0, node0.getChildCount());
73:       assertEquals(40, node0.getType());
74:       assertFalse(node0.isLabel());
75:       assertFalse(node0.isLabelName());
76:       assertFalse(node0.isTry());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isArrayLit());
79:       assertFalse(node0.isNE());
80:       assertFalse(node0.isNumber());
81:       assertFalse(node0.isIf());
82:       assertFalse(node0.isGetterDef());
83:       assertFalse(node0.isCatch());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isWith());
86:       assertEquals((-1), node0.getLineno());
87:       assertFalse(node0.isInstanceOf());
88:       assertFalse(node0.isScript());
89:       assertFalse(node0.isCase());
90:       assertFalse(node0.isThis());
91:       assertTrue(node0.isString());
92:       assertFalse(node0.isRegExp());
93:       assertFalse(node0.isBlock());
94:       assertFalse(node0.isFor());
95:       assertFalse(node0.isHook());
96:       assertFalse(node0.isThrow());
97:       assertFalse(node0.isFalse());
98:       assertFalse(node0.isBreak());
99:       assertEquals((-1), node0.getCharno());
100:       assertFalse(node0.isInc());
101:       assertFalse(node0.isSwitch());
102:       assertFalse(node0.isAnd());
103:       assertFalse(node0.isIn());
104:       assertFalse(node0.isCast());
105:       assertFalse(node0.isDelProp());
106:       assertFalse(node0.isEmpty());
107:       assertFalse(node0.isGetElem());
108:       assertFalse(node0.isTrue());
109:       assertFalse(node0.isDebugger());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isOr());
112:       assertFalse(node0.isNot());
113:       assertEquals((-1), node0.getSourcePosition());
114:       assertFalse(node0.isObjectLit());
115:       assertFalse(node0.isGetProp());
116:       assertFalse(node0.isExprResult());
117:       assertFalse(node0.isComma());
118:       assertFalse(node0.isTypeOf());
119:       assertFalse(node0.isReturn());
120:       assertFalse(node0.isWhile());
121:       assertFalse(node0.isDec());
122:       assertFalse(node0.isAssign());
123:       assertFalse(node0.hasChildren());
124:       
125:       boolean boolean0 = node0.isDefaultCase();
126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
127:       assertEquals(50, Node.FREE_CALL);
128:       assertEquals(40, Node.ORIGINALNAME_PROP);
129:       assertEquals(8, Node.FLAG_NO_THROWS);
130:       assertEquals(39, Node.EMPTY_BLOCK);
131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
132:       assertEquals(52, Node.LENGTH);
133:       assertEquals(48, Node.DIRECTIVES);
134:       assertEquals(57, Node.REFLECTED_OBJECT);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(49, Node.DIRECT_EVAL);
137:       assertEquals(1, Node.DECR_FLAG);
138:       assertEquals(4095, Node.COLUMN_MASK);
139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
140:       assertEquals(32, Node.INCRDECR_PROP);
141:       assertEquals(12, Node.COLUMN_BITS);
142:       assertEquals(29, Node.JSDOC_INFO_PROP);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
147:       assertEquals(37, Node.OPT_ARG_NAME);
148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
150:       assertEquals(46, Node.IS_NAMESPACE);
151:       assertEquals(43, Node.IS_CONSTANT_NAME);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(30, Node.VAR_ARGS_NAME);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(55, Node.INFERRED_FUNCTION);
158:       assertEquals(53, Node.INPUT_ID);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(57, Node.LAST_PROP);
161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
162:       assertFalse(boolean0);
163:       assertFalse(node0.isCall());
164:       assertFalse(node0.isStringKey());
165:       assertFalse(node0.isVar());
166:       assertFalse(node0.isName());
167:       assertFalse(node0.isNew());
168:       assertFalse(node0.isAdd());
169:       assertFalse(node0.isSetterDef());
170:       assertFalse(node0.isParamList());
171:       assertFalse(node0.isNull());
172:       assertFalse(node0.isContinue());
173:       assertFalse(node0.isDo());
174:       assertFalse(node0.isFunction());
175:       assertFalse(node0.isAssignAdd());
176:       assertFalse(node0.isDefaultCase());
177:       assertEquals(0, node0.getChildCount());
178:       assertEquals(40, node0.getType());
179:       assertFalse(node0.isLabel());
180:       assertFalse(node0.isLabelName());
181:       assertFalse(node0.isTry());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isArrayLit());
184:       assertFalse(node0.isNE());
185:       assertFalse(node0.isNumber());
186:       assertFalse(node0.isIf());
187:       assertFalse(node0.isGetterDef());
188:       assertFalse(node0.isCatch());
189:       assertFalse(node0.hasMoreThanOneChild());
190:       assertFalse(node0.isWith());
191:       assertEquals((-1), node0.getLineno());
192:       assertFalse(node0.isInstanceOf());
193:       assertFalse(node0.isScript());
194:       assertFalse(node0.isCase());
195:       assertFalse(node0.isThis());
196:       assertTrue(node0.isString());
197:       assertFalse(node0.isRegExp());
198:       assertFalse(node0.isBlock());
199:       assertFalse(node0.isFor());
200:       assertFalse(node0.isHook());
201:       assertFalse(node0.isThrow());
202:       assertFalse(node0.isFalse());
203:       assertFalse(node0.isBreak());
204:       assertEquals((-1), node0.getCharno());
205:       assertFalse(node0.isInc());
206:       assertFalse(node0.isSwitch());
207:       assertFalse(node0.isAnd());
208:       assertFalse(node0.isIn());
209:       assertFalse(node0.isCast());
210:       assertFalse(node0.isDelProp());
211:       assertFalse(node0.isEmpty());
212:       assertFalse(node0.isGetElem());
213:       assertFalse(node0.isTrue());
214:       assertFalse(node0.isDebugger());
215:       assertFalse(node0.isVoid());
216:       assertFalse(node0.isOr());
217:       assertFalse(node0.isNot());
218:       assertEquals((-1), node0.getSourcePosition());
219:       assertFalse(node0.isObjectLit());
220:       assertFalse(node0.isGetProp());
221:       assertFalse(node0.isExprResult());
222:       assertFalse(node0.isComma());
223:       assertFalse(node0.isTypeOf());
224:       assertFalse(node0.isReturn());
225:       assertFalse(node0.isWhile());
226:       assertFalse(node0.isDec());
227:       assertFalse(node0.isAssign());
228:       assertFalse(node0.hasChildren());
229:       
230:       Node node1 = new Node(42, node0, node0, node0);
231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
232:       assertEquals(50, Node.FREE_CALL);
233:       assertEquals(40, Node.ORIGINALNAME_PROP);
234:       assertEquals(8, Node.FLAG_NO_THROWS);
235:       assertEquals(39, Node.EMPTY_BLOCK);
236:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
237:       assertEquals(52, Node.LENGTH);
238:       assertEquals(48, Node.DIRECTIVES);
239:       assertEquals(57, Node.REFLECTED_OBJECT);
240:       assertEquals(54, Node.SLASH_V);
241:       assertEquals(49, Node.DIRECT_EVAL);
242:       assertEquals(1, Node.DECR_FLAG);
243:       assertEquals(4095, Node.COLUMN_MASK);
244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
245:       assertEquals(32, Node.INCRDECR_PROP);
246:       assertEquals(12, Node.COLUMN_BITS);
247:       assertEquals(29, Node.JSDOC_INFO_PROP);
248:       assertEquals(2, Node.POST_FLAG);
249:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
250:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
251:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
252:       assertEquals(37, Node.OPT_ARG_NAME);
253:       assertEquals(51, Node.STATIC_SOURCE_FILE);
254:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
255:       assertEquals(46, Node.IS_NAMESPACE);
256:       assertEquals(43, Node.IS_CONSTANT_NAME);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(30, Node.VAR_ARGS_NAME);
259:       assertEquals(36, Node.QUOTED_PROP);
260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(55, Node.INFERRED_FUNCTION);
263:       assertEquals(53, Node.INPUT_ID);
264:       assertEquals(47, Node.IS_DISPATCHER);
265:       assertEquals(57, Node.LAST_PROP);
266:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
267:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
268:       assertEquals(43, Node.IS_CONSTANT_NAME);
269:       assertEquals(36, Node.QUOTED_PROP);
270:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
271:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
272:       assertEquals(55, Node.INFERRED_FUNCTION);
273:       assertEquals(29, Node.JSDOC_INFO_PROP);
274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
275:       assertEquals(53, Node.INPUT_ID);
276:       assertEquals(2, Node.POST_FLAG);
277:       assertEquals(47, Node.IS_DISPATCHER);
278:       assertEquals(51, Node.STATIC_SOURCE_FILE);
279:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
280:       assertEquals(46, Node.IS_NAMESPACE);
281:       assertEquals(30, Node.VAR_ARGS_NAME);
282:       assertEquals(40, Node.ORIGINALNAME_PROP);
283:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
284:       assertEquals(52, Node.LENGTH);
285:       assertEquals(57, Node.LAST_PROP);
286:       assertEquals(57, Node.REFLECTED_OBJECT);
287:       assertEquals(54, Node.SLASH_V);
288:       assertEquals(1, Node.DECR_FLAG);
289:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
290:       assertEquals(50, Node.FREE_CALL);
291:       assertEquals(15, Node.NO_SIDE_EFFECTS);
292:       assertEquals(39, Node.EMPTY_BLOCK);
293:       assertEquals(48, Node.DIRECTIVES);
294:       assertEquals(37, Node.OPT_ARG_NAME);
295:       assertEquals(8, Node.FLAG_NO_THROWS);
296:       assertEquals(32, Node.INCRDECR_PROP);
297:       assertEquals(56, Node.CHANGE_TIME);
298:       assertEquals(12, Node.COLUMN_BITS);
299:       assertEquals(49, Node.DIRECT_EVAL);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertFalse(node1.equals((Object)node0));
304:       assertNotNull(node1);
305:       assertFalse(node0.isCall());
306:       assertFalse(node0.isStringKey());
307:       assertFalse(node0.isVar());
308:       assertFalse(node0.isName());
309:       assertFalse(node0.isNew());
310:       assertFalse(node0.isAdd());
311:       assertFalse(node0.isSetterDef());
312:       assertFalse(node0.isParamList());
313:       assertFalse(node0.isNull());
314:       assertFalse(node0.isContinue());
315:       assertFalse(node0.isDo());
316:       assertFalse(node0.isFunction());
317:       assertFalse(node0.isAssignAdd());
318:       assertFalse(node0.isDefaultCase());
319:       assertEquals(0, node0.getChildCount());
320:       assertEquals(40, node0.getType());
321:       assertFalse(node0.isLabel());
322:       assertFalse(node0.isLabelName());
323:       assertFalse(node0.isTry());
324:       assertFalse(node0.hasOneChild());
325:       assertFalse(node0.isArrayLit());
326:       assertFalse(node0.isNE());
327:       assertFalse(node0.isNumber());
328:       assertFalse(node0.isIf());
329:       assertFalse(node0.isGetterDef());
330:       assertFalse(node0.isCatch());
331:       assertFalse(node0.hasMoreThanOneChild());
332:       assertFalse(node0.isWith());
333:       assertEquals((-1), node0.getLineno());
334:       assertFalse(node0.isInstanceOf());
335:       assertFalse(node0.isScript());
336:       assertFalse(node0.isCase());
337:       assertFalse(node0.isThis());
338:       assertTrue(node0.isString());
339:       assertFalse(node0.isRegExp());
340:       assertFalse(node0.isBlock());
341:       assertFalse(node0.isFor());
342:       assertFalse(node0.isHook());
343:       assertFalse(node0.isThrow());
344:       assertFalse(node0.isFalse());
345:       assertFalse(node0.isBreak());
346:       assertEquals((-1), node0.getCharno());
347:       assertFalse(node0.isInc());
348:       assertFalse(node0.isSwitch());
349:       assertFalse(node0.isAnd());
350:       assertFalse(node0.isIn());
351:       assertFalse(node0.isCast());
352:       assertFalse(node0.isDelProp());
353:       assertFalse(node0.isEmpty());
354:       assertFalse(node0.isGetElem());
355:       assertFalse(node0.isTrue());
356:       assertFalse(node0.isDebugger());
357:       assertFalse(node0.isVoid());
358:       assertFalse(node0.isOr());
359:       assertFalse(node0.isNot());
360:       assertEquals((-1), node0.getSourcePosition());
361:       assertFalse(node0.isObjectLit());
362:       assertFalse(node0.isGetProp());
363:       assertFalse(node0.isExprResult());
364:       assertFalse(node0.isComma());
365:       assertFalse(node0.isTypeOf());
366:       assertFalse(node0.isReturn());
367:       assertFalse(node0.isWhile());
368:       assertFalse(node0.isDec());
369:       assertFalse(node0.isAssign());
370:       assertFalse(node0.hasChildren());
371:       assertFalse(node1.isTrue());
372:       assertFalse(node1.isFunction());
373:       assertFalse(node1.isRegExp());
374:       assertFalse(node1.isDefaultCase());
375:       assertFalse(node1.isDebugger());
376:       assertFalse(node1.isEmpty());
377:       assertFalse(node1.isTry());
378:       assertFalse(node1.isNE());
379:       assertFalse(node1.isNull());
380:       assertFalse(node1.isSetterDef());
381:       assertFalse(node1.isIf());
382:       assertFalse(node1.isFor());
383:       assertTrue(node1.hasOneChild());
384:       assertEquals(1, node1.getChildCount());
385:       assertFalse(node1.isCatch());
386:       assertFalse(node1.isCall());
387:       assertTrue(node1.isThis());
388:       assertTrue(node1.hasChildren());
389:       assertFalse(node1.isName());
390:       assertFalse(node1.isDelProp());
391:       assertFalse(node1.isVoid());
392:       assertFalse(node1.isSwitch());
393:       assertFalse(node1.isBlock());
394:       assertEquals((-1), node1.getCharno());
395:       assertFalse(node1.isVar());
396:       assertFalse(node1.isHook());
397:       assertFalse(node1.isDo());
398:       assertFalse(node1.isAssignAdd());
399:       assertFalse(node1.isAdd());
400:       assertFalse(node1.isNew());
401:       assertFalse(node1.isCase());
402:       assertFalse(node1.isNumber());
403:       assertFalse(node1.isParamList());
404:       assertFalse(node1.isLabel());
405:       assertFalse(node1.isGetterDef());
406:       assertFalse(node1.isStringKey());
407:       assertFalse(node1.isLabelName());
408:       assertFalse(node1.isArrayLit());
409:       assertFalse(node1.isScript());
410:       assertFalse(node1.isExprResult());
411:       assertFalse(node1.isNot());
412:       assertFalse(node1.isWith());
413:       assertFalse(node1.isObjectLit());
414:       assertEquals(42, node1.getType());
415:       assertFalse(node1.isGetProp());
416:       assertFalse(node1.isTypeOf());
417:       assertFalse(node1.isAssign());
418:       assertFalse(node1.isOr());
419:       assertFalse(node1.isReturn());
420:       assertFalse(node1.isDec());
421:       assertFalse(node1.isComma());
422:       assertFalse(node1.hasMoreThanOneChild());
423:       assertFalse(node1.isInstanceOf());
424:       assertFalse(node1.isGetElem());
425:       assertFalse(node1.isBreak());
426:       assertEquals((-1), node1.getLineno());
427:       assertFalse(node1.isInc());
428:       assertFalse(node1.isWhile());
429:       assertFalse(node1.isString());
430:       assertFalse(node1.isThrow());
431:       assertFalse(node1.isIn());
432:       assertFalse(node1.isFalse());
433:       assertEquals((-1), node1.getSourcePosition());
434:       assertFalse(node1.isCast());
435:       assertFalse(node1.isContinue());
436:       assertFalse(node1.isAnd());
437:       
438:       boolean boolean1 = node1.isEquivalentToTyped(node0);
439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
440:       assertEquals(50, Node.FREE_CALL);
441:       assertEquals(40, Node.ORIGINALNAME_PROP);
442:       assertEquals(8, Node.FLAG_NO_THROWS);
443:       assertEquals(39, Node.EMPTY_BLOCK);
444:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
445:       assertEquals(52, Node.LENGTH);
446:       assertEquals(48, Node.DIRECTIVES);
447:       assertEquals(57, Node.REFLECTED_OBJECT);
448:       assertEquals(54, Node.SLASH_V);
449:       assertEquals(49, Node.DIRECT_EVAL);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(4095, Node.COLUMN_MASK);
452:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
453:       assertEquals(32, Node.INCRDECR_PROP);
454:       assertEquals(12, Node.COLUMN_BITS);
455:       assertEquals(29, Node.JSDOC_INFO_PROP);
456:       assertEquals(2, Node.POST_FLAG);
457:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
460:       assertEquals(37, Node.OPT_ARG_NAME);
461:       assertEquals(51, Node.STATIC_SOURCE_FILE);
462:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
463:       assertEquals(46, Node.IS_NAMESPACE);
464:       assertEquals(43, Node.IS_CONSTANT_NAME);
465:       assertEquals(56, Node.CHANGE_TIME);
466:       assertEquals(30, Node.VAR_ARGS_NAME);
467:       assertEquals(36, Node.QUOTED_PROP);
468:       assertEquals(15, Node.NO_SIDE_EFFECTS);
469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
470:       assertEquals(55, Node.INFERRED_FUNCTION);
471:       assertEquals(53, Node.INPUT_ID);
472:       assertEquals(47, Node.IS_DISPATCHER);
473:       assertEquals(57, Node.LAST_PROP);
474:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
475:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
476:       assertEquals(43, Node.IS_CONSTANT_NAME);
477:       assertEquals(36, Node.QUOTED_PROP);
478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
480:       assertEquals(55, Node.INFERRED_FUNCTION);
481:       assertEquals(29, Node.JSDOC_INFO_PROP);
482:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
483:       assertEquals(53, Node.INPUT_ID);
484:       assertEquals(2, Node.POST_FLAG);
485:       assertEquals(47, Node.IS_DISPATCHER);
486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
487:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
488:       assertEquals(46, Node.IS_NAMESPACE);
489:       assertEquals(30, Node.VAR_ARGS_NAME);
490:       assertEquals(40, Node.ORIGINALNAME_PROP);
491:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
492:       assertEquals(52, Node.LENGTH);
493:       assertEquals(57, Node.LAST_PROP);
494:       assertEquals(57, Node.REFLECTED_OBJECT);
495:       assertEquals(54, Node.SLASH_V);
496:       assertEquals(1, Node.DECR_FLAG);
497:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
498:       assertEquals(50, Node.FREE_CALL);
499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
500:       assertEquals(39, Node.EMPTY_BLOCK);
501:       assertEquals(48, Node.DIRECTIVES);
502:       assertEquals(37, Node.OPT_ARG_NAME);
503:       assertEquals(8, Node.FLAG_NO_THROWS);
504:       assertEquals(32, Node.INCRDECR_PROP);
505:       assertEquals(56, Node.CHANGE_TIME);
506:       assertEquals(12, Node.COLUMN_BITS);
507:       assertEquals(49, Node.DIRECT_EVAL);
508:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
509:       assertEquals(4095, Node.COLUMN_MASK);
510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
511:       assertFalse(node0.equals((Object)node1));
512:       assertFalse(node1.equals((Object)node0));
513:       assertTrue(boolean1 == boolean0);
514:       assertFalse(boolean1);
515:       assertFalse(node0.isCall());
516:       assertFalse(node0.isStringKey());
517:       assertFalse(node0.isVar());
518:       assertFalse(node0.isName());
519:       assertFalse(node0.isNew());
520:       assertFalse(node0.isAdd());
521:       assertFalse(node0.isSetterDef());
522:       assertFalse(node0.isParamList());
523:       assertFalse(node0.isNull());
524:       assertFalse(node0.isContinue());
525:       assertFalse(node0.isDo());
526:       assertFalse(node0.isFunction());
527:       assertFalse(node0.isAssignAdd());
528:       assertFalse(node0.isDefaultCase());
529:       assertEquals(0, node0.getChildCount());
530:       assertEquals(40, node0.getType());
531:       assertFalse(node0.isLabel());
532:       assertFalse(node0.isLabelName());
533:       assertFalse(node0.isTry());
534:       assertFalse(node0.hasOneChild());
535:       assertFalse(node0.isArrayLit());
536:       assertFalse(node0.isNE());
537:       assertFalse(node0.isNumber());
538:       assertFalse(node0.isIf());
539:       assertFalse(node0.isGetterDef());
540:       assertFalse(node0.isCatch());
541:       assertFalse(node0.hasMoreThanOneChild());
542:       assertFalse(node0.isWith());
543:       assertEquals((-1), node0.getLineno());
544:       assertFalse(node0.isInstanceOf());
545:       assertFalse(node0.isScript());
546:       assertFalse(node0.isCase());
547:       assertFalse(node0.isThis());
548:       assertTrue(node0.isString());
549:       assertFalse(node0.isRegExp());
550:       assertFalse(node0.isBlock());
551:       assertFalse(node0.isFor());
552:       assertFalse(node0.isHook());
553:       assertFalse(node0.isThrow());
554:       assertFalse(node0.isFalse());
555:       assertFalse(node0.isBreak());
556:       assertEquals((-1), node0.getCharno());
557:       assertFalse(node0.isInc());
558:       assertFalse(node0.isSwitch());
559:       assertFalse(node0.isAnd());
560:       assertFalse(node0.isIn());
561:       assertFalse(node0.isCast());
562:       assertFalse(node0.isDelProp());
563:       assertFalse(node0.isEmpty());
564:       assertFalse(node0.isGetElem());
565:       assertFalse(node0.isTrue());
566:       assertFalse(node0.isDebugger());
567:       assertFalse(node0.isVoid());
568:       assertFalse(node0.isOr());
569:       assertFalse(node0.isNot());
570:       assertEquals((-1), node0.getSourcePosition());
571:       assertFalse(node0.isObjectLit());
572:       assertFalse(node0.isGetProp());
573:       assertFalse(node0.isExprResult());
574:       assertFalse(node0.isComma());
575:       assertFalse(node0.isTypeOf());
576:       assertFalse(node0.isReturn());
577:       assertFalse(node0.isWhile());
578:       assertFalse(node0.isDec());
579:       assertFalse(node0.isAssign());
580:       assertFalse(node0.hasChildren());
581:       assertFalse(node1.isTrue());
582:       assertFalse(node1.isFunction());
583:       assertFalse(node1.isRegExp());
584:       assertFalse(node1.isDefaultCase());
585:       assertFalse(node1.isDebugger());
586:       assertFalse(node1.isEmpty());
587:       assertFalse(node1.isTry());
588:       assertFalse(node1.isNE());
589:       assertFalse(node1.isNull());
590:       assertFalse(node1.isSetterDef());
591:       assertFalse(node1.isIf());
592:       assertFalse(node1.isFor());
593:       assertTrue(node1.hasOneChild());
594:       assertEquals(1, node1.getChildCount());
595:       assertFalse(node1.isCatch());
596:       assertFalse(node1.isCall());
597:       assertTrue(node1.isThis());
598:       assertTrue(node1.hasChildren());
599:       assertFalse(node1.isName());
600:       assertFalse(node1.isDelProp());
601:       assertFalse(node1.isVoid());
602:       assertFalse(node1.isSwitch());
603:       assertFalse(node1.isBlock());
604:       assertEquals((-1), node1.getCharno());
605:       assertFalse(node1.isVar());
606:       assertFalse(node1.isHook());
607:       assertFalse(node1.isDo());
608:       assertFalse(node1.isAssignAdd());
609:       assertFalse(node1.isAdd());
610:       assertFalse(node1.isNew());
611:       assertFalse(node1.isCase());
612:       assertFalse(node1.isNumber());
613:       assertFalse(node1.isParamList());
614:       assertFalse(node1.isLabel());
615:       assertFalse(node1.isGetterDef());
616:       assertFalse(node1.isStringKey());
617:       assertFalse(node1.isLabelName());
618:       assertFalse(node1.isArrayLit());
619:       assertFalse(node1.isScript());
620:       assertFalse(node1.isExprResult());
621:       assertFalse(node1.isNot());
622:       assertFalse(node1.isWith());
623:       assertFalse(node1.isObjectLit());
624:       assertEquals(42, node1.getType());
625:       assertFalse(node1.isGetProp());
626:       assertFalse(node1.isTypeOf());
627:       assertFalse(node1.isAssign());
628:       assertFalse(node1.isOr());
629:       assertFalse(node1.isReturn());
630:       assertFalse(node1.isDec());
631:       assertFalse(node1.isComma());
632:       assertFalse(node1.hasMoreThanOneChild());
633:       assertFalse(node1.isInstanceOf());
634:       assertFalse(node1.isGetElem());
635:       assertFalse(node1.isBreak());
636:       assertEquals((-1), node1.getLineno());
637:       assertFalse(node1.isInc());
638:       assertFalse(node1.isWhile());
639:       assertFalse(node1.isString());
640:       assertFalse(node1.isThrow());
641:       assertFalse(node1.isIn());
642:       assertFalse(node1.isFalse());
643:       assertEquals((-1), node1.getSourcePosition());
644:       assertFalse(node1.isCast());
645:       assertFalse(node1.isContinue());
646:       assertFalse(node1.isAnd());
647:       
648:       Node node2 = node0.srcrefTree(node1);
649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
650:       assertEquals(50, Node.FREE_CALL);
651:       assertEquals(40, Node.ORIGINALNAME_PROP);
652:       assertEquals(8, Node.FLAG_NO_THROWS);
653:       assertEquals(39, Node.EMPTY_BLOCK);
654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
655:       assertEquals(52, Node.LENGTH);
656:       assertEquals(48, Node.DIRECTIVES);
657:       assertEquals(57, Node.REFLECTED_OBJECT);
658:       assertEquals(54, Node.SLASH_V);
659:       assertEquals(49, Node.DIRECT_EVAL);
660:       assertEquals(1, Node.DECR_FLAG);
661:       assertEquals(4095, Node.COLUMN_MASK);
662:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
663:       assertEquals(32, Node.INCRDECR_PROP);
664:       assertEquals(12, Node.COLUMN_BITS);
665:       assertEquals(29, Node.JSDOC_INFO_PROP);
666:       assertEquals(2, Node.POST_FLAG);
667:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
668:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
669:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
670:       assertEquals(37, Node.OPT_ARG_NAME);
671:       assertEquals(51, Node.STATIC_SOURCE_FILE);
672:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
673:       assertEquals(46, Node.IS_NAMESPACE);
674:       assertEquals(43, Node.IS_CONSTANT_NAME);
675:       assertEquals(56, Node.CHANGE_TIME);
676:       assertEquals(30, Node.VAR_ARGS_NAME);
677:       assertEquals(36, Node.QUOTED_PROP);
678:       assertEquals(15, Node.NO_SIDE_EFFECTS);
679:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
680:       assertEquals(55, Node.INFERRED_FUNCTION);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(47, Node.IS_DISPATCHER);
683:       assertEquals(57, Node.LAST_PROP);
684:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
685:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
686:       assertEquals(43, Node.IS_CONSTANT_NAME);
687:       assertEquals(36, Node.QUOTED_PROP);
688:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
689:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
690:       assertEquals(55, Node.INFERRED_FUNCTION);
691:       assertEquals(29, Node.JSDOC_INFO_PROP);
692:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
693:       assertEquals(53, Node.INPUT_ID);
694:       assertEquals(2, Node.POST_FLAG);
695:       assertEquals(47, Node.IS_DISPATCHER);
696:       assertEquals(51, Node.STATIC_SOURCE_FILE);
697:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
698:       assertEquals(46, Node.IS_NAMESPACE);
699:       assertEquals(30, Node.VAR_ARGS_NAME);
700:       assertEquals(40, Node.ORIGINALNAME_PROP);
701:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
702:       assertEquals(52, Node.LENGTH);
703:       assertEquals(57, Node.LAST_PROP);
704:       assertEquals(57, Node.REFLECTED_OBJECT);
705:       assertEquals(54, Node.SLASH_V);
706:       assertEquals(1, Node.DECR_FLAG);
707:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
708:       assertEquals(50, Node.FREE_CALL);
709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
710:       assertEquals(39, Node.EMPTY_BLOCK);
711:       assertEquals(48, Node.DIRECTIVES);
712:       assertEquals(37, Node.OPT_ARG_NAME);
713:       assertEquals(8, Node.FLAG_NO_THROWS);
714:       assertEquals(32, Node.INCRDECR_PROP);
715:       assertEquals(56, Node.CHANGE_TIME);
716:       assertEquals(12, Node.COLUMN_BITS);
717:       assertEquals(49, Node.DIRECT_EVAL);
718:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
719:       assertEquals(4095, Node.COLUMN_MASK);
720:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
721:       assertEquals(48, Node.DIRECTIVES);
722:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
723:       assertEquals(39, Node.EMPTY_BLOCK);
724:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
725:       assertEquals(50, Node.FREE_CALL);
726:       assertEquals(4095, Node.COLUMN_MASK);
727:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
728:       assertEquals(8, Node.FLAG_NO_THROWS);
729:       assertEquals(40, Node.ORIGINALNAME_PROP);
730:       assertEquals(57, Node.REFLECTED_OBJECT);
731:       assertEquals(43, Node.IS_CONSTANT_NAME);
732:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
733:       assertEquals(36, Node.QUOTED_PROP);
734:       assertEquals(53, Node.INPUT_ID);
735:       assertEquals(15, Node.NO_SIDE_EFFECTS);
736:       assertEquals(30, Node.VAR_ARGS_NAME);
737:       assertEquals(52, Node.LENGTH);
738:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
739:       assertEquals(55, Node.INFERRED_FUNCTION);
740:       assertEquals(29, Node.JSDOC_INFO_PROP);
741:       assertEquals(57, Node.LAST_PROP);
742:       assertEquals(37, Node.OPT_ARG_NAME);
743:       assertEquals(2, Node.POST_FLAG);
744:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
745:       assertEquals(47, Node.IS_DISPATCHER);
746:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(56, Node.CHANGE_TIME);
750:       assertEquals(49, Node.DIRECT_EVAL);
751:       assertEquals(54, Node.SLASH_V);
752:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
753:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
754:       assertEquals(1, Node.DECR_FLAG);
755:       assertEquals(12, Node.COLUMN_BITS);
756:       assertEquals(32, Node.INCRDECR_PROP);
757:       assertFalse(node0.equals((Object)node1));
758:       assertFalse(node1.equals((Object)node0));
759:       assertFalse(node2.equals((Object)node1));
760:       assertNotNull(node2);
761:       assertSame(node0, node2);
762:       assertSame(node2, node0);
763:       assertFalse(node0.isCall());
764:       assertFalse(node0.isStringKey());
765:       assertFalse(node0.isVar());
766:       assertFalse(node0.isName());
767:       assertFalse(node0.isNew());
768:       assertFalse(node0.isAdd());
769:       assertFalse(node0.isSetterDef());
770:       assertFalse(node0.isParamList());
771:       assertFalse(node0.isNull());
772:       assertFalse(node0.isContinue());
773:       assertFalse(node0.isDo());
774:       assertFalse(node0.isFunction());
775:       assertFalse(node0.isAssignAdd());
776:       assertFalse(node0.isDefaultCase());
777:       assertEquals(0, node0.getChildCount());
778:       assertEquals(40, node0.getType());
779:       assertFalse(node0.isLabel());
780:       assertFalse(node0.isLabelName());
781:       assertFalse(node0.isTry());
782:       assertFalse(node0.hasOneChild());
783:       assertFalse(node0.isArrayLit());
784:       assertFalse(node0.isNE());
785:       assertFalse(node0.isNumber());
786:       assertFalse(node0.isIf());
787:       assertFalse(node0.isGetterDef());
788:       assertFalse(node0.isCatch());
789:       assertFalse(node0.hasMoreThanOneChild());
790:       assertFalse(node0.isWith());
791:       assertEquals((-1), node0.getLineno());
792:       assertFalse(node0.isInstanceOf());
793:       assertFalse(node0.isScript());
794:       assertFalse(node0.isCase());
795:       assertFalse(node0.isThis());
796:       assertTrue(node0.isString());
797:       assertFalse(node0.isRegExp());
798:       assertFalse(node0.isBlock());
799:       assertFalse(node0.isFor());
800:       assertFalse(node0.isHook());
801:       assertFalse(node0.isThrow());
802:       assertFalse(node0.isFalse());
803:       assertFalse(node0.isBreak());
804:       assertEquals((-1), node0.getCharno());
805:       assertFalse(node0.isInc());
806:       assertFalse(node0.isSwitch());
807:       assertFalse(node0.isAnd());
808:       assertFalse(node0.isIn());
809:       assertFalse(node0.isCast());
810:       assertFalse(node0.isDelProp());
811:       assertFalse(node0.isEmpty());
812:       assertFalse(node0.isGetElem());
813:       assertFalse(node0.isTrue());
814:       assertFalse(node0.isDebugger());
815:       assertFalse(node0.isVoid());
816:       assertFalse(node0.isOr());
817:       assertFalse(node0.isNot());
818:       assertEquals((-1), node0.getSourcePosition());
819:       assertFalse(node0.isObjectLit());
820:       assertFalse(node0.isGetProp());
821:       assertFalse(node0.isExprResult());
822:       assertFalse(node0.isComma());
823:       assertFalse(node0.isTypeOf());
824:       assertFalse(node0.isReturn());
825:       assertFalse(node0.isWhile());
826:       assertFalse(node0.isDec());
827:       assertFalse(node0.isAssign());
828:       assertFalse(node0.hasChildren());
829:       assertFalse(node1.isTrue());
830:       assertFalse(node1.isFunction());
831:       assertFalse(node1.isRegExp());
832:       assertFalse(node1.isDefaultCase());
833:       assertFalse(node1.isDebugger());
834:       assertFalse(node1.isEmpty());
835:       assertFalse(node1.isTry());
836:       assertFalse(node1.isNE());
837:       assertFalse(node1.isNull());
838:       assertFalse(node1.isSetterDef());
839:       assertFalse(node1.isIf());
840:       assertFalse(node1.isFor());
841:       assertTrue(node1.hasOneChild());
842:       assertEquals(1, node1.getChildCount());
843:       assertFalse(node1.isCatch());
844:       assertFalse(node1.isCall());
845:       assertTrue(node1.isThis());
846:       assertTrue(node1.hasChildren());
847:       assertFalse(node1.isName());
848:       assertFalse(node1.isDelProp());
849:       assertFalse(node1.isVoid());
850:       assertFalse(node1.isSwitch());
851:       assertFalse(node1.isBlock());
852:       assertEquals((-1), node1.getCharno());
853:       assertFalse(node1.isVar());
854:       assertFalse(node1.isHook());
855:       assertFalse(node1.isDo());
856:       assertFalse(node1.isAssignAdd());
857:       assertFalse(node1.isAdd());
858:       assertFalse(node1.isNew());
859:       assertFalse(node1.isCase());
860:       assertFalse(node1.isNumber());
861:       assertFalse(node1.isParamList());
862:       assertFalse(node1.isLabel());
863:       assertFalse(node1.isGetterDef());
864:       assertFalse(node1.isStringKey());
865:       assertFalse(node1.isLabelName());
866:       assertFalse(node1.isArrayLit());
867:       assertFalse(node1.isScript());
868:       assertFalse(node1.isExprResult());
869:       assertFalse(node1.isNot());
870:       assertFalse(node1.isWith());
871:       assertFalse(node1.isObjectLit());
872:       assertEquals(42, node1.getType());
873:       assertFalse(node1.isGetProp());
874:       assertFalse(node1.isTypeOf());
875:       assertFalse(node1.isAssign());
876:       assertFalse(node1.isOr());
877:       assertFalse(node1.isReturn());
878:       assertFalse(node1.isDec());
879:       assertFalse(node1.isComma());
880:       assertFalse(node1.hasMoreThanOneChild());
881:       assertFalse(node1.isInstanceOf());
882:       assertFalse(node1.isGetElem());
883:       assertFalse(node1.isBreak());
884:       assertEquals((-1), node1.getLineno());
885:       assertFalse(node1.isInc());
886:       assertFalse(node1.isWhile());
887:       assertFalse(node1.isString());
888:       assertFalse(node1.isThrow());
889:       assertFalse(node1.isIn());
890:       assertFalse(node1.isFalse());
891:       assertEquals((-1), node1.getSourcePosition());
892:       assertFalse(node1.isCast());
893:       assertFalse(node1.isContinue());
894:       assertFalse(node1.isAnd());
895:       assertFalse(node2.isBreak());
896:       assertFalse(node2.isComma());
897:       assertFalse(node2.isFalse());
898:       assertFalse(node2.isGetProp());
899:       assertFalse(node2.isObjectLit());
900:       assertEquals((-1), node2.getCharno());
901:       assertFalse(node2.isAnd());
902:       assertFalse(node2.isWith());
903:       assertFalse(node2.isNot());
904:       assertFalse(node2.isCase());
905:       assertFalse(node2.isExprResult());
906:       assertFalse(node2.isScript());
907:       assertFalse(node2.hasOneChild());
908:       assertFalse(node2.isHook());
909:       assertFalse(node2.isInstanceOf());
910:       assertFalse(node2.isThis());
911:       assertEquals((-1), node2.getSourcePosition());
912:       assertFalse(node2.isIf());
913:       assertFalse(node2.isCast());
914:       assertFalse(node2.isIn());
915:       assertEquals((-1), node2.getLineno());
916:       assertFalse(node2.isDebugger());
917:       assertFalse(node2.isNE());
918:       assertFalse(node2.isFunction());
919:       assertFalse(node2.isContinue());
920:       assertFalse(node2.isInc());
921:       assertEquals(40, node2.getType());
922:       assertFalse(node2.isThrow());
923:       assertFalse(node2.isNull());
924:       assertFalse(node2.isCall());
925:       assertFalse(node2.isSetterDef());
926:       assertFalse(node2.isStringKey());
927:       assertFalse(node2.isName());
928:       assertFalse(node2.isParamList());
929:       assertFalse(node2.isVoid());
930:       assertFalse(node2.isRegExp());
931:       assertFalse(node2.isCatch());
932:       assertFalse(node2.hasMoreThanOneChild());
933:       assertFalse(node2.isTry());
934:       assertFalse(node2.isBlock());
935:       assertTrue(node2.isString());
936:       assertFalse(node2.isReturn());
937:       assertFalse(node2.isWhile());
938:       assertFalse(node2.isFor());
939:       assertFalse(node2.isDec());
940:       assertFalse(node2.isTypeOf());
941:       assertFalse(node2.isNumber());
942:       assertFalse(node2.hasChildren());
943:       assertFalse(node2.isAssign());
944:       assertFalse(node2.isLabelName());
945:       assertFalse(node2.isDelProp());
946:       assertFalse(node2.isGetterDef());
947:       assertFalse(node2.isGetElem());
948:       assertFalse(node2.isEmpty());
949:       assertFalse(node2.isArrayLit());
950:       assertFalse(node2.isOr());
951:       assertFalse(node2.isTrue());
952:       assertFalse(node2.isDefaultCase());
953:       assertFalse(node2.isSwitch());
954:       assertFalse(node2.isDo());
955:       assertFalse(node2.isNew());
956:       assertFalse(node2.isAdd());
957:       assertEquals(0, node2.getChildCount());
958:       assertFalse(node2.isLabel());
959:       assertFalse(node2.isAssignAdd());
960:       assertFalse(node2.isVar());
961:       
962:       boolean boolean2 = node1.isCase();
963:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
964:       assertEquals(50, Node.FREE_CALL);
965:       assertEquals(40, Node.ORIGINALNAME_PROP);
966:       assertEquals(8, Node.FLAG_NO_THROWS);
967:       assertEquals(39, Node.EMPTY_BLOCK);
968:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
969:       assertEquals(52, Node.LENGTH);
970:       assertEquals(48, Node.DIRECTIVES);
971:       assertEquals(57, Node.REFLECTED_OBJECT);
972:       assertEquals(54, Node.SLASH_V);
973:       assertEquals(49, Node.DIRECT_EVAL);
974:       assertEquals(1, Node.DECR_FLAG);
975:       assertEquals(4095, Node.COLUMN_MASK);
976:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
977:       assertEquals(32, Node.INCRDECR_PROP);
978:       assertEquals(12, Node.COLUMN_BITS);
979:       assertEquals(29, Node.JSDOC_INFO_PROP);
980:       assertEquals(2, Node.POST_FLAG);
981:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
982:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
983:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
984:       assertEquals(37, Node.OPT_ARG_NAME);
985:       assertEquals(51, Node.STATIC_SOURCE_FILE);
986:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
987:       assertEquals(46, Node.IS_NAMESPACE);
988:       assertEquals(43, Node.IS_CONSTANT_NAME);
989:       assertEquals(56, Node.CHANGE_TIME);
990:       assertEquals(30, Node.VAR_ARGS_NAME);
991:       assertEquals(36, Node.QUOTED_PROP);
992:       assertEquals(15, Node.NO_SIDE_EFFECTS);
993:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
994:       assertEquals(55, Node.INFERRED_FUNCTION);
995:       assertEquals(53, Node.INPUT_ID);
996:       assertEquals(47, Node.IS_DISPATCHER);
997:       assertEquals(57, Node.LAST_PROP);
998:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
999:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1000:       assertEquals(43, Node.IS_CONSTANT_NAME);
1001:       assertEquals(36, Node.QUOTED_PROP);
1002:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1003:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1004:       assertEquals(55, Node.INFERRED_FUNCTION);
1005:       assertEquals(29, Node.JSDOC_INFO_PROP);
1006:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1007:       assertEquals(53, Node.INPUT_ID);
1008:       assertEquals(2, Node.POST_FLAG);
1009:       assertEquals(47, Node.IS_DISPATCHER);
1010:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1011:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1012:       assertEquals(46, Node.IS_NAMESPACE);
1013:       assertEquals(30, Node.VAR_ARGS_NAME);
1014:       assertEquals(40, Node.ORIGINALNAME_PROP);
1015:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1016:       assertEquals(52, Node.LENGTH);
1017:       assertEquals(57, Node.LAST_PROP);
1018:       assertEquals(57, Node.REFLECTED_OBJECT);
1019:       assertEquals(54, Node.SLASH_V);
1020:       assertEquals(1, Node.DECR_FLAG);
1021:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1022:       assertEquals(50, Node.FREE_CALL);
1023:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1024:       assertEquals(39, Node.EMPTY_BLOCK);
1025:       assertEquals(48, Node.DIRECTIVES);
1026:       assertEquals(37, Node.OPT_ARG_NAME);
1027:       assertEquals(8, Node.FLAG_NO_THROWS);
1028:       assertEquals(32, Node.INCRDECR_PROP);
1029:       assertEquals(56, Node.CHANGE_TIME);
1030:       assertEquals(12, Node.COLUMN_BITS);
1031:       assertEquals(49, Node.DIRECT_EVAL);
1032:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1033:       assertEquals(4095, Node.COLUMN_MASK);
1034:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1035:       assertFalse(node0.equals((Object)node1));
1036:       assertFalse(node1.equals((Object)node0));
1037:       assertFalse(node1.equals((Object)node2));
1038:       assertTrue(boolean2 == boolean0);
1039:       assertTrue(boolean2 == boolean1);
1040:       assertSame(node0, node2);
1041:       assertFalse(boolean2);
1042:       assertFalse(node0.isCall());
1043:       assertFalse(node0.isStringKey());
1044:       assertFalse(node0.isVar());
1045:       assertFalse(node0.isName());
1046:       assertFalse(node0.isNew());
1047:       assertFalse(node0.isAdd());
1048:       assertFalse(node0.isSetterDef());
1049:       assertFalse(node0.isParamList());
1050:       assertFalse(node0.isNull());
1051:       assertFalse(node0.isContinue());
1052:       assertFalse(node0.isDo());
1053:       assertFalse(node0.isFunction());
1054:       assertFalse(node0.isAssignAdd());
1055:       assertFalse(node0.isDefaultCase());
1056:       assertEquals(0, node0.getChildCount());
1057:       assertEquals(40, node0.getType());
1058:       assertFalse(node0.isLabel());
1059:       assertFalse(node0.isLabelName());
1060:       assertFalse(node0.isTry());
1061:       assertFalse(node0.hasOneChild());
1062:       assertFalse(node0.isArrayLit());
1063:       assertFalse(node0.isNE());
1064:       assertFalse(node0.isNumber());
1065:       assertFalse(node0.isIf());
1066:       assertFalse(node0.isGetterDef());
1067:       assertFalse(node0.isCatch());
1068:       assertFalse(node0.hasMoreThanOneChild());
1069:       assertFalse(node0.isWith());
1070:       assertEquals((-1), node0.getLineno());
1071:       assertFalse(node0.isInstanceOf());
1072:       assertFalse(node0.isScript());
1073:       assertFalse(node0.isCase());
1074:       assertFalse(node0.isThis());
1075:       assertTrue(node0.isString());
1076:       assertFalse(node0.isRegExp());
1077:       assertFalse(node0.isBlock());
1078:       assertFalse(node0.isFor());
1079:       assertFalse(node0.isHook());
1080:       assertFalse(node0.isThrow());
1081:       assertFalse(node0.isFalse());
1082:       assertFalse(node0.isBreak());
1083:       assertEquals((-1), node0.getCharno());
1084:       assertFalse(node0.isInc());
1085:       assertFalse(node0.isSwitch());
1086:       assertFalse(node0.isAnd());
1087:       assertFalse(node0.isIn());
1088:       assertFalse(node0.isCast());
1089:       assertFalse(node0.isDelProp());
1090:       assertFalse(node0.isEmpty());
1091:       assertFalse(node0.isGetElem());
1092:       assertFalse(node0.isTrue());
1093:       assertFalse(node0.isDebugger());
1094:       assertFalse(node0.isVoid());
1095:       assertFalse(node0.isOr());
1096:       assertFalse(node0.isNot());
1097:       assertEquals((-1), node0.getSourcePosition());
1098:       assertFalse(node0.isObjectLit());
1099:       assertFalse(node0.isGetProp());
1100:       assertFalse(node0.isExprResult());
1101:       assertFalse(node0.isComma());
1102:       assertFalse(node0.isTypeOf());
1103:       assertFalse(node0.isReturn());
1104:       assertFalse(node0.isWhile());
1105:       assertFalse(node0.isDec());
1106:       assertFalse(node0.isAssign());
1107:       assertFalse(node0.hasChildren());
1108:       assertFalse(node1.isTrue());
1109:       assertFalse(node1.isFunction());
1110:       assertFalse(node1.isRegExp());
1111:       assertFalse(node1.isDefaultCase());
1112:       assertFalse(node1.isDebugger());
1113:       assertFalse(node1.isEmpty());
1114:       assertFalse(node1.isTry());
1115:       assertFalse(node1.isNE());
1116:       assertFalse(node1.isNull());
1117:       assertFalse(node1.isSetterDef());
1118:       assertFalse(node1.isIf());
1119:       assertFalse(node1.isFor());
1120:       assertTrue(node1.hasOneChild());
1121:       assertEquals(1, node1.getChildCount());
1122:       assertFalse(node1.isCatch());
1123:       assertFalse(node1.isCall());
1124:       assertTrue(node1.isThis());
1125:       assertTrue(node1.hasChildren());
1126:       assertFalse(node1.isName());
1127:       assertFalse(node1.isDelProp());
1128:       assertFalse(node1.isVoid());
1129:       assertFalse(node1.isSwitch());
1130:       assertFalse(node1.isBlock());
1131:       assertEquals((-1), node1.getCharno());
1132:       assertFalse(node1.isVar());
1133:       assertFalse(node1.isHook());
1134:       assertFalse(node1.isDo());
1135:       assertFalse(node1.isAssignAdd());
1136:       assertFalse(node1.isAdd());
1137:       assertFalse(node1.isNew());
1138:       assertFalse(node1.isCase());
1139:       assertFalse(node1.isNumber());
1140:       assertFalse(node1.isParamList());
1141:       assertFalse(node1.isLabel());
1142:       assertFalse(node1.isGetterDef());
1143:       assertFalse(node1.isStringKey());
1144:       assertFalse(node1.isLabelName());
1145:       assertFalse(node1.isArrayLit());
1146:       assertFalse(node1.isScript());
1147:       assertFalse(node1.isExprResult());
1148:       assertFalse(node1.isNot());
1149:       assertFalse(node1.isWith());
1150:       assertFalse(node1.isObjectLit());
1151:       assertEquals(42, node1.getType());
1152:       assertFalse(node1.isGetProp());
1153:       assertFalse(node1.isTypeOf());
1154:       assertFalse(node1.isAssign());
1155:       assertFalse(node1.isOr());
1156:       assertFalse(node1.isReturn());
1157:       assertFalse(node1.isDec());
1158:       assertFalse(node1.isComma());
1159:       assertFalse(node1.hasMoreThanOneChild());
1160:       assertFalse(node1.isInstanceOf());
1161:       assertFalse(node1.isGetElem());
1162:       assertFalse(node1.isBreak());
1163:       assertEquals((-1), node1.getLineno());
1164:       assertFalse(node1.isInc());
1165:       assertFalse(node1.isWhile());
1166:       assertFalse(node1.isString());
1167:       assertFalse(node1.isThrow());
1168:       assertFalse(node1.isIn());
1169:       assertFalse(node1.isFalse());
1170:       assertEquals((-1), node1.getSourcePosition());
1171:       assertFalse(node1.isCast());
1172:       assertFalse(node1.isContinue());
1173:       assertFalse(node1.isAnd());
1174:       
1175:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
1176:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1177:       assertEquals(50, Node.FREE_CALL);
1178:       assertEquals(40, Node.ORIGINALNAME_PROP);
1179:       assertEquals(8, Node.FLAG_NO_THROWS);
1180:       assertEquals(39, Node.EMPTY_BLOCK);
1181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1182:       assertEquals(52, Node.LENGTH);
1183:       assertEquals(48, Node.DIRECTIVES);
1184:       assertEquals(57, Node.REFLECTED_OBJECT);
1185:       assertEquals(54, Node.SLASH_V);
1186:       assertEquals(49, Node.DIRECT_EVAL);
1187:       assertEquals(1, Node.DECR_FLAG);
1188:       assertEquals(4095, Node.COLUMN_MASK);
1189:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1190:       assertEquals(32, Node.INCRDECR_PROP);
1191:       assertEquals(12, Node.COLUMN_BITS);
1192:       assertEquals(29, Node.JSDOC_INFO_PROP);
1193:       assertEquals(2, Node.POST_FLAG);
1194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1195:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1197:       assertEquals(37, Node.OPT_ARG_NAME);
1198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1199:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1200:       assertEquals(46, Node.IS_NAMESPACE);
1201:       assertEquals(43, Node.IS_CONSTANT_NAME);
1202:       assertEquals(56, Node.CHANGE_TIME);
1203:       assertEquals(30, Node.VAR_ARGS_NAME);
1204:       assertEquals(36, Node.QUOTED_PROP);
1205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1206:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1207:       assertEquals(55, Node.INFERRED_FUNCTION);
1208:       assertEquals(53, Node.INPUT_ID);
1209:       assertEquals(47, Node.IS_DISPATCHER);
1210:       assertEquals(57, Node.LAST_PROP);
1211:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1212:       assertFalse(node0.equals((Object)node1));
1213:       assertNotNull(node_FileLevelJsDocBuilder0);
1214:       assertFalse(node0.isCall());
1215:       assertFalse(node0.isStringKey());
1216:       assertFalse(node0.isVar());
1217:       assertFalse(node0.isName());
1218:       assertFalse(node0.isNew());
1219:       assertFalse(node0.isAdd());
1220:       assertFalse(node0.isSetterDef());
1221:       assertFalse(node0.isParamList());
1222:       assertFalse(node0.isNull());
1223:       assertFalse(node0.isContinue());
1224:       assertFalse(node0.isDo());
1225:       assertFalse(node0.isFunction());
1226:       assertFalse(node0.isAssignAdd());
1227:       assertFalse(node0.isDefaultCase());
1228:       assertEquals(0, node0.getChildCount());
1229:       assertEquals(40, node0.getType());
1230:       assertFalse(node0.isLabel());
1231:       assertFalse(node0.isLabelName());
1232:       assertFalse(node0.isTry());
1233:       assertFalse(node0.hasOneChild());
1234:       assertFalse(node0.isArrayLit());
1235:       assertFalse(node0.isNE());
1236:       assertFalse(node0.isNumber());
1237:       assertFalse(node0.isIf());
1238:       assertFalse(node0.isGetterDef());
1239:       assertFalse(node0.isCatch());
1240:       assertFalse(node0.hasMoreThanOneChild());
1241:       assertFalse(node0.isWith());
1242:       assertEquals((-1), node0.getLineno());
1243:       assertFalse(node0.isInstanceOf());
1244:       assertFalse(node0.isScript());
1245:       assertFalse(node0.isCase());
1246:       assertFalse(node0.isThis());
1247:       assertTrue(node0.isString());
1248:       assertFalse(node0.isRegExp());
1249:       assertFalse(node0.isBlock());
1250:       assertFalse(node0.isFor());
1251:       assertFalse(node0.isHook());
1252:       assertFalse(node0.isThrow());
1253:       assertFalse(node0.isFalse());
1254:       assertFalse(node0.isBreak());
1255:       assertEquals((-1), node0.getCharno());
1256:       assertFalse(node0.isInc());
1257:       assertFalse(node0.isSwitch());
1258:       assertFalse(node0.isAnd());
1259:       assertFalse(node0.isIn());
1260:       assertFalse(node0.isCast());
1261:       assertFalse(node0.isDelProp());
1262:       assertFalse(node0.isEmpty());
1263:       assertFalse(node0.isGetElem());
1264:       assertFalse(node0.isTrue());
1265:       assertFalse(node0.isDebugger());
1266:       assertFalse(node0.isVoid());
1267:       assertFalse(node0.isOr());
1268:       assertFalse(node0.isNot());
1269:       assertEquals((-1), node0.getSourcePosition());
1270:       assertFalse(node0.isObjectLit());
1271:       assertFalse(node0.isGetProp());
1272:       assertFalse(node0.isExprResult());
1273:       assertFalse(node0.isComma());
1274:       assertFalse(node0.isTypeOf());
1275:       assertFalse(node0.isReturn());
1276:       assertFalse(node0.isWhile());
1277:       assertFalse(node0.isDec());
1278:       assertFalse(node0.isAssign());
1279:       assertFalse(node0.hasChildren());
1280:       
1281:       node_FileLevelJsDocBuilder0.append("@OARlm%7gewnZs`H)");
1282:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1283:       assertEquals(50, Node.FREE_CALL);
1284:       assertEquals(40, Node.ORIGINALNAME_PROP);
1285:       assertEquals(8, Node.FLAG_NO_THROWS);
1286:       assertEquals(39, Node.EMPTY_BLOCK);
1287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1288:       assertEquals(52, Node.LENGTH);
1289:       assertEquals(48, Node.DIRECTIVES);
1290:       assertEquals(57, Node.REFLECTED_OBJECT);
1291:       assertEquals(54, Node.SLASH_V);
1292:       assertEquals(49, Node.DIRECT_EVAL);
1293:       assertEquals(1, Node.DECR_FLAG);
1294:       assertEquals(4095, Node.COLUMN_MASK);
1295:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1296:       assertEquals(32, Node.INCRDECR_PROP);
1297:       assertEquals(12, Node.COLUMN_BITS);
1298:       assertEquals(29, Node.JSDOC_INFO_PROP);
1299:       assertEquals(2, Node.POST_FLAG);
1300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1303:       assertEquals(37, Node.OPT_ARG_NAME);
1304:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1305:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1306:       assertEquals(46, Node.IS_NAMESPACE);
1307:       assertEquals(43, Node.IS_CONSTANT_NAME);
1308:       assertEquals(56, Node.CHANGE_TIME);
1309:       assertEquals(30, Node.VAR_ARGS_NAME);
1310:       assertEquals(36, Node.QUOTED_PROP);
1311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1312:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1313:       assertEquals(55, Node.INFERRED_FUNCTION);
1314:       assertEquals(53, Node.INPUT_ID);
1315:       assertEquals(47, Node.IS_DISPATCHER);
1316:       assertEquals(57, Node.LAST_PROP);
1317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1318:       assertFalse(node0.equals((Object)node1));
1319:       assertSame(node0, node2);
1320:       assertFalse(node0.isCall());
1321:       assertFalse(node0.isStringKey());
1322:       assertFalse(node0.isVar());
1323:       assertFalse(node0.isName());
1324:       assertFalse(node0.isNew());
1325:       assertFalse(node0.isAdd());
1326:       assertFalse(node0.isSetterDef());
1327:       assertFalse(node0.isParamList());
1328:       assertFalse(node0.isNull());
1329:       assertFalse(node0.isContinue());
1330:       assertFalse(node0.isDo());
1331:       assertFalse(node0.isFunction());
1332:       assertFalse(node0.isAssignAdd());
1333:       assertFalse(node0.isDefaultCase());
1334:       assertEquals(0, node0.getChildCount());
1335:       assertEquals(40, node0.getType());
1336:       assertFalse(node0.isLabel());
1337:       assertFalse(node0.isLabelName());
1338:       assertFalse(node0.isTry());
1339:       assertFalse(node0.hasOneChild());
1340:       assertFalse(node0.isArrayLit());
1341:       assertFalse(node0.isNE());
1342:       assertFalse(node0.isNumber());
1343:       assertFalse(node0.isIf());
1344:       assertFalse(node0.isGetterDef());
1345:       assertFalse(node0.isCatch());
1346:       assertFalse(node0.hasMoreThanOneChild());
1347:       assertFalse(node0.isWith());
1348:       assertEquals((-1), node0.getLineno());
1349:       assertFalse(node0.isInstanceOf());
1350:       assertFalse(node0.isScript());
1351:       assertFalse(node0.isCase());
1352:       assertFalse(node0.isThis());
1353:       assertTrue(node0.isString());
1354:       assertFalse(node0.isRegExp());
1355:       assertFalse(node0.isBlock());
1356:       assertFalse(node0.isFor());
1357:       assertFalse(node0.isHook());
1358:       assertFalse(node0.isThrow());
1359:       assertFalse(node0.isFalse());
1360:       assertFalse(node0.isBreak());
1361:       assertEquals((-1), node0.getCharno());
1362:       assertFalse(node0.isInc());
1363:       assertFalse(node0.isSwitch());
1364:       assertFalse(node0.isAnd());
1365:       assertFalse(node0.isIn());
1366:       assertFalse(node0.isCast());
1367:       assertFalse(node0.isDelProp());
1368:       assertFalse(node0.isEmpty());
1369:       assertFalse(node0.isGetElem());
1370:       assertFalse(node0.isTrue());
1371:       assertFalse(node0.isDebugger());
1372:       assertFalse(node0.isVoid());
1373:       assertFalse(node0.isOr());
1374:       assertFalse(node0.isNot());
1375:       assertEquals((-1), node0.getSourcePosition());
1376:       assertFalse(node0.isObjectLit());
1377:       assertFalse(node0.isGetProp());
1378:       assertFalse(node0.isExprResult());
1379:       assertFalse(node0.isComma());
1380:       assertFalse(node0.isTypeOf());
1381:       assertFalse(node0.isReturn());
1382:       assertFalse(node0.isWhile());
1383:       assertFalse(node0.isDec());
1384:       assertFalse(node0.isAssign());
1385:       assertFalse(node0.hasChildren());
1386:       
1387:       String string0 = node0.getSourceFileName();
1388:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1389:       assertEquals(50, Node.FREE_CALL);
1390:       assertEquals(40, Node.ORIGINALNAME_PROP);
1391:       assertEquals(8, Node.FLAG_NO_THROWS);
1392:       assertEquals(39, Node.EMPTY_BLOCK);
1393:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1394:       assertEquals(52, Node.LENGTH);
1395:       assertEquals(48, Node.DIRECTIVES);
1396:       assertEquals(57, Node.REFLECTED_OBJECT);
1397:       assertEquals(54, Node.SLASH_V);
1398:       assertEquals(49, Node.DIRECT_EVAL);
1399:       assertEquals(1, Node.DECR_FLAG);
1400:       assertEquals(4095, Node.COLUMN_MASK);
1401:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1402:       assertEquals(32, Node.INCRDECR_PROP);
1403:       assertEquals(12, Node.COLUMN_BITS);
1404:       assertEquals(29, Node.JSDOC_INFO_PROP);
1405:       assertEquals(2, Node.POST_FLAG);
1406:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1408:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1409:       assertEquals(37, Node.OPT_ARG_NAME);
1410:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1412:       assertEquals(46, Node.IS_NAMESPACE);
1413:       assertEquals(43, Node.IS_CONSTANT_NAME);
1414:       assertEquals(56, Node.CHANGE_TIME);
1415:       assertEquals(30, Node.VAR_ARGS_NAME);
1416:       assertEquals(36, Node.QUOTED_PROP);
1417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1419:       assertEquals(55, Node.INFERRED_FUNCTION);
1420:       assertEquals(53, Node.INPUT_ID);
1421:       assertEquals(47, Node.IS_DISPATCHER);
1422:       assertEquals(57, Node.LAST_PROP);
1423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1424:       assertFalse(node0.equals((Object)node1));
1425:       assertNull(string0);
1426:       assertSame(node0, node2);
1427:       assertFalse(node0.isCall());
1428:       assertFalse(node0.isStringKey());
1429:       assertFalse(node0.isVar());
1430:       assertFalse(node0.isName());
1431:       assertFalse(node0.isNew());
1432:       assertFalse(node0.isAdd());
1433:       assertFalse(node0.isSetterDef());
1434:       assertFalse(node0.isParamList());
1435:       assertFalse(node0.isNull());
1436:       assertFalse(node0.isContinue());
1437:       assertFalse(node0.isDo());
1438:       assertFalse(node0.isFunction());
1439:       assertFalse(node0.isAssignAdd());
1440:       assertFalse(node0.isDefaultCase());
1441:       assertEquals(0, node0.getChildCount());
1442:       assertEquals(40, node0.getType());
1443:       assertFalse(node0.isLabel());
1444:       assertFalse(node0.isLabelName());
1445:       assertFalse(node0.isTry());
1446:       assertFalse(node0.hasOneChild());
1447:       assertFalse(node0.isArrayLit());
1448:       assertFalse(node0.isNE());
1449:       assertFalse(node0.isNumber());
1450:       assertFalse(node0.isIf());
1451:       assertFalse(node0.isGetterDef());
1452:       assertFalse(node0.isCatch());
1453:       assertFalse(node0.hasMoreThanOneChild());
1454:       assertFalse(node0.isWith());
1455:       assertEquals((-1), node0.getLineno());
1456:       assertFalse(node0.isInstanceOf());
1457:       assertFalse(node0.isScript());
1458:       assertFalse(node0.isCase());
1459:       assertFalse(node0.isThis());
1460:       assertTrue(node0.isString());
1461:       assertFalse(node0.isRegExp());
1462:       assertFalse(node0.isBlock());
1463:       assertFalse(node0.isFor());
1464:       assertFalse(node0.isHook());
1465:       assertFalse(node0.isThrow());
1466:       assertFalse(node0.isFalse());
1467:       assertFalse(node0.isBreak());
1468:       assertEquals((-1), node0.getCharno());
1469:       assertFalse(node0.isInc());
1470:       assertFalse(node0.isSwitch());
1471:       assertFalse(node0.isAnd());
1472:       assertFalse(node0.isIn());
1473:       assertFalse(node0.isCast());
1474:       assertFalse(node0.isDelProp());
1475:       assertFalse(node0.isEmpty());
1476:       assertFalse(node0.isGetElem());
1477:       assertFalse(node0.isTrue());
1478:       assertFalse(node0.isDebugger());
1479:       assertFalse(node0.isVoid());
1480:       assertFalse(node0.isOr());
1481:       assertFalse(node0.isNot());
1482:       assertEquals((-1), node0.getSourcePosition());
1483:       assertFalse(node0.isObjectLit());
1484:       assertFalse(node0.isGetProp());
1485:       assertFalse(node0.isExprResult());
1486:       assertFalse(node0.isComma());
1487:       assertFalse(node0.isTypeOf());
1488:       assertFalse(node0.isReturn());
1489:       assertFalse(node0.isWhile());
1490:       assertFalse(node0.isDec());
1491:       assertFalse(node0.isAssign());
1492:       assertFalse(node0.hasChildren());
1493:       
1494:       int int0 = node1.getLineno();
1495:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1496:       assertEquals(50, Node.FREE_CALL);
1497:       assertEquals(40, Node.ORIGINALNAME_PROP);
1498:       assertEquals(8, Node.FLAG_NO_THROWS);
1499:       assertEquals(39, Node.EMPTY_BLOCK);
1500:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1501:       assertEquals(52, Node.LENGTH);
1502:       assertEquals(48, Node.DIRECTIVES);
1503:       assertEquals(57, Node.REFLECTED_OBJECT);
1504:       assertEquals(54, Node.SLASH_V);
1505:       assertEquals(49, Node.DIRECT_EVAL);
1506:       assertEquals(1, Node.DECR_FLAG);
1507:       assertEquals(4095, Node.COLUMN_MASK);
1508:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1509:       assertEquals(32, Node.INCRDECR_PROP);
1510:       assertEquals(12, Node.COLUMN_BITS);
1511:       assertEquals(29, Node.JSDOC_INFO_PROP);
1512:       assertEquals(2, Node.POST_FLAG);
1513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1516:       assertEquals(37, Node.OPT_ARG_NAME);
1517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1519:       assertEquals(46, Node.IS_NAMESPACE);
1520:       assertEquals(43, Node.IS_CONSTANT_NAME);
1521:       assertEquals(56, Node.CHANGE_TIME);
1522:       assertEquals(30, Node.VAR_ARGS_NAME);
1523:       assertEquals(36, Node.QUOTED_PROP);
1524:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1526:       assertEquals(55, Node.INFERRED_FUNCTION);
1527:       assertEquals(53, Node.INPUT_ID);
1528:       assertEquals(47, Node.IS_DISPATCHER);
1529:       assertEquals(57, Node.LAST_PROP);
1530:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1532:       assertEquals(43, Node.IS_CONSTANT_NAME);
1533:       assertEquals(36, Node.QUOTED_PROP);
1534:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1536:       assertEquals(55, Node.INFERRED_FUNCTION);
1537:       assertEquals(29, Node.JSDOC_INFO_PROP);
1538:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1539:       assertEquals(53, Node.INPUT_ID);
1540:       assertEquals(2, Node.POST_FLAG);
1541:       assertEquals(47, Node.IS_DISPATCHER);
1542:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1544:       assertEquals(46, Node.IS_NAMESPACE);
1545:       assertEquals(30, Node.VAR_ARGS_NAME);
1546:       assertEquals(40, Node.ORIGINALNAME_PROP);
1547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1548:       assertEquals(52, Node.LENGTH);
1549:       assertEquals(57, Node.LAST_PROP);
1550:       assertEquals(57, Node.REFLECTED_OBJECT);
1551:       assertEquals(54, Node.SLASH_V);
1552:       assertEquals(1, Node.DECR_FLAG);
1553:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1554:       assertEquals(50, Node.FREE_CALL);
1555:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1556:       assertEquals(39, Node.EMPTY_BLOCK);
1557:       assertEquals(48, Node.DIRECTIVES);
1558:       assertEquals(37, Node.OPT_ARG_NAME);
1559:       assertEquals(8, Node.FLAG_NO_THROWS);
1560:       assertEquals(32, Node.INCRDECR_PROP);
1561:       assertEquals(56, Node.CHANGE_TIME);
1562:       assertEquals(12, Node.COLUMN_BITS);
1563:       assertEquals(49, Node.DIRECT_EVAL);
1564:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1565:       assertEquals(4095, Node.COLUMN_MASK);
1566:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1567:       assertFalse(node0.equals((Object)node1));
1568:       assertFalse(node1.equals((Object)node0));
1569:       assertFalse(node1.equals((Object)node2));
1570:       assertSame(node0, node2);
1571:       assertEquals((-1), int0);
1572:       assertFalse(node0.isCall());
1573:       assertFalse(node0.isStringKey());
1574:       assertFalse(node0.isVar());
1575:       assertFalse(node0.isName());
1576:       assertFalse(node0.isNew());
1577:       assertFalse(node0.isAdd());
1578:       assertFalse(node0.isSetterDef());
1579:       assertFalse(node0.isParamList());
1580:       assertFalse(node0.isNull());
1581:       assertFalse(node0.isContinue());
1582:       assertFalse(node0.isDo());
1583:       assertFalse(node0.isFunction());
1584:       assertFalse(node0.isAssignAdd());
1585:       assertFalse(node0.isDefaultCase());
1586:       assertEquals(0, node0.getChildCount());
1587:       assertEquals(40, node0.getType());
1588:       assertFalse(node0.isLabel());
1589:       assertFalse(node0.isLabelName());
1590:       assertFalse(node0.isTry());
1591:       assertFalse(node0.hasOneChild());
1592:       assertFalse(node0.isArrayLit());
1593:       assertFalse(node0.isNE());
1594:       assertFalse(node0.isNumber());
1595:       assertFalse(node0.isIf());
1596:       assertFalse(node0.isGetterDef());
1597:       assertFalse(node0.isCatch());
1598:       assertFalse(node0.hasMoreThanOneChild());
1599:       assertFalse(node0.isWith());
1600:       assertEquals((-1), node0.getLineno());
1601:       assertFalse(node0.isInstanceOf());
1602:       assertFalse(node0.isScript());
1603:       assertFalse(node0.isCase());
1604:       assertFalse(node0.isThis());
1605:       assertTrue(node0.isString());
1606:       assertFalse(node0.isRegExp());
1607:       assertFalse(node0.isBlock());
1608:       assertFalse(node0.isFor());
1609:       assertFalse(node0.isHook());
1610:       assertFalse(node0.isThrow());
1611:       assertFalse(node0.isFalse());
1612:       assertFalse(node0.isBreak());
1613:       assertEquals((-1), node0.getCharno());
1614:       assertFalse(node0.isInc());
1615:       assertFalse(node0.isSwitch());
1616:       assertFalse(node0.isAnd());
1617:       assertFalse(node0.isIn());
1618:       assertFalse(node0.isCast());
1619:       assertFalse(node0.isDelProp());
1620:       assertFalse(node0.isEmpty());
1621:       assertFalse(node0.isGetElem());
1622:       assertFalse(node0.isTrue());
1623:       assertFalse(node0.isDebugger());
1624:       assertFalse(node0.isVoid());
1625:       assertFalse(node0.isOr());
1626:       assertFalse(node0.isNot());
1627:       assertEquals((-1), node0.getSourcePosition());
1628:       assertFalse(node0.isObjectLit());
1629:       assertFalse(node0.isGetProp());
1630:       assertFalse(node0.isExprResult());
1631:       assertFalse(node0.isComma());
1632:       assertFalse(node0.isTypeOf());
1633:       assertFalse(node0.isReturn());
1634:       assertFalse(node0.isWhile());
1635:       assertFalse(node0.isDec());
1636:       assertFalse(node0.isAssign());
1637:       assertFalse(node0.hasChildren());
1638:       assertFalse(node1.isTrue());
1639:       assertFalse(node1.isFunction());
1640:       assertFalse(node1.isRegExp());
1641:       assertFalse(node1.isDefaultCase());
1642:       assertFalse(node1.isDebugger());
1643:       assertFalse(node1.isEmpty());
1644:       assertFalse(node1.isTry());
1645:       assertFalse(node1.isNE());
1646:       assertFalse(node1.isNull());
1647:       assertFalse(node1.isSetterDef());
1648:       assertFalse(node1.isIf());
1649:       assertFalse(node1.isFor());
1650:       assertTrue(node1.hasOneChild());
1651:       assertEquals(1, node1.getChildCount());
1652:       assertFalse(node1.isCatch());
1653:       assertFalse(node1.isCall());
1654:       assertTrue(node1.isThis());
1655:       assertTrue(node1.hasChildren());
1656:       assertFalse(node1.isName());
1657:       assertFalse(node1.isDelProp());
1658:       assertFalse(node1.isVoid());
1659:       assertFalse(node1.isSwitch());
1660:       assertFalse(node1.isBlock());
1661:       assertEquals((-1), node1.getCharno());
1662:       assertFalse(node1.isVar());
1663:       assertFalse(node1.isHook());
1664:       assertFalse(node1.isDo());
1665:       assertFalse(node1.isAssignAdd());
1666:       assertFalse(node1.isAdd());
1667:       assertFalse(node1.isNew());
1668:       assertFalse(node1.isCase());
1669:       assertFalse(node1.isNumber());
1670:       assertFalse(node1.isParamList());
1671:       assertFalse(node1.isLabel());
1672:       assertFalse(node1.isGetterDef());
1673:       assertFalse(node1.isStringKey());
1674:       assertFalse(node1.isLabelName());
1675:       assertFalse(node1.isArrayLit());
1676:       assertFalse(node1.isScript());
1677:       assertFalse(node1.isExprResult());
1678:       assertFalse(node1.isNot());
1679:       assertFalse(node1.isWith());
1680:       assertFalse(node1.isObjectLit());
1681:       assertEquals(42, node1.getType());
1682:       assertFalse(node1.isGetProp());
1683:       assertFalse(node1.isTypeOf());
1684:       assertFalse(node1.isAssign());
1685:       assertFalse(node1.isOr());
1686:       assertFalse(node1.isReturn());
1687:       assertFalse(node1.isDec());
1688:       assertFalse(node1.isComma());
1689:       assertFalse(node1.hasMoreThanOneChild());
1690:       assertFalse(node1.isInstanceOf());
1691:       assertFalse(node1.isGetElem());
1692:       assertFalse(node1.isBreak());
1693:       assertEquals((-1), node1.getLineno());
1694:       assertFalse(node1.isInc());
1695:       assertFalse(node1.isWhile());
1696:       assertFalse(node1.isString());
1697:       assertFalse(node1.isThrow());
1698:       assertFalse(node1.isIn());
1699:       assertFalse(node1.isFalse());
1700:       assertEquals((-1), node1.getSourcePosition());
1701:       assertFalse(node1.isCast());
1702:       assertFalse(node1.isContinue());
1703:       assertFalse(node1.isAnd());
1704:       
1705:       boolean boolean3 = node2.mayMutateArguments();
1706:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1707:       assertEquals(50, Node.FREE_CALL);
1708:       assertEquals(40, Node.ORIGINALNAME_PROP);
1709:       assertEquals(8, Node.FLAG_NO_THROWS);
1710:       assertEquals(39, Node.EMPTY_BLOCK);
1711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1712:       assertEquals(52, Node.LENGTH);
1713:       assertEquals(48, Node.DIRECTIVES);
1714:       assertEquals(57, Node.REFLECTED_OBJECT);
1715:       assertEquals(54, Node.SLASH_V);
1716:       assertEquals(49, Node.DIRECT_EVAL);
1717:       assertEquals(1, Node.DECR_FLAG);
1718:       assertEquals(4095, Node.COLUMN_MASK);
1719:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1720:       assertEquals(32, Node.INCRDECR_PROP);
1721:       assertEquals(12, Node.COLUMN_BITS);
1722:       assertEquals(29, Node.JSDOC_INFO_PROP);
1723:       assertEquals(2, Node.POST_FLAG);
1724:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1725:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1727:       assertEquals(37, Node.OPT_ARG_NAME);
1728:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1729:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1730:       assertEquals(46, Node.IS_NAMESPACE);
1731:       assertEquals(43, Node.IS_CONSTANT_NAME);
1732:       assertEquals(56, Node.CHANGE_TIME);
1733:       assertEquals(30, Node.VAR_ARGS_NAME);
1734:       assertEquals(36, Node.QUOTED_PROP);
1735:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1736:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1737:       assertEquals(55, Node.INFERRED_FUNCTION);
1738:       assertEquals(53, Node.INPUT_ID);
1739:       assertEquals(47, Node.IS_DISPATCHER);
1740:       assertEquals(57, Node.LAST_PROP);
1741:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1742:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1743:       assertEquals(43, Node.IS_CONSTANT_NAME);
1744:       assertEquals(36, Node.QUOTED_PROP);
1745:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1746:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1747:       assertEquals(55, Node.INFERRED_FUNCTION);
1748:       assertEquals(29, Node.JSDOC_INFO_PROP);
1749:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1750:       assertEquals(53, Node.INPUT_ID);
1751:       assertEquals(2, Node.POST_FLAG);
1752:       assertEquals(47, Node.IS_DISPATCHER);
1753:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1754:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1755:       assertEquals(46, Node.IS_NAMESPACE);
1756:       assertEquals(30, Node.VAR_ARGS_NAME);
1757:       assertEquals(40, Node.ORIGINALNAME_PROP);
1758:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1759:       assertEquals(52, Node.LENGTH);
1760:       assertEquals(57, Node.LAST_PROP);
1761:       assertEquals(57, Node.REFLECTED_OBJECT);
1762:       assertEquals(54, Node.SLASH_V);
1763:       assertEquals(1, Node.DECR_FLAG);
1764:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1765:       assertEquals(50, Node.FREE_CALL);
1766:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1767:       assertEquals(39, Node.EMPTY_BLOCK);
1768:       assertEquals(48, Node.DIRECTIVES);
1769:       assertEquals(37, Node.OPT_ARG_NAME);
1770:       assertEquals(8, Node.FLAG_NO_THROWS);
1771:       assertEquals(32, Node.INCRDECR_PROP);
1772:       assertEquals(56, Node.CHANGE_TIME);
1773:       assertEquals(12, Node.COLUMN_BITS);
1774:       assertEquals(49, Node.DIRECT_EVAL);
1775:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1776:       assertEquals(4095, Node.COLUMN_MASK);
1777:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1778:       assertEquals(48, Node.DIRECTIVES);
1779:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1780:       assertEquals(39, Node.EMPTY_BLOCK);
1781:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1782:       assertEquals(50, Node.FREE_CALL);
1783:       assertEquals(4095, Node.COLUMN_MASK);
1784:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1785:       assertEquals(8, Node.FLAG_NO_THROWS);
1786:       assertEquals(40, Node.ORIGINALNAME_PROP);
1787:       assertEquals(57, Node.REFLECTED_OBJECT);
1788:       assertEquals(43, Node.IS_CONSTANT_NAME);
1789:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1790:       assertEquals(36, Node.QUOTED_PROP);
1791:       assertEquals(53, Node.INPUT_ID);
1792:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1793:       assertEquals(30, Node.VAR_ARGS_NAME);
1794:       assertEquals(52, Node.LENGTH);
1795:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1796:       assertEquals(55, Node.INFERRED_FUNCTION);
1797:       assertEquals(29, Node.JSDOC_INFO_PROP);
1798:       assertEquals(57, Node.LAST_PROP);
1799:       assertEquals(37, Node.OPT_ARG_NAME);
1800:       assertEquals(2, Node.POST_FLAG);
1801:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1802:       assertEquals(47, Node.IS_DISPATCHER);
1803:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1804:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1805:       assertEquals(46, Node.IS_NAMESPACE);
1806:       assertEquals(56, Node.CHANGE_TIME);
1807:       assertEquals(49, Node.DIRECT_EVAL);
1808:       assertEquals(54, Node.SLASH_V);
1809:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1810:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1811:       assertEquals(1, Node.DECR_FLAG);
1812:       assertEquals(12, Node.COLUMN_BITS);
1813:       assertEquals(32, Node.INCRDECR_PROP);
1814:       assertFalse(node0.equals((Object)node1));
1815:       assertFalse(node1.equals((Object)node0));
1816:       assertFalse(node1.equals((Object)node2));
1817:       assertFalse(node2.equals((Object)node1));
1818:       assertFalse(boolean3 == boolean2);
1819:       assertFalse(boolean3 == boolean0);
1820:       assertFalse(boolean3 == boolean1);
1821:       assertSame(node0, node2);
1822:       assertSame(node2, node0);
1823:       assertTrue(boolean3);
1824:       assertFalse(node0.isCall());
1825:       assertFalse(node0.isStringKey());
1826:       assertFalse(node0.isVar());
1827:       assertFalse(node0.isName());
1828:       assertFalse(node0.isNew());
1829:       assertFalse(node0.isAdd());
1830:       assertFalse(node0.isSetterDef());
1831:       assertFalse(node0.isParamList());
1832:       assertFalse(node0.isNull());
1833:       assertFalse(node0.isContinue());
1834:       assertFalse(node0.isDo());
1835:       assertFalse(node0.isFunction());
1836:       assertFalse(node0.isAssignAdd());
1837:       assertFalse(node0.isDefaultCase());
1838:       assertEquals(0, node0.getChildCount());
1839:       assertEquals(40, node0.getType());
1840:       assertFalse(node0.isLabel());
1841:       assertFalse(node0.isLabelName());
1842:       assertFalse(node0.isTry());
1843:       assertFalse(node0.hasOneChild());
1844:       assertFalse(node0.isArrayLit());
1845:       assertFalse(node0.isNE());
1846:       assertFalse(node0.isNumber());
1847:       assertFalse(node0.isIf());
1848:       assertFalse(node0.isGetterDef());
1849:       assertFalse(node0.isCatch());
1850:       assertFalse(node0.hasMoreThanOneChild());
1851:       assertFalse(node0.isWith());
1852:       assertEquals((-1), node0.getLineno());
1853:       assertFalse(node0.isInstanceOf());
1854:       assertFalse(node0.isScript());
1855:       assertFalse(node0.isCase());
1856:       assertFalse(node0.isThis());
1857:       assertTrue(node0.isString());
1858:       assertFalse(node0.isRegExp());
1859:       assertFalse(node0.isBlock());
1860:       assertFalse(node0.isFor());
1861:       assertFalse(node0.isHook());
1862:       assertFalse(node0.isThrow());
1863:       assertFalse(node0.isFalse());
1864:       assertFalse(node0.isBreak());
1865:       assertEquals((-1), node0.getCharno());
1866:       assertFalse(node0.isInc());
1867:       assertFalse(node0.isSwitch());
1868:       assertFalse(node0.isAnd());
1869:       assertFalse(node0.isIn());
1870:       assertFalse(node0.isCast());
1871:       assertFalse(node0.isDelProp());
1872:       assertFalse(node0.isEmpty());
1873:       assertFalse(node0.isGetElem());
1874:       assertFalse(node0.isTrue());
1875:       assertFalse(node0.isDebugger());
1876:       assertFalse(node0.isVoid());
1877:       assertFalse(node0.isOr());
1878:       assertFalse(node0.isNot());
1879:       assertEquals((-1), node0.getSourcePosition());
1880:       assertFalse(node0.isObjectLit());
1881:       assertFalse(node0.isGetProp());
1882:       assertFalse(node0.isExprResult());
1883:       assertFalse(node0.isComma());
1884:       assertFalse(node0.isTypeOf());
1885:       assertFalse(node0.isReturn());
1886:       assertFalse(node0.isWhile());
1887:       assertFalse(node0.isDec());
1888:       assertFalse(node0.isAssign());
1889:       assertFalse(node0.hasChildren());
1890:       assertFalse(node1.isTrue());
1891:       assertFalse(node1.isFunction());
1892:       assertFalse(node1.isRegExp());
1893:       assertFalse(node1.isDefaultCase());
1894:       assertFalse(node1.isDebugger());
1895:       assertFalse(node1.isEmpty());
1896:       assertFalse(node1.isTry());
1897:       assertFalse(node1.isNE());
1898:       assertFalse(node1.isNull());
1899:       assertFalse(node1.isSetterDef());
1900:       assertFalse(node1.isIf());
1901:       assertFalse(node1.isFor());
1902:       assertTrue(node1.hasOneChild());
1903:       assertEquals(1, node1.getChildCount());
1904:       assertFalse(node1.isCatch());
1905:       assertFalse(node1.isCall());
1906:       assertTrue(node1.isThis());
1907:       assertTrue(node1.hasChildren());
1908:       assertFalse(node1.isName());
1909:       assertFalse(node1.isDelProp());
1910:       assertFalse(node1.isVoid());
1911:       assertFalse(node1.isSwitch());
1912:       assertFalse(node1.isBlock());
1913:       assertEquals((-1), node1.getCharno());
1914:       assertFalse(node1.isVar());
1915:       assertFalse(node1.isHook());
1916:       assertFalse(node1.isDo());
1917:       assertFalse(node1.isAssignAdd());
1918:       assertFalse(node1.isAdd());
1919:       assertFalse(node1.isNew());
1920:       assertFalse(node1.isCase());
1921:       assertFalse(node1.isNumber());
1922:       assertFalse(node1.isParamList());
1923:       assertFalse(node1.isLabel());
1924:       assertFalse(node1.isGetterDef());
1925:       assertFalse(node1.isStringKey());
1926:       assertFalse(node1.isLabelName());
1927:       assertFalse(node1.isArrayLit());
1928:       assertFalse(node1.isScript());
1929:       assertFalse(node1.isExprResult());
1930:       assertFalse(node1.isNot());
1931:       assertFalse(node1.isWith());
1932:       assertFalse(node1.isObjectLit());
1933:       assertEquals(42, node1.getType());
1934:       assertFalse(node1.isGetProp());
1935:       assertFalse(node1.isTypeOf());
1936:       assertFalse(node1.isAssign());
1937:       assertFalse(node1.isOr());
1938:       assertFalse(node1.isReturn());
1939:       assertFalse(node1.isDec());
1940:       assertFalse(node1.isComma());
1941:       assertFalse(node1.hasMoreThanOneChild());
1942:       assertFalse(node1.isInstanceOf());
1943:       assertFalse(node1.isGetElem());
1944:       assertFalse(node1.isBreak());
1945:       assertEquals((-1), node1.getLineno());
1946:       assertFalse(node1.isInc());
1947:       assertFalse(node1.isWhile());
1948:       assertFalse(node1.isString());
1949:       assertFalse(node1.isThrow());
1950:       assertFalse(node1.isIn());
1951:       assertFalse(node1.isFalse());
1952:       assertEquals((-1), node1.getSourcePosition());
1953:       assertFalse(node1.isCast());
1954:       assertFalse(node1.isContinue());
1955:       assertFalse(node1.isAnd());
1956:       assertFalse(node2.isBreak());
1957:       assertFalse(node2.isComma());
1958:       assertFalse(node2.isFalse());
1959:       assertFalse(node2.isGetProp());
1960:       assertFalse(node2.isObjectLit());
1961:       assertEquals((-1), node2.getCharno());
1962:       assertFalse(node2.isAnd());
1963:       assertFalse(node2.isWith());
1964:       assertFalse(node2.isNot());
1965:       assertFalse(node2.isCase());
1966:       assertFalse(node2.isExprResult());
1967:       assertFalse(node2.isScript());
1968:       assertFalse(node2.hasOneChild());
1969:       assertFalse(node2.isHook());
1970:       assertFalse(node2.isInstanceOf());
1971:       assertFalse(node2.isThis());
1972:       assertEquals((-1), node2.getSourcePosition());
1973:       assertFalse(node2.isIf());
1974:       assertFalse(node2.isCast());
1975:       assertFalse(node2.isIn());
1976:       assertEquals((-1), node2.getLineno());
1977:       assertFalse(node2.isDebugger());
1978:       assertFalse(node2.isNE());
1979:       assertFalse(node2.isFunction());
1980:       assertFalse(node2.isContinue());
1981:       assertFalse(node2.isInc());
1982:       assertEquals(40, node2.getType());
1983:       assertFalse(node2.isThrow());
1984:       assertFalse(node2.isNull());
1985:       assertFalse(node2.isCall());
1986:       assertFalse(node2.isSetterDef());
1987:       assertFalse(node2.isStringKey());
1988:       assertFalse(node2.isName());
1989:       assertFalse(node2.isParamList());
1990:       assertFalse(node2.isVoid());
1991:       assertFalse(node2.isRegExp());
1992:       assertFalse(node2.isCatch());
1993:       assertFalse(node2.hasMoreThanOneChild());
1994:       assertFalse(node2.isTry());
1995:       assertFalse(node2.isBlock());
1996:       assertTrue(node2.isString());
1997:       assertFalse(node2.isReturn());
1998:       assertFalse(node2.isWhile());
1999:       assertFalse(node2.isFor());
2000:       assertFalse(node2.isDec());
2001:       assertFalse(node2.isTypeOf());
2002:       assertFalse(node2.isNumber());
2003:       assertFalse(node2.hasChildren());
2004:       assertFalse(node2.isAssign());
2005:       assertFalse(node2.isLabelName());
2006:       assertFalse(node2.isDelProp());
2007:       assertFalse(node2.isGetterDef());
2008:       assertFalse(node2.isGetElem());
2009:       assertFalse(node2.isEmpty());
2010:       assertFalse(node2.isArrayLit());
2011:       assertFalse(node2.isOr());
2012:       assertFalse(node2.isTrue());
2013:       assertFalse(node2.isDefaultCase());
2014:       assertFalse(node2.isSwitch());
2015:       assertFalse(node2.isDo());
2016:       assertFalse(node2.isNew());
2017:       assertFalse(node2.isAdd());
2018:       assertEquals(0, node2.getChildCount());
2019:       assertFalse(node2.isLabel());
2020:       assertFalse(node2.isAssignAdd());
2021:       assertFalse(node2.isVar());
2022:       
2023:       Iterable<Node> iterable0 = node2.children();
2024:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2025:       assertEquals(50, Node.FREE_CALL);
2026:       assertEquals(40, Node.ORIGINALNAME_PROP);
2027:       assertEquals(8, Node.FLAG_NO_THROWS);
2028:       assertEquals(39, Node.EMPTY_BLOCK);
2029:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2030:       assertEquals(52, Node.LENGTH);
2031:       assertEquals(48, Node.DIRECTIVES);
2032:       assertEquals(57, Node.REFLECTED_OBJECT);
2033:       assertEquals(54, Node.SLASH_V);
2034:       assertEquals(49, Node.DIRECT_EVAL);
2035:       assertEquals(1, Node.DECR_FLAG);
2036:       assertEquals(4095, Node.COLUMN_MASK);
2037:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2038:       assertEquals(32, Node.INCRDECR_PROP);
2039:       assertEquals(12, Node.COLUMN_BITS);
2040:       assertEquals(29, Node.JSDOC_INFO_PROP);
2041:       assertEquals(2, Node.POST_FLAG);
2042:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2043:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2044:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2045:       assertEquals(37, Node.OPT_ARG_NAME);
2046:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2047:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2048:       assertEquals(46, Node.IS_NAMESPACE);
2049:       assertEquals(43, Node.IS_CONSTANT_NAME);
2050:       assertEquals(56, Node.CHANGE_TIME);
2051:       assertEquals(30, Node.VAR_ARGS_NAME);
2052:       assertEquals(36, Node.QUOTED_PROP);
2053:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2054:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2055:       assertEquals(55, Node.INFERRED_FUNCTION);
2056:       assertEquals(53, Node.INPUT_ID);
2057:       assertEquals(47, Node.IS_DISPATCHER);
2058:       assertEquals(57, Node.LAST_PROP);
2059:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2060:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2061:       assertEquals(43, Node.IS_CONSTANT_NAME);
2062:       assertEquals(36, Node.QUOTED_PROP);
2063:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2064:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2065:       assertEquals(55, Node.INFERRED_FUNCTION);
2066:       assertEquals(29, Node.JSDOC_INFO_PROP);
2067:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2068:       assertEquals(53, Node.INPUT_ID);
2069:       assertEquals(2, Node.POST_FLAG);
2070:       assertEquals(47, Node.IS_DISPATCHER);
2071:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2072:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2073:       assertEquals(46, Node.IS_NAMESPACE);
2074:       assertEquals(30, Node.VAR_ARGS_NAME);
2075:       assertEquals(40, Node.ORIGINALNAME_PROP);
2076:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2077:       assertEquals(52, Node.LENGTH);
2078:       assertEquals(57, Node.LAST_PROP);
2079:       assertEquals(57, Node.REFLECTED_OBJECT);
2080:       assertEquals(54, Node.SLASH_V);
2081:       assertEquals(1, Node.DECR_FLAG);
2082:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2083:       assertEquals(50, Node.FREE_CALL);
2084:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2085:       assertEquals(39, Node.EMPTY_BLOCK);
2086:       assertEquals(48, Node.DIRECTIVES);
2087:       assertEquals(37, Node.OPT_ARG_NAME);
2088:       assertEquals(8, Node.FLAG_NO_THROWS);
2089:       assertEquals(32, Node.INCRDECR_PROP);
2090:       assertEquals(56, Node.CHANGE_TIME);
2091:       assertEquals(12, Node.COLUMN_BITS);
2092:       assertEquals(49, Node.DIRECT_EVAL);
2093:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2094:       assertEquals(4095, Node.COLUMN_MASK);
2095:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2096:       assertEquals(48, Node.DIRECTIVES);
2097:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2098:       assertEquals(39, Node.EMPTY_BLOCK);
2099:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2100:       assertEquals(50, Node.FREE_CALL);
2101:       assertEquals(4095, Node.COLUMN_MASK);
2102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2103:       assertEquals(8, Node.FLAG_NO_THROWS);
2104:       assertEquals(40, Node.ORIGINALNAME_PROP);
2105:       assertEquals(57, Node.REFLECTED_OBJECT);
2106:       assertEquals(43, Node.IS_CONSTANT_NAME);
2107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2108:       assertEquals(36, Node.QUOTED_PROP);
2109:       assertEquals(53, Node.INPUT_ID);
2110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2111:       assertEquals(30, Node.VAR_ARGS_NAME);
2112:       assertEquals(52, Node.LENGTH);
2113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2114:       assertEquals(55, Node.INFERRED_FUNCTION);
2115:       assertEquals(29, Node.JSDOC_INFO_PROP);
2116:       assertEquals(57, Node.LAST_PROP);
2117:       assertEquals(37, Node.OPT_ARG_NAME);
2118:       assertEquals(2, Node.POST_FLAG);
2119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2120:       assertEquals(47, Node.IS_DISPATCHER);
2121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2123:       assertEquals(46, Node.IS_NAMESPACE);
2124:       assertEquals(56, Node.CHANGE_TIME);
2125:       assertEquals(49, Node.DIRECT_EVAL);
2126:       assertEquals(54, Node.SLASH_V);
2127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2129:       assertEquals(1, Node.DECR_FLAG);
2130:       assertEquals(12, Node.COLUMN_BITS);
2131:       assertEquals(32, Node.INCRDECR_PROP);
2132:       assertFalse(node0.equals((Object)node1));
2133:       assertFalse(node1.equals((Object)node0));
2134:       assertFalse(node1.equals((Object)node2));
2135:       assertFalse(node2.equals((Object)node1));
2136:       assertNotNull(iterable0);
2137:       assertSame(node0, node2);
2138:       assertSame(node2, node0);
2139:       assertFalse(iterable0.contains(node0));
2140:       assertFalse(node0.isCall());
2141:       assertFalse(node0.isStringKey());
2142:       assertFalse(node0.isVar());
2143:       assertFalse(node0.isName());
2144:       assertFalse(node0.isNew());
2145:       assertFalse(node0.isAdd());
2146:       assertFalse(node0.isSetterDef());
2147:       assertFalse(node0.isParamList());
2148:       assertFalse(node0.isNull());
2149:       assertFalse(node0.isContinue());
2150:       assertFalse(node0.isDo());
2151:       assertFalse(node0.isFunction());
2152:       assertFalse(node0.isAssignAdd());
2153:       assertFalse(node0.isDefaultCase());
2154:       assertEquals(0, node0.getChildCount());
2155:       assertEquals(40, node0.getType());
2156:       assertFalse(node0.isLabel());
2157:       assertFalse(node0.isLabelName());
2158:       assertFalse(node0.isTry());
2159:       assertFalse(node0.hasOneChild());
2160:       assertFalse(node0.isArrayLit());
2161:       assertFalse(node0.isNE());
2162:       assertFalse(node0.isNumber());
2163:       assertFalse(node0.isIf());
2164:       assertFalse(node0.isGetterDef());
2165:       assertFalse(node0.isCatch());
2166:       assertFalse(node0.hasMoreThanOneChild());
2167:       assertFalse(node0.isWith());
2168:       assertEquals((-1), node0.getLineno());
2169:       assertFalse(node0.isInstanceOf());
2170:       assertFalse(node0.isScript());
2171:       assertFalse(node0.isCase());
2172:       assertFalse(node0.isThis());
2173:       assertTrue(node0.isString());
2174:       assertFalse(node0.isRegExp());
2175:       assertFalse(node0.isBlock());
2176:       assertFalse(node0.isFor());
2177:       assertFalse(node0.isHook());
2178:       assertFalse(node0.isThrow());
2179:       assertFalse(node0.isFalse());
2180:       assertFalse(node0.isBreak());
2181:       assertEquals((-1), node0.getCharno());
2182:       assertFalse(node0.isInc());
2183:       assertFalse(node0.isSwitch());
2184:       assertFalse(node0.isAnd());
2185:       assertFalse(node0.isIn());
2186:       assertFalse(node0.isCast());
2187:       assertFalse(node0.isDelProp());
2188:       assertFalse(node0.isEmpty());
2189:       assertFalse(node0.isGetElem());
2190:       assertFalse(node0.isTrue());
2191:       
2192:       Node node3 = new Node((-476), 10, 56);
2193:       assertEquals(29, Node.JSDOC_INFO_PROP);
2194:       assertEquals(47, Node.IS_DISPATCHER);
2195:       assertEquals(56, Node.CHANGE_TIME);
2196:       assertEquals(37, Node.OPT_ARG_NAME);
2197:       assertEquals(2, Node.POST_FLAG);
2198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2199:       assertEquals(1, Node.DECR_FLAG);
2200:       assertEquals(12, Node.COLUMN_BITS);
2201:       assertEquals(46, Node.IS_NAMESPACE);
2202:       assertEquals(54, Node.SLASH_V);
2203:       assertEquals(43, Node.IS_CONSTANT_NAME);
2204:       assertEquals(32, Node.INCRDECR_PROP);
2205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2209:       assertEquals(50, Node.FREE_CALL);
2210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2211:       assertEquals(57, Node.REFLECTED_OBJECT);
2212:       assertEquals(48, Node.DIRECTIVES);
2213:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2214:       assertEquals(40, Node.ORIGINALNAME_PROP);
2215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2216:       assertEquals(4095, Node.COLUMN_MASK);
2217:       assertEquals(30, Node.VAR_ARGS_NAME);
2218:       assertEquals(49, Node.DIRECT_EVAL);
2219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2220:       assertEquals(36, Node.QUOTED_PROP);
2221:       assertEquals(57, Node.LAST_PROP);
2222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2223:       assertEquals(52, Node.LENGTH);
2224:       assertEquals(53, Node.INPUT_ID);
2225:       assertEquals(55, Node.INFERRED_FUNCTION);
2226:       assertEquals(8, Node.FLAG_NO_THROWS);
2227:       assertEquals(39, Node.EMPTY_BLOCK);
2228:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2229:       assertFalse(node3.equals((Object)node1));
2230:       assertFalse(node3.equals((Object)node0));
2231:       assertFalse(node3.equals((Object)node2));
2232:       assertNotNull(node3);
2233:       
2234:       boolean boolean4 = node1.isRegExp();
2235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2236:       assertEquals(50, Node.FREE_CALL);
2237:       assertEquals(40, Node.ORIGINALNAME_PROP);
2238:       assertEquals(8, Node.FLAG_NO_THROWS);
2239:       assertEquals(39, Node.EMPTY_BLOCK);
2240:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2241:       assertEquals(52, Node.LENGTH);
2242:       assertEquals(48, Node.DIRECTIVES);
2243:       assertEquals(57, Node.REFLECTED_OBJECT);
2244:       assertEquals(54, Node.SLASH_V);
2245:       assertEquals(49, Node.DIRECT_EVAL);
2246:       assertEquals(1, Node.DECR_FLAG);
2247:       assertEquals(4095, Node.COLUMN_MASK);
2248:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2249:       assertEquals(32, Node.INCRDECR_PROP);
2250:       assertEquals(12, Node.COLUMN_BITS);
2251:       assertEquals(29, Node.JSDOC_INFO_PROP);
2252:       assertEquals(2, Node.POST_FLAG);
2253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2254:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2256:       assertEquals(37, Node.OPT_ARG_NAME);
2257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2259:       assertEquals(46, Node.IS_NAMESPACE);
2260:       assertEquals(43, Node.IS_CONSTANT_NAME);
2261:       assertEquals(56, Node.CHANGE_TIME);
2262:       assertEquals(30, Node.VAR_ARGS_NAME);
2263:       assertEquals(36, Node.QUOTED_PROP);
2264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2266:       assertEquals(55, Node.INFERRED_FUNCTION);
2267:       assertEquals(53, Node.INPUT_ID);
2268:       assertEquals(47, Node.IS_DISPATCHER);
2269:       assertEquals(57, Node.LAST_PROP);
2270:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2271:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2272:       assertEquals(43, Node.IS_CONSTANT_NAME);
2273:       assertEquals(36, Node.QUOTED_PROP);
2274:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2276:       assertEquals(55, Node.INFERRED_FUNCTION);
2277:       assertEquals(29, Node.JSDOC_INFO_PROP);
2278:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2279:       assertEquals(53, Node.INPUT_ID);
2280:       assertEquals(2, Node.POST_FLAG);
2281:       assertEquals(47, Node.IS_DISPATCHER);
2282:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2283:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2284:       assertEquals(46, Node.IS_NAMESPACE);
2285:       assertEquals(30, Node.VAR_ARGS_NAME);
2286:       assertEquals(40, Node.ORIGINALNAME_PROP);
2287:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2288:       assertEquals(52, Node.LENGTH);
2289:       assertEquals(57, Node.LAST_PROP);
2290:       assertEquals(57, Node.REFLECTED_OBJECT);
2291:       assertEquals(54, Node.SLASH_V);
2292:       assertEquals(1, Node.DECR_FLAG);
2293:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2294:       assertEquals(50, Node.FREE_CALL);
2295:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2296:       assertEquals(39, Node.EMPTY_BLOCK);
2297:       assertEquals(48, Node.DIRECTIVES);
2298:       assertEquals(37, Node.OPT_ARG_NAME);
2299:       assertEquals(8, Node.FLAG_NO_THROWS);
2300:       assertEquals(32, Node.INCRDECR_PROP);
2301:       assertEquals(56, Node.CHANGE_TIME);
2302:       assertEquals(12, Node.COLUMN_BITS);
2303:       assertEquals(49, Node.DIRECT_EVAL);
2304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2305:       assertEquals(4095, Node.COLUMN_MASK);
2306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2307:       assertFalse(node0.equals((Object)node3));
2308:       assertFalse(node0.equals((Object)node1));
2309:       assertFalse(node1.equals((Object)node0));
2310:       assertFalse(node1.equals((Object)node3));
2311:       assertFalse(node1.equals((Object)node2));
2312:       assertFalse(boolean4 == boolean3);
2313:       assertTrue(boolean4 == boolean0);
2314:       assertTrue(boolean4 == boolean2);
2315:       assertTrue(boolean4 == boolean1);
2316:       assertSame(node0, node2);
2317:       assertNotSame(node1, node3);
2318:       assertFalse(boolean4);
2319:       
2320:       boolean boolean5 = node3.isOnlyModifiesThisCall();
2321:       assertEquals(29, Node.JSDOC_INFO_PROP);
2322:       assertEquals(47, Node.IS_DISPATCHER);
2323:       assertEquals(56, Node.CHANGE_TIME);
2324:       assertEquals(37, Node.OPT_ARG_NAME);
2325:       assertEquals(2, Node.POST_FLAG);
2326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2327:       assertEquals(1, Node.DECR_FLAG);
2328:       assertEquals(12, Node.COLUMN_BITS);
2329:       assertEquals(46, Node.IS_NAMESPACE);
2330:       assertEquals(54, Node.SLASH_V);
2331:       assertEquals(43, Node.IS_CONSTANT_NAME);
2332:       assertEquals(32, Node.INCRDECR_PROP);
2333:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2334:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2335:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2336:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2337:       assertEquals(50, Node.FREE_CALL);
2338:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2339:       assertEquals(57, Node.REFLECTED_OBJECT);
2340:       assertEquals(48, Node.DIRECTIVES);
2341:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2342:       assertEquals(40, Node.ORIGINALNAME_PROP);
2343:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2344:       assertEquals(4095, Node.COLUMN_MASK);
2345:       assertEquals(30, Node.VAR_ARGS_NAME);
2346:       assertEquals(49, Node.DIRECT_EVAL);
2347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2348:       assertEquals(36, Node.QUOTED_PROP);
2349:       assertEquals(57, Node.LAST_PROP);
2350:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2351:       assertEquals(52, Node.LENGTH);
2352:       assertEquals(53, Node.INPUT_ID);
2353:       assertEquals(55, Node.INFERRED_FUNCTION);
2354:       assertEquals(8, Node.FLAG_NO_THROWS);
2355:       assertEquals(39, Node.EMPTY_BLOCK);
2356:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2357:       assertFalse(node3.equals((Object)node1));
2358:       assertFalse(node3.equals((Object)node0));
2359:       assertFalse(node3.equals((Object)node2));
2360:       assertFalse(boolean5 == boolean3);
2361:       assertTrue(boolean5 == boolean0);
2362:       assertTrue(boolean5 == boolean4);
2363:       assertTrue(boolean5 == boolean1);
2364:       assertTrue(boolean5 == boolean2);
2365:       assertNotSame(node3, node1);
2366:       assertFalse(boolean5);
2367:       
2368:       boolean boolean6 = node0.isQualifiedName();
2369:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2370:       assertEquals(50, Node.FREE_CALL);
2371:       assertEquals(40, Node.ORIGINALNAME_PROP);
2372:       assertEquals(8, Node.FLAG_NO_THROWS);
2373:       assertEquals(39, Node.EMPTY_BLOCK);
2374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2375:       assertEquals(52, Node.LENGTH);
2376:       assertEquals(48, Node.DIRECTIVES);
2377:       assertEquals(57, Node.REFLECTED_OBJECT);
2378:       assertEquals(54, Node.SLASH_V);
2379:       assertEquals(49, Node.DIRECT_EVAL);
2380:       assertEquals(1, Node.DECR_FLAG);
2381:       assertEquals(4095, Node.COLUMN_MASK);
2382:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2383:       assertEquals(32, Node.INCRDECR_PROP);
2384:       assertEquals(12, Node.COLUMN_BITS);
2385:       assertEquals(29, Node.JSDOC_INFO_PROP);
2386:       assertEquals(2, Node.POST_FLAG);
2387:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2388:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2389:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2390:       assertEquals(37, Node.OPT_ARG_NAME);
2391:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2392:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2393:       assertEquals(46, Node.IS_NAMESPACE);
2394:       assertEquals(43, Node.IS_CONSTANT_NAME);
2395:       assertEquals(56, Node.CHANGE_TIME);
2396:       assertEquals(30, Node.VAR_ARGS_NAME);
2397:       assertEquals(36, Node.QUOTED_PROP);
2398:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2399:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2400:       assertEquals(55, Node.INFERRED_FUNCTION);
2401:       assertEquals(53, Node.INPUT_ID);
2402:       assertEquals(47, Node.IS_DISPATCHER);
2403:       assertEquals(57, Node.LAST_PROP);
2404:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2405:       assertFalse(node0.equals((Object)node3));
2406:       assertFalse(node0.equals((Object)node1));
2407:       assertTrue(boolean6 == boolean2);
2408:       assertTrue(boolean6 == boolean1);
2409:       assertTrue(boolean6 == boolean5);
2410:       assertTrue(boolean6 == boolean0);
2411:       assertTrue(boolean6 == boolean4);
2412:       assertFalse(boolean6 == boolean3);
2413:       assertSame(node0, node2);
2414:       assertFalse(boolean6);
2415:       
2416:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
2417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2418:       assertEquals(50, Node.FREE_CALL);
2419:       assertEquals(40, Node.ORIGINALNAME_PROP);
2420:       assertEquals(8, Node.FLAG_NO_THROWS);
2421:       assertEquals(39, Node.EMPTY_BLOCK);
2422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2423:       assertEquals(52, Node.LENGTH);
2424:       assertEquals(48, Node.DIRECTIVES);
2425:       assertEquals(57, Node.REFLECTED_OBJECT);
2426:       assertEquals(54, Node.SLASH_V);
2427:       assertEquals(49, Node.DIRECT_EVAL);
2428:       assertEquals(1, Node.DECR_FLAG);
2429:       assertEquals(4095, Node.COLUMN_MASK);
2430:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2431:       assertEquals(32, Node.INCRDECR_PROP);
2432:       assertEquals(12, Node.COLUMN_BITS);
2433:       assertEquals(29, Node.JSDOC_INFO_PROP);
2434:       assertEquals(2, Node.POST_FLAG);
2435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2438:       assertEquals(37, Node.OPT_ARG_NAME);
2439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2440:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2441:       assertEquals(46, Node.IS_NAMESPACE);
2442:       assertEquals(43, Node.IS_CONSTANT_NAME);
2443:       assertEquals(56, Node.CHANGE_TIME);
2444:       assertEquals(30, Node.VAR_ARGS_NAME);
2445:       assertEquals(36, Node.QUOTED_PROP);
2446:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2448:       assertEquals(55, Node.INFERRED_FUNCTION);
2449:       assertEquals(53, Node.INPUT_ID);
2450:       assertEquals(47, Node.IS_DISPATCHER);
2451:       assertEquals(57, Node.LAST_PROP);
2452:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2453:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2454:       assertEquals(43, Node.IS_CONSTANT_NAME);
2455:       assertEquals(36, Node.QUOTED_PROP);
2456:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2457:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2458:       assertEquals(55, Node.INFERRED_FUNCTION);
2459:       assertEquals(29, Node.JSDOC_INFO_PROP);
2460:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2461:       assertEquals(53, Node.INPUT_ID);
2462:       assertEquals(2, Node.POST_FLAG);
2463:       assertEquals(47, Node.IS_DISPATCHER);
2464:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2465:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2466:       assertEquals(46, Node.IS_NAMESPACE);
2467:       assertEquals(30, Node.VAR_ARGS_NAME);
2468:       assertEquals(40, Node.ORIGINALNAME_PROP);
2469:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2470:       assertEquals(52, Node.LENGTH);
2471:       assertEquals(57, Node.LAST_PROP);
2472:       assertEquals(57, Node.REFLECTED_OBJECT);
2473:       assertEquals(54, Node.SLASH_V);
2474:       assertEquals(1, Node.DECR_FLAG);
2475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2476:       assertEquals(50, Node.FREE_CALL);
2477:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2478:       assertEquals(39, Node.EMPTY_BLOCK);
2479:       assertEquals(48, Node.DIRECTIVES);
2480:       assertEquals(37, Node.OPT_ARG_NAME);
2481:       assertEquals(8, Node.FLAG_NO_THROWS);
2482:       assertEquals(32, Node.INCRDECR_PROP);
2483:       assertEquals(56, Node.CHANGE_TIME);
2484:       assertEquals(12, Node.COLUMN_BITS);
2485:       assertEquals(49, Node.DIRECT_EVAL);
2486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2487:       assertEquals(4095, Node.COLUMN_MASK);
2488:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2489:       assertEquals(48, Node.DIRECTIVES);
2490:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2491:       assertEquals(39, Node.EMPTY_BLOCK);
2492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2493:       assertEquals(50, Node.FREE_CALL);
2494:       assertEquals(4095, Node.COLUMN_MASK);
2495:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2496:       assertEquals(8, Node.FLAG_NO_THROWS);
2497:       assertEquals(40, Node.ORIGINALNAME_PROP);
2498:       assertEquals(57, Node.REFLECTED_OBJECT);
2499:       assertEquals(43, Node.IS_CONSTANT_NAME);
2500:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2501:       assertEquals(36, Node.QUOTED_PROP);
2502:       assertEquals(53, Node.INPUT_ID);
2503:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2504:       assertEquals(30, Node.VAR_ARGS_NAME);
2505:       assertEquals(52, Node.LENGTH);
2506:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2507:       assertEquals(55, Node.INFERRED_FUNCTION);
2508:       assertEquals(29, Node.JSDOC_INFO_PROP);
2509:       assertEquals(57, Node.LAST_PROP);
2510:       assertEquals(37, Node.OPT_ARG_NAME);
2511:       assertEquals(2, Node.POST_FLAG);
2512:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2513:       assertEquals(47, Node.IS_DISPATCHER);
2514:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2515:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2516:       assertEquals(46, Node.IS_NAMESPACE);
2517:       assertEquals(56, Node.CHANGE_TIME);
2518:       assertEquals(49, Node.DIRECT_EVAL);
2519:       assertEquals(54, Node.SLASH_V);
2520:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2521:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2522:       assertEquals(1, Node.DECR_FLAG);
2523:       assertEquals(12, Node.COLUMN_BITS);
2524:       assertEquals(32, Node.INCRDECR_PROP);
2525:       assertFalse(node0.equals((Object)node3));
2526:       assertFalse(node0.equals((Object)node1));
2527:       assertFalse(node1.equals((Object)node0));
2528:       assertFalse(node1.equals((Object)node3));
2529:       assertFalse(node1.equals((Object)node2));
2530:       assertFalse(node2.equals((Object)node3));
2531:       assertFalse(node2.equals((Object)node1));
2532:       assertNull(node_NodeMismatch0);
2533:       assertSame(node0, node2);
2534:       assertNotSame(node1, node3);
2535:       assertSame(node2, node0);
2536:   }
2537: }
RegularFileObject[/tmp/EvoSuite_291_1628159606634/com/google/javascript/rhino/Node_291_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:26 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_291_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_291_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_291_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:27.325 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node0);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());

boolean boolean0 = node0.isDefaultCase();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(boolean0);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());

Node node1 = new Node(42, node0, node0, node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertEquals(42, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());

boolean boolean1 = node1.isEquivalentToTyped(node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertEquals(42, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());

Node node2 = node0.srcrefTree(node1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertEquals(42, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isFor());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());

boolean boolean2 = node1.isCase();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertSame(node0, node2);
assertFalse(boolean2);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertEquals(42, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node1));
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());

node_FileLevelJsDocBuilder0.append("@OARlm%7gewnZs`H)");
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node1));
assertSame(node0, node2);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());

String string0 = node0.getSourceFileName();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node1));
assertNull(string0);
assertSame(node0, node2);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());

int int0 = node1.getLineno();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertSame(node0, node2);
assertEquals((-1), int0);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertEquals(42, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());

boolean boolean3 = node2.mayMutateArguments();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertSame(node0, node2);
assertSame(node2, node0);
assertTrue(boolean3);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertTrue(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertEquals(42, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isFor());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());

Iterable<Node> iterable0 = node2.children();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertNotNull(iterable0);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());

Node node3 = new Node((-476), 10, 56);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertNotNull(node3);

boolean boolean4 = node1.isRegExp();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertSame(node0, node2);
assertNotSame(node1, node3);
assertFalse(boolean4);

boolean boolean5 = node3.isOnlyModifiesThisCall();
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertNotSame(node3, node1);
assertFalse(boolean5);

boolean boolean6 = node0.isQualifiedName();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean4);
assertFalse(boolean6 == boolean3);
assertSame(node0, node2);
assertFalse(boolean6);

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertNull(node_NodeMismatch0);
assertSame(node0, node2);
assertNotSame(node1, node3);
assertSame(node2, node0);


[MASTER] 10:33:32.980 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_345_1628159612832/com/google/javascript/rhino/Node_345_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_345_1628159612832/com/google/javascript/rhino/Node_345_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:32.980 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:32.980 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:32.981 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1088
[MASTER] 10:33:32.982 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_345_1628159612832/com/google/javascript/rhino/Node_345_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ImmutableList;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.InputId;
13: import com.google.javascript.rhino.Node;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import java.util.List;
17: import java.util.Stack;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_345_tmp__ESTest extends Node_345_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
28:       assertNotNull(jSTypeRegistry0);
29:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
30:       
31:       Stack<JSType> stack0 = new Stack<JSType>();
32:       assertNotNull(stack0);
33:       assertEquals(10, stack0.capacity());
34:       assertEquals("[]", stack0.toString());
35:       assertTrue(stack0.isEmpty());
36:       assertEquals(0, stack0.size());
37:       assertTrue(stack0.empty());
38:       
39:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
40:       assertEquals(43, Node.IS_CONSTANT_NAME);
41:       assertEquals(36, Node.QUOTED_PROP);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(4095, Node.COLUMN_MASK);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(39, Node.EMPTY_BLOCK);
48:       assertEquals(47, Node.IS_DISPATCHER);
49:       assertEquals(56, Node.CHANGE_TIME);
50:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
51:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
52:       assertEquals(2, Node.POST_FLAG);
53:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(29, Node.JSDOC_INFO_PROP);
56:       assertEquals(53, Node.INPUT_ID);
57:       assertEquals(15, Node.NO_SIDE_EFFECTS);
58:       assertEquals(57, Node.LAST_PROP);
59:       assertEquals(54, Node.SLASH_V);
60:       assertEquals(52, Node.LENGTH);
61:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
62:       assertEquals(30, Node.VAR_ARGS_NAME);
63:       assertEquals(51, Node.STATIC_SOURCE_FILE);
64:       assertEquals(57, Node.REFLECTED_OBJECT);
65:       assertEquals(40, Node.ORIGINALNAME_PROP);
66:       assertEquals(46, Node.IS_NAMESPACE);
67:       assertEquals(49, Node.DIRECT_EVAL);
68:       assertEquals(37, Node.OPT_ARG_NAME);
69:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
70:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
71:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
72:       assertEquals(50, Node.FREE_CALL);
73:       assertEquals(12, Node.COLUMN_BITS);
74:       assertEquals(32, Node.INCRDECR_PROP);
75:       assertEquals(1, Node.DECR_FLAG);
76:       assertNotNull(node0);
77:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
78:       assertEquals(10, stack0.capacity());
79:       assertEquals("[]", stack0.toString());
80:       assertTrue(stack0.isEmpty());
81:       assertEquals(0, stack0.size());
82:       assertTrue(stack0.empty());
83:       assertFalse(node0.isCatch());
84:       assertFalse(node0.isFunction());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.isArrayLit());
87:       assertFalse(node0.isDebugger());
88:       assertFalse(node0.isTrue());
89:       assertFalse(node0.isVoid());
90:       assertFalse(node0.isDelProp());
91:       assertFalse(node0.isFor());
92:       assertFalse(node0.isGetterDef());
93:       assertFalse(node0.isCall());
94:       assertFalse(node0.isTry());
95:       assertFalse(node0.isBlock());
96:       assertFalse(node0.isWhile());
97:       assertFalse(node0.isDo());
98:       assertFalse(node0.isCase());
99:       assertFalse(node0.isOr());
100:       assertEquals((-1), node0.getCharno());
101:       assertFalse(node0.isStringKey());
102:       assertFalse(node0.isName());
103:       assertFalse(node0.isSwitch());
104:       assertFalse(node0.isLabelName());
105:       assertFalse(node0.isEmpty());
106:       assertFalse(node0.isNull());
107:       assertEquals(83, node0.getType());
108:       assertFalse(node0.isAdd());
109:       assertEquals(0, node0.getChildCount());
110:       assertFalse(node0.isNew());
111:       assertFalse(node0.isLabel());
112:       assertFalse(node0.isVar());
113:       assertFalse(node0.isAssignAdd());
114:       assertFalse(node0.isDefaultCase());
115:       assertFalse(node0.isWith());
116:       assertFalse(node0.isNot());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.isScript());
119:       assertFalse(node0.isObjectLit());
120:       assertTrue(node0.isParamList());
121:       assertFalse(node0.isInstanceOf());
122:       assertFalse(node0.isAnd());
123:       assertFalse(node0.isAssign());
124:       assertFalse(node0.isDec());
125:       assertFalse(node0.isGetElem());
126:       assertEquals((-1), node0.getSourcePosition());
127:       assertFalse(node0.hasChildren());
128:       assertFalse(node0.isBreak());
129:       assertFalse(node0.isComma());
130:       assertFalse(node0.isTypeOf());
131:       assertFalse(node0.isNumber());
132:       assertFalse(node0.isReturn());
133:       assertFalse(node0.hasOneChild());
134:       assertFalse(node0.isHook());
135:       assertFalse(node0.isGetProp());
136:       assertFalse(node0.isThis());
137:       assertFalse(node0.isString());
138:       assertFalse(node0.hasMoreThanOneChild());
139:       assertFalse(node0.isInc());
140:       assertFalse(node0.isContinue());
141:       assertFalse(node0.isIn());
142:       assertEquals((-1), node0.getLineno());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isIf());
145:       assertFalse(node0.isSetterDef());
146:       assertFalse(node0.isCast());
147:       assertFalse(node0.isFalse());
148:       assertFalse(node0.isThrow());
149:       
150:       Node node1 = new Node(49, node0, node0);
151:       assertEquals(43, Node.IS_CONSTANT_NAME);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(48, Node.DIRECTIVES);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(39, Node.EMPTY_BLOCK);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(56, Node.CHANGE_TIME);
161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
163:       assertEquals(2, Node.POST_FLAG);
164:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
165:       assertEquals(55, Node.INFERRED_FUNCTION);
166:       assertEquals(29, Node.JSDOC_INFO_PROP);
167:       assertEquals(53, Node.INPUT_ID);
168:       assertEquals(15, Node.NO_SIDE_EFFECTS);
169:       assertEquals(57, Node.LAST_PROP);
170:       assertEquals(54, Node.SLASH_V);
171:       assertEquals(52, Node.LENGTH);
172:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
173:       assertEquals(30, Node.VAR_ARGS_NAME);
174:       assertEquals(51, Node.STATIC_SOURCE_FILE);
175:       assertEquals(57, Node.REFLECTED_OBJECT);
176:       assertEquals(40, Node.ORIGINALNAME_PROP);
177:       assertEquals(46, Node.IS_NAMESPACE);
178:       assertEquals(49, Node.DIRECT_EVAL);
179:       assertEquals(37, Node.OPT_ARG_NAME);
180:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
182:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
183:       assertEquals(50, Node.FREE_CALL);
184:       assertEquals(12, Node.COLUMN_BITS);
185:       assertEquals(32, Node.INCRDECR_PROP);
186:       assertEquals(1, Node.DECR_FLAG);
187:       assertEquals(40, Node.ORIGINALNAME_PROP);
188:       assertEquals(57, Node.REFLECTED_OBJECT);
189:       assertEquals(54, Node.SLASH_V);
190:       assertEquals(8, Node.FLAG_NO_THROWS);
191:       assertEquals(39, Node.EMPTY_BLOCK);
192:       assertEquals(15, Node.NO_SIDE_EFFECTS);
193:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
194:       assertEquals(52, Node.LENGTH);
195:       assertEquals(50, Node.FREE_CALL);
196:       assertEquals(4095, Node.COLUMN_MASK);
197:       assertEquals(12, Node.COLUMN_BITS);
198:       assertEquals(1, Node.DECR_FLAG);
199:       assertEquals(49, Node.DIRECT_EVAL);
200:       assertEquals(32, Node.INCRDECR_PROP);
201:       assertEquals(48, Node.DIRECTIVES);
202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
203:       assertEquals(37, Node.OPT_ARG_NAME);
204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
207:       assertEquals(56, Node.CHANGE_TIME);
208:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
209:       assertEquals(36, Node.QUOTED_PROP);
210:       assertEquals(29, Node.JSDOC_INFO_PROP);
211:       assertEquals(53, Node.INPUT_ID);
212:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
214:       assertEquals(55, Node.INFERRED_FUNCTION);
215:       assertEquals(51, Node.STATIC_SOURCE_FILE);
216:       assertEquals(57, Node.LAST_PROP);
217:       assertEquals(46, Node.IS_NAMESPACE);
218:       assertEquals(43, Node.IS_CONSTANT_NAME);
219:       assertEquals(2, Node.POST_FLAG);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(47, Node.IS_DISPATCHER);
222:       assertEquals(30, Node.VAR_ARGS_NAME);
223:       assertFalse(node1.equals((Object)node0));
224:       assertNotNull(node1);
225:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
226:       assertEquals(10, stack0.capacity());
227:       assertEquals("[]", stack0.toString());
228:       assertTrue(stack0.isEmpty());
229:       assertEquals(0, stack0.size());
230:       assertTrue(stack0.empty());
231:       assertFalse(node0.isCatch());
232:       assertFalse(node0.isFunction());
233:       assertFalse(node0.isRegExp());
234:       assertFalse(node0.isArrayLit());
235:       assertFalse(node0.isDebugger());
236:       assertFalse(node0.isTrue());
237:       assertFalse(node0.isVoid());
238:       assertFalse(node0.isDelProp());
239:       assertFalse(node0.isFor());
240:       assertFalse(node0.isGetterDef());
241:       assertFalse(node0.isCall());
242:       assertFalse(node0.isTry());
243:       assertFalse(node0.isBlock());
244:       assertFalse(node0.isWhile());
245:       assertFalse(node0.isDo());
246:       assertFalse(node0.isCase());
247:       assertFalse(node0.isOr());
248:       assertEquals((-1), node0.getCharno());
249:       assertFalse(node0.isStringKey());
250:       assertFalse(node0.isName());
251:       assertFalse(node0.isSwitch());
252:       assertFalse(node0.isLabelName());
253:       assertFalse(node0.isEmpty());
254:       assertFalse(node0.isNull());
255:       assertEquals(83, node0.getType());
256:       assertFalse(node0.isAdd());
257:       assertEquals(0, node0.getChildCount());
258:       assertFalse(node0.isNew());
259:       assertFalse(node0.isLabel());
260:       assertFalse(node0.isVar());
261:       assertFalse(node0.isAssignAdd());
262:       assertFalse(node0.isDefaultCase());
263:       assertFalse(node0.isWith());
264:       assertFalse(node0.isNot());
265:       assertFalse(node0.isExprResult());
266:       assertFalse(node0.isScript());
267:       assertFalse(node0.isObjectLit());
268:       assertTrue(node0.isParamList());
269:       assertFalse(node0.isInstanceOf());
270:       assertFalse(node0.isAnd());
271:       assertFalse(node0.isAssign());
272:       assertFalse(node0.isDec());
273:       assertFalse(node0.isGetElem());
274:       assertEquals((-1), node0.getSourcePosition());
275:       assertFalse(node0.hasChildren());
276:       assertFalse(node0.isBreak());
277:       assertFalse(node0.isComma());
278:       assertFalse(node0.isTypeOf());
279:       assertFalse(node0.isNumber());
280:       assertFalse(node0.isReturn());
281:       assertFalse(node0.hasOneChild());
282:       assertFalse(node0.isHook());
283:       assertFalse(node0.isGetProp());
284:       assertFalse(node0.isThis());
285:       assertFalse(node0.isString());
286:       assertFalse(node0.hasMoreThanOneChild());
287:       assertFalse(node0.isInc());
288:       assertFalse(node0.isContinue());
289:       assertFalse(node0.isIn());
290:       assertEquals((-1), node0.getLineno());
291:       assertFalse(node0.isNE());
292:       assertFalse(node0.isIf());
293:       assertFalse(node0.isSetterDef());
294:       assertFalse(node0.isCast());
295:       assertFalse(node0.isFalse());
296:       assertFalse(node0.isThrow());
297:       assertEquals((-1), node1.getCharno());
298:       assertFalse(node1.isHook());
299:       assertFalse(node1.isString());
300:       assertFalse(node1.isCase());
301:       assertFalse(node1.isGetProp());
302:       assertFalse(node1.isInc());
303:       assertFalse(node1.isAnd());
304:       assertFalse(node1.isObjectLit());
305:       assertFalse(node1.isSwitch());
306:       assertFalse(node1.isFalse());
307:       assertFalse(node1.isArrayLit());
308:       assertFalse(node1.isTry());
309:       assertFalse(node1.isFor());
310:       assertFalse(node1.isGetterDef());
311:       assertFalse(node1.isNumber());
312:       assertFalse(node1.isScript());
313:       assertEquals(1, node1.getChildCount());
314:       assertEquals((-1), node1.getLineno());
315:       assertFalse(node1.isInstanceOf());
316:       assertFalse(node1.hasMoreThanOneChild());
317:       assertFalse(node1.isIn());
318:       assertFalse(node1.isNE());
319:       assertFalse(node1.isThis());
320:       assertFalse(node1.isRegExp());
321:       assertFalse(node1.isWith());
322:       assertFalse(node1.isIf());
323:       assertFalse(node1.isCatch());
324:       assertTrue(node1.hasChildren());
325:       assertFalse(node1.isStringKey());
326:       assertFalse(node1.isBlock());
327:       assertFalse(node1.isVar());
328:       assertFalse(node1.isWhile());
329:       assertFalse(node1.isDo());
330:       assertFalse(node1.isNew());
331:       assertFalse(node1.isAdd());
332:       assertFalse(node1.isSetterDef());
333:       assertFalse(node1.isAssignAdd());
334:       assertFalse(node1.isParamList());
335:       assertFalse(node1.isLabel());
336:       assertEquals((-1), node1.getSourcePosition());
337:       assertFalse(node1.isLabelName());
338:       assertFalse(node1.isFunction());
339:       assertTrue(node1.isThrow());
340:       assertFalse(node1.isContinue());
341:       assertFalse(node1.isCast());
342:       assertFalse(node1.isTrue());
343:       assertFalse(node1.isDebugger());
344:       assertTrue(node1.hasOneChild());
345:       assertFalse(node1.isNot());
346:       assertFalse(node1.isDefaultCase());
347:       assertEquals(49, node1.getType());
348:       assertFalse(node1.isEmpty());
349:       assertFalse(node1.isOr());
350:       assertFalse(node1.isComma());
351:       assertFalse(node1.isNull());
352:       assertFalse(node1.isReturn());
353:       assertFalse(node1.isBreak());
354:       assertFalse(node1.isDelProp());
355:       assertFalse(node1.isDec());
356:       assertFalse(node1.isAssign());
357:       assertFalse(node1.isTypeOf());
358:       assertFalse(node1.isName());
359:       assertFalse(node1.isExprResult());
360:       assertFalse(node1.isVoid());
361:       assertFalse(node1.isCall());
362:       assertFalse(node1.isGetElem());
363:       
364:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) stack0);
365:       assertNotNull(immutableList0);
366:       assertEquals(10, stack0.capacity());
367:       assertEquals("[]", stack0.toString());
368:       assertTrue(stack0.isEmpty());
369:       assertEquals(0, stack0.size());
370:       assertTrue(stack0.empty());
371:       assertEquals(0, immutableList0.size());
372:       
373:       Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
374:       assertEquals(37, Node.OPT_ARG_NAME);
375:       assertEquals(32, Node.INCRDECR_PROP);
376:       assertEquals(2, Node.POST_FLAG);
377:       assertEquals(51, Node.STATIC_SOURCE_FILE);
378:       assertEquals(12, Node.COLUMN_BITS);
379:       assertEquals(47, Node.IS_DISPATCHER);
380:       assertEquals(46, Node.IS_NAMESPACE);
381:       assertEquals(56, Node.CHANGE_TIME);
382:       assertEquals(30, Node.VAR_ARGS_NAME);
383:       assertEquals(49, Node.DIRECT_EVAL);
384:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
386:       assertEquals(43, Node.IS_CONSTANT_NAME);
387:       assertEquals(54, Node.SLASH_V);
388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
389:       assertEquals(50, Node.FREE_CALL);
390:       assertEquals(1, Node.DECR_FLAG);
391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
392:       assertEquals(48, Node.DIRECTIVES);
393:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
394:       assertEquals(4095, Node.COLUMN_MASK);
395:       assertEquals(40, Node.ORIGINALNAME_PROP);
396:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
397:       assertEquals(53, Node.INPUT_ID);
398:       assertEquals(52, Node.LENGTH);
399:       assertEquals(36, Node.QUOTED_PROP);
400:       assertEquals(57, Node.REFLECTED_OBJECT);
401:       assertEquals(57, Node.LAST_PROP);
402:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
403:       assertEquals(29, Node.JSDOC_INFO_PROP);
404:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
406:       assertEquals(8, Node.FLAG_NO_THROWS);
407:       assertEquals(39, Node.EMPTY_BLOCK);
408:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
409:       assertEquals(55, Node.INFERRED_FUNCTION);
410:       assertFalse(node2.equals((Object)node1));
411:       assertFalse(node2.equals((Object)node0));
412:       assertNotNull(node2);
413:       assertNotSame(node2, node1);
414:       assertNotSame(node2, node0);
415:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
416:       assertEquals(10, stack0.capacity());
417:       assertEquals("[]", stack0.toString());
418:       assertTrue(stack0.isEmpty());
419:       assertEquals(0, stack0.size());
420:       assertTrue(stack0.empty());
421:       assertEquals(0, immutableList0.size());
422:       assertFalse(node2.isTypeOf());
423:       assertFalse(node2.isNumber());
424:       assertFalse(node2.isAssignAdd());
425:       assertFalse(node2.isReturn());
426:       assertFalse(node2.isAssign());
427:       assertFalse(node2.isOr());
428:       assertFalse(node2.isDec());
429:       assertEquals((-1), node2.getSourcePosition());
430:       assertFalse(node2.isLabel());
431:       assertFalse(node2.hasChildren());
432:       assertFalse(node2.hasMoreThanOneChild());
433:       assertFalse(node2.isCast());
434:       assertFalse(node2.isContinue());
435:       assertEquals((-1), node2.getLineno());
436:       assertFalse(node2.isLabelName());
437:       assertFalse(node2.isGetElem());
438:       assertFalse(node2.isVar());
439:       assertFalse(node2.isDo());
440:       assertFalse(node2.isAdd());
441:       assertFalse(node2.isNew());
442:       assertFalse(node2.isThis());
443:       assertFalse(node2.isSetterDef());
444:       assertEquals(0, node2.getChildCount());
445:       assertFalse(node2.isCatch());
446:       assertFalse(node2.isStringKey());
447:       assertFalse(node2.isInstanceOf());
448:       assertFalse(node2.isScript());
449:       assertFalse(node2.isRegExp());
450:       assertFalse(node2.isSwitch());
451:       assertFalse(node2.isWith());
452:       assertFalse(node2.isBlock());
453:       assertFalse(node2.isHook());
454:       assertEquals((-1), node2.getCharno());
455:       assertFalse(node2.isTry());
456:       assertFalse(node2.hasOneChild());
457:       assertFalse(node2.isCase());
458:       assertFalse(node2.isNE());
459:       assertFalse(node2.isIf());
460:       assertFalse(node2.isFor());
461:       assertFalse(node2.isGetterDef());
462:       assertFalse(node2.isDelProp());
463:       assertFalse(node2.isArrayLit());
464:       assertFalse(node2.isTrue());
465:       assertFalse(node2.isFunction());
466:       assertFalse(node2.isInc());
467:       assertFalse(node2.isVoid());
468:       assertFalse(node2.isDefaultCase());
469:       assertFalse(node2.isThrow());
470:       assertFalse(node2.isIn());
471:       assertFalse(node2.isEmpty());
472:       assertFalse(node2.isComma());
473:       assertEquals(83, node2.getType());
474:       assertFalse(node2.isNull());
475:       assertFalse(node2.isCall());
476:       assertFalse(node2.isName());
477:       assertFalse(node2.isFalse());
478:       assertFalse(node2.isAnd());
479:       assertFalse(node2.isBreak());
480:       assertFalse(node2.isExprResult());
481:       assertFalse(node2.isWhile());
482:       assertFalse(node2.isNot());
483:       assertFalse(node2.isDebugger());
484:       assertFalse(node2.isObjectLit());
485:       assertTrue(node2.isParamList());
486:       assertFalse(node2.isString());
487:       assertFalse(node2.isGetProp());
488:       
489:       boolean boolean0 = node1.hasMoreThanOneChild();
490:       assertEquals(43, Node.IS_CONSTANT_NAME);
491:       assertEquals(36, Node.QUOTED_PROP);
492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
493:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
494:       assertEquals(4095, Node.COLUMN_MASK);
495:       assertEquals(48, Node.DIRECTIVES);
496:       assertEquals(8, Node.FLAG_NO_THROWS);
497:       assertEquals(39, Node.EMPTY_BLOCK);
498:       assertEquals(47, Node.IS_DISPATCHER);
499:       assertEquals(56, Node.CHANGE_TIME);
500:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
501:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
502:       assertEquals(2, Node.POST_FLAG);
503:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
504:       assertEquals(55, Node.INFERRED_FUNCTION);
505:       assertEquals(29, Node.JSDOC_INFO_PROP);
506:       assertEquals(53, Node.INPUT_ID);
507:       assertEquals(15, Node.NO_SIDE_EFFECTS);
508:       assertEquals(57, Node.LAST_PROP);
509:       assertEquals(54, Node.SLASH_V);
510:       assertEquals(52, Node.LENGTH);
511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
512:       assertEquals(30, Node.VAR_ARGS_NAME);
513:       assertEquals(51, Node.STATIC_SOURCE_FILE);
514:       assertEquals(57, Node.REFLECTED_OBJECT);
515:       assertEquals(40, Node.ORIGINALNAME_PROP);
516:       assertEquals(46, Node.IS_NAMESPACE);
517:       assertEquals(49, Node.DIRECT_EVAL);
518:       assertEquals(37, Node.OPT_ARG_NAME);
519:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
522:       assertEquals(50, Node.FREE_CALL);
523:       assertEquals(12, Node.COLUMN_BITS);
524:       assertEquals(32, Node.INCRDECR_PROP);
525:       assertEquals(1, Node.DECR_FLAG);
526:       assertEquals(40, Node.ORIGINALNAME_PROP);
527:       assertEquals(57, Node.REFLECTED_OBJECT);
528:       assertEquals(54, Node.SLASH_V);
529:       assertEquals(8, Node.FLAG_NO_THROWS);
530:       assertEquals(39, Node.EMPTY_BLOCK);
531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
532:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
533:       assertEquals(52, Node.LENGTH);
534:       assertEquals(50, Node.FREE_CALL);
535:       assertEquals(4095, Node.COLUMN_MASK);
536:       assertEquals(12, Node.COLUMN_BITS);
537:       assertEquals(1, Node.DECR_FLAG);
538:       assertEquals(49, Node.DIRECT_EVAL);
539:       assertEquals(32, Node.INCRDECR_PROP);
540:       assertEquals(48, Node.DIRECTIVES);
541:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
542:       assertEquals(37, Node.OPT_ARG_NAME);
543:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
544:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
545:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
546:       assertEquals(56, Node.CHANGE_TIME);
547:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
548:       assertEquals(36, Node.QUOTED_PROP);
549:       assertEquals(29, Node.JSDOC_INFO_PROP);
550:       assertEquals(53, Node.INPUT_ID);
551:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
552:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
553:       assertEquals(55, Node.INFERRED_FUNCTION);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       assertEquals(57, Node.LAST_PROP);
556:       assertEquals(46, Node.IS_NAMESPACE);
557:       assertEquals(43, Node.IS_CONSTANT_NAME);
558:       assertEquals(2, Node.POST_FLAG);
559:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
560:       assertEquals(47, Node.IS_DISPATCHER);
561:       assertEquals(30, Node.VAR_ARGS_NAME);
562:       assertFalse(node0.equals((Object)node1));
563:       assertFalse(node0.equals((Object)node2));
564:       assertFalse(node1.equals((Object)node2));
565:       assertFalse(node1.equals((Object)node0));
566:       assertNotSame(node0, node1);
567:       assertNotSame(node0, node2);
568:       assertNotSame(node1, node2);
569:       assertNotSame(node1, node0);
570:       assertFalse(boolean0);
571:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
572:       assertEquals(10, stack0.capacity());
573:       assertEquals("[]", stack0.toString());
574:       assertTrue(stack0.isEmpty());
575:       assertEquals(0, stack0.size());
576:       assertTrue(stack0.empty());
577:       assertFalse(node0.isCatch());
578:       assertFalse(node0.isFunction());
579:       assertFalse(node0.isRegExp());
580:       assertFalse(node0.isArrayLit());
581:       assertFalse(node0.isDebugger());
582:       assertFalse(node0.isTrue());
583:       assertFalse(node0.isVoid());
584:       assertFalse(node0.isDelProp());
585:       assertFalse(node0.isFor());
586:       assertFalse(node0.isGetterDef());
587:       assertFalse(node0.isCall());
588:       assertFalse(node0.isTry());
589:       assertFalse(node0.isBlock());
590:       assertFalse(node0.isWhile());
591:       assertFalse(node0.isDo());
592:       assertFalse(node0.isCase());
593:       assertFalse(node0.isOr());
594:       assertEquals((-1), node0.getCharno());
595:       assertFalse(node0.isStringKey());
596:       assertFalse(node0.isName());
597:       assertFalse(node0.isSwitch());
598:       assertFalse(node0.isLabelName());
599:       assertFalse(node0.isEmpty());
600:       assertFalse(node0.isNull());
601:       assertEquals(83, node0.getType());
602:       assertFalse(node0.isAdd());
603:       assertEquals(0, node0.getChildCount());
604:       assertFalse(node0.isNew());
605:       assertFalse(node0.isLabel());
606:       assertFalse(node0.isVar());
607:       assertFalse(node0.isAssignAdd());
608:       assertFalse(node0.isDefaultCase());
609:       assertFalse(node0.isWith());
610:       assertFalse(node0.isNot());
611:       assertFalse(node0.isExprResult());
612:       assertFalse(node0.isScript());
613:       assertFalse(node0.isObjectLit());
614:       assertTrue(node0.isParamList());
615:       assertFalse(node0.isInstanceOf());
616:       assertFalse(node0.isAnd());
617:       assertFalse(node0.isAssign());
618:       assertFalse(node0.isDec());
619:       assertFalse(node0.isGetElem());
620:       assertEquals((-1), node0.getSourcePosition());
621:       assertFalse(node0.hasChildren());
622:       assertFalse(node0.isBreak());
623:       assertFalse(node0.isComma());
624:       assertFalse(node0.isTypeOf());
625:       assertFalse(node0.isNumber());
626:       assertFalse(node0.isReturn());
627:       assertFalse(node0.hasOneChild());
628:       assertFalse(node0.isHook());
629:       assertFalse(node0.isGetProp());
630:       assertFalse(node0.isThis());
631:       assertFalse(node0.isString());
632:       assertFalse(node0.hasMoreThanOneChild());
633:       assertFalse(node0.isInc());
634:       assertFalse(node0.isContinue());
635:       assertFalse(node0.isIn());
636:       assertEquals((-1), node0.getLineno());
637:       assertFalse(node0.isNE());
638:       assertFalse(node0.isIf());
639:       assertFalse(node0.isSetterDef());
640:       assertFalse(node0.isCast());
641:       assertFalse(node0.isFalse());
642:       assertFalse(node0.isThrow());
643:       assertEquals((-1), node1.getCharno());
644:       assertFalse(node1.isHook());
645:       assertFalse(node1.isString());
646:       assertFalse(node1.isCase());
647:       assertFalse(node1.isGetProp());
648:       assertFalse(node1.isInc());
649:       assertFalse(node1.isAnd());
650:       assertFalse(node1.isObjectLit());
651:       assertFalse(node1.isSwitch());
652:       assertFalse(node1.isFalse());
653:       assertFalse(node1.isArrayLit());
654:       assertFalse(node1.isTry());
655:       assertFalse(node1.isFor());
656:       assertFalse(node1.isGetterDef());
657:       assertFalse(node1.isNumber());
658:       assertFalse(node1.isScript());
659:       assertEquals(1, node1.getChildCount());
660:       assertEquals((-1), node1.getLineno());
661:       assertFalse(node1.isInstanceOf());
662:       assertFalse(node1.hasMoreThanOneChild());
663:       assertFalse(node1.isIn());
664:       assertFalse(node1.isNE());
665:       assertFalse(node1.isThis());
666:       assertFalse(node1.isRegExp());
667:       assertFalse(node1.isWith());
668:       assertFalse(node1.isIf());
669:       assertFalse(node1.isCatch());
670:       assertTrue(node1.hasChildren());
671:       assertFalse(node1.isStringKey());
672:       assertFalse(node1.isBlock());
673:       assertFalse(node1.isVar());
674:       assertFalse(node1.isWhile());
675:       assertFalse(node1.isDo());
676:       assertFalse(node1.isNew());
677:       assertFalse(node1.isAdd());
678:       assertFalse(node1.isSetterDef());
679:       assertFalse(node1.isAssignAdd());
680:       assertFalse(node1.isParamList());
681:       assertFalse(node1.isLabel());
682:       assertEquals((-1), node1.getSourcePosition());
683:       assertFalse(node1.isLabelName());
684:       assertFalse(node1.isFunction());
685:       assertTrue(node1.isThrow());
686:       assertFalse(node1.isContinue());
687:       assertFalse(node1.isCast());
688:       assertFalse(node1.isTrue());
689:       assertFalse(node1.isDebugger());
690:       assertTrue(node1.hasOneChild());
691:       assertFalse(node1.isNot());
692:       assertFalse(node1.isDefaultCase());
693:       assertEquals(49, node1.getType());
694:       assertFalse(node1.isEmpty());
695:       assertFalse(node1.isOr());
696:       assertFalse(node1.isComma());
697:       assertFalse(node1.isNull());
698:       assertFalse(node1.isReturn());
699:       assertFalse(node1.isBreak());
700:       assertFalse(node1.isDelProp());
701:       assertFalse(node1.isDec());
702:       assertFalse(node1.isAssign());
703:       assertFalse(node1.isTypeOf());
704:       assertFalse(node1.isName());
705:       assertFalse(node1.isExprResult());
706:       assertFalse(node1.isVoid());
707:       assertFalse(node1.isCall());
708:       assertFalse(node1.isGetElem());
709:       
710:       node2.setChangeTime((-866));
711:       assertEquals(37, Node.OPT_ARG_NAME);
712:       assertEquals(32, Node.INCRDECR_PROP);
713:       assertEquals(2, Node.POST_FLAG);
714:       assertEquals(51, Node.STATIC_SOURCE_FILE);
715:       assertEquals(12, Node.COLUMN_BITS);
716:       assertEquals(47, Node.IS_DISPATCHER);
717:       assertEquals(46, Node.IS_NAMESPACE);
718:       assertEquals(56, Node.CHANGE_TIME);
719:       assertEquals(30, Node.VAR_ARGS_NAME);
720:       assertEquals(49, Node.DIRECT_EVAL);
721:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
722:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
723:       assertEquals(43, Node.IS_CONSTANT_NAME);
724:       assertEquals(54, Node.SLASH_V);
725:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
726:       assertEquals(50, Node.FREE_CALL);
727:       assertEquals(1, Node.DECR_FLAG);
728:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
731:       assertEquals(4095, Node.COLUMN_MASK);
732:       assertEquals(40, Node.ORIGINALNAME_PROP);
733:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
734:       assertEquals(53, Node.INPUT_ID);
735:       assertEquals(52, Node.LENGTH);
736:       assertEquals(36, Node.QUOTED_PROP);
737:       assertEquals(57, Node.REFLECTED_OBJECT);
738:       assertEquals(57, Node.LAST_PROP);
739:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
740:       assertEquals(29, Node.JSDOC_INFO_PROP);
741:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
742:       assertEquals(15, Node.NO_SIDE_EFFECTS);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(39, Node.EMPTY_BLOCK);
745:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
746:       assertEquals(55, Node.INFERRED_FUNCTION);
747:       assertFalse(node2.equals((Object)node1));
748:       assertFalse(node2.equals((Object)node0));
749:       assertNotSame(node2, node1);
750:       assertNotSame(node2, node0);
751:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
752:       assertEquals(10, stack0.capacity());
753:       assertEquals("[]", stack0.toString());
754:       assertTrue(stack0.isEmpty());
755:       assertEquals(0, stack0.size());
756:       assertTrue(stack0.empty());
757:       assertEquals(0, immutableList0.size());
758:       assertFalse(node2.isTypeOf());
759:       assertFalse(node2.isNumber());
760:       assertFalse(node2.isAssignAdd());
761:       assertFalse(node2.isReturn());
762:       assertFalse(node2.isAssign());
763:       assertFalse(node2.isOr());
764:       assertFalse(node2.isDec());
765:       assertEquals((-1), node2.getSourcePosition());
766:       assertFalse(node2.isLabel());
767:       assertFalse(node2.hasChildren());
768:       assertFalse(node2.hasMoreThanOneChild());
769:       assertFalse(node2.isCast());
770:       assertFalse(node2.isContinue());
771:       assertEquals((-1), node2.getLineno());
772:       assertFalse(node2.isLabelName());
773:       assertFalse(node2.isGetElem());
774:       assertFalse(node2.isVar());
775:       assertFalse(node2.isDo());
776:       assertFalse(node2.isAdd());
777:       assertFalse(node2.isNew());
778:       assertFalse(node2.isThis());
779:       assertFalse(node2.isSetterDef());
780:       assertEquals(0, node2.getChildCount());
781:       assertFalse(node2.isCatch());
782:       assertFalse(node2.isStringKey());
783:       assertFalse(node2.isInstanceOf());
784:       assertFalse(node2.isScript());
785:       assertFalse(node2.isRegExp());
786:       assertFalse(node2.isSwitch());
787:       assertFalse(node2.isWith());
788:       assertFalse(node2.isBlock());
789:       assertFalse(node2.isHook());
790:       assertEquals((-1), node2.getCharno());
791:       assertFalse(node2.isTry());
792:       assertFalse(node2.hasOneChild());
793:       assertFalse(node2.isCase());
794:       assertFalse(node2.isNE());
795:       assertFalse(node2.isIf());
796:       assertFalse(node2.isFor());
797:       assertFalse(node2.isGetterDef());
798:       assertFalse(node2.isDelProp());
799:       assertFalse(node2.isArrayLit());
800:       assertFalse(node2.isTrue());
801:       assertFalse(node2.isFunction());
802:       assertFalse(node2.isInc());
803:       assertFalse(node2.isVoid());
804:       assertFalse(node2.isDefaultCase());
805:       assertFalse(node2.isThrow());
806:       assertFalse(node2.isIn());
807:       assertFalse(node2.isEmpty());
808:       assertFalse(node2.isComma());
809:       assertEquals(83, node2.getType());
810:       assertFalse(node2.isNull());
811:       assertFalse(node2.isCall());
812:       assertFalse(node2.isName());
813:       assertFalse(node2.isFalse());
814:       assertFalse(node2.isAnd());
815:       assertFalse(node2.isBreak());
816:       assertFalse(node2.isExprResult());
817:       assertFalse(node2.isWhile());
818:       assertFalse(node2.isNot());
819:       assertFalse(node2.isDebugger());
820:       assertFalse(node2.isObjectLit());
821:       assertTrue(node2.isParamList());
822:       assertFalse(node2.isString());
823:       assertFalse(node2.isGetProp());
824:       
825:       InputId inputId0 = node1.getInputId();
826:       assertEquals(43, Node.IS_CONSTANT_NAME);
827:       assertEquals(36, Node.QUOTED_PROP);
828:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
829:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
830:       assertEquals(4095, Node.COLUMN_MASK);
831:       assertEquals(48, Node.DIRECTIVES);
832:       assertEquals(8, Node.FLAG_NO_THROWS);
833:       assertEquals(39, Node.EMPTY_BLOCK);
834:       assertEquals(47, Node.IS_DISPATCHER);
835:       assertEquals(56, Node.CHANGE_TIME);
836:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
837:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
838:       assertEquals(2, Node.POST_FLAG);
839:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
840:       assertEquals(55, Node.INFERRED_FUNCTION);
841:       assertEquals(29, Node.JSDOC_INFO_PROP);
842:       assertEquals(53, Node.INPUT_ID);
843:       assertEquals(15, Node.NO_SIDE_EFFECTS);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(54, Node.SLASH_V);
846:       assertEquals(52, Node.LENGTH);
847:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
848:       assertEquals(30, Node.VAR_ARGS_NAME);
849:       assertEquals(51, Node.STATIC_SOURCE_FILE);
850:       assertEquals(57, Node.REFLECTED_OBJECT);
851:       assertEquals(40, Node.ORIGINALNAME_PROP);
852:       assertEquals(46, Node.IS_NAMESPACE);
853:       assertEquals(49, Node.DIRECT_EVAL);
854:       assertEquals(37, Node.OPT_ARG_NAME);
855:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
857:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
858:       assertEquals(50, Node.FREE_CALL);
859:       assertEquals(12, Node.COLUMN_BITS);
860:       assertEquals(32, Node.INCRDECR_PROP);
861:       assertEquals(1, Node.DECR_FLAG);
862:       assertEquals(40, Node.ORIGINALNAME_PROP);
863:       assertEquals(57, Node.REFLECTED_OBJECT);
864:       assertEquals(54, Node.SLASH_V);
865:       assertEquals(8, Node.FLAG_NO_THROWS);
866:       assertEquals(39, Node.EMPTY_BLOCK);
867:       assertEquals(15, Node.NO_SIDE_EFFECTS);
868:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
869:       assertEquals(52, Node.LENGTH);
870:       assertEquals(50, Node.FREE_CALL);
871:       assertEquals(4095, Node.COLUMN_MASK);
872:       assertEquals(12, Node.COLUMN_BITS);
873:       assertEquals(1, Node.DECR_FLAG);
874:       assertEquals(49, Node.DIRECT_EVAL);
875:       assertEquals(32, Node.INCRDECR_PROP);
876:       assertEquals(48, Node.DIRECTIVES);
877:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
878:       assertEquals(37, Node.OPT_ARG_NAME);
879:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
880:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
881:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
882:       assertEquals(56, Node.CHANGE_TIME);
883:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
884:       assertEquals(36, Node.QUOTED_PROP);
885:       assertEquals(29, Node.JSDOC_INFO_PROP);
886:       assertEquals(53, Node.INPUT_ID);
887:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
888:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
889:       assertEquals(55, Node.INFERRED_FUNCTION);
890:       assertEquals(51, Node.STATIC_SOURCE_FILE);
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(46, Node.IS_NAMESPACE);
893:       assertEquals(43, Node.IS_CONSTANT_NAME);
894:       assertEquals(2, Node.POST_FLAG);
895:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
896:       assertEquals(47, Node.IS_DISPATCHER);
897:       assertEquals(30, Node.VAR_ARGS_NAME);
898:       assertFalse(node0.equals((Object)node1));
899:       assertFalse(node0.equals((Object)node2));
900:       assertFalse(node1.equals((Object)node2));
901:       assertFalse(node1.equals((Object)node0));
902:       assertNull(inputId0);
903:       assertNotSame(node0, node1);
904:       assertNotSame(node0, node2);
905:       assertNotSame(node1, node2);
906:       assertNotSame(node1, node0);
907:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
908:       assertEquals(10, stack0.capacity());
909:       assertEquals("[]", stack0.toString());
910:       assertTrue(stack0.isEmpty());
911:       assertEquals(0, stack0.size());
912:       assertTrue(stack0.empty());
913:       assertFalse(node0.isCatch());
914:       assertFalse(node0.isFunction());
915:       assertFalse(node0.isRegExp());
916:       assertFalse(node0.isArrayLit());
917:       assertFalse(node0.isDebugger());
918:       assertFalse(node0.isTrue());
919:       assertFalse(node0.isVoid());
920:       assertFalse(node0.isDelProp());
921:       assertFalse(node0.isFor());
922:       assertFalse(node0.isGetterDef());
923:       assertFalse(node0.isCall());
924:       assertFalse(node0.isTry());
925:       assertFalse(node0.isBlock());
926:       assertFalse(node0.isWhile());
927:       assertFalse(node0.isDo());
928:       assertFalse(node0.isCase());
929:       assertFalse(node0.isOr());
930:       assertEquals((-1), node0.getCharno());
931:       assertFalse(node0.isStringKey());
932:       assertFalse(node0.isName());
933:       assertFalse(node0.isSwitch());
934:       assertFalse(node0.isLabelName());
935:       assertFalse(node0.isEmpty());
936:       assertFalse(node0.isNull());
937:       assertEquals(83, node0.getType());
938:       assertFalse(node0.isAdd());
939:       assertEquals(0, node0.getChildCount());
940:       assertFalse(node0.isNew());
941:       assertFalse(node0.isLabel());
942:       assertFalse(node0.isVar());
943:       assertFalse(node0.isAssignAdd());
944:       assertFalse(node0.isDefaultCase());
945:       assertFalse(node0.isWith());
946:       assertFalse(node0.isNot());
947:       assertFalse(node0.isExprResult());
948:       assertFalse(node0.isScript());
949:       assertFalse(node0.isObjectLit());
950:       assertTrue(node0.isParamList());
951:       assertFalse(node0.isInstanceOf());
952:       assertFalse(node0.isAnd());
953:       assertFalse(node0.isAssign());
954:       assertFalse(node0.isDec());
955:       assertFalse(node0.isGetElem());
956:       assertEquals((-1), node0.getSourcePosition());
957:       assertFalse(node0.hasChildren());
958:       assertFalse(node0.isBreak());
959:       assertFalse(node0.isComma());
960:       assertFalse(node0.isTypeOf());
961:       assertFalse(node0.isNumber());
962:       assertFalse(node0.isReturn());
963:       assertFalse(node0.hasOneChild());
964:       assertFalse(node0.isHook());
965:       assertFalse(node0.isGetProp());
966:       assertFalse(node0.isThis());
967:       assertFalse(node0.isString());
968:       assertFalse(node0.hasMoreThanOneChild());
969:       assertFalse(node0.isInc());
970:       assertFalse(node0.isContinue());
971:       assertFalse(node0.isIn());
972:       assertEquals((-1), node0.getLineno());
973:       assertFalse(node0.isNE());
974:       assertFalse(node0.isIf());
975:       assertFalse(node0.isSetterDef());
976:       assertFalse(node0.isCast());
977:       assertFalse(node0.isFalse());
978:       assertFalse(node0.isThrow());
979:       assertEquals((-1), node1.getCharno());
980:       assertFalse(node1.isHook());
981:       assertFalse(node1.isString());
982:       assertFalse(node1.isCase());
983:       assertFalse(node1.isGetProp());
984:       assertFalse(node1.isInc());
985:       assertFalse(node1.isAnd());
986:       assertFalse(node1.isObjectLit());
987:       assertFalse(node1.isSwitch());
988:       assertFalse(node1.isFalse());
989:       assertFalse(node1.isArrayLit());
990:       assertFalse(node1.isTry());
991:       assertFalse(node1.isFor());
992:       assertFalse(node1.isGetterDef());
993:       assertFalse(node1.isNumber());
994:       assertFalse(node1.isScript());
995:       assertEquals(1, node1.getChildCount());
996:       assertEquals((-1), node1.getLineno());
997:       assertFalse(node1.isInstanceOf());
998:       assertFalse(node1.hasMoreThanOneChild());
999:       assertFalse(node1.isIn());
1000:       assertFalse(node1.isNE());
1001:       assertFalse(node1.isThis());
1002:       assertFalse(node1.isRegExp());
1003:       assertFalse(node1.isWith());
1004:       assertFalse(node1.isIf());
1005:       assertFalse(node1.isCatch());
1006:       assertTrue(node1.hasChildren());
1007:       assertFalse(node1.isStringKey());
1008:       assertFalse(node1.isBlock());
1009:       assertFalse(node1.isVar());
1010:       assertFalse(node1.isWhile());
1011:       assertFalse(node1.isDo());
1012:       assertFalse(node1.isNew());
1013:       assertFalse(node1.isAdd());
1014:       assertFalse(node1.isSetterDef());
1015:       assertFalse(node1.isAssignAdd());
1016:       assertFalse(node1.isParamList());
1017:       assertFalse(node1.isLabel());
1018:       assertEquals((-1), node1.getSourcePosition());
1019:       assertFalse(node1.isLabelName());
1020:       assertFalse(node1.isFunction());
1021:       assertTrue(node1.isThrow());
1022:       assertFalse(node1.isContinue());
1023:       assertFalse(node1.isCast());
1024:       assertFalse(node1.isTrue());
1025:       assertFalse(node1.isDebugger());
1026:       assertTrue(node1.hasOneChild());
1027:       assertFalse(node1.isNot());
1028:       assertFalse(node1.isDefaultCase());
1029:       assertEquals(49, node1.getType());
1030:       assertFalse(node1.isEmpty());
1031:       assertFalse(node1.isOr());
1032:       assertFalse(node1.isComma());
1033:       assertFalse(node1.isNull());
1034:       assertFalse(node1.isReturn());
1035:       assertFalse(node1.isBreak());
1036:       assertFalse(node1.isDelProp());
1037:       assertFalse(node1.isDec());
1038:       assertFalse(node1.isAssign());
1039:       assertFalse(node1.isTypeOf());
1040:       assertFalse(node1.isName());
1041:       assertFalse(node1.isExprResult());
1042:       assertFalse(node1.isVoid());
1043:       assertFalse(node1.isCall());
1044:       assertFalse(node1.isGetElem());
1045:       
1046:       Iterable<Node> iterable0 = node2.children();
1047:       assertEquals(37, Node.OPT_ARG_NAME);
1048:       assertEquals(32, Node.INCRDECR_PROP);
1049:       assertEquals(2, Node.POST_FLAG);
1050:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1051:       assertEquals(12, Node.COLUMN_BITS);
1052:       assertEquals(47, Node.IS_DISPATCHER);
1053:       assertEquals(46, Node.IS_NAMESPACE);
1054:       assertEquals(56, Node.CHANGE_TIME);
1055:       assertEquals(30, Node.VAR_ARGS_NAME);
1056:       assertEquals(49, Node.DIRECT_EVAL);
1057:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1058:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1059:       assertEquals(43, Node.IS_CONSTANT_NAME);
1060:       assertEquals(54, Node.SLASH_V);
1061:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1062:       assertEquals(50, Node.FREE_CALL);
1063:       assertEquals(1, Node.DECR_FLAG);
1064:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1067:       assertEquals(4095, Node.COLUMN_MASK);
1068:       assertEquals(40, Node.ORIGINALNAME_PROP);
1069:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1070:       assertEquals(53, Node.INPUT_ID);
1071:       assertEquals(52, Node.LENGTH);
1072:       assertEquals(36, Node.QUOTED_PROP);
1073:       assertEquals(57, Node.REFLECTED_OBJECT);
1074:       assertEquals(57, Node.LAST_PROP);
1075:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1076:       assertEquals(29, Node.JSDOC_INFO_PROP);
1077:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1078:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1079:       assertEquals(8, Node.FLAG_NO_THROWS);
1080:       assertEquals(39, Node.EMPTY_BLOCK);
1081:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1082:       assertEquals(55, Node.INFERRED_FUNCTION);
1083:       assertFalse(node2.equals((Object)node1));
1084:       assertFalse(node2.equals((Object)node0));
1085:       assertNotNull(iterable0);
1086:       assertNotSame(node2, node1);
1087:       assertNotSame(node2, node0);
1088:       assertFalse(iterable0.contains(node2));
1089:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1090:       assertEquals(10, stack0.capacity());
1091:       assertEquals("[]", stack0.toString());
1092:       assertTrue(stack0.isEmpty());
1093:       assertEquals(0, stack0.size());
1094:       assertTrue(stack0.empty());
1095:       assertEquals(0, immutableList0.size());
1096:       assertFalse(node2.isTypeOf());
1097:       assertFalse(node2.isNumber());
1098:       assertFalse(node2.isAssignAdd());
1099:       assertFalse(node2.isReturn());
1100:       assertFalse(node2.isAssign());
1101:       assertFalse(node2.isOr());
1102:       assertFalse(node2.isDec());
1103:       assertEquals((-1), node2.getSourcePosition());
1104:       assertFalse(node2.isLabel());
1105:       assertFalse(node2.hasChildren());
1106:       assertFalse(node2.hasMoreThanOneChild());
1107:       assertFalse(node2.isCast());
1108:       assertFalse(node2.isContinue());
1109:       assertEquals((-1), node2.getLineno());
1110:       assertFalse(node2.isLabelName());
1111:       assertFalse(node2.isGetElem());
1112:       assertFalse(node2.isVar());
1113:       assertFalse(node2.isDo());
1114:       assertFalse(node2.isAdd());
1115:       assertFalse(node2.isNew());
1116:       assertFalse(node2.isThis());
1117:       assertFalse(node2.isSetterDef());
1118:       assertEquals(0, node2.getChildCount());
1119:       assertFalse(node2.isCatch());
1120:       assertFalse(node2.isStringKey());
1121:       assertFalse(node2.isInstanceOf());
1122:       assertFalse(node2.isScript());
1123:       assertFalse(node2.isRegExp());
1124:       assertFalse(node2.isSwitch());
1125:       assertFalse(node2.isWith());
1126:       assertFalse(node2.isBlock());
1127:       assertFalse(node2.isHook());
1128:       assertEquals((-1), node2.getCharno());
1129:       assertFalse(node2.isTry());
1130:       assertFalse(node2.hasOneChild());
1131:       assertFalse(node2.isCase());
1132:       assertFalse(node2.isNE());
1133:       assertFalse(node2.isIf());
1134:       assertFalse(node2.isFor());
1135:       assertFalse(node2.isGetterDef());
1136:       assertFalse(node2.isDelProp());
1137:       assertFalse(node2.isArrayLit());
1138:       assertFalse(node2.isTrue());
1139:       assertFalse(node2.isFunction());
1140:       assertFalse(node2.isInc());
1141:       assertFalse(node2.isVoid());
1142:       assertFalse(node2.isDefaultCase());
1143:       assertFalse(node2.isThrow());
1144:       assertFalse(node2.isIn());
1145:       assertFalse(node2.isEmpty());
1146:       assertFalse(node2.isComma());
1147:       assertEquals(83, node2.getType());
1148:       assertFalse(node2.isNull());
1149:       assertFalse(node2.isCall());
1150:       assertFalse(node2.isName());
1151:       assertFalse(node2.isFalse());
1152:       assertFalse(node2.isAnd());
1153:       assertFalse(node2.isBreak());
1154:       assertFalse(node2.isExprResult());
1155:       assertFalse(node2.isWhile());
1156:       assertFalse(node2.isNot());
1157:       assertFalse(node2.isDebugger());
1158:       assertFalse(node2.isObjectLit());
1159:       assertTrue(node2.isParamList());
1160:       assertFalse(node2.isString());
1161:       assertFalse(node2.isGetProp());
1162:   }
1163: }
RegularFileObject[/tmp/EvoSuite_345_1628159612832/com/google/javascript/rhino/Node_345_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_345_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_345_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_345_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:33.010 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Stack<JSType> stack0 = new Stack<JSType>();
assertNotNull(stack0);
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());

Node node1 = new Node(49, node0, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertEquals(49, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) stack0);
assertNotNull(immutableList0);
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals(0, immutableList0.size());

Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals(0, immutableList0.size());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isComma());
assertEquals(83, node2.getType());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());

boolean boolean0 = node1.hasMoreThanOneChild();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertEquals(49, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());

node2.setChangeTime((-866));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals(0, immutableList0.size());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isComma());
assertEquals(83, node2.getType());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());

InputId inputId0 = node1.getInputId();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNull(inputId0);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertEquals(49, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());

Iterable<Node> iterable0 = node2.children();
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(iterable0);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertFalse(iterable0.contains(node2));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals(0, immutableList0.size());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isComma());
assertEquals(83, node2.getType());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());


[MASTER] 10:33:34.726 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_359_1628159614296/com/google/javascript/rhino/Node_359_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_359_1628159614296/com/google/javascript/rhino/Node_359_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:34.726 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:34.726 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:34.727 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2232
[MASTER] 10:33:34.728 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_359_1628159614296/com/google/javascript/rhino/Node_359_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_359_tmp__ESTest extends Node_359_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertEquals(56, Node.CHANGE_TIME);
23:       assertEquals(47, Node.IS_DISPATCHER);
24:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
25:       assertEquals(29, Node.JSDOC_INFO_PROP);
26:       assertEquals(37, Node.OPT_ARG_NAME);
27:       assertEquals(32, Node.INCRDECR_PROP);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(53, Node.INPUT_ID);
31:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
32:       assertEquals(15, Node.NO_SIDE_EFFECTS);
33:       assertEquals(57, Node.LAST_PROP);
34:       assertEquals(43, Node.IS_CONSTANT_NAME);
35:       assertEquals(54, Node.SLASH_V);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(2, Node.POST_FLAG);
38:       assertEquals(30, Node.VAR_ARGS_NAME);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(48, Node.DIRECTIVES);
43:       assertEquals(55, Node.INFERRED_FUNCTION);
44:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
45:       assertEquals(57, Node.REFLECTED_OBJECT);
46:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
47:       assertEquals(52, Node.LENGTH);
48:       assertEquals(8, Node.FLAG_NO_THROWS);
49:       assertEquals(50, Node.FREE_CALL);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(1, Node.DECR_FLAG);
52:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
53:       assertEquals(49, Node.DIRECT_EVAL);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(4095, Node.COLUMN_MASK);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
58:       assertNotNull(node0);
59:       assertFalse(node0.isAssign());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.isGetElem());
62:       assertFalse(node0.hasChildren());
63:       assertFalse(node0.isDec());
64:       assertEquals((-1), node0.getSourcePosition());
65:       assertFalse(node0.isAssignAdd());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.hasOneChild());
68:       assertFalse(node0.isScript());
69:       assertFalse(node0.isNumber());
70:       assertFalse(node0.isWith());
71:       assertFalse(node0.isWhile());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.isBlock());
74:       assertEquals((-1), node0.getLineno());
75:       assertFalse(node0.isComma());
76:       assertFalse(node0.hasMoreThanOneChild());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isExprResult());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.isFalse());
82:       assertFalse(node0.isThrow());
83:       assertFalse(node0.isGetProp());
84:       assertFalse(node0.isSetterDef());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isNot());
87:       assertEquals(40, node0.getType());
88:       assertFalse(node0.isObjectLit());
89:       assertFalse(node0.isAnd());
90:       assertFalse(node0.isCast());
91:       assertFalse(node0.isFunction());
92:       assertFalse(node0.isContinue());
93:       assertFalse(node0.isEmpty());
94:       assertFalse(node0.isFor());
95:       assertFalse(node0.isDelProp());
96:       assertFalse(node0.isGetterDef());
97:       assertFalse(node0.isNE());
98:       assertFalse(node0.isIf());
99:       assertFalse(node0.isTry());
100:       assertFalse(node0.isDebugger());
101:       assertFalse(node0.isIn());
102:       assertFalse(node0.isCase());
103:       assertFalse(node0.isTrue());
104:       assertFalse(node0.isVoid());
105:       assertFalse(node0.isRegExp());
106:       assertFalse(node0.isCatch());
107:       assertFalse(node0.isName());
108:       assertFalse(node0.isBreak());
109:       assertFalse(node0.isVar());
110:       assertFalse(node0.isNull());
111:       assertFalse(node0.isHook());
112:       assertFalse(node0.isThis());
113:       assertFalse(node0.isStringKey());
114:       assertFalse(node0.isParamList());
115:       assertFalse(node0.isAdd());
116:       assertTrue(node0.isString());
117:       assertEquals((-1), node0.getCharno());
118:       assertFalse(node0.isNew());
119:       assertFalse(node0.isDo());
120:       assertFalse(node0.isSwitch());
121:       assertFalse(node0.isDefaultCase());
122:       assertFalse(node0.isLabel());
123:       assertEquals(0, node0.getChildCount());
124:       assertFalse(node0.isArrayLit());
125:       
126:       boolean boolean0 = node0.isDefaultCase();
127:       assertEquals(56, Node.CHANGE_TIME);
128:       assertEquals(47, Node.IS_DISPATCHER);
129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
130:       assertEquals(29, Node.JSDOC_INFO_PROP);
131:       assertEquals(37, Node.OPT_ARG_NAME);
132:       assertEquals(32, Node.INCRDECR_PROP);
133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(53, Node.INPUT_ID);
136:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
138:       assertEquals(57, Node.LAST_PROP);
139:       assertEquals(43, Node.IS_CONSTANT_NAME);
140:       assertEquals(54, Node.SLASH_V);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(2, Node.POST_FLAG);
143:       assertEquals(30, Node.VAR_ARGS_NAME);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(48, Node.DIRECTIVES);
148:       assertEquals(55, Node.INFERRED_FUNCTION);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(57, Node.REFLECTED_OBJECT);
151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
152:       assertEquals(52, Node.LENGTH);
153:       assertEquals(8, Node.FLAG_NO_THROWS);
154:       assertEquals(50, Node.FREE_CALL);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(1, Node.DECR_FLAG);
157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
158:       assertEquals(49, Node.DIRECT_EVAL);
159:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
160:       assertEquals(4095, Node.COLUMN_MASK);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
163:       assertFalse(boolean0);
164:       assertFalse(node0.isAssign());
165:       assertFalse(node0.isLabelName());
166:       assertFalse(node0.isGetElem());
167:       assertFalse(node0.hasChildren());
168:       assertFalse(node0.isDec());
169:       assertEquals((-1), node0.getSourcePosition());
170:       assertFalse(node0.isAssignAdd());
171:       assertFalse(node0.isOr());
172:       assertFalse(node0.hasOneChild());
173:       assertFalse(node0.isScript());
174:       assertFalse(node0.isNumber());
175:       assertFalse(node0.isWith());
176:       assertFalse(node0.isWhile());
177:       assertFalse(node0.isReturn());
178:       assertFalse(node0.isBlock());
179:       assertEquals((-1), node0.getLineno());
180:       assertFalse(node0.isComma());
181:       assertFalse(node0.hasMoreThanOneChild());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isExprResult());
184:       assertFalse(node0.isCall());
185:       assertFalse(node0.isInstanceOf());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isThrow());
188:       assertFalse(node0.isGetProp());
189:       assertFalse(node0.isSetterDef());
190:       assertFalse(node0.isInc());
191:       assertFalse(node0.isNot());
192:       assertEquals(40, node0.getType());
193:       assertFalse(node0.isObjectLit());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isCast());
196:       assertFalse(node0.isFunction());
197:       assertFalse(node0.isContinue());
198:       assertFalse(node0.isEmpty());
199:       assertFalse(node0.isFor());
200:       assertFalse(node0.isDelProp());
201:       assertFalse(node0.isGetterDef());
202:       assertFalse(node0.isNE());
203:       assertFalse(node0.isIf());
204:       assertFalse(node0.isTry());
205:       assertFalse(node0.isDebugger());
206:       assertFalse(node0.isIn());
207:       assertFalse(node0.isCase());
208:       assertFalse(node0.isTrue());
209:       assertFalse(node0.isVoid());
210:       assertFalse(node0.isRegExp());
211:       assertFalse(node0.isCatch());
212:       assertFalse(node0.isName());
213:       assertFalse(node0.isBreak());
214:       assertFalse(node0.isVar());
215:       assertFalse(node0.isNull());
216:       assertFalse(node0.isHook());
217:       assertFalse(node0.isThis());
218:       assertFalse(node0.isStringKey());
219:       assertFalse(node0.isParamList());
220:       assertFalse(node0.isAdd());
221:       assertTrue(node0.isString());
222:       assertEquals((-1), node0.getCharno());
223:       assertFalse(node0.isNew());
224:       assertFalse(node0.isDo());
225:       assertFalse(node0.isSwitch());
226:       assertFalse(node0.isDefaultCase());
227:       assertFalse(node0.isLabel());
228:       assertEquals(0, node0.getChildCount());
229:       assertFalse(node0.isArrayLit());
230:       
231:       Node node1 = new Node(42, node0, node0, node0);
232:       assertEquals(56, Node.CHANGE_TIME);
233:       assertEquals(47, Node.IS_DISPATCHER);
234:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
235:       assertEquals(29, Node.JSDOC_INFO_PROP);
236:       assertEquals(37, Node.OPT_ARG_NAME);
237:       assertEquals(32, Node.INCRDECR_PROP);
238:       assertEquals(51, Node.STATIC_SOURCE_FILE);
239:       assertEquals(46, Node.IS_NAMESPACE);
240:       assertEquals(53, Node.INPUT_ID);
241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
242:       assertEquals(15, Node.NO_SIDE_EFFECTS);
243:       assertEquals(57, Node.LAST_PROP);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(54, Node.SLASH_V);
246:       assertEquals(40, Node.ORIGINALNAME_PROP);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
251:       assertEquals(39, Node.EMPTY_BLOCK);
252:       assertEquals(48, Node.DIRECTIVES);
253:       assertEquals(55, Node.INFERRED_FUNCTION);
254:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
255:       assertEquals(57, Node.REFLECTED_OBJECT);
256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
257:       assertEquals(52, Node.LENGTH);
258:       assertEquals(8, Node.FLAG_NO_THROWS);
259:       assertEquals(50, Node.FREE_CALL);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(1, Node.DECR_FLAG);
262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
263:       assertEquals(49, Node.DIRECT_EVAL);
264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
265:       assertEquals(4095, Node.COLUMN_MASK);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
268:       assertEquals(43, Node.IS_CONSTANT_NAME);
269:       assertEquals(36, Node.QUOTED_PROP);
270:       assertEquals(53, Node.INPUT_ID);
271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
272:       assertEquals(4095, Node.COLUMN_MASK);
273:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
274:       assertEquals(48, Node.DIRECTIVES);
275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
276:       assertEquals(37, Node.OPT_ARG_NAME);
277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
278:       assertEquals(50, Node.FREE_CALL);
279:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
280:       assertEquals(12, Node.COLUMN_BITS);
281:       assertEquals(1, Node.DECR_FLAG);
282:       assertEquals(32, Node.INCRDECR_PROP);
283:       assertEquals(54, Node.SLASH_V);
284:       assertEquals(15, Node.NO_SIDE_EFFECTS);
285:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
286:       assertEquals(30, Node.VAR_ARGS_NAME);
287:       assertEquals(52, Node.LENGTH);
288:       assertEquals(51, Node.STATIC_SOURCE_FILE);
289:       assertEquals(40, Node.ORIGINALNAME_PROP);
290:       assertEquals(46, Node.IS_NAMESPACE);
291:       assertEquals(57, Node.REFLECTED_OBJECT);
292:       assertEquals(49, Node.DIRECT_EVAL);
293:       assertEquals(2, Node.POST_FLAG);
294:       assertEquals(56, Node.CHANGE_TIME);
295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
296:       assertEquals(39, Node.EMPTY_BLOCK);
297:       assertEquals(47, Node.IS_DISPATCHER);
298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
299:       assertEquals(29, Node.JSDOC_INFO_PROP);
300:       assertEquals(8, Node.FLAG_NO_THROWS);
301:       assertEquals(55, Node.INFERRED_FUNCTION);
302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
303:       assertEquals(57, Node.LAST_PROP);
304:       assertFalse(node1.equals((Object)node0));
305:       assertNotNull(node1);
306:       assertFalse(node0.isAssign());
307:       assertFalse(node0.isLabelName());
308:       assertFalse(node0.isGetElem());
309:       assertFalse(node0.hasChildren());
310:       assertFalse(node0.isDec());
311:       assertEquals((-1), node0.getSourcePosition());
312:       assertFalse(node0.isAssignAdd());
313:       assertFalse(node0.isOr());
314:       assertFalse(node0.hasOneChild());
315:       assertFalse(node0.isScript());
316:       assertFalse(node0.isNumber());
317:       assertFalse(node0.isWith());
318:       assertFalse(node0.isWhile());
319:       assertFalse(node0.isReturn());
320:       assertFalse(node0.isBlock());
321:       assertEquals((-1), node0.getLineno());
322:       assertFalse(node0.isComma());
323:       assertFalse(node0.hasMoreThanOneChild());
324:       assertFalse(node0.isTypeOf());
325:       assertFalse(node0.isExprResult());
326:       assertFalse(node0.isCall());
327:       assertFalse(node0.isInstanceOf());
328:       assertFalse(node0.isFalse());
329:       assertFalse(node0.isThrow());
330:       assertFalse(node0.isGetProp());
331:       assertFalse(node0.isSetterDef());
332:       assertFalse(node0.isInc());
333:       assertFalse(node0.isNot());
334:       assertEquals(40, node0.getType());
335:       assertFalse(node0.isObjectLit());
336:       assertFalse(node0.isAnd());
337:       assertFalse(node0.isCast());
338:       assertFalse(node0.isFunction());
339:       assertFalse(node0.isContinue());
340:       assertFalse(node0.isEmpty());
341:       assertFalse(node0.isFor());
342:       assertFalse(node0.isDelProp());
343:       assertFalse(node0.isGetterDef());
344:       assertFalse(node0.isNE());
345:       assertFalse(node0.isIf());
346:       assertFalse(node0.isTry());
347:       assertFalse(node0.isDebugger());
348:       assertFalse(node0.isIn());
349:       assertFalse(node0.isCase());
350:       assertFalse(node0.isTrue());
351:       assertFalse(node0.isVoid());
352:       assertFalse(node0.isRegExp());
353:       assertFalse(node0.isCatch());
354:       assertFalse(node0.isName());
355:       assertFalse(node0.isBreak());
356:       assertFalse(node0.isVar());
357:       assertFalse(node0.isNull());
358:       assertFalse(node0.isHook());
359:       assertFalse(node0.isThis());
360:       assertFalse(node0.isStringKey());
361:       assertFalse(node0.isParamList());
362:       assertFalse(node0.isAdd());
363:       assertTrue(node0.isString());
364:       assertEquals((-1), node0.getCharno());
365:       assertFalse(node0.isNew());
366:       assertFalse(node0.isDo());
367:       assertFalse(node0.isSwitch());
368:       assertFalse(node0.isDefaultCase());
369:       assertFalse(node0.isLabel());
370:       assertEquals(0, node0.getChildCount());
371:       assertFalse(node0.isArrayLit());
372:       assertFalse(node1.isDefaultCase());
373:       assertFalse(node1.isRegExp());
374:       assertFalse(node1.isFunction());
375:       assertTrue(node1.isThis());
376:       assertFalse(node1.isCatch());
377:       assertFalse(node1.isArrayLit());
378:       assertFalse(node1.isVoid());
379:       assertFalse(node1.isParamList());
380:       assertFalse(node1.isTrue());
381:       assertFalse(node1.isDebugger());
382:       assertFalse(node1.isNull());
383:       assertFalse(node1.isSetterDef());
384:       assertFalse(node1.isEmpty());
385:       assertFalse(node1.isNew());
386:       assertFalse(node1.isVar());
387:       assertFalse(node1.isWhile());
388:       assertFalse(node1.isString());
389:       assertFalse(node1.isDo());
390:       assertFalse(node1.isContinue());
391:       assertFalse(node1.isAdd());
392:       assertFalse(node1.isOr());
393:       assertTrue(node1.hasOneChild());
394:       assertFalse(node1.isDelProp());
395:       assertFalse(node1.isBreak());
396:       assertFalse(node1.isTypeOf());
397:       assertFalse(node1.isName());
398:       assertEquals((-1), node1.getSourcePosition());
399:       assertFalse(node1.isDec());
400:       assertFalse(node1.isAssign());
401:       assertFalse(node1.isCall());
402:       assertFalse(node1.isGetProp());
403:       assertFalse(node1.isGetElem());
404:       assertFalse(node1.isReturn());
405:       assertFalse(node1.isComma());
406:       assertFalse(node1.isWith());
407:       assertFalse(node1.isNot());
408:       assertFalse(node1.isExprResult());
409:       assertFalse(node1.isObjectLit());
410:       assertFalse(node1.isScript());
411:       assertFalse(node1.isInstanceOf());
412:       assertFalse(node1.isAnd());
413:       assertFalse(node1.isLabelName());
414:       assertFalse(node1.isFalse());
415:       assertFalse(node1.isCast());
416:       assertFalse(node1.isLabel());
417:       assertFalse(node1.isAssignAdd());
418:       assertEquals(42, node1.getType());
419:       assertFalse(node1.isThrow());
420:       assertFalse(node1.isCase());
421:       assertFalse(node1.isInc());
422:       assertFalse(node1.hasMoreThanOneChild());
423:       assertEquals((-1), node1.getLineno());
424:       assertFalse(node1.isIn());
425:       assertEquals((-1), node1.getCharno());
426:       assertFalse(node1.isSwitch());
427:       assertFalse(node1.isStringKey());
428:       assertFalse(node1.isNE());
429:       assertFalse(node1.isGetterDef());
430:       assertFalse(node1.isNumber());
431:       assertFalse(node1.isIf());
432:       assertTrue(node1.hasChildren());
433:       assertEquals(1, node1.getChildCount());
434:       assertFalse(node1.isHook());
435:       assertFalse(node1.isTry());
436:       assertFalse(node1.isBlock());
437:       assertFalse(node1.isFor());
438:       
439:       boolean boolean1 = node1.isEquivalentToTyped(node0);
440:       assertEquals(56, Node.CHANGE_TIME);
441:       assertEquals(47, Node.IS_DISPATCHER);
442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
443:       assertEquals(29, Node.JSDOC_INFO_PROP);
444:       assertEquals(37, Node.OPT_ARG_NAME);
445:       assertEquals(32, Node.INCRDECR_PROP);
446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
447:       assertEquals(46, Node.IS_NAMESPACE);
448:       assertEquals(53, Node.INPUT_ID);
449:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
450:       assertEquals(15, Node.NO_SIDE_EFFECTS);
451:       assertEquals(57, Node.LAST_PROP);
452:       assertEquals(43, Node.IS_CONSTANT_NAME);
453:       assertEquals(54, Node.SLASH_V);
454:       assertEquals(40, Node.ORIGINALNAME_PROP);
455:       assertEquals(2, Node.POST_FLAG);
456:       assertEquals(30, Node.VAR_ARGS_NAME);
457:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
458:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
459:       assertEquals(39, Node.EMPTY_BLOCK);
460:       assertEquals(48, Node.DIRECTIVES);
461:       assertEquals(55, Node.INFERRED_FUNCTION);
462:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
463:       assertEquals(57, Node.REFLECTED_OBJECT);
464:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
465:       assertEquals(52, Node.LENGTH);
466:       assertEquals(8, Node.FLAG_NO_THROWS);
467:       assertEquals(50, Node.FREE_CALL);
468:       assertEquals(36, Node.QUOTED_PROP);
469:       assertEquals(1, Node.DECR_FLAG);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(49, Node.DIRECT_EVAL);
472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
473:       assertEquals(4095, Node.COLUMN_MASK);
474:       assertEquals(12, Node.COLUMN_BITS);
475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
476:       assertEquals(43, Node.IS_CONSTANT_NAME);
477:       assertEquals(36, Node.QUOTED_PROP);
478:       assertEquals(53, Node.INPUT_ID);
479:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
480:       assertEquals(4095, Node.COLUMN_MASK);
481:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
482:       assertEquals(48, Node.DIRECTIVES);
483:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
484:       assertEquals(37, Node.OPT_ARG_NAME);
485:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
486:       assertEquals(50, Node.FREE_CALL);
487:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
488:       assertEquals(12, Node.COLUMN_BITS);
489:       assertEquals(1, Node.DECR_FLAG);
490:       assertEquals(32, Node.INCRDECR_PROP);
491:       assertEquals(54, Node.SLASH_V);
492:       assertEquals(15, Node.NO_SIDE_EFFECTS);
493:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
494:       assertEquals(30, Node.VAR_ARGS_NAME);
495:       assertEquals(52, Node.LENGTH);
496:       assertEquals(51, Node.STATIC_SOURCE_FILE);
497:       assertEquals(40, Node.ORIGINALNAME_PROP);
498:       assertEquals(46, Node.IS_NAMESPACE);
499:       assertEquals(57, Node.REFLECTED_OBJECT);
500:       assertEquals(49, Node.DIRECT_EVAL);
501:       assertEquals(2, Node.POST_FLAG);
502:       assertEquals(56, Node.CHANGE_TIME);
503:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
504:       assertEquals(39, Node.EMPTY_BLOCK);
505:       assertEquals(47, Node.IS_DISPATCHER);
506:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
507:       assertEquals(29, Node.JSDOC_INFO_PROP);
508:       assertEquals(8, Node.FLAG_NO_THROWS);
509:       assertEquals(55, Node.INFERRED_FUNCTION);
510:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
511:       assertEquals(57, Node.LAST_PROP);
512:       assertFalse(node0.equals((Object)node1));
513:       assertFalse(node1.equals((Object)node0));
514:       assertTrue(boolean1 == boolean0);
515:       assertFalse(boolean1);
516:       assertFalse(node0.isAssign());
517:       assertFalse(node0.isLabelName());
518:       assertFalse(node0.isGetElem());
519:       assertFalse(node0.hasChildren());
520:       assertFalse(node0.isDec());
521:       assertEquals((-1), node0.getSourcePosition());
522:       assertFalse(node0.isAssignAdd());
523:       assertFalse(node0.isOr());
524:       assertFalse(node0.hasOneChild());
525:       assertFalse(node0.isScript());
526:       assertFalse(node0.isNumber());
527:       assertFalse(node0.isWith());
528:       assertFalse(node0.isWhile());
529:       assertFalse(node0.isReturn());
530:       assertFalse(node0.isBlock());
531:       assertEquals((-1), node0.getLineno());
532:       assertFalse(node0.isComma());
533:       assertFalse(node0.hasMoreThanOneChild());
534:       assertFalse(node0.isTypeOf());
535:       assertFalse(node0.isExprResult());
536:       assertFalse(node0.isCall());
537:       assertFalse(node0.isInstanceOf());
538:       assertFalse(node0.isFalse());
539:       assertFalse(node0.isThrow());
540:       assertFalse(node0.isGetProp());
541:       assertFalse(node0.isSetterDef());
542:       assertFalse(node0.isInc());
543:       assertFalse(node0.isNot());
544:       assertEquals(40, node0.getType());
545:       assertFalse(node0.isObjectLit());
546:       assertFalse(node0.isAnd());
547:       assertFalse(node0.isCast());
548:       assertFalse(node0.isFunction());
549:       assertFalse(node0.isContinue());
550:       assertFalse(node0.isEmpty());
551:       assertFalse(node0.isFor());
552:       assertFalse(node0.isDelProp());
553:       assertFalse(node0.isGetterDef());
554:       assertFalse(node0.isNE());
555:       assertFalse(node0.isIf());
556:       assertFalse(node0.isTry());
557:       assertFalse(node0.isDebugger());
558:       assertFalse(node0.isIn());
559:       assertFalse(node0.isCase());
560:       assertFalse(node0.isTrue());
561:       assertFalse(node0.isVoid());
562:       assertFalse(node0.isRegExp());
563:       assertFalse(node0.isCatch());
564:       assertFalse(node0.isName());
565:       assertFalse(node0.isBreak());
566:       assertFalse(node0.isVar());
567:       assertFalse(node0.isNull());
568:       assertFalse(node0.isHook());
569:       assertFalse(node0.isThis());
570:       assertFalse(node0.isStringKey());
571:       assertFalse(node0.isParamList());
572:       assertFalse(node0.isAdd());
573:       assertTrue(node0.isString());
574:       assertEquals((-1), node0.getCharno());
575:       assertFalse(node0.isNew());
576:       assertFalse(node0.isDo());
577:       assertFalse(node0.isSwitch());
578:       assertFalse(node0.isDefaultCase());
579:       assertFalse(node0.isLabel());
580:       assertEquals(0, node0.getChildCount());
581:       assertFalse(node0.isArrayLit());
582:       assertFalse(node1.isDefaultCase());
583:       assertFalse(node1.isRegExp());
584:       assertFalse(node1.isFunction());
585:       assertTrue(node1.isThis());
586:       assertFalse(node1.isCatch());
587:       assertFalse(node1.isArrayLit());
588:       assertFalse(node1.isVoid());
589:       assertFalse(node1.isParamList());
590:       assertFalse(node1.isTrue());
591:       assertFalse(node1.isDebugger());
592:       assertFalse(node1.isNull());
593:       assertFalse(node1.isSetterDef());
594:       assertFalse(node1.isEmpty());
595:       assertFalse(node1.isNew());
596:       assertFalse(node1.isVar());
597:       assertFalse(node1.isWhile());
598:       assertFalse(node1.isString());
599:       assertFalse(node1.isDo());
600:       assertFalse(node1.isContinue());
601:       assertFalse(node1.isAdd());
602:       assertFalse(node1.isOr());
603:       assertTrue(node1.hasOneChild());
604:       assertFalse(node1.isDelProp());
605:       assertFalse(node1.isBreak());
606:       assertFalse(node1.isTypeOf());
607:       assertFalse(node1.isName());
608:       assertEquals((-1), node1.getSourcePosition());
609:       assertFalse(node1.isDec());
610:       assertFalse(node1.isAssign());
611:       assertFalse(node1.isCall());
612:       assertFalse(node1.isGetProp());
613:       assertFalse(node1.isGetElem());
614:       assertFalse(node1.isReturn());
615:       assertFalse(node1.isComma());
616:       assertFalse(node1.isWith());
617:       assertFalse(node1.isNot());
618:       assertFalse(node1.isExprResult());
619:       assertFalse(node1.isObjectLit());
620:       assertFalse(node1.isScript());
621:       assertFalse(node1.isInstanceOf());
622:       assertFalse(node1.isAnd());
623:       assertFalse(node1.isLabelName());
624:       assertFalse(node1.isFalse());
625:       assertFalse(node1.isCast());
626:       assertFalse(node1.isLabel());
627:       assertFalse(node1.isAssignAdd());
628:       assertEquals(42, node1.getType());
629:       assertFalse(node1.isThrow());
630:       assertFalse(node1.isCase());
631:       assertFalse(node1.isInc());
632:       assertFalse(node1.hasMoreThanOneChild());
633:       assertEquals((-1), node1.getLineno());
634:       assertFalse(node1.isIn());
635:       assertEquals((-1), node1.getCharno());
636:       assertFalse(node1.isSwitch());
637:       assertFalse(node1.isStringKey());
638:       assertFalse(node1.isNE());
639:       assertFalse(node1.isGetterDef());
640:       assertFalse(node1.isNumber());
641:       assertFalse(node1.isIf());
642:       assertTrue(node1.hasChildren());
643:       assertEquals(1, node1.getChildCount());
644:       assertFalse(node1.isHook());
645:       assertFalse(node1.isTry());
646:       assertFalse(node1.isBlock());
647:       assertFalse(node1.isFor());
648:       
649:       Node node2 = node0.srcrefTree(node1);
650:       assertEquals(56, Node.CHANGE_TIME);
651:       assertEquals(47, Node.IS_DISPATCHER);
652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
653:       assertEquals(29, Node.JSDOC_INFO_PROP);
654:       assertEquals(37, Node.OPT_ARG_NAME);
655:       assertEquals(32, Node.INCRDECR_PROP);
656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
657:       assertEquals(46, Node.IS_NAMESPACE);
658:       assertEquals(53, Node.INPUT_ID);
659:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
660:       assertEquals(15, Node.NO_SIDE_EFFECTS);
661:       assertEquals(57, Node.LAST_PROP);
662:       assertEquals(43, Node.IS_CONSTANT_NAME);
663:       assertEquals(54, Node.SLASH_V);
664:       assertEquals(40, Node.ORIGINALNAME_PROP);
665:       assertEquals(2, Node.POST_FLAG);
666:       assertEquals(30, Node.VAR_ARGS_NAME);
667:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
668:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
669:       assertEquals(39, Node.EMPTY_BLOCK);
670:       assertEquals(48, Node.DIRECTIVES);
671:       assertEquals(55, Node.INFERRED_FUNCTION);
672:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
673:       assertEquals(57, Node.REFLECTED_OBJECT);
674:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
675:       assertEquals(52, Node.LENGTH);
676:       assertEquals(8, Node.FLAG_NO_THROWS);
677:       assertEquals(50, Node.FREE_CALL);
678:       assertEquals(36, Node.QUOTED_PROP);
679:       assertEquals(1, Node.DECR_FLAG);
680:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
681:       assertEquals(49, Node.DIRECT_EVAL);
682:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
683:       assertEquals(4095, Node.COLUMN_MASK);
684:       assertEquals(12, Node.COLUMN_BITS);
685:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
686:       assertEquals(43, Node.IS_CONSTANT_NAME);
687:       assertEquals(36, Node.QUOTED_PROP);
688:       assertEquals(53, Node.INPUT_ID);
689:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
690:       assertEquals(4095, Node.COLUMN_MASK);
691:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
692:       assertEquals(48, Node.DIRECTIVES);
693:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
694:       assertEquals(37, Node.OPT_ARG_NAME);
695:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
696:       assertEquals(50, Node.FREE_CALL);
697:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
698:       assertEquals(12, Node.COLUMN_BITS);
699:       assertEquals(1, Node.DECR_FLAG);
700:       assertEquals(32, Node.INCRDECR_PROP);
701:       assertEquals(54, Node.SLASH_V);
702:       assertEquals(15, Node.NO_SIDE_EFFECTS);
703:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
704:       assertEquals(30, Node.VAR_ARGS_NAME);
705:       assertEquals(52, Node.LENGTH);
706:       assertEquals(51, Node.STATIC_SOURCE_FILE);
707:       assertEquals(40, Node.ORIGINALNAME_PROP);
708:       assertEquals(46, Node.IS_NAMESPACE);
709:       assertEquals(57, Node.REFLECTED_OBJECT);
710:       assertEquals(49, Node.DIRECT_EVAL);
711:       assertEquals(2, Node.POST_FLAG);
712:       assertEquals(56, Node.CHANGE_TIME);
713:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
714:       assertEquals(39, Node.EMPTY_BLOCK);
715:       assertEquals(47, Node.IS_DISPATCHER);
716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
717:       assertEquals(29, Node.JSDOC_INFO_PROP);
718:       assertEquals(8, Node.FLAG_NO_THROWS);
719:       assertEquals(55, Node.INFERRED_FUNCTION);
720:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
721:       assertEquals(57, Node.LAST_PROP);
722:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
723:       assertEquals(29, Node.JSDOC_INFO_PROP);
724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
725:       assertEquals(53, Node.INPUT_ID);
726:       assertEquals(37, Node.OPT_ARG_NAME);
727:       assertEquals(43, Node.IS_CONSTANT_NAME);
728:       assertEquals(56, Node.CHANGE_TIME);
729:       assertEquals(36, Node.QUOTED_PROP);
730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
731:       assertEquals(46, Node.IS_NAMESPACE);
732:       assertEquals(55, Node.INFERRED_FUNCTION);
733:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(39, Node.EMPTY_BLOCK);
736:       assertEquals(2, Node.POST_FLAG);
737:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
738:       assertEquals(57, Node.LAST_PROP);
739:       assertEquals(30, Node.VAR_ARGS_NAME);
740:       assertEquals(47, Node.IS_DISPATCHER);
741:       assertEquals(52, Node.LENGTH);
742:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
743:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
744:       assertEquals(40, Node.ORIGINALNAME_PROP);
745:       assertEquals(48, Node.DIRECTIVES);
746:       assertEquals(8, Node.FLAG_NO_THROWS);
747:       assertEquals(50, Node.FREE_CALL);
748:       assertEquals(54, Node.SLASH_V);
749:       assertEquals(57, Node.REFLECTED_OBJECT);
750:       assertEquals(12, Node.COLUMN_BITS);
751:       assertEquals(4095, Node.COLUMN_MASK);
752:       assertEquals(51, Node.STATIC_SOURCE_FILE);
753:       assertEquals(32, Node.INCRDECR_PROP);
754:       assertEquals(49, Node.DIRECT_EVAL);
755:       assertEquals(1, Node.DECR_FLAG);
756:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
758:       assertFalse(node0.equals((Object)node1));
759:       assertFalse(node1.equals((Object)node0));
760:       assertFalse(node2.equals((Object)node1));
761:       assertNotNull(node2);
762:       assertSame(node0, node2);
763:       assertSame(node2, node0);
764:       assertFalse(node0.isAssign());
765:       assertFalse(node0.isLabelName());
766:       assertFalse(node0.isGetElem());
767:       assertFalse(node0.hasChildren());
768:       assertFalse(node0.isDec());
769:       assertEquals((-1), node0.getSourcePosition());
770:       assertFalse(node0.isAssignAdd());
771:       assertFalse(node0.isOr());
772:       assertFalse(node0.hasOneChild());
773:       assertFalse(node0.isScript());
774:       assertFalse(node0.isNumber());
775:       assertFalse(node0.isWith());
776:       assertFalse(node0.isWhile());
777:       assertFalse(node0.isReturn());
778:       assertFalse(node0.isBlock());
779:       assertEquals((-1), node0.getLineno());
780:       assertFalse(node0.isComma());
781:       assertFalse(node0.hasMoreThanOneChild());
782:       assertFalse(node0.isTypeOf());
783:       assertFalse(node0.isExprResult());
784:       assertFalse(node0.isCall());
785:       assertFalse(node0.isInstanceOf());
786:       assertFalse(node0.isFalse());
787:       assertFalse(node0.isThrow());
788:       assertFalse(node0.isGetProp());
789:       assertFalse(node0.isSetterDef());
790:       assertFalse(node0.isInc());
791:       assertFalse(node0.isNot());
792:       assertEquals(40, node0.getType());
793:       assertFalse(node0.isObjectLit());
794:       assertFalse(node0.isAnd());
795:       assertFalse(node0.isCast());
796:       assertFalse(node0.isFunction());
797:       assertFalse(node0.isContinue());
798:       assertFalse(node0.isEmpty());
799:       assertFalse(node0.isFor());
800:       assertFalse(node0.isDelProp());
801:       assertFalse(node0.isGetterDef());
802:       assertFalse(node0.isNE());
803:       assertFalse(node0.isIf());
804:       assertFalse(node0.isTry());
805:       assertFalse(node0.isDebugger());
806:       assertFalse(node0.isIn());
807:       assertFalse(node0.isCase());
808:       assertFalse(node0.isTrue());
809:       assertFalse(node0.isVoid());
810:       assertFalse(node0.isRegExp());
811:       assertFalse(node0.isCatch());
812:       assertFalse(node0.isName());
813:       assertFalse(node0.isBreak());
814:       assertFalse(node0.isVar());
815:       assertFalse(node0.isNull());
816:       assertFalse(node0.isHook());
817:       assertFalse(node0.isThis());
818:       assertFalse(node0.isStringKey());
819:       assertFalse(node0.isParamList());
820:       assertFalse(node0.isAdd());
821:       assertTrue(node0.isString());
822:       assertEquals((-1), node0.getCharno());
823:       assertFalse(node0.isNew());
824:       assertFalse(node0.isDo());
825:       assertFalse(node0.isSwitch());
826:       assertFalse(node0.isDefaultCase());
827:       assertFalse(node0.isLabel());
828:       assertEquals(0, node0.getChildCount());
829:       assertFalse(node0.isArrayLit());
830:       assertFalse(node1.isDefaultCase());
831:       assertFalse(node1.isRegExp());
832:       assertFalse(node1.isFunction());
833:       assertTrue(node1.isThis());
834:       assertFalse(node1.isCatch());
835:       assertFalse(node1.isArrayLit());
836:       assertFalse(node1.isVoid());
837:       assertFalse(node1.isParamList());
838:       assertFalse(node1.isTrue());
839:       assertFalse(node1.isDebugger());
840:       assertFalse(node1.isNull());
841:       assertFalse(node1.isSetterDef());
842:       assertFalse(node1.isEmpty());
843:       assertFalse(node1.isNew());
844:       assertFalse(node1.isVar());
845:       assertFalse(node1.isWhile());
846:       assertFalse(node1.isString());
847:       assertFalse(node1.isDo());
848:       assertFalse(node1.isContinue());
849:       assertFalse(node1.isAdd());
850:       assertFalse(node1.isOr());
851:       assertTrue(node1.hasOneChild());
852:       assertFalse(node1.isDelProp());
853:       assertFalse(node1.isBreak());
854:       assertFalse(node1.isTypeOf());
855:       assertFalse(node1.isName());
856:       assertEquals((-1), node1.getSourcePosition());
857:       assertFalse(node1.isDec());
858:       assertFalse(node1.isAssign());
859:       assertFalse(node1.isCall());
860:       assertFalse(node1.isGetProp());
861:       assertFalse(node1.isGetElem());
862:       assertFalse(node1.isReturn());
863:       assertFalse(node1.isComma());
864:       assertFalse(node1.isWith());
865:       assertFalse(node1.isNot());
866:       assertFalse(node1.isExprResult());
867:       assertFalse(node1.isObjectLit());
868:       assertFalse(node1.isScript());
869:       assertFalse(node1.isInstanceOf());
870:       assertFalse(node1.isAnd());
871:       assertFalse(node1.isLabelName());
872:       assertFalse(node1.isFalse());
873:       assertFalse(node1.isCast());
874:       assertFalse(node1.isLabel());
875:       assertFalse(node1.isAssignAdd());
876:       assertEquals(42, node1.getType());
877:       assertFalse(node1.isThrow());
878:       assertFalse(node1.isCase());
879:       assertFalse(node1.isInc());
880:       assertFalse(node1.hasMoreThanOneChild());
881:       assertEquals((-1), node1.getLineno());
882:       assertFalse(node1.isIn());
883:       assertEquals((-1), node1.getCharno());
884:       assertFalse(node1.isSwitch());
885:       assertFalse(node1.isStringKey());
886:       assertFalse(node1.isNE());
887:       assertFalse(node1.isGetterDef());
888:       assertFalse(node1.isNumber());
889:       assertFalse(node1.isIf());
890:       assertTrue(node1.hasChildren());
891:       assertEquals(1, node1.getChildCount());
892:       assertFalse(node1.isHook());
893:       assertFalse(node1.isTry());
894:       assertFalse(node1.isBlock());
895:       assertFalse(node1.isFor());
896:       assertFalse(node2.isCast());
897:       assertFalse(node2.isExprResult());
898:       assertFalse(node2.hasOneChild());
899:       assertFalse(node2.isLabelName());
900:       assertFalse(node2.isNumber());
901:       assertFalse(node2.isScript());
902:       assertFalse(node2.isObjectLit());
903:       assertEquals((-1), node2.getSourcePosition());
904:       assertFalse(node2.isOr());
905:       assertFalse(node2.isNot());
906:       assertEquals((-1), node2.getLineno());
907:       assertFalse(node2.isReturn());
908:       assertFalse(node2.isInstanceOf());
909:       assertFalse(node2.isGetProp());
910:       assertFalse(node2.isWhile());
911:       assertFalse(node2.hasChildren());
912:       assertFalse(node2.isBreak());
913:       assertFalse(node2.isWith());
914:       assertFalse(node2.isGetElem());
915:       assertFalse(node2.hasMoreThanOneChild());
916:       assertFalse(node2.isThis());
917:       assertFalse(node2.isTypeOf());
918:       assertFalse(node2.isDec());
919:       assertFalse(node2.isAssign());
920:       assertFalse(node2.isComma());
921:       assertFalse(node2.isHook());
922:       assertFalse(node2.isBlock());
923:       assertFalse(node2.isAdd());
924:       assertFalse(node2.isVar());
925:       assertFalse(node2.isCall());
926:       assertFalse(node2.isSwitch());
927:       assertFalse(node2.isName());
928:       assertFalse(node2.isNew());
929:       assertTrue(node2.isString());
930:       assertFalse(node2.isNull());
931:       assertFalse(node2.isStringKey());
932:       assertEquals((-1), node2.getCharno());
933:       assertFalse(node2.isAssignAdd());
934:       assertFalse(node2.isParamList());
935:       assertFalse(node2.isDo());
936:       assertFalse(node2.isDefaultCase());
937:       assertFalse(node2.isLabel());
938:       assertEquals(0, node2.getChildCount());
939:       assertFalse(node2.isArrayLit());
940:       assertFalse(node2.isVoid());
941:       assertFalse(node2.isTry());
942:       assertFalse(node2.isDelProp());
943:       assertFalse(node2.isGetterDef());
944:       assertFalse(node2.isIf());
945:       assertFalse(node2.isEmpty());
946:       assertFalse(node2.isNE());
947:       assertFalse(node2.isTrue());
948:       assertFalse(node2.isDebugger());
949:       assertFalse(node2.isCatch());
950:       assertFalse(node2.isCase());
951:       assertFalse(node2.isFor());
952:       assertFalse(node2.isRegExp());
953:       assertFalse(node2.isInc());
954:       assertFalse(node2.isIn());
955:       assertFalse(node2.isAnd());
956:       assertFalse(node2.isSetterDef());
957:       assertEquals(40, node2.getType());
958:       assertFalse(node2.isThrow());
959:       assertFalse(node2.isContinue());
960:       assertFalse(node2.isFunction());
961:       assertFalse(node2.isFalse());
962:       
963:       boolean boolean2 = node1.isCase();
964:       assertEquals(56, Node.CHANGE_TIME);
965:       assertEquals(47, Node.IS_DISPATCHER);
966:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
967:       assertEquals(29, Node.JSDOC_INFO_PROP);
968:       assertEquals(37, Node.OPT_ARG_NAME);
969:       assertEquals(32, Node.INCRDECR_PROP);
970:       assertEquals(51, Node.STATIC_SOURCE_FILE);
971:       assertEquals(46, Node.IS_NAMESPACE);
972:       assertEquals(53, Node.INPUT_ID);
973:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
974:       assertEquals(15, Node.NO_SIDE_EFFECTS);
975:       assertEquals(57, Node.LAST_PROP);
976:       assertEquals(43, Node.IS_CONSTANT_NAME);
977:       assertEquals(54, Node.SLASH_V);
978:       assertEquals(40, Node.ORIGINALNAME_PROP);
979:       assertEquals(2, Node.POST_FLAG);
980:       assertEquals(30, Node.VAR_ARGS_NAME);
981:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
982:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
983:       assertEquals(39, Node.EMPTY_BLOCK);
984:       assertEquals(48, Node.DIRECTIVES);
985:       assertEquals(55, Node.INFERRED_FUNCTION);
986:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
987:       assertEquals(57, Node.REFLECTED_OBJECT);
988:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
989:       assertEquals(52, Node.LENGTH);
990:       assertEquals(8, Node.FLAG_NO_THROWS);
991:       assertEquals(50, Node.FREE_CALL);
992:       assertEquals(36, Node.QUOTED_PROP);
993:       assertEquals(1, Node.DECR_FLAG);
994:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
995:       assertEquals(49, Node.DIRECT_EVAL);
996:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
997:       assertEquals(4095, Node.COLUMN_MASK);
998:       assertEquals(12, Node.COLUMN_BITS);
999:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1000:       assertEquals(43, Node.IS_CONSTANT_NAME);
1001:       assertEquals(36, Node.QUOTED_PROP);
1002:       assertEquals(53, Node.INPUT_ID);
1003:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1004:       assertEquals(4095, Node.COLUMN_MASK);
1005:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1006:       assertEquals(48, Node.DIRECTIVES);
1007:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1008:       assertEquals(37, Node.OPT_ARG_NAME);
1009:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1010:       assertEquals(50, Node.FREE_CALL);
1011:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1012:       assertEquals(12, Node.COLUMN_BITS);
1013:       assertEquals(1, Node.DECR_FLAG);
1014:       assertEquals(32, Node.INCRDECR_PROP);
1015:       assertEquals(54, Node.SLASH_V);
1016:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1017:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1018:       assertEquals(30, Node.VAR_ARGS_NAME);
1019:       assertEquals(52, Node.LENGTH);
1020:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1021:       assertEquals(40, Node.ORIGINALNAME_PROP);
1022:       assertEquals(46, Node.IS_NAMESPACE);
1023:       assertEquals(57, Node.REFLECTED_OBJECT);
1024:       assertEquals(49, Node.DIRECT_EVAL);
1025:       assertEquals(2, Node.POST_FLAG);
1026:       assertEquals(56, Node.CHANGE_TIME);
1027:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1028:       assertEquals(39, Node.EMPTY_BLOCK);
1029:       assertEquals(47, Node.IS_DISPATCHER);
1030:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1031:       assertEquals(29, Node.JSDOC_INFO_PROP);
1032:       assertEquals(8, Node.FLAG_NO_THROWS);
1033:       assertEquals(55, Node.INFERRED_FUNCTION);
1034:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1035:       assertEquals(57, Node.LAST_PROP);
1036:       assertFalse(node0.equals((Object)node1));
1037:       assertFalse(node1.equals((Object)node2));
1038:       assertFalse(node1.equals((Object)node0));
1039:       assertTrue(boolean2 == boolean0);
1040:       assertTrue(boolean2 == boolean1);
1041:       assertSame(node0, node2);
1042:       assertFalse(boolean2);
1043:       assertFalse(node0.isAssign());
1044:       assertFalse(node0.isLabelName());
1045:       assertFalse(node0.isGetElem());
1046:       assertFalse(node0.hasChildren());
1047:       assertFalse(node0.isDec());
1048:       assertEquals((-1), node0.getSourcePosition());
1049:       assertFalse(node0.isAssignAdd());
1050:       assertFalse(node0.isOr());
1051:       assertFalse(node0.hasOneChild());
1052:       assertFalse(node0.isScript());
1053:       assertFalse(node0.isNumber());
1054:       assertFalse(node0.isWith());
1055:       assertFalse(node0.isWhile());
1056:       assertFalse(node0.isReturn());
1057:       assertFalse(node0.isBlock());
1058:       assertEquals((-1), node0.getLineno());
1059:       assertFalse(node0.isComma());
1060:       assertFalse(node0.hasMoreThanOneChild());
1061:       assertFalse(node0.isTypeOf());
1062:       assertFalse(node0.isExprResult());
1063:       assertFalse(node0.isCall());
1064:       assertFalse(node0.isInstanceOf());
1065:       assertFalse(node0.isFalse());
1066:       assertFalse(node0.isThrow());
1067:       assertFalse(node0.isGetProp());
1068:       assertFalse(node0.isSetterDef());
1069:       assertFalse(node0.isInc());
1070:       assertFalse(node0.isNot());
1071:       assertEquals(40, node0.getType());
1072:       assertFalse(node0.isObjectLit());
1073:       assertFalse(node0.isAnd());
1074:       assertFalse(node0.isCast());
1075:       assertFalse(node0.isFunction());
1076:       assertFalse(node0.isContinue());
1077:       assertFalse(node0.isEmpty());
1078:       assertFalse(node0.isFor());
1079:       assertFalse(node0.isDelProp());
1080:       assertFalse(node0.isGetterDef());
1081:       assertFalse(node0.isNE());
1082:       assertFalse(node0.isIf());
1083:       assertFalse(node0.isTry());
1084:       assertFalse(node0.isDebugger());
1085:       assertFalse(node0.isIn());
1086:       assertFalse(node0.isCase());
1087:       assertFalse(node0.isTrue());
1088:       assertFalse(node0.isVoid());
1089:       assertFalse(node0.isRegExp());
1090:       assertFalse(node0.isCatch());
1091:       assertFalse(node0.isName());
1092:       assertFalse(node0.isBreak());
1093:       assertFalse(node0.isVar());
1094:       assertFalse(node0.isNull());
1095:       assertFalse(node0.isHook());
1096:       assertFalse(node0.isThis());
1097:       assertFalse(node0.isStringKey());
1098:       assertFalse(node0.isParamList());
1099:       assertFalse(node0.isAdd());
1100:       assertTrue(node0.isString());
1101:       assertEquals((-1), node0.getCharno());
1102:       assertFalse(node0.isNew());
1103:       assertFalse(node0.isDo());
1104:       assertFalse(node0.isSwitch());
1105:       assertFalse(node0.isDefaultCase());
1106:       assertFalse(node0.isLabel());
1107:       assertEquals(0, node0.getChildCount());
1108:       assertFalse(node0.isArrayLit());
1109:       assertFalse(node1.isDefaultCase());
1110:       assertFalse(node1.isRegExp());
1111:       assertFalse(node1.isFunction());
1112:       assertTrue(node1.isThis());
1113:       assertFalse(node1.isCatch());
1114:       assertFalse(node1.isArrayLit());
1115:       assertFalse(node1.isVoid());
1116:       assertFalse(node1.isParamList());
1117:       assertFalse(node1.isTrue());
1118:       assertFalse(node1.isDebugger());
1119:       assertFalse(node1.isNull());
1120:       assertFalse(node1.isSetterDef());
1121:       assertFalse(node1.isEmpty());
1122:       assertFalse(node1.isNew());
1123:       assertFalse(node1.isVar());
1124:       assertFalse(node1.isWhile());
1125:       assertFalse(node1.isString());
1126:       assertFalse(node1.isDo());
1127:       assertFalse(node1.isContinue());
1128:       assertFalse(node1.isAdd());
1129:       assertFalse(node1.isOr());
1130:       assertTrue(node1.hasOneChild());
1131:       assertFalse(node1.isDelProp());
1132:       assertFalse(node1.isBreak());
1133:       assertFalse(node1.isTypeOf());
1134:       assertFalse(node1.isName());
1135:       assertEquals((-1), node1.getSourcePosition());
1136:       assertFalse(node1.isDec());
1137:       assertFalse(node1.isAssign());
1138:       assertFalse(node1.isCall());
1139:       assertFalse(node1.isGetProp());
1140:       assertFalse(node1.isGetElem());
1141:       assertFalse(node1.isReturn());
1142:       assertFalse(node1.isComma());
1143:       assertFalse(node1.isWith());
1144:       assertFalse(node1.isNot());
1145:       assertFalse(node1.isExprResult());
1146:       assertFalse(node1.isObjectLit());
1147:       assertFalse(node1.isScript());
1148:       assertFalse(node1.isInstanceOf());
1149:       assertFalse(node1.isAnd());
1150:       assertFalse(node1.isLabelName());
1151:       assertFalse(node1.isFalse());
1152:       assertFalse(node1.isCast());
1153:       assertFalse(node1.isLabel());
1154:       assertFalse(node1.isAssignAdd());
1155:       assertEquals(42, node1.getType());
1156:       assertFalse(node1.isThrow());
1157:       assertFalse(node1.isCase());
1158:       assertFalse(node1.isInc());
1159:       assertFalse(node1.hasMoreThanOneChild());
1160:       assertEquals((-1), node1.getLineno());
1161:       assertFalse(node1.isIn());
1162:       assertEquals((-1), node1.getCharno());
1163:       assertFalse(node1.isSwitch());
1164:       assertFalse(node1.isStringKey());
1165:       assertFalse(node1.isNE());
1166:       assertFalse(node1.isGetterDef());
1167:       assertFalse(node1.isNumber());
1168:       assertFalse(node1.isIf());
1169:       assertTrue(node1.hasChildren());
1170:       assertEquals(1, node1.getChildCount());
1171:       assertFalse(node1.isHook());
1172:       assertFalse(node1.isTry());
1173:       assertFalse(node1.isBlock());
1174:       assertFalse(node1.isFor());
1175:       
1176:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
1177:       assertEquals(56, Node.CHANGE_TIME);
1178:       assertEquals(47, Node.IS_DISPATCHER);
1179:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1180:       assertEquals(29, Node.JSDOC_INFO_PROP);
1181:       assertEquals(37, Node.OPT_ARG_NAME);
1182:       assertEquals(32, Node.INCRDECR_PROP);
1183:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1184:       assertEquals(46, Node.IS_NAMESPACE);
1185:       assertEquals(53, Node.INPUT_ID);
1186:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1187:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1188:       assertEquals(57, Node.LAST_PROP);
1189:       assertEquals(43, Node.IS_CONSTANT_NAME);
1190:       assertEquals(54, Node.SLASH_V);
1191:       assertEquals(40, Node.ORIGINALNAME_PROP);
1192:       assertEquals(2, Node.POST_FLAG);
1193:       assertEquals(30, Node.VAR_ARGS_NAME);
1194:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1196:       assertEquals(39, Node.EMPTY_BLOCK);
1197:       assertEquals(48, Node.DIRECTIVES);
1198:       assertEquals(55, Node.INFERRED_FUNCTION);
1199:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1200:       assertEquals(57, Node.REFLECTED_OBJECT);
1201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1202:       assertEquals(52, Node.LENGTH);
1203:       assertEquals(8, Node.FLAG_NO_THROWS);
1204:       assertEquals(50, Node.FREE_CALL);
1205:       assertEquals(36, Node.QUOTED_PROP);
1206:       assertEquals(1, Node.DECR_FLAG);
1207:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1208:       assertEquals(49, Node.DIRECT_EVAL);
1209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1210:       assertEquals(4095, Node.COLUMN_MASK);
1211:       assertEquals(12, Node.COLUMN_BITS);
1212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1213:       assertFalse(node0.equals((Object)node1));
1214:       assertNotNull(node_FileLevelJsDocBuilder0);
1215:       assertFalse(node0.isAssign());
1216:       assertFalse(node0.isLabelName());
1217:       assertFalse(node0.isGetElem());
1218:       assertFalse(node0.hasChildren());
1219:       assertFalse(node0.isDec());
1220:       assertEquals((-1), node0.getSourcePosition());
1221:       assertFalse(node0.isAssignAdd());
1222:       assertFalse(node0.isOr());
1223:       assertFalse(node0.hasOneChild());
1224:       assertFalse(node0.isScript());
1225:       assertFalse(node0.isNumber());
1226:       assertFalse(node0.isWith());
1227:       assertFalse(node0.isWhile());
1228:       assertFalse(node0.isReturn());
1229:       assertFalse(node0.isBlock());
1230:       assertEquals((-1), node0.getLineno());
1231:       assertFalse(node0.isComma());
1232:       assertFalse(node0.hasMoreThanOneChild());
1233:       assertFalse(node0.isTypeOf());
1234:       assertFalse(node0.isExprResult());
1235:       assertFalse(node0.isCall());
1236:       assertFalse(node0.isInstanceOf());
1237:       assertFalse(node0.isFalse());
1238:       assertFalse(node0.isThrow());
1239:       assertFalse(node0.isGetProp());
1240:       assertFalse(node0.isSetterDef());
1241:       assertFalse(node0.isInc());
1242:       assertFalse(node0.isNot());
1243:       assertEquals(40, node0.getType());
1244:       assertFalse(node0.isObjectLit());
1245:       assertFalse(node0.isAnd());
1246:       assertFalse(node0.isCast());
1247:       assertFalse(node0.isFunction());
1248:       assertFalse(node0.isContinue());
1249:       assertFalse(node0.isEmpty());
1250:       assertFalse(node0.isFor());
1251:       assertFalse(node0.isDelProp());
1252:       assertFalse(node0.isGetterDef());
1253:       assertFalse(node0.isNE());
1254:       assertFalse(node0.isIf());
1255:       assertFalse(node0.isTry());
1256:       assertFalse(node0.isDebugger());
1257:       assertFalse(node0.isIn());
1258:       assertFalse(node0.isCase());
1259:       assertFalse(node0.isTrue());
1260:       assertFalse(node0.isVoid());
1261:       assertFalse(node0.isRegExp());
1262:       assertFalse(node0.isCatch());
1263:       assertFalse(node0.isName());
1264:       assertFalse(node0.isBreak());
1265:       assertFalse(node0.isVar());
1266:       assertFalse(node0.isNull());
1267:       assertFalse(node0.isHook());
1268:       assertFalse(node0.isThis());
1269:       assertFalse(node0.isStringKey());
1270:       assertFalse(node0.isParamList());
1271:       assertFalse(node0.isAdd());
1272:       assertTrue(node0.isString());
1273:       assertEquals((-1), node0.getCharno());
1274:       assertFalse(node0.isNew());
1275:       assertFalse(node0.isDo());
1276:       assertFalse(node0.isSwitch());
1277:       assertFalse(node0.isDefaultCase());
1278:       assertFalse(node0.isLabel());
1279:       assertEquals(0, node0.getChildCount());
1280:       assertFalse(node0.isArrayLit());
1281:       
1282:       node_FileLevelJsDocBuilder0.append("Cx @9Ip!Lt:aWd2 -7");
1283:       assertEquals(56, Node.CHANGE_TIME);
1284:       assertEquals(47, Node.IS_DISPATCHER);
1285:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1286:       assertEquals(29, Node.JSDOC_INFO_PROP);
1287:       assertEquals(37, Node.OPT_ARG_NAME);
1288:       assertEquals(32, Node.INCRDECR_PROP);
1289:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1290:       assertEquals(46, Node.IS_NAMESPACE);
1291:       assertEquals(53, Node.INPUT_ID);
1292:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1293:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1294:       assertEquals(57, Node.LAST_PROP);
1295:       assertEquals(43, Node.IS_CONSTANT_NAME);
1296:       assertEquals(54, Node.SLASH_V);
1297:       assertEquals(40, Node.ORIGINALNAME_PROP);
1298:       assertEquals(2, Node.POST_FLAG);
1299:       assertEquals(30, Node.VAR_ARGS_NAME);
1300:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1302:       assertEquals(39, Node.EMPTY_BLOCK);
1303:       assertEquals(48, Node.DIRECTIVES);
1304:       assertEquals(55, Node.INFERRED_FUNCTION);
1305:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1306:       assertEquals(57, Node.REFLECTED_OBJECT);
1307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1308:       assertEquals(52, Node.LENGTH);
1309:       assertEquals(8, Node.FLAG_NO_THROWS);
1310:       assertEquals(50, Node.FREE_CALL);
1311:       assertEquals(36, Node.QUOTED_PROP);
1312:       assertEquals(1, Node.DECR_FLAG);
1313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1314:       assertEquals(49, Node.DIRECT_EVAL);
1315:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1316:       assertEquals(4095, Node.COLUMN_MASK);
1317:       assertEquals(12, Node.COLUMN_BITS);
1318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1319:       assertFalse(node0.equals((Object)node1));
1320:       assertSame(node0, node2);
1321:       assertFalse(node0.isAssign());
1322:       assertFalse(node0.isLabelName());
1323:       assertFalse(node0.isGetElem());
1324:       assertFalse(node0.hasChildren());
1325:       assertFalse(node0.isDec());
1326:       assertEquals((-1), node0.getSourcePosition());
1327:       assertFalse(node0.isAssignAdd());
1328:       assertFalse(node0.isOr());
1329:       assertFalse(node0.hasOneChild());
1330:       assertFalse(node0.isScript());
1331:       assertFalse(node0.isNumber());
1332:       assertFalse(node0.isWith());
1333:       assertFalse(node0.isWhile());
1334:       assertFalse(node0.isReturn());
1335:       assertFalse(node0.isBlock());
1336:       assertEquals((-1), node0.getLineno());
1337:       assertFalse(node0.isComma());
1338:       assertFalse(node0.hasMoreThanOneChild());
1339:       assertFalse(node0.isTypeOf());
1340:       assertFalse(node0.isExprResult());
1341:       assertFalse(node0.isCall());
1342:       assertFalse(node0.isInstanceOf());
1343:       assertFalse(node0.isFalse());
1344:       assertFalse(node0.isThrow());
1345:       assertFalse(node0.isGetProp());
1346:       assertFalse(node0.isSetterDef());
1347:       assertFalse(node0.isInc());
1348:       assertFalse(node0.isNot());
1349:       assertEquals(40, node0.getType());
1350:       assertFalse(node0.isObjectLit());
1351:       assertFalse(node0.isAnd());
1352:       assertFalse(node0.isCast());
1353:       assertFalse(node0.isFunction());
1354:       assertFalse(node0.isContinue());
1355:       assertFalse(node0.isEmpty());
1356:       assertFalse(node0.isFor());
1357:       assertFalse(node0.isDelProp());
1358:       assertFalse(node0.isGetterDef());
1359:       assertFalse(node0.isNE());
1360:       assertFalse(node0.isIf());
1361:       assertFalse(node0.isTry());
1362:       assertFalse(node0.isDebugger());
1363:       assertFalse(node0.isIn());
1364:       assertFalse(node0.isCase());
1365:       assertFalse(node0.isTrue());
1366:       assertFalse(node0.isVoid());
1367:       assertFalse(node0.isRegExp());
1368:       assertFalse(node0.isCatch());
1369:       assertFalse(node0.isName());
1370:       assertFalse(node0.isBreak());
1371:       assertFalse(node0.isVar());
1372:       assertFalse(node0.isNull());
1373:       assertFalse(node0.isHook());
1374:       assertFalse(node0.isThis());
1375:       assertFalse(node0.isStringKey());
1376:       assertFalse(node0.isParamList());
1377:       assertFalse(node0.isAdd());
1378:       assertTrue(node0.isString());
1379:       assertEquals((-1), node0.getCharno());
1380:       assertFalse(node0.isNew());
1381:       assertFalse(node0.isDo());
1382:       assertFalse(node0.isSwitch());
1383:       assertFalse(node0.isDefaultCase());
1384:       assertFalse(node0.isLabel());
1385:       assertEquals(0, node0.getChildCount());
1386:       assertFalse(node0.isArrayLit());
1387:       
1388:       node_FileLevelJsDocBuilder0.append("None");
1389:       assertEquals(56, Node.CHANGE_TIME);
1390:       assertEquals(47, Node.IS_DISPATCHER);
1391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1392:       assertEquals(29, Node.JSDOC_INFO_PROP);
1393:       assertEquals(37, Node.OPT_ARG_NAME);
1394:       assertEquals(32, Node.INCRDECR_PROP);
1395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1396:       assertEquals(46, Node.IS_NAMESPACE);
1397:       assertEquals(53, Node.INPUT_ID);
1398:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1399:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1400:       assertEquals(57, Node.LAST_PROP);
1401:       assertEquals(43, Node.IS_CONSTANT_NAME);
1402:       assertEquals(54, Node.SLASH_V);
1403:       assertEquals(40, Node.ORIGINALNAME_PROP);
1404:       assertEquals(2, Node.POST_FLAG);
1405:       assertEquals(30, Node.VAR_ARGS_NAME);
1406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1407:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1408:       assertEquals(39, Node.EMPTY_BLOCK);
1409:       assertEquals(48, Node.DIRECTIVES);
1410:       assertEquals(55, Node.INFERRED_FUNCTION);
1411:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1412:       assertEquals(57, Node.REFLECTED_OBJECT);
1413:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1414:       assertEquals(52, Node.LENGTH);
1415:       assertEquals(8, Node.FLAG_NO_THROWS);
1416:       assertEquals(50, Node.FREE_CALL);
1417:       assertEquals(36, Node.QUOTED_PROP);
1418:       assertEquals(1, Node.DECR_FLAG);
1419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1420:       assertEquals(49, Node.DIRECT_EVAL);
1421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1422:       assertEquals(4095, Node.COLUMN_MASK);
1423:       assertEquals(12, Node.COLUMN_BITS);
1424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1425:       assertFalse(node0.equals((Object)node1));
1426:       assertSame(node0, node2);
1427:       assertFalse(node0.isAssign());
1428:       assertFalse(node0.isLabelName());
1429:       assertFalse(node0.isGetElem());
1430:       assertFalse(node0.hasChildren());
1431:       assertFalse(node0.isDec());
1432:       assertEquals((-1), node0.getSourcePosition());
1433:       assertFalse(node0.isAssignAdd());
1434:       assertFalse(node0.isOr());
1435:       assertFalse(node0.hasOneChild());
1436:       assertFalse(node0.isScript());
1437:       assertFalse(node0.isNumber());
1438:       assertFalse(node0.isWith());
1439:       assertFalse(node0.isWhile());
1440:       assertFalse(node0.isReturn());
1441:       assertFalse(node0.isBlock());
1442:       assertEquals((-1), node0.getLineno());
1443:       assertFalse(node0.isComma());
1444:       assertFalse(node0.hasMoreThanOneChild());
1445:       assertFalse(node0.isTypeOf());
1446:       assertFalse(node0.isExprResult());
1447:       assertFalse(node0.isCall());
1448:       assertFalse(node0.isInstanceOf());
1449:       assertFalse(node0.isFalse());
1450:       assertFalse(node0.isThrow());
1451:       assertFalse(node0.isGetProp());
1452:       assertFalse(node0.isSetterDef());
1453:       assertFalse(node0.isInc());
1454:       assertFalse(node0.isNot());
1455:       assertEquals(40, node0.getType());
1456:       assertFalse(node0.isObjectLit());
1457:       assertFalse(node0.isAnd());
1458:       assertFalse(node0.isCast());
1459:       assertFalse(node0.isFunction());
1460:       assertFalse(node0.isContinue());
1461:       assertFalse(node0.isEmpty());
1462:       assertFalse(node0.isFor());
1463:       assertFalse(node0.isDelProp());
1464:       assertFalse(node0.isGetterDef());
1465:       assertFalse(node0.isNE());
1466:       assertFalse(node0.isIf());
1467:       assertFalse(node0.isTry());
1468:       assertFalse(node0.isDebugger());
1469:       assertFalse(node0.isIn());
1470:       assertFalse(node0.isCase());
1471:       assertFalse(node0.isTrue());
1472:       assertFalse(node0.isVoid());
1473:       assertFalse(node0.isRegExp());
1474:       assertFalse(node0.isCatch());
1475:       assertFalse(node0.isName());
1476:       assertFalse(node0.isBreak());
1477:       assertFalse(node0.isVar());
1478:       assertFalse(node0.isNull());
1479:       assertFalse(node0.isHook());
1480:       assertFalse(node0.isThis());
1481:       assertFalse(node0.isStringKey());
1482:       assertFalse(node0.isParamList());
1483:       assertFalse(node0.isAdd());
1484:       assertTrue(node0.isString());
1485:       assertEquals((-1), node0.getCharno());
1486:       assertFalse(node0.isNew());
1487:       assertFalse(node0.isDo());
1488:       assertFalse(node0.isSwitch());
1489:       assertFalse(node0.isDefaultCase());
1490:       assertFalse(node0.isLabel());
1491:       assertEquals(0, node0.getChildCount());
1492:       assertFalse(node0.isArrayLit());
1493:       
1494:       String string0 = node0.getSourceFileName();
1495:       assertEquals(56, Node.CHANGE_TIME);
1496:       assertEquals(47, Node.IS_DISPATCHER);
1497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1498:       assertEquals(29, Node.JSDOC_INFO_PROP);
1499:       assertEquals(37, Node.OPT_ARG_NAME);
1500:       assertEquals(32, Node.INCRDECR_PROP);
1501:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1502:       assertEquals(46, Node.IS_NAMESPACE);
1503:       assertEquals(53, Node.INPUT_ID);
1504:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1505:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1506:       assertEquals(57, Node.LAST_PROP);
1507:       assertEquals(43, Node.IS_CONSTANT_NAME);
1508:       assertEquals(54, Node.SLASH_V);
1509:       assertEquals(40, Node.ORIGINALNAME_PROP);
1510:       assertEquals(2, Node.POST_FLAG);
1511:       assertEquals(30, Node.VAR_ARGS_NAME);
1512:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1513:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1514:       assertEquals(39, Node.EMPTY_BLOCK);
1515:       assertEquals(48, Node.DIRECTIVES);
1516:       assertEquals(55, Node.INFERRED_FUNCTION);
1517:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1518:       assertEquals(57, Node.REFLECTED_OBJECT);
1519:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1520:       assertEquals(52, Node.LENGTH);
1521:       assertEquals(8, Node.FLAG_NO_THROWS);
1522:       assertEquals(50, Node.FREE_CALL);
1523:       assertEquals(36, Node.QUOTED_PROP);
1524:       assertEquals(1, Node.DECR_FLAG);
1525:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1526:       assertEquals(49, Node.DIRECT_EVAL);
1527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1528:       assertEquals(4095, Node.COLUMN_MASK);
1529:       assertEquals(12, Node.COLUMN_BITS);
1530:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1531:       assertFalse(node0.equals((Object)node1));
1532:       assertNull(string0);
1533:       assertSame(node0, node2);
1534:       assertFalse(node0.isAssign());
1535:       assertFalse(node0.isLabelName());
1536:       assertFalse(node0.isGetElem());
1537:       assertFalse(node0.hasChildren());
1538:       assertFalse(node0.isDec());
1539:       assertEquals((-1), node0.getSourcePosition());
1540:       assertFalse(node0.isAssignAdd());
1541:       assertFalse(node0.isOr());
1542:       assertFalse(node0.hasOneChild());
1543:       assertFalse(node0.isScript());
1544:       assertFalse(node0.isNumber());
1545:       assertFalse(node0.isWith());
1546:       assertFalse(node0.isWhile());
1547:       assertFalse(node0.isReturn());
1548:       assertFalse(node0.isBlock());
1549:       assertEquals((-1), node0.getLineno());
1550:       assertFalse(node0.isComma());
1551:       assertFalse(node0.hasMoreThanOneChild());
1552:       assertFalse(node0.isTypeOf());
1553:       assertFalse(node0.isExprResult());
1554:       assertFalse(node0.isCall());
1555:       assertFalse(node0.isInstanceOf());
1556:       assertFalse(node0.isFalse());
1557:       assertFalse(node0.isThrow());
1558:       assertFalse(node0.isGetProp());
1559:       assertFalse(node0.isSetterDef());
1560:       assertFalse(node0.isInc());
1561:       assertFalse(node0.isNot());
1562:       assertEquals(40, node0.getType());
1563:       assertFalse(node0.isObjectLit());
1564:       assertFalse(node0.isAnd());
1565:       assertFalse(node0.isCast());
1566:       assertFalse(node0.isFunction());
1567:       assertFalse(node0.isContinue());
1568:       assertFalse(node0.isEmpty());
1569:       assertFalse(node0.isFor());
1570:       assertFalse(node0.isDelProp());
1571:       assertFalse(node0.isGetterDef());
1572:       assertFalse(node0.isNE());
1573:       assertFalse(node0.isIf());
1574:       assertFalse(node0.isTry());
1575:       assertFalse(node0.isDebugger());
1576:       assertFalse(node0.isIn());
1577:       assertFalse(node0.isCase());
1578:       assertFalse(node0.isTrue());
1579:       assertFalse(node0.isVoid());
1580:       assertFalse(node0.isRegExp());
1581:       assertFalse(node0.isCatch());
1582:       assertFalse(node0.isName());
1583:       assertFalse(node0.isBreak());
1584:       assertFalse(node0.isVar());
1585:       assertFalse(node0.isNull());
1586:       assertFalse(node0.isHook());
1587:       assertFalse(node0.isThis());
1588:       assertFalse(node0.isStringKey());
1589:       assertFalse(node0.isParamList());
1590:       assertFalse(node0.isAdd());
1591:       assertTrue(node0.isString());
1592:       assertEquals((-1), node0.getCharno());
1593:       assertFalse(node0.isNew());
1594:       assertFalse(node0.isDo());
1595:       assertFalse(node0.isSwitch());
1596:       assertFalse(node0.isDefaultCase());
1597:       assertFalse(node0.isLabel());
1598:       assertEquals(0, node0.getChildCount());
1599:       assertFalse(node0.isArrayLit());
1600:       
1601:       int int0 = node1.getLineno();
1602:       assertEquals(56, Node.CHANGE_TIME);
1603:       assertEquals(47, Node.IS_DISPATCHER);
1604:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1605:       assertEquals(29, Node.JSDOC_INFO_PROP);
1606:       assertEquals(37, Node.OPT_ARG_NAME);
1607:       assertEquals(32, Node.INCRDECR_PROP);
1608:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1609:       assertEquals(46, Node.IS_NAMESPACE);
1610:       assertEquals(53, Node.INPUT_ID);
1611:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1612:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1613:       assertEquals(57, Node.LAST_PROP);
1614:       assertEquals(43, Node.IS_CONSTANT_NAME);
1615:       assertEquals(54, Node.SLASH_V);
1616:       assertEquals(40, Node.ORIGINALNAME_PROP);
1617:       assertEquals(2, Node.POST_FLAG);
1618:       assertEquals(30, Node.VAR_ARGS_NAME);
1619:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1620:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1621:       assertEquals(39, Node.EMPTY_BLOCK);
1622:       assertEquals(48, Node.DIRECTIVES);
1623:       assertEquals(55, Node.INFERRED_FUNCTION);
1624:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1625:       assertEquals(57, Node.REFLECTED_OBJECT);
1626:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1627:       assertEquals(52, Node.LENGTH);
1628:       assertEquals(8, Node.FLAG_NO_THROWS);
1629:       assertEquals(50, Node.FREE_CALL);
1630:       assertEquals(36, Node.QUOTED_PROP);
1631:       assertEquals(1, Node.DECR_FLAG);
1632:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1633:       assertEquals(49, Node.DIRECT_EVAL);
1634:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1635:       assertEquals(4095, Node.COLUMN_MASK);
1636:       assertEquals(12, Node.COLUMN_BITS);
1637:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1638:       assertEquals(43, Node.IS_CONSTANT_NAME);
1639:       assertEquals(36, Node.QUOTED_PROP);
1640:       assertEquals(53, Node.INPUT_ID);
1641:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1642:       assertEquals(4095, Node.COLUMN_MASK);
1643:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1644:       assertEquals(48, Node.DIRECTIVES);
1645:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1646:       assertEquals(37, Node.OPT_ARG_NAME);
1647:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1648:       assertEquals(50, Node.FREE_CALL);
1649:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1650:       assertEquals(12, Node.COLUMN_BITS);
1651:       assertEquals(1, Node.DECR_FLAG);
1652:       assertEquals(32, Node.INCRDECR_PROP);
1653:       assertEquals(54, Node.SLASH_V);
1654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1655:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1656:       assertEquals(30, Node.VAR_ARGS_NAME);
1657:       assertEquals(52, Node.LENGTH);
1658:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1659:       assertEquals(40, Node.ORIGINALNAME_PROP);
1660:       assertEquals(46, Node.IS_NAMESPACE);
1661:       assertEquals(57, Node.REFLECTED_OBJECT);
1662:       assertEquals(49, Node.DIRECT_EVAL);
1663:       assertEquals(2, Node.POST_FLAG);
1664:       assertEquals(56, Node.CHANGE_TIME);
1665:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1666:       assertEquals(39, Node.EMPTY_BLOCK);
1667:       assertEquals(47, Node.IS_DISPATCHER);
1668:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1669:       assertEquals(29, Node.JSDOC_INFO_PROP);
1670:       assertEquals(8, Node.FLAG_NO_THROWS);
1671:       assertEquals(55, Node.INFERRED_FUNCTION);
1672:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1673:       assertEquals(57, Node.LAST_PROP);
1674:       assertFalse(node0.equals((Object)node1));
1675:       assertFalse(node1.equals((Object)node2));
1676:       assertFalse(node1.equals((Object)node0));
1677:       assertSame(node0, node2);
1678:       assertEquals((-1), int0);
1679:       assertFalse(node0.isAssign());
1680:       assertFalse(node0.isLabelName());
1681:       assertFalse(node0.isGetElem());
1682:       assertFalse(node0.hasChildren());
1683:       assertFalse(node0.isDec());
1684:       assertEquals((-1), node0.getSourcePosition());
1685:       assertFalse(node0.isAssignAdd());
1686:       assertFalse(node0.isOr());
1687:       assertFalse(node0.hasOneChild());
1688:       assertFalse(node0.isScript());
1689:       assertFalse(node0.isNumber());
1690:       assertFalse(node0.isWith());
1691:       assertFalse(node0.isWhile());
1692:       assertFalse(node0.isReturn());
1693:       assertFalse(node0.isBlock());
1694:       assertEquals((-1), node0.getLineno());
1695:       assertFalse(node0.isComma());
1696:       assertFalse(node0.hasMoreThanOneChild());
1697:       assertFalse(node0.isTypeOf());
1698:       assertFalse(node0.isExprResult());
1699:       assertFalse(node0.isCall());
1700:       assertFalse(node0.isInstanceOf());
1701:       assertFalse(node0.isFalse());
1702:       assertFalse(node0.isThrow());
1703:       assertFalse(node0.isGetProp());
1704:       assertFalse(node0.isSetterDef());
1705:       assertFalse(node0.isInc());
1706:       assertFalse(node0.isNot());
1707:       assertEquals(40, node0.getType());
1708:       assertFalse(node0.isObjectLit());
1709:       assertFalse(node0.isAnd());
1710:       assertFalse(node0.isCast());
1711:       assertFalse(node0.isFunction());
1712:       assertFalse(node0.isContinue());
1713:       assertFalse(node0.isEmpty());
1714:       assertFalse(node0.isFor());
1715:       assertFalse(node0.isDelProp());
1716:       assertFalse(node0.isGetterDef());
1717:       assertFalse(node0.isNE());
1718:       assertFalse(node0.isIf());
1719:       assertFalse(node0.isTry());
1720:       assertFalse(node0.isDebugger());
1721:       assertFalse(node0.isIn());
1722:       assertFalse(node0.isCase());
1723:       assertFalse(node0.isTrue());
1724:       assertFalse(node0.isVoid());
1725:       assertFalse(node0.isRegExp());
1726:       assertFalse(node0.isCatch());
1727:       assertFalse(node0.isName());
1728:       assertFalse(node0.isBreak());
1729:       assertFalse(node0.isVar());
1730:       assertFalse(node0.isNull());
1731:       assertFalse(node0.isHook());
1732:       assertFalse(node0.isThis());
1733:       assertFalse(node0.isStringKey());
1734:       assertFalse(node0.isParamList());
1735:       assertFalse(node0.isAdd());
1736:       assertTrue(node0.isString());
1737:       assertEquals((-1), node0.getCharno());
1738:       assertFalse(node0.isNew());
1739:       assertFalse(node0.isDo());
1740:       assertFalse(node0.isSwitch());
1741:       assertFalse(node0.isDefaultCase());
1742:       assertFalse(node0.isLabel());
1743:       assertEquals(0, node0.getChildCount());
1744:       assertFalse(node0.isArrayLit());
1745:       assertFalse(node1.isDefaultCase());
1746:       assertFalse(node1.isRegExp());
1747:       assertFalse(node1.isFunction());
1748:       assertTrue(node1.isThis());
1749:       assertFalse(node1.isCatch());
1750:       assertFalse(node1.isArrayLit());
1751:       assertFalse(node1.isVoid());
1752:       assertFalse(node1.isParamList());
1753:       assertFalse(node1.isTrue());
1754:       assertFalse(node1.isDebugger());
1755:       assertFalse(node1.isNull());
1756:       assertFalse(node1.isSetterDef());
1757:       assertFalse(node1.isEmpty());
1758:       assertFalse(node1.isNew());
1759:       assertFalse(node1.isVar());
1760:       assertFalse(node1.isWhile());
1761:       assertFalse(node1.isString());
1762:       assertFalse(node1.isDo());
1763:       assertFalse(node1.isContinue());
1764:       assertFalse(node1.isAdd());
1765:       assertFalse(node1.isOr());
1766:       assertTrue(node1.hasOneChild());
1767:       assertFalse(node1.isDelProp());
1768:       assertFalse(node1.isBreak());
1769:       assertFalse(node1.isTypeOf());
1770:       assertFalse(node1.isName());
1771:       assertEquals((-1), node1.getSourcePosition());
1772:       assertFalse(node1.isDec());
1773:       assertFalse(node1.isAssign());
1774:       assertFalse(node1.isCall());
1775:       assertFalse(node1.isGetProp());
1776:       assertFalse(node1.isGetElem());
1777:       assertFalse(node1.isReturn());
1778:       assertFalse(node1.isComma());
1779:       assertFalse(node1.isWith());
1780:       assertFalse(node1.isNot());
1781:       assertFalse(node1.isExprResult());
1782:       assertFalse(node1.isObjectLit());
1783:       assertFalse(node1.isScript());
1784:       assertFalse(node1.isInstanceOf());
1785:       assertFalse(node1.isAnd());
1786:       assertFalse(node1.isLabelName());
1787:       assertFalse(node1.isFalse());
1788:       assertFalse(node1.isCast());
1789:       assertFalse(node1.isLabel());
1790:       assertFalse(node1.isAssignAdd());
1791:       assertEquals(42, node1.getType());
1792:       assertFalse(node1.isThrow());
1793:       assertFalse(node1.isCase());
1794:       assertFalse(node1.isInc());
1795:       assertFalse(node1.hasMoreThanOneChild());
1796:       assertEquals((-1), node1.getLineno());
1797:       assertFalse(node1.isIn());
1798:       assertEquals((-1), node1.getCharno());
1799:       assertFalse(node1.isSwitch());
1800:       assertFalse(node1.isStringKey());
1801:       assertFalse(node1.isNE());
1802:       assertFalse(node1.isGetterDef());
1803:       assertFalse(node1.isNumber());
1804:       assertFalse(node1.isIf());
1805:       assertTrue(node1.hasChildren());
1806:       assertEquals(1, node1.getChildCount());
1807:       assertFalse(node1.isHook());
1808:       assertFalse(node1.isTry());
1809:       assertFalse(node1.isBlock());
1810:       assertFalse(node1.isFor());
1811:       
1812:       boolean boolean3 = node2.mayMutateArguments();
1813:       assertEquals(56, Node.CHANGE_TIME);
1814:       assertEquals(47, Node.IS_DISPATCHER);
1815:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1816:       assertEquals(29, Node.JSDOC_INFO_PROP);
1817:       assertEquals(37, Node.OPT_ARG_NAME);
1818:       assertEquals(32, Node.INCRDECR_PROP);
1819:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1820:       assertEquals(46, Node.IS_NAMESPACE);
1821:       assertEquals(53, Node.INPUT_ID);
1822:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1824:       assertEquals(57, Node.LAST_PROP);
1825:       assertEquals(43, Node.IS_CONSTANT_NAME);
1826:       assertEquals(54, Node.SLASH_V);
1827:       assertEquals(40, Node.ORIGINALNAME_PROP);
1828:       assertEquals(2, Node.POST_FLAG);
1829:       assertEquals(30, Node.VAR_ARGS_NAME);
1830:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1831:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1832:       assertEquals(39, Node.EMPTY_BLOCK);
1833:       assertEquals(48, Node.DIRECTIVES);
1834:       assertEquals(55, Node.INFERRED_FUNCTION);
1835:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1836:       assertEquals(57, Node.REFLECTED_OBJECT);
1837:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1838:       assertEquals(52, Node.LENGTH);
1839:       assertEquals(8, Node.FLAG_NO_THROWS);
1840:       assertEquals(50, Node.FREE_CALL);
1841:       assertEquals(36, Node.QUOTED_PROP);
1842:       assertEquals(1, Node.DECR_FLAG);
1843:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1844:       assertEquals(49, Node.DIRECT_EVAL);
1845:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1846:       assertEquals(4095, Node.COLUMN_MASK);
1847:       assertEquals(12, Node.COLUMN_BITS);
1848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1849:       assertEquals(43, Node.IS_CONSTANT_NAME);
1850:       assertEquals(36, Node.QUOTED_PROP);
1851:       assertEquals(53, Node.INPUT_ID);
1852:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1853:       assertEquals(4095, Node.COLUMN_MASK);
1854:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1855:       assertEquals(48, Node.DIRECTIVES);
1856:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1857:       assertEquals(37, Node.OPT_ARG_NAME);
1858:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1859:       assertEquals(50, Node.FREE_CALL);
1860:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1861:       assertEquals(12, Node.COLUMN_BITS);
1862:       assertEquals(1, Node.DECR_FLAG);
1863:       assertEquals(32, Node.INCRDECR_PROP);
1864:       assertEquals(54, Node.SLASH_V);
1865:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1866:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1867:       assertEquals(30, Node.VAR_ARGS_NAME);
1868:       assertEquals(52, Node.LENGTH);
1869:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1870:       assertEquals(40, Node.ORIGINALNAME_PROP);
1871:       assertEquals(46, Node.IS_NAMESPACE);
1872:       assertEquals(57, Node.REFLECTED_OBJECT);
1873:       assertEquals(49, Node.DIRECT_EVAL);
1874:       assertEquals(2, Node.POST_FLAG);
1875:       assertEquals(56, Node.CHANGE_TIME);
1876:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1877:       assertEquals(39, Node.EMPTY_BLOCK);
1878:       assertEquals(47, Node.IS_DISPATCHER);
1879:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1880:       assertEquals(29, Node.JSDOC_INFO_PROP);
1881:       assertEquals(8, Node.FLAG_NO_THROWS);
1882:       assertEquals(55, Node.INFERRED_FUNCTION);
1883:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1884:       assertEquals(57, Node.LAST_PROP);
1885:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1886:       assertEquals(29, Node.JSDOC_INFO_PROP);
1887:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1888:       assertEquals(53, Node.INPUT_ID);
1889:       assertEquals(37, Node.OPT_ARG_NAME);
1890:       assertEquals(43, Node.IS_CONSTANT_NAME);
1891:       assertEquals(56, Node.CHANGE_TIME);
1892:       assertEquals(36, Node.QUOTED_PROP);
1893:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1894:       assertEquals(46, Node.IS_NAMESPACE);
1895:       assertEquals(55, Node.INFERRED_FUNCTION);
1896:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1897:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1898:       assertEquals(39, Node.EMPTY_BLOCK);
1899:       assertEquals(2, Node.POST_FLAG);
1900:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1901:       assertEquals(57, Node.LAST_PROP);
1902:       assertEquals(30, Node.VAR_ARGS_NAME);
1903:       assertEquals(47, Node.IS_DISPATCHER);
1904:       assertEquals(52, Node.LENGTH);
1905:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1906:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1907:       assertEquals(40, Node.ORIGINALNAME_PROP);
1908:       assertEquals(48, Node.DIRECTIVES);
1909:       assertEquals(8, Node.FLAG_NO_THROWS);
1910:       assertEquals(50, Node.FREE_CALL);
1911:       assertEquals(54, Node.SLASH_V);
1912:       assertEquals(57, Node.REFLECTED_OBJECT);
1913:       assertEquals(12, Node.COLUMN_BITS);
1914:       assertEquals(4095, Node.COLUMN_MASK);
1915:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1916:       assertEquals(32, Node.INCRDECR_PROP);
1917:       assertEquals(49, Node.DIRECT_EVAL);
1918:       assertEquals(1, Node.DECR_FLAG);
1919:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1920:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1921:       assertFalse(node0.equals((Object)node1));
1922:       assertFalse(node1.equals((Object)node2));
1923:       assertFalse(node1.equals((Object)node0));
1924:       assertFalse(node2.equals((Object)node1));
1925:       assertFalse(boolean3 == boolean2);
1926:       assertFalse(boolean3 == boolean0);
1927:       assertFalse(boolean3 == boolean1);
1928:       assertSame(node0, node2);
1929:       assertSame(node2, node0);
1930:       assertTrue(boolean3);
1931:       assertFalse(node0.isAssign());
1932:       assertFalse(node0.isLabelName());
1933:       assertFalse(node0.isGetElem());
1934:       assertFalse(node0.hasChildren());
1935:       assertFalse(node0.isDec());
1936:       assertEquals((-1), node0.getSourcePosition());
1937:       assertFalse(node0.isAssignAdd());
1938:       assertFalse(node0.isOr());
1939:       assertFalse(node0.hasOneChild());
1940:       assertFalse(node0.isScript());
1941:       
1942:       Node node3 = Node.newString(100, "None");
1943:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1944:       assertEquals(57, Node.LAST_PROP);
1945:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1946:       assertEquals(54, Node.SLASH_V);
1947:       assertEquals(30, Node.VAR_ARGS_NAME);
1948:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1949:       assertEquals(12, Node.COLUMN_BITS);
1950:       assertEquals(32, Node.INCRDECR_PROP);
1951:       assertEquals(52, Node.LENGTH);
1952:       assertEquals(1, Node.DECR_FLAG);
1953:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1954:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1955:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1956:       assertEquals(29, Node.JSDOC_INFO_PROP);
1957:       assertEquals(8, Node.FLAG_NO_THROWS);
1958:       assertEquals(56, Node.CHANGE_TIME);
1959:       assertEquals(57, Node.REFLECTED_OBJECT);
1960:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1961:       assertEquals(4095, Node.COLUMN_MASK);
1962:       assertEquals(48, Node.DIRECTIVES);
1963:       assertEquals(49, Node.DIRECT_EVAL);
1964:       assertEquals(37, Node.OPT_ARG_NAME);
1965:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1966:       assertEquals(43, Node.IS_CONSTANT_NAME);
1967:       assertEquals(36, Node.QUOTED_PROP);
1968:       assertEquals(55, Node.INFERRED_FUNCTION);
1969:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1970:       assertEquals(53, Node.INPUT_ID);
1971:       assertEquals(39, Node.EMPTY_BLOCK);
1972:       assertEquals(47, Node.IS_DISPATCHER);
1973:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1974:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1975:       assertEquals(50, Node.FREE_CALL);
1976:       assertEquals(2, Node.POST_FLAG);
1977:       assertEquals(46, Node.IS_NAMESPACE);
1978:       assertEquals(40, Node.ORIGINALNAME_PROP);
1979:       assertFalse(node3.equals((Object)node2));
1980:       assertFalse(node3.equals((Object)node0));
1981:       assertFalse(node3.equals((Object)node1));
1982:       assertNotNull(node3);
1983:       assertNotSame(node3, node2);
1984:       assertNotSame(node3, node0);
1985:       
1986:       InputId inputId0 = node3.getInputId();
1987:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1988:       assertEquals(57, Node.LAST_PROP);
1989:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1990:       assertEquals(54, Node.SLASH_V);
1991:       assertEquals(30, Node.VAR_ARGS_NAME);
1992:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1993:       assertEquals(12, Node.COLUMN_BITS);
1994:       assertEquals(32, Node.INCRDECR_PROP);
1995:       assertEquals(52, Node.LENGTH);
1996:       assertEquals(1, Node.DECR_FLAG);
1997:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1998:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1999:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2000:       assertEquals(29, Node.JSDOC_INFO_PROP);
2001:       assertEquals(8, Node.FLAG_NO_THROWS);
2002:       assertEquals(56, Node.CHANGE_TIME);
2003:       assertEquals(57, Node.REFLECTED_OBJECT);
2004:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2005:       assertEquals(4095, Node.COLUMN_MASK);
2006:       assertEquals(48, Node.DIRECTIVES);
2007:       assertEquals(49, Node.DIRECT_EVAL);
2008:       assertEquals(37, Node.OPT_ARG_NAME);
2009:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2010:       assertEquals(43, Node.IS_CONSTANT_NAME);
2011:       assertEquals(36, Node.QUOTED_PROP);
2012:       assertEquals(55, Node.INFERRED_FUNCTION);
2013:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2014:       assertEquals(53, Node.INPUT_ID);
2015:       assertEquals(39, Node.EMPTY_BLOCK);
2016:       assertEquals(47, Node.IS_DISPATCHER);
2017:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2018:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2019:       assertEquals(50, Node.FREE_CALL);
2020:       assertEquals(2, Node.POST_FLAG);
2021:       assertEquals(46, Node.IS_NAMESPACE);
2022:       assertEquals(40, Node.ORIGINALNAME_PROP);
2023:       assertFalse(node3.equals((Object)node2));
2024:       assertFalse(node3.equals((Object)node0));
2025:       assertFalse(node3.equals((Object)node1));
2026:       assertNull(inputId0);
2027:       assertNotSame(node3, node2);
2028:       assertNotSame(node3, node0);
2029:       
2030:       node1.setInputId((InputId) null);
2031:       assertEquals(56, Node.CHANGE_TIME);
2032:       assertEquals(47, Node.IS_DISPATCHER);
2033:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2034:       assertEquals(29, Node.JSDOC_INFO_PROP);
2035:       assertEquals(37, Node.OPT_ARG_NAME);
2036:       assertEquals(32, Node.INCRDECR_PROP);
2037:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2038:       assertEquals(46, Node.IS_NAMESPACE);
2039:       assertEquals(53, Node.INPUT_ID);
2040:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2041:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2042:       assertEquals(57, Node.LAST_PROP);
2043:       assertEquals(43, Node.IS_CONSTANT_NAME);
2044:       assertEquals(54, Node.SLASH_V);
2045:       assertEquals(40, Node.ORIGINALNAME_PROP);
2046:       assertEquals(2, Node.POST_FLAG);
2047:       assertEquals(30, Node.VAR_ARGS_NAME);
2048:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2049:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2050:       assertEquals(39, Node.EMPTY_BLOCK);
2051:       assertEquals(48, Node.DIRECTIVES);
2052:       assertEquals(55, Node.INFERRED_FUNCTION);
2053:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2054:       assertEquals(57, Node.REFLECTED_OBJECT);
2055:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2056:       assertEquals(52, Node.LENGTH);
2057:       assertEquals(8, Node.FLAG_NO_THROWS);
2058:       assertEquals(50, Node.FREE_CALL);
2059:       assertEquals(36, Node.QUOTED_PROP);
2060:       assertEquals(1, Node.DECR_FLAG);
2061:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2062:       assertEquals(49, Node.DIRECT_EVAL);
2063:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2064:       assertEquals(4095, Node.COLUMN_MASK);
2065:       assertEquals(12, Node.COLUMN_BITS);
2066:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2067:       assertEquals(43, Node.IS_CONSTANT_NAME);
2068:       assertEquals(36, Node.QUOTED_PROP);
2069:       assertEquals(53, Node.INPUT_ID);
2070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2071:       assertEquals(4095, Node.COLUMN_MASK);
2072:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2073:       assertEquals(48, Node.DIRECTIVES);
2074:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2075:       assertEquals(37, Node.OPT_ARG_NAME);
2076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2077:       assertEquals(50, Node.FREE_CALL);
2078:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2079:       assertEquals(12, Node.COLUMN_BITS);
2080:       assertEquals(1, Node.DECR_FLAG);
2081:       assertEquals(32, Node.INCRDECR_PROP);
2082:       assertEquals(54, Node.SLASH_V);
2083:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2084:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2085:       assertEquals(30, Node.VAR_ARGS_NAME);
2086:       assertEquals(52, Node.LENGTH);
2087:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2088:       assertEquals(40, Node.ORIGINALNAME_PROP);
2089:       assertEquals(46, Node.IS_NAMESPACE);
2090:       assertEquals(57, Node.REFLECTED_OBJECT);
2091:       assertEquals(49, Node.DIRECT_EVAL);
2092:       assertEquals(2, Node.POST_FLAG);
2093:       assertEquals(56, Node.CHANGE_TIME);
2094:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2095:       assertEquals(39, Node.EMPTY_BLOCK);
2096:       assertEquals(47, Node.IS_DISPATCHER);
2097:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2098:       assertEquals(29, Node.JSDOC_INFO_PROP);
2099:       assertEquals(8, Node.FLAG_NO_THROWS);
2100:       assertEquals(55, Node.INFERRED_FUNCTION);
2101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2102:       assertEquals(57, Node.LAST_PROP);
2103:       assertFalse(node0.equals((Object)node3));
2104:       assertFalse(node0.equals((Object)node1));
2105:       assertFalse(node1.equals((Object)node3));
2106:       assertFalse(node1.equals((Object)node2));
2107:       assertFalse(node1.equals((Object)node0));
2108:       assertNotSame(node0, node3);
2109:       assertSame(node0, node2);
2110:       
2111:       Iterable<Node> iterable0 = node2.children();
2112:       assertEquals(56, Node.CHANGE_TIME);
2113:       assertEquals(47, Node.IS_DISPATCHER);
2114:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2115:       assertEquals(29, Node.JSDOC_INFO_PROP);
2116:       assertEquals(37, Node.OPT_ARG_NAME);
2117:       assertEquals(32, Node.INCRDECR_PROP);
2118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2119:       assertEquals(46, Node.IS_NAMESPACE);
2120:       assertEquals(53, Node.INPUT_ID);
2121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2123:       assertEquals(57, Node.LAST_PROP);
2124:       assertEquals(43, Node.IS_CONSTANT_NAME);
2125:       assertEquals(54, Node.SLASH_V);
2126:       assertEquals(40, Node.ORIGINALNAME_PROP);
2127:       assertEquals(2, Node.POST_FLAG);
2128:       assertEquals(30, Node.VAR_ARGS_NAME);
2129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2131:       assertEquals(39, Node.EMPTY_BLOCK);
2132:       assertEquals(48, Node.DIRECTIVES);
2133:       assertEquals(55, Node.INFERRED_FUNCTION);
2134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2135:       assertEquals(57, Node.REFLECTED_OBJECT);
2136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2137:       assertEquals(52, Node.LENGTH);
2138:       assertEquals(8, Node.FLAG_NO_THROWS);
2139:       assertEquals(50, Node.FREE_CALL);
2140:       assertEquals(36, Node.QUOTED_PROP);
2141:       assertEquals(1, Node.DECR_FLAG);
2142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2143:       assertEquals(49, Node.DIRECT_EVAL);
2144:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2145:       assertEquals(4095, Node.COLUMN_MASK);
2146:       assertEquals(12, Node.COLUMN_BITS);
2147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2148:       assertEquals(43, Node.IS_CONSTANT_NAME);
2149:       assertEquals(36, Node.QUOTED_PROP);
2150:       assertEquals(53, Node.INPUT_ID);
2151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2152:       assertEquals(4095, Node.COLUMN_MASK);
2153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2154:       assertEquals(48, Node.DIRECTIVES);
2155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2156:       assertEquals(37, Node.OPT_ARG_NAME);
2157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2158:       assertEquals(50, Node.FREE_CALL);
2159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2160:       assertEquals(12, Node.COLUMN_BITS);
2161:       assertEquals(1, Node.DECR_FLAG);
2162:       assertEquals(32, Node.INCRDECR_PROP);
2163:       assertEquals(54, Node.SLASH_V);
2164:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2165:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2166:       assertEquals(30, Node.VAR_ARGS_NAME);
2167:       assertEquals(52, Node.LENGTH);
2168:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2169:       assertEquals(40, Node.ORIGINALNAME_PROP);
2170:       assertEquals(46, Node.IS_NAMESPACE);
2171:       assertEquals(57, Node.REFLECTED_OBJECT);
2172:       assertEquals(49, Node.DIRECT_EVAL);
2173:       assertEquals(2, Node.POST_FLAG);
2174:       assertEquals(56, Node.CHANGE_TIME);
2175:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2176:       assertEquals(39, Node.EMPTY_BLOCK);
2177:       assertEquals(47, Node.IS_DISPATCHER);
2178:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2179:       assertEquals(29, Node.JSDOC_INFO_PROP);
2180:       assertEquals(8, Node.FLAG_NO_THROWS);
2181:       assertEquals(55, Node.INFERRED_FUNCTION);
2182:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2183:       assertEquals(57, Node.LAST_PROP);
2184:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2185:       assertEquals(29, Node.JSDOC_INFO_PROP);
2186:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2187:       assertEquals(53, Node.INPUT_ID);
2188:       assertEquals(37, Node.OPT_ARG_NAME);
2189:       assertEquals(43, Node.IS_CONSTANT_NAME);
2190:       assertEquals(56, Node.CHANGE_TIME);
2191:       assertEquals(36, Node.QUOTED_PROP);
2192:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2193:       assertEquals(46, Node.IS_NAMESPACE);
2194:       assertEquals(55, Node.INFERRED_FUNCTION);
2195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2197:       assertEquals(39, Node.EMPTY_BLOCK);
2198:       assertEquals(2, Node.POST_FLAG);
2199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2200:       assertEquals(57, Node.LAST_PROP);
2201:       assertEquals(30, Node.VAR_ARGS_NAME);
2202:       assertEquals(47, Node.IS_DISPATCHER);
2203:       assertEquals(52, Node.LENGTH);
2204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2205:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2206:       assertEquals(40, Node.ORIGINALNAME_PROP);
2207:       assertEquals(48, Node.DIRECTIVES);
2208:       assertEquals(8, Node.FLAG_NO_THROWS);
2209:       assertEquals(50, Node.FREE_CALL);
2210:       assertEquals(54, Node.SLASH_V);
2211:       assertEquals(57, Node.REFLECTED_OBJECT);
2212:       assertEquals(12, Node.COLUMN_BITS);
2213:       assertEquals(4095, Node.COLUMN_MASK);
2214:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2215:       assertEquals(32, Node.INCRDECR_PROP);
2216:       assertEquals(49, Node.DIRECT_EVAL);
2217:       assertEquals(1, Node.DECR_FLAG);
2218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2220:       assertFalse(node0.equals((Object)node3));
2221:       assertFalse(node0.equals((Object)node1));
2222:       assertFalse(node1.equals((Object)node3));
2223:       assertFalse(node1.equals((Object)node2));
2224:       assertFalse(node1.equals((Object)node0));
2225:       assertFalse(node2.equals((Object)node1));
2226:       assertFalse(node2.equals((Object)node3));
2227:       assertNotNull(iterable0);
2228:       assertNotSame(node0, node3);
2229:       assertSame(node0, node2);
2230:       assertNotSame(node2, node3);
2231:       assertSame(node2, node0);
2232:       assertFalse(iterable0.contains(node0));
2233:       
2234:       Node node4 = new Node((-476), 10, 56);
2235:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2237:       assertEquals(36, Node.QUOTED_PROP);
2238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2239:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2240:       assertEquals(53, Node.INPUT_ID);
2241:       assertEquals(55, Node.INFERRED_FUNCTION);
2242:       assertEquals(29, Node.JSDOC_INFO_PROP);
2243:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2244:       assertEquals(4095, Node.COLUMN_MASK);
2245:       assertEquals(32, Node.INCRDECR_PROP);
2246:       assertEquals(1, Node.DECR_FLAG);
2247:       assertEquals(12, Node.COLUMN_BITS);
2248:       assertEquals(56, Node.CHANGE_TIME);
2249:       assertEquals(37, Node.OPT_ARG_NAME);
2250:       assertEquals(48, Node.DIRECTIVES);
2251:       assertEquals(49, Node.DIRECT_EVAL);
2252:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2253:       assertEquals(57, Node.REFLECTED_OBJECT);
2254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2255:       assertEquals(54, Node.SLASH_V);
2256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2257:       assertEquals(57, Node.LAST_PROP);
2258:       assertEquals(8, Node.FLAG_NO_THROWS);
2259:       assertEquals(50, Node.FREE_CALL);
2260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2261:       assertEquals(52, Node.LENGTH);
2262:       assertEquals(39, Node.EMPTY_BLOCK);
2263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2265:       assertEquals(46, Node.IS_NAMESPACE);
2266:       assertEquals(43, Node.IS_CONSTANT_NAME);
2267:       assertEquals(47, Node.IS_DISPATCHER);
2268:       assertEquals(2, Node.POST_FLAG);
2269:       assertEquals(30, Node.VAR_ARGS_NAME);
2270:       assertEquals(40, Node.ORIGINALNAME_PROP);
2271:       assertFalse(node4.equals((Object)node1));
2272:       assertFalse(node4.equals((Object)node0));
2273:       assertFalse(node4.equals((Object)node2));
2274:       assertFalse(node4.equals((Object)node3));
2275:       assertNotNull(node4);
2276:       
2277:       boolean boolean4 = node1.isRegExp();
2278:       assertEquals(56, Node.CHANGE_TIME);
2279:       assertEquals(47, Node.IS_DISPATCHER);
2280:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2281:       assertEquals(29, Node.JSDOC_INFO_PROP);
2282:       assertEquals(37, Node.OPT_ARG_NAME);
2283:       assertEquals(32, Node.INCRDECR_PROP);
2284:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2285:       assertEquals(46, Node.IS_NAMESPACE);
2286:       assertEquals(53, Node.INPUT_ID);
2287:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2289:       assertEquals(57, Node.LAST_PROP);
2290:       assertEquals(43, Node.IS_CONSTANT_NAME);
2291:       assertEquals(54, Node.SLASH_V);
2292:       assertEquals(40, Node.ORIGINALNAME_PROP);
2293:       assertEquals(2, Node.POST_FLAG);
2294:       assertEquals(30, Node.VAR_ARGS_NAME);
2295:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2296:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2297:       assertEquals(39, Node.EMPTY_BLOCK);
2298:       assertEquals(48, Node.DIRECTIVES);
2299:       assertEquals(55, Node.INFERRED_FUNCTION);
2300:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2301:       assertEquals(57, Node.REFLECTED_OBJECT);
2302:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2303:       assertEquals(52, Node.LENGTH);
2304:       assertEquals(8, Node.FLAG_NO_THROWS);
2305:       assertEquals(50, Node.FREE_CALL);
2306:       assertEquals(36, Node.QUOTED_PROP);
2307:       assertEquals(1, Node.DECR_FLAG);
2308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2309:       assertEquals(49, Node.DIRECT_EVAL);
2310:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2311:       assertEquals(4095, Node.COLUMN_MASK);
2312:       assertEquals(12, Node.COLUMN_BITS);
2313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2314:       assertEquals(43, Node.IS_CONSTANT_NAME);
2315:       assertEquals(36, Node.QUOTED_PROP);
2316:       assertEquals(53, Node.INPUT_ID);
2317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2318:       assertEquals(4095, Node.COLUMN_MASK);
2319:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2320:       assertEquals(48, Node.DIRECTIVES);
2321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2322:       assertEquals(37, Node.OPT_ARG_NAME);
2323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2324:       assertEquals(50, Node.FREE_CALL);
2325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2326:       assertEquals(12, Node.COLUMN_BITS);
2327:       assertEquals(1, Node.DECR_FLAG);
2328:       assertEquals(32, Node.INCRDECR_PROP);
2329:       assertEquals(54, Node.SLASH_V);
2330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2332:       assertEquals(30, Node.VAR_ARGS_NAME);
2333:       assertEquals(52, Node.LENGTH);
2334:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2335:       assertEquals(40, Node.ORIGINALNAME_PROP);
2336:       assertEquals(46, Node.IS_NAMESPACE);
2337:       assertEquals(57, Node.REFLECTED_OBJECT);
2338:       assertEquals(49, Node.DIRECT_EVAL);
2339:       assertEquals(2, Node.POST_FLAG);
2340:       assertEquals(56, Node.CHANGE_TIME);
2341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2342:       assertEquals(39, Node.EMPTY_BLOCK);
2343:       assertEquals(47, Node.IS_DISPATCHER);
2344:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2345:       assertEquals(29, Node.JSDOC_INFO_PROP);
2346:       assertEquals(8, Node.FLAG_NO_THROWS);
2347:       assertEquals(55, Node.INFERRED_FUNCTION);
2348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2349:       assertEquals(57, Node.LAST_PROP);
2350:       assertFalse(node0.equals((Object)node3));
2351:       assertFalse(node0.equals((Object)node1));
2352:       assertFalse(node0.equals((Object)node4));
2353:       assertTrue(boolean4 == boolean0);
2354:       assertTrue(boolean4 == boolean2);
2355:       assertFalse(boolean4 == boolean3);
2356:       assertTrue(boolean4 == boolean1);
2357:       assertFalse(node1.equals((Object)node3));
2358:       assertFalse(node1.equals((Object)node2));
2359:       assertFalse(node1.equals((Object)node4));
2360:       assertFalse(node1.equals((Object)node0));
2361:       assertNotSame(node0, node3);
2362:       assertSame(node0, node2);
2363:       assertNotSame(node1, node4);
2364:       assertFalse(boolean4);
2365:       
2366:       boolean boolean5 = node0.isQualifiedName();
2367:       assertEquals(56, Node.CHANGE_TIME);
2368:       assertEquals(47, Node.IS_DISPATCHER);
2369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2370:       assertEquals(29, Node.JSDOC_INFO_PROP);
2371:       assertEquals(37, Node.OPT_ARG_NAME);
2372:       assertEquals(32, Node.INCRDECR_PROP);
2373:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2374:       assertEquals(46, Node.IS_NAMESPACE);
2375:       assertEquals(53, Node.INPUT_ID);
2376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2377:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2378:       assertEquals(57, Node.LAST_PROP);
2379:       assertEquals(43, Node.IS_CONSTANT_NAME);
2380:       assertEquals(54, Node.SLASH_V);
2381:       assertEquals(40, Node.ORIGINALNAME_PROP);
2382:       assertEquals(2, Node.POST_FLAG);
2383:       assertEquals(30, Node.VAR_ARGS_NAME);
2384:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2385:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2386:       assertEquals(39, Node.EMPTY_BLOCK);
2387:       assertEquals(48, Node.DIRECTIVES);
2388:       assertEquals(55, Node.INFERRED_FUNCTION);
2389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2390:       assertEquals(57, Node.REFLECTED_OBJECT);
2391:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2392:       assertEquals(52, Node.LENGTH);
2393:       assertEquals(8, Node.FLAG_NO_THROWS);
2394:       assertEquals(50, Node.FREE_CALL);
2395:       assertEquals(36, Node.QUOTED_PROP);
2396:       assertEquals(1, Node.DECR_FLAG);
2397:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2398:       assertEquals(49, Node.DIRECT_EVAL);
2399:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2400:       assertEquals(4095, Node.COLUMN_MASK);
2401:       assertEquals(12, Node.COLUMN_BITS);
2402:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2403:       assertFalse(node0.equals((Object)node3));
2404:       assertFalse(node0.equals((Object)node1));
2405:       assertFalse(node0.equals((Object)node4));
2406:       assertTrue(boolean5 == boolean2);
2407:       assertTrue(boolean5 == boolean0);
2408:       assertTrue(boolean5 == boolean1);
2409:       assertFalse(boolean5 == boolean3);
2410:       assertTrue(boolean5 == boolean4);
2411:       assertNotSame(node0, node3);
2412:       assertSame(node0, node2);
2413:       assertFalse(boolean5);
2414:       
2415:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
2416:       assertEquals(56, Node.CHANGE_TIME);
2417:       assertEquals(47, Node.IS_DISPATCHER);
2418:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2419:       assertEquals(29, Node.JSDOC_INFO_PROP);
2420:       assertEquals(37, Node.OPT_ARG_NAME);
2421:       assertEquals(32, Node.INCRDECR_PROP);
2422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2423:       assertEquals(46, Node.IS_NAMESPACE);
2424:       assertEquals(53, Node.INPUT_ID);
2425:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2427:       assertEquals(57, Node.LAST_PROP);
2428:       assertEquals(43, Node.IS_CONSTANT_NAME);
2429:       assertEquals(54, Node.SLASH_V);
2430:       assertEquals(40, Node.ORIGINALNAME_PROP);
2431:       assertEquals(2, Node.POST_FLAG);
2432:       assertEquals(30, Node.VAR_ARGS_NAME);
2433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2434:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2435:       assertEquals(39, Node.EMPTY_BLOCK);
2436:       assertEquals(48, Node.DIRECTIVES);
2437:       assertEquals(55, Node.INFERRED_FUNCTION);
2438:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2439:       assertEquals(57, Node.REFLECTED_OBJECT);
2440:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2441:       assertEquals(52, Node.LENGTH);
2442:       assertEquals(8, Node.FLAG_NO_THROWS);
2443:       assertEquals(50, Node.FREE_CALL);
2444:       assertEquals(36, Node.QUOTED_PROP);
2445:       assertEquals(1, Node.DECR_FLAG);
2446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2447:       assertEquals(49, Node.DIRECT_EVAL);
2448:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2449:       assertEquals(4095, Node.COLUMN_MASK);
2450:       assertEquals(12, Node.COLUMN_BITS);
2451:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2452:       assertEquals(43, Node.IS_CONSTANT_NAME);
2453:       assertEquals(36, Node.QUOTED_PROP);
2454:       assertEquals(53, Node.INPUT_ID);
2455:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2456:       assertEquals(4095, Node.COLUMN_MASK);
2457:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2458:       assertEquals(48, Node.DIRECTIVES);
2459:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2460:       assertEquals(37, Node.OPT_ARG_NAME);
2461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2462:       assertEquals(50, Node.FREE_CALL);
2463:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2464:       assertEquals(12, Node.COLUMN_BITS);
2465:       assertEquals(1, Node.DECR_FLAG);
2466:       assertEquals(32, Node.INCRDECR_PROP);
2467:       assertEquals(54, Node.SLASH_V);
2468:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2469:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2470:       assertEquals(30, Node.VAR_ARGS_NAME);
2471:       assertEquals(52, Node.LENGTH);
2472:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2473:       assertEquals(40, Node.ORIGINALNAME_PROP);
2474:       assertEquals(46, Node.IS_NAMESPACE);
2475:       assertEquals(57, Node.REFLECTED_OBJECT);
2476:       assertEquals(49, Node.DIRECT_EVAL);
2477:       assertEquals(2, Node.POST_FLAG);
2478:       assertEquals(56, Node.CHANGE_TIME);
2479:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2480:       assertEquals(39, Node.EMPTY_BLOCK);
2481:       assertEquals(47, Node.IS_DISPATCHER);
2482:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2483:       assertEquals(29, Node.JSDOC_INFO_PROP);
2484:       assertEquals(8, Node.FLAG_NO_THROWS);
2485:       assertEquals(55, Node.INFERRED_FUNCTION);
2486:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2487:       assertEquals(57, Node.LAST_PROP);
2488:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2489:       assertEquals(29, Node.JSDOC_INFO_PROP);
2490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2491:       assertEquals(53, Node.INPUT_ID);
2492:       assertEquals(37, Node.OPT_ARG_NAME);
2493:       assertEquals(43, Node.IS_CONSTANT_NAME);
2494:       assertEquals(56, Node.CHANGE_TIME);
2495:       assertEquals(36, Node.QUOTED_PROP);
2496:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2497:       assertEquals(46, Node.IS_NAMESPACE);
2498:       assertEquals(55, Node.INFERRED_FUNCTION);
2499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2501:       assertEquals(39, Node.EMPTY_BLOCK);
2502:       assertEquals(2, Node.POST_FLAG);
2503:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2504:       assertEquals(57, Node.LAST_PROP);
2505:       assertEquals(30, Node.VAR_ARGS_NAME);
2506:       assertEquals(47, Node.IS_DISPATCHER);
2507:       assertEquals(52, Node.LENGTH);
2508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2509:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2510:       assertEquals(40, Node.ORIGINALNAME_PROP);
2511:       assertEquals(48, Node.DIRECTIVES);
2512:       assertEquals(8, Node.FLAG_NO_THROWS);
2513:       assertEquals(50, Node.FREE_CALL);
2514:       assertEquals(54, Node.SLASH_V);
2515:       assertEquals(57, Node.REFLECTED_OBJECT);
2516:       assertEquals(12, Node.COLUMN_BITS);
2517:       assertEquals(4095, Node.COLUMN_MASK);
2518:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2519:       assertEquals(32, Node.INCRDECR_PROP);
2520:       assertEquals(49, Node.DIRECT_EVAL);
2521:       assertEquals(1, Node.DECR_FLAG);
2522:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2523:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2524:       assertFalse(node0.equals((Object)node3));
2525:       assertFalse(node0.equals((Object)node1));
2526:       assertFalse(node0.equals((Object)node4));
2527:       assertFalse(node1.equals((Object)node3));
2528:       assertFalse(node1.equals((Object)node2));
2529:       assertFalse(node1.equals((Object)node4));
2530:       assertFalse(node1.equals((Object)node0));
2531:       assertFalse(node2.equals((Object)node1));
2532:       assertFalse(node2.equals((Object)node3));
2533:       assertFalse(node2.equals((Object)node4));
2534:       assertNull(node_NodeMismatch0);
2535:       assertNotSame(node0, node3);
2536:       assertSame(node0, node2);
2537:       assertNotSame(node1, node4);
2538:       assertNotSame(node2, node3);
2539:       assertSame(node2, node0);
2540:   }
2541: }
RegularFileObject[/tmp/EvoSuite_359_1628159614296/com/google/javascript/rhino/Node_359_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_359_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_359_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_359_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:34.891 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

boolean boolean0 = node0.isDefaultCase();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(boolean0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

Node node1 = new Node(42, node0, node0, node0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertTrue(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(42, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());

boolean boolean1 = node1.isEquivalentToTyped(node0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertTrue(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(42, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());

Node node2 = node0.srcrefTree(node1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertTrue(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(42, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNot());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isSwitch());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertTrue(node2.isString());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isAnd());
assertFalse(node2.isSetterDef());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());

boolean boolean2 = node1.isCase();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertSame(node0, node2);
assertFalse(boolean2);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertTrue(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(42, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

node_FileLevelJsDocBuilder0.append("Cx @9Ip!Lt:aWd2 -7");
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertSame(node0, node2);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

node_FileLevelJsDocBuilder0.append("None");
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertSame(node0, node2);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

String string0 = node0.getSourceFileName();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertNull(string0);
assertSame(node0, node2);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

int int0 = node1.getLineno();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertSame(node0, node2);
assertEquals((-1), int0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertTrue(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(42, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());

boolean boolean3 = node2.mayMutateArguments();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertSame(node0, node2);
assertSame(node2, node0);
assertTrue(boolean3);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());

Node node3 = Node.newString(100, "None");
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);
assertNotSame(node3, node2);
assertNotSame(node3, node0);

InputId inputId0 = node3.getInputId();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNull(inputId0);
assertNotSame(node3, node2);
assertNotSame(node3, node0);

node1.setInputId((InputId) null);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node3);
assertSame(node0, node2);

Iterable<Node> iterable0 = node2.children();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertNotNull(iterable0);
assertNotSame(node0, node3);
assertSame(node0, node2);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertFalse(iterable0.contains(node0));

Node node4 = new Node((-476), 10, 56);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertNotNull(node4);

boolean boolean4 = node1.isRegExp();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node3);
assertSame(node0, node2);
assertNotSame(node1, node4);
assertFalse(boolean4);

boolean boolean5 = node0.isQualifiedName();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertFalse(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertNotSame(node0, node3);
assertSame(node0, node2);
assertFalse(boolean5);

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertNull(node_NodeMismatch0);
assertNotSame(node0, node3);
assertSame(node0, node2);
assertNotSame(node1, node4);
assertNotSame(node2, node3);
assertSame(node2, node0);


[MASTER] 10:33:38.993 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_387_1628159618670/com/google/javascript/rhino/Node_387_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_387_1628159618670/com/google/javascript/rhino/Node_387_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:38.993 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:38.994 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:38.995 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1946
[MASTER] 10:33:38.996 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_387_1628159618670/com/google/javascript/rhino/Node_387_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_387_tmp__ESTest extends Node_387_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("");
21:       assertEquals(53, Node.INPUT_ID);
22:       assertEquals(43, Node.IS_CONSTANT_NAME);
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(47, Node.IS_DISPATCHER);
25:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
26:       assertEquals(4095, Node.COLUMN_MASK);
27:       assertEquals(2, Node.POST_FLAG);
28:       assertEquals(46, Node.IS_NAMESPACE);
29:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(32, Node.INCRDECR_PROP);
32:       assertEquals(50, Node.FREE_CALL);
33:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
34:       assertEquals(1, Node.DECR_FLAG);
35:       assertEquals(51, Node.STATIC_SOURCE_FILE);
36:       assertEquals(54, Node.SLASH_V);
37:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
38:       assertEquals(57, Node.REFLECTED_OBJECT);
39:       assertEquals(57, Node.LAST_PROP);
40:       assertEquals(49, Node.DIRECT_EVAL);
41:       assertEquals(30, Node.VAR_ARGS_NAME);
42:       assertEquals(40, Node.ORIGINALNAME_PROP);
43:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(39, Node.EMPTY_BLOCK);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(55, Node.INFERRED_FUNCTION);
54:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
55:       assertEquals(52, Node.LENGTH);
56:       assertEquals(8, Node.FLAG_NO_THROWS);
57:       assertNotNull(node0);
58:       assertFalse(node0.isTrue());
59:       assertFalse(node0.isFunction());
60:       assertFalse(node0.isDebugger());
61:       assertFalse(node0.isRegExp());
62:       assertFalse(node0.isVoid());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isDefaultCase());
65:       assertEquals(40, node0.getType());
66:       assertFalse(node0.isArrayLit());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isCatch());
69:       assertFalse(node0.isSetterDef());
70:       assertFalse(node0.isDelProp());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isIn());
75:       assertFalse(node0.isAdd());
76:       assertFalse(node0.isEmpty());
77:       assertEquals((-1), node0.getCharno());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isNew());
80:       assertTrue(node0.isString());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isVar());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertEquals((-1), node0.getLineno());
86:       assertFalse(node0.isParamList());
87:       assertFalse(node0.isThis());
88:       assertFalse(node0.isNumber());
89:       assertFalse(node0.isGetterDef());
90:       assertFalse(node0.isStringKey());
91:       assertFalse(node0.isFor());
92:       assertFalse(node0.hasOneChild());
93:       assertFalse(node0.isCase());
94:       assertFalse(node0.isScript());
95:       assertFalse(node0.isExprResult());
96:       assertFalse(node0.isAnd());
97:       assertFalse(node0.isAssign());
98:       assertFalse(node0.isLabelName());
99:       assertFalse(node0.isWith());
100:       assertFalse(node0.isGetElem());
101:       assertFalse(node0.isInstanceOf());
102:       assertFalse(node0.isCast());
103:       assertFalse(node0.isOr());
104:       assertFalse(node0.isLabel());
105:       assertFalse(node0.isAssignAdd());
106:       assertFalse(node0.isThrow());
107:       assertFalse(node0.isDo());
108:       assertFalse(node0.isInc());
109:       assertFalse(node0.isWhile());
110:       assertFalse(node0.isCall());
111:       assertFalse(node0.isContinue());
112:       assertFalse(node0.isName());
113:       assertFalse(node0.isFalse());
114:       assertFalse(node0.isBreak());
115:       assertFalse(node0.isComma());
116:       assertFalse(node0.isGetProp());
117:       assertFalse(node0.isDec());
118:       assertFalse(node0.isTypeOf());
119:       assertEquals((-1), node0.getSourcePosition());
120:       assertFalse(node0.isReturn());
121:       assertFalse(node0.hasChildren());
122:       assertFalse(node0.isObjectLit());
123:       assertFalse(node0.isNot());
124:       
125:       boolean boolean0 = node0.isDefaultCase();
126:       assertEquals(53, Node.INPUT_ID);
127:       assertEquals(43, Node.IS_CONSTANT_NAME);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(47, Node.IS_DISPATCHER);
130:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
131:       assertEquals(4095, Node.COLUMN_MASK);
132:       assertEquals(2, Node.POST_FLAG);
133:       assertEquals(46, Node.IS_NAMESPACE);
134:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
135:       assertEquals(12, Node.COLUMN_BITS);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(50, Node.FREE_CALL);
138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
139:       assertEquals(1, Node.DECR_FLAG);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(54, Node.SLASH_V);
142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
143:       assertEquals(57, Node.REFLECTED_OBJECT);
144:       assertEquals(57, Node.LAST_PROP);
145:       assertEquals(49, Node.DIRECT_EVAL);
146:       assertEquals(30, Node.VAR_ARGS_NAME);
147:       assertEquals(40, Node.ORIGINALNAME_PROP);
148:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
149:       assertEquals(48, Node.DIRECTIVES);
150:       assertEquals(37, Node.OPT_ARG_NAME);
151:       assertEquals(39, Node.EMPTY_BLOCK);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
154:       assertEquals(29, Node.JSDOC_INFO_PROP);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(36, Node.QUOTED_PROP);
158:       assertEquals(55, Node.INFERRED_FUNCTION);
159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
160:       assertEquals(52, Node.LENGTH);
161:       assertEquals(8, Node.FLAG_NO_THROWS);
162:       assertFalse(boolean0);
163:       assertFalse(node0.isTrue());
164:       assertFalse(node0.isFunction());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isRegExp());
167:       assertFalse(node0.isVoid());
168:       assertFalse(node0.isTry());
169:       assertFalse(node0.isDefaultCase());
170:       assertEquals(40, node0.getType());
171:       assertFalse(node0.isArrayLit());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isCatch());
174:       assertFalse(node0.isSetterDef());
175:       assertFalse(node0.isDelProp());
176:       assertFalse(node0.isIf());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isIn());
180:       assertFalse(node0.isAdd());
181:       assertFalse(node0.isEmpty());
182:       assertEquals((-1), node0.getCharno());
183:       assertFalse(node0.isSwitch());
184:       assertFalse(node0.isNew());
185:       assertTrue(node0.isString());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isHook());
188:       assertFalse(node0.isVar());
189:       assertFalse(node0.hasMoreThanOneChild());
190:       assertEquals((-1), node0.getLineno());
191:       assertFalse(node0.isParamList());
192:       assertFalse(node0.isThis());
193:       assertFalse(node0.isNumber());
194:       assertFalse(node0.isGetterDef());
195:       assertFalse(node0.isStringKey());
196:       assertFalse(node0.isFor());
197:       assertFalse(node0.hasOneChild());
198:       assertFalse(node0.isCase());
199:       assertFalse(node0.isScript());
200:       assertFalse(node0.isExprResult());
201:       assertFalse(node0.isAnd());
202:       assertFalse(node0.isAssign());
203:       assertFalse(node0.isLabelName());
204:       assertFalse(node0.isWith());
205:       assertFalse(node0.isGetElem());
206:       assertFalse(node0.isInstanceOf());
207:       assertFalse(node0.isCast());
208:       assertFalse(node0.isOr());
209:       assertFalse(node0.isLabel());
210:       assertFalse(node0.isAssignAdd());
211:       assertFalse(node0.isThrow());
212:       assertFalse(node0.isDo());
213:       assertFalse(node0.isInc());
214:       assertFalse(node0.isWhile());
215:       assertFalse(node0.isCall());
216:       assertFalse(node0.isContinue());
217:       assertFalse(node0.isName());
218:       assertFalse(node0.isFalse());
219:       assertFalse(node0.isBreak());
220:       assertFalse(node0.isComma());
221:       assertFalse(node0.isGetProp());
222:       assertFalse(node0.isDec());
223:       assertFalse(node0.isTypeOf());
224:       assertEquals((-1), node0.getSourcePosition());
225:       assertFalse(node0.isReturn());
226:       assertFalse(node0.hasChildren());
227:       assertFalse(node0.isObjectLit());
228:       assertFalse(node0.isNot());
229:       
230:       Node node1 = new Node(42, node0, node0, node0);
231:       assertEquals(53, Node.INPUT_ID);
232:       assertEquals(43, Node.IS_CONSTANT_NAME);
233:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
234:       assertEquals(47, Node.IS_DISPATCHER);
235:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
236:       assertEquals(4095, Node.COLUMN_MASK);
237:       assertEquals(2, Node.POST_FLAG);
238:       assertEquals(46, Node.IS_NAMESPACE);
239:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
240:       assertEquals(12, Node.COLUMN_BITS);
241:       assertEquals(32, Node.INCRDECR_PROP);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
244:       assertEquals(1, Node.DECR_FLAG);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(54, Node.SLASH_V);
247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
248:       assertEquals(57, Node.REFLECTED_OBJECT);
249:       assertEquals(57, Node.LAST_PROP);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(30, Node.VAR_ARGS_NAME);
252:       assertEquals(40, Node.ORIGINALNAME_PROP);
253:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
254:       assertEquals(48, Node.DIRECTIVES);
255:       assertEquals(37, Node.OPT_ARG_NAME);
256:       assertEquals(39, Node.EMPTY_BLOCK);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
262:       assertEquals(36, Node.QUOTED_PROP);
263:       assertEquals(55, Node.INFERRED_FUNCTION);
264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
265:       assertEquals(52, Node.LENGTH);
266:       assertEquals(8, Node.FLAG_NO_THROWS);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
269:       assertEquals(56, Node.CHANGE_TIME);
270:       assertEquals(46, Node.IS_NAMESPACE);
271:       assertEquals(47, Node.IS_DISPATCHER);
272:       assertEquals(51, Node.STATIC_SOURCE_FILE);
273:       assertEquals(12, Node.COLUMN_BITS);
274:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
275:       assertEquals(29, Node.JSDOC_INFO_PROP);
276:       assertEquals(32, Node.INCRDECR_PROP);
277:       assertEquals(53, Node.INPUT_ID);
278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
279:       assertEquals(1, Node.DECR_FLAG);
280:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
281:       assertEquals(52, Node.LENGTH);
282:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
283:       assertEquals(36, Node.QUOTED_PROP);
284:       assertEquals(57, Node.REFLECTED_OBJECT);
285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
286:       assertEquals(4095, Node.COLUMN_MASK);
287:       assertEquals(49, Node.DIRECT_EVAL);
288:       assertEquals(48, Node.DIRECTIVES);
289:       assertEquals(37, Node.OPT_ARG_NAME);
290:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
291:       assertEquals(8, Node.FLAG_NO_THROWS);
292:       assertEquals(39, Node.EMPTY_BLOCK);
293:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
294:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
295:       assertEquals(50, Node.FREE_CALL);
296:       assertEquals(55, Node.INFERRED_FUNCTION);
297:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
298:       assertEquals(54, Node.SLASH_V);
299:       assertEquals(57, Node.LAST_PROP);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(30, Node.VAR_ARGS_NAME);
302:       assertEquals(40, Node.ORIGINALNAME_PROP);
303:       assertFalse(node1.equals((Object)node0));
304:       assertNotNull(node1);
305:       assertFalse(node0.isTrue());
306:       assertFalse(node0.isFunction());
307:       assertFalse(node0.isDebugger());
308:       assertFalse(node0.isRegExp());
309:       assertFalse(node0.isVoid());
310:       assertFalse(node0.isTry());
311:       assertFalse(node0.isDefaultCase());
312:       assertEquals(40, node0.getType());
313:       assertFalse(node0.isArrayLit());
314:       assertEquals(0, node0.getChildCount());
315:       assertFalse(node0.isCatch());
316:       assertFalse(node0.isSetterDef());
317:       assertFalse(node0.isDelProp());
318:       assertFalse(node0.isIf());
319:       assertFalse(node0.isNull());
320:       assertFalse(node0.isNE());
321:       assertFalse(node0.isIn());
322:       assertFalse(node0.isAdd());
323:       assertFalse(node0.isEmpty());
324:       assertEquals((-1), node0.getCharno());
325:       assertFalse(node0.isSwitch());
326:       assertFalse(node0.isNew());
327:       assertTrue(node0.isString());
328:       assertFalse(node0.isBlock());
329:       assertFalse(node0.isHook());
330:       assertFalse(node0.isVar());
331:       assertFalse(node0.hasMoreThanOneChild());
332:       assertEquals((-1), node0.getLineno());
333:       assertFalse(node0.isParamList());
334:       assertFalse(node0.isThis());
335:       assertFalse(node0.isNumber());
336:       assertFalse(node0.isGetterDef());
337:       assertFalse(node0.isStringKey());
338:       assertFalse(node0.isFor());
339:       assertFalse(node0.hasOneChild());
340:       assertFalse(node0.isCase());
341:       assertFalse(node0.isScript());
342:       assertFalse(node0.isExprResult());
343:       assertFalse(node0.isAnd());
344:       assertFalse(node0.isAssign());
345:       assertFalse(node0.isLabelName());
346:       assertFalse(node0.isWith());
347:       assertFalse(node0.isGetElem());
348:       assertFalse(node0.isInstanceOf());
349:       assertFalse(node0.isCast());
350:       assertFalse(node0.isOr());
351:       assertFalse(node0.isLabel());
352:       assertFalse(node0.isAssignAdd());
353:       assertFalse(node0.isThrow());
354:       assertFalse(node0.isDo());
355:       assertFalse(node0.isInc());
356:       assertFalse(node0.isWhile());
357:       assertFalse(node0.isCall());
358:       assertFalse(node0.isContinue());
359:       assertFalse(node0.isName());
360:       assertFalse(node0.isFalse());
361:       assertFalse(node0.isBreak());
362:       assertFalse(node0.isComma());
363:       assertFalse(node0.isGetProp());
364:       assertFalse(node0.isDec());
365:       assertFalse(node0.isTypeOf());
366:       assertEquals((-1), node0.getSourcePosition());
367:       assertFalse(node0.isReturn());
368:       assertFalse(node0.hasChildren());
369:       assertFalse(node0.isObjectLit());
370:       assertFalse(node0.isNot());
371:       assertFalse(node1.isDec());
372:       assertEquals((-1), node1.getSourcePosition());
373:       assertFalse(node1.isGetElem());
374:       assertFalse(node1.isAssign());
375:       assertFalse(node1.isOr());
376:       assertFalse(node1.isTypeOf());
377:       assertFalse(node1.isNumber());
378:       assertFalse(node1.isLabel());
379:       assertFalse(node1.isReturn());
380:       assertFalse(node1.isDo());
381:       assertFalse(node1.isAssignAdd());
382:       assertFalse(node1.isScript());
383:       assertFalse(node1.isContinue());
384:       assertFalse(node1.isObjectLit());
385:       assertFalse(node1.isNot());
386:       assertFalse(node1.isCast());
387:       assertFalse(node1.isAnd());
388:       assertFalse(node1.isStringKey());
389:       assertFalse(node1.isLabelName());
390:       assertFalse(node1.isSetterDef());
391:       assertFalse(node1.isFalse());
392:       assertFalse(node1.isBlock());
393:       assertFalse(node1.isHook());
394:       assertFalse(node1.isThrow());
395:       assertFalse(node1.isInc());
396:       assertFalse(node1.isCatch());
397:       assertFalse(node1.isRegExp());
398:       assertFalse(node1.hasMoreThanOneChild());
399:       assertFalse(node1.isWith());
400:       assertEquals((-1), node1.getLineno());
401:       assertFalse(node1.isInstanceOf());
402:       assertTrue(node1.hasChildren());
403:       assertFalse(node1.isDelProp());
404:       assertFalse(node1.isGetterDef());
405:       assertFalse(node1.isIf());
406:       assertFalse(node1.isEmpty());
407:       assertFalse(node1.isFor());
408:       assertFalse(node1.isNE());
409:       assertTrue(node1.hasOneChild());
410:       assertFalse(node1.isIn());
411:       assertEquals(1, node1.getChildCount());
412:       assertFalse(node1.isCase());
413:       assertFalse(node1.isTry());
414:       assertFalse(node1.isDefaultCase());
415:       assertFalse(node1.isString());
416:       assertEquals((-1), node1.getCharno());
417:       assertFalse(node1.isDebugger());
418:       assertFalse(node1.isFunction());
419:       assertFalse(node1.isArrayLit());
420:       assertFalse(node1.isParamList());
421:       assertFalse(node1.isSwitch());
422:       assertFalse(node1.isBreak());
423:       assertFalse(node1.isNull());
424:       assertFalse(node1.isComma());
425:       assertFalse(node1.isVar());
426:       assertFalse(node1.isAdd());
427:       assertFalse(node1.isGetProp());
428:       assertFalse(node1.isNew());
429:       assertEquals(42, node1.getType());
430:       assertFalse(node1.isWhile());
431:       assertFalse(node1.isExprResult());
432:       assertFalse(node1.isTrue());
433:       assertTrue(node1.isThis());
434:       assertFalse(node1.isCall());
435:       assertFalse(node1.isVoid());
436:       assertFalse(node1.isName());
437:       
438:       boolean boolean1 = node1.isEquivalentToTyped(node0);
439:       assertEquals(53, Node.INPUT_ID);
440:       assertEquals(43, Node.IS_CONSTANT_NAME);
441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
442:       assertEquals(47, Node.IS_DISPATCHER);
443:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
444:       assertEquals(4095, Node.COLUMN_MASK);
445:       assertEquals(2, Node.POST_FLAG);
446:       assertEquals(46, Node.IS_NAMESPACE);
447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
448:       assertEquals(12, Node.COLUMN_BITS);
449:       assertEquals(32, Node.INCRDECR_PROP);
450:       assertEquals(50, Node.FREE_CALL);
451:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
452:       assertEquals(1, Node.DECR_FLAG);
453:       assertEquals(51, Node.STATIC_SOURCE_FILE);
454:       assertEquals(54, Node.SLASH_V);
455:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
456:       assertEquals(57, Node.REFLECTED_OBJECT);
457:       assertEquals(57, Node.LAST_PROP);
458:       assertEquals(49, Node.DIRECT_EVAL);
459:       assertEquals(30, Node.VAR_ARGS_NAME);
460:       assertEquals(40, Node.ORIGINALNAME_PROP);
461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
462:       assertEquals(48, Node.DIRECTIVES);
463:       assertEquals(37, Node.OPT_ARG_NAME);
464:       assertEquals(39, Node.EMPTY_BLOCK);
465:       assertEquals(56, Node.CHANGE_TIME);
466:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
467:       assertEquals(29, Node.JSDOC_INFO_PROP);
468:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
470:       assertEquals(36, Node.QUOTED_PROP);
471:       assertEquals(55, Node.INFERRED_FUNCTION);
472:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
473:       assertEquals(52, Node.LENGTH);
474:       assertEquals(8, Node.FLAG_NO_THROWS);
475:       assertEquals(2, Node.POST_FLAG);
476:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
477:       assertEquals(56, Node.CHANGE_TIME);
478:       assertEquals(46, Node.IS_NAMESPACE);
479:       assertEquals(47, Node.IS_DISPATCHER);
480:       assertEquals(51, Node.STATIC_SOURCE_FILE);
481:       assertEquals(12, Node.COLUMN_BITS);
482:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
483:       assertEquals(29, Node.JSDOC_INFO_PROP);
484:       assertEquals(32, Node.INCRDECR_PROP);
485:       assertEquals(53, Node.INPUT_ID);
486:       assertEquals(15, Node.NO_SIDE_EFFECTS);
487:       assertEquals(1, Node.DECR_FLAG);
488:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
489:       assertEquals(52, Node.LENGTH);
490:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
491:       assertEquals(36, Node.QUOTED_PROP);
492:       assertEquals(57, Node.REFLECTED_OBJECT);
493:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
494:       assertEquals(4095, Node.COLUMN_MASK);
495:       assertEquals(49, Node.DIRECT_EVAL);
496:       assertEquals(48, Node.DIRECTIVES);
497:       assertEquals(37, Node.OPT_ARG_NAME);
498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
499:       assertEquals(8, Node.FLAG_NO_THROWS);
500:       assertEquals(39, Node.EMPTY_BLOCK);
501:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
502:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
503:       assertEquals(50, Node.FREE_CALL);
504:       assertEquals(55, Node.INFERRED_FUNCTION);
505:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
506:       assertEquals(54, Node.SLASH_V);
507:       assertEquals(57, Node.LAST_PROP);
508:       assertEquals(43, Node.IS_CONSTANT_NAME);
509:       assertEquals(30, Node.VAR_ARGS_NAME);
510:       assertEquals(40, Node.ORIGINALNAME_PROP);
511:       assertFalse(node0.equals((Object)node1));
512:       assertFalse(node1.equals((Object)node0));
513:       assertTrue(boolean1 == boolean0);
514:       assertFalse(boolean1);
515:       assertFalse(node0.isTrue());
516:       assertFalse(node0.isFunction());
517:       assertFalse(node0.isDebugger());
518:       assertFalse(node0.isRegExp());
519:       assertFalse(node0.isVoid());
520:       assertFalse(node0.isTry());
521:       assertFalse(node0.isDefaultCase());
522:       assertEquals(40, node0.getType());
523:       assertFalse(node0.isArrayLit());
524:       assertEquals(0, node0.getChildCount());
525:       assertFalse(node0.isCatch());
526:       assertFalse(node0.isSetterDef());
527:       assertFalse(node0.isDelProp());
528:       assertFalse(node0.isIf());
529:       assertFalse(node0.isNull());
530:       assertFalse(node0.isNE());
531:       assertFalse(node0.isIn());
532:       assertFalse(node0.isAdd());
533:       assertFalse(node0.isEmpty());
534:       assertEquals((-1), node0.getCharno());
535:       assertFalse(node0.isSwitch());
536:       assertFalse(node0.isNew());
537:       assertTrue(node0.isString());
538:       assertFalse(node0.isBlock());
539:       assertFalse(node0.isHook());
540:       assertFalse(node0.isVar());
541:       assertFalse(node0.hasMoreThanOneChild());
542:       assertEquals((-1), node0.getLineno());
543:       assertFalse(node0.isParamList());
544:       assertFalse(node0.isThis());
545:       assertFalse(node0.isNumber());
546:       assertFalse(node0.isGetterDef());
547:       assertFalse(node0.isStringKey());
548:       assertFalse(node0.isFor());
549:       assertFalse(node0.hasOneChild());
550:       assertFalse(node0.isCase());
551:       assertFalse(node0.isScript());
552:       assertFalse(node0.isExprResult());
553:       assertFalse(node0.isAnd());
554:       assertFalse(node0.isAssign());
555:       assertFalse(node0.isLabelName());
556:       assertFalse(node0.isWith());
557:       assertFalse(node0.isGetElem());
558:       assertFalse(node0.isInstanceOf());
559:       assertFalse(node0.isCast());
560:       assertFalse(node0.isOr());
561:       assertFalse(node0.isLabel());
562:       assertFalse(node0.isAssignAdd());
563:       assertFalse(node0.isThrow());
564:       assertFalse(node0.isDo());
565:       assertFalse(node0.isInc());
566:       assertFalse(node0.isWhile());
567:       assertFalse(node0.isCall());
568:       assertFalse(node0.isContinue());
569:       assertFalse(node0.isName());
570:       assertFalse(node0.isFalse());
571:       assertFalse(node0.isBreak());
572:       assertFalse(node0.isComma());
573:       assertFalse(node0.isGetProp());
574:       assertFalse(node0.isDec());
575:       assertFalse(node0.isTypeOf());
576:       assertEquals((-1), node0.getSourcePosition());
577:       assertFalse(node0.isReturn());
578:       assertFalse(node0.hasChildren());
579:       assertFalse(node0.isObjectLit());
580:       assertFalse(node0.isNot());
581:       assertFalse(node1.isDec());
582:       assertEquals((-1), node1.getSourcePosition());
583:       assertFalse(node1.isGetElem());
584:       assertFalse(node1.isAssign());
585:       assertFalse(node1.isOr());
586:       assertFalse(node1.isTypeOf());
587:       assertFalse(node1.isNumber());
588:       assertFalse(node1.isLabel());
589:       assertFalse(node1.isReturn());
590:       assertFalse(node1.isDo());
591:       assertFalse(node1.isAssignAdd());
592:       assertFalse(node1.isScript());
593:       assertFalse(node1.isContinue());
594:       assertFalse(node1.isObjectLit());
595:       assertFalse(node1.isNot());
596:       assertFalse(node1.isCast());
597:       assertFalse(node1.isAnd());
598:       assertFalse(node1.isStringKey());
599:       assertFalse(node1.isLabelName());
600:       assertFalse(node1.isSetterDef());
601:       assertFalse(node1.isFalse());
602:       assertFalse(node1.isBlock());
603:       assertFalse(node1.isHook());
604:       assertFalse(node1.isThrow());
605:       assertFalse(node1.isInc());
606:       assertFalse(node1.isCatch());
607:       assertFalse(node1.isRegExp());
608:       assertFalse(node1.hasMoreThanOneChild());
609:       assertFalse(node1.isWith());
610:       assertEquals((-1), node1.getLineno());
611:       assertFalse(node1.isInstanceOf());
612:       assertTrue(node1.hasChildren());
613:       assertFalse(node1.isDelProp());
614:       assertFalse(node1.isGetterDef());
615:       assertFalse(node1.isIf());
616:       assertFalse(node1.isEmpty());
617:       assertFalse(node1.isFor());
618:       assertFalse(node1.isNE());
619:       assertTrue(node1.hasOneChild());
620:       assertFalse(node1.isIn());
621:       assertEquals(1, node1.getChildCount());
622:       assertFalse(node1.isCase());
623:       assertFalse(node1.isTry());
624:       assertFalse(node1.isDefaultCase());
625:       assertFalse(node1.isString());
626:       assertEquals((-1), node1.getCharno());
627:       assertFalse(node1.isDebugger());
628:       assertFalse(node1.isFunction());
629:       assertFalse(node1.isArrayLit());
630:       assertFalse(node1.isParamList());
631:       assertFalse(node1.isSwitch());
632:       assertFalse(node1.isBreak());
633:       assertFalse(node1.isNull());
634:       assertFalse(node1.isComma());
635:       assertFalse(node1.isVar());
636:       assertFalse(node1.isAdd());
637:       assertFalse(node1.isGetProp());
638:       assertFalse(node1.isNew());
639:       assertEquals(42, node1.getType());
640:       assertFalse(node1.isWhile());
641:       assertFalse(node1.isExprResult());
642:       assertFalse(node1.isTrue());
643:       assertTrue(node1.isThis());
644:       assertFalse(node1.isCall());
645:       assertFalse(node1.isVoid());
646:       assertFalse(node1.isName());
647:       
648:       Node node2 = node0.srcrefTree(node1);
649:       assertEquals(53, Node.INPUT_ID);
650:       assertEquals(43, Node.IS_CONSTANT_NAME);
651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
652:       assertEquals(47, Node.IS_DISPATCHER);
653:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
654:       assertEquals(4095, Node.COLUMN_MASK);
655:       assertEquals(2, Node.POST_FLAG);
656:       assertEquals(46, Node.IS_NAMESPACE);
657:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
658:       assertEquals(12, Node.COLUMN_BITS);
659:       assertEquals(32, Node.INCRDECR_PROP);
660:       assertEquals(50, Node.FREE_CALL);
661:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
662:       assertEquals(1, Node.DECR_FLAG);
663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
664:       assertEquals(54, Node.SLASH_V);
665:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
666:       assertEquals(57, Node.REFLECTED_OBJECT);
667:       assertEquals(57, Node.LAST_PROP);
668:       assertEquals(49, Node.DIRECT_EVAL);
669:       assertEquals(30, Node.VAR_ARGS_NAME);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
672:       assertEquals(48, Node.DIRECTIVES);
673:       assertEquals(37, Node.OPT_ARG_NAME);
674:       assertEquals(39, Node.EMPTY_BLOCK);
675:       assertEquals(56, Node.CHANGE_TIME);
676:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
679:       assertEquals(15, Node.NO_SIDE_EFFECTS);
680:       assertEquals(36, Node.QUOTED_PROP);
681:       assertEquals(55, Node.INFERRED_FUNCTION);
682:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
683:       assertEquals(52, Node.LENGTH);
684:       assertEquals(8, Node.FLAG_NO_THROWS);
685:       assertEquals(2, Node.POST_FLAG);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(56, Node.CHANGE_TIME);
688:       assertEquals(46, Node.IS_NAMESPACE);
689:       assertEquals(47, Node.IS_DISPATCHER);
690:       assertEquals(51, Node.STATIC_SOURCE_FILE);
691:       assertEquals(12, Node.COLUMN_BITS);
692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
693:       assertEquals(29, Node.JSDOC_INFO_PROP);
694:       assertEquals(32, Node.INCRDECR_PROP);
695:       assertEquals(53, Node.INPUT_ID);
696:       assertEquals(15, Node.NO_SIDE_EFFECTS);
697:       assertEquals(1, Node.DECR_FLAG);
698:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
699:       assertEquals(52, Node.LENGTH);
700:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
701:       assertEquals(36, Node.QUOTED_PROP);
702:       assertEquals(57, Node.REFLECTED_OBJECT);
703:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
704:       assertEquals(4095, Node.COLUMN_MASK);
705:       assertEquals(49, Node.DIRECT_EVAL);
706:       assertEquals(48, Node.DIRECTIVES);
707:       assertEquals(37, Node.OPT_ARG_NAME);
708:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
709:       assertEquals(8, Node.FLAG_NO_THROWS);
710:       assertEquals(39, Node.EMPTY_BLOCK);
711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
712:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
713:       assertEquals(50, Node.FREE_CALL);
714:       assertEquals(55, Node.INFERRED_FUNCTION);
715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
716:       assertEquals(54, Node.SLASH_V);
717:       assertEquals(57, Node.LAST_PROP);
718:       assertEquals(43, Node.IS_CONSTANT_NAME);
719:       assertEquals(30, Node.VAR_ARGS_NAME);
720:       assertEquals(40, Node.ORIGINALNAME_PROP);
721:       assertEquals(55, Node.INFERRED_FUNCTION);
722:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
723:       assertEquals(43, Node.IS_CONSTANT_NAME);
724:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
725:       assertEquals(48, Node.DIRECTIVES);
726:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
728:       assertEquals(4095, Node.COLUMN_MASK);
729:       assertEquals(40, Node.ORIGINALNAME_PROP);
730:       assertEquals(54, Node.SLASH_V);
731:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
732:       assertEquals(50, Node.FREE_CALL);
733:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
734:       assertEquals(12, Node.COLUMN_BITS);
735:       assertEquals(51, Node.STATIC_SOURCE_FILE);
736:       assertEquals(1, Node.DECR_FLAG);
737:       assertEquals(49, Node.DIRECT_EVAL);
738:       assertEquals(32, Node.INCRDECR_PROP);
739:       assertEquals(46, Node.IS_NAMESPACE);
740:       assertEquals(57, Node.LAST_PROP);
741:       assertEquals(2, Node.POST_FLAG);
742:       assertEquals(47, Node.IS_DISPATCHER);
743:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
744:       assertEquals(37, Node.OPT_ARG_NAME);
745:       assertEquals(30, Node.VAR_ARGS_NAME);
746:       assertEquals(57, Node.REFLECTED_OBJECT);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
749:       assertEquals(8, Node.FLAG_NO_THROWS);
750:       assertEquals(39, Node.EMPTY_BLOCK);
751:       assertEquals(15, Node.NO_SIDE_EFFECTS);
752:       assertEquals(36, Node.QUOTED_PROP);
753:       assertEquals(52, Node.LENGTH);
754:       assertEquals(29, Node.JSDOC_INFO_PROP);
755:       assertEquals(53, Node.INPUT_ID);
756:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
757:       assertFalse(node0.equals((Object)node1));
758:       assertFalse(node1.equals((Object)node0));
759:       assertFalse(node2.equals((Object)node1));
760:       assertNotNull(node2);
761:       assertSame(node0, node2);
762:       assertSame(node2, node0);
763:       assertFalse(node0.isTrue());
764:       assertFalse(node0.isFunction());
765:       assertFalse(node0.isDebugger());
766:       assertFalse(node0.isRegExp());
767:       assertFalse(node0.isVoid());
768:       assertFalse(node0.isTry());
769:       assertFalse(node0.isDefaultCase());
770:       assertEquals(40, node0.getType());
771:       assertFalse(node0.isArrayLit());
772:       assertEquals(0, node0.getChildCount());
773:       assertFalse(node0.isCatch());
774:       assertFalse(node0.isSetterDef());
775:       assertFalse(node0.isDelProp());
776:       assertFalse(node0.isIf());
777:       assertFalse(node0.isNull());
778:       assertFalse(node0.isNE());
779:       assertFalse(node0.isIn());
780:       assertFalse(node0.isAdd());
781:       assertFalse(node0.isEmpty());
782:       assertEquals((-1), node0.getCharno());
783:       assertFalse(node0.isSwitch());
784:       assertFalse(node0.isNew());
785:       assertTrue(node0.isString());
786:       assertFalse(node0.isBlock());
787:       assertFalse(node0.isHook());
788:       assertFalse(node0.isVar());
789:       assertFalse(node0.hasMoreThanOneChild());
790:       assertEquals((-1), node0.getLineno());
791:       assertFalse(node0.isParamList());
792:       assertFalse(node0.isThis());
793:       assertFalse(node0.isNumber());
794:       assertFalse(node0.isGetterDef());
795:       assertFalse(node0.isStringKey());
796:       assertFalse(node0.isFor());
797:       assertFalse(node0.hasOneChild());
798:       assertFalse(node0.isCase());
799:       assertFalse(node0.isScript());
800:       assertFalse(node0.isExprResult());
801:       assertFalse(node0.isAnd());
802:       assertFalse(node0.isAssign());
803:       assertFalse(node0.isLabelName());
804:       assertFalse(node0.isWith());
805:       assertFalse(node0.isGetElem());
806:       assertFalse(node0.isInstanceOf());
807:       assertFalse(node0.isCast());
808:       assertFalse(node0.isOr());
809:       assertFalse(node0.isLabel());
810:       assertFalse(node0.isAssignAdd());
811:       assertFalse(node0.isThrow());
812:       assertFalse(node0.isDo());
813:       assertFalse(node0.isInc());
814:       assertFalse(node0.isWhile());
815:       assertFalse(node0.isCall());
816:       assertFalse(node0.isContinue());
817:       assertFalse(node0.isName());
818:       assertFalse(node0.isFalse());
819:       assertFalse(node0.isBreak());
820:       assertFalse(node0.isComma());
821:       assertFalse(node0.isGetProp());
822:       assertFalse(node0.isDec());
823:       assertFalse(node0.isTypeOf());
824:       assertEquals((-1), node0.getSourcePosition());
825:       assertFalse(node0.isReturn());
826:       assertFalse(node0.hasChildren());
827:       assertFalse(node0.isObjectLit());
828:       assertFalse(node0.isNot());
829:       assertFalse(node1.isDec());
830:       assertEquals((-1), node1.getSourcePosition());
831:       assertFalse(node1.isGetElem());
832:       assertFalse(node1.isAssign());
833:       assertFalse(node1.isOr());
834:       assertFalse(node1.isTypeOf());
835:       assertFalse(node1.isNumber());
836:       assertFalse(node1.isLabel());
837:       assertFalse(node1.isReturn());
838:       assertFalse(node1.isDo());
839:       assertFalse(node1.isAssignAdd());
840:       assertFalse(node1.isScript());
841:       assertFalse(node1.isContinue());
842:       assertFalse(node1.isObjectLit());
843:       assertFalse(node1.isNot());
844:       assertFalse(node1.isCast());
845:       assertFalse(node1.isAnd());
846:       assertFalse(node1.isStringKey());
847:       assertFalse(node1.isLabelName());
848:       assertFalse(node1.isSetterDef());
849:       assertFalse(node1.isFalse());
850:       assertFalse(node1.isBlock());
851:       assertFalse(node1.isHook());
852:       assertFalse(node1.isThrow());
853:       assertFalse(node1.isInc());
854:       assertFalse(node1.isCatch());
855:       assertFalse(node1.isRegExp());
856:       assertFalse(node1.hasMoreThanOneChild());
857:       assertFalse(node1.isWith());
858:       assertEquals((-1), node1.getLineno());
859:       assertFalse(node1.isInstanceOf());
860:       assertTrue(node1.hasChildren());
861:       assertFalse(node1.isDelProp());
862:       assertFalse(node1.isGetterDef());
863:       assertFalse(node1.isIf());
864:       assertFalse(node1.isEmpty());
865:       assertFalse(node1.isFor());
866:       assertFalse(node1.isNE());
867:       assertTrue(node1.hasOneChild());
868:       assertFalse(node1.isIn());
869:       assertEquals(1, node1.getChildCount());
870:       assertFalse(node1.isCase());
871:       assertFalse(node1.isTry());
872:       assertFalse(node1.isDefaultCase());
873:       assertFalse(node1.isString());
874:       assertEquals((-1), node1.getCharno());
875:       assertFalse(node1.isDebugger());
876:       assertFalse(node1.isFunction());
877:       assertFalse(node1.isArrayLit());
878:       assertFalse(node1.isParamList());
879:       assertFalse(node1.isSwitch());
880:       assertFalse(node1.isBreak());
881:       assertFalse(node1.isNull());
882:       assertFalse(node1.isComma());
883:       assertFalse(node1.isVar());
884:       assertFalse(node1.isAdd());
885:       assertFalse(node1.isGetProp());
886:       assertFalse(node1.isNew());
887:       assertEquals(42, node1.getType());
888:       assertFalse(node1.isWhile());
889:       assertFalse(node1.isExprResult());
890:       assertFalse(node1.isTrue());
891:       assertTrue(node1.isThis());
892:       assertFalse(node1.isCall());
893:       assertFalse(node1.isVoid());
894:       assertFalse(node1.isName());
895:       assertFalse(node2.isInstanceOf());
896:       assertFalse(node2.isObjectLit());
897:       assertFalse(node2.isComma());
898:       assertFalse(node2.isAnd());
899:       assertFalse(node2.isThis());
900:       assertFalse(node2.isBreak());
901:       assertFalse(node2.isWith());
902:       assertFalse(node2.isFalse());
903:       assertFalse(node2.isExprResult());
904:       assertFalse(node2.isThrow());
905:       assertFalse(node2.isInc());
906:       assertFalse(node2.isIn());
907:       assertEquals((-1), node2.getLineno());
908:       assertFalse(node2.hasMoreThanOneChild());
909:       assertFalse(node2.isAssignAdd());
910:       assertFalse(node2.isLabel());
911:       assertFalse(node2.isNE());
912:       assertFalse(node2.isIf());
913:       assertFalse(node2.isLabelName());
914:       assertFalse(node2.isSwitch());
915:       assertFalse(node2.hasOneChild());
916:       assertFalse(node2.isArrayLit());
917:       assertFalse(node2.isTry());
918:       assertTrue(node2.isString());
919:       assertFalse(node2.isStringKey());
920:       assertEquals((-1), node2.getCharno());
921:       assertFalse(node2.isBlock());
922:       assertFalse(node2.isHook());
923:       assertFalse(node2.isFor());
924:       assertFalse(node2.isGetterDef());
925:       assertFalse(node2.isNumber());
926:       assertFalse(node2.isCase());
927:       assertFalse(node2.isScript());
928:       assertEquals(0, node2.getChildCount());
929:       assertFalse(node2.isParamList());
930:       assertFalse(node2.isNull());
931:       assertEquals(40, node2.getType());
932:       assertFalse(node2.isName());
933:       assertFalse(node2.isFunction());
934:       assertFalse(node2.isRegExp());
935:       assertFalse(node2.isVoid());
936:       assertFalse(node2.isCatch());
937:       assertFalse(node2.isCall());
938:       assertFalse(node2.isVar());
939:       assertFalse(node2.isTrue());
940:       assertFalse(node2.isDefaultCase());
941:       assertFalse(node2.isDo());
942:       assertFalse(node2.isNew());
943:       assertFalse(node2.isEmpty());
944:       assertFalse(node2.isSetterDef());
945:       assertFalse(node2.isAdd());
946:       assertFalse(node2.isOr());
947:       assertFalse(node2.isReturn());
948:       assertFalse(node2.isDec());
949:       assertFalse(node2.hasChildren());
950:       assertFalse(node2.isAssign());
951:       assertFalse(node2.isTypeOf());
952:       assertFalse(node2.isDelProp());
953:       assertFalse(node2.isContinue());
954:       assertFalse(node2.isCast());
955:       assertFalse(node2.isGetElem());
956:       assertFalse(node2.isDebugger());
957:       assertFalse(node2.isWhile());
958:       assertEquals((-1), node2.getSourcePosition());
959:       assertFalse(node2.isNot());
960:       assertFalse(node2.isGetProp());
961:       
962:       boolean boolean2 = node1.isCase();
963:       assertEquals(53, Node.INPUT_ID);
964:       assertEquals(43, Node.IS_CONSTANT_NAME);
965:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
966:       assertEquals(47, Node.IS_DISPATCHER);
967:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
968:       assertEquals(4095, Node.COLUMN_MASK);
969:       assertEquals(2, Node.POST_FLAG);
970:       assertEquals(46, Node.IS_NAMESPACE);
971:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
972:       assertEquals(12, Node.COLUMN_BITS);
973:       assertEquals(32, Node.INCRDECR_PROP);
974:       assertEquals(50, Node.FREE_CALL);
975:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
976:       assertEquals(1, Node.DECR_FLAG);
977:       assertEquals(51, Node.STATIC_SOURCE_FILE);
978:       assertEquals(54, Node.SLASH_V);
979:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
980:       assertEquals(57, Node.REFLECTED_OBJECT);
981:       assertEquals(57, Node.LAST_PROP);
982:       assertEquals(49, Node.DIRECT_EVAL);
983:       assertEquals(30, Node.VAR_ARGS_NAME);
984:       assertEquals(40, Node.ORIGINALNAME_PROP);
985:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
986:       assertEquals(48, Node.DIRECTIVES);
987:       assertEquals(37, Node.OPT_ARG_NAME);
988:       assertEquals(39, Node.EMPTY_BLOCK);
989:       assertEquals(56, Node.CHANGE_TIME);
990:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
991:       assertEquals(29, Node.JSDOC_INFO_PROP);
992:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
993:       assertEquals(15, Node.NO_SIDE_EFFECTS);
994:       assertEquals(36, Node.QUOTED_PROP);
995:       assertEquals(55, Node.INFERRED_FUNCTION);
996:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
997:       assertEquals(52, Node.LENGTH);
998:       assertEquals(8, Node.FLAG_NO_THROWS);
999:       assertEquals(2, Node.POST_FLAG);
1000:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1001:       assertEquals(56, Node.CHANGE_TIME);
1002:       assertEquals(46, Node.IS_NAMESPACE);
1003:       assertEquals(47, Node.IS_DISPATCHER);
1004:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1005:       assertEquals(12, Node.COLUMN_BITS);
1006:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1007:       assertEquals(29, Node.JSDOC_INFO_PROP);
1008:       assertEquals(32, Node.INCRDECR_PROP);
1009:       assertEquals(53, Node.INPUT_ID);
1010:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1011:       assertEquals(1, Node.DECR_FLAG);
1012:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1013:       assertEquals(52, Node.LENGTH);
1014:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1015:       assertEquals(36, Node.QUOTED_PROP);
1016:       assertEquals(57, Node.REFLECTED_OBJECT);
1017:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1018:       assertEquals(4095, Node.COLUMN_MASK);
1019:       assertEquals(49, Node.DIRECT_EVAL);
1020:       assertEquals(48, Node.DIRECTIVES);
1021:       assertEquals(37, Node.OPT_ARG_NAME);
1022:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1023:       assertEquals(8, Node.FLAG_NO_THROWS);
1024:       assertEquals(39, Node.EMPTY_BLOCK);
1025:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1026:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1027:       assertEquals(50, Node.FREE_CALL);
1028:       assertEquals(55, Node.INFERRED_FUNCTION);
1029:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1030:       assertEquals(54, Node.SLASH_V);
1031:       assertEquals(57, Node.LAST_PROP);
1032:       assertEquals(43, Node.IS_CONSTANT_NAME);
1033:       assertEquals(30, Node.VAR_ARGS_NAME);
1034:       assertEquals(40, Node.ORIGINALNAME_PROP);
1035:       assertFalse(node0.equals((Object)node1));
1036:       assertFalse(node1.equals((Object)node0));
1037:       assertFalse(node1.equals((Object)node2));
1038:       assertTrue(boolean2 == boolean1);
1039:       assertTrue(boolean2 == boolean0);
1040:       assertSame(node0, node2);
1041:       assertFalse(boolean2);
1042:       assertFalse(node0.isTrue());
1043:       assertFalse(node0.isFunction());
1044:       assertFalse(node0.isDebugger());
1045:       assertFalse(node0.isRegExp());
1046:       assertFalse(node0.isVoid());
1047:       assertFalse(node0.isTry());
1048:       assertFalse(node0.isDefaultCase());
1049:       assertEquals(40, node0.getType());
1050:       assertFalse(node0.isArrayLit());
1051:       assertEquals(0, node0.getChildCount());
1052:       assertFalse(node0.isCatch());
1053:       assertFalse(node0.isSetterDef());
1054:       assertFalse(node0.isDelProp());
1055:       assertFalse(node0.isIf());
1056:       assertFalse(node0.isNull());
1057:       assertFalse(node0.isNE());
1058:       assertFalse(node0.isIn());
1059:       assertFalse(node0.isAdd());
1060:       assertFalse(node0.isEmpty());
1061:       assertEquals((-1), node0.getCharno());
1062:       assertFalse(node0.isSwitch());
1063:       assertFalse(node0.isNew());
1064:       assertTrue(node0.isString());
1065:       assertFalse(node0.isBlock());
1066:       assertFalse(node0.isHook());
1067:       assertFalse(node0.isVar());
1068:       assertFalse(node0.hasMoreThanOneChild());
1069:       assertEquals((-1), node0.getLineno());
1070:       assertFalse(node0.isParamList());
1071:       assertFalse(node0.isThis());
1072:       assertFalse(node0.isNumber());
1073:       assertFalse(node0.isGetterDef());
1074:       assertFalse(node0.isStringKey());
1075:       assertFalse(node0.isFor());
1076:       assertFalse(node0.hasOneChild());
1077:       assertFalse(node0.isCase());
1078:       assertFalse(node0.isScript());
1079:       assertFalse(node0.isExprResult());
1080:       assertFalse(node0.isAnd());
1081:       assertFalse(node0.isAssign());
1082:       assertFalse(node0.isLabelName());
1083:       assertFalse(node0.isWith());
1084:       assertFalse(node0.isGetElem());
1085:       assertFalse(node0.isInstanceOf());
1086:       assertFalse(node0.isCast());
1087:       assertFalse(node0.isOr());
1088:       assertFalse(node0.isLabel());
1089:       assertFalse(node0.isAssignAdd());
1090:       assertFalse(node0.isThrow());
1091:       assertFalse(node0.isDo());
1092:       assertFalse(node0.isInc());
1093:       assertFalse(node0.isWhile());
1094:       assertFalse(node0.isCall());
1095:       assertFalse(node0.isContinue());
1096:       assertFalse(node0.isName());
1097:       assertFalse(node0.isFalse());
1098:       assertFalse(node0.isBreak());
1099:       assertFalse(node0.isComma());
1100:       assertFalse(node0.isGetProp());
1101:       assertFalse(node0.isDec());
1102:       assertFalse(node0.isTypeOf());
1103:       assertEquals((-1), node0.getSourcePosition());
1104:       assertFalse(node0.isReturn());
1105:       assertFalse(node0.hasChildren());
1106:       assertFalse(node0.isObjectLit());
1107:       assertFalse(node0.isNot());
1108:       assertFalse(node1.isDec());
1109:       assertEquals((-1), node1.getSourcePosition());
1110:       assertFalse(node1.isGetElem());
1111:       assertFalse(node1.isAssign());
1112:       assertFalse(node1.isOr());
1113:       assertFalse(node1.isTypeOf());
1114:       assertFalse(node1.isNumber());
1115:       assertFalse(node1.isLabel());
1116:       assertFalse(node1.isReturn());
1117:       assertFalse(node1.isDo());
1118:       assertFalse(node1.isAssignAdd());
1119:       assertFalse(node1.isScript());
1120:       assertFalse(node1.isContinue());
1121:       assertFalse(node1.isObjectLit());
1122:       assertFalse(node1.isNot());
1123:       assertFalse(node1.isCast());
1124:       assertFalse(node1.isAnd());
1125:       assertFalse(node1.isStringKey());
1126:       assertFalse(node1.isLabelName());
1127:       assertFalse(node1.isSetterDef());
1128:       assertFalse(node1.isFalse());
1129:       assertFalse(node1.isBlock());
1130:       assertFalse(node1.isHook());
1131:       assertFalse(node1.isThrow());
1132:       assertFalse(node1.isInc());
1133:       assertFalse(node1.isCatch());
1134:       assertFalse(node1.isRegExp());
1135:       assertFalse(node1.hasMoreThanOneChild());
1136:       assertFalse(node1.isWith());
1137:       assertEquals((-1), node1.getLineno());
1138:       assertFalse(node1.isInstanceOf());
1139:       assertTrue(node1.hasChildren());
1140:       assertFalse(node1.isDelProp());
1141:       assertFalse(node1.isGetterDef());
1142:       assertFalse(node1.isIf());
1143:       assertFalse(node1.isEmpty());
1144:       assertFalse(node1.isFor());
1145:       assertFalse(node1.isNE());
1146:       assertTrue(node1.hasOneChild());
1147:       assertFalse(node1.isIn());
1148:       assertEquals(1, node1.getChildCount());
1149:       assertFalse(node1.isCase());
1150:       assertFalse(node1.isTry());
1151:       assertFalse(node1.isDefaultCase());
1152:       assertFalse(node1.isString());
1153:       assertEquals((-1), node1.getCharno());
1154:       assertFalse(node1.isDebugger());
1155:       assertFalse(node1.isFunction());
1156:       assertFalse(node1.isArrayLit());
1157:       assertFalse(node1.isParamList());
1158:       assertFalse(node1.isSwitch());
1159:       assertFalse(node1.isBreak());
1160:       assertFalse(node1.isNull());
1161:       assertFalse(node1.isComma());
1162:       assertFalse(node1.isVar());
1163:       assertFalse(node1.isAdd());
1164:       assertFalse(node1.isGetProp());
1165:       assertFalse(node1.isNew());
1166:       assertEquals(42, node1.getType());
1167:       assertFalse(node1.isWhile());
1168:       assertFalse(node1.isExprResult());
1169:       assertFalse(node1.isTrue());
1170:       assertTrue(node1.isThis());
1171:       assertFalse(node1.isCall());
1172:       assertFalse(node1.isVoid());
1173:       assertFalse(node1.isName());
1174:       
1175:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
1176:       assertEquals(53, Node.INPUT_ID);
1177:       assertEquals(43, Node.IS_CONSTANT_NAME);
1178:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1179:       assertEquals(47, Node.IS_DISPATCHER);
1180:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1181:       assertEquals(4095, Node.COLUMN_MASK);
1182:       assertEquals(2, Node.POST_FLAG);
1183:       assertEquals(46, Node.IS_NAMESPACE);
1184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1185:       assertEquals(12, Node.COLUMN_BITS);
1186:       assertEquals(32, Node.INCRDECR_PROP);
1187:       assertEquals(50, Node.FREE_CALL);
1188:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1189:       assertEquals(1, Node.DECR_FLAG);
1190:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1191:       assertEquals(54, Node.SLASH_V);
1192:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1193:       assertEquals(57, Node.REFLECTED_OBJECT);
1194:       assertEquals(57, Node.LAST_PROP);
1195:       assertEquals(49, Node.DIRECT_EVAL);
1196:       assertEquals(30, Node.VAR_ARGS_NAME);
1197:       assertEquals(40, Node.ORIGINALNAME_PROP);
1198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1199:       assertEquals(48, Node.DIRECTIVES);
1200:       assertEquals(37, Node.OPT_ARG_NAME);
1201:       assertEquals(39, Node.EMPTY_BLOCK);
1202:       assertEquals(56, Node.CHANGE_TIME);
1203:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1204:       assertEquals(29, Node.JSDOC_INFO_PROP);
1205:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1206:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1207:       assertEquals(36, Node.QUOTED_PROP);
1208:       assertEquals(55, Node.INFERRED_FUNCTION);
1209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1210:       assertEquals(52, Node.LENGTH);
1211:       assertEquals(8, Node.FLAG_NO_THROWS);
1212:       assertFalse(node0.equals((Object)node1));
1213:       assertNotNull(node_FileLevelJsDocBuilder0);
1214:       assertFalse(node0.isTrue());
1215:       assertFalse(node0.isFunction());
1216:       assertFalse(node0.isDebugger());
1217:       assertFalse(node0.isRegExp());
1218:       assertFalse(node0.isVoid());
1219:       assertFalse(node0.isTry());
1220:       assertFalse(node0.isDefaultCase());
1221:       assertEquals(40, node0.getType());
1222:       assertFalse(node0.isArrayLit());
1223:       assertEquals(0, node0.getChildCount());
1224:       assertFalse(node0.isCatch());
1225:       assertFalse(node0.isSetterDef());
1226:       assertFalse(node0.isDelProp());
1227:       assertFalse(node0.isIf());
1228:       assertFalse(node0.isNull());
1229:       assertFalse(node0.isNE());
1230:       assertFalse(node0.isIn());
1231:       assertFalse(node0.isAdd());
1232:       assertFalse(node0.isEmpty());
1233:       assertEquals((-1), node0.getCharno());
1234:       assertFalse(node0.isSwitch());
1235:       assertFalse(node0.isNew());
1236:       assertTrue(node0.isString());
1237:       assertFalse(node0.isBlock());
1238:       assertFalse(node0.isHook());
1239:       assertFalse(node0.isVar());
1240:       assertFalse(node0.hasMoreThanOneChild());
1241:       assertEquals((-1), node0.getLineno());
1242:       assertFalse(node0.isParamList());
1243:       assertFalse(node0.isThis());
1244:       assertFalse(node0.isNumber());
1245:       assertFalse(node0.isGetterDef());
1246:       assertFalse(node0.isStringKey());
1247:       assertFalse(node0.isFor());
1248:       assertFalse(node0.hasOneChild());
1249:       assertFalse(node0.isCase());
1250:       assertFalse(node0.isScript());
1251:       assertFalse(node0.isExprResult());
1252:       assertFalse(node0.isAnd());
1253:       assertFalse(node0.isAssign());
1254:       assertFalse(node0.isLabelName());
1255:       assertFalse(node0.isWith());
1256:       assertFalse(node0.isGetElem());
1257:       assertFalse(node0.isInstanceOf());
1258:       assertFalse(node0.isCast());
1259:       assertFalse(node0.isOr());
1260:       assertFalse(node0.isLabel());
1261:       assertFalse(node0.isAssignAdd());
1262:       assertFalse(node0.isThrow());
1263:       assertFalse(node0.isDo());
1264:       assertFalse(node0.isInc());
1265:       assertFalse(node0.isWhile());
1266:       assertFalse(node0.isCall());
1267:       assertFalse(node0.isContinue());
1268:       assertFalse(node0.isName());
1269:       assertFalse(node0.isFalse());
1270:       assertFalse(node0.isBreak());
1271:       assertFalse(node0.isComma());
1272:       assertFalse(node0.isGetProp());
1273:       assertFalse(node0.isDec());
1274:       assertFalse(node0.isTypeOf());
1275:       assertEquals((-1), node0.getSourcePosition());
1276:       assertFalse(node0.isReturn());
1277:       assertFalse(node0.hasChildren());
1278:       assertFalse(node0.isObjectLit());
1279:       assertFalse(node0.isNot());
1280:       
1281:       node_FileLevelJsDocBuilder0.append("None");
1282:       assertEquals(53, Node.INPUT_ID);
1283:       assertEquals(43, Node.IS_CONSTANT_NAME);
1284:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1285:       assertEquals(47, Node.IS_DISPATCHER);
1286:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1287:       assertEquals(4095, Node.COLUMN_MASK);
1288:       assertEquals(2, Node.POST_FLAG);
1289:       assertEquals(46, Node.IS_NAMESPACE);
1290:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1291:       assertEquals(12, Node.COLUMN_BITS);
1292:       assertEquals(32, Node.INCRDECR_PROP);
1293:       assertEquals(50, Node.FREE_CALL);
1294:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1295:       assertEquals(1, Node.DECR_FLAG);
1296:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1297:       assertEquals(54, Node.SLASH_V);
1298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1299:       assertEquals(57, Node.REFLECTED_OBJECT);
1300:       assertEquals(57, Node.LAST_PROP);
1301:       assertEquals(49, Node.DIRECT_EVAL);
1302:       assertEquals(30, Node.VAR_ARGS_NAME);
1303:       assertEquals(40, Node.ORIGINALNAME_PROP);
1304:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1305:       assertEquals(48, Node.DIRECTIVES);
1306:       assertEquals(37, Node.OPT_ARG_NAME);
1307:       assertEquals(39, Node.EMPTY_BLOCK);
1308:       assertEquals(56, Node.CHANGE_TIME);
1309:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1310:       assertEquals(29, Node.JSDOC_INFO_PROP);
1311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1312:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1313:       assertEquals(36, Node.QUOTED_PROP);
1314:       assertEquals(55, Node.INFERRED_FUNCTION);
1315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1316:       assertEquals(52, Node.LENGTH);
1317:       assertEquals(8, Node.FLAG_NO_THROWS);
1318:       assertFalse(node0.equals((Object)node1));
1319:       assertSame(node0, node2);
1320:       assertFalse(node0.isTrue());
1321:       assertFalse(node0.isFunction());
1322:       assertFalse(node0.isDebugger());
1323:       assertFalse(node0.isRegExp());
1324:       assertFalse(node0.isVoid());
1325:       assertFalse(node0.isTry());
1326:       assertFalse(node0.isDefaultCase());
1327:       assertEquals(40, node0.getType());
1328:       assertFalse(node0.isArrayLit());
1329:       assertEquals(0, node0.getChildCount());
1330:       assertFalse(node0.isCatch());
1331:       assertFalse(node0.isSetterDef());
1332:       assertFalse(node0.isDelProp());
1333:       assertFalse(node0.isIf());
1334:       assertFalse(node0.isNull());
1335:       assertFalse(node0.isNE());
1336:       assertFalse(node0.isIn());
1337:       assertFalse(node0.isAdd());
1338:       assertFalse(node0.isEmpty());
1339:       assertEquals((-1), node0.getCharno());
1340:       assertFalse(node0.isSwitch());
1341:       assertFalse(node0.isNew());
1342:       assertTrue(node0.isString());
1343:       assertFalse(node0.isBlock());
1344:       assertFalse(node0.isHook());
1345:       assertFalse(node0.isVar());
1346:       assertFalse(node0.hasMoreThanOneChild());
1347:       assertEquals((-1), node0.getLineno());
1348:       assertFalse(node0.isParamList());
1349:       assertFalse(node0.isThis());
1350:       assertFalse(node0.isNumber());
1351:       assertFalse(node0.isGetterDef());
1352:       assertFalse(node0.isStringKey());
1353:       assertFalse(node0.isFor());
1354:       assertFalse(node0.hasOneChild());
1355:       assertFalse(node0.isCase());
1356:       assertFalse(node0.isScript());
1357:       assertFalse(node0.isExprResult());
1358:       assertFalse(node0.isAnd());
1359:       assertFalse(node0.isAssign());
1360:       assertFalse(node0.isLabelName());
1361:       assertFalse(node0.isWith());
1362:       assertFalse(node0.isGetElem());
1363:       assertFalse(node0.isInstanceOf());
1364:       assertFalse(node0.isCast());
1365:       assertFalse(node0.isOr());
1366:       assertFalse(node0.isLabel());
1367:       assertFalse(node0.isAssignAdd());
1368:       assertFalse(node0.isThrow());
1369:       assertFalse(node0.isDo());
1370:       assertFalse(node0.isInc());
1371:       assertFalse(node0.isWhile());
1372:       assertFalse(node0.isCall());
1373:       assertFalse(node0.isContinue());
1374:       assertFalse(node0.isName());
1375:       assertFalse(node0.isFalse());
1376:       assertFalse(node0.isBreak());
1377:       assertFalse(node0.isComma());
1378:       assertFalse(node0.isGetProp());
1379:       assertFalse(node0.isDec());
1380:       assertFalse(node0.isTypeOf());
1381:       assertEquals((-1), node0.getSourcePosition());
1382:       assertFalse(node0.isReturn());
1383:       assertFalse(node0.hasChildren());
1384:       assertFalse(node0.isObjectLit());
1385:       assertFalse(node0.isNot());
1386:       
1387:       String string0 = node0.getSourceFileName();
1388:       assertEquals(53, Node.INPUT_ID);
1389:       assertEquals(43, Node.IS_CONSTANT_NAME);
1390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1391:       assertEquals(47, Node.IS_DISPATCHER);
1392:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1393:       assertEquals(4095, Node.COLUMN_MASK);
1394:       assertEquals(2, Node.POST_FLAG);
1395:       assertEquals(46, Node.IS_NAMESPACE);
1396:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1397:       assertEquals(12, Node.COLUMN_BITS);
1398:       assertEquals(32, Node.INCRDECR_PROP);
1399:       assertEquals(50, Node.FREE_CALL);
1400:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1401:       assertEquals(1, Node.DECR_FLAG);
1402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1403:       assertEquals(54, Node.SLASH_V);
1404:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1405:       assertEquals(57, Node.REFLECTED_OBJECT);
1406:       assertEquals(57, Node.LAST_PROP);
1407:       assertEquals(49, Node.DIRECT_EVAL);
1408:       assertEquals(30, Node.VAR_ARGS_NAME);
1409:       assertEquals(40, Node.ORIGINALNAME_PROP);
1410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1411:       assertEquals(48, Node.DIRECTIVES);
1412:       assertEquals(37, Node.OPT_ARG_NAME);
1413:       assertEquals(39, Node.EMPTY_BLOCK);
1414:       assertEquals(56, Node.CHANGE_TIME);
1415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1416:       assertEquals(29, Node.JSDOC_INFO_PROP);
1417:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1419:       assertEquals(36, Node.QUOTED_PROP);
1420:       assertEquals(55, Node.INFERRED_FUNCTION);
1421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1422:       assertEquals(52, Node.LENGTH);
1423:       assertEquals(8, Node.FLAG_NO_THROWS);
1424:       assertFalse(node0.equals((Object)node1));
1425:       assertNull(string0);
1426:       assertSame(node0, node2);
1427:       assertFalse(node0.isTrue());
1428:       assertFalse(node0.isFunction());
1429:       assertFalse(node0.isDebugger());
1430:       assertFalse(node0.isRegExp());
1431:       assertFalse(node0.isVoid());
1432:       assertFalse(node0.isTry());
1433:       assertFalse(node0.isDefaultCase());
1434:       assertEquals(40, node0.getType());
1435:       assertFalse(node0.isArrayLit());
1436:       assertEquals(0, node0.getChildCount());
1437:       assertFalse(node0.isCatch());
1438:       assertFalse(node0.isSetterDef());
1439:       assertFalse(node0.isDelProp());
1440:       assertFalse(node0.isIf());
1441:       assertFalse(node0.isNull());
1442:       assertFalse(node0.isNE());
1443:       assertFalse(node0.isIn());
1444:       assertFalse(node0.isAdd());
1445:       assertFalse(node0.isEmpty());
1446:       assertEquals((-1), node0.getCharno());
1447:       assertFalse(node0.isSwitch());
1448:       assertFalse(node0.isNew());
1449:       assertTrue(node0.isString());
1450:       assertFalse(node0.isBlock());
1451:       assertFalse(node0.isHook());
1452:       assertFalse(node0.isVar());
1453:       assertFalse(node0.hasMoreThanOneChild());
1454:       assertEquals((-1), node0.getLineno());
1455:       assertFalse(node0.isParamList());
1456:       assertFalse(node0.isThis());
1457:       assertFalse(node0.isNumber());
1458:       assertFalse(node0.isGetterDef());
1459:       assertFalse(node0.isStringKey());
1460:       assertFalse(node0.isFor());
1461:       assertFalse(node0.hasOneChild());
1462:       assertFalse(node0.isCase());
1463:       assertFalse(node0.isScript());
1464:       assertFalse(node0.isExprResult());
1465:       assertFalse(node0.isAnd());
1466:       assertFalse(node0.isAssign());
1467:       assertFalse(node0.isLabelName());
1468:       assertFalse(node0.isWith());
1469:       assertFalse(node0.isGetElem());
1470:       assertFalse(node0.isInstanceOf());
1471:       assertFalse(node0.isCast());
1472:       assertFalse(node0.isOr());
1473:       assertFalse(node0.isLabel());
1474:       assertFalse(node0.isAssignAdd());
1475:       assertFalse(node0.isThrow());
1476:       assertFalse(node0.isDo());
1477:       assertFalse(node0.isInc());
1478:       assertFalse(node0.isWhile());
1479:       assertFalse(node0.isCall());
1480:       assertFalse(node0.isContinue());
1481:       assertFalse(node0.isName());
1482:       assertFalse(node0.isFalse());
1483:       assertFalse(node0.isBreak());
1484:       assertFalse(node0.isComma());
1485:       assertFalse(node0.isGetProp());
1486:       assertFalse(node0.isDec());
1487:       assertFalse(node0.isTypeOf());
1488:       assertEquals((-1), node0.getSourcePosition());
1489:       assertFalse(node0.isReturn());
1490:       assertFalse(node0.hasChildren());
1491:       assertFalse(node0.isObjectLit());
1492:       assertFalse(node0.isNot());
1493:       
1494:       int int0 = node1.getLineno();
1495:       assertEquals(53, Node.INPUT_ID);
1496:       assertEquals(43, Node.IS_CONSTANT_NAME);
1497:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1498:       assertEquals(47, Node.IS_DISPATCHER);
1499:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1500:       assertEquals(4095, Node.COLUMN_MASK);
1501:       assertEquals(2, Node.POST_FLAG);
1502:       assertEquals(46, Node.IS_NAMESPACE);
1503:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1504:       assertEquals(12, Node.COLUMN_BITS);
1505:       assertEquals(32, Node.INCRDECR_PROP);
1506:       assertEquals(50, Node.FREE_CALL);
1507:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1508:       assertEquals(1, Node.DECR_FLAG);
1509:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1510:       assertEquals(54, Node.SLASH_V);
1511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1512:       assertEquals(57, Node.REFLECTED_OBJECT);
1513:       assertEquals(57, Node.LAST_PROP);
1514:       assertEquals(49, Node.DIRECT_EVAL);
1515:       assertEquals(30, Node.VAR_ARGS_NAME);
1516:       assertEquals(40, Node.ORIGINALNAME_PROP);
1517:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1518:       assertEquals(48, Node.DIRECTIVES);
1519:       assertEquals(37, Node.OPT_ARG_NAME);
1520:       assertEquals(39, Node.EMPTY_BLOCK);
1521:       assertEquals(56, Node.CHANGE_TIME);
1522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1523:       assertEquals(29, Node.JSDOC_INFO_PROP);
1524:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1525:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1526:       assertEquals(36, Node.QUOTED_PROP);
1527:       assertEquals(55, Node.INFERRED_FUNCTION);
1528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1529:       assertEquals(52, Node.LENGTH);
1530:       assertEquals(8, Node.FLAG_NO_THROWS);
1531:       assertEquals(2, Node.POST_FLAG);
1532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1533:       assertEquals(56, Node.CHANGE_TIME);
1534:       assertEquals(46, Node.IS_NAMESPACE);
1535:       assertEquals(47, Node.IS_DISPATCHER);
1536:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1537:       assertEquals(12, Node.COLUMN_BITS);
1538:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1539:       assertEquals(29, Node.JSDOC_INFO_PROP);
1540:       assertEquals(32, Node.INCRDECR_PROP);
1541:       assertEquals(53, Node.INPUT_ID);
1542:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1543:       assertEquals(1, Node.DECR_FLAG);
1544:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1545:       assertEquals(52, Node.LENGTH);
1546:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1547:       assertEquals(36, Node.QUOTED_PROP);
1548:       assertEquals(57, Node.REFLECTED_OBJECT);
1549:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1550:       assertEquals(4095, Node.COLUMN_MASK);
1551:       assertEquals(49, Node.DIRECT_EVAL);
1552:       assertEquals(48, Node.DIRECTIVES);
1553:       assertEquals(37, Node.OPT_ARG_NAME);
1554:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1555:       assertEquals(8, Node.FLAG_NO_THROWS);
1556:       assertEquals(39, Node.EMPTY_BLOCK);
1557:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1558:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1559:       assertEquals(50, Node.FREE_CALL);
1560:       assertEquals(55, Node.INFERRED_FUNCTION);
1561:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1562:       assertEquals(54, Node.SLASH_V);
1563:       assertEquals(57, Node.LAST_PROP);
1564:       assertEquals(43, Node.IS_CONSTANT_NAME);
1565:       assertEquals(30, Node.VAR_ARGS_NAME);
1566:       assertEquals(40, Node.ORIGINALNAME_PROP);
1567:       assertFalse(node0.equals((Object)node1));
1568:       assertFalse(node1.equals((Object)node0));
1569:       assertFalse(node1.equals((Object)node2));
1570:       assertSame(node0, node2);
1571:       assertEquals((-1), int0);
1572:       assertFalse(node0.isTrue());
1573:       assertFalse(node0.isFunction());
1574:       assertFalse(node0.isDebugger());
1575:       assertFalse(node0.isRegExp());
1576:       assertFalse(node0.isVoid());
1577:       assertFalse(node0.isTry());
1578:       assertFalse(node0.isDefaultCase());
1579:       assertEquals(40, node0.getType());
1580:       assertFalse(node0.isArrayLit());
1581:       assertEquals(0, node0.getChildCount());
1582:       assertFalse(node0.isCatch());
1583:       assertFalse(node0.isSetterDef());
1584:       assertFalse(node0.isDelProp());
1585:       assertFalse(node0.isIf());
1586:       assertFalse(node0.isNull());
1587:       assertFalse(node0.isNE());
1588:       assertFalse(node0.isIn());
1589:       assertFalse(node0.isAdd());
1590:       assertFalse(node0.isEmpty());
1591:       assertEquals((-1), node0.getCharno());
1592:       assertFalse(node0.isSwitch());
1593:       assertFalse(node0.isNew());
1594:       assertTrue(node0.isString());
1595:       assertFalse(node0.isBlock());
1596:       assertFalse(node0.isHook());
1597:       assertFalse(node0.isVar());
1598:       assertFalse(node0.hasMoreThanOneChild());
1599:       assertEquals((-1), node0.getLineno());
1600:       assertFalse(node0.isParamList());
1601:       assertFalse(node0.isThis());
1602:       assertFalse(node0.isNumber());
1603:       assertFalse(node0.isGetterDef());
1604:       assertFalse(node0.isStringKey());
1605:       assertFalse(node0.isFor());
1606:       assertFalse(node0.hasOneChild());
1607:       assertFalse(node0.isCase());
1608:       assertFalse(node0.isScript());
1609:       assertFalse(node0.isExprResult());
1610:       assertFalse(node0.isAnd());
1611:       assertFalse(node0.isAssign());
1612:       assertFalse(node0.isLabelName());
1613:       assertFalse(node0.isWith());
1614:       assertFalse(node0.isGetElem());
1615:       assertFalse(node0.isInstanceOf());
1616:       assertFalse(node0.isCast());
1617:       assertFalse(node0.isOr());
1618:       assertFalse(node0.isLabel());
1619:       assertFalse(node0.isAssignAdd());
1620:       assertFalse(node0.isThrow());
1621:       assertFalse(node0.isDo());
1622:       assertFalse(node0.isInc());
1623:       assertFalse(node0.isWhile());
1624:       assertFalse(node0.isCall());
1625:       assertFalse(node0.isContinue());
1626:       assertFalse(node0.isName());
1627:       assertFalse(node0.isFalse());
1628:       assertFalse(node0.isBreak());
1629:       assertFalse(node0.isComma());
1630:       assertFalse(node0.isGetProp());
1631:       assertFalse(node0.isDec());
1632:       assertFalse(node0.isTypeOf());
1633:       assertEquals((-1), node0.getSourcePosition());
1634:       assertFalse(node0.isReturn());
1635:       assertFalse(node0.hasChildren());
1636:       assertFalse(node0.isObjectLit());
1637:       assertFalse(node0.isNot());
1638:       assertFalse(node1.isDec());
1639:       assertEquals((-1), node1.getSourcePosition());
1640:       assertFalse(node1.isGetElem());
1641:       assertFalse(node1.isAssign());
1642:       assertFalse(node1.isOr());
1643:       assertFalse(node1.isTypeOf());
1644:       assertFalse(node1.isNumber());
1645:       assertFalse(node1.isLabel());
1646:       assertFalse(node1.isReturn());
1647:       assertFalse(node1.isDo());
1648:       assertFalse(node1.isAssignAdd());
1649:       assertFalse(node1.isScript());
1650:       assertFalse(node1.isContinue());
1651:       assertFalse(node1.isObjectLit());
1652:       assertFalse(node1.isNot());
1653:       assertFalse(node1.isCast());
1654:       assertFalse(node1.isAnd());
1655:       assertFalse(node1.isStringKey());
1656:       assertFalse(node1.isLabelName());
1657:       assertFalse(node1.isSetterDef());
1658:       assertFalse(node1.isFalse());
1659:       assertFalse(node1.isBlock());
1660:       assertFalse(node1.isHook());
1661:       assertFalse(node1.isThrow());
1662:       assertFalse(node1.isInc());
1663:       assertFalse(node1.isCatch());
1664:       assertFalse(node1.isRegExp());
1665:       assertFalse(node1.hasMoreThanOneChild());
1666:       assertFalse(node1.isWith());
1667:       assertEquals((-1), node1.getLineno());
1668:       assertFalse(node1.isInstanceOf());
1669:       assertTrue(node1.hasChildren());
1670:       assertFalse(node1.isDelProp());
1671:       assertFalse(node1.isGetterDef());
1672:       assertFalse(node1.isIf());
1673:       assertFalse(node1.isEmpty());
1674:       assertFalse(node1.isFor());
1675:       assertFalse(node1.isNE());
1676:       assertTrue(node1.hasOneChild());
1677:       assertFalse(node1.isIn());
1678:       assertEquals(1, node1.getChildCount());
1679:       assertFalse(node1.isCase());
1680:       assertFalse(node1.isTry());
1681:       assertFalse(node1.isDefaultCase());
1682:       assertFalse(node1.isString());
1683:       assertEquals((-1), node1.getCharno());
1684:       assertFalse(node1.isDebugger());
1685:       assertFalse(node1.isFunction());
1686:       assertFalse(node1.isArrayLit());
1687:       assertFalse(node1.isParamList());
1688:       assertFalse(node1.isSwitch());
1689:       assertFalse(node1.isBreak());
1690:       assertFalse(node1.isNull());
1691:       assertFalse(node1.isComma());
1692:       assertFalse(node1.isVar());
1693:       assertFalse(node1.isAdd());
1694:       assertFalse(node1.isGetProp());
1695:       assertFalse(node1.isNew());
1696:       assertEquals(42, node1.getType());
1697:       assertFalse(node1.isWhile());
1698:       assertFalse(node1.isExprResult());
1699:       assertFalse(node1.isTrue());
1700:       assertTrue(node1.isThis());
1701:       assertFalse(node1.isCall());
1702:       assertFalse(node1.isVoid());
1703:       assertFalse(node1.isName());
1704:       
1705:       boolean boolean3 = node2.mayMutateArguments();
1706:       assertEquals(53, Node.INPUT_ID);
1707:       assertEquals(43, Node.IS_CONSTANT_NAME);
1708:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1709:       assertEquals(47, Node.IS_DISPATCHER);
1710:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1711:       assertEquals(4095, Node.COLUMN_MASK);
1712:       assertEquals(2, Node.POST_FLAG);
1713:       assertEquals(46, Node.IS_NAMESPACE);
1714:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1715:       assertEquals(12, Node.COLUMN_BITS);
1716:       assertEquals(32, Node.INCRDECR_PROP);
1717:       assertEquals(50, Node.FREE_CALL);
1718:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1719:       assertEquals(1, Node.DECR_FLAG);
1720:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1721:       assertEquals(54, Node.SLASH_V);
1722:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1723:       assertEquals(57, Node.REFLECTED_OBJECT);
1724:       assertEquals(57, Node.LAST_PROP);
1725:       assertEquals(49, Node.DIRECT_EVAL);
1726:       assertEquals(30, Node.VAR_ARGS_NAME);
1727:       assertEquals(40, Node.ORIGINALNAME_PROP);
1728:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1729:       assertEquals(48, Node.DIRECTIVES);
1730:       assertEquals(37, Node.OPT_ARG_NAME);
1731:       assertEquals(39, Node.EMPTY_BLOCK);
1732:       assertEquals(56, Node.CHANGE_TIME);
1733:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1734:       assertEquals(29, Node.JSDOC_INFO_PROP);
1735:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1736:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1737:       assertEquals(36, Node.QUOTED_PROP);
1738:       assertEquals(55, Node.INFERRED_FUNCTION);
1739:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1740:       assertEquals(52, Node.LENGTH);
1741:       assertEquals(8, Node.FLAG_NO_THROWS);
1742:       assertEquals(2, Node.POST_FLAG);
1743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1744:       assertEquals(56, Node.CHANGE_TIME);
1745:       assertEquals(46, Node.IS_NAMESPACE);
1746:       assertEquals(47, Node.IS_DISPATCHER);
1747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1748:       assertEquals(12, Node.COLUMN_BITS);
1749:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1750:       assertEquals(29, Node.JSDOC_INFO_PROP);
1751:       assertEquals(32, Node.INCRDECR_PROP);
1752:       assertEquals(53, Node.INPUT_ID);
1753:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1754:       assertEquals(1, Node.DECR_FLAG);
1755:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1756:       assertEquals(52, Node.LENGTH);
1757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1758:       assertEquals(36, Node.QUOTED_PROP);
1759:       assertEquals(57, Node.REFLECTED_OBJECT);
1760:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1761:       assertEquals(4095, Node.COLUMN_MASK);
1762:       assertEquals(49, Node.DIRECT_EVAL);
1763:       assertEquals(48, Node.DIRECTIVES);
1764:       assertEquals(37, Node.OPT_ARG_NAME);
1765:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1766:       assertEquals(8, Node.FLAG_NO_THROWS);
1767:       assertEquals(39, Node.EMPTY_BLOCK);
1768:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1769:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1770:       assertEquals(50, Node.FREE_CALL);
1771:       assertEquals(55, Node.INFERRED_FUNCTION);
1772:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1773:       assertEquals(54, Node.SLASH_V);
1774:       assertEquals(57, Node.LAST_PROP);
1775:       assertEquals(43, Node.IS_CONSTANT_NAME);
1776:       assertEquals(30, Node.VAR_ARGS_NAME);
1777:       assertEquals(40, Node.ORIGINALNAME_PROP);
1778:       assertEquals(55, Node.INFERRED_FUNCTION);
1779:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1780:       assertEquals(43, Node.IS_CONSTANT_NAME);
1781:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1782:       assertEquals(48, Node.DIRECTIVES);
1783:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1784:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1785:       assertEquals(4095, Node.COLUMN_MASK);
1786:       assertEquals(40, Node.ORIGINALNAME_PROP);
1787:       assertEquals(54, Node.SLASH_V);
1788:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1789:       assertEquals(50, Node.FREE_CALL);
1790:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1791:       assertEquals(12, Node.COLUMN_BITS);
1792:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1793:       assertEquals(1, Node.DECR_FLAG);
1794:       assertEquals(49, Node.DIRECT_EVAL);
1795:       assertEquals(32, Node.INCRDECR_PROP);
1796:       assertEquals(46, Node.IS_NAMESPACE);
1797:       assertEquals(57, Node.LAST_PROP);
1798:       assertEquals(2, Node.POST_FLAG);
1799:       assertEquals(47, Node.IS_DISPATCHER);
1800:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1801:       assertEquals(37, Node.OPT_ARG_NAME);
1802:       assertEquals(30, Node.VAR_ARGS_NAME);
1803:       assertEquals(57, Node.REFLECTED_OBJECT);
1804:       assertEquals(56, Node.CHANGE_TIME);
1805:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1806:       assertEquals(8, Node.FLAG_NO_THROWS);
1807:       assertEquals(39, Node.EMPTY_BLOCK);
1808:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1809:       assertEquals(36, Node.QUOTED_PROP);
1810:       assertEquals(52, Node.LENGTH);
1811:       assertEquals(29, Node.JSDOC_INFO_PROP);
1812:       assertEquals(53, Node.INPUT_ID);
1813:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1814:       assertFalse(node0.equals((Object)node1));
1815:       assertFalse(node1.equals((Object)node0));
1816:       assertFalse(node1.equals((Object)node2));
1817:       assertFalse(node2.equals((Object)node1));
1818:       assertFalse(boolean3 == boolean1);
1819:       assertFalse(boolean3 == boolean2);
1820:       assertFalse(boolean3 == boolean0);
1821:       assertSame(node0, node2);
1822:       assertSame(node2, node0);
1823:       assertTrue(boolean3);
1824:       assertFalse(node0.isTrue());
1825:       assertFalse(node0.isFunction());
1826:       assertFalse(node0.isDebugger());
1827:       assertFalse(node0.isRegExp());
1828:       assertFalse(node0.isVoid());
1829:       
1830:       Iterable<Node> iterable0 = node2.children();
1831:       assertEquals(53, Node.INPUT_ID);
1832:       assertEquals(43, Node.IS_CONSTANT_NAME);
1833:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1834:       assertEquals(47, Node.IS_DISPATCHER);
1835:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1836:       assertEquals(4095, Node.COLUMN_MASK);
1837:       assertEquals(2, Node.POST_FLAG);
1838:       assertEquals(46, Node.IS_NAMESPACE);
1839:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1840:       assertEquals(12, Node.COLUMN_BITS);
1841:       assertEquals(32, Node.INCRDECR_PROP);
1842:       assertEquals(50, Node.FREE_CALL);
1843:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1844:       assertEquals(1, Node.DECR_FLAG);
1845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1846:       assertEquals(54, Node.SLASH_V);
1847:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1848:       assertEquals(57, Node.REFLECTED_OBJECT);
1849:       assertEquals(57, Node.LAST_PROP);
1850:       assertEquals(49, Node.DIRECT_EVAL);
1851:       assertEquals(30, Node.VAR_ARGS_NAME);
1852:       assertEquals(40, Node.ORIGINALNAME_PROP);
1853:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1854:       assertEquals(48, Node.DIRECTIVES);
1855:       assertEquals(37, Node.OPT_ARG_NAME);
1856:       assertEquals(39, Node.EMPTY_BLOCK);
1857:       assertEquals(56, Node.CHANGE_TIME);
1858:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1859:       assertEquals(29, Node.JSDOC_INFO_PROP);
1860:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1861:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1862:       assertEquals(36, Node.QUOTED_PROP);
1863:       assertEquals(55, Node.INFERRED_FUNCTION);
1864:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1865:       assertEquals(52, Node.LENGTH);
1866:       assertEquals(8, Node.FLAG_NO_THROWS);
1867:       assertEquals(2, Node.POST_FLAG);
1868:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1869:       assertEquals(56, Node.CHANGE_TIME);
1870:       assertEquals(46, Node.IS_NAMESPACE);
1871:       assertEquals(47, Node.IS_DISPATCHER);
1872:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1873:       assertEquals(12, Node.COLUMN_BITS);
1874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1875:       assertEquals(29, Node.JSDOC_INFO_PROP);
1876:       assertEquals(32, Node.INCRDECR_PROP);
1877:       assertEquals(53, Node.INPUT_ID);
1878:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1879:       assertEquals(1, Node.DECR_FLAG);
1880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1881:       assertEquals(52, Node.LENGTH);
1882:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1883:       assertEquals(36, Node.QUOTED_PROP);
1884:       assertEquals(57, Node.REFLECTED_OBJECT);
1885:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1886:       assertEquals(4095, Node.COLUMN_MASK);
1887:       assertEquals(49, Node.DIRECT_EVAL);
1888:       assertEquals(48, Node.DIRECTIVES);
1889:       assertEquals(37, Node.OPT_ARG_NAME);
1890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1891:       assertEquals(8, Node.FLAG_NO_THROWS);
1892:       assertEquals(39, Node.EMPTY_BLOCK);
1893:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1895:       assertEquals(50, Node.FREE_CALL);
1896:       assertEquals(55, Node.INFERRED_FUNCTION);
1897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1898:       assertEquals(54, Node.SLASH_V);
1899:       assertEquals(57, Node.LAST_PROP);
1900:       assertEquals(43, Node.IS_CONSTANT_NAME);
1901:       assertEquals(30, Node.VAR_ARGS_NAME);
1902:       assertEquals(40, Node.ORIGINALNAME_PROP);
1903:       assertEquals(55, Node.INFERRED_FUNCTION);
1904:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1905:       assertEquals(43, Node.IS_CONSTANT_NAME);
1906:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1907:       assertEquals(48, Node.DIRECTIVES);
1908:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1909:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1910:       assertEquals(4095, Node.COLUMN_MASK);
1911:       assertEquals(40, Node.ORIGINALNAME_PROP);
1912:       assertEquals(54, Node.SLASH_V);
1913:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1914:       assertEquals(50, Node.FREE_CALL);
1915:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1916:       assertEquals(12, Node.COLUMN_BITS);
1917:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1918:       assertEquals(1, Node.DECR_FLAG);
1919:       assertEquals(49, Node.DIRECT_EVAL);
1920:       assertEquals(32, Node.INCRDECR_PROP);
1921:       assertEquals(46, Node.IS_NAMESPACE);
1922:       assertEquals(57, Node.LAST_PROP);
1923:       assertEquals(2, Node.POST_FLAG);
1924:       assertEquals(47, Node.IS_DISPATCHER);
1925:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1926:       assertEquals(37, Node.OPT_ARG_NAME);
1927:       assertEquals(30, Node.VAR_ARGS_NAME);
1928:       assertEquals(57, Node.REFLECTED_OBJECT);
1929:       assertEquals(56, Node.CHANGE_TIME);
1930:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1931:       assertEquals(8, Node.FLAG_NO_THROWS);
1932:       assertEquals(39, Node.EMPTY_BLOCK);
1933:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1934:       assertEquals(36, Node.QUOTED_PROP);
1935:       assertEquals(52, Node.LENGTH);
1936:       assertEquals(29, Node.JSDOC_INFO_PROP);
1937:       assertEquals(53, Node.INPUT_ID);
1938:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1939:       assertFalse(node0.equals((Object)node1));
1940:       assertFalse(node1.equals((Object)node0));
1941:       assertFalse(node1.equals((Object)node2));
1942:       assertFalse(node2.equals((Object)node1));
1943:       assertNotNull(iterable0);
1944:       assertSame(node0, node2);
1945:       assertSame(node2, node0);
1946:       assertFalse(iterable0.contains(node2));
1947:       
1948:       Node node3 = new Node((-476), 10, 56);
1949:       assertEquals(40, Node.ORIGINALNAME_PROP);
1950:       assertEquals(57, Node.REFLECTED_OBJECT);
1951:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1952:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1953:       assertEquals(50, Node.FREE_CALL);
1954:       assertEquals(52, Node.LENGTH);
1955:       assertEquals(8, Node.FLAG_NO_THROWS);
1956:       assertEquals(48, Node.DIRECTIVES);
1957:       assertEquals(54, Node.SLASH_V);
1958:       assertEquals(49, Node.DIRECT_EVAL);
1959:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1960:       assertEquals(55, Node.INFERRED_FUNCTION);
1961:       assertEquals(36, Node.QUOTED_PROP);
1962:       assertEquals(30, Node.VAR_ARGS_NAME);
1963:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1964:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1965:       assertEquals(39, Node.EMPTY_BLOCK);
1966:       assertEquals(47, Node.IS_DISPATCHER);
1967:       assertEquals(53, Node.INPUT_ID);
1968:       assertEquals(57, Node.LAST_PROP);
1969:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1970:       assertEquals(29, Node.JSDOC_INFO_PROP);
1971:       assertEquals(2, Node.POST_FLAG);
1972:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1973:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1974:       assertEquals(37, Node.OPT_ARG_NAME);
1975:       assertEquals(46, Node.IS_NAMESPACE);
1976:       assertEquals(43, Node.IS_CONSTANT_NAME);
1977:       assertEquals(56, Node.CHANGE_TIME);
1978:       assertEquals(1, Node.DECR_FLAG);
1979:       assertEquals(12, Node.COLUMN_BITS);
1980:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1981:       assertEquals(4095, Node.COLUMN_MASK);
1982:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1983:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1984:       assertEquals(32, Node.INCRDECR_PROP);
1985:       assertFalse(node3.equals((Object)node0));
1986:       assertFalse(node3.equals((Object)node2));
1987:       assertFalse(node3.equals((Object)node1));
1988:       assertNotNull(node3);
1989:       
1990:       boolean boolean4 = node1.isRegExp();
1991:       assertEquals(53, Node.INPUT_ID);
1992:       assertEquals(43, Node.IS_CONSTANT_NAME);
1993:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1994:       assertEquals(47, Node.IS_DISPATCHER);
1995:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1996:       assertEquals(4095, Node.COLUMN_MASK);
1997:       assertEquals(2, Node.POST_FLAG);
1998:       assertEquals(46, Node.IS_NAMESPACE);
1999:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2000:       assertEquals(12, Node.COLUMN_BITS);
2001:       assertEquals(32, Node.INCRDECR_PROP);
2002:       assertEquals(50, Node.FREE_CALL);
2003:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2004:       assertEquals(1, Node.DECR_FLAG);
2005:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2006:       assertEquals(54, Node.SLASH_V);
2007:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2008:       assertEquals(57, Node.REFLECTED_OBJECT);
2009:       assertEquals(57, Node.LAST_PROP);
2010:       assertEquals(49, Node.DIRECT_EVAL);
2011:       assertEquals(30, Node.VAR_ARGS_NAME);
2012:       assertEquals(40, Node.ORIGINALNAME_PROP);
2013:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2014:       assertEquals(48, Node.DIRECTIVES);
2015:       assertEquals(37, Node.OPT_ARG_NAME);
2016:       assertEquals(39, Node.EMPTY_BLOCK);
2017:       assertEquals(56, Node.CHANGE_TIME);
2018:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2019:       assertEquals(29, Node.JSDOC_INFO_PROP);
2020:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2022:       assertEquals(36, Node.QUOTED_PROP);
2023:       assertEquals(55, Node.INFERRED_FUNCTION);
2024:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2025:       assertEquals(52, Node.LENGTH);
2026:       assertEquals(8, Node.FLAG_NO_THROWS);
2027:       assertEquals(2, Node.POST_FLAG);
2028:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2029:       assertEquals(56, Node.CHANGE_TIME);
2030:       assertEquals(46, Node.IS_NAMESPACE);
2031:       assertEquals(47, Node.IS_DISPATCHER);
2032:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2033:       assertEquals(12, Node.COLUMN_BITS);
2034:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2035:       assertEquals(29, Node.JSDOC_INFO_PROP);
2036:       assertEquals(32, Node.INCRDECR_PROP);
2037:       assertEquals(53, Node.INPUT_ID);
2038:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2039:       assertEquals(1, Node.DECR_FLAG);
2040:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2041:       assertEquals(52, Node.LENGTH);
2042:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2043:       assertEquals(36, Node.QUOTED_PROP);
2044:       assertEquals(57, Node.REFLECTED_OBJECT);
2045:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2046:       assertEquals(4095, Node.COLUMN_MASK);
2047:       assertEquals(49, Node.DIRECT_EVAL);
2048:       assertEquals(48, Node.DIRECTIVES);
2049:       assertEquals(37, Node.OPT_ARG_NAME);
2050:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2051:       assertEquals(8, Node.FLAG_NO_THROWS);
2052:       assertEquals(39, Node.EMPTY_BLOCK);
2053:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2054:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2055:       assertEquals(50, Node.FREE_CALL);
2056:       assertEquals(55, Node.INFERRED_FUNCTION);
2057:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2058:       assertEquals(54, Node.SLASH_V);
2059:       assertEquals(57, Node.LAST_PROP);
2060:       assertEquals(43, Node.IS_CONSTANT_NAME);
2061:       assertEquals(30, Node.VAR_ARGS_NAME);
2062:       assertEquals(40, Node.ORIGINALNAME_PROP);
2063:       assertFalse(node0.equals((Object)node1));
2064:       assertFalse(node0.equals((Object)node3));
2065:       assertFalse(node1.equals((Object)node0));
2066:       assertFalse(node1.equals((Object)node3));
2067:       assertFalse(node1.equals((Object)node2));
2068:       assertFalse(boolean4 == boolean3);
2069:       assertTrue(boolean4 == boolean0);
2070:       assertTrue(boolean4 == boolean2);
2071:       assertTrue(boolean4 == boolean1);
2072:       assertSame(node0, node2);
2073:       assertNotSame(node1, node3);
2074:       assertFalse(boolean4);
2075:       
2076:       boolean boolean5 = node0.isQualifiedName();
2077:       assertEquals(53, Node.INPUT_ID);
2078:       assertEquals(43, Node.IS_CONSTANT_NAME);
2079:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2080:       assertEquals(47, Node.IS_DISPATCHER);
2081:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2082:       assertEquals(4095, Node.COLUMN_MASK);
2083:       assertEquals(2, Node.POST_FLAG);
2084:       assertEquals(46, Node.IS_NAMESPACE);
2085:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2086:       assertEquals(12, Node.COLUMN_BITS);
2087:       assertEquals(32, Node.INCRDECR_PROP);
2088:       assertEquals(50, Node.FREE_CALL);
2089:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2090:       assertEquals(1, Node.DECR_FLAG);
2091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2092:       assertEquals(54, Node.SLASH_V);
2093:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2094:       assertEquals(57, Node.REFLECTED_OBJECT);
2095:       assertEquals(57, Node.LAST_PROP);
2096:       assertEquals(49, Node.DIRECT_EVAL);
2097:       assertEquals(30, Node.VAR_ARGS_NAME);
2098:       assertEquals(40, Node.ORIGINALNAME_PROP);
2099:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2100:       assertEquals(48, Node.DIRECTIVES);
2101:       assertEquals(37, Node.OPT_ARG_NAME);
2102:       assertEquals(39, Node.EMPTY_BLOCK);
2103:       assertEquals(56, Node.CHANGE_TIME);
2104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2105:       assertEquals(29, Node.JSDOC_INFO_PROP);
2106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2108:       assertEquals(36, Node.QUOTED_PROP);
2109:       assertEquals(55, Node.INFERRED_FUNCTION);
2110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2111:       assertEquals(52, Node.LENGTH);
2112:       assertEquals(8, Node.FLAG_NO_THROWS);
2113:       assertFalse(node0.equals((Object)node1));
2114:       assertFalse(node0.equals((Object)node3));
2115:       assertTrue(boolean5 == boolean0);
2116:       assertTrue(boolean5 == boolean1);
2117:       assertTrue(boolean5 == boolean2);
2118:       assertTrue(boolean5 == boolean4);
2119:       assertFalse(boolean5 == boolean3);
2120:       assertSame(node0, node2);
2121:       assertFalse(boolean5);
2122:       
2123:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
2124:       assertEquals(53, Node.INPUT_ID);
2125:       assertEquals(43, Node.IS_CONSTANT_NAME);
2126:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2127:       assertEquals(47, Node.IS_DISPATCHER);
2128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2129:       assertEquals(4095, Node.COLUMN_MASK);
2130:       assertEquals(2, Node.POST_FLAG);
2131:       assertEquals(46, Node.IS_NAMESPACE);
2132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2133:       assertEquals(12, Node.COLUMN_BITS);
2134:       assertEquals(32, Node.INCRDECR_PROP);
2135:       assertEquals(50, Node.FREE_CALL);
2136:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2137:       assertEquals(1, Node.DECR_FLAG);
2138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2139:       assertEquals(54, Node.SLASH_V);
2140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2141:       assertEquals(57, Node.REFLECTED_OBJECT);
2142:       assertEquals(57, Node.LAST_PROP);
2143:       assertEquals(49, Node.DIRECT_EVAL);
2144:       assertEquals(30, Node.VAR_ARGS_NAME);
2145:       assertEquals(40, Node.ORIGINALNAME_PROP);
2146:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2147:       assertEquals(48, Node.DIRECTIVES);
2148:       assertEquals(37, Node.OPT_ARG_NAME);
2149:       assertEquals(39, Node.EMPTY_BLOCK);
2150:       assertEquals(56, Node.CHANGE_TIME);
2151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2152:       assertEquals(29, Node.JSDOC_INFO_PROP);
2153:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2155:       assertEquals(36, Node.QUOTED_PROP);
2156:       assertEquals(55, Node.INFERRED_FUNCTION);
2157:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2158:       assertEquals(52, Node.LENGTH);
2159:       assertEquals(8, Node.FLAG_NO_THROWS);
2160:       assertEquals(2, Node.POST_FLAG);
2161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2162:       assertEquals(56, Node.CHANGE_TIME);
2163:       assertEquals(46, Node.IS_NAMESPACE);
2164:       assertEquals(47, Node.IS_DISPATCHER);
2165:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2166:       assertEquals(12, Node.COLUMN_BITS);
2167:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2168:       assertEquals(29, Node.JSDOC_INFO_PROP);
2169:       assertEquals(32, Node.INCRDECR_PROP);
2170:       assertEquals(53, Node.INPUT_ID);
2171:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2172:       assertEquals(1, Node.DECR_FLAG);
2173:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2174:       assertEquals(52, Node.LENGTH);
2175:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2176:       assertEquals(36, Node.QUOTED_PROP);
2177:       assertEquals(57, Node.REFLECTED_OBJECT);
2178:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2179:       assertEquals(4095, Node.COLUMN_MASK);
2180:       assertEquals(49, Node.DIRECT_EVAL);
2181:       assertEquals(48, Node.DIRECTIVES);
2182:       assertEquals(37, Node.OPT_ARG_NAME);
2183:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2184:       assertEquals(8, Node.FLAG_NO_THROWS);
2185:       assertEquals(39, Node.EMPTY_BLOCK);
2186:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2187:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2188:       assertEquals(50, Node.FREE_CALL);
2189:       assertEquals(55, Node.INFERRED_FUNCTION);
2190:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2191:       assertEquals(54, Node.SLASH_V);
2192:       assertEquals(57, Node.LAST_PROP);
2193:       assertEquals(43, Node.IS_CONSTANT_NAME);
2194:       assertEquals(30, Node.VAR_ARGS_NAME);
2195:       assertEquals(40, Node.ORIGINALNAME_PROP);
2196:       assertEquals(55, Node.INFERRED_FUNCTION);
2197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2198:       assertEquals(43, Node.IS_CONSTANT_NAME);
2199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2200:       assertEquals(48, Node.DIRECTIVES);
2201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2202:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2203:       assertEquals(4095, Node.COLUMN_MASK);
2204:       assertEquals(40, Node.ORIGINALNAME_PROP);
2205:       assertEquals(54, Node.SLASH_V);
2206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2207:       assertEquals(50, Node.FREE_CALL);
2208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2209:       assertEquals(12, Node.COLUMN_BITS);
2210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2211:       assertEquals(1, Node.DECR_FLAG);
2212:       assertEquals(49, Node.DIRECT_EVAL);
2213:       assertEquals(32, Node.INCRDECR_PROP);
2214:       assertEquals(46, Node.IS_NAMESPACE);
2215:       assertEquals(57, Node.LAST_PROP);
2216:       assertEquals(2, Node.POST_FLAG);
2217:       assertEquals(47, Node.IS_DISPATCHER);
2218:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2219:       assertEquals(37, Node.OPT_ARG_NAME);
2220:       assertEquals(30, Node.VAR_ARGS_NAME);
2221:       assertEquals(57, Node.REFLECTED_OBJECT);
2222:       assertEquals(56, Node.CHANGE_TIME);
2223:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2224:       assertEquals(8, Node.FLAG_NO_THROWS);
2225:       assertEquals(39, Node.EMPTY_BLOCK);
2226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2227:       assertEquals(36, Node.QUOTED_PROP);
2228:       assertEquals(52, Node.LENGTH);
2229:       assertEquals(29, Node.JSDOC_INFO_PROP);
2230:       assertEquals(53, Node.INPUT_ID);
2231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2232:       assertFalse(node0.equals((Object)node1));
2233:       assertFalse(node0.equals((Object)node3));
2234:       assertFalse(node1.equals((Object)node0));
2235:       assertFalse(node1.equals((Object)node3));
2236:       assertFalse(node1.equals((Object)node2));
2237:       assertFalse(node2.equals((Object)node1));
2238:       assertFalse(node2.equals((Object)node3));
2239:       assertNull(node_NodeMismatch0);
2240:       assertSame(node0, node2);
2241:       assertNotSame(node1, node3);
2242:       assertSame(node2, node0);
2243:       
2244:       Node node4 = node1.useSourceInfoFromForTree(node0);
2245:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2246:       assertEquals(29, Node.JSDOC_INFO_PROP);
2247:       assertEquals(47, Node.IS_DISPATCHER);
2248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2249:       assertEquals(2, Node.POST_FLAG);
2250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2251:       assertEquals(37, Node.OPT_ARG_NAME);
2252:       assertEquals(46, Node.IS_NAMESPACE);
2253:       assertEquals(43, Node.IS_CONSTANT_NAME);
2254:       assertEquals(56, Node.CHANGE_TIME);
2255:       assertEquals(55, Node.INFERRED_FUNCTION);
2256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2257:       assertEquals(36, Node.QUOTED_PROP);
2258:       assertEquals(30, Node.VAR_ARGS_NAME);
2259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2260:       assertEquals(39, Node.EMPTY_BLOCK);
2261:       assertEquals(53, Node.INPUT_ID);
2262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2263:       assertEquals(57, Node.LAST_PROP);
2264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2265:       assertEquals(40, Node.ORIGINALNAME_PROP);
2266:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2267:       assertEquals(57, Node.REFLECTED_OBJECT);
2268:       assertEquals(52, Node.LENGTH);
2269:       assertEquals(8, Node.FLAG_NO_THROWS);
2270:       assertEquals(50, Node.FREE_CALL);
2271:       assertEquals(54, Node.SLASH_V);
2272:       assertEquals(48, Node.DIRECTIVES);
2273:       assertEquals(49, Node.DIRECT_EVAL);
2274:       assertEquals(1, Node.DECR_FLAG);
2275:       assertEquals(12, Node.COLUMN_BITS);
2276:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2277:       assertEquals(4095, Node.COLUMN_MASK);
2278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2279:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2280:       assertEquals(32, Node.INCRDECR_PROP);
2281:       assertEquals(53, Node.INPUT_ID);
2282:       assertEquals(43, Node.IS_CONSTANT_NAME);
2283:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2284:       assertEquals(47, Node.IS_DISPATCHER);
2285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2286:       assertEquals(4095, Node.COLUMN_MASK);
2287:       assertEquals(2, Node.POST_FLAG);
2288:       assertEquals(46, Node.IS_NAMESPACE);
2289:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2290:       assertEquals(12, Node.COLUMN_BITS);
2291:       assertEquals(32, Node.INCRDECR_PROP);
2292:       assertEquals(50, Node.FREE_CALL);
2293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2294:       assertEquals(1, Node.DECR_FLAG);
2295:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2296:       assertEquals(54, Node.SLASH_V);
2297:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2298:       assertEquals(57, Node.REFLECTED_OBJECT);
2299:       assertEquals(57, Node.LAST_PROP);
2300:       assertEquals(49, Node.DIRECT_EVAL);
2301:       assertEquals(30, Node.VAR_ARGS_NAME);
2302:       assertEquals(40, Node.ORIGINALNAME_PROP);
2303:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2304:       assertEquals(48, Node.DIRECTIVES);
2305:       assertEquals(37, Node.OPT_ARG_NAME);
2306:       assertEquals(39, Node.EMPTY_BLOCK);
2307:       assertEquals(56, Node.CHANGE_TIME);
2308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2309:       assertEquals(29, Node.JSDOC_INFO_PROP);
2310:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2312:       assertEquals(36, Node.QUOTED_PROP);
2313:       assertEquals(55, Node.INFERRED_FUNCTION);
2314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2315:       assertEquals(52, Node.LENGTH);
2316:       assertEquals(8, Node.FLAG_NO_THROWS);
2317:       assertEquals(2, Node.POST_FLAG);
2318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2319:       assertEquals(56, Node.CHANGE_TIME);
2320:       assertEquals(46, Node.IS_NAMESPACE);
2321:       assertEquals(47, Node.IS_DISPATCHER);
2322:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2323:       assertEquals(12, Node.COLUMN_BITS);
2324:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2325:       assertEquals(29, Node.JSDOC_INFO_PROP);
2326:       assertEquals(32, Node.INCRDECR_PROP);
2327:       assertEquals(53, Node.INPUT_ID);
2328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2329:       assertEquals(1, Node.DECR_FLAG);
2330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2331:       assertEquals(52, Node.LENGTH);
2332:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2333:       assertEquals(36, Node.QUOTED_PROP);
2334:       assertEquals(57, Node.REFLECTED_OBJECT);
2335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2336:       assertEquals(4095, Node.COLUMN_MASK);
2337:       assertEquals(49, Node.DIRECT_EVAL);
2338:       assertEquals(48, Node.DIRECTIVES);
2339:       assertEquals(37, Node.OPT_ARG_NAME);
2340:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2341:       assertEquals(8, Node.FLAG_NO_THROWS);
2342:       assertEquals(39, Node.EMPTY_BLOCK);
2343:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2344:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2345:       assertEquals(50, Node.FREE_CALL);
2346:       assertEquals(55, Node.INFERRED_FUNCTION);
2347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2348:       assertEquals(54, Node.SLASH_V);
2349:       assertEquals(57, Node.LAST_PROP);
2350:       assertEquals(43, Node.IS_CONSTANT_NAME);
2351:       assertEquals(30, Node.VAR_ARGS_NAME);
2352:       assertEquals(40, Node.ORIGINALNAME_PROP);
2353:       assertFalse(node4.equals((Object)node3));
2354:       assertFalse(node4.equals((Object)node2));
2355:       assertFalse(node4.equals((Object)node0));
2356:       assertFalse(node0.equals((Object)node1));
2357:       assertFalse(node0.equals((Object)node3));
2358:       assertFalse(node1.equals((Object)node0));
2359:       assertFalse(node1.equals((Object)node3));
2360:       assertFalse(node1.equals((Object)node2));
2361:       assertNotNull(node4);
2362:       assertNotSame(node4, node3);
2363:       assertSame(node4, node1);
2364:       assertSame(node0, node2);
2365:       assertSame(node1, node4);
2366:       assertNotSame(node1, node3);
2367:       
2368:       Node node5 = node1.useSourceInfoIfMissingFromForTree(node3);
2369:       assertEquals(53, Node.INPUT_ID);
2370:       assertEquals(43, Node.IS_CONSTANT_NAME);
2371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2372:       assertEquals(47, Node.IS_DISPATCHER);
2373:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2374:       assertEquals(4095, Node.COLUMN_MASK);
2375:       assertEquals(2, Node.POST_FLAG);
2376:       assertEquals(46, Node.IS_NAMESPACE);
2377:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2378:       assertEquals(12, Node.COLUMN_BITS);
2379:       assertEquals(32, Node.INCRDECR_PROP);
2380:       assertEquals(50, Node.FREE_CALL);
2381:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2382:       assertEquals(1, Node.DECR_FLAG);
2383:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2384:       assertEquals(54, Node.SLASH_V);
2385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2386:       assertEquals(57, Node.REFLECTED_OBJECT);
2387:       assertEquals(57, Node.LAST_PROP);
2388:       assertEquals(49, Node.DIRECT_EVAL);
2389:       assertEquals(30, Node.VAR_ARGS_NAME);
2390:       assertEquals(40, Node.ORIGINALNAME_PROP);
2391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2392:       assertEquals(48, Node.DIRECTIVES);
2393:       assertEquals(37, Node.OPT_ARG_NAME);
2394:       assertEquals(39, Node.EMPTY_BLOCK);
2395:       assertEquals(56, Node.CHANGE_TIME);
2396:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2397:       assertEquals(29, Node.JSDOC_INFO_PROP);
2398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2399:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2400:       assertEquals(36, Node.QUOTED_PROP);
2401:       assertEquals(55, Node.INFERRED_FUNCTION);
2402:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2403:       assertEquals(52, Node.LENGTH);
2404:       assertEquals(8, Node.FLAG_NO_THROWS);
2405:       assertEquals(57, Node.REFLECTED_OBJECT);
2406:       assertEquals(40, Node.ORIGINALNAME_PROP);
2407:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2408:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2409:       assertEquals(52, Node.LENGTH);
2410:       assertEquals(50, Node.FREE_CALL);
2411:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2412:       assertEquals(54, Node.SLASH_V);
2413:       assertEquals(48, Node.DIRECTIVES);
2414:       assertEquals(49, Node.DIRECT_EVAL);
2415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2416:       assertEquals(4095, Node.COLUMN_MASK);
2417:       assertEquals(12, Node.COLUMN_BITS);
2418:       assertEquals(46, Node.IS_NAMESPACE);
2419:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2420:       assertEquals(1, Node.DECR_FLAG);
2421:       assertEquals(32, Node.INCRDECR_PROP);
2422:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2423:       assertEquals(53, Node.INPUT_ID);
2424:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2425:       assertEquals(56, Node.CHANGE_TIME);
2426:       assertEquals(43, Node.IS_CONSTANT_NAME);
2427:       assertEquals(36, Node.QUOTED_PROP);
2428:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2429:       assertEquals(37, Node.OPT_ARG_NAME);
2430:       assertEquals(55, Node.INFERRED_FUNCTION);
2431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2432:       assertEquals(2, Node.POST_FLAG);
2433:       assertEquals(30, Node.VAR_ARGS_NAME);
2434:       assertEquals(8, Node.FLAG_NO_THROWS);
2435:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2436:       assertEquals(57, Node.LAST_PROP);
2437:       assertEquals(47, Node.IS_DISPATCHER);
2438:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2439:       assertEquals(39, Node.EMPTY_BLOCK);
2440:       assertEquals(29, Node.JSDOC_INFO_PROP);
2441:       assertEquals(2, Node.POST_FLAG);
2442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2443:       assertEquals(56, Node.CHANGE_TIME);
2444:       assertEquals(46, Node.IS_NAMESPACE);
2445:       assertEquals(47, Node.IS_DISPATCHER);
2446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2447:       assertEquals(12, Node.COLUMN_BITS);
2448:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2449:       assertEquals(29, Node.JSDOC_INFO_PROP);
2450:       assertEquals(32, Node.INCRDECR_PROP);
2451:       assertEquals(53, Node.INPUT_ID);
2452:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2453:       assertEquals(1, Node.DECR_FLAG);
2454:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2455:       assertEquals(52, Node.LENGTH);
2456:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2457:       assertEquals(36, Node.QUOTED_PROP);
2458:       assertEquals(57, Node.REFLECTED_OBJECT);
2459:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2460:       assertEquals(4095, Node.COLUMN_MASK);
2461:       assertEquals(49, Node.DIRECT_EVAL);
2462:       assertEquals(48, Node.DIRECTIVES);
2463:       assertEquals(37, Node.OPT_ARG_NAME);
2464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2465:       assertEquals(8, Node.FLAG_NO_THROWS);
2466:       assertEquals(39, Node.EMPTY_BLOCK);
2467:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2469:       assertEquals(50, Node.FREE_CALL);
2470:       assertEquals(55, Node.INFERRED_FUNCTION);
2471:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2472:       assertEquals(54, Node.SLASH_V);
2473:       assertEquals(57, Node.LAST_PROP);
2474:       assertEquals(43, Node.IS_CONSTANT_NAME);
2475:       assertEquals(30, Node.VAR_ARGS_NAME);
2476:       assertEquals(40, Node.ORIGINALNAME_PROP);
2477:       assertEquals(40, Node.ORIGINALNAME_PROP);
2478:       assertEquals(57, Node.REFLECTED_OBJECT);
2479:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2480:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2481:       assertEquals(50, Node.FREE_CALL);
2482:       assertEquals(52, Node.LENGTH);
2483:       assertEquals(8, Node.FLAG_NO_THROWS);
2484:       assertEquals(48, Node.DIRECTIVES);
2485:       assertEquals(54, Node.SLASH_V);
2486:       assertEquals(49, Node.DIRECT_EVAL);
2487:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2488:       assertEquals(55, Node.INFERRED_FUNCTION);
2489:       assertEquals(36, Node.QUOTED_PROP);
2490:       assertEquals(30, Node.VAR_ARGS_NAME);
2491:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2492:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2493:       assertEquals(39, Node.EMPTY_BLOCK);
2494:       assertEquals(47, Node.IS_DISPATCHER);
2495:       assertEquals(53, Node.INPUT_ID);
2496:       assertEquals(57, Node.LAST_PROP);
2497:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2498:       assertEquals(29, Node.JSDOC_INFO_PROP);
2499:       assertEquals(2, Node.POST_FLAG);
2500:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2501:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2502:       assertEquals(37, Node.OPT_ARG_NAME);
2503:       assertEquals(46, Node.IS_NAMESPACE);
2504:       assertEquals(43, Node.IS_CONSTANT_NAME);
2505:       assertEquals(56, Node.CHANGE_TIME);
2506:       assertEquals(1, Node.DECR_FLAG);
2507:       assertEquals(12, Node.COLUMN_BITS);
2508:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2509:       assertEquals(4095, Node.COLUMN_MASK);
2510:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2512:       assertEquals(32, Node.INCRDECR_PROP);
2513:       assertFalse(node0.equals((Object)node1));
2514:       assertFalse(node0.equals((Object)node3));
2515:       assertFalse(node0.equals((Object)node4));
2516:       assertFalse(node5.equals((Object)node0));
2517:       assertFalse(node5.equals((Object)node3));
2518:       assertFalse(node5.equals((Object)node2));
2519:       assertFalse(node1.equals((Object)node0));
2520:       assertFalse(node1.equals((Object)node3));
2521:       assertFalse(node1.equals((Object)node2));
2522:       assertFalse(node3.equals((Object)node0));
2523:       assertFalse(node3.equals((Object)node4));
2524:       assertFalse(node3.equals((Object)node2));
2525:       assertFalse(node3.equals((Object)node1));
2526:       assertNotNull(node5);
2527:       assertSame(node0, node2);
2528:       assertSame(node5, node4);
2529:       assertSame(node5, node1);
2530:       assertNotSame(node5, node3);
2531:       assertSame(node1, node4);
2532:       assertSame(node1, node5);
2533:       assertNotSame(node1, node3);
2534:       assertNotSame(node3, node5);
2535:       assertNotSame(node3, node4);
2536:       assertNotSame(node3, node1);
2537:   }
2538: }
RegularFileObject[/tmp/EvoSuite_387_1628159618670/com/google/javascript/rhino/Node_387_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_387_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_387_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_387_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:39.332 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node0);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());

boolean boolean0 = node0.isDefaultCase();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(boolean0);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());

Node node1 = new Node(42, node0, node0, node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertEquals(42, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertTrue(node1.isThis());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

boolean boolean1 = node1.isEquivalentToTyped(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertEquals(42, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertTrue(node1.isThis());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

Node node2 = node0.srcrefTree(node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertEquals(42, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertTrue(node1.isThis());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isExprResult());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(40, node2.getType());
assertFalse(node2.isName());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isDebugger());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());

boolean boolean2 = node1.isCase();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertSame(node0, node2);
assertFalse(boolean2);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertEquals(42, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertTrue(node1.isThis());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());

node_FileLevelJsDocBuilder0.append("None");
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertSame(node0, node2);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());

String string0 = node0.getSourceFileName();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertNull(string0);
assertSame(node0, node2);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());

int int0 = node1.getLineno();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertSame(node0, node2);
assertEquals((-1), int0);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertEquals(42, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertTrue(node1.isThis());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

boolean boolean3 = node2.mayMutateArguments();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertSame(node0, node2);
assertSame(node2, node0);
assertTrue(boolean3);
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());

Iterable<Node> iterable0 = node2.children();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertNotNull(iterable0);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(iterable0.contains(node2));

Node node3 = new Node((-476), 10, 56);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);

boolean boolean4 = node1.isRegExp();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertSame(node0, node2);
assertNotSame(node1, node3);
assertFalse(boolean4);

boolean boolean5 = node0.isQualifiedName();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertFalse(boolean5 == boolean3);
assertSame(node0, node2);
assertFalse(boolean5);

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertNull(node_NodeMismatch0);
assertSame(node0, node2);
assertNotSame(node1, node3);
assertSame(node2, node0);

Node node4 = node1.useSourceInfoFromForTree(node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertNotNull(node4);
assertNotSame(node4, node3);
assertSame(node4, node1);
assertSame(node0, node2);
assertSame(node1, node4);
assertNotSame(node1, node3);

Node node5 = node1.useSourceInfoIfMissingFromForTree(node3);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertNotNull(node5);
assertSame(node0, node2);
assertSame(node5, node4);
assertSame(node5, node1);
assertNotSame(node5, node3);
assertSame(node1, node4);
assertSame(node1, node5);
assertNotSame(node1, node3);
assertNotSame(node3, node5);
assertNotSame(node3, node4);
assertNotSame(node3, node1);


[MASTER] 10:33:41.816 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_416_1628159621415/com/google/javascript/rhino/Node_416_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_416_1628159621415/com/google/javascript/rhino/Node_416_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:41.816 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:41.816 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:41.817 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1333
[MASTER] 10:33:41.818 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_416_1628159621415/com/google/javascript/rhino/Node_416_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.List;
15: import java.util.Vector;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_416_tmp__ESTest extends Node_416_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString("<N2t", 8199, 0);
26:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
27:       assertEquals(43, Node.IS_CONSTANT_NAME);
28:       assertEquals(36, Node.QUOTED_PROP);
29:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
30:       assertEquals(53, Node.INPUT_ID);
31:       assertEquals(4095, Node.COLUMN_MASK);
32:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
33:       assertEquals(47, Node.IS_DISPATCHER);
34:       assertEquals(2, Node.POST_FLAG);
35:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
36:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
37:       assertEquals(40, Node.ORIGINALNAME_PROP);
38:       assertEquals(51, Node.STATIC_SOURCE_FILE);
39:       assertEquals(50, Node.FREE_CALL);
40:       assertEquals(46, Node.IS_NAMESPACE);
41:       assertEquals(54, Node.SLASH_V);
42:       assertEquals(57, Node.LAST_PROP);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(49, Node.DIRECT_EVAL);
45:       assertEquals(15, Node.NO_SIDE_EFFECTS);
46:       assertEquals(1, Node.DECR_FLAG);
47:       assertEquals(32, Node.INCRDECR_PROP);
48:       assertEquals(30, Node.VAR_ARGS_NAME);
49:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
50:       assertEquals(12, Node.COLUMN_BITS);
51:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
52:       assertEquals(37, Node.OPT_ARG_NAME);
53:       assertEquals(56, Node.CHANGE_TIME);
54:       assertEquals(48, Node.DIRECTIVES);
55:       assertEquals(8, Node.FLAG_NO_THROWS);
56:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
57:       assertEquals(29, Node.JSDOC_INFO_PROP);
58:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
59:       assertEquals(39, Node.EMPTY_BLOCK);
60:       assertEquals(55, Node.INFERRED_FUNCTION);
61:       assertEquals(57, Node.REFLECTED_OBJECT);
62:       assertNotNull(node0);
63:       assertFalse(node0.isDefaultCase());
64:       assertEquals(40, node0.getType());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isTry());
67:       assertFalse(node0.isCatch());
68:       assertFalse(node0.isFunction());
69:       assertFalse(node0.isRegExp());
70:       assertEquals(0, node0.getChildCount());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isIf());
73:       assertFalse(node0.isNull());
74:       assertFalse(node0.isEmpty());
75:       assertFalse(node0.isNE());
76:       assertFalse(node0.isCall());
77:       assertFalse(node0.isSetterDef());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isIn());
80:       assertFalse(node0.isAdd());
81:       assertFalse(node0.isTrue());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isInc());
84:       assertFalse(node0.isReturn());
85:       assertFalse(node0.isContinue());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isTypeOf());
88:       assertFalse(node0.isDec());
89:       assertFalse(node0.hasChildren());
90:       assertFalse(node0.isGetProp());
91:       assertFalse(node0.isDebugger());
92:       assertFalse(node0.isObjectLit());
93:       assertFalse(node0.isNot());
94:       assertFalse(node0.isWith());
95:       assertFalse(node0.isScript());
96:       assertFalse(node0.isExprResult());
97:       assertFalse(node0.isAnd());
98:       assertEquals(8199, node0.getLineno());
99:       assertFalse(node0.isInstanceOf());
100:       assertFalse(node0.isCast());
101:       assertFalse(node0.isThis());
102:       assertFalse(node0.isAssign());
103:       assertFalse(node0.isComma());
104:       assertFalse(node0.isBreak());
105:       assertFalse(node0.isThrow());
106:       assertFalse(node0.isGetElem());
107:       assertEquals(0, node0.getCharno());
108:       assertFalse(node0.isOr());
109:       assertEquals(33583104, node0.getSourcePosition());
110:       assertFalse(node0.isSwitch());
111:       assertFalse(node0.isDo());
112:       assertFalse(node0.isCase());
113:       assertTrue(node0.isString());
114:       assertFalse(node0.isNew());
115:       assertFalse(node0.isHook());
116:       assertFalse(node0.isAssignAdd());
117:       assertFalse(node0.isVar());
118:       assertFalse(node0.hasMoreThanOneChild());
119:       assertFalse(node0.isBlock());
120:       assertFalse(node0.isLabel());
121:       assertFalse(node0.isGetterDef());
122:       assertFalse(node0.isNumber());
123:       assertFalse(node0.isFor());
124:       assertFalse(node0.isStringKey());
125:       assertFalse(node0.isParamList());
126:       assertFalse(node0.isLabelName());
127:       assertFalse(node0.isArrayLit());
128:       assertFalse(node0.hasOneChild());
129:       
130:       Node node1 = Node.newNumber(1.0, 901, 15);
131:       assertEquals(53, Node.INPUT_ID);
132:       assertEquals(43, Node.IS_CONSTANT_NAME);
133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
134:       assertEquals(47, Node.IS_DISPATCHER);
135:       assertEquals(2, Node.POST_FLAG);
136:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
137:       assertEquals(4095, Node.COLUMN_MASK);
138:       assertEquals(32, Node.INCRDECR_PROP);
139:       assertEquals(46, Node.IS_NAMESPACE);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(12, Node.COLUMN_BITS);
142:       assertEquals(50, Node.FREE_CALL);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
145:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
146:       assertEquals(52, Node.LENGTH);
147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
148:       assertEquals(57, Node.REFLECTED_OBJECT);
149:       assertEquals(54, Node.SLASH_V);
150:       assertEquals(57, Node.LAST_PROP);
151:       assertEquals(30, Node.VAR_ARGS_NAME);
152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
153:       assertEquals(49, Node.DIRECT_EVAL);
154:       assertEquals(40, Node.ORIGINALNAME_PROP);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(37, Node.OPT_ARG_NAME);
157:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
158:       assertEquals(56, Node.CHANGE_TIME);
159:       assertEquals(29, Node.JSDOC_INFO_PROP);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(36, Node.QUOTED_PROP);
162:       assertEquals(55, Node.INFERRED_FUNCTION);
163:       assertEquals(8, Node.FLAG_NO_THROWS);
164:       assertEquals(39, Node.EMPTY_BLOCK);
165:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
166:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
167:       assertFalse(node1.equals((Object)node0));
168:       assertNotNull(node1);
169:       assertFalse(node1.isVoid());
170:       assertFalse(node1.isDebugger());
171:       assertFalse(node1.isTry());
172:       assertFalse(node1.isFunction());
173:       assertFalse(node1.isRegExp());
174:       assertFalse(node1.isDefaultCase());
175:       assertFalse(node1.isTrue());
176:       assertFalse(node1.isDelProp());
177:       assertEquals(901, node1.getLineno());
178:       assertFalse(node1.isArrayLit());
179:       assertFalse(node1.isCatch());
180:       assertEquals(15, node1.getCharno());
181:       assertEquals(0, node1.getChildCount());
182:       assertFalse(node1.isIf());
183:       assertFalse(node1.isNE());
184:       assertFalse(node1.isNull());
185:       assertFalse(node1.isIn());
186:       assertFalse(node1.isEmpty());
187:       assertFalse(node1.isAdd());
188:       assertFalse(node1.isSetterDef());
189:       assertFalse(node1.isInc());
190:       assertFalse(node1.isWhile());
191:       assertFalse(node1.isContinue());
192:       assertFalse(node1.isName());
193:       assertFalse(node1.isFalse());
194:       assertFalse(node1.isBreak());
195:       assertFalse(node1.isCall());
196:       assertFalse(node1.isGetProp());
197:       assertFalse(node1.isComma());
198:       assertFalse(node1.isTypeOf());
199:       assertFalse(node1.isDec());
200:       assertFalse(node1.hasChildren());
201:       assertFalse(node1.isReturn());
202:       assertFalse(node1.isNot());
203:       assertFalse(node1.isObjectLit());
204:       assertTrue(node1.isNumber());
205:       assertFalse(node1.isString());
206:       assertFalse(node1.isAnd());
207:       assertFalse(node1.isAssign());
208:       assertFalse(node1.isLabelName());
209:       assertFalse(node1.isWith());
210:       assertFalse(node1.isInstanceOf());
211:       assertFalse(node1.isCast());
212:       assertFalse(node1.isGetElem());
213:       assertFalse(node1.isExprResult());
214:       assertFalse(node1.isAssignAdd());
215:       assertFalse(node1.isOr());
216:       assertFalse(node1.isLabel());
217:       assertFalse(node1.isThrow());
218:       assertFalse(node1.isDo());
219:       assertFalse(node1.isNew());
220:       assertFalse(node1.isSwitch());
221:       assertFalse(node1.isVar());
222:       assertEquals(39, node1.getType());
223:       assertFalse(node1.isBlock());
224:       assertFalse(node1.isHook());
225:       assertFalse(node1.isStringKey());
226:       assertFalse(node1.hasMoreThanOneChild());
227:       assertFalse(node1.isParamList());
228:       assertFalse(node1.isGetterDef());
229:       assertFalse(node1.isFor());
230:       assertFalse(node1.isThis());
231:       assertFalse(node1.isCase());
232:       assertEquals(3690511, node1.getSourcePosition());
233:       assertFalse(node1.hasOneChild());
234:       assertFalse(node1.isScript());
235:       
236:       boolean boolean0 = node0.isEquivalentToTyped(node1);
237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
238:       assertEquals(43, Node.IS_CONSTANT_NAME);
239:       assertEquals(36, Node.QUOTED_PROP);
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(53, Node.INPUT_ID);
242:       assertEquals(4095, Node.COLUMN_MASK);
243:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
244:       assertEquals(47, Node.IS_DISPATCHER);
245:       assertEquals(2, Node.POST_FLAG);
246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
248:       assertEquals(40, Node.ORIGINALNAME_PROP);
249:       assertEquals(51, Node.STATIC_SOURCE_FILE);
250:       assertEquals(50, Node.FREE_CALL);
251:       assertEquals(46, Node.IS_NAMESPACE);
252:       assertEquals(54, Node.SLASH_V);
253:       assertEquals(57, Node.LAST_PROP);
254:       assertEquals(52, Node.LENGTH);
255:       assertEquals(49, Node.DIRECT_EVAL);
256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
257:       assertEquals(1, Node.DECR_FLAG);
258:       assertEquals(32, Node.INCRDECR_PROP);
259:       assertEquals(30, Node.VAR_ARGS_NAME);
260:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
261:       assertEquals(12, Node.COLUMN_BITS);
262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
263:       assertEquals(37, Node.OPT_ARG_NAME);
264:       assertEquals(56, Node.CHANGE_TIME);
265:       assertEquals(48, Node.DIRECTIVES);
266:       assertEquals(8, Node.FLAG_NO_THROWS);
267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
268:       assertEquals(29, Node.JSDOC_INFO_PROP);
269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
270:       assertEquals(39, Node.EMPTY_BLOCK);
271:       assertEquals(55, Node.INFERRED_FUNCTION);
272:       assertEquals(57, Node.REFLECTED_OBJECT);
273:       assertEquals(53, Node.INPUT_ID);
274:       assertEquals(43, Node.IS_CONSTANT_NAME);
275:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
276:       assertEquals(47, Node.IS_DISPATCHER);
277:       assertEquals(2, Node.POST_FLAG);
278:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
279:       assertEquals(4095, Node.COLUMN_MASK);
280:       assertEquals(32, Node.INCRDECR_PROP);
281:       assertEquals(46, Node.IS_NAMESPACE);
282:       assertEquals(51, Node.STATIC_SOURCE_FILE);
283:       assertEquals(12, Node.COLUMN_BITS);
284:       assertEquals(50, Node.FREE_CALL);
285:       assertEquals(1, Node.DECR_FLAG);
286:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
287:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
288:       assertEquals(52, Node.LENGTH);
289:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
290:       assertEquals(57, Node.REFLECTED_OBJECT);
291:       assertEquals(54, Node.SLASH_V);
292:       assertEquals(57, Node.LAST_PROP);
293:       assertEquals(30, Node.VAR_ARGS_NAME);
294:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
295:       assertEquals(49, Node.DIRECT_EVAL);
296:       assertEquals(40, Node.ORIGINALNAME_PROP);
297:       assertEquals(48, Node.DIRECTIVES);
298:       assertEquals(37, Node.OPT_ARG_NAME);
299:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
300:       assertEquals(56, Node.CHANGE_TIME);
301:       assertEquals(29, Node.JSDOC_INFO_PROP);
302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
303:       assertEquals(36, Node.QUOTED_PROP);
304:       assertEquals(55, Node.INFERRED_FUNCTION);
305:       assertEquals(8, Node.FLAG_NO_THROWS);
306:       assertEquals(39, Node.EMPTY_BLOCK);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
309:       assertFalse(node0.equals((Object)node1));
310:       assertFalse(node1.equals((Object)node0));
311:       assertFalse(boolean0);
312:       assertFalse(node0.isDefaultCase());
313:       assertEquals(40, node0.getType());
314:       assertFalse(node0.isVoid());
315:       assertFalse(node0.isTry());
316:       assertFalse(node0.isCatch());
317:       assertFalse(node0.isFunction());
318:       assertFalse(node0.isRegExp());
319:       assertEquals(0, node0.getChildCount());
320:       assertFalse(node0.isDelProp());
321:       assertFalse(node0.isIf());
322:       assertFalse(node0.isNull());
323:       assertFalse(node0.isEmpty());
324:       assertFalse(node0.isNE());
325:       assertFalse(node0.isCall());
326:       assertFalse(node0.isSetterDef());
327:       assertFalse(node0.isName());
328:       assertFalse(node0.isIn());
329:       assertFalse(node0.isAdd());
330:       assertFalse(node0.isTrue());
331:       assertFalse(node0.isWhile());
332:       assertFalse(node0.isInc());
333:       assertFalse(node0.isReturn());
334:       assertFalse(node0.isContinue());
335:       assertFalse(node0.isFalse());
336:       assertFalse(node0.isTypeOf());
337:       assertFalse(node0.isDec());
338:       assertFalse(node0.hasChildren());
339:       assertFalse(node0.isGetProp());
340:       assertFalse(node0.isDebugger());
341:       assertFalse(node0.isObjectLit());
342:       assertFalse(node0.isNot());
343:       assertFalse(node0.isWith());
344:       assertFalse(node0.isScript());
345:       assertFalse(node0.isExprResult());
346:       assertFalse(node0.isAnd());
347:       assertEquals(8199, node0.getLineno());
348:       assertFalse(node0.isInstanceOf());
349:       assertFalse(node0.isCast());
350:       assertFalse(node0.isThis());
351:       assertFalse(node0.isAssign());
352:       assertFalse(node0.isComma());
353:       assertFalse(node0.isBreak());
354:       assertFalse(node0.isThrow());
355:       assertFalse(node0.isGetElem());
356:       assertEquals(0, node0.getCharno());
357:       assertFalse(node0.isOr());
358:       assertEquals(33583104, node0.getSourcePosition());
359:       assertFalse(node0.isSwitch());
360:       assertFalse(node0.isDo());
361:       assertFalse(node0.isCase());
362:       assertTrue(node0.isString());
363:       assertFalse(node0.isNew());
364:       assertFalse(node0.isHook());
365:       assertFalse(node0.isAssignAdd());
366:       assertFalse(node0.isVar());
367:       assertFalse(node0.hasMoreThanOneChild());
368:       assertFalse(node0.isBlock());
369:       assertFalse(node0.isLabel());
370:       assertFalse(node0.isGetterDef());
371:       assertFalse(node0.isNumber());
372:       assertFalse(node0.isFor());
373:       assertFalse(node0.isStringKey());
374:       assertFalse(node0.isParamList());
375:       assertFalse(node0.isLabelName());
376:       assertFalse(node0.isArrayLit());
377:       assertFalse(node0.hasOneChild());
378:       assertFalse(node1.isVoid());
379:       assertFalse(node1.isDebugger());
380:       assertFalse(node1.isTry());
381:       assertFalse(node1.isFunction());
382:       assertFalse(node1.isRegExp());
383:       assertFalse(node1.isDefaultCase());
384:       assertFalse(node1.isTrue());
385:       assertFalse(node1.isDelProp());
386:       assertEquals(901, node1.getLineno());
387:       assertFalse(node1.isArrayLit());
388:       assertFalse(node1.isCatch());
389:       assertEquals(15, node1.getCharno());
390:       assertEquals(0, node1.getChildCount());
391:       assertFalse(node1.isIf());
392:       assertFalse(node1.isNE());
393:       assertFalse(node1.isNull());
394:       assertFalse(node1.isIn());
395:       assertFalse(node1.isEmpty());
396:       assertFalse(node1.isAdd());
397:       assertFalse(node1.isSetterDef());
398:       assertFalse(node1.isInc());
399:       assertFalse(node1.isWhile());
400:       assertFalse(node1.isContinue());
401:       assertFalse(node1.isName());
402:       assertFalse(node1.isFalse());
403:       assertFalse(node1.isBreak());
404:       assertFalse(node1.isCall());
405:       assertFalse(node1.isGetProp());
406:       assertFalse(node1.isComma());
407:       assertFalse(node1.isTypeOf());
408:       assertFalse(node1.isDec());
409:       assertFalse(node1.hasChildren());
410:       assertFalse(node1.isReturn());
411:       assertFalse(node1.isNot());
412:       assertFalse(node1.isObjectLit());
413:       assertTrue(node1.isNumber());
414:       assertFalse(node1.isString());
415:       assertFalse(node1.isAnd());
416:       assertFalse(node1.isAssign());
417:       assertFalse(node1.isLabelName());
418:       assertFalse(node1.isWith());
419:       assertFalse(node1.isInstanceOf());
420:       assertFalse(node1.isCast());
421:       assertFalse(node1.isGetElem());
422:       assertFalse(node1.isExprResult());
423:       assertFalse(node1.isAssignAdd());
424:       assertFalse(node1.isOr());
425:       assertFalse(node1.isLabel());
426:       assertFalse(node1.isThrow());
427:       assertFalse(node1.isDo());
428:       assertFalse(node1.isNew());
429:       assertFalse(node1.isSwitch());
430:       assertFalse(node1.isVar());
431:       assertEquals(39, node1.getType());
432:       assertFalse(node1.isBlock());
433:       assertFalse(node1.isHook());
434:       assertFalse(node1.isStringKey());
435:       assertFalse(node1.hasMoreThanOneChild());
436:       assertFalse(node1.isParamList());
437:       assertFalse(node1.isGetterDef());
438:       assertFalse(node1.isFor());
439:       assertFalse(node1.isThis());
440:       assertFalse(node1.isCase());
441:       assertEquals(3690511, node1.getSourcePosition());
442:       assertFalse(node1.hasOneChild());
443:       assertFalse(node1.isScript());
444:       
445:       Node node2 = node0.srcrefTree(node1);
446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
447:       assertEquals(43, Node.IS_CONSTANT_NAME);
448:       assertEquals(36, Node.QUOTED_PROP);
449:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
450:       assertEquals(53, Node.INPUT_ID);
451:       assertEquals(4095, Node.COLUMN_MASK);
452:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
453:       assertEquals(47, Node.IS_DISPATCHER);
454:       assertEquals(2, Node.POST_FLAG);
455:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
456:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
457:       assertEquals(40, Node.ORIGINALNAME_PROP);
458:       assertEquals(51, Node.STATIC_SOURCE_FILE);
459:       assertEquals(50, Node.FREE_CALL);
460:       assertEquals(46, Node.IS_NAMESPACE);
461:       assertEquals(54, Node.SLASH_V);
462:       assertEquals(57, Node.LAST_PROP);
463:       assertEquals(52, Node.LENGTH);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
466:       assertEquals(1, Node.DECR_FLAG);
467:       assertEquals(32, Node.INCRDECR_PROP);
468:       assertEquals(30, Node.VAR_ARGS_NAME);
469:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
470:       assertEquals(12, Node.COLUMN_BITS);
471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
472:       assertEquals(37, Node.OPT_ARG_NAME);
473:       assertEquals(56, Node.CHANGE_TIME);
474:       assertEquals(48, Node.DIRECTIVES);
475:       assertEquals(8, Node.FLAG_NO_THROWS);
476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
477:       assertEquals(29, Node.JSDOC_INFO_PROP);
478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
479:       assertEquals(39, Node.EMPTY_BLOCK);
480:       assertEquals(55, Node.INFERRED_FUNCTION);
481:       assertEquals(57, Node.REFLECTED_OBJECT);
482:       assertEquals(53, Node.INPUT_ID);
483:       assertEquals(43, Node.IS_CONSTANT_NAME);
484:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
485:       assertEquals(47, Node.IS_DISPATCHER);
486:       assertEquals(2, Node.POST_FLAG);
487:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
488:       assertEquals(4095, Node.COLUMN_MASK);
489:       assertEquals(32, Node.INCRDECR_PROP);
490:       assertEquals(46, Node.IS_NAMESPACE);
491:       assertEquals(51, Node.STATIC_SOURCE_FILE);
492:       assertEquals(12, Node.COLUMN_BITS);
493:       assertEquals(50, Node.FREE_CALL);
494:       assertEquals(1, Node.DECR_FLAG);
495:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
496:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
497:       assertEquals(52, Node.LENGTH);
498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
499:       assertEquals(57, Node.REFLECTED_OBJECT);
500:       assertEquals(54, Node.SLASH_V);
501:       assertEquals(57, Node.LAST_PROP);
502:       assertEquals(30, Node.VAR_ARGS_NAME);
503:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
504:       assertEquals(49, Node.DIRECT_EVAL);
505:       assertEquals(40, Node.ORIGINALNAME_PROP);
506:       assertEquals(48, Node.DIRECTIVES);
507:       assertEquals(37, Node.OPT_ARG_NAME);
508:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
509:       assertEquals(56, Node.CHANGE_TIME);
510:       assertEquals(29, Node.JSDOC_INFO_PROP);
511:       assertEquals(15, Node.NO_SIDE_EFFECTS);
512:       assertEquals(36, Node.QUOTED_PROP);
513:       assertEquals(55, Node.INFERRED_FUNCTION);
514:       assertEquals(8, Node.FLAG_NO_THROWS);
515:       assertEquals(39, Node.EMPTY_BLOCK);
516:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
518:       assertEquals(30, Node.VAR_ARGS_NAME);
519:       assertEquals(49, Node.DIRECT_EVAL);
520:       assertEquals(15, Node.NO_SIDE_EFFECTS);
521:       assertEquals(57, Node.LAST_PROP);
522:       assertEquals(1, Node.DECR_FLAG);
523:       assertEquals(32, Node.INCRDECR_PROP);
524:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
525:       assertEquals(12, Node.COLUMN_BITS);
526:       assertEquals(2, Node.POST_FLAG);
527:       assertEquals(50, Node.FREE_CALL);
528:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
529:       assertEquals(40, Node.ORIGINALNAME_PROP);
530:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
531:       assertEquals(46, Node.IS_NAMESPACE);
532:       assertEquals(54, Node.SLASH_V);
533:       assertEquals(51, Node.STATIC_SOURCE_FILE);
534:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
535:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
536:       assertEquals(43, Node.IS_CONSTANT_NAME);
537:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
538:       assertEquals(4095, Node.COLUMN_MASK);
539:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
540:       assertEquals(29, Node.JSDOC_INFO_PROP);
541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
542:       assertEquals(47, Node.IS_DISPATCHER);
543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
544:       assertEquals(39, Node.EMPTY_BLOCK);
545:       assertEquals(37, Node.OPT_ARG_NAME);
546:       assertEquals(56, Node.CHANGE_TIME);
547:       assertEquals(48, Node.DIRECTIVES);
548:       assertEquals(52, Node.LENGTH);
549:       assertEquals(53, Node.INPUT_ID);
550:       assertEquals(57, Node.REFLECTED_OBJECT);
551:       assertEquals(55, Node.INFERRED_FUNCTION);
552:       assertEquals(36, Node.QUOTED_PROP);
553:       assertEquals(8, Node.FLAG_NO_THROWS);
554:       assertFalse(node0.equals((Object)node1));
555:       assertFalse(node1.equals((Object)node0));
556:       assertFalse(node2.equals((Object)node1));
557:       assertNotNull(node2);
558:       assertSame(node0, node2);
559:       assertSame(node2, node0);
560:       assertFalse(node0.isDefaultCase());
561:       assertEquals(40, node0.getType());
562:       assertFalse(node0.isVoid());
563:       assertFalse(node0.isTry());
564:       assertFalse(node0.isCatch());
565:       assertFalse(node0.isFunction());
566:       assertFalse(node0.isRegExp());
567:       assertEquals(0, node0.getChildCount());
568:       assertFalse(node0.isDelProp());
569:       assertFalse(node0.isIf());
570:       assertEquals(901, node0.getLineno());
571:       assertFalse(node0.isNull());
572:       assertFalse(node0.isEmpty());
573:       assertFalse(node0.isNE());
574:       assertFalse(node0.isCall());
575:       assertFalse(node0.isSetterDef());
576:       assertFalse(node0.isName());
577:       assertFalse(node0.isIn());
578:       assertFalse(node0.isAdd());
579:       assertFalse(node0.isTrue());
580:       assertFalse(node0.isWhile());
581:       assertFalse(node0.isInc());
582:       assertFalse(node0.isReturn());
583:       assertFalse(node0.isContinue());
584:       assertFalse(node0.isFalse());
585:       assertFalse(node0.isTypeOf());
586:       assertFalse(node0.isDec());
587:       assertFalse(node0.hasChildren());
588:       assertFalse(node0.isGetProp());
589:       assertFalse(node0.isDebugger());
590:       assertFalse(node0.isObjectLit());
591:       assertFalse(node0.isNot());
592:       assertFalse(node0.isWith());
593:       assertFalse(node0.isScript());
594:       assertFalse(node0.isExprResult());
595:       assertFalse(node0.isAnd());
596:       assertFalse(node0.isInstanceOf());
597:       assertFalse(node0.isCast());
598:       assertFalse(node0.isThis());
599:       assertFalse(node0.isAssign());
600:       assertFalse(node0.isComma());
601:       assertFalse(node0.isBreak());
602:       assertFalse(node0.isThrow());
603:       assertFalse(node0.isGetElem());
604:       assertFalse(node0.isOr());
605:       assertFalse(node0.isSwitch());
606:       assertFalse(node0.isDo());
607:       assertFalse(node0.isCase());
608:       assertTrue(node0.isString());
609:       assertFalse(node0.isNew());
610:       assertFalse(node0.isHook());
611:       assertFalse(node0.isAssignAdd());
612:       assertFalse(node0.isVar());
613:       assertEquals(15, node0.getCharno());
614:       assertFalse(node0.hasMoreThanOneChild());
615:       assertFalse(node0.isBlock());
616:       assertFalse(node0.isLabel());
617:       assertFalse(node0.isGetterDef());
618:       assertEquals(3690511, node0.getSourcePosition());
619:       assertFalse(node0.isNumber());
620:       assertFalse(node0.isFor());
621:       assertFalse(node0.isStringKey());
622:       assertFalse(node0.isParamList());
623:       assertFalse(node0.isLabelName());
624:       assertFalse(node0.isArrayLit());
625:       assertFalse(node0.hasOneChild());
626:       assertFalse(node1.isVoid());
627:       assertFalse(node1.isDebugger());
628:       assertFalse(node1.isTry());
629:       assertFalse(node1.isFunction());
630:       assertFalse(node1.isRegExp());
631:       assertFalse(node1.isDefaultCase());
632:       assertFalse(node1.isTrue());
633:       assertFalse(node1.isDelProp());
634:       assertEquals(901, node1.getLineno());
635:       assertFalse(node1.isArrayLit());
636:       assertFalse(node1.isCatch());
637:       assertEquals(15, node1.getCharno());
638:       assertEquals(0, node1.getChildCount());
639:       assertFalse(node1.isIf());
640:       assertFalse(node1.isNE());
641:       assertFalse(node1.isNull());
642:       assertFalse(node1.isIn());
643:       assertFalse(node1.isEmpty());
644:       assertFalse(node1.isAdd());
645:       assertFalse(node1.isSetterDef());
646:       assertFalse(node1.isInc());
647:       assertFalse(node1.isWhile());
648:       assertFalse(node1.isContinue());
649:       assertFalse(node1.isName());
650:       assertFalse(node1.isFalse());
651:       assertFalse(node1.isBreak());
652:       assertFalse(node1.isCall());
653:       assertFalse(node1.isGetProp());
654:       assertFalse(node1.isComma());
655:       assertFalse(node1.isTypeOf());
656:       assertFalse(node1.isDec());
657:       assertFalse(node1.hasChildren());
658:       assertFalse(node1.isReturn());
659:       assertFalse(node1.isNot());
660:       assertFalse(node1.isObjectLit());
661:       assertTrue(node1.isNumber());
662:       assertFalse(node1.isString());
663:       assertFalse(node1.isAnd());
664:       assertFalse(node1.isAssign());
665:       assertFalse(node1.isLabelName());
666:       assertFalse(node1.isWith());
667:       assertFalse(node1.isInstanceOf());
668:       assertFalse(node1.isCast());
669:       assertFalse(node1.isGetElem());
670:       assertFalse(node1.isExprResult());
671:       assertFalse(node1.isAssignAdd());
672:       assertFalse(node1.isOr());
673:       assertFalse(node1.isLabel());
674:       assertFalse(node1.isThrow());
675:       assertFalse(node1.isDo());
676:       assertFalse(node1.isNew());
677:       assertFalse(node1.isSwitch());
678:       assertFalse(node1.isVar());
679:       assertEquals(39, node1.getType());
680:       assertFalse(node1.isBlock());
681:       assertFalse(node1.isHook());
682:       assertFalse(node1.isStringKey());
683:       assertFalse(node1.hasMoreThanOneChild());
684:       assertFalse(node1.isParamList());
685:       assertFalse(node1.isGetterDef());
686:       assertFalse(node1.isFor());
687:       assertFalse(node1.isThis());
688:       assertFalse(node1.isCase());
689:       assertEquals(3690511, node1.getSourcePosition());
690:       assertFalse(node1.hasOneChild());
691:       assertFalse(node1.isScript());
692:       assertFalse(node2.isCase());
693:       assertEquals(15, node2.getCharno());
694:       assertFalse(node2.isSwitch());
695:       assertEquals(901, node2.getLineno());
696:       assertFalse(node2.isFalse());
697:       assertFalse(node2.isDelProp());
698:       assertFalse(node2.isIf());
699:       assertFalse(node2.isNE());
700:       assertFalse(node2.isThrow());
701:       assertFalse(node2.isTrue());
702:       assertFalse(node2.isInc());
703:       assertFalse(node2.isIn());
704:       assertFalse(node2.isEmpty());
705:       assertFalse(node2.isAnd());
706:       assertFalse(node2.isObjectLit());
707:       assertEquals(40, node2.getType());
708:       assertFalse(node2.isNot());
709:       assertFalse(node2.isExprResult());
710:       assertFalse(node2.isVoid());
711:       assertFalse(node2.isFunction());
712:       assertFalse(node2.isComma());
713:       assertFalse(node2.isBreak());
714:       assertFalse(node2.isCast());
715:       assertFalse(node2.isAssign());
716:       assertFalse(node2.hasChildren());
717:       assertFalse(node2.isDebugger());
718:       assertFalse(node2.isGetProp());
719:       assertFalse(node2.isContinue());
720:       assertFalse(node2.hasMoreThanOneChild());
721:       assertFalse(node2.isDo());
722:       assertFalse(node2.isReturn());
723:       assertFalse(node2.isAssignAdd());
724:       assertFalse(node2.isWhile());
725:       assertFalse(node2.isBlock());
726:       assertFalse(node2.isLabel());
727:       assertFalse(node2.isTypeOf());
728:       assertFalse(node2.isDec());
729:       assertFalse(node2.isCall());
730:       assertFalse(node2.isGetElem());
731:       assertFalse(node2.isName());
732:       assertFalse(node2.isNull());
733:       assertFalse(node2.isVar());
734:       assertFalse(node2.isSetterDef());
735:       assertFalse(node2.isOr());
736:       assertFalse(node2.isNew());
737:       assertFalse(node2.isAdd());
738:       assertEquals(0, node2.getChildCount());
739:       assertFalse(node2.isDefaultCase());
740:       assertFalse(node2.isThis());
741:       assertFalse(node2.isRegExp());
742:       assertFalse(node2.isWith());
743:       assertFalse(node2.isCatch());
744:       assertFalse(node2.isInstanceOf());
745:       assertFalse(node2.isLabelName());
746:       assertFalse(node2.isArrayLit());
747:       assertFalse(node2.hasOneChild());
748:       assertFalse(node2.isHook());
749:       assertFalse(node2.isFor());
750:       assertFalse(node2.isStringKey());
751:       assertFalse(node2.isParamList());
752:       assertFalse(node2.isTry());
753:       assertTrue(node2.isString());
754:       assertFalse(node2.isGetterDef());
755:       assertEquals(3690511, node2.getSourcePosition());
756:       assertFalse(node2.isNumber());
757:       assertFalse(node2.isScript());
758:       
759:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
760:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
761:       assertEquals(43, Node.IS_CONSTANT_NAME);
762:       assertEquals(36, Node.QUOTED_PROP);
763:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
764:       assertEquals(53, Node.INPUT_ID);
765:       assertEquals(4095, Node.COLUMN_MASK);
766:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
767:       assertEquals(47, Node.IS_DISPATCHER);
768:       assertEquals(2, Node.POST_FLAG);
769:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
770:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
771:       assertEquals(40, Node.ORIGINALNAME_PROP);
772:       assertEquals(51, Node.STATIC_SOURCE_FILE);
773:       assertEquals(50, Node.FREE_CALL);
774:       assertEquals(46, Node.IS_NAMESPACE);
775:       assertEquals(54, Node.SLASH_V);
776:       assertEquals(57, Node.LAST_PROP);
777:       assertEquals(52, Node.LENGTH);
778:       assertEquals(49, Node.DIRECT_EVAL);
779:       assertEquals(15, Node.NO_SIDE_EFFECTS);
780:       assertEquals(1, Node.DECR_FLAG);
781:       assertEquals(32, Node.INCRDECR_PROP);
782:       assertEquals(30, Node.VAR_ARGS_NAME);
783:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
784:       assertEquals(12, Node.COLUMN_BITS);
785:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
786:       assertEquals(37, Node.OPT_ARG_NAME);
787:       assertEquals(56, Node.CHANGE_TIME);
788:       assertEquals(48, Node.DIRECTIVES);
789:       assertEquals(8, Node.FLAG_NO_THROWS);
790:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
791:       assertEquals(29, Node.JSDOC_INFO_PROP);
792:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
793:       assertEquals(39, Node.EMPTY_BLOCK);
794:       assertEquals(55, Node.INFERRED_FUNCTION);
795:       assertEquals(57, Node.REFLECTED_OBJECT);
796:       assertFalse(node0.equals((Object)node1));
797:       assertNotNull(node_FileLevelJsDocBuilder0);
798:       assertFalse(node0.isDefaultCase());
799:       assertEquals(40, node0.getType());
800:       assertFalse(node0.isVoid());
801:       assertFalse(node0.isTry());
802:       assertFalse(node0.isCatch());
803:       assertFalse(node0.isFunction());
804:       assertFalse(node0.isRegExp());
805:       assertEquals(0, node0.getChildCount());
806:       assertFalse(node0.isDelProp());
807:       assertFalse(node0.isIf());
808:       assertEquals(901, node0.getLineno());
809:       assertFalse(node0.isNull());
810:       assertFalse(node0.isEmpty());
811:       assertFalse(node0.isNE());
812:       assertFalse(node0.isCall());
813:       assertFalse(node0.isSetterDef());
814:       assertFalse(node0.isName());
815:       assertFalse(node0.isIn());
816:       assertFalse(node0.isAdd());
817:       assertFalse(node0.isTrue());
818:       assertFalse(node0.isWhile());
819:       assertFalse(node0.isInc());
820:       assertFalse(node0.isReturn());
821:       assertFalse(node0.isContinue());
822:       assertFalse(node0.isFalse());
823:       assertFalse(node0.isTypeOf());
824:       assertFalse(node0.isDec());
825:       assertFalse(node0.hasChildren());
826:       assertFalse(node0.isGetProp());
827:       assertFalse(node0.isDebugger());
828:       assertFalse(node0.isObjectLit());
829:       assertFalse(node0.isNot());
830:       assertFalse(node0.isWith());
831:       assertFalse(node0.isScript());
832:       assertFalse(node0.isExprResult());
833:       assertFalse(node0.isAnd());
834:       assertFalse(node0.isInstanceOf());
835:       assertFalse(node0.isCast());
836:       assertFalse(node0.isThis());
837:       assertFalse(node0.isAssign());
838:       assertFalse(node0.isComma());
839:       assertFalse(node0.isBreak());
840:       assertFalse(node0.isThrow());
841:       assertFalse(node0.isGetElem());
842:       assertFalse(node0.isOr());
843:       assertFalse(node0.isSwitch());
844:       assertFalse(node0.isDo());
845:       assertFalse(node0.isCase());
846:       assertTrue(node0.isString());
847:       assertFalse(node0.isNew());
848:       assertFalse(node0.isHook());
849:       assertFalse(node0.isAssignAdd());
850:       assertFalse(node0.isVar());
851:       assertEquals(15, node0.getCharno());
852:       assertFalse(node0.hasMoreThanOneChild());
853:       assertFalse(node0.isBlock());
854:       assertFalse(node0.isLabel());
855:       assertFalse(node0.isGetterDef());
856:       assertEquals(3690511, node0.getSourcePosition());
857:       assertFalse(node0.isNumber());
858:       assertFalse(node0.isFor());
859:       assertFalse(node0.isStringKey());
860:       assertFalse(node0.isParamList());
861:       assertFalse(node0.isLabelName());
862:       assertFalse(node0.isArrayLit());
863:       assertFalse(node0.hasOneChild());
864:       
865:       node_FileLevelJsDocBuilder0.append("<N2t");
866:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
867:       assertEquals(43, Node.IS_CONSTANT_NAME);
868:       assertEquals(36, Node.QUOTED_PROP);
869:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
870:       assertEquals(53, Node.INPUT_ID);
871:       assertEquals(4095, Node.COLUMN_MASK);
872:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
873:       assertEquals(47, Node.IS_DISPATCHER);
874:       assertEquals(2, Node.POST_FLAG);
875:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
876:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
877:       assertEquals(40, Node.ORIGINALNAME_PROP);
878:       assertEquals(51, Node.STATIC_SOURCE_FILE);
879:       assertEquals(50, Node.FREE_CALL);
880:       assertEquals(46, Node.IS_NAMESPACE);
881:       assertEquals(54, Node.SLASH_V);
882:       assertEquals(57, Node.LAST_PROP);
883:       assertEquals(52, Node.LENGTH);
884:       assertEquals(49, Node.DIRECT_EVAL);
885:       assertEquals(15, Node.NO_SIDE_EFFECTS);
886:       assertEquals(1, Node.DECR_FLAG);
887:       assertEquals(32, Node.INCRDECR_PROP);
888:       assertEquals(30, Node.VAR_ARGS_NAME);
889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
890:       assertEquals(12, Node.COLUMN_BITS);
891:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
892:       assertEquals(37, Node.OPT_ARG_NAME);
893:       assertEquals(56, Node.CHANGE_TIME);
894:       assertEquals(48, Node.DIRECTIVES);
895:       assertEquals(8, Node.FLAG_NO_THROWS);
896:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
897:       assertEquals(29, Node.JSDOC_INFO_PROP);
898:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
899:       assertEquals(39, Node.EMPTY_BLOCK);
900:       assertEquals(55, Node.INFERRED_FUNCTION);
901:       assertEquals(57, Node.REFLECTED_OBJECT);
902:       assertFalse(node0.equals((Object)node1));
903:       assertSame(node0, node2);
904:       assertFalse(node0.isDefaultCase());
905:       assertEquals(40, node0.getType());
906:       assertFalse(node0.isVoid());
907:       assertFalse(node0.isTry());
908:       assertFalse(node0.isCatch());
909:       assertFalse(node0.isFunction());
910:       assertFalse(node0.isRegExp());
911:       assertEquals(0, node0.getChildCount());
912:       assertFalse(node0.isDelProp());
913:       assertFalse(node0.isIf());
914:       assertEquals(901, node0.getLineno());
915:       assertFalse(node0.isNull());
916:       assertFalse(node0.isEmpty());
917:       assertFalse(node0.isNE());
918:       assertFalse(node0.isCall());
919:       assertFalse(node0.isSetterDef());
920:       assertFalse(node0.isName());
921:       assertFalse(node0.isIn());
922:       assertFalse(node0.isAdd());
923:       assertFalse(node0.isTrue());
924:       assertFalse(node0.isWhile());
925:       assertFalse(node0.isInc());
926:       assertFalse(node0.isReturn());
927:       assertFalse(node0.isContinue());
928:       assertFalse(node0.isFalse());
929:       assertFalse(node0.isTypeOf());
930:       assertFalse(node0.isDec());
931:       assertFalse(node0.hasChildren());
932:       assertFalse(node0.isGetProp());
933:       assertFalse(node0.isDebugger());
934:       assertFalse(node0.isObjectLit());
935:       assertFalse(node0.isNot());
936:       assertFalse(node0.isWith());
937:       assertFalse(node0.isScript());
938:       assertFalse(node0.isExprResult());
939:       assertFalse(node0.isAnd());
940:       assertFalse(node0.isInstanceOf());
941:       assertFalse(node0.isCast());
942:       assertFalse(node0.isThis());
943:       assertFalse(node0.isAssign());
944:       assertFalse(node0.isComma());
945:       assertFalse(node0.isBreak());
946:       assertFalse(node0.isThrow());
947:       assertFalse(node0.isGetElem());
948:       assertFalse(node0.isOr());
949:       assertFalse(node0.isSwitch());
950:       assertFalse(node0.isDo());
951:       assertFalse(node0.isCase());
952:       assertTrue(node0.isString());
953:       assertFalse(node0.isNew());
954:       assertFalse(node0.isHook());
955:       assertFalse(node0.isAssignAdd());
956:       assertFalse(node0.isVar());
957:       assertEquals(15, node0.getCharno());
958:       assertFalse(node0.hasMoreThanOneChild());
959:       assertFalse(node0.isBlock());
960:       assertFalse(node0.isLabel());
961:       assertFalse(node0.isGetterDef());
962:       assertEquals(3690511, node0.getSourcePosition());
963:       assertFalse(node0.isNumber());
964:       assertFalse(node0.isFor());
965:       assertFalse(node0.isStringKey());
966:       assertFalse(node0.isParamList());
967:       assertFalse(node0.isLabelName());
968:       assertFalse(node0.isArrayLit());
969:       assertFalse(node0.hasOneChild());
970:       
971:       String string0 = node1.getSourceFileName();
972:       assertEquals(53, Node.INPUT_ID);
973:       assertEquals(43, Node.IS_CONSTANT_NAME);
974:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
975:       assertEquals(47, Node.IS_DISPATCHER);
976:       assertEquals(2, Node.POST_FLAG);
977:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
978:       assertEquals(4095, Node.COLUMN_MASK);
979:       assertEquals(32, Node.INCRDECR_PROP);
980:       assertEquals(46, Node.IS_NAMESPACE);
981:       assertEquals(51, Node.STATIC_SOURCE_FILE);
982:       assertEquals(12, Node.COLUMN_BITS);
983:       assertEquals(50, Node.FREE_CALL);
984:       assertEquals(1, Node.DECR_FLAG);
985:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
986:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
987:       assertEquals(52, Node.LENGTH);
988:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
989:       assertEquals(57, Node.REFLECTED_OBJECT);
990:       assertEquals(54, Node.SLASH_V);
991:       assertEquals(57, Node.LAST_PROP);
992:       assertEquals(30, Node.VAR_ARGS_NAME);
993:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
994:       assertEquals(49, Node.DIRECT_EVAL);
995:       assertEquals(40, Node.ORIGINALNAME_PROP);
996:       assertEquals(48, Node.DIRECTIVES);
997:       assertEquals(37, Node.OPT_ARG_NAME);
998:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
999:       assertEquals(56, Node.CHANGE_TIME);
1000:       assertEquals(29, Node.JSDOC_INFO_PROP);
1001:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1002:       assertEquals(36, Node.QUOTED_PROP);
1003:       assertEquals(55, Node.INFERRED_FUNCTION);
1004:       assertEquals(8, Node.FLAG_NO_THROWS);
1005:       assertEquals(39, Node.EMPTY_BLOCK);
1006:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1007:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1008:       assertFalse(node1.equals((Object)node0));
1009:       assertFalse(node1.equals((Object)node2));
1010:       assertNull(string0);
1011:       assertFalse(node1.isVoid());
1012:       assertFalse(node1.isDebugger());
1013:       assertFalse(node1.isTry());
1014:       assertFalse(node1.isFunction());
1015:       assertFalse(node1.isRegExp());
1016:       assertFalse(node1.isDefaultCase());
1017:       assertFalse(node1.isTrue());
1018:       assertFalse(node1.isDelProp());
1019:       assertEquals(901, node1.getLineno());
1020:       assertFalse(node1.isArrayLit());
1021:       assertFalse(node1.isCatch());
1022:       assertEquals(15, node1.getCharno());
1023:       assertEquals(0, node1.getChildCount());
1024:       assertFalse(node1.isIf());
1025:       assertFalse(node1.isNE());
1026:       assertFalse(node1.isNull());
1027:       assertFalse(node1.isIn());
1028:       assertFalse(node1.isEmpty());
1029:       assertFalse(node1.isAdd());
1030:       assertFalse(node1.isSetterDef());
1031:       assertFalse(node1.isInc());
1032:       assertFalse(node1.isWhile());
1033:       assertFalse(node1.isContinue());
1034:       assertFalse(node1.isName());
1035:       assertFalse(node1.isFalse());
1036:       assertFalse(node1.isBreak());
1037:       assertFalse(node1.isCall());
1038:       assertFalse(node1.isGetProp());
1039:       assertFalse(node1.isComma());
1040:       assertFalse(node1.isTypeOf());
1041:       assertFalse(node1.isDec());
1042:       assertFalse(node1.hasChildren());
1043:       assertFalse(node1.isReturn());
1044:       assertFalse(node1.isNot());
1045:       assertFalse(node1.isObjectLit());
1046:       assertTrue(node1.isNumber());
1047:       assertFalse(node1.isString());
1048:       assertFalse(node1.isAnd());
1049:       assertFalse(node1.isAssign());
1050:       assertFalse(node1.isLabelName());
1051:       assertFalse(node1.isWith());
1052:       assertFalse(node1.isInstanceOf());
1053:       assertFalse(node1.isCast());
1054:       assertFalse(node1.isGetElem());
1055:       assertFalse(node1.isExprResult());
1056:       assertFalse(node1.isAssignAdd());
1057:       assertFalse(node1.isOr());
1058:       assertFalse(node1.isLabel());
1059:       assertFalse(node1.isThrow());
1060:       assertFalse(node1.isDo());
1061:       assertFalse(node1.isNew());
1062:       assertFalse(node1.isSwitch());
1063:       assertFalse(node1.isVar());
1064:       assertEquals(39, node1.getType());
1065:       assertFalse(node1.isBlock());
1066:       assertFalse(node1.isHook());
1067:       assertFalse(node1.isStringKey());
1068:       assertFalse(node1.hasMoreThanOneChild());
1069:       assertFalse(node1.isParamList());
1070:       assertFalse(node1.isGetterDef());
1071:       assertFalse(node1.isFor());
1072:       assertFalse(node1.isThis());
1073:       assertFalse(node1.isCase());
1074:       assertEquals(3690511, node1.getSourcePosition());
1075:       assertFalse(node1.hasOneChild());
1076:       assertFalse(node1.isScript());
1077:       
1078:       int int0 = node0.getLineno();
1079:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1080:       assertEquals(43, Node.IS_CONSTANT_NAME);
1081:       assertEquals(36, Node.QUOTED_PROP);
1082:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1083:       assertEquals(53, Node.INPUT_ID);
1084:       assertEquals(4095, Node.COLUMN_MASK);
1085:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1086:       assertEquals(47, Node.IS_DISPATCHER);
1087:       assertEquals(2, Node.POST_FLAG);
1088:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1089:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1090:       assertEquals(40, Node.ORIGINALNAME_PROP);
1091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1092:       assertEquals(50, Node.FREE_CALL);
1093:       assertEquals(46, Node.IS_NAMESPACE);
1094:       assertEquals(54, Node.SLASH_V);
1095:       assertEquals(57, Node.LAST_PROP);
1096:       assertEquals(52, Node.LENGTH);
1097:       assertEquals(49, Node.DIRECT_EVAL);
1098:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1099:       assertEquals(1, Node.DECR_FLAG);
1100:       assertEquals(32, Node.INCRDECR_PROP);
1101:       assertEquals(30, Node.VAR_ARGS_NAME);
1102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1103:       assertEquals(12, Node.COLUMN_BITS);
1104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1105:       assertEquals(37, Node.OPT_ARG_NAME);
1106:       assertEquals(56, Node.CHANGE_TIME);
1107:       assertEquals(48, Node.DIRECTIVES);
1108:       assertEquals(8, Node.FLAG_NO_THROWS);
1109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1110:       assertEquals(29, Node.JSDOC_INFO_PROP);
1111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1112:       assertEquals(39, Node.EMPTY_BLOCK);
1113:       assertEquals(55, Node.INFERRED_FUNCTION);
1114:       assertEquals(57, Node.REFLECTED_OBJECT);
1115:       assertFalse(node0.equals((Object)node1));
1116:       assertSame(node0, node2);
1117:       assertEquals(901, int0);
1118:       assertFalse(node0.isDefaultCase());
1119:       assertEquals(40, node0.getType());
1120:       assertFalse(node0.isVoid());
1121:       assertFalse(node0.isTry());
1122:       assertFalse(node0.isCatch());
1123:       assertFalse(node0.isFunction());
1124:       assertFalse(node0.isRegExp());
1125:       assertEquals(0, node0.getChildCount());
1126:       assertFalse(node0.isDelProp());
1127:       assertFalse(node0.isIf());
1128:       assertEquals(901, node0.getLineno());
1129:       assertFalse(node0.isNull());
1130:       assertFalse(node0.isEmpty());
1131:       assertFalse(node0.isNE());
1132:       assertFalse(node0.isCall());
1133:       assertFalse(node0.isSetterDef());
1134:       assertFalse(node0.isName());
1135:       assertFalse(node0.isIn());
1136:       assertFalse(node0.isAdd());
1137:       assertFalse(node0.isTrue());
1138:       assertFalse(node0.isWhile());
1139:       assertFalse(node0.isInc());
1140:       assertFalse(node0.isReturn());
1141:       assertFalse(node0.isContinue());
1142:       assertFalse(node0.isFalse());
1143:       assertFalse(node0.isTypeOf());
1144:       assertFalse(node0.isDec());
1145:       assertFalse(node0.hasChildren());
1146:       assertFalse(node0.isGetProp());
1147:       assertFalse(node0.isDebugger());
1148:       assertFalse(node0.isObjectLit());
1149:       assertFalse(node0.isNot());
1150:       assertFalse(node0.isWith());
1151:       assertFalse(node0.isScript());
1152:       assertFalse(node0.isExprResult());
1153:       assertFalse(node0.isAnd());
1154:       assertFalse(node0.isInstanceOf());
1155:       assertFalse(node0.isCast());
1156:       assertFalse(node0.isThis());
1157:       assertFalse(node0.isAssign());
1158:       assertFalse(node0.isComma());
1159:       assertFalse(node0.isBreak());
1160:       assertFalse(node0.isThrow());
1161:       assertFalse(node0.isGetElem());
1162:       assertFalse(node0.isOr());
1163:       assertFalse(node0.isSwitch());
1164:       assertFalse(node0.isDo());
1165:       assertFalse(node0.isCase());
1166:       assertTrue(node0.isString());
1167:       assertFalse(node0.isNew());
1168:       assertFalse(node0.isHook());
1169:       assertFalse(node0.isAssignAdd());
1170:       assertFalse(node0.isVar());
1171:       assertEquals(15, node0.getCharno());
1172:       assertFalse(node0.hasMoreThanOneChild());
1173:       assertFalse(node0.isBlock());
1174:       assertFalse(node0.isLabel());
1175:       assertFalse(node0.isGetterDef());
1176:       assertEquals(3690511, node0.getSourcePosition());
1177:       assertFalse(node0.isNumber());
1178:       assertFalse(node0.isFor());
1179:       assertFalse(node0.isStringKey());
1180:       assertFalse(node0.isParamList());
1181:       assertFalse(node0.isLabelName());
1182:       assertFalse(node0.isArrayLit());
1183:       assertFalse(node0.hasOneChild());
1184:       
1185:       boolean boolean1 = node0.hasChildren();
1186:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1187:       assertEquals(43, Node.IS_CONSTANT_NAME);
1188:       assertEquals(36, Node.QUOTED_PROP);
1189:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1190:       assertEquals(53, Node.INPUT_ID);
1191:       assertEquals(4095, Node.COLUMN_MASK);
1192:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1193:       assertEquals(47, Node.IS_DISPATCHER);
1194:       assertEquals(2, Node.POST_FLAG);
1195:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1197:       assertEquals(40, Node.ORIGINALNAME_PROP);
1198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1199:       assertEquals(50, Node.FREE_CALL);
1200:       assertEquals(46, Node.IS_NAMESPACE);
1201:       assertEquals(54, Node.SLASH_V);
1202:       assertEquals(57, Node.LAST_PROP);
1203:       assertEquals(52, Node.LENGTH);
1204:       assertEquals(49, Node.DIRECT_EVAL);
1205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1206:       assertEquals(1, Node.DECR_FLAG);
1207:       assertEquals(32, Node.INCRDECR_PROP);
1208:       assertEquals(30, Node.VAR_ARGS_NAME);
1209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1210:       assertEquals(12, Node.COLUMN_BITS);
1211:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1212:       assertEquals(37, Node.OPT_ARG_NAME);
1213:       assertEquals(56, Node.CHANGE_TIME);
1214:       assertEquals(48, Node.DIRECTIVES);
1215:       assertEquals(8, Node.FLAG_NO_THROWS);
1216:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1217:       assertEquals(29, Node.JSDOC_INFO_PROP);
1218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1219:       assertEquals(39, Node.EMPTY_BLOCK);
1220:       assertEquals(55, Node.INFERRED_FUNCTION);
1221:       assertEquals(57, Node.REFLECTED_OBJECT);
1222:       assertFalse(node0.equals((Object)node1));
1223:       assertTrue(boolean1 == boolean0);
1224:       assertSame(node0, node2);
1225:       assertFalse(boolean1);
1226:       assertFalse(node0.isDefaultCase());
1227:       assertEquals(40, node0.getType());
1228:       assertFalse(node0.isVoid());
1229:       assertFalse(node0.isTry());
1230:       assertFalse(node0.isCatch());
1231:       assertFalse(node0.isFunction());
1232:       assertFalse(node0.isRegExp());
1233:       assertEquals(0, node0.getChildCount());
1234:       assertFalse(node0.isDelProp());
1235:       assertFalse(node0.isIf());
1236:       assertEquals(901, node0.getLineno());
1237:       assertFalse(node0.isNull());
1238:       assertFalse(node0.isEmpty());
1239:       assertFalse(node0.isNE());
1240:       assertFalse(node0.isCall());
1241:       assertFalse(node0.isSetterDef());
1242:       assertFalse(node0.isName());
1243:       assertFalse(node0.isIn());
1244:       assertFalse(node0.isAdd());
1245:       assertFalse(node0.isTrue());
1246:       assertFalse(node0.isWhile());
1247:       assertFalse(node0.isInc());
1248:       assertFalse(node0.isReturn());
1249:       assertFalse(node0.isContinue());
1250:       assertFalse(node0.isFalse());
1251:       assertFalse(node0.isTypeOf());
1252:       assertFalse(node0.isDec());
1253:       assertFalse(node0.hasChildren());
1254:       assertFalse(node0.isGetProp());
1255:       assertFalse(node0.isDebugger());
1256:       assertFalse(node0.isObjectLit());
1257:       assertFalse(node0.isNot());
1258:       assertFalse(node0.isWith());
1259:       assertFalse(node0.isScript());
1260:       assertFalse(node0.isExprResult());
1261:       assertFalse(node0.isAnd());
1262:       assertFalse(node0.isInstanceOf());
1263:       assertFalse(node0.isCast());
1264:       assertFalse(node0.isThis());
1265:       assertFalse(node0.isAssign());
1266:       assertFalse(node0.isComma());
1267:       assertFalse(node0.isBreak());
1268:       assertFalse(node0.isThrow());
1269:       assertFalse(node0.isGetElem());
1270:       assertFalse(node0.isOr());
1271:       assertFalse(node0.isSwitch());
1272:       assertFalse(node0.isDo());
1273:       assertFalse(node0.isCase());
1274:       assertTrue(node0.isString());
1275:       assertFalse(node0.isNew());
1276:       assertFalse(node0.isHook());
1277:       assertFalse(node0.isAssignAdd());
1278:       assertFalse(node0.isVar());
1279:       assertEquals(15, node0.getCharno());
1280:       assertFalse(node0.hasMoreThanOneChild());
1281:       assertFalse(node0.isBlock());
1282:       assertFalse(node0.isLabel());
1283:       assertFalse(node0.isGetterDef());
1284:       assertEquals(3690511, node0.getSourcePosition());
1285:       assertFalse(node0.isNumber());
1286:       assertFalse(node0.isFor());
1287:       assertFalse(node0.isStringKey());
1288:       assertFalse(node0.isParamList());
1289:       assertFalse(node0.isLabelName());
1290:       assertFalse(node0.isArrayLit());
1291:       assertFalse(node0.hasOneChild());
1292:       
1293:       Iterable<Node> iterable0 = node1.children();
1294:       assertEquals(53, Node.INPUT_ID);
1295:       assertEquals(43, Node.IS_CONSTANT_NAME);
1296:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1297:       assertEquals(47, Node.IS_DISPATCHER);
1298:       assertEquals(2, Node.POST_FLAG);
1299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1300:       assertEquals(4095, Node.COLUMN_MASK);
1301:       assertEquals(32, Node.INCRDECR_PROP);
1302:       assertEquals(46, Node.IS_NAMESPACE);
1303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1304:       assertEquals(12, Node.COLUMN_BITS);
1305:       assertEquals(50, Node.FREE_CALL);
1306:       assertEquals(1, Node.DECR_FLAG);
1307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1309:       assertEquals(52, Node.LENGTH);
1310:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1311:       assertEquals(57, Node.REFLECTED_OBJECT);
1312:       assertEquals(54, Node.SLASH_V);
1313:       assertEquals(57, Node.LAST_PROP);
1314:       assertEquals(30, Node.VAR_ARGS_NAME);
1315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1316:       assertEquals(49, Node.DIRECT_EVAL);
1317:       assertEquals(40, Node.ORIGINALNAME_PROP);
1318:       assertEquals(48, Node.DIRECTIVES);
1319:       assertEquals(37, Node.OPT_ARG_NAME);
1320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1321:       assertEquals(56, Node.CHANGE_TIME);
1322:       assertEquals(29, Node.JSDOC_INFO_PROP);
1323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1324:       assertEquals(36, Node.QUOTED_PROP);
1325:       assertEquals(55, Node.INFERRED_FUNCTION);
1326:       assertEquals(8, Node.FLAG_NO_THROWS);
1327:       assertEquals(39, Node.EMPTY_BLOCK);
1328:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1330:       assertFalse(node1.equals((Object)node0));
1331:       assertFalse(node1.equals((Object)node2));
1332:       assertNotNull(iterable0);
1333:       assertFalse(iterable0.contains(node0));
1334:       assertFalse(node1.isVoid());
1335:       assertFalse(node1.isDebugger());
1336:       assertFalse(node1.isTry());
1337:       assertFalse(node1.isFunction());
1338:       assertFalse(node1.isRegExp());
1339:       assertFalse(node1.isDefaultCase());
1340:       assertFalse(node1.isTrue());
1341:       assertFalse(node1.isDelProp());
1342:       assertEquals(901, node1.getLineno());
1343:       assertFalse(node1.isArrayLit());
1344:       assertFalse(node1.isCatch());
1345:       assertEquals(15, node1.getCharno());
1346:       assertEquals(0, node1.getChildCount());
1347:       assertFalse(node1.isIf());
1348:       assertFalse(node1.isNE());
1349:       assertFalse(node1.isNull());
1350:       assertFalse(node1.isIn());
1351:       assertFalse(node1.isEmpty());
1352:       assertFalse(node1.isAdd());
1353:       assertFalse(node1.isSetterDef());
1354:       assertFalse(node1.isInc());
1355:       assertFalse(node1.isWhile());
1356:       assertFalse(node1.isContinue());
1357:       assertFalse(node1.isName());
1358:       assertFalse(node1.isFalse());
1359:       assertFalse(node1.isBreak());
1360:       assertFalse(node1.isCall());
1361:       assertFalse(node1.isGetProp());
1362:       assertFalse(node1.isComma());
1363:       assertFalse(node1.isTypeOf());
1364:       assertFalse(node1.isDec());
1365:       assertFalse(node1.hasChildren());
1366:       assertFalse(node1.isReturn());
1367:       assertFalse(node1.isNot());
1368:       assertFalse(node1.isObjectLit());
1369:       assertTrue(node1.isNumber());
1370:       assertFalse(node1.isString());
1371:       assertFalse(node1.isAnd());
1372:       assertFalse(node1.isAssign());
1373:       assertFalse(node1.isLabelName());
1374:       assertFalse(node1.isWith());
1375:       assertFalse(node1.isInstanceOf());
1376:       assertFalse(node1.isCast());
1377:       assertFalse(node1.isGetElem());
1378:       assertFalse(node1.isExprResult());
1379:       assertFalse(node1.isAssignAdd());
1380:       assertFalse(node1.isOr());
1381:       assertFalse(node1.isLabel());
1382:       assertFalse(node1.isThrow());
1383:       assertFalse(node1.isDo());
1384:       assertFalse(node1.isNew());
1385:       assertFalse(node1.isSwitch());
1386:       assertFalse(node1.isVar());
1387:       assertEquals(39, node1.getType());
1388:       assertFalse(node1.isBlock());
1389:       assertFalse(node1.isHook());
1390:       assertFalse(node1.isStringKey());
1391:       assertFalse(node1.hasMoreThanOneChild());
1392:       assertFalse(node1.isParamList());
1393:       assertFalse(node1.isGetterDef());
1394:       assertFalse(node1.isFor());
1395:       assertFalse(node1.isThis());
1396:       assertFalse(node1.isCase());
1397:       assertEquals(3690511, node1.getSourcePosition());
1398:       assertFalse(node1.hasOneChild());
1399:       assertFalse(node1.isScript());
1400:       
1401:       Node node3 = new Node(49, 1, 2);
1402:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1403:       assertEquals(54, Node.SLASH_V);
1404:       assertEquals(52, Node.LENGTH);
1405:       assertEquals(30, Node.VAR_ARGS_NAME);
1406:       assertEquals(12, Node.COLUMN_BITS);
1407:       assertEquals(32, Node.INCRDECR_PROP);
1408:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1409:       assertEquals(57, Node.LAST_PROP);
1410:       assertEquals(1, Node.DECR_FLAG);
1411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1412:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1413:       assertEquals(47, Node.IS_DISPATCHER);
1414:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1415:       assertEquals(2, Node.POST_FLAG);
1416:       assertEquals(50, Node.FREE_CALL);
1417:       assertEquals(40, Node.ORIGINALNAME_PROP);
1418:       assertEquals(46, Node.IS_NAMESPACE);
1419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1420:       assertEquals(43, Node.IS_CONSTANT_NAME);
1421:       assertEquals(53, Node.INPUT_ID);
1422:       assertEquals(36, Node.QUOTED_PROP);
1423:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1424:       assertEquals(55, Node.INFERRED_FUNCTION);
1425:       assertEquals(29, Node.JSDOC_INFO_PROP);
1426:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1427:       assertEquals(37, Node.OPT_ARG_NAME);
1428:       assertEquals(8, Node.FLAG_NO_THROWS);
1429:       assertEquals(39, Node.EMPTY_BLOCK);
1430:       assertEquals(56, Node.CHANGE_TIME);
1431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1432:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1433:       assertEquals(4095, Node.COLUMN_MASK);
1434:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1435:       assertEquals(57, Node.REFLECTED_OBJECT);
1436:       assertEquals(48, Node.DIRECTIVES);
1437:       assertEquals(49, Node.DIRECT_EVAL);
1438:       assertFalse(node3.equals((Object)node1));
1439:       assertFalse(node3.equals((Object)node2));
1440:       assertFalse(node3.equals((Object)node0));
1441:       assertNotNull(node3);
1442:       assertFalse(node3.isAdd());
1443:       assertFalse(node3.hasMoreThanOneChild());
1444:       assertFalse(node3.isContinue());
1445:       assertFalse(node3.isVar());
1446:       assertFalse(node3.isReturn());
1447:       assertFalse(node3.isLabel());
1448:       assertFalse(node3.isBlock());
1449:       assertFalse(node3.isNew());
1450:       assertFalse(node3.isDo());
1451:       assertFalse(node3.isWhile());
1452:       assertFalse(node3.isAssignAdd());
1453:       assertFalse(node3.isDec());
1454:       assertFalse(node3.isTypeOf());
1455:       assertFalse(node3.isNull());
1456:       assertFalse(node3.isSetterDef());
1457:       assertFalse(node3.hasChildren());
1458:       assertFalse(node3.isGetElem());
1459:       assertFalse(node3.isAssign());
1460:       assertFalse(node3.isCall());
1461:       assertFalse(node3.isOr());
1462:       assertFalse(node3.isName());
1463:       assertFalse(node3.isDebugger());
1464:       assertFalse(node3.isExprResult());
1465:       assertFalse(node3.isNot());
1466:       assertFalse(node3.isObjectLit());
1467:       assertFalse(node3.isFunction());
1468:       assertFalse(node3.isGetProp());
1469:       assertFalse(node3.isFalse());
1470:       assertEquals(49, node3.getType());
1471:       assertFalse(node3.isCast());
1472:       assertFalse(node3.isAnd());
1473:       assertFalse(node3.isInc());
1474:       assertFalse(node3.isCase());
1475:       assertFalse(node3.isString());
1476:       assertFalse(node3.isHook());
1477:       assertFalse(node3.isDelProp());
1478:       assertFalse(node3.isComma());
1479:       assertFalse(node3.isThis());
1480:       assertFalse(node3.isBreak());
1481:       assertEquals(1, node3.getLineno());
1482:       assertFalse(node3.isEmpty());
1483:       assertFalse(node3.isIn());
1484:       assertFalse(node3.isInstanceOf());
1485:       assertEquals(4098, node3.getSourcePosition());
1486:       assertFalse(node3.isVoid());
1487:       assertFalse(node3.isTrue());
1488:       assertFalse(node3.isNE());
1489:       assertFalse(node3.isIf());
1490:       assertFalse(node3.isDefaultCase());
1491:       assertEquals(2, node3.getCharno());
1492:       assertFalse(node3.isScript());
1493:       assertFalse(node3.isRegExp());
1494:       assertFalse(node3.isCatch());
1495:       assertFalse(node3.isWith());
1496:       assertFalse(node3.hasOneChild());
1497:       assertEquals(0, node3.getChildCount());
1498:       assertFalse(node3.isFor());
1499:       assertFalse(node3.isTry());
1500:       assertFalse(node3.isNumber());
1501:       assertFalse(node3.isGetterDef());
1502:       assertTrue(node3.isThrow());
1503:       assertFalse(node3.isArrayLit());
1504:       assertFalse(node3.isStringKey());
1505:       assertFalse(node3.isLabelName());
1506:       assertFalse(node3.isParamList());
1507:       assertFalse(node3.isSwitch());
1508:       
1509:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
1510:       assertNotNull(simpleErrorReporter0);
1511:       
1512:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
1513:       assertNotNull(jSTypeRegistry0);
1514:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1515:       
1516:       Vector<JSType> vector0 = new Vector<JSType>();
1517:       assertNotNull(vector0);
1518:       assertTrue(vector0.isEmpty());
1519:       assertEquals(0, vector0.size());
1520:       assertEquals(10, vector0.capacity());
1521:       assertEquals("[]", vector0.toString());
1522:       
1523:       Node node4 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
1524:       assertEquals(55, Node.INFERRED_FUNCTION);
1525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1526:       assertEquals(8, Node.FLAG_NO_THROWS);
1527:       assertEquals(4095, Node.COLUMN_MASK);
1528:       assertEquals(39, Node.EMPTY_BLOCK);
1529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1530:       assertEquals(40, Node.ORIGINALNAME_PROP);
1531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1532:       assertEquals(50, Node.FREE_CALL);
1533:       assertEquals(43, Node.IS_CONSTANT_NAME);
1534:       assertEquals(54, Node.SLASH_V);
1535:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1536:       assertEquals(12, Node.COLUMN_BITS);
1537:       assertEquals(32, Node.INCRDECR_PROP);
1538:       assertEquals(46, Node.IS_NAMESPACE);
1539:       assertEquals(30, Node.VAR_ARGS_NAME);
1540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1541:       assertEquals(2, Node.POST_FLAG);
1542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1543:       assertEquals(47, Node.IS_DISPATCHER);
1544:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1545:       assertEquals(1, Node.DECR_FLAG);
1546:       assertEquals(57, Node.LAST_PROP);
1547:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1548:       assertEquals(57, Node.REFLECTED_OBJECT);
1549:       assertEquals(53, Node.INPUT_ID);
1550:       assertEquals(29, Node.JSDOC_INFO_PROP);
1551:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1552:       assertEquals(52, Node.LENGTH);
1553:       assertEquals(56, Node.CHANGE_TIME);
1554:       assertEquals(36, Node.QUOTED_PROP);
1555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1556:       assertEquals(37, Node.OPT_ARG_NAME);
1557:       assertEquals(48, Node.DIRECTIVES);
1558:       assertEquals(49, Node.DIRECT_EVAL);
1559:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1560:       assertFalse(node4.equals((Object)node2));
1561:       assertFalse(node4.equals((Object)node0));
1562:       assertFalse(node4.equals((Object)node1));
1563:       assertFalse(node4.equals((Object)node3));
1564:       assertNotNull(node4);
1565:       assertNotSame(node4, node3);
1566:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1567:       assertTrue(vector0.isEmpty());
1568:       assertEquals(0, vector0.size());
1569:       assertEquals(10, vector0.capacity());
1570:       assertEquals("[]", vector0.toString());
1571:       assertTrue(node4.isParamList());
1572:       assertEquals(83, node4.getType());
1573:       assertFalse(node4.isGetProp());
1574:       assertFalse(node4.isInstanceOf());
1575:       assertFalse(node4.isWith());
1576:       assertFalse(node4.isFalse());
1577:       assertFalse(node4.isComma());
1578:       assertFalse(node4.isThis());
1579:       assertFalse(node4.isHook());
1580:       assertFalse(node4.isThrow());
1581:       assertFalse(node4.isInc());
1582:       assertFalse(node4.isGetElem());
1583:       assertFalse(node4.isExprResult());
1584:       assertFalse(node4.isBreak());
1585:       assertFalse(node4.isReturn());
1586:       assertFalse(node4.isIn());
1587:       assertFalse(node4.isContinue());
1588:       assertFalse(node4.isAssign());
1589:       assertFalse(node4.isWhile());
1590:       assertFalse(node4.isDec());
1591:       assertFalse(node4.isTypeOf());
1592:       assertFalse(node4.hasChildren());
1593:       assertFalse(node4.isFunction());
1594:       assertFalse(node4.isCast());
1595:       assertFalse(node4.isNot());
1596:       assertFalse(node4.isString());
1597:       assertFalse(node4.isObjectLit());
1598:       assertFalse(node4.isDebugger());
1599:       assertEquals((-1), node4.getSourcePosition());
1600:       assertFalse(node4.isAnd());
1601:       assertEquals(0, node4.getChildCount());
1602:       assertFalse(node4.isCatch());
1603:       assertFalse(node4.isSetterDef());
1604:       assertFalse(node4.isDefaultCase());
1605:       assertFalse(node4.isRegExp());
1606:       assertFalse(node4.isVar());
1607:       assertFalse(node4.isNew());
1608:       assertFalse(node4.isVoid());
1609:       assertFalse(node4.isCall());
1610:       assertFalse(node4.isAdd());
1611:       assertFalse(node4.isEmpty());
1612:       assertFalse(node4.isIf());
1613:       assertFalse(node4.isName());
1614:       assertFalse(node4.isDelProp());
1615:       assertFalse(node4.isNE());
1616:       assertFalse(node4.isNull());
1617:       assertFalse(node4.isTrue());
1618:       assertFalse(node4.isAssignAdd());
1619:       assertEquals((-1), node4.getLineno());
1620:       assertFalse(node4.isOr());
1621:       assertFalse(node4.isLabel());
1622:       assertFalse(node4.hasMoreThanOneChild());
1623:       assertFalse(node4.isDo());
1624:       assertFalse(node4.isCase());
1625:       assertFalse(node4.isBlock());
1626:       assertFalse(node4.isFor());
1627:       assertFalse(node4.hasOneChild());
1628:       assertFalse(node4.isTry());
1629:       assertFalse(node4.isArrayLit());
1630:       assertFalse(node4.isScript());
1631:       assertFalse(node4.isLabelName());
1632:       assertFalse(node4.isNumber());
1633:       assertFalse(node4.isGetterDef());
1634:       assertFalse(node4.isSwitch());
1635:       assertEquals((-1), node4.getCharno());
1636:       assertFalse(node4.isStringKey());
1637:       
1638:       boolean boolean2 = node4.isRegExp();
1639:       assertEquals(55, Node.INFERRED_FUNCTION);
1640:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1641:       assertEquals(8, Node.FLAG_NO_THROWS);
1642:       assertEquals(4095, Node.COLUMN_MASK);
1643:       assertEquals(39, Node.EMPTY_BLOCK);
1644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1645:       assertEquals(40, Node.ORIGINALNAME_PROP);
1646:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1647:       assertEquals(50, Node.FREE_CALL);
1648:       assertEquals(43, Node.IS_CONSTANT_NAME);
1649:       assertEquals(54, Node.SLASH_V);
1650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1651:       assertEquals(12, Node.COLUMN_BITS);
1652:       assertEquals(32, Node.INCRDECR_PROP);
1653:       assertEquals(46, Node.IS_NAMESPACE);
1654:       assertEquals(30, Node.VAR_ARGS_NAME);
1655:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1656:       assertEquals(2, Node.POST_FLAG);
1657:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1658:       assertEquals(47, Node.IS_DISPATCHER);
1659:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1660:       assertEquals(1, Node.DECR_FLAG);
1661:       assertEquals(57, Node.LAST_PROP);
1662:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1663:       assertEquals(57, Node.REFLECTED_OBJECT);
1664:       assertEquals(53, Node.INPUT_ID);
1665:       assertEquals(29, Node.JSDOC_INFO_PROP);
1666:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1667:       assertEquals(52, Node.LENGTH);
1668:       assertEquals(56, Node.CHANGE_TIME);
1669:       assertEquals(36, Node.QUOTED_PROP);
1670:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1671:       assertEquals(37, Node.OPT_ARG_NAME);
1672:       assertEquals(48, Node.DIRECTIVES);
1673:       assertEquals(49, Node.DIRECT_EVAL);
1674:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1675:       assertFalse(node4.equals((Object)node2));
1676:       assertFalse(node4.equals((Object)node0));
1677:       assertFalse(node4.equals((Object)node1));
1678:       assertFalse(node4.equals((Object)node3));
1679:       assertTrue(boolean2 == boolean1);
1680:       assertTrue(boolean2 == boolean0);
1681:       assertNotSame(node4, node3);
1682:       assertFalse(boolean2);
1683:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1684:       assertTrue(vector0.isEmpty());
1685:       assertEquals(0, vector0.size());
1686:       assertEquals(10, vector0.capacity());
1687:       assertEquals("[]", vector0.toString());
1688:       assertTrue(node4.isParamList());
1689:       assertEquals(83, node4.getType());
1690:       assertFalse(node4.isGetProp());
1691:       assertFalse(node4.isInstanceOf());
1692:       assertFalse(node4.isWith());
1693:       assertFalse(node4.isFalse());
1694:       assertFalse(node4.isComma());
1695:       assertFalse(node4.isThis());
1696:       assertFalse(node4.isHook());
1697:       assertFalse(node4.isThrow());
1698:       assertFalse(node4.isInc());
1699:       assertFalse(node4.isGetElem());
1700:       assertFalse(node4.isExprResult());
1701:       assertFalse(node4.isBreak());
1702:       assertFalse(node4.isReturn());
1703:       assertFalse(node4.isIn());
1704:       assertFalse(node4.isContinue());
1705:       assertFalse(node4.isAssign());
1706:       assertFalse(node4.isWhile());
1707:       assertFalse(node4.isDec());
1708:       assertFalse(node4.isTypeOf());
1709:       assertFalse(node4.hasChildren());
1710:       assertFalse(node4.isFunction());
1711:       assertFalse(node4.isCast());
1712:       assertFalse(node4.isNot());
1713:       assertFalse(node4.isString());
1714:       assertFalse(node4.isObjectLit());
1715:       assertFalse(node4.isDebugger());
1716:       assertEquals((-1), node4.getSourcePosition());
1717:       assertFalse(node4.isAnd());
1718:       assertEquals(0, node4.getChildCount());
1719:       assertFalse(node4.isCatch());
1720:       assertFalse(node4.isSetterDef());
1721:       assertFalse(node4.isDefaultCase());
1722:       assertFalse(node4.isRegExp());
1723:       assertFalse(node4.isVar());
1724:       assertFalse(node4.isNew());
1725:       assertFalse(node4.isVoid());
1726:       assertFalse(node4.isCall());
1727:       assertFalse(node4.isAdd());
1728:       assertFalse(node4.isEmpty());
1729:       assertFalse(node4.isIf());
1730:       assertFalse(node4.isName());
1731:       assertFalse(node4.isDelProp());
1732:       assertFalse(node4.isNE());
1733:       assertFalse(node4.isNull());
1734:       assertFalse(node4.isTrue());
1735:       assertFalse(node4.isAssignAdd());
1736:       assertEquals((-1), node4.getLineno());
1737:       assertFalse(node4.isOr());
1738:       assertFalse(node4.isLabel());
1739:       assertFalse(node4.hasMoreThanOneChild());
1740:       assertFalse(node4.isDo());
1741:       assertFalse(node4.isCase());
1742:       assertFalse(node4.isBlock());
1743:       assertFalse(node4.isFor());
1744:       assertFalse(node4.hasOneChild());
1745:       assertFalse(node4.isTry());
1746:       assertFalse(node4.isArrayLit());
1747:       assertFalse(node4.isScript());
1748:       assertFalse(node4.isLabelName());
1749:       assertFalse(node4.isNumber());
1750:       assertFalse(node4.isGetterDef());
1751:       assertFalse(node4.isSwitch());
1752:       assertEquals((-1), node4.getCharno());
1753:       assertFalse(node4.isStringKey());
1754:       
1755:       Node node5 = new Node(37, node3);
1756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1757:       assertEquals(53, Node.INPUT_ID);
1758:       assertEquals(43, Node.IS_CONSTANT_NAME);
1759:       assertEquals(36, Node.QUOTED_PROP);
1760:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1761:       assertEquals(29, Node.JSDOC_INFO_PROP);
1762:       assertEquals(55, Node.INFERRED_FUNCTION);
1763:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1764:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1765:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1766:       assertEquals(46, Node.IS_NAMESPACE);
1767:       assertEquals(47, Node.IS_DISPATCHER);
1768:       assertEquals(2, Node.POST_FLAG);
1769:       assertEquals(50, Node.FREE_CALL);
1770:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1771:       assertEquals(40, Node.ORIGINALNAME_PROP);
1772:       assertEquals(54, Node.SLASH_V);
1773:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1774:       assertEquals(52, Node.LENGTH);
1775:       assertEquals(57, Node.REFLECTED_OBJECT);
1776:       assertEquals(30, Node.VAR_ARGS_NAME);
1777:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1778:       assertEquals(12, Node.COLUMN_BITS);
1779:       assertEquals(57, Node.LAST_PROP);
1780:       assertEquals(32, Node.INCRDECR_PROP);
1781:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1782:       assertEquals(1, Node.DECR_FLAG);
1783:       assertEquals(48, Node.DIRECTIVES);
1784:       assertEquals(8, Node.FLAG_NO_THROWS);
1785:       assertEquals(39, Node.EMPTY_BLOCK);
1786:       assertEquals(56, Node.CHANGE_TIME);
1787:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1788:       assertEquals(4095, Node.COLUMN_MASK);
1789:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1790:       assertEquals(49, Node.DIRECT_EVAL);
1791:       assertEquals(37, Node.OPT_ARG_NAME);
1792:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1793:       assertEquals(54, Node.SLASH_V);
1794:       assertEquals(52, Node.LENGTH);
1795:       assertEquals(30, Node.VAR_ARGS_NAME);
1796:       assertEquals(12, Node.COLUMN_BITS);
1797:       assertEquals(32, Node.INCRDECR_PROP);
1798:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1799:       assertEquals(57, Node.LAST_PROP);
1800:       assertEquals(1, Node.DECR_FLAG);
1801:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1802:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1803:       assertEquals(47, Node.IS_DISPATCHER);
1804:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1805:       assertEquals(2, Node.POST_FLAG);
1806:       assertEquals(50, Node.FREE_CALL);
1807:       assertEquals(40, Node.ORIGINALNAME_PROP);
1808:       assertEquals(46, Node.IS_NAMESPACE);
1809:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1810:       assertEquals(43, Node.IS_CONSTANT_NAME);
1811:       assertEquals(53, Node.INPUT_ID);
1812:       assertEquals(36, Node.QUOTED_PROP);
1813:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1814:       assertEquals(55, Node.INFERRED_FUNCTION);
1815:       assertEquals(29, Node.JSDOC_INFO_PROP);
1816:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1817:       assertEquals(37, Node.OPT_ARG_NAME);
1818:       assertEquals(8, Node.FLAG_NO_THROWS);
1819:       assertEquals(39, Node.EMPTY_BLOCK);
1820:       assertEquals(56, Node.CHANGE_TIME);
1821:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1822:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1823:       assertEquals(4095, Node.COLUMN_MASK);
1824:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1825:       assertEquals(57, Node.REFLECTED_OBJECT);
1826:       assertEquals(48, Node.DIRECTIVES);
1827:       assertEquals(49, Node.DIRECT_EVAL);
1828:       assertFalse(node5.equals((Object)node3));
1829:       assertFalse(node5.equals((Object)node1));
1830:       assertFalse(node5.equals((Object)node4));
1831:       assertFalse(node5.equals((Object)node2));
1832:       assertFalse(node5.equals((Object)node0));
1833:       assertFalse(node3.equals((Object)node1));
1834:       assertFalse(node3.equals((Object)node2));
1835:       assertFalse(node3.equals((Object)node4));
1836:       assertFalse(node3.equals((Object)node0));
1837:       assertNotNull(node5);
1838:       assertFalse(node5.isScript());
1839:       assertFalse(node5.isExprResult());
1840:       assertFalse(node5.isNot());
1841:       assertFalse(node5.isObjectLit());
1842:       assertFalse(node5.isWith());
1843:       assertFalse(node5.isTypeOf());
1844:       assertTrue(node5.isCall());
1845:       assertFalse(node5.isDec());
1846:       assertFalse(node5.isComma());
1847:       assertFalse(node5.isBreak());
1848:       
1849:       Node node6 = new Node(22, node1, node5);
1850:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1851:       assertEquals(53, Node.INPUT_ID);
1852:       assertEquals(43, Node.IS_CONSTANT_NAME);
1853:       assertEquals(36, Node.QUOTED_PROP);
1854:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1855:       assertEquals(29, Node.JSDOC_INFO_PROP);
1856:       assertEquals(55, Node.INFERRED_FUNCTION);
1857:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1858:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1859:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1860:       assertEquals(46, Node.IS_NAMESPACE);
1861:       assertEquals(47, Node.IS_DISPATCHER);
1862:       assertEquals(2, Node.POST_FLAG);
1863:       assertEquals(50, Node.FREE_CALL);
1864:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1865:       assertEquals(40, Node.ORIGINALNAME_PROP);
1866:       assertEquals(54, Node.SLASH_V);
1867:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1868:       assertEquals(52, Node.LENGTH);
1869:       assertEquals(57, Node.REFLECTED_OBJECT);
1870:       assertEquals(30, Node.VAR_ARGS_NAME);
1871:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1872:       assertEquals(12, Node.COLUMN_BITS);
1873:       assertEquals(57, Node.LAST_PROP);
1874:       assertEquals(32, Node.INCRDECR_PROP);
1875:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1876:       assertEquals(1, Node.DECR_FLAG);
1877:       assertEquals(48, Node.DIRECTIVES);
1878:       assertEquals(8, Node.FLAG_NO_THROWS);
1879:       assertEquals(39, Node.EMPTY_BLOCK);
1880:       assertEquals(56, Node.CHANGE_TIME);
1881:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1882:       assertEquals(4095, Node.COLUMN_MASK);
1883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1884:       assertEquals(49, Node.DIRECT_EVAL);
1885:       assertEquals(37, Node.OPT_ARG_NAME);
1886:       assertEquals(8, Node.FLAG_NO_THROWS);
1887:       assertEquals(39, Node.EMPTY_BLOCK);
1888:       assertEquals(48, Node.DIRECTIVES);
1889:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1890:       assertEquals(4095, Node.COLUMN_MASK);
1891:       assertEquals(55, Node.INFERRED_FUNCTION);
1892:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1893:       assertEquals(40, Node.ORIGINALNAME_PROP);
1894:       assertEquals(50, Node.FREE_CALL);
1895:       assertEquals(43, Node.IS_CONSTANT_NAME);
1896:       assertEquals(57, Node.REFLECTED_OBJECT);
1897:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1898:       assertEquals(54, Node.SLASH_V);
1899:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1900:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1901:       assertEquals(1, Node.DECR_FLAG);
1902:       assertEquals(32, Node.INCRDECR_PROP);
1903:       assertEquals(12, Node.COLUMN_BITS);
1904:       assertEquals(37, Node.OPT_ARG_NAME);
1905:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1906:       assertEquals(2, Node.POST_FLAG);
1907:       assertEquals(29, Node.JSDOC_INFO_PROP);
1908:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1909:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1910:       assertEquals(49, Node.DIRECT_EVAL);
1911:       assertEquals(46, Node.IS_NAMESPACE);
1912:       assertEquals(56, Node.CHANGE_TIME);
1913:       assertEquals(36, Node.QUOTED_PROP);
1914:       assertEquals(52, Node.LENGTH);
1915:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1916:       assertEquals(53, Node.INPUT_ID);
1917:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1918:       assertEquals(30, Node.VAR_ARGS_NAME);
1919:       assertEquals(57, Node.LAST_PROP);
1920:       assertEquals(47, Node.IS_DISPATCHER);
1921:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1922:       assertEquals(53, Node.INPUT_ID);
1923:       assertEquals(43, Node.IS_CONSTANT_NAME);
1924:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1925:       assertEquals(47, Node.IS_DISPATCHER);
1926:       assertEquals(2, Node.POST_FLAG);
1927:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1928:       assertEquals(4095, Node.COLUMN_MASK);
1929:       assertEquals(32, Node.INCRDECR_PROP);
1930:       assertEquals(46, Node.IS_NAMESPACE);
1931:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1932:       assertEquals(12, Node.COLUMN_BITS);
1933:       assertEquals(50, Node.FREE_CALL);
1934:       assertEquals(1, Node.DECR_FLAG);
1935:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1937:       assertEquals(52, Node.LENGTH);
1938:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1939:       assertEquals(57, Node.REFLECTED_OBJECT);
1940:       assertEquals(54, Node.SLASH_V);
1941:       assertEquals(57, Node.LAST_PROP);
1942:       assertEquals(30, Node.VAR_ARGS_NAME);
1943:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1944:       assertEquals(49, Node.DIRECT_EVAL);
1945:       assertEquals(40, Node.ORIGINALNAME_PROP);
1946:       assertEquals(48, Node.DIRECTIVES);
1947:       assertEquals(37, Node.OPT_ARG_NAME);
1948:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1949:       assertEquals(56, Node.CHANGE_TIME);
1950:       assertEquals(29, Node.JSDOC_INFO_PROP);
1951:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1952:       assertEquals(36, Node.QUOTED_PROP);
1953:       assertEquals(55, Node.INFERRED_FUNCTION);
1954:       assertEquals(8, Node.FLAG_NO_THROWS);
1955:       assertEquals(39, Node.EMPTY_BLOCK);
1956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1957:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1958:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1959:       assertEquals(54, Node.SLASH_V);
1960:       assertEquals(52, Node.LENGTH);
1961:       assertEquals(30, Node.VAR_ARGS_NAME);
1962:       assertEquals(12, Node.COLUMN_BITS);
1963:       assertEquals(32, Node.INCRDECR_PROP);
1964:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1965:       assertEquals(57, Node.LAST_PROP);
1966:       assertEquals(1, Node.DECR_FLAG);
1967:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1968:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1969:       assertEquals(47, Node.IS_DISPATCHER);
1970:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1971:       assertEquals(2, Node.POST_FLAG);
1972:       assertEquals(50, Node.FREE_CALL);
1973:       assertEquals(40, Node.ORIGINALNAME_PROP);
1974:       assertEquals(46, Node.IS_NAMESPACE);
1975:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1976:       assertEquals(43, Node.IS_CONSTANT_NAME);
1977:       assertEquals(53, Node.INPUT_ID);
1978:       assertEquals(36, Node.QUOTED_PROP);
1979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1980:       assertEquals(55, Node.INFERRED_FUNCTION);
1981:       assertEquals(29, Node.JSDOC_INFO_PROP);
1982:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1983:       assertEquals(37, Node.OPT_ARG_NAME);
1984:       assertEquals(8, Node.FLAG_NO_THROWS);
1985:       assertEquals(39, Node.EMPTY_BLOCK);
1986:       assertEquals(56, Node.CHANGE_TIME);
1987:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1988:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1989:       assertEquals(4095, Node.COLUMN_MASK);
1990:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1991:       assertEquals(57, Node.REFLECTED_OBJECT);
1992:       assertEquals(48, Node.DIRECTIVES);
1993:       assertEquals(49, Node.DIRECT_EVAL);
1994:       assertFalse(node5.equals((Object)node3));
1995:       assertFalse(node5.equals((Object)node1));
1996:       assertFalse(node5.equals((Object)node4));
1997:       assertFalse(node5.equals((Object)node2));
1998:       assertFalse(node5.equals((Object)node0));
1999:       assertFalse(node6.equals((Object)node0));
2000:       assertFalse(node6.equals((Object)node4));
2001:       assertFalse(node6.equals((Object)node5));
2002:       assertFalse(node6.equals((Object)node2));
2003:       assertFalse(node6.equals((Object)node1));
2004:       assertFalse(node6.equals((Object)node3));
2005:       assertFalse(node1.equals((Object)node4));
2006:       assertFalse(node1.equals((Object)node5));
2007:       assertFalse(node1.equals((Object)node0));
2008:       assertFalse(node1.equals((Object)node3));
2009:       assertFalse(node1.equals((Object)node2));
2010:       assertFalse(node3.equals((Object)node1));
2011:       assertFalse(node3.equals((Object)node2));
2012:       assertFalse(node3.equals((Object)node4));
2013:       assertFalse(node3.equals((Object)node0));
2014:       assertFalse(node3.equals((Object)node5));
2015:       assertNotNull(node6);
2016:       
2017:       boolean boolean3 = node6.isQualifiedName();
2018:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2019:       assertEquals(53, Node.INPUT_ID);
2020:       assertEquals(43, Node.IS_CONSTANT_NAME);
2021:       assertEquals(36, Node.QUOTED_PROP);
2022:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2023:       assertEquals(29, Node.JSDOC_INFO_PROP);
2024:       assertEquals(55, Node.INFERRED_FUNCTION);
2025:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2026:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2027:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2028:       assertEquals(46, Node.IS_NAMESPACE);
2029:       assertEquals(47, Node.IS_DISPATCHER);
2030:       assertEquals(2, Node.POST_FLAG);
2031:       assertEquals(50, Node.FREE_CALL);
2032:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2033:       assertEquals(40, Node.ORIGINALNAME_PROP);
2034:       assertEquals(54, Node.SLASH_V);
2035:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2036:       assertEquals(52, Node.LENGTH);
2037:       assertEquals(57, Node.REFLECTED_OBJECT);
2038:       assertEquals(30, Node.VAR_ARGS_NAME);
2039:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2040:       assertEquals(12, Node.COLUMN_BITS);
2041:       assertEquals(57, Node.LAST_PROP);
2042:       assertEquals(32, Node.INCRDECR_PROP);
2043:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2044:       assertEquals(1, Node.DECR_FLAG);
2045:       assertEquals(48, Node.DIRECTIVES);
2046:       assertEquals(8, Node.FLAG_NO_THROWS);
2047:       assertEquals(39, Node.EMPTY_BLOCK);
2048:       assertEquals(56, Node.CHANGE_TIME);
2049:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2050:       assertEquals(4095, Node.COLUMN_MASK);
2051:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2052:       assertEquals(49, Node.DIRECT_EVAL);
2053:       assertEquals(37, Node.OPT_ARG_NAME);
2054:       assertEquals(8, Node.FLAG_NO_THROWS);
2055:       assertEquals(39, Node.EMPTY_BLOCK);
2056:       assertEquals(48, Node.DIRECTIVES);
2057:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2058:       assertEquals(4095, Node.COLUMN_MASK);
2059:       assertEquals(55, Node.INFERRED_FUNCTION);
2060:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2061:       assertEquals(40, Node.ORIGINALNAME_PROP);
2062:       assertEquals(50, Node.FREE_CALL);
2063:       assertEquals(43, Node.IS_CONSTANT_NAME);
2064:       assertEquals(57, Node.REFLECTED_OBJECT);
2065:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2066:       assertEquals(54, Node.SLASH_V);
2067:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2068:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2069:       assertEquals(1, Node.DECR_FLAG);
2070:       assertEquals(32, Node.INCRDECR_PROP);
2071:       assertEquals(12, Node.COLUMN_BITS);
2072:       assertEquals(37, Node.OPT_ARG_NAME);
2073:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2074:       assertEquals(2, Node.POST_FLAG);
2075:       assertEquals(29, Node.JSDOC_INFO_PROP);
2076:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2078:       assertEquals(49, Node.DIRECT_EVAL);
2079:       assertEquals(46, Node.IS_NAMESPACE);
2080:       assertEquals(56, Node.CHANGE_TIME);
2081:       assertEquals(36, Node.QUOTED_PROP);
2082:       assertEquals(52, Node.LENGTH);
2083:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2084:       assertEquals(53, Node.INPUT_ID);
2085:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2086:       assertEquals(30, Node.VAR_ARGS_NAME);
2087:       assertEquals(57, Node.LAST_PROP);
2088:       assertEquals(47, Node.IS_DISPATCHER);
2089:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2090:       assertEquals(53, Node.INPUT_ID);
2091:       assertEquals(43, Node.IS_CONSTANT_NAME);
2092:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2093:       assertEquals(47, Node.IS_DISPATCHER);
2094:       assertEquals(2, Node.POST_FLAG);
2095:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2096:       assertEquals(4095, Node.COLUMN_MASK);
2097:       assertEquals(32, Node.INCRDECR_PROP);
2098:       assertEquals(46, Node.IS_NAMESPACE);
2099:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2100:       assertEquals(12, Node.COLUMN_BITS);
2101:       assertEquals(50, Node.FREE_CALL);
2102:       assertEquals(1, Node.DECR_FLAG);
2103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2105:       assertEquals(52, Node.LENGTH);
2106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2107:       assertEquals(57, Node.REFLECTED_OBJECT);
2108:       assertEquals(54, Node.SLASH_V);
2109:       assertEquals(57, Node.LAST_PROP);
2110:       assertEquals(30, Node.VAR_ARGS_NAME);
2111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2112:       assertEquals(49, Node.DIRECT_EVAL);
2113:       assertEquals(40, Node.ORIGINALNAME_PROP);
2114:       assertEquals(48, Node.DIRECTIVES);
2115:       assertEquals(37, Node.OPT_ARG_NAME);
2116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2117:       assertEquals(56, Node.CHANGE_TIME);
2118:       assertEquals(29, Node.JSDOC_INFO_PROP);
2119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2120:       assertEquals(36, Node.QUOTED_PROP);
2121:       assertEquals(55, Node.INFERRED_FUNCTION);
2122:       assertEquals(8, Node.FLAG_NO_THROWS);
2123:       assertEquals(39, Node.EMPTY_BLOCK);
2124:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2125:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2126:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2127:       assertEquals(54, Node.SLASH_V);
2128:       assertEquals(52, Node.LENGTH);
2129:       assertEquals(30, Node.VAR_ARGS_NAME);
2130:       assertEquals(12, Node.COLUMN_BITS);
2131:       assertEquals(32, Node.INCRDECR_PROP);
2132:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2133:       assertEquals(57, Node.LAST_PROP);
2134:       assertEquals(1, Node.DECR_FLAG);
2135:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2137:       assertEquals(47, Node.IS_DISPATCHER);
2138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2139:       assertEquals(2, Node.POST_FLAG);
2140:       assertEquals(50, Node.FREE_CALL);
2141:       assertEquals(40, Node.ORIGINALNAME_PROP);
2142:       assertEquals(46, Node.IS_NAMESPACE);
2143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2144:       assertEquals(43, Node.IS_CONSTANT_NAME);
2145:       assertEquals(53, Node.INPUT_ID);
2146:       assertEquals(36, Node.QUOTED_PROP);
2147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2148:       assertEquals(55, Node.INFERRED_FUNCTION);
2149:       assertEquals(29, Node.JSDOC_INFO_PROP);
2150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2151:       assertEquals(37, Node.OPT_ARG_NAME);
2152:       assertEquals(8, Node.FLAG_NO_THROWS);
2153:       assertEquals(39, Node.EMPTY_BLOCK);
2154:       assertEquals(56, Node.CHANGE_TIME);
2155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2156:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2157:       assertEquals(4095, Node.COLUMN_MASK);
2158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2159:       assertEquals(57, Node.REFLECTED_OBJECT);
2160:       assertEquals(48, Node.DIRECTIVES);
2161:       assertEquals(49, Node.DIRECT_EVAL);
2162:       assertFalse(node5.equals((Object)node3));
2163:       assertFalse(node5.equals((Object)node1));
2164:       assertFalse(node5.equals((Object)node4));
2165:       assertFalse(node5.equals((Object)node2));
2166:       assertFalse(node5.equals((Object)node6));
2167:       assertFalse(node5.equals((Object)node0));
2168:       assertFalse(node6.equals((Object)node0));
2169:       assertFalse(node6.equals((Object)node4));
2170:       assertFalse(node6.equals((Object)node5));
2171:       assertFalse(node6.equals((Object)node2));
2172:       assertFalse(node6.equals((Object)node1));
2173:       assertFalse(node6.equals((Object)node3));
2174:       assertFalse(node1.equals((Object)node4));
2175:       assertFalse(node1.equals((Object)node5));
2176:       assertFalse(node1.equals((Object)node0));
2177:       assertFalse(node1.equals((Object)node3));
2178:       assertFalse(node1.equals((Object)node2));
2179:       assertFalse(node1.equals((Object)node6));
2180:       assertTrue(boolean3 == boolean0);
2181:       assertTrue(boolean3 == boolean1);
2182:       assertTrue(boolean3 == boolean2);
2183:       assertFalse(node3.equals((Object)node1));
2184:       assertFalse(node3.equals((Object)node2));
2185:       assertFalse(node3.equals((Object)node6));
2186:       assertFalse(node3.equals((Object)node4));
2187:       assertFalse(node3.equals((Object)node5));
2188:       assertFalse(node3.equals((Object)node0));
2189:       assertNotSame(node5, node3);
2190:       assertNotSame(node5, node4);
2191:       assertNotSame(node5, node6);
2192:       assertNotSame(node6, node4);
2193:       assertNotSame(node6, node5);
2194:       assertNotSame(node6, node3);
2195:       assertNotSame(node3, node6);
2196:       assertNotSame(node3, node4);
2197:       assertNotSame(node3, node5);
2198:       assertFalse(boolean3);
2199:       
2200:       Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node2);
2201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2202:       assertEquals(43, Node.IS_CONSTANT_NAME);
2203:       assertEquals(36, Node.QUOTED_PROP);
2204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2205:       assertEquals(53, Node.INPUT_ID);
2206:       assertEquals(4095, Node.COLUMN_MASK);
2207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2208:       assertEquals(47, Node.IS_DISPATCHER);
2209:       assertEquals(2, Node.POST_FLAG);
2210:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2211:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2212:       assertEquals(40, Node.ORIGINALNAME_PROP);
2213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2214:       assertEquals(50, Node.FREE_CALL);
2215:       assertEquals(46, Node.IS_NAMESPACE);
2216:       assertEquals(54, Node.SLASH_V);
2217:       assertEquals(57, Node.LAST_PROP);
2218:       assertEquals(52, Node.LENGTH);
2219:       assertEquals(49, Node.DIRECT_EVAL);
2220:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2221:       assertEquals(1, Node.DECR_FLAG);
2222:       assertEquals(32, Node.INCRDECR_PROP);
2223:       assertEquals(30, Node.VAR_ARGS_NAME);
2224:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2225:       assertEquals(12, Node.COLUMN_BITS);
2226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2227:       assertEquals(37, Node.OPT_ARG_NAME);
2228:       assertEquals(56, Node.CHANGE_TIME);
2229:       assertEquals(48, Node.DIRECTIVES);
2230:       assertEquals(8, Node.FLAG_NO_THROWS);
2231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2232:       assertEquals(29, Node.JSDOC_INFO_PROP);
2233:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2234:       assertEquals(39, Node.EMPTY_BLOCK);
2235:       assertEquals(55, Node.INFERRED_FUNCTION);
2236:       assertEquals(57, Node.REFLECTED_OBJECT);
2237:       assertEquals(53, Node.INPUT_ID);
2238:       assertEquals(43, Node.IS_CONSTANT_NAME);
2239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2240:       assertEquals(47, Node.IS_DISPATCHER);
2241:       assertEquals(2, Node.POST_FLAG);
2242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2243:       assertEquals(4095, Node.COLUMN_MASK);
2244:       assertEquals(32, Node.INCRDECR_PROP);
2245:       assertEquals(46, Node.IS_NAMESPACE);
2246:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2247:       assertEquals(12, Node.COLUMN_BITS);
2248:       assertEquals(50, Node.FREE_CALL);
2249:       assertEquals(1, Node.DECR_FLAG);
2250:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2251:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2252:       assertEquals(52, Node.LENGTH);
2253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2254:       assertEquals(57, Node.REFLECTED_OBJECT);
2255:       assertEquals(54, Node.SLASH_V);
2256:       assertEquals(57, Node.LAST_PROP);
2257:       assertEquals(30, Node.VAR_ARGS_NAME);
2258:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2259:       assertEquals(49, Node.DIRECT_EVAL);
2260:       assertEquals(40, Node.ORIGINALNAME_PROP);
2261:       assertEquals(48, Node.DIRECTIVES);
2262:       assertEquals(37, Node.OPT_ARG_NAME);
2263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2264:       assertEquals(56, Node.CHANGE_TIME);
2265:       assertEquals(29, Node.JSDOC_INFO_PROP);
2266:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2267:       assertEquals(36, Node.QUOTED_PROP);
2268:       assertEquals(55, Node.INFERRED_FUNCTION);
2269:       assertEquals(8, Node.FLAG_NO_THROWS);
2270:       assertEquals(39, Node.EMPTY_BLOCK);
2271:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2273:       assertEquals(30, Node.VAR_ARGS_NAME);
2274:       assertEquals(49, Node.DIRECT_EVAL);
2275:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2276:       assertEquals(57, Node.LAST_PROP);
2277:       assertEquals(1, Node.DECR_FLAG);
2278:       assertEquals(32, Node.INCRDECR_PROP);
2279:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2280:       assertEquals(12, Node.COLUMN_BITS);
2281:       assertEquals(2, Node.POST_FLAG);
2282:       assertEquals(50, Node.FREE_CALL);
2283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2284:       assertEquals(40, Node.ORIGINALNAME_PROP);
2285:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2286:       assertEquals(46, Node.IS_NAMESPACE);
2287:       assertEquals(54, Node.SLASH_V);
2288:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2289:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2290:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2291:       assertEquals(43, Node.IS_CONSTANT_NAME);
2292:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2293:       assertEquals(4095, Node.COLUMN_MASK);
2294:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2295:       assertEquals(29, Node.JSDOC_INFO_PROP);
2296:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2297:       assertEquals(47, Node.IS_DISPATCHER);
2298:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2299:       assertEquals(39, Node.EMPTY_BLOCK);
2300:       assertEquals(37, Node.OPT_ARG_NAME);
2301:       assertEquals(56, Node.CHANGE_TIME);
2302:       assertEquals(48, Node.DIRECTIVES);
2303:       assertEquals(52, Node.LENGTH);
2304:       assertEquals(53, Node.INPUT_ID);
2305:       assertEquals(57, Node.REFLECTED_OBJECT);
2306:       assertEquals(55, Node.INFERRED_FUNCTION);
2307:       assertEquals(36, Node.QUOTED_PROP);
2308:       assertEquals(8, Node.FLAG_NO_THROWS);
2309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2310:       assertEquals(54, Node.SLASH_V);
2311:       assertEquals(52, Node.LENGTH);
2312:       assertEquals(30, Node.VAR_ARGS_NAME);
2313:       assertEquals(12, Node.COLUMN_BITS);
2314:       assertEquals(32, Node.INCRDECR_PROP);
2315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2316:       assertEquals(57, Node.LAST_PROP);
2317:       assertEquals(1, Node.DECR_FLAG);
2318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2319:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2320:       assertEquals(47, Node.IS_DISPATCHER);
2321:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2322:       assertEquals(2, Node.POST_FLAG);
2323:       assertEquals(50, Node.FREE_CALL);
2324:       assertEquals(40, Node.ORIGINALNAME_PROP);
2325:       assertEquals(46, Node.IS_NAMESPACE);
2326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2327:       assertEquals(43, Node.IS_CONSTANT_NAME);
2328:       assertEquals(53, Node.INPUT_ID);
2329:       assertEquals(36, Node.QUOTED_PROP);
2330:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2331:       assertEquals(55, Node.INFERRED_FUNCTION);
2332:       assertEquals(29, Node.JSDOC_INFO_PROP);
2333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2334:       assertEquals(37, Node.OPT_ARG_NAME);
2335:       assertEquals(8, Node.FLAG_NO_THROWS);
2336:       assertEquals(39, Node.EMPTY_BLOCK);
2337:       assertEquals(56, Node.CHANGE_TIME);
2338:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2339:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2340:       assertEquals(4095, Node.COLUMN_MASK);
2341:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2342:       assertEquals(57, Node.REFLECTED_OBJECT);
2343:       assertEquals(48, Node.DIRECTIVES);
2344:       assertEquals(49, Node.DIRECT_EVAL);
2345:       assertFalse(node0.equals((Object)node5));
2346:       assertFalse(node0.equals((Object)node4));
2347:       assertFalse(node0.equals((Object)node1));
2348:       assertFalse(node0.equals((Object)node6));
2349:       assertFalse(node0.equals((Object)node3));
2350:       assertFalse(node1.equals((Object)node4));
2351:       assertFalse(node1.equals((Object)node5));
2352:       assertFalse(node1.equals((Object)node0));
2353:       assertFalse(node1.equals((Object)node3));
2354:       assertFalse(node1.equals((Object)node2));
2355:       assertFalse(node1.equals((Object)node6));
2356:       assertFalse(node2.equals((Object)node6));
2357:       assertFalse(node2.equals((Object)node5));
2358:       assertFalse(node2.equals((Object)node1));
2359:       assertFalse(node2.equals((Object)node3));
2360:       assertFalse(node2.equals((Object)node4));
2361:       assertFalse(node3.equals((Object)node1));
2362:       assertFalse(node3.equals((Object)node2));
2363:       assertFalse(node3.equals((Object)node6));
2364:       assertFalse(node3.equals((Object)node4));
2365:       assertFalse(node3.equals((Object)node5));
2366:       assertFalse(node3.equals((Object)node0));
2367:       assertNotNull(node_NodeMismatch0);
2368:       assertSame(node0, node2);
2369:       assertSame(node2, node0);
2370:       assertNotSame(node3, node6);
2371:       assertNotSame(node3, node4);
2372:       assertNotSame(node3, node5);
2373:       
2374:       String string1 = node0.getQualifiedName();
2375:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2376:       assertEquals(43, Node.IS_CONSTANT_NAME);
2377:       assertEquals(36, Node.QUOTED_PROP);
2378:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2379:       assertEquals(53, Node.INPUT_ID);
2380:       assertEquals(4095, Node.COLUMN_MASK);
2381:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2382:       assertEquals(47, Node.IS_DISPATCHER);
2383:       assertEquals(2, Node.POST_FLAG);
2384:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2385:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2386:       assertEquals(40, Node.ORIGINALNAME_PROP);
2387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2388:       assertEquals(50, Node.FREE_CALL);
2389:       assertEquals(46, Node.IS_NAMESPACE);
2390:       assertEquals(54, Node.SLASH_V);
2391:       assertEquals(57, Node.LAST_PROP);
2392:       assertEquals(52, Node.LENGTH);
2393:       assertEquals(49, Node.DIRECT_EVAL);
2394:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2395:       assertEquals(1, Node.DECR_FLAG);
2396:       assertEquals(32, Node.INCRDECR_PROP);
2397:       assertEquals(30, Node.VAR_ARGS_NAME);
2398:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2399:       assertEquals(12, Node.COLUMN_BITS);
2400:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2401:       assertEquals(37, Node.OPT_ARG_NAME);
2402:       assertEquals(56, Node.CHANGE_TIME);
2403:       assertEquals(48, Node.DIRECTIVES);
2404:       assertEquals(8, Node.FLAG_NO_THROWS);
2405:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2406:       assertEquals(29, Node.JSDOC_INFO_PROP);
2407:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2408:       assertEquals(39, Node.EMPTY_BLOCK);
2409:       assertEquals(55, Node.INFERRED_FUNCTION);
2410:       assertEquals(57, Node.REFLECTED_OBJECT);
2411:       assertFalse(node0.equals((Object)node5));
2412:       assertFalse(node0.equals((Object)node4));
2413:       assertFalse(node0.equals((Object)node1));
2414:       assertFalse(node0.equals((Object)node6));
2415:       assertFalse(node0.equals((Object)node3));
2416:       assertNull(string1);
2417:       assertSame(node0, node2);
2418:       
2419:       node2.setString("<N2t");
2420:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2421:       assertEquals(43, Node.IS_CONSTANT_NAME);
2422:       assertEquals(36, Node.QUOTED_PROP);
2423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2424:       assertEquals(53, Node.INPUT_ID);
2425:       assertEquals(4095, Node.COLUMN_MASK);
2426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2427:       assertEquals(47, Node.IS_DISPATCHER);
2428:       assertEquals(2, Node.POST_FLAG);
2429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2430:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2431:       assertEquals(40, Node.ORIGINALNAME_PROP);
2432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2433:       assertEquals(50, Node.FREE_CALL);
2434:       assertEquals(46, Node.IS_NAMESPACE);
2435:       assertEquals(54, Node.SLASH_V);
2436:       assertEquals(57, Node.LAST_PROP);
2437:       assertEquals(52, Node.LENGTH);
2438:       assertEquals(49, Node.DIRECT_EVAL);
2439:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2440:       assertEquals(1, Node.DECR_FLAG);
2441:       assertEquals(32, Node.INCRDECR_PROP);
2442:       assertEquals(30, Node.VAR_ARGS_NAME);
2443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2444:       assertEquals(12, Node.COLUMN_BITS);
2445:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2446:       assertEquals(37, Node.OPT_ARG_NAME);
2447:       assertEquals(56, Node.CHANGE_TIME);
2448:       assertEquals(48, Node.DIRECTIVES);
2449:       assertEquals(8, Node.FLAG_NO_THROWS);
2450:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2451:       assertEquals(29, Node.JSDOC_INFO_PROP);
2452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2453:       assertEquals(39, Node.EMPTY_BLOCK);
2454:       assertEquals(55, Node.INFERRED_FUNCTION);
2455:       assertEquals(57, Node.REFLECTED_OBJECT);
2456:       assertEquals(53, Node.INPUT_ID);
2457:       assertEquals(43, Node.IS_CONSTANT_NAME);
2458:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2459:       assertEquals(47, Node.IS_DISPATCHER);
2460:       assertEquals(2, Node.POST_FLAG);
2461:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2462:       assertEquals(4095, Node.COLUMN_MASK);
2463:       assertEquals(32, Node.INCRDECR_PROP);
2464:       assertEquals(46, Node.IS_NAMESPACE);
2465:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2466:       assertEquals(12, Node.COLUMN_BITS);
2467:       assertEquals(50, Node.FREE_CALL);
2468:       assertEquals(1, Node.DECR_FLAG);
2469:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2470:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2471:       assertEquals(52, Node.LENGTH);
2472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2473:       assertEquals(57, Node.REFLECTED_OBJECT);
2474:       assertEquals(54, Node.SLASH_V);
2475:       assertEquals(57, Node.LAST_PROP);
2476:       assertEquals(30, Node.VAR_ARGS_NAME);
2477:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2478:       assertEquals(49, Node.DIRECT_EVAL);
2479:       assertEquals(40, Node.ORIGINALNAME_PROP);
2480:       assertEquals(48, Node.DIRECTIVES);
2481:       assertEquals(37, Node.OPT_ARG_NAME);
2482:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2483:       assertEquals(56, Node.CHANGE_TIME);
2484:       assertEquals(29, Node.JSDOC_INFO_PROP);
2485:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2486:       assertEquals(36, Node.QUOTED_PROP);
2487:       assertEquals(55, Node.INFERRED_FUNCTION);
2488:       assertEquals(8, Node.FLAG_NO_THROWS);
2489:       assertEquals(39, Node.EMPTY_BLOCK);
2490:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2491:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2492:       assertEquals(30, Node.VAR_ARGS_NAME);
2493:       assertEquals(49, Node.DIRECT_EVAL);
2494:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2495:       assertEquals(57, Node.LAST_PROP);
2496:       assertEquals(1, Node.DECR_FLAG);
2497:       assertEquals(32, Node.INCRDECR_PROP);
2498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2499:       assertEquals(12, Node.COLUMN_BITS);
2500:       assertEquals(2, Node.POST_FLAG);
2501:       assertEquals(50, Node.FREE_CALL);
2502:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2503:       assertEquals(40, Node.ORIGINALNAME_PROP);
2504:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2505:       assertEquals(46, Node.IS_NAMESPACE);
2506:       assertEquals(54, Node.SLASH_V);
2507:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2508:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2509:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2510:       assertEquals(43, Node.IS_CONSTANT_NAME);
2511:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2512:       assertEquals(4095, Node.COLUMN_MASK);
2513:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2514:       assertEquals(29, Node.JSDOC_INFO_PROP);
2515:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2516:       assertEquals(47, Node.IS_DISPATCHER);
2517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2518:       assertEquals(39, Node.EMPTY_BLOCK);
2519:       assertEquals(37, Node.OPT_ARG_NAME);
2520:       assertEquals(56, Node.CHANGE_TIME);
2521:       assertEquals(48, Node.DIRECTIVES);
2522:       assertEquals(52, Node.LENGTH);
2523:       assertEquals(53, Node.INPUT_ID);
2524:       assertEquals(57, Node.REFLECTED_OBJECT);
2525:       assertEquals(55, Node.INFERRED_FUNCTION);
2526:       assertEquals(36, Node.QUOTED_PROP);
2527:       assertEquals(8, Node.FLAG_NO_THROWS);
2528:       assertFalse(node0.equals((Object)node5));
2529:       assertFalse(node0.equals((Object)node4));
2530:       assertFalse(node0.equals((Object)node1));
2531:       assertFalse(node0.equals((Object)node6));
2532:       assertFalse(node0.equals((Object)node3));
2533:       assertFalse(node1.equals((Object)node4));
2534:       assertFalse(node1.equals((Object)node5));
2535:       assertFalse(node1.equals((Object)node0));
2536:       assertFalse(node1.equals((Object)node3));
2537:       assertFalse(node1.equals((Object)node2));
2538:       assertFalse(node1.equals((Object)node6));
2539:       assertFalse(node2.equals((Object)node6));
2540:       assertFalse(node2.equals((Object)node5));
2541:       assertFalse(node2.equals((Object)node1));
2542:       assertFalse(node2.equals((Object)node3));
2543:       assertFalse(node2.equals((Object)node4));
2544:       assertSame(node0, node2);
2545:       assertSame(node2, node0);
2546:   }
2547: }
RegularFileObject[/tmp/EvoSuite_416_1628159621415/com/google/javascript/rhino/Node_416_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_416_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_416_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_416_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:42.032 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("<N2t", 8199, 0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node0);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertEquals(8199, node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertEquals(33583104, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());

Node node1 = Node.newNumber(1.0, 901, 15);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertEquals(901, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(15, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertEquals(3690511, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());

boolean boolean0 = node0.isEquivalentToTyped(node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertEquals(8199, node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertEquals(33583104, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertEquals(901, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(15, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertEquals(3690511, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());

Node node2 = node0.srcrefTree(node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(901, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(15, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(3690511, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertEquals(901, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(15, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertEquals(3690511, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node2.isCase());
assertEquals(15, node2.getCharno());
assertFalse(node2.isSwitch());
assertEquals(901, node2.getLineno());
assertFalse(node2.isFalse());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isThrow());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals(40, node2.getType());
assertFalse(node2.isNot());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isSetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isGetterDef());
assertEquals(3690511, node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.equals((Object)node1));
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(901, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(15, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(3690511, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());

node_FileLevelJsDocBuilder0.append("<N2t");
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.equals((Object)node1));
assertSame(node0, node2);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(901, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(15, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(3690511, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());

String string0 = node1.getSourceFileName();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNull(string0);
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertEquals(901, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(15, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertEquals(3690511, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());

int int0 = node0.getLineno();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.equals((Object)node1));
assertSame(node0, node2);
assertEquals(901, int0);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(901, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(15, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(3690511, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());

boolean boolean1 = node0.hasChildren();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertSame(node0, node2);
assertFalse(boolean1);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(901, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(15, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(3690511, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());

Iterable<Node> iterable0 = node1.children();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertEquals(901, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(15, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertEquals(3690511, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());

Node node3 = new Node(49, 1, 2);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotNull(node3);
assertFalse(node3.isAdd());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isVar());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isCall());
assertFalse(node3.isOr());
assertFalse(node3.isName());
assertFalse(node3.isDebugger());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isFunction());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertEquals(49, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isDelProp());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isBreak());
assertEquals(1, node3.getLineno());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertEquals(4098, node3.getSourcePosition());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDefaultCase());
assertEquals(2, node3.getCharno());
assertFalse(node3.isScript());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.hasOneChild());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertTrue(node3.isThrow());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Vector<JSType> vector0 = new Vector<JSType>();
assertNotNull(vector0);
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());

Node node4 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertNotNull(node4);
assertNotSame(node4, node3);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(node4.isParamList());
assertEquals(83, node4.getType());
assertFalse(node4.isGetProp());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isHook());
assertFalse(node4.isThrow());
assertFalse(node4.isInc());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertFalse(node4.isBreak());
assertFalse(node4.isReturn());
assertFalse(node4.isIn());
assertFalse(node4.isContinue());
assertFalse(node4.isAssign());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isNot());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isAnd());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCatch());
assertFalse(node4.isSetterDef());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isVar());
assertFalse(node4.isNew());
assertFalse(node4.isVoid());
assertFalse(node4.isCall());
assertFalse(node4.isAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isIf());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isAssignAdd());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isDo());
assertFalse(node4.isCase());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isArrayLit());
assertFalse(node4.isScript());
assertFalse(node4.isLabelName());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isSwitch());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isStringKey());

boolean boolean2 = node4.isRegExp();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node4, node3);
assertFalse(boolean2);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(node4.isParamList());
assertEquals(83, node4.getType());
assertFalse(node4.isGetProp());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isHook());
assertFalse(node4.isThrow());
assertFalse(node4.isInc());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertFalse(node4.isBreak());
assertFalse(node4.isReturn());
assertFalse(node4.isIn());
assertFalse(node4.isContinue());
assertFalse(node4.isAssign());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isNot());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isAnd());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCatch());
assertFalse(node4.isSetterDef());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isVar());
assertFalse(node4.isNew());
assertFalse(node4.isVoid());
assertFalse(node4.isCall());
assertFalse(node4.isAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isIf());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isAssignAdd());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isDo());
assertFalse(node4.isCase());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isArrayLit());
assertFalse(node4.isScript());
assertFalse(node4.isLabelName());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isSwitch());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isStringKey());

Node node5 = new Node(37, node3);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertNotNull(node5);
assertFalse(node5.isScript());
assertFalse(node5.isExprResult());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isWith());
assertFalse(node5.isTypeOf());
assertTrue(node5.isCall());
assertFalse(node5.isDec());
assertFalse(node5.isComma());
assertFalse(node5.isBreak());

Node node6 = new Node(22, node1, node5);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertNotNull(node6);

boolean boolean3 = node6.isQualifiedName();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node0));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node6));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node6));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node0));
assertNotSame(node5, node3);
assertNotSame(node5, node4);
assertNotSame(node5, node6);
assertNotSame(node6, node4);
assertNotSame(node6, node5);
assertNotSame(node6, node3);
assertNotSame(node3, node6);
assertNotSame(node3, node4);
assertNotSame(node3, node5);
assertFalse(boolean3);

Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeEqualsImpl(node2);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node6));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node6));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotSame(node3, node6);
assertNotSame(node3, node4);
assertNotSame(node3, node5);

String string1 = node0.getQualifiedName();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node3));
assertNull(string1);
assertSame(node0, node2);

node2.setString("<N2t");
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node6));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertSame(node0, node2);
assertSame(node2, node0);


[MASTER] 10:33:43.478 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_427_1628159623331/com/google/javascript/rhino/Node_427_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_427_1628159623331/com/google/javascript/rhino/Node_427_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:43.478 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:43.478 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:43.478 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 688
[MASTER] 10:33:43.479 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_427_1628159623331/com/google/javascript/rhino/Node_427_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.StaticSourceFile;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_427_tmp__ESTest extends Node_427_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString(93, "");
24:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
25:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
26:       assertEquals(50, Node.FREE_CALL);
27:       assertEquals(8, Node.FLAG_NO_THROWS);
28:       assertEquals(48, Node.DIRECTIVES);
29:       assertEquals(39, Node.EMPTY_BLOCK);
30:       assertEquals(40, Node.ORIGINALNAME_PROP);
31:       assertEquals(52, Node.LENGTH);
32:       assertEquals(54, Node.SLASH_V);
33:       assertEquals(57, Node.REFLECTED_OBJECT);
34:       assertEquals(15, Node.NO_SIDE_EFFECTS);
35:       assertEquals(57, Node.LAST_PROP);
36:       assertEquals(43, Node.IS_CONSTANT_NAME);
37:       assertEquals(36, Node.QUOTED_PROP);
38:       assertEquals(30, Node.VAR_ARGS_NAME);
39:       assertEquals(55, Node.INFERRED_FUNCTION);
40:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
41:       assertEquals(53, Node.INPUT_ID);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(47, Node.IS_DISPATCHER);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(2, Node.POST_FLAG);
46:       assertEquals(37, Node.OPT_ARG_NAME);
47:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
48:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(46, Node.IS_NAMESPACE);
51:       assertEquals(51, Node.STATIC_SOURCE_FILE);
52:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
53:       assertEquals(49, Node.DIRECT_EVAL);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
56:       assertEquals(4095, Node.COLUMN_MASK);
57:       assertEquals(32, Node.INCRDECR_PROP);
58:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
59:       assertEquals(12, Node.COLUMN_BITS);
60:       assertNotNull(node0);
61:       assertFalse(node0.isName());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isStringKey());
64:       assertFalse(node0.isSetterDef());
65:       assertEquals(93, node0.getType());
66:       assertFalse(node0.isAdd());
67:       assertFalse(node0.isParamList());
68:       assertFalse(node0.isNull());
69:       assertFalse(node0.isWhile());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.isVoid());
72:       assertEquals((-1), node0.getLineno());
73:       assertFalse(node0.isTry());
74:       assertFalse(node0.isReturn());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isTypeOf());
77:       assertFalse(node0.isRegExp());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isDec());
81:       assertFalse(node0.isIf());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isDebugger());
86:       assertEquals((-1), node0.getSourcePosition());
87:       assertFalse(node0.isContinue());
88:       assertFalse(node0.isAnd());
89:       assertFalse(node0.isInc());
90:       assertFalse(node0.isFunction());
91:       assertTrue(node0.isAssignAdd());
92:       assertFalse(node0.isFalse());
93:       assertFalse(node0.isThrow());
94:       assertFalse(node0.isBreak());
95:       assertFalse(node0.isGetProp());
96:       assertEquals((-1), node0.getCharno());
97:       assertFalse(node0.isObjectLit());
98:       assertFalse(node0.isCase());
99:       assertFalse(node0.isNot());
100:       assertFalse(node0.isWith());
101:       assertFalse(node0.isString());
102:       assertFalse(node0.isScript());
103:       assertFalse(node0.isExprResult());
104:       assertFalse(node0.isInstanceOf());
105:       assertFalse(node0.isHook());
106:       assertFalse(node0.isThis());
107:       assertFalse(node0.isComma());
108:       assertFalse(node0.isAssign());
109:       assertFalse(node0.isLabelName());
110:       assertFalse(node0.isEmpty());
111:       assertFalse(node0.isFor());
112:       assertFalse(node0.isGetElem());
113:       assertFalse(node0.isArrayLit());
114:       assertFalse(node0.isDelProp());
115:       assertFalse(node0.hasOneChild());
116:       assertFalse(node0.isOr());
117:       assertFalse(node0.isTrue());
118:       assertFalse(node0.isNumber());
119:       assertFalse(node0.isGetterDef());
120:       assertFalse(node0.isDo());
121:       assertFalse(node0.isDefaultCase());
122:       assertFalse(node0.isSwitch());
123:       assertFalse(node0.isNew());
124:       assertFalse(node0.isLabel());
125:       assertFalse(node0.isVar());
126:       assertEquals(0, node0.getChildCount());
127:       
128:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
131:       assertEquals(50, Node.FREE_CALL);
132:       assertEquals(8, Node.FLAG_NO_THROWS);
133:       assertEquals(48, Node.DIRECTIVES);
134:       assertEquals(39, Node.EMPTY_BLOCK);
135:       assertEquals(40, Node.ORIGINALNAME_PROP);
136:       assertEquals(52, Node.LENGTH);
137:       assertEquals(54, Node.SLASH_V);
138:       assertEquals(57, Node.REFLECTED_OBJECT);
139:       assertEquals(15, Node.NO_SIDE_EFFECTS);
140:       assertEquals(57, Node.LAST_PROP);
141:       assertEquals(43, Node.IS_CONSTANT_NAME);
142:       assertEquals(36, Node.QUOTED_PROP);
143:       assertEquals(30, Node.VAR_ARGS_NAME);
144:       assertEquals(55, Node.INFERRED_FUNCTION);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(53, Node.INPUT_ID);
147:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
148:       assertEquals(47, Node.IS_DISPATCHER);
149:       assertEquals(56, Node.CHANGE_TIME);
150:       assertEquals(2, Node.POST_FLAG);
151:       assertEquals(37, Node.OPT_ARG_NAME);
152:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
154:       assertEquals(29, Node.JSDOC_INFO_PROP);
155:       assertEquals(46, Node.IS_NAMESPACE);
156:       assertEquals(51, Node.STATIC_SOURCE_FILE);
157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
158:       assertEquals(49, Node.DIRECT_EVAL);
159:       assertEquals(1, Node.DECR_FLAG);
160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
161:       assertEquals(4095, Node.COLUMN_MASK);
162:       assertEquals(32, Node.INCRDECR_PROP);
163:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
164:       assertEquals(12, Node.COLUMN_BITS);
165:       assertNull(staticSourceFile0);
166:       assertFalse(node0.isName());
167:       assertFalse(node0.isCall());
168:       assertFalse(node0.isStringKey());
169:       assertFalse(node0.isSetterDef());
170:       assertEquals(93, node0.getType());
171:       assertFalse(node0.isAdd());
172:       assertFalse(node0.isParamList());
173:       assertFalse(node0.isNull());
174:       assertFalse(node0.isWhile());
175:       assertFalse(node0.isCatch());
176:       assertFalse(node0.isVoid());
177:       assertEquals((-1), node0.getLineno());
178:       assertFalse(node0.isTry());
179:       assertFalse(node0.isReturn());
180:       assertFalse(node0.isBlock());
181:       assertFalse(node0.isTypeOf());
182:       assertFalse(node0.isRegExp());
183:       assertFalse(node0.hasMoreThanOneChild());
184:       assertFalse(node0.hasChildren());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.isIf());
187:       assertFalse(node0.isCast());
188:       assertFalse(node0.isIn());
189:       assertFalse(node0.isNE());
190:       assertFalse(node0.isDebugger());
191:       assertEquals((-1), node0.getSourcePosition());
192:       assertFalse(node0.isContinue());
193:       assertFalse(node0.isAnd());
194:       assertFalse(node0.isInc());
195:       assertFalse(node0.isFunction());
196:       assertTrue(node0.isAssignAdd());
197:       assertFalse(node0.isFalse());
198:       assertFalse(node0.isThrow());
199:       assertFalse(node0.isBreak());
200:       assertFalse(node0.isGetProp());
201:       assertEquals((-1), node0.getCharno());
202:       assertFalse(node0.isObjectLit());
203:       assertFalse(node0.isCase());
204:       assertFalse(node0.isNot());
205:       assertFalse(node0.isWith());
206:       assertFalse(node0.isString());
207:       assertFalse(node0.isScript());
208:       assertFalse(node0.isExprResult());
209:       assertFalse(node0.isInstanceOf());
210:       assertFalse(node0.isHook());
211:       assertFalse(node0.isThis());
212:       assertFalse(node0.isComma());
213:       assertFalse(node0.isAssign());
214:       assertFalse(node0.isLabelName());
215:       assertFalse(node0.isEmpty());
216:       assertFalse(node0.isFor());
217:       assertFalse(node0.isGetElem());
218:       assertFalse(node0.isArrayLit());
219:       assertFalse(node0.isDelProp());
220:       assertFalse(node0.hasOneChild());
221:       assertFalse(node0.isOr());
222:       assertFalse(node0.isTrue());
223:       assertFalse(node0.isNumber());
224:       assertFalse(node0.isGetterDef());
225:       assertFalse(node0.isDo());
226:       assertFalse(node0.isDefaultCase());
227:       assertFalse(node0.isSwitch());
228:       assertFalse(node0.isNew());
229:       assertFalse(node0.isLabel());
230:       assertFalse(node0.isVar());
231:       assertEquals(0, node0.getChildCount());
232:       
233:       Node node1 = new Node(93, node0, node0, node0, 46, 16);
234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(8, Node.FLAG_NO_THROWS);
238:       assertEquals(48, Node.DIRECTIVES);
239:       assertEquals(39, Node.EMPTY_BLOCK);
240:       assertEquals(40, Node.ORIGINALNAME_PROP);
241:       assertEquals(52, Node.LENGTH);
242:       assertEquals(54, Node.SLASH_V);
243:       assertEquals(57, Node.REFLECTED_OBJECT);
244:       assertEquals(15, Node.NO_SIDE_EFFECTS);
245:       assertEquals(57, Node.LAST_PROP);
246:       assertEquals(43, Node.IS_CONSTANT_NAME);
247:       assertEquals(36, Node.QUOTED_PROP);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(55, Node.INFERRED_FUNCTION);
250:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
251:       assertEquals(53, Node.INPUT_ID);
252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
253:       assertEquals(47, Node.IS_DISPATCHER);
254:       assertEquals(56, Node.CHANGE_TIME);
255:       assertEquals(2, Node.POST_FLAG);
256:       assertEquals(37, Node.OPT_ARG_NAME);
257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
258:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(46, Node.IS_NAMESPACE);
261:       assertEquals(51, Node.STATIC_SOURCE_FILE);
262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
263:       assertEquals(49, Node.DIRECT_EVAL);
264:       assertEquals(1, Node.DECR_FLAG);
265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
266:       assertEquals(4095, Node.COLUMN_MASK);
267:       assertEquals(32, Node.INCRDECR_PROP);
268:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
269:       assertEquals(12, Node.COLUMN_BITS);
270:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
271:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
272:       assertEquals(29, Node.JSDOC_INFO_PROP);
273:       assertEquals(37, Node.OPT_ARG_NAME);
274:       assertEquals(47, Node.IS_DISPATCHER);
275:       assertEquals(2, Node.POST_FLAG);
276:       assertEquals(12, Node.COLUMN_BITS);
277:       assertEquals(46, Node.IS_NAMESPACE);
278:       assertEquals(1, Node.DECR_FLAG);
279:       assertEquals(32, Node.INCRDECR_PROP);
280:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
281:       assertEquals(43, Node.IS_CONSTANT_NAME);
282:       assertEquals(54, Node.SLASH_V);
283:       assertEquals(51, Node.STATIC_SOURCE_FILE);
284:       assertEquals(50, Node.FREE_CALL);
285:       assertEquals(57, Node.REFLECTED_OBJECT);
286:       assertEquals(40, Node.ORIGINALNAME_PROP);
287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
290:       assertEquals(30, Node.VAR_ARGS_NAME);
291:       assertEquals(55, Node.INFERRED_FUNCTION);
292:       assertEquals(4095, Node.COLUMN_MASK);
293:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
294:       assertEquals(57, Node.LAST_PROP);
295:       assertEquals(48, Node.DIRECTIVES);
296:       assertEquals(49, Node.DIRECT_EVAL);
297:       assertEquals(8, Node.FLAG_NO_THROWS);
298:       assertEquals(39, Node.EMPTY_BLOCK);
299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
300:       assertEquals(56, Node.CHANGE_TIME);
301:       assertEquals(15, Node.NO_SIDE_EFFECTS);
302:       assertEquals(53, Node.INPUT_ID);
303:       assertEquals(52, Node.LENGTH);
304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
305:       assertEquals(36, Node.QUOTED_PROP);
306:       assertFalse(node1.equals((Object)node0));
307:       assertNotNull(node1);
308:       assertFalse(node0.isName());
309:       assertFalse(node0.isCall());
310:       assertFalse(node0.isStringKey());
311:       assertFalse(node0.isSetterDef());
312:       assertEquals(93, node0.getType());
313:       assertFalse(node0.isAdd());
314:       assertFalse(node0.isParamList());
315:       assertFalse(node0.isNull());
316:       assertFalse(node0.isWhile());
317:       assertFalse(node0.isCatch());
318:       assertFalse(node0.isVoid());
319:       assertEquals((-1), node0.getLineno());
320:       assertFalse(node0.isTry());
321:       assertFalse(node0.isReturn());
322:       assertFalse(node0.isBlock());
323:       assertFalse(node0.isTypeOf());
324:       assertFalse(node0.isRegExp());
325:       assertFalse(node0.hasMoreThanOneChild());
326:       assertFalse(node0.hasChildren());
327:       assertFalse(node0.isDec());
328:       assertFalse(node0.isIf());
329:       assertFalse(node0.isCast());
330:       assertFalse(node0.isIn());
331:       assertFalse(node0.isNE());
332:       assertFalse(node0.isDebugger());
333:       assertEquals((-1), node0.getSourcePosition());
334:       assertFalse(node0.isContinue());
335:       assertFalse(node0.isAnd());
336:       assertFalse(node0.isInc());
337:       assertFalse(node0.isFunction());
338:       assertTrue(node0.isAssignAdd());
339:       assertFalse(node0.isFalse());
340:       assertFalse(node0.isThrow());
341:       assertFalse(node0.isBreak());
342:       assertFalse(node0.isGetProp());
343:       assertEquals((-1), node0.getCharno());
344:       assertFalse(node0.isObjectLit());
345:       assertFalse(node0.isCase());
346:       assertFalse(node0.isNot());
347:       assertFalse(node0.isWith());
348:       assertFalse(node0.isString());
349:       assertFalse(node0.isScript());
350:       assertFalse(node0.isExprResult());
351:       assertFalse(node0.isInstanceOf());
352:       assertFalse(node0.isHook());
353:       assertFalse(node0.isThis());
354:       assertFalse(node0.isComma());
355:       assertFalse(node0.isAssign());
356:       assertFalse(node0.isLabelName());
357:       assertFalse(node0.isEmpty());
358:       assertFalse(node0.isFor());
359:       assertFalse(node0.isGetElem());
360:       assertFalse(node0.isArrayLit());
361:       assertFalse(node0.isDelProp());
362:       assertFalse(node0.hasOneChild());
363:       assertFalse(node0.isOr());
364:       assertFalse(node0.isTrue());
365:       assertFalse(node0.isNumber());
366:       assertFalse(node0.isGetterDef());
367:       assertFalse(node0.isDo());
368:       assertFalse(node0.isDefaultCase());
369:       assertFalse(node0.isSwitch());
370:       assertFalse(node0.isNew());
371:       assertFalse(node0.isLabel());
372:       assertFalse(node0.isVar());
373:       assertEquals(0, node0.getChildCount());
374:       assertFalse(node1.isDec());
375:       assertFalse(node1.isTypeOf());
376:       assertFalse(node1.isAssign());
377:       assertFalse(node1.isLabelName());
378:       assertFalse(node1.isGetElem());
379:       assertFalse(node1.isExprResult());
380:       assertFalse(node1.isWith());
381:       assertFalse(node1.isCast());
382:       assertFalse(node1.isInstanceOf());
383:       assertFalse(node1.isLabel());
384:       assertFalse(node1.isOr());
385:       assertFalse(node1.isDo());
386:       assertFalse(node1.isAdd());
387:       assertFalse(node1.isThrow());
388:       assertFalse(node1.isName());
389:       assertFalse(node1.isBreak());
390:       assertFalse(node1.isComma());
391:       assertFalse(node1.isContinue());
392:       assertTrue(node1.isAssignAdd());
393:       assertFalse(node1.isFalse());
394:       assertFalse(node1.isCall());
395:       assertFalse(node1.isReturn());
396:       assertFalse(node1.isWhile());
397:       assertFalse(node1.isAnd());
398:       assertFalse(node1.isNot());
399:       assertFalse(node1.isDebugger());
400:       assertFalse(node1.isGetProp());
401:       assertFalse(node1.isObjectLit());
402:       assertFalse(node1.isString());
403:       assertEquals(46, node1.getLineno());
404:       assertFalse(node1.isTry());
405:       assertFalse(node1.isArrayLit());
406:       assertEquals(188432, node1.getSourcePosition());
407:       assertFalse(node1.isVoid());
408:       assertFalse(node1.isTrue());
409:       assertFalse(node1.isFor());
410:       assertFalse(node1.isIf());
411:       assertTrue(node1.hasOneChild());
412:       assertFalse(node1.isDelProp());
413:       assertFalse(node1.isRegExp());
414:       assertFalse(node1.isFunction());
415:       assertTrue(node1.hasChildren());
416:       assertFalse(node1.isCatch());
417:       assertFalse(node1.isIn());
418:       assertFalse(node1.isNE());
419:       assertFalse(node1.isDefaultCase());
420:       assertFalse(node1.isNull());
421:       assertFalse(node1.isSetterDef());
422:       assertFalse(node1.isInc());
423:       assertFalse(node1.isEmpty());
424:       assertEquals(93, node1.getType());
425:       assertFalse(node1.isHook());
426:       assertFalse(node1.isNew());
427:       assertFalse(node1.isStringKey());
428:       assertFalse(node1.isBlock());
429:       assertFalse(node1.isVar());
430:       assertFalse(node1.isSwitch());
431:       assertFalse(node1.hasMoreThanOneChild());
432:       assertEquals(1, node1.getChildCount());
433:       assertEquals(16, node1.getCharno());
434:       assertFalse(node1.isThis());
435:       assertFalse(node1.isParamList());
436:       assertFalse(node1.isNumber());
437:       assertFalse(node1.isScript());
438:       assertFalse(node1.isGetterDef());
439:       assertFalse(node1.isCase());
440:       
441:       node1.setLength(38);
442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
443:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
444:       assertEquals(50, Node.FREE_CALL);
445:       assertEquals(8, Node.FLAG_NO_THROWS);
446:       assertEquals(48, Node.DIRECTIVES);
447:       assertEquals(39, Node.EMPTY_BLOCK);
448:       assertEquals(40, Node.ORIGINALNAME_PROP);
449:       assertEquals(52, Node.LENGTH);
450:       assertEquals(54, Node.SLASH_V);
451:       assertEquals(57, Node.REFLECTED_OBJECT);
452:       assertEquals(15, Node.NO_SIDE_EFFECTS);
453:       assertEquals(57, Node.LAST_PROP);
454:       assertEquals(43, Node.IS_CONSTANT_NAME);
455:       assertEquals(36, Node.QUOTED_PROP);
456:       assertEquals(30, Node.VAR_ARGS_NAME);
457:       assertEquals(55, Node.INFERRED_FUNCTION);
458:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
459:       assertEquals(53, Node.INPUT_ID);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(47, Node.IS_DISPATCHER);
462:       assertEquals(56, Node.CHANGE_TIME);
463:       assertEquals(2, Node.POST_FLAG);
464:       assertEquals(37, Node.OPT_ARG_NAME);
465:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
466:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
467:       assertEquals(29, Node.JSDOC_INFO_PROP);
468:       assertEquals(46, Node.IS_NAMESPACE);
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(49, Node.DIRECT_EVAL);
472:       assertEquals(1, Node.DECR_FLAG);
473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
474:       assertEquals(4095, Node.COLUMN_MASK);
475:       assertEquals(32, Node.INCRDECR_PROP);
476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
477:       assertEquals(12, Node.COLUMN_BITS);
478:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
479:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
480:       assertEquals(29, Node.JSDOC_INFO_PROP);
481:       assertEquals(37, Node.OPT_ARG_NAME);
482:       assertEquals(47, Node.IS_DISPATCHER);
483:       assertEquals(2, Node.POST_FLAG);
484:       assertEquals(12, Node.COLUMN_BITS);
485:       assertEquals(46, Node.IS_NAMESPACE);
486:       assertEquals(1, Node.DECR_FLAG);
487:       assertEquals(32, Node.INCRDECR_PROP);
488:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
489:       assertEquals(43, Node.IS_CONSTANT_NAME);
490:       assertEquals(54, Node.SLASH_V);
491:       assertEquals(51, Node.STATIC_SOURCE_FILE);
492:       assertEquals(50, Node.FREE_CALL);
493:       assertEquals(57, Node.REFLECTED_OBJECT);
494:       assertEquals(40, Node.ORIGINALNAME_PROP);
495:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
496:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
497:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
498:       assertEquals(30, Node.VAR_ARGS_NAME);
499:       assertEquals(55, Node.INFERRED_FUNCTION);
500:       assertEquals(4095, Node.COLUMN_MASK);
501:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
502:       assertEquals(57, Node.LAST_PROP);
503:       assertEquals(48, Node.DIRECTIVES);
504:       assertEquals(49, Node.DIRECT_EVAL);
505:       assertEquals(8, Node.FLAG_NO_THROWS);
506:       assertEquals(39, Node.EMPTY_BLOCK);
507:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
508:       assertEquals(56, Node.CHANGE_TIME);
509:       assertEquals(15, Node.NO_SIDE_EFFECTS);
510:       assertEquals(53, Node.INPUT_ID);
511:       assertEquals(52, Node.LENGTH);
512:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
513:       assertEquals(36, Node.QUOTED_PROP);
514:       assertFalse(node0.equals((Object)node1));
515:       assertFalse(node1.equals((Object)node0));
516:       assertFalse(node0.isName());
517:       assertFalse(node0.isCall());
518:       assertFalse(node0.isStringKey());
519:       assertFalse(node0.isSetterDef());
520:       assertEquals(93, node0.getType());
521:       assertFalse(node0.isAdd());
522:       assertFalse(node0.isParamList());
523:       assertFalse(node0.isNull());
524:       assertFalse(node0.isWhile());
525:       assertFalse(node0.isCatch());
526:       assertFalse(node0.isVoid());
527:       assertEquals((-1), node0.getLineno());
528:       assertFalse(node0.isTry());
529:       assertFalse(node0.isReturn());
530:       assertFalse(node0.isBlock());
531:       assertFalse(node0.isTypeOf());
532:       assertFalse(node0.isRegExp());
533:       assertFalse(node0.hasMoreThanOneChild());
534:       assertFalse(node0.hasChildren());
535:       assertFalse(node0.isDec());
536:       assertFalse(node0.isIf());
537:       assertFalse(node0.isCast());
538:       assertFalse(node0.isIn());
539:       assertFalse(node0.isNE());
540:       assertFalse(node0.isDebugger());
541:       assertEquals((-1), node0.getSourcePosition());
542:       assertFalse(node0.isContinue());
543:       assertFalse(node0.isAnd());
544:       assertFalse(node0.isInc());
545:       assertFalse(node0.isFunction());
546:       assertTrue(node0.isAssignAdd());
547:       assertFalse(node0.isFalse());
548:       assertFalse(node0.isThrow());
549:       assertFalse(node0.isBreak());
550:       assertFalse(node0.isGetProp());
551:       assertEquals((-1), node0.getCharno());
552:       assertFalse(node0.isObjectLit());
553:       assertFalse(node0.isCase());
554:       assertFalse(node0.isNot());
555:       assertFalse(node0.isWith());
556:       assertFalse(node0.isString());
557:       assertFalse(node0.isScript());
558:       assertFalse(node0.isExprResult());
559:       assertFalse(node0.isInstanceOf());
560:       assertFalse(node0.isHook());
561:       assertFalse(node0.isThis());
562:       assertFalse(node0.isComma());
563:       assertFalse(node0.isAssign());
564:       assertFalse(node0.isLabelName());
565:       assertFalse(node0.isEmpty());
566:       assertFalse(node0.isFor());
567:       assertFalse(node0.isGetElem());
568:       assertFalse(node0.isArrayLit());
569:       assertFalse(node0.isDelProp());
570:       assertFalse(node0.hasOneChild());
571:       assertFalse(node0.isOr());
572:       assertFalse(node0.isTrue());
573:       assertFalse(node0.isNumber());
574:       assertFalse(node0.isGetterDef());
575:       assertFalse(node0.isDo());
576:       assertFalse(node0.isDefaultCase());
577:       assertFalse(node0.isSwitch());
578:       assertFalse(node0.isNew());
579:       assertFalse(node0.isLabel());
580:       assertFalse(node0.isVar());
581:       assertEquals(0, node0.getChildCount());
582:       assertFalse(node1.isDec());
583:       assertFalse(node1.isTypeOf());
584:       assertFalse(node1.isAssign());
585:       assertFalse(node1.isLabelName());
586:       assertFalse(node1.isGetElem());
587:       assertFalse(node1.isExprResult());
588:       assertFalse(node1.isWith());
589:       assertFalse(node1.isCast());
590:       assertFalse(node1.isInstanceOf());
591:       assertFalse(node1.isLabel());
592:       assertFalse(node1.isOr());
593:       assertFalse(node1.isDo());
594:       assertFalse(node1.isAdd());
595:       assertFalse(node1.isThrow());
596:       assertFalse(node1.isName());
597:       assertFalse(node1.isBreak());
598:       assertFalse(node1.isComma());
599:       assertFalse(node1.isContinue());
600:       assertTrue(node1.isAssignAdd());
601:       assertFalse(node1.isFalse());
602:       assertFalse(node1.isCall());
603:       assertFalse(node1.isReturn());
604:       assertFalse(node1.isWhile());
605:       assertFalse(node1.isAnd());
606:       assertFalse(node1.isNot());
607:       assertFalse(node1.isDebugger());
608:       assertFalse(node1.isGetProp());
609:       assertFalse(node1.isObjectLit());
610:       assertFalse(node1.isString());
611:       assertEquals(46, node1.getLineno());
612:       assertFalse(node1.isTry());
613:       assertFalse(node1.isArrayLit());
614:       assertEquals(188432, node1.getSourcePosition());
615:       assertFalse(node1.isVoid());
616:       assertFalse(node1.isTrue());
617:       assertFalse(node1.isFor());
618:       assertFalse(node1.isIf());
619:       assertTrue(node1.hasOneChild());
620:       assertFalse(node1.isDelProp());
621:       assertFalse(node1.isRegExp());
622:       assertFalse(node1.isFunction());
623:       assertTrue(node1.hasChildren());
624:       assertFalse(node1.isCatch());
625:       assertFalse(node1.isIn());
626:       assertFalse(node1.isNE());
627:       assertFalse(node1.isDefaultCase());
628:       assertFalse(node1.isNull());
629:       assertFalse(node1.isSetterDef());
630:       assertFalse(node1.isInc());
631:       assertFalse(node1.isEmpty());
632:       assertEquals(93, node1.getType());
633:       assertFalse(node1.isHook());
634:       assertFalse(node1.isNew());
635:       assertFalse(node1.isStringKey());
636:       assertFalse(node1.isBlock());
637:       assertFalse(node1.isVar());
638:       assertFalse(node1.isSwitch());
639:       assertFalse(node1.hasMoreThanOneChild());
640:       assertEquals(1, node1.getChildCount());
641:       assertEquals(16, node1.getCharno());
642:       assertFalse(node1.isThis());
643:       assertFalse(node1.isParamList());
644:       assertFalse(node1.isNumber());
645:       assertFalse(node1.isScript());
646:       assertFalse(node1.isGetterDef());
647:       assertFalse(node1.isCase());
648:       
649:       Iterable<Node> iterable0 = node0.children();
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
652:       assertEquals(50, Node.FREE_CALL);
653:       assertEquals(8, Node.FLAG_NO_THROWS);
654:       assertEquals(48, Node.DIRECTIVES);
655:       assertEquals(39, Node.EMPTY_BLOCK);
656:       assertEquals(40, Node.ORIGINALNAME_PROP);
657:       assertEquals(52, Node.LENGTH);
658:       assertEquals(54, Node.SLASH_V);
659:       assertEquals(57, Node.REFLECTED_OBJECT);
660:       assertEquals(15, Node.NO_SIDE_EFFECTS);
661:       assertEquals(57, Node.LAST_PROP);
662:       assertEquals(43, Node.IS_CONSTANT_NAME);
663:       assertEquals(36, Node.QUOTED_PROP);
664:       assertEquals(30, Node.VAR_ARGS_NAME);
665:       assertEquals(55, Node.INFERRED_FUNCTION);
666:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
667:       assertEquals(53, Node.INPUT_ID);
668:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
669:       assertEquals(47, Node.IS_DISPATCHER);
670:       assertEquals(56, Node.CHANGE_TIME);
671:       assertEquals(2, Node.POST_FLAG);
672:       assertEquals(37, Node.OPT_ARG_NAME);
673:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
674:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
675:       assertEquals(29, Node.JSDOC_INFO_PROP);
676:       assertEquals(46, Node.IS_NAMESPACE);
677:       assertEquals(51, Node.STATIC_SOURCE_FILE);
678:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
679:       assertEquals(49, Node.DIRECT_EVAL);
680:       assertEquals(1, Node.DECR_FLAG);
681:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
682:       assertEquals(4095, Node.COLUMN_MASK);
683:       assertEquals(32, Node.INCRDECR_PROP);
684:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
685:       assertEquals(12, Node.COLUMN_BITS);
686:       assertFalse(node0.equals((Object)node1));
687:       assertNotNull(iterable0);
688:       assertFalse(iterable0.contains(node1));
689:       assertFalse(node0.isName());
690:       assertFalse(node0.isCall());
691:       assertFalse(node0.isStringKey());
692:       assertFalse(node0.isSetterDef());
693:       assertEquals(93, node0.getType());
694:       assertFalse(node0.isAdd());
695:       assertFalse(node0.isParamList());
696:       assertFalse(node0.isNull());
697:       assertFalse(node0.isWhile());
698:       assertFalse(node0.isCatch());
699:       assertFalse(node0.isVoid());
700:       assertEquals((-1), node0.getLineno());
701:       assertFalse(node0.isTry());
702:       assertFalse(node0.isReturn());
703:       assertFalse(node0.isBlock());
704:       assertFalse(node0.isTypeOf());
705:       assertFalse(node0.isRegExp());
706:       assertFalse(node0.hasMoreThanOneChild());
707:       assertFalse(node0.hasChildren());
708:       assertFalse(node0.isDec());
709:       assertFalse(node0.isIf());
710:       assertFalse(node0.isCast());
711:       assertFalse(node0.isIn());
712:       assertFalse(node0.isNE());
713:       assertFalse(node0.isDebugger());
714:       assertEquals((-1), node0.getSourcePosition());
715:       assertFalse(node0.isContinue());
716:       assertFalse(node0.isAnd());
717:       assertFalse(node0.isInc());
718:       assertFalse(node0.isFunction());
719:       assertTrue(node0.isAssignAdd());
720:       assertFalse(node0.isFalse());
721:       assertFalse(node0.isThrow());
722:       assertFalse(node0.isBreak());
723:       assertFalse(node0.isGetProp());
724:       assertEquals((-1), node0.getCharno());
725:       assertFalse(node0.isObjectLit());
726:       assertFalse(node0.isCase());
727:       assertFalse(node0.isNot());
728:       assertFalse(node0.isWith());
729:       assertFalse(node0.isString());
730:       assertFalse(node0.isScript());
731:       assertFalse(node0.isExprResult());
732:       assertFalse(node0.isInstanceOf());
733:       assertFalse(node0.isHook());
734:       assertFalse(node0.isThis());
735:       assertFalse(node0.isComma());
736:       assertFalse(node0.isAssign());
737:       assertFalse(node0.isLabelName());
738:       assertFalse(node0.isEmpty());
739:       assertFalse(node0.isFor());
740:       assertFalse(node0.isGetElem());
741:       assertFalse(node0.isArrayLit());
742:       assertFalse(node0.isDelProp());
743:       assertFalse(node0.hasOneChild());
744:       assertFalse(node0.isOr());
745:       assertFalse(node0.isTrue());
746:       assertFalse(node0.isNumber());
747:       assertFalse(node0.isGetterDef());
748:       assertFalse(node0.isDo());
749:       assertFalse(node0.isDefaultCase());
750:       assertFalse(node0.isSwitch());
751:       assertFalse(node0.isNew());
752:       assertFalse(node0.isLabel());
753:       assertFalse(node0.isVar());
754:       assertEquals(0, node0.getChildCount());
755:       
756:       boolean boolean0 = node1.isContinue();
757:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
758:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
759:       assertEquals(50, Node.FREE_CALL);
760:       assertEquals(8, Node.FLAG_NO_THROWS);
761:       assertEquals(48, Node.DIRECTIVES);
762:       assertEquals(39, Node.EMPTY_BLOCK);
763:       assertEquals(40, Node.ORIGINALNAME_PROP);
764:       assertEquals(52, Node.LENGTH);
765:       assertEquals(54, Node.SLASH_V);
766:       assertEquals(57, Node.REFLECTED_OBJECT);
767:       assertEquals(15, Node.NO_SIDE_EFFECTS);
768:       assertEquals(57, Node.LAST_PROP);
769:       assertEquals(43, Node.IS_CONSTANT_NAME);
770:       assertEquals(36, Node.QUOTED_PROP);
771:       assertEquals(30, Node.VAR_ARGS_NAME);
772:       assertEquals(55, Node.INFERRED_FUNCTION);
773:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
774:       assertEquals(53, Node.INPUT_ID);
775:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(56, Node.CHANGE_TIME);
778:       assertEquals(2, Node.POST_FLAG);
779:       assertEquals(37, Node.OPT_ARG_NAME);
780:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
781:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
782:       assertEquals(29, Node.JSDOC_INFO_PROP);
783:       assertEquals(46, Node.IS_NAMESPACE);
784:       assertEquals(51, Node.STATIC_SOURCE_FILE);
785:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
786:       assertEquals(49, Node.DIRECT_EVAL);
787:       assertEquals(1, Node.DECR_FLAG);
788:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
789:       assertEquals(4095, Node.COLUMN_MASK);
790:       assertEquals(32, Node.INCRDECR_PROP);
791:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
792:       assertEquals(12, Node.COLUMN_BITS);
793:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
794:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
795:       assertEquals(29, Node.JSDOC_INFO_PROP);
796:       assertEquals(37, Node.OPT_ARG_NAME);
797:       assertEquals(47, Node.IS_DISPATCHER);
798:       assertEquals(2, Node.POST_FLAG);
799:       assertEquals(12, Node.COLUMN_BITS);
800:       assertEquals(46, Node.IS_NAMESPACE);
801:       assertEquals(1, Node.DECR_FLAG);
802:       assertEquals(32, Node.INCRDECR_PROP);
803:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
804:       assertEquals(43, Node.IS_CONSTANT_NAME);
805:       assertEquals(54, Node.SLASH_V);
806:       assertEquals(51, Node.STATIC_SOURCE_FILE);
807:       assertEquals(50, Node.FREE_CALL);
808:       assertEquals(57, Node.REFLECTED_OBJECT);
809:       assertEquals(40, Node.ORIGINALNAME_PROP);
810:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
811:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
812:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
813:       assertEquals(30, Node.VAR_ARGS_NAME);
814:       assertEquals(55, Node.INFERRED_FUNCTION);
815:       assertEquals(4095, Node.COLUMN_MASK);
816:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
817:       assertEquals(57, Node.LAST_PROP);
818:       assertEquals(48, Node.DIRECTIVES);
819:       assertEquals(49, Node.DIRECT_EVAL);
820:       assertEquals(8, Node.FLAG_NO_THROWS);
821:       assertEquals(39, Node.EMPTY_BLOCK);
822:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
823:       assertEquals(56, Node.CHANGE_TIME);
824:       assertEquals(15, Node.NO_SIDE_EFFECTS);
825:       assertEquals(53, Node.INPUT_ID);
826:       assertEquals(52, Node.LENGTH);
827:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
828:       assertEquals(36, Node.QUOTED_PROP);
829:       assertFalse(node0.equals((Object)node1));
830:       assertFalse(node1.equals((Object)node0));
831:       assertFalse(boolean0);
832:       assertFalse(node0.isName());
833:       assertFalse(node0.isCall());
834:       assertFalse(node0.isStringKey());
835:       assertFalse(node0.isSetterDef());
836:       assertEquals(93, node0.getType());
837:       assertFalse(node0.isAdd());
838:       assertFalse(node0.isParamList());
839:       assertFalse(node0.isNull());
840:       assertFalse(node0.isWhile());
841:       assertFalse(node0.isCatch());
842:       assertFalse(node0.isVoid());
843:       assertEquals((-1), node0.getLineno());
844:       assertFalse(node0.isTry());
845:       assertFalse(node0.isReturn());
846:       assertFalse(node0.isBlock());
847:       assertFalse(node0.isTypeOf());
848:       assertFalse(node0.isRegExp());
849:       assertFalse(node0.hasMoreThanOneChild());
850:       assertFalse(node0.hasChildren());
851:       assertFalse(node0.isDec());
852:       assertFalse(node0.isIf());
853:       assertFalse(node0.isCast());
854:       assertFalse(node0.isIn());
855:       assertFalse(node0.isNE());
856:       assertFalse(node0.isDebugger());
857:       assertEquals((-1), node0.getSourcePosition());
858:       assertFalse(node0.isContinue());
859:       assertFalse(node0.isAnd());
860:       assertFalse(node0.isInc());
861:       assertFalse(node0.isFunction());
862:       assertTrue(node0.isAssignAdd());
863:       assertFalse(node0.isFalse());
864:       assertFalse(node0.isThrow());
865:       assertFalse(node0.isBreak());
866:       assertFalse(node0.isGetProp());
867:       assertEquals((-1), node0.getCharno());
868:       assertFalse(node0.isObjectLit());
869:       assertFalse(node0.isCase());
870:       assertFalse(node0.isNot());
871:       assertFalse(node0.isWith());
872:       assertFalse(node0.isString());
873:       assertFalse(node0.isScript());
874:       assertFalse(node0.isExprResult());
875:       assertFalse(node0.isInstanceOf());
876:       assertFalse(node0.isHook());
877:       assertFalse(node0.isThis());
878:       assertFalse(node0.isComma());
879:       assertFalse(node0.isAssign());
880:       assertFalse(node0.isLabelName());
881:       assertFalse(node0.isEmpty());
882:       assertFalse(node0.isFor());
883:       assertFalse(node0.isGetElem());
884:       assertFalse(node0.isArrayLit());
885:       assertFalse(node0.isDelProp());
886:       assertFalse(node0.hasOneChild());
887:       assertFalse(node0.isOr());
888:       assertFalse(node0.isTrue());
889:       assertFalse(node0.isNumber());
890:       assertFalse(node0.isGetterDef());
891:       assertFalse(node0.isDo());
892:       assertFalse(node0.isDefaultCase());
893:       assertFalse(node0.isSwitch());
894:       assertFalse(node0.isNew());
895:       assertFalse(node0.isLabel());
896:       assertFalse(node0.isVar());
897:       assertEquals(0, node0.getChildCount());
898:       assertFalse(node1.isDec());
899:       assertFalse(node1.isTypeOf());
900:       assertFalse(node1.isAssign());
901:       assertFalse(node1.isLabelName());
902:       assertFalse(node1.isGetElem());
903:       assertFalse(node1.isExprResult());
904:       assertFalse(node1.isWith());
905:       assertFalse(node1.isCast());
906:       assertFalse(node1.isInstanceOf());
907:       assertFalse(node1.isLabel());
908:       assertFalse(node1.isOr());
909:       assertFalse(node1.isDo());
910:       assertFalse(node1.isAdd());
911:       assertFalse(node1.isThrow());
912:       assertFalse(node1.isName());
913:       assertFalse(node1.isBreak());
914:       assertFalse(node1.isComma());
915:       assertFalse(node1.isContinue());
916:       assertTrue(node1.isAssignAdd());
917:       assertFalse(node1.isFalse());
918:       assertFalse(node1.isCall());
919:       assertFalse(node1.isReturn());
920:       assertFalse(node1.isWhile());
921:       assertFalse(node1.isAnd());
922:       assertFalse(node1.isNot());
923:       assertFalse(node1.isDebugger());
924:       assertFalse(node1.isGetProp());
925:       assertFalse(node1.isObjectLit());
926:       assertFalse(node1.isString());
927:       assertEquals(46, node1.getLineno());
928:       assertFalse(node1.isTry());
929:       assertFalse(node1.isArrayLit());
930:       assertEquals(188432, node1.getSourcePosition());
931:       assertFalse(node1.isVoid());
932:       assertFalse(node1.isTrue());
933:       assertFalse(node1.isFor());
934:       assertFalse(node1.isIf());
935:       assertTrue(node1.hasOneChild());
936:       assertFalse(node1.isDelProp());
937:       assertFalse(node1.isRegExp());
938:       assertFalse(node1.isFunction());
939:       assertTrue(node1.hasChildren());
940:       assertFalse(node1.isCatch());
941:       assertFalse(node1.isIn());
942:       assertFalse(node1.isNE());
943:       assertFalse(node1.isDefaultCase());
944:       assertFalse(node1.isNull());
945:       assertFalse(node1.isSetterDef());
946:       assertFalse(node1.isInc());
947:       assertFalse(node1.isEmpty());
948:       assertEquals(93, node1.getType());
949:       assertFalse(node1.isHook());
950:       assertFalse(node1.isNew());
951:       assertFalse(node1.isStringKey());
952:       assertFalse(node1.isBlock());
953:       assertFalse(node1.isVar());
954:       assertFalse(node1.isSwitch());
955:       assertFalse(node1.hasMoreThanOneChild());
956:       assertEquals(1, node1.getChildCount());
957:       assertEquals(16, node1.getCharno());
958:       assertFalse(node1.isThis());
959:       assertFalse(node1.isParamList());
960:       assertFalse(node1.isNumber());
961:       assertFalse(node1.isScript());
962:       assertFalse(node1.isGetterDef());
963:       assertFalse(node1.isCase());
964:       
965:       JSType jSType0 = node0.getJSType();
966:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
967:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
968:       assertEquals(50, Node.FREE_CALL);
969:       assertEquals(8, Node.FLAG_NO_THROWS);
970:       assertEquals(48, Node.DIRECTIVES);
971:       assertEquals(39, Node.EMPTY_BLOCK);
972:       assertEquals(40, Node.ORIGINALNAME_PROP);
973:       assertEquals(52, Node.LENGTH);
974:       assertEquals(54, Node.SLASH_V);
975:       assertEquals(57, Node.REFLECTED_OBJECT);
976:       assertEquals(15, Node.NO_SIDE_EFFECTS);
977:       assertEquals(57, Node.LAST_PROP);
978:       assertEquals(43, Node.IS_CONSTANT_NAME);
979:       assertEquals(36, Node.QUOTED_PROP);
980:       assertEquals(30, Node.VAR_ARGS_NAME);
981:       assertEquals(55, Node.INFERRED_FUNCTION);
982:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
983:       assertEquals(53, Node.INPUT_ID);
984:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
985:       assertEquals(47, Node.IS_DISPATCHER);
986:       assertEquals(56, Node.CHANGE_TIME);
987:       assertEquals(2, Node.POST_FLAG);
988:       assertEquals(37, Node.OPT_ARG_NAME);
989:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
990:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
991:       assertEquals(29, Node.JSDOC_INFO_PROP);
992:       assertEquals(46, Node.IS_NAMESPACE);
993:       assertEquals(51, Node.STATIC_SOURCE_FILE);
994:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
995:       assertEquals(49, Node.DIRECT_EVAL);
996:       assertEquals(1, Node.DECR_FLAG);
997:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
998:       assertEquals(4095, Node.COLUMN_MASK);
999:       assertEquals(32, Node.INCRDECR_PROP);
1000:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1001:       assertEquals(12, Node.COLUMN_BITS);
1002:       assertFalse(node0.equals((Object)node1));
1003:       assertNull(jSType0);
1004:       assertFalse(node0.isName());
1005:       assertFalse(node0.isCall());
1006:       assertFalse(node0.isStringKey());
1007:       assertFalse(node0.isSetterDef());
1008:       assertEquals(93, node0.getType());
1009:       assertFalse(node0.isAdd());
1010:       assertFalse(node0.isParamList());
1011:       assertFalse(node0.isNull());
1012:       assertFalse(node0.isWhile());
1013:       assertFalse(node0.isCatch());
1014:       assertFalse(node0.isVoid());
1015:       assertEquals((-1), node0.getLineno());
1016:       assertFalse(node0.isTry());
1017:       assertFalse(node0.isReturn());
1018:       assertFalse(node0.isBlock());
1019:       assertFalse(node0.isTypeOf());
1020:       assertFalse(node0.isRegExp());
1021:       assertFalse(node0.hasMoreThanOneChild());
1022:       assertFalse(node0.hasChildren());
1023:       assertFalse(node0.isDec());
1024:       assertFalse(node0.isIf());
1025:       assertFalse(node0.isCast());
1026:       assertFalse(node0.isIn());
1027:       assertFalse(node0.isNE());
1028:       assertFalse(node0.isDebugger());
1029:       assertEquals((-1), node0.getSourcePosition());
1030:       assertFalse(node0.isContinue());
1031:       assertFalse(node0.isAnd());
1032:       assertFalse(node0.isInc());
1033:       assertFalse(node0.isFunction());
1034:       assertTrue(node0.isAssignAdd());
1035:       assertFalse(node0.isFalse());
1036:       assertFalse(node0.isThrow());
1037:       assertFalse(node0.isBreak());
1038:       assertFalse(node0.isGetProp());
1039:       assertEquals((-1), node0.getCharno());
1040:       assertFalse(node0.isObjectLit());
1041:       assertFalse(node0.isCase());
1042:       assertFalse(node0.isNot());
1043:       assertFalse(node0.isWith());
1044:       assertFalse(node0.isString());
1045:       assertFalse(node0.isScript());
1046:       assertFalse(node0.isExprResult());
1047:       assertFalse(node0.isInstanceOf());
1048:       assertFalse(node0.isHook());
1049:       assertFalse(node0.isThis());
1050:       assertFalse(node0.isComma());
1051:       assertFalse(node0.isAssign());
1052:       assertFalse(node0.isLabelName());
1053:       assertFalse(node0.isEmpty());
1054:       assertFalse(node0.isFor());
1055:       assertFalse(node0.isGetElem());
1056:       assertFalse(node0.isArrayLit());
1057:       assertFalse(node0.isDelProp());
1058:       assertFalse(node0.hasOneChild());
1059:       assertFalse(node0.isOr());
1060:       assertFalse(node0.isTrue());
1061:       assertFalse(node0.isNumber());
1062:       assertFalse(node0.isGetterDef());
1063:       assertFalse(node0.isDo());
1064:       assertFalse(node0.isDefaultCase());
1065:       assertFalse(node0.isSwitch());
1066:       assertFalse(node0.isNew());
1067:       assertFalse(node0.isLabel());
1068:       assertFalse(node0.isVar());
1069:       assertEquals(0, node0.getChildCount());
1070:       
1071:       int int0 = node0.getLength();
1072:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1073:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1074:       assertEquals(50, Node.FREE_CALL);
1075:       assertEquals(8, Node.FLAG_NO_THROWS);
1076:       assertEquals(48, Node.DIRECTIVES);
1077:       assertEquals(39, Node.EMPTY_BLOCK);
1078:       assertEquals(40, Node.ORIGINALNAME_PROP);
1079:       assertEquals(52, Node.LENGTH);
1080:       assertEquals(54, Node.SLASH_V);
1081:       assertEquals(57, Node.REFLECTED_OBJECT);
1082:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1083:       assertEquals(57, Node.LAST_PROP);
1084:       assertEquals(43, Node.IS_CONSTANT_NAME);
1085:       assertEquals(36, Node.QUOTED_PROP);
1086:       assertEquals(30, Node.VAR_ARGS_NAME);
1087:       assertEquals(55, Node.INFERRED_FUNCTION);
1088:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1089:       assertEquals(53, Node.INPUT_ID);
1090:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1091:       assertEquals(47, Node.IS_DISPATCHER);
1092:       assertEquals(56, Node.CHANGE_TIME);
1093:       assertEquals(2, Node.POST_FLAG);
1094:       assertEquals(37, Node.OPT_ARG_NAME);
1095:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1096:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1097:       assertEquals(29, Node.JSDOC_INFO_PROP);
1098:       assertEquals(46, Node.IS_NAMESPACE);
1099:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1101:       assertEquals(49, Node.DIRECT_EVAL);
1102:       assertEquals(1, Node.DECR_FLAG);
1103:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1104:       assertEquals(4095, Node.COLUMN_MASK);
1105:       assertEquals(32, Node.INCRDECR_PROP);
1106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1107:       assertEquals(12, Node.COLUMN_BITS);
1108:       assertFalse(node0.equals((Object)node1));
1109:       assertEquals(0, int0);
1110:       assertFalse(node0.isName());
1111:       assertFalse(node0.isCall());
1112:       assertFalse(node0.isStringKey());
1113:       assertFalse(node0.isSetterDef());
1114:       assertEquals(93, node0.getType());
1115:       assertFalse(node0.isAdd());
1116:       assertFalse(node0.isParamList());
1117:       assertFalse(node0.isNull());
1118:       assertFalse(node0.isWhile());
1119:       assertFalse(node0.isCatch());
1120:       assertFalse(node0.isVoid());
1121:       assertEquals((-1), node0.getLineno());
1122:       assertFalse(node0.isTry());
1123:       assertFalse(node0.isReturn());
1124:       assertFalse(node0.isBlock());
1125:       assertFalse(node0.isTypeOf());
1126:       assertFalse(node0.isRegExp());
1127:       assertFalse(node0.hasMoreThanOneChild());
1128:       assertFalse(node0.hasChildren());
1129:       assertFalse(node0.isDec());
1130:       assertFalse(node0.isIf());
1131:       assertFalse(node0.isCast());
1132:       assertFalse(node0.isIn());
1133:       assertFalse(node0.isNE());
1134:       assertFalse(node0.isDebugger());
1135:       assertEquals((-1), node0.getSourcePosition());
1136:       assertFalse(node0.isContinue());
1137:       assertFalse(node0.isAnd());
1138:       assertFalse(node0.isInc());
1139:       assertFalse(node0.isFunction());
1140:       assertTrue(node0.isAssignAdd());
1141:       assertFalse(node0.isFalse());
1142:       assertFalse(node0.isThrow());
1143:       assertFalse(node0.isBreak());
1144:       assertFalse(node0.isGetProp());
1145:       assertEquals((-1), node0.getCharno());
1146:       assertFalse(node0.isObjectLit());
1147:       assertFalse(node0.isCase());
1148:       assertFalse(node0.isNot());
1149:       assertFalse(node0.isWith());
1150:       assertFalse(node0.isString());
1151:       assertFalse(node0.isScript());
1152:       assertFalse(node0.isExprResult());
1153:       assertFalse(node0.isInstanceOf());
1154:       assertFalse(node0.isHook());
1155:       assertFalse(node0.isThis());
1156:       assertFalse(node0.isComma());
1157:       assertFalse(node0.isAssign());
1158:       assertFalse(node0.isLabelName());
1159:       assertFalse(node0.isEmpty());
1160:       assertFalse(node0.isFor());
1161:       assertFalse(node0.isGetElem());
1162:       assertFalse(node0.isArrayLit());
1163:       assertFalse(node0.isDelProp());
1164:       assertFalse(node0.hasOneChild());
1165:       assertFalse(node0.isOr());
1166:       assertFalse(node0.isTrue());
1167:       assertFalse(node0.isNumber());
1168:       assertFalse(node0.isGetterDef());
1169:       assertFalse(node0.isDo());
1170:       assertFalse(node0.isDefaultCase());
1171:       assertFalse(node0.isSwitch());
1172:       assertFalse(node0.isNew());
1173:       assertFalse(node0.isLabel());
1174:       assertFalse(node0.isVar());
1175:       assertEquals(0, node0.getChildCount());
1176:       
1177:       boolean boolean1 = node0.isFunction();
1178:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1179:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1180:       assertEquals(50, Node.FREE_CALL);
1181:       assertEquals(8, Node.FLAG_NO_THROWS);
1182:       assertEquals(48, Node.DIRECTIVES);
1183:       assertEquals(39, Node.EMPTY_BLOCK);
1184:       assertEquals(40, Node.ORIGINALNAME_PROP);
1185:       assertEquals(52, Node.LENGTH);
1186:       assertEquals(54, Node.SLASH_V);
1187:       assertEquals(57, Node.REFLECTED_OBJECT);
1188:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1189:       assertEquals(57, Node.LAST_PROP);
1190:       assertEquals(43, Node.IS_CONSTANT_NAME);
1191:       assertEquals(36, Node.QUOTED_PROP);
1192:       assertEquals(30, Node.VAR_ARGS_NAME);
1193:       assertEquals(55, Node.INFERRED_FUNCTION);
1194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1195:       assertEquals(53, Node.INPUT_ID);
1196:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1197:       assertEquals(47, Node.IS_DISPATCHER);
1198:       assertEquals(56, Node.CHANGE_TIME);
1199:       assertEquals(2, Node.POST_FLAG);
1200:       assertEquals(37, Node.OPT_ARG_NAME);
1201:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1203:       assertEquals(29, Node.JSDOC_INFO_PROP);
1204:       assertEquals(46, Node.IS_NAMESPACE);
1205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1207:       assertEquals(49, Node.DIRECT_EVAL);
1208:       assertEquals(1, Node.DECR_FLAG);
1209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1210:       assertEquals(4095, Node.COLUMN_MASK);
1211:       assertEquals(32, Node.INCRDECR_PROP);
1212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1213:       assertEquals(12, Node.COLUMN_BITS);
1214:       assertFalse(node0.equals((Object)node1));
1215:       assertTrue(boolean1 == boolean0);
1216:       assertFalse(boolean1);
1217:       assertFalse(node0.isName());
1218:       assertFalse(node0.isCall());
1219:       assertFalse(node0.isStringKey());
1220:       assertFalse(node0.isSetterDef());
1221:       assertEquals(93, node0.getType());
1222:       assertFalse(node0.isAdd());
1223:       assertFalse(node0.isParamList());
1224:       assertFalse(node0.isNull());
1225:       assertFalse(node0.isWhile());
1226:       assertFalse(node0.isCatch());
1227:       assertFalse(node0.isVoid());
1228:       assertEquals((-1), node0.getLineno());
1229:       assertFalse(node0.isTry());
1230:       assertFalse(node0.isReturn());
1231:       assertFalse(node0.isBlock());
1232:       assertFalse(node0.isTypeOf());
1233:       assertFalse(node0.isRegExp());
1234:       assertFalse(node0.hasMoreThanOneChild());
1235:       assertFalse(node0.hasChildren());
1236:       assertFalse(node0.isDec());
1237:       assertFalse(node0.isIf());
1238:       assertFalse(node0.isCast());
1239:       assertFalse(node0.isIn());
1240:       assertFalse(node0.isNE());
1241:       assertFalse(node0.isDebugger());
1242:       assertEquals((-1), node0.getSourcePosition());
1243:       assertFalse(node0.isContinue());
1244:       assertFalse(node0.isAnd());
1245:       assertFalse(node0.isInc());
1246:       assertFalse(node0.isFunction());
1247:       assertTrue(node0.isAssignAdd());
1248:       assertFalse(node0.isFalse());
1249:       assertFalse(node0.isThrow());
1250:       assertFalse(node0.isBreak());
1251:       assertFalse(node0.isGetProp());
1252:       assertEquals((-1), node0.getCharno());
1253:       assertFalse(node0.isObjectLit());
1254:       assertFalse(node0.isCase());
1255:       assertFalse(node0.isNot());
1256:       assertFalse(node0.isWith());
1257:       assertFalse(node0.isString());
1258:       assertFalse(node0.isScript());
1259:       assertFalse(node0.isExprResult());
1260:       assertFalse(node0.isInstanceOf());
1261:       assertFalse(node0.isHook());
1262:       assertFalse(node0.isThis());
1263:       assertFalse(node0.isComma());
1264:       assertFalse(node0.isAssign());
1265:       assertFalse(node0.isLabelName());
1266:       assertFalse(node0.isEmpty());
1267:       assertFalse(node0.isFor());
1268:       assertFalse(node0.isGetElem());
1269:       assertFalse(node0.isArrayLit());
1270:       assertFalse(node0.isDelProp());
1271:       assertFalse(node0.hasOneChild());
1272:       assertFalse(node0.isOr());
1273:       assertFalse(node0.isTrue());
1274:       assertFalse(node0.isNumber());
1275:       assertFalse(node0.isGetterDef());
1276:       assertFalse(node0.isDo());
1277:       assertFalse(node0.isDefaultCase());
1278:       assertFalse(node0.isSwitch());
1279:       assertFalse(node0.isNew());
1280:       assertFalse(node0.isLabel());
1281:       assertFalse(node0.isVar());
1282:       assertEquals(0, node0.getChildCount());
1283:       
1284:       boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
1285:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1286:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1287:       assertEquals(50, Node.FREE_CALL);
1288:       assertEquals(8, Node.FLAG_NO_THROWS);
1289:       assertEquals(48, Node.DIRECTIVES);
1290:       assertEquals(39, Node.EMPTY_BLOCK);
1291:       assertEquals(40, Node.ORIGINALNAME_PROP);
1292:       assertEquals(52, Node.LENGTH);
1293:       assertEquals(54, Node.SLASH_V);
1294:       assertEquals(57, Node.REFLECTED_OBJECT);
1295:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1296:       assertEquals(57, Node.LAST_PROP);
1297:       assertEquals(43, Node.IS_CONSTANT_NAME);
1298:       assertEquals(36, Node.QUOTED_PROP);
1299:       assertEquals(30, Node.VAR_ARGS_NAME);
1300:       assertEquals(55, Node.INFERRED_FUNCTION);
1301:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1302:       assertEquals(53, Node.INPUT_ID);
1303:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1304:       assertEquals(47, Node.IS_DISPATCHER);
1305:       assertEquals(56, Node.CHANGE_TIME);
1306:       assertEquals(2, Node.POST_FLAG);
1307:       assertEquals(37, Node.OPT_ARG_NAME);
1308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1309:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1310:       assertEquals(29, Node.JSDOC_INFO_PROP);
1311:       assertEquals(46, Node.IS_NAMESPACE);
1312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1314:       assertEquals(49, Node.DIRECT_EVAL);
1315:       assertEquals(1, Node.DECR_FLAG);
1316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1317:       assertEquals(4095, Node.COLUMN_MASK);
1318:       assertEquals(32, Node.INCRDECR_PROP);
1319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1320:       assertEquals(12, Node.COLUMN_BITS);
1321:       assertFalse(node0.equals((Object)node1));
1322:       assertTrue(boolean2 == boolean0);
1323:       assertTrue(boolean2 == boolean1);
1324:       assertFalse(boolean2);
1325:       assertFalse(node0.isName());
1326:       assertFalse(node0.isCall());
1327:       assertFalse(node0.isStringKey());
1328:       assertFalse(node0.isSetterDef());
1329:       assertEquals(93, node0.getType());
1330:       assertFalse(node0.isAdd());
1331:       assertFalse(node0.isParamList());
1332:       assertFalse(node0.isNull());
1333:       assertFalse(node0.isWhile());
1334:       assertFalse(node0.isCatch());
1335:       assertFalse(node0.isVoid());
1336:       assertEquals((-1), node0.getLineno());
1337:       assertFalse(node0.isTry());
1338:       assertFalse(node0.isReturn());
1339:       assertFalse(node0.isBlock());
1340:       assertFalse(node0.isTypeOf());
1341:       assertFalse(node0.isRegExp());
1342:       assertFalse(node0.hasMoreThanOneChild());
1343:       assertFalse(node0.hasChildren());
1344:       assertFalse(node0.isDec());
1345:       assertFalse(node0.isIf());
1346:       assertFalse(node0.isCast());
1347:       assertFalse(node0.isIn());
1348:       assertFalse(node0.isNE());
1349:       assertFalse(node0.isDebugger());
1350:       assertEquals((-1), node0.getSourcePosition());
1351:       assertFalse(node0.isContinue());
1352:       assertFalse(node0.isAnd());
1353:       assertFalse(node0.isInc());
1354:       assertFalse(node0.isFunction());
1355:       assertTrue(node0.isAssignAdd());
1356:       assertFalse(node0.isFalse());
1357:       assertFalse(node0.isThrow());
1358:       assertFalse(node0.isBreak());
1359:       assertFalse(node0.isGetProp());
1360:       assertEquals((-1), node0.getCharno());
1361:       assertFalse(node0.isObjectLit());
1362:       assertFalse(node0.isCase());
1363:       assertFalse(node0.isNot());
1364:       assertFalse(node0.isWith());
1365:       assertFalse(node0.isString());
1366:       assertFalse(node0.isScript());
1367:       assertFalse(node0.isExprResult());
1368:       assertFalse(node0.isInstanceOf());
1369:       assertFalse(node0.isHook());
1370:       assertFalse(node0.isThis());
1371:       assertFalse(node0.isComma());
1372:       assertFalse(node0.isAssign());
1373:       assertFalse(node0.isLabelName());
1374:       assertFalse(node0.isEmpty());
1375:       assertFalse(node0.isFor());
1376:       assertFalse(node0.isGetElem());
1377:       assertFalse(node0.isArrayLit());
1378:       assertFalse(node0.isDelProp());
1379:       assertFalse(node0.hasOneChild());
1380:       assertFalse(node0.isOr());
1381:       assertFalse(node0.isTrue());
1382:       assertFalse(node0.isNumber());
1383:       assertFalse(node0.isGetterDef());
1384:       assertFalse(node0.isDo());
1385:       assertFalse(node0.isDefaultCase());
1386:       assertFalse(node0.isSwitch());
1387:       assertFalse(node0.isNew());
1388:       assertFalse(node0.isLabel());
1389:       assertFalse(node0.isVar());
1390:       assertEquals(0, node0.getChildCount());
1391:       
1392:       try { 
1393:         node1.setString("Named type with empty name component");
1394:         fail("Expecting exception: UnsupportedOperationException");
1395:       
1396:       } catch(UnsupportedOperationException e) {
1397:          //
1398:          // ASSIGN_ADD 46 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
1399:          //
1400:          verifyException("com.google.javascript.rhino.Node", e);
1401:       }
1402:   }
1403: }
RegularFileObject[/tmp/EvoSuite_427_1628159623331/com/google/javascript/rhino/Node_427_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_427_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_427_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_427_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:43.517 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(93, "");
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node0);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNull(staticSourceFile0);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());

Node node1 = new Node(93, node0, node0, node0, 46, 16);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isContinue());
assertTrue(node1.isAssignAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertEquals(46, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals(188432, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertEquals(93, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertEquals(16, node1.getCharno());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());

node1.setLength(38);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isContinue());
assertTrue(node1.isAssignAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertEquals(46, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals(188432, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertEquals(93, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertEquals(16, node1.getCharno());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());

Iterable<Node> iterable0 = node0.children();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());

boolean boolean0 = node1.isContinue();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isContinue());
assertTrue(node1.isAssignAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertEquals(46, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals(188432, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertEquals(93, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertEquals(16, node1.getCharno());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());

JSType jSType0 = node0.getJSType();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertNull(jSType0);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());

int int0 = node0.getLength();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertEquals(0, int0);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());

boolean boolean1 = node0.isFunction();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());

boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals(93, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertTrue(node0.isAssignAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());

node1.setString("Named type with empty name component");

[MASTER] 10:33:43.643 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_431_1628159623618/com/google/javascript/rhino/Node_431_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_431_1628159623618/com/google/javascript/rhino/Node_431_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:43.643 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:43.643 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:43.643 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 375
[MASTER] 10:33:43.644 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_431_1628159623618/com/google/javascript/rhino/Node_431_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_431_tmp__ESTest extends Node_431_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(4095, "The existing child node of the parent should not be null.");
22:       assertEquals(30, Node.VAR_ARGS_NAME);
23:       assertEquals(57, Node.LAST_PROP);
24:       assertEquals(1, Node.DECR_FLAG);
25:       assertEquals(49, Node.DIRECT_EVAL);
26:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
27:       assertEquals(12, Node.COLUMN_BITS);
28:       assertEquals(46, Node.IS_NAMESPACE);
29:       assertEquals(54, Node.SLASH_V);
30:       assertEquals(37, Node.OPT_ARG_NAME);
31:       assertEquals(40, Node.ORIGINALNAME_PROP);
32:       assertEquals(50, Node.FREE_CALL);
33:       assertEquals(51, Node.STATIC_SOURCE_FILE);
34:       assertEquals(32, Node.INCRDECR_PROP);
35:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
36:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(43, Node.IS_CONSTANT_NAME);
40:       assertEquals(48, Node.DIRECTIVES);
41:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
42:       assertEquals(4095, Node.COLUMN_MASK);
43:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(2, Node.POST_FLAG);
46:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(47, Node.IS_DISPATCHER);
49:       assertEquals(57, Node.REFLECTED_OBJECT);
50:       assertEquals(52, Node.LENGTH);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(8, Node.FLAG_NO_THROWS);
53:       assertEquals(39, Node.EMPTY_BLOCK);
54:       assertEquals(15, Node.NO_SIDE_EFFECTS);
55:       assertEquals(29, Node.JSDOC_INFO_PROP);
56:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
57:       assertEquals(53, Node.INPUT_ID);
58:       assertNotNull(node0);
59:       assertFalse(node0.isContinue());
60:       assertFalse(node0.hasMoreThanOneChild());
61:       assertFalse(node0.isWhile());
62:       assertFalse(node0.isReturn());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.isOr());
65:       assertFalse(node0.isLabelName());
66:       assertEquals((-1), node0.getLineno());
67:       assertFalse(node0.isName());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isCast());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isAdd());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isDo());
74:       assertFalse(node0.isSetterDef());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isObjectLit());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isNot());
79:       assertFalse(node0.isDebugger());
80:       assertFalse(node0.isVoid());
81:       assertEquals(4095, node0.getType());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isFunction());
85:       assertFalse(node0.isBreak());
86:       assertFalse(node0.isGetElem());
87:       assertFalse(node0.isCall());
88:       assertFalse(node0.isDec());
89:       assertFalse(node0.hasChildren());
90:       assertFalse(node0.isTypeOf());
91:       assertFalse(node0.isAssign());
92:       assertFalse(node0.isComma());
93:       assertEquals((-1), node0.getSourcePosition());
94:       assertFalse(node0.isGetProp());
95:       assertFalse(node0.isString());
96:       assertFalse(node0.isIn());
97:       assertEquals((-1), node0.getCharno());
98:       assertFalse(node0.isSwitch());
99:       assertFalse(node0.isNE());
100:       assertFalse(node0.isIf());
101:       assertFalse(node0.isDelProp());
102:       assertFalse(node0.isThrow());
103:       assertFalse(node0.isFalse());
104:       assertFalse(node0.isEmpty());
105:       assertFalse(node0.isInc());
106:       assertFalse(node0.isDefaultCase());
107:       assertFalse(node0.isCatch());
108:       assertFalse(node0.isWith());
109:       assertFalse(node0.isInstanceOf());
110:       assertEquals(0, node0.getChildCount());
111:       assertFalse(node0.isRegExp());
112:       assertFalse(node0.isParamList());
113:       assertFalse(node0.isArrayLit());
114:       assertFalse(node0.isFor());
115:       assertFalse(node0.isStringKey());
116:       assertFalse(node0.isGetterDef());
117:       assertFalse(node0.isNumber());
118:       assertFalse(node0.isHook());
119:       assertFalse(node0.isBlock());
120:       assertFalse(node0.isThis());
121:       assertFalse(node0.isScript());
122:       assertFalse(node0.isTry());
123:       assertFalse(node0.hasOneChild());
124:       assertFalse(node0.isCase());
125:       
126:       boolean boolean0 = node0.isFalse();
127:       assertEquals(30, Node.VAR_ARGS_NAME);
128:       assertEquals(57, Node.LAST_PROP);
129:       assertEquals(1, Node.DECR_FLAG);
130:       assertEquals(49, Node.DIRECT_EVAL);
131:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
132:       assertEquals(12, Node.COLUMN_BITS);
133:       assertEquals(46, Node.IS_NAMESPACE);
134:       assertEquals(54, Node.SLASH_V);
135:       assertEquals(37, Node.OPT_ARG_NAME);
136:       assertEquals(40, Node.ORIGINALNAME_PROP);
137:       assertEquals(50, Node.FREE_CALL);
138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
139:       assertEquals(32, Node.INCRDECR_PROP);
140:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
143:       assertEquals(36, Node.QUOTED_PROP);
144:       assertEquals(43, Node.IS_CONSTANT_NAME);
145:       assertEquals(48, Node.DIRECTIVES);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(4095, Node.COLUMN_MASK);
148:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
150:       assertEquals(2, Node.POST_FLAG);
151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(47, Node.IS_DISPATCHER);
154:       assertEquals(57, Node.REFLECTED_OBJECT);
155:       assertEquals(52, Node.LENGTH);
156:       assertEquals(55, Node.INFERRED_FUNCTION);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(39, Node.EMPTY_BLOCK);
159:       assertEquals(15, Node.NO_SIDE_EFFECTS);
160:       assertEquals(29, Node.JSDOC_INFO_PROP);
161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
162:       assertEquals(53, Node.INPUT_ID);
163:       assertFalse(boolean0);
164:       assertFalse(node0.isContinue());
165:       assertFalse(node0.hasMoreThanOneChild());
166:       assertFalse(node0.isWhile());
167:       assertFalse(node0.isReturn());
168:       assertFalse(node0.isLabel());
169:       assertFalse(node0.isOr());
170:       assertFalse(node0.isLabelName());
171:       assertEquals((-1), node0.getLineno());
172:       assertFalse(node0.isName());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isCast());
175:       assertFalse(node0.isNull());
176:       assertFalse(node0.isAdd());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isDo());
179:       assertFalse(node0.isSetterDef());
180:       assertFalse(node0.isNew());
181:       assertFalse(node0.isObjectLit());
182:       assertFalse(node0.isAnd());
183:       assertFalse(node0.isNot());
184:       assertFalse(node0.isDebugger());
185:       assertFalse(node0.isVoid());
186:       assertEquals(4095, node0.getType());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isFunction());
190:       assertFalse(node0.isBreak());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isCall());
193:       assertFalse(node0.isDec());
194:       assertFalse(node0.hasChildren());
195:       assertFalse(node0.isTypeOf());
196:       assertFalse(node0.isAssign());
197:       assertFalse(node0.isComma());
198:       assertEquals((-1), node0.getSourcePosition());
199:       assertFalse(node0.isGetProp());
200:       assertFalse(node0.isString());
201:       assertFalse(node0.isIn());
202:       assertEquals((-1), node0.getCharno());
203:       assertFalse(node0.isSwitch());
204:       assertFalse(node0.isNE());
205:       assertFalse(node0.isIf());
206:       assertFalse(node0.isDelProp());
207:       assertFalse(node0.isThrow());
208:       assertFalse(node0.isFalse());
209:       assertFalse(node0.isEmpty());
210:       assertFalse(node0.isInc());
211:       assertFalse(node0.isDefaultCase());
212:       assertFalse(node0.isCatch());
213:       assertFalse(node0.isWith());
214:       assertFalse(node0.isInstanceOf());
215:       assertEquals(0, node0.getChildCount());
216:       assertFalse(node0.isRegExp());
217:       assertFalse(node0.isParamList());
218:       assertFalse(node0.isArrayLit());
219:       assertFalse(node0.isFor());
220:       assertFalse(node0.isStringKey());
221:       assertFalse(node0.isGetterDef());
222:       assertFalse(node0.isNumber());
223:       assertFalse(node0.isHook());
224:       assertFalse(node0.isBlock());
225:       assertFalse(node0.isThis());
226:       assertFalse(node0.isScript());
227:       assertFalse(node0.isTry());
228:       assertFalse(node0.hasOneChild());
229:       assertFalse(node0.isCase());
230:       
231:       boolean boolean1 = node0.isEquivalentTo(node0);
232:       assertEquals(30, Node.VAR_ARGS_NAME);
233:       assertEquals(57, Node.LAST_PROP);
234:       assertEquals(1, Node.DECR_FLAG);
235:       assertEquals(49, Node.DIRECT_EVAL);
236:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
237:       assertEquals(12, Node.COLUMN_BITS);
238:       assertEquals(46, Node.IS_NAMESPACE);
239:       assertEquals(54, Node.SLASH_V);
240:       assertEquals(37, Node.OPT_ARG_NAME);
241:       assertEquals(40, Node.ORIGINALNAME_PROP);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
244:       assertEquals(32, Node.INCRDECR_PROP);
245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
247:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
248:       assertEquals(36, Node.QUOTED_PROP);
249:       assertEquals(43, Node.IS_CONSTANT_NAME);
250:       assertEquals(48, Node.DIRECTIVES);
251:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
254:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
255:       assertEquals(2, Node.POST_FLAG);
256:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(47, Node.IS_DISPATCHER);
259:       assertEquals(57, Node.REFLECTED_OBJECT);
260:       assertEquals(52, Node.LENGTH);
261:       assertEquals(55, Node.INFERRED_FUNCTION);
262:       assertEquals(8, Node.FLAG_NO_THROWS);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
265:       assertEquals(29, Node.JSDOC_INFO_PROP);
266:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
267:       assertEquals(53, Node.INPUT_ID);
268:       assertFalse(boolean1 == boolean0);
269:       assertTrue(boolean1);
270:       assertFalse(node0.isContinue());
271:       assertFalse(node0.hasMoreThanOneChild());
272:       assertFalse(node0.isWhile());
273:       assertFalse(node0.isReturn());
274:       assertFalse(node0.isLabel());
275:       assertFalse(node0.isOr());
276:       assertFalse(node0.isLabelName());
277:       assertEquals((-1), node0.getLineno());
278:       assertFalse(node0.isName());
279:       assertFalse(node0.isVar());
280:       assertFalse(node0.isCast());
281:       assertFalse(node0.isNull());
282:       assertFalse(node0.isAdd());
283:       assertFalse(node0.isAssignAdd());
284:       assertFalse(node0.isDo());
285:       assertFalse(node0.isSetterDef());
286:       assertFalse(node0.isNew());
287:       assertFalse(node0.isObjectLit());
288:       assertFalse(node0.isAnd());
289:       assertFalse(node0.isNot());
290:       assertFalse(node0.isDebugger());
291:       assertFalse(node0.isVoid());
292:       assertEquals(4095, node0.getType());
293:       assertFalse(node0.isExprResult());
294:       assertFalse(node0.isTrue());
295:       assertFalse(node0.isFunction());
296:       assertFalse(node0.isBreak());
297:       assertFalse(node0.isGetElem());
298:       assertFalse(node0.isCall());
299:       assertFalse(node0.isDec());
300:       assertFalse(node0.hasChildren());
301:       assertFalse(node0.isTypeOf());
302:       assertFalse(node0.isAssign());
303:       assertFalse(node0.isComma());
304:       assertEquals((-1), node0.getSourcePosition());
305:       assertFalse(node0.isGetProp());
306:       assertFalse(node0.isString());
307:       assertFalse(node0.isIn());
308:       assertEquals((-1), node0.getCharno());
309:       assertFalse(node0.isSwitch());
310:       assertFalse(node0.isNE());
311:       assertFalse(node0.isIf());
312:       assertFalse(node0.isDelProp());
313:       assertFalse(node0.isThrow());
314:       assertFalse(node0.isFalse());
315:       assertFalse(node0.isEmpty());
316:       assertFalse(node0.isInc());
317:       assertFalse(node0.isDefaultCase());
318:       assertFalse(node0.isCatch());
319:       assertFalse(node0.isWith());
320:       assertFalse(node0.isInstanceOf());
321:       assertEquals(0, node0.getChildCount());
322:       assertFalse(node0.isRegExp());
323:       assertFalse(node0.isParamList());
324:       assertFalse(node0.isArrayLit());
325:       assertFalse(node0.isFor());
326:       assertFalse(node0.isStringKey());
327:       assertFalse(node0.isGetterDef());
328:       assertFalse(node0.isNumber());
329:       assertFalse(node0.isHook());
330:       assertFalse(node0.isBlock());
331:       assertFalse(node0.isThis());
332:       assertFalse(node0.isScript());
333:       assertFalse(node0.isTry());
334:       assertFalse(node0.hasOneChild());
335:       assertFalse(node0.isCase());
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertEquals(30, Node.VAR_ARGS_NAME);
339:       assertEquals(57, Node.LAST_PROP);
340:       assertEquals(1, Node.DECR_FLAG);
341:       assertEquals(49, Node.DIRECT_EVAL);
342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
343:       assertEquals(12, Node.COLUMN_BITS);
344:       assertEquals(46, Node.IS_NAMESPACE);
345:       assertEquals(54, Node.SLASH_V);
346:       assertEquals(37, Node.OPT_ARG_NAME);
347:       assertEquals(40, Node.ORIGINALNAME_PROP);
348:       assertEquals(50, Node.FREE_CALL);
349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
350:       assertEquals(32, Node.INCRDECR_PROP);
351:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
352:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
353:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
354:       assertEquals(36, Node.QUOTED_PROP);
355:       assertEquals(43, Node.IS_CONSTANT_NAME);
356:       assertEquals(48, Node.DIRECTIVES);
357:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
358:       assertEquals(4095, Node.COLUMN_MASK);
359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(2, Node.POST_FLAG);
362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
363:       assertEquals(56, Node.CHANGE_TIME);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(57, Node.REFLECTED_OBJECT);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(55, Node.INFERRED_FUNCTION);
368:       assertEquals(8, Node.FLAG_NO_THROWS);
369:       assertEquals(39, Node.EMPTY_BLOCK);
370:       assertEquals(15, Node.NO_SIDE_EFFECTS);
371:       assertEquals(29, Node.JSDOC_INFO_PROP);
372:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
373:       assertEquals(53, Node.INPUT_ID);
374:       assertNotNull(iterable0);
375:       assertFalse(iterable0.contains(node0));
376:       assertFalse(node0.isContinue());
377:       assertFalse(node0.hasMoreThanOneChild());
378:       assertFalse(node0.isWhile());
379:       assertFalse(node0.isReturn());
380:       assertFalse(node0.isLabel());
381:       assertFalse(node0.isOr());
382:       assertFalse(node0.isLabelName());
383:       assertEquals((-1), node0.getLineno());
384:       assertFalse(node0.isName());
385:       assertFalse(node0.isVar());
386:       assertFalse(node0.isCast());
387:       assertFalse(node0.isNull());
388:       assertFalse(node0.isAdd());
389:       assertFalse(node0.isAssignAdd());
390:       assertFalse(node0.isDo());
391:       assertFalse(node0.isSetterDef());
392:       assertFalse(node0.isNew());
393:       assertFalse(node0.isObjectLit());
394:       assertFalse(node0.isAnd());
395:       assertFalse(node0.isNot());
396:       assertFalse(node0.isDebugger());
397:       assertFalse(node0.isVoid());
398:       assertEquals(4095, node0.getType());
399:       assertFalse(node0.isExprResult());
400:       assertFalse(node0.isTrue());
401:       assertFalse(node0.isFunction());
402:       assertFalse(node0.isBreak());
403:       assertFalse(node0.isGetElem());
404:       assertFalse(node0.isCall());
405:       assertFalse(node0.isDec());
406:       assertFalse(node0.hasChildren());
407:       assertFalse(node0.isTypeOf());
408:       assertFalse(node0.isAssign());
409:       assertFalse(node0.isComma());
410:       assertEquals((-1), node0.getSourcePosition());
411:       assertFalse(node0.isGetProp());
412:       assertFalse(node0.isString());
413:       assertFalse(node0.isIn());
414:       assertEquals((-1), node0.getCharno());
415:       assertFalse(node0.isSwitch());
416:       assertFalse(node0.isNE());
417:       assertFalse(node0.isIf());
418:       assertFalse(node0.isDelProp());
419:       assertFalse(node0.isThrow());
420:       assertFalse(node0.isFalse());
421:       assertFalse(node0.isEmpty());
422:       assertFalse(node0.isInc());
423:       assertFalse(node0.isDefaultCase());
424:       assertFalse(node0.isCatch());
425:       assertFalse(node0.isWith());
426:       assertFalse(node0.isInstanceOf());
427:       assertEquals(0, node0.getChildCount());
428:       assertFalse(node0.isRegExp());
429:       assertFalse(node0.isParamList());
430:       assertFalse(node0.isArrayLit());
431:       assertFalse(node0.isFor());
432:       assertFalse(node0.isStringKey());
433:       assertFalse(node0.isGetterDef());
434:       assertFalse(node0.isNumber());
435:       assertFalse(node0.isHook());
436:       assertFalse(node0.isBlock());
437:       assertFalse(node0.isThis());
438:       assertFalse(node0.isScript());
439:       assertFalse(node0.isTry());
440:       assertFalse(node0.hasOneChild());
441:       assertFalse(node0.isCase());
442:       
443:       // Undeclared exception!
444:       try { 
445:         node0.addChildToFront((Node) null);
446:         fail("Expecting exception: NullPointerException");
447:       
448:       } catch(NullPointerException e) {
449:          //
450:          // no message in exception (getMessage() returned null)
451:          //
452:          verifyException("com.google.javascript.rhino.Node", e);
453:       }
454:   }
455: }
RegularFileObject[/tmp/EvoSuite_431_1628159623618/com/google/javascript/rhino/Node_431_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_431_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_431_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_431_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:43.648 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(4095, "The existing child node of the parent should not be null.");
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node0);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(4095, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());

boolean boolean0 = node0.isFalse();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean0);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(4095, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());

boolean boolean1 = node0.isEquivalentTo(node0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(4095, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());

Iterable<Node> iterable0 = node0.children();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(4095, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());

node0.addChildToFront((Node) null);

[MASTER] 10:33:44.313 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_435_1628159623937/com/google/javascript/rhino/Node_435_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_435_1628159623937/com/google/javascript/rhino/Node_435_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:44.313 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:44.313 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:44.314 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 686
[MASTER] 10:33:44.315 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_435_1628159623937/com/google/javascript/rhino/Node_435_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_435_tmp__ESTest extends Node_435_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(93, "");
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(29, Node.JSDOC_INFO_PROP);
24:       assertEquals(53, Node.INPUT_ID);
25:       assertEquals(56, Node.CHANGE_TIME);
26:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
27:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
28:       assertEquals(43, Node.IS_CONSTANT_NAME);
29:       assertEquals(36, Node.QUOTED_PROP);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(32, Node.INCRDECR_PROP);
32:       assertEquals(4095, Node.COLUMN_MASK);
33:       assertEquals(48, Node.DIRECTIVES);
34:       assertEquals(1, Node.DECR_FLAG);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
37:       assertEquals(37, Node.OPT_ARG_NAME);
38:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
39:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(52, Node.LENGTH);
42:       assertEquals(40, Node.ORIGINALNAME_PROP);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(8, Node.FLAG_NO_THROWS);
46:       assertEquals(50, Node.FREE_CALL);
47:       assertEquals(54, Node.SLASH_V);
48:       assertEquals(51, Node.STATIC_SOURCE_FILE);
49:       assertEquals(46, Node.IS_NAMESPACE);
50:       assertEquals(55, Node.INFERRED_FUNCTION);
51:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
52:       assertEquals(39, Node.EMPTY_BLOCK);
53:       assertEquals(57, Node.LAST_PROP);
54:       assertEquals(47, Node.IS_DISPATCHER);
55:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
56:       assertEquals(2, Node.POST_FLAG);
57:       assertEquals(30, Node.VAR_ARGS_NAME);
58:       assertNotNull(node0);
59:       assertFalse(node0.isExprResult());
60:       assertFalse(node0.hasOneChild());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isScript());
63:       assertEquals((-1), node0.getSourcePosition());
64:       assertFalse(node0.isObjectLit());
65:       assertFalse(node0.isNumber());
66:       assertFalse(node0.isLabel());
67:       assertFalse(node0.isAnd());
68:       assertFalse(node0.isLabelName());
69:       assertFalse(node0.isThrow());
70:       assertFalse(node0.isCast());
71:       assertFalse(node0.isContinue());
72:       assertFalse(node0.isFalse());
73:       assertEquals((-1), node0.getCharno());
74:       assertFalse(node0.isBlock());
75:       assertFalse(node0.isHook());
76:       assertFalse(node0.isInc());
77:       assertFalse(node0.isSwitch());
78:       assertEquals(93, node0.getType());
79:       assertFalse(node0.isStringKey());
80:       assertFalse(node0.isCase());
81:       assertFalse(node0.isIn());
82:       assertEquals((-1), node0.getLineno());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isIf());
86:       assertFalse(node0.isFor());
87:       assertFalse(node0.isRegExp());
88:       assertFalse(node0.isCatch());
89:       assertFalse(node0.isInstanceOf());
90:       assertFalse(node0.hasMoreThanOneChild());
91:       assertFalse(node0.isWith());
92:       assertFalse(node0.isTry());
93:       assertFalse(node0.isDebugger());
94:       assertFalse(node0.isTrue());
95:       assertFalse(node0.isArrayLit());
96:       assertFalse(node0.isDefaultCase());
97:       assertFalse(node0.isVoid());
98:       assertFalse(node0.isEmpty());
99:       assertFalse(node0.isGetterDef());
100:       assertFalse(node0.isSetterDef());
101:       assertFalse(node0.isParamList());
102:       assertTrue(node0.isAssignAdd());
103:       assertEquals(0, node0.getChildCount());
104:       assertFalse(node0.isFunction());
105:       assertFalse(node0.isAdd());
106:       assertFalse(node0.isNew());
107:       assertFalse(node0.isVar());
108:       assertFalse(node0.isName());
109:       assertFalse(node0.isDo());
110:       assertFalse(node0.isString());
111:       assertFalse(node0.isNull());
112:       assertFalse(node0.isOr());
113:       assertFalse(node0.isGetProp());
114:       assertFalse(node0.isReturn());
115:       assertFalse(node0.isDelProp());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.isWhile());
118:       assertFalse(node0.hasChildren());
119:       assertFalse(node0.isBreak());
120:       assertFalse(node0.isGetElem());
121:       assertFalse(node0.isCall());
122:       assertFalse(node0.isDec());
123:       assertFalse(node0.isComma());
124:       assertFalse(node0.isTypeOf());
125:       
126:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(29, Node.JSDOC_INFO_PROP);
129:       assertEquals(53, Node.INPUT_ID);
130:       assertEquals(56, Node.CHANGE_TIME);
131:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
133:       assertEquals(43, Node.IS_CONSTANT_NAME);
134:       assertEquals(36, Node.QUOTED_PROP);
135:       assertEquals(12, Node.COLUMN_BITS);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(4095, Node.COLUMN_MASK);
138:       assertEquals(48, Node.DIRECTIVES);
139:       assertEquals(1, Node.DECR_FLAG);
140:       assertEquals(49, Node.DIRECT_EVAL);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertEquals(37, Node.OPT_ARG_NAME);
143:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(52, Node.LENGTH);
147:       assertEquals(40, Node.ORIGINALNAME_PROP);
148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(50, Node.FREE_CALL);
152:       assertEquals(54, Node.SLASH_V);
153:       assertEquals(51, Node.STATIC_SOURCE_FILE);
154:       assertEquals(46, Node.IS_NAMESPACE);
155:       assertEquals(55, Node.INFERRED_FUNCTION);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(57, Node.LAST_PROP);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
161:       assertEquals(2, Node.POST_FLAG);
162:       assertEquals(30, Node.VAR_ARGS_NAME);
163:       assertNull(staticSourceFile0);
164:       assertFalse(node0.isExprResult());
165:       assertFalse(node0.hasOneChild());
166:       assertFalse(node0.isNot());
167:       assertFalse(node0.isScript());
168:       assertEquals((-1), node0.getSourcePosition());
169:       assertFalse(node0.isObjectLit());
170:       assertFalse(node0.isNumber());
171:       assertFalse(node0.isLabel());
172:       assertFalse(node0.isAnd());
173:       assertFalse(node0.isLabelName());
174:       assertFalse(node0.isThrow());
175:       assertFalse(node0.isCast());
176:       assertFalse(node0.isContinue());
177:       assertFalse(node0.isFalse());
178:       assertEquals((-1), node0.getCharno());
179:       assertFalse(node0.isBlock());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isInc());
182:       assertFalse(node0.isSwitch());
183:       assertEquals(93, node0.getType());
184:       assertFalse(node0.isStringKey());
185:       assertFalse(node0.isCase());
186:       assertFalse(node0.isIn());
187:       assertEquals((-1), node0.getLineno());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isNE());
190:       assertFalse(node0.isIf());
191:       assertFalse(node0.isFor());
192:       assertFalse(node0.isRegExp());
193:       assertFalse(node0.isCatch());
194:       assertFalse(node0.isInstanceOf());
195:       assertFalse(node0.hasMoreThanOneChild());
196:       assertFalse(node0.isWith());
197:       assertFalse(node0.isTry());
198:       assertFalse(node0.isDebugger());
199:       assertFalse(node0.isTrue());
200:       assertFalse(node0.isArrayLit());
201:       assertFalse(node0.isDefaultCase());
202:       assertFalse(node0.isVoid());
203:       assertFalse(node0.isEmpty());
204:       assertFalse(node0.isGetterDef());
205:       assertFalse(node0.isSetterDef());
206:       assertFalse(node0.isParamList());
207:       assertTrue(node0.isAssignAdd());
208:       assertEquals(0, node0.getChildCount());
209:       assertFalse(node0.isFunction());
210:       assertFalse(node0.isAdd());
211:       assertFalse(node0.isNew());
212:       assertFalse(node0.isVar());
213:       assertFalse(node0.isName());
214:       assertFalse(node0.isDo());
215:       assertFalse(node0.isString());
216:       assertFalse(node0.isNull());
217:       assertFalse(node0.isOr());
218:       assertFalse(node0.isGetProp());
219:       assertFalse(node0.isReturn());
220:       assertFalse(node0.isDelProp());
221:       assertFalse(node0.isAssign());
222:       assertFalse(node0.isWhile());
223:       assertFalse(node0.hasChildren());
224:       assertFalse(node0.isBreak());
225:       assertFalse(node0.isGetElem());
226:       assertFalse(node0.isCall());
227:       assertFalse(node0.isDec());
228:       assertFalse(node0.isComma());
229:       assertFalse(node0.isTypeOf());
230:       
231:       Node node1 = new Node(93, node0, node0, node0, 46, 16);
232:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
233:       assertEquals(29, Node.JSDOC_INFO_PROP);
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(56, Node.CHANGE_TIME);
236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
237:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
238:       assertEquals(43, Node.IS_CONSTANT_NAME);
239:       assertEquals(36, Node.QUOTED_PROP);
240:       assertEquals(12, Node.COLUMN_BITS);
241:       assertEquals(32, Node.INCRDECR_PROP);
242:       assertEquals(4095, Node.COLUMN_MASK);
243:       assertEquals(48, Node.DIRECTIVES);
244:       assertEquals(1, Node.DECR_FLAG);
245:       assertEquals(49, Node.DIRECT_EVAL);
246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
247:       assertEquals(37, Node.OPT_ARG_NAME);
248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
249:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
250:       assertEquals(57, Node.REFLECTED_OBJECT);
251:       assertEquals(52, Node.LENGTH);
252:       assertEquals(40, Node.ORIGINALNAME_PROP);
253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
254:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
255:       assertEquals(8, Node.FLAG_NO_THROWS);
256:       assertEquals(50, Node.FREE_CALL);
257:       assertEquals(54, Node.SLASH_V);
258:       assertEquals(51, Node.STATIC_SOURCE_FILE);
259:       assertEquals(46, Node.IS_NAMESPACE);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(57, Node.LAST_PROP);
264:       assertEquals(47, Node.IS_DISPATCHER);
265:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
266:       assertEquals(2, Node.POST_FLAG);
267:       assertEquals(30, Node.VAR_ARGS_NAME);
268:       assertEquals(52, Node.LENGTH);
269:       assertEquals(57, Node.REFLECTED_OBJECT);
270:       assertEquals(40, Node.ORIGINALNAME_PROP);
271:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
272:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
273:       assertEquals(49, Node.DIRECT_EVAL);
274:       assertEquals(50, Node.FREE_CALL);
275:       assertEquals(54, Node.SLASH_V);
276:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
277:       assertEquals(8, Node.FLAG_NO_THROWS);
278:       assertEquals(39, Node.EMPTY_BLOCK);
279:       assertEquals(55, Node.INFERRED_FUNCTION);
280:       assertEquals(15, Node.NO_SIDE_EFFECTS);
281:       assertEquals(57, Node.LAST_PROP);
282:       assertEquals(47, Node.IS_DISPATCHER);
283:       assertEquals(2, Node.POST_FLAG);
284:       assertEquals(30, Node.VAR_ARGS_NAME);
285:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
286:       assertEquals(29, Node.JSDOC_INFO_PROP);
287:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
288:       assertEquals(53, Node.INPUT_ID);
289:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
290:       assertEquals(36, Node.QUOTED_PROP);
291:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
292:       assertEquals(43, Node.IS_CONSTANT_NAME);
293:       assertEquals(56, Node.CHANGE_TIME);
294:       assertEquals(32, Node.INCRDECR_PROP);
295:       assertEquals(46, Node.IS_NAMESPACE);
296:       assertEquals(48, Node.DIRECTIVES);
297:       assertEquals(51, Node.STATIC_SOURCE_FILE);
298:       assertEquals(37, Node.OPT_ARG_NAME);
299:       assertEquals(4095, Node.COLUMN_MASK);
300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
301:       assertEquals(1, Node.DECR_FLAG);
302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
303:       assertEquals(12, Node.COLUMN_BITS);
304:       assertFalse(node1.equals((Object)node0));
305:       assertNotNull(node1);
306:       assertFalse(node0.isExprResult());
307:       assertFalse(node0.hasOneChild());
308:       assertFalse(node0.isNot());
309:       assertFalse(node0.isScript());
310:       assertEquals((-1), node0.getSourcePosition());
311:       assertFalse(node0.isObjectLit());
312:       assertFalse(node0.isNumber());
313:       assertFalse(node0.isLabel());
314:       assertFalse(node0.isAnd());
315:       assertFalse(node0.isLabelName());
316:       assertFalse(node0.isThrow());
317:       assertFalse(node0.isCast());
318:       assertFalse(node0.isContinue());
319:       assertFalse(node0.isFalse());
320:       assertEquals((-1), node0.getCharno());
321:       assertFalse(node0.isBlock());
322:       assertFalse(node0.isHook());
323:       assertFalse(node0.isInc());
324:       assertFalse(node0.isSwitch());
325:       assertEquals(93, node0.getType());
326:       assertFalse(node0.isStringKey());
327:       assertFalse(node0.isCase());
328:       assertFalse(node0.isIn());
329:       assertEquals((-1), node0.getLineno());
330:       assertFalse(node0.isThis());
331:       assertFalse(node0.isNE());
332:       assertFalse(node0.isIf());
333:       assertFalse(node0.isFor());
334:       assertFalse(node0.isRegExp());
335:       assertFalse(node0.isCatch());
336:       assertFalse(node0.isInstanceOf());
337:       assertFalse(node0.hasMoreThanOneChild());
338:       assertFalse(node0.isWith());
339:       assertFalse(node0.isTry());
340:       assertFalse(node0.isDebugger());
341:       assertFalse(node0.isTrue());
342:       assertFalse(node0.isArrayLit());
343:       assertFalse(node0.isDefaultCase());
344:       assertFalse(node0.isVoid());
345:       assertFalse(node0.isEmpty());
346:       assertFalse(node0.isGetterDef());
347:       assertFalse(node0.isSetterDef());
348:       assertFalse(node0.isParamList());
349:       assertTrue(node0.isAssignAdd());
350:       assertEquals(0, node0.getChildCount());
351:       assertFalse(node0.isFunction());
352:       assertFalse(node0.isAdd());
353:       assertFalse(node0.isNew());
354:       assertFalse(node0.isVar());
355:       assertFalse(node0.isName());
356:       assertFalse(node0.isDo());
357:       assertFalse(node0.isString());
358:       assertFalse(node0.isNull());
359:       assertFalse(node0.isOr());
360:       assertFalse(node0.isGetProp());
361:       assertFalse(node0.isReturn());
362:       assertFalse(node0.isDelProp());
363:       assertFalse(node0.isAssign());
364:       assertFalse(node0.isWhile());
365:       assertFalse(node0.hasChildren());
366:       assertFalse(node0.isBreak());
367:       assertFalse(node0.isGetElem());
368:       assertFalse(node0.isCall());
369:       assertFalse(node0.isDec());
370:       assertFalse(node0.isComma());
371:       assertFalse(node0.isTypeOf());
372:       assertFalse(node1.isBlock());
373:       assertFalse(node1.isNew());
374:       assertFalse(node1.isAdd());
375:       assertEquals(93, node1.getType());
376:       assertFalse(node1.isCall());
377:       assertFalse(node1.isName());
378:       assertFalse(node1.isStringKey());
379:       assertFalse(node1.isNull());
380:       assertFalse(node1.isCatch());
381:       assertFalse(node1.isGetElem());
382:       assertFalse(node1.isAssign());
383:       assertFalse(node1.isWhile());
384:       assertFalse(node1.hasMoreThanOneChild());
385:       assertFalse(node1.isTypeOf());
386:       assertFalse(node1.isRegExp());
387:       assertFalse(node1.isDec());
388:       assertFalse(node1.isReturn());
389:       assertFalse(node1.isVoid());
390:       assertFalse(node1.isTry());
391:       assertFalse(node1.isScript());
392:       assertFalse(node1.isArrayLit());
393:       assertFalse(node1.isExprResult());
394:       assertFalse(node1.isLabelName());
395:       assertFalse(node1.isEmpty());
396:       assertFalse(node1.isDelProp());
397:       assertFalse(node1.isNumber());
398:       assertFalse(node1.isGetterDef());
399:       assertFalse(node1.isTrue());
400:       assertFalse(node1.isOr());
401:       assertFalse(node1.isParamList());
402:       assertFalse(node1.isDo());
403:       assertFalse(node1.isDefaultCase());
404:       assertFalse(node1.isVar());
405:       assertFalse(node1.isLabel());
406:       assertFalse(node1.isSwitch());
407:       assertFalse(node1.isInc());
408:       assertFalse(node1.isString());
409:       assertTrue(node1.hasChildren());
410:       assertFalse(node1.isInstanceOf());
411:       assertFalse(node1.isBreak());
412:       assertFalse(node1.isGetProp());
413:       assertFalse(node1.isCase());
414:       assertFalse(node1.isFor());
415:       assertFalse(node1.isWith());
416:       assertFalse(node1.isHook());
417:       assertTrue(node1.hasOneChild());
418:       assertFalse(node1.isComma());
419:       assertEquals(16, node1.getCharno());
420:       assertEquals(1, node1.getChildCount());
421:       assertFalse(node1.isThis());
422:       assertFalse(node1.isFunction());
423:       assertEquals(46, node1.getLineno());
424:       assertFalse(node1.isCast());
425:       assertEquals(188432, node1.getSourcePosition());
426:       assertFalse(node1.isNot());
427:       assertFalse(node1.isAnd());
428:       assertFalse(node1.isObjectLit());
429:       assertFalse(node1.isIf());
430:       assertFalse(node1.isNE());
431:       assertFalse(node1.isDebugger());
432:       assertFalse(node1.isIn());
433:       assertFalse(node1.isSetterDef());
434:       assertTrue(node1.isAssignAdd());
435:       assertFalse(node1.isThrow());
436:       assertFalse(node1.isContinue());
437:       assertFalse(node1.isFalse());
438:       
439:       node1.setLength(38);
440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
441:       assertEquals(29, Node.JSDOC_INFO_PROP);
442:       assertEquals(53, Node.INPUT_ID);
443:       assertEquals(56, Node.CHANGE_TIME);
444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
445:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
446:       assertEquals(43, Node.IS_CONSTANT_NAME);
447:       assertEquals(36, Node.QUOTED_PROP);
448:       assertEquals(12, Node.COLUMN_BITS);
449:       assertEquals(32, Node.INCRDECR_PROP);
450:       assertEquals(4095, Node.COLUMN_MASK);
451:       assertEquals(48, Node.DIRECTIVES);
452:       assertEquals(1, Node.DECR_FLAG);
453:       assertEquals(49, Node.DIRECT_EVAL);
454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
455:       assertEquals(37, Node.OPT_ARG_NAME);
456:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(52, Node.LENGTH);
460:       assertEquals(40, Node.ORIGINALNAME_PROP);
461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
463:       assertEquals(8, Node.FLAG_NO_THROWS);
464:       assertEquals(50, Node.FREE_CALL);
465:       assertEquals(54, Node.SLASH_V);
466:       assertEquals(51, Node.STATIC_SOURCE_FILE);
467:       assertEquals(46, Node.IS_NAMESPACE);
468:       assertEquals(55, Node.INFERRED_FUNCTION);
469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
470:       assertEquals(39, Node.EMPTY_BLOCK);
471:       assertEquals(57, Node.LAST_PROP);
472:       assertEquals(47, Node.IS_DISPATCHER);
473:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
474:       assertEquals(2, Node.POST_FLAG);
475:       assertEquals(30, Node.VAR_ARGS_NAME);
476:       assertEquals(52, Node.LENGTH);
477:       assertEquals(57, Node.REFLECTED_OBJECT);
478:       assertEquals(40, Node.ORIGINALNAME_PROP);
479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
480:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
481:       assertEquals(49, Node.DIRECT_EVAL);
482:       assertEquals(50, Node.FREE_CALL);
483:       assertEquals(54, Node.SLASH_V);
484:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
485:       assertEquals(8, Node.FLAG_NO_THROWS);
486:       assertEquals(39, Node.EMPTY_BLOCK);
487:       assertEquals(55, Node.INFERRED_FUNCTION);
488:       assertEquals(15, Node.NO_SIDE_EFFECTS);
489:       assertEquals(57, Node.LAST_PROP);
490:       assertEquals(47, Node.IS_DISPATCHER);
491:       assertEquals(2, Node.POST_FLAG);
492:       assertEquals(30, Node.VAR_ARGS_NAME);
493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
494:       assertEquals(29, Node.JSDOC_INFO_PROP);
495:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
496:       assertEquals(53, Node.INPUT_ID);
497:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
498:       assertEquals(36, Node.QUOTED_PROP);
499:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
500:       assertEquals(43, Node.IS_CONSTANT_NAME);
501:       assertEquals(56, Node.CHANGE_TIME);
502:       assertEquals(32, Node.INCRDECR_PROP);
503:       assertEquals(46, Node.IS_NAMESPACE);
504:       assertEquals(48, Node.DIRECTIVES);
505:       assertEquals(51, Node.STATIC_SOURCE_FILE);
506:       assertEquals(37, Node.OPT_ARG_NAME);
507:       assertEquals(4095, Node.COLUMN_MASK);
508:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
509:       assertEquals(1, Node.DECR_FLAG);
510:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
511:       assertEquals(12, Node.COLUMN_BITS);
512:       assertFalse(node0.equals((Object)node1));
513:       assertFalse(node1.equals((Object)node0));
514:       assertFalse(node0.isExprResult());
515:       assertFalse(node0.hasOneChild());
516:       assertFalse(node0.isNot());
517:       assertFalse(node0.isScript());
518:       assertEquals((-1), node0.getSourcePosition());
519:       assertFalse(node0.isObjectLit());
520:       assertFalse(node0.isNumber());
521:       assertFalse(node0.isLabel());
522:       assertFalse(node0.isAnd());
523:       assertFalse(node0.isLabelName());
524:       assertFalse(node0.isThrow());
525:       assertFalse(node0.isCast());
526:       assertFalse(node0.isContinue());
527:       assertFalse(node0.isFalse());
528:       assertEquals((-1), node0.getCharno());
529:       assertFalse(node0.isBlock());
530:       assertFalse(node0.isHook());
531:       assertFalse(node0.isInc());
532:       assertFalse(node0.isSwitch());
533:       assertEquals(93, node0.getType());
534:       assertFalse(node0.isStringKey());
535:       assertFalse(node0.isCase());
536:       assertFalse(node0.isIn());
537:       assertEquals((-1), node0.getLineno());
538:       assertFalse(node0.isThis());
539:       assertFalse(node0.isNE());
540:       assertFalse(node0.isIf());
541:       assertFalse(node0.isFor());
542:       assertFalse(node0.isRegExp());
543:       assertFalse(node0.isCatch());
544:       assertFalse(node0.isInstanceOf());
545:       assertFalse(node0.hasMoreThanOneChild());
546:       assertFalse(node0.isWith());
547:       assertFalse(node0.isTry());
548:       assertFalse(node0.isDebugger());
549:       assertFalse(node0.isTrue());
550:       assertFalse(node0.isArrayLit());
551:       assertFalse(node0.isDefaultCase());
552:       assertFalse(node0.isVoid());
553:       assertFalse(node0.isEmpty());
554:       assertFalse(node0.isGetterDef());
555:       assertFalse(node0.isSetterDef());
556:       assertFalse(node0.isParamList());
557:       assertTrue(node0.isAssignAdd());
558:       assertEquals(0, node0.getChildCount());
559:       assertFalse(node0.isFunction());
560:       assertFalse(node0.isAdd());
561:       assertFalse(node0.isNew());
562:       assertFalse(node0.isVar());
563:       assertFalse(node0.isName());
564:       assertFalse(node0.isDo());
565:       assertFalse(node0.isString());
566:       assertFalse(node0.isNull());
567:       assertFalse(node0.isOr());
568:       assertFalse(node0.isGetProp());
569:       assertFalse(node0.isReturn());
570:       assertFalse(node0.isDelProp());
571:       assertFalse(node0.isAssign());
572:       assertFalse(node0.isWhile());
573:       assertFalse(node0.hasChildren());
574:       assertFalse(node0.isBreak());
575:       assertFalse(node0.isGetElem());
576:       assertFalse(node0.isCall());
577:       assertFalse(node0.isDec());
578:       assertFalse(node0.isComma());
579:       assertFalse(node0.isTypeOf());
580:       assertFalse(node1.isBlock());
581:       assertFalse(node1.isNew());
582:       assertFalse(node1.isAdd());
583:       assertEquals(93, node1.getType());
584:       assertFalse(node1.isCall());
585:       assertFalse(node1.isName());
586:       assertFalse(node1.isStringKey());
587:       assertFalse(node1.isNull());
588:       assertFalse(node1.isCatch());
589:       assertFalse(node1.isGetElem());
590:       assertFalse(node1.isAssign());
591:       assertFalse(node1.isWhile());
592:       assertFalse(node1.hasMoreThanOneChild());
593:       assertFalse(node1.isTypeOf());
594:       assertFalse(node1.isRegExp());
595:       assertFalse(node1.isDec());
596:       assertFalse(node1.isReturn());
597:       assertFalse(node1.isVoid());
598:       assertFalse(node1.isTry());
599:       assertFalse(node1.isScript());
600:       assertFalse(node1.isArrayLit());
601:       assertFalse(node1.isExprResult());
602:       assertFalse(node1.isLabelName());
603:       assertFalse(node1.isEmpty());
604:       assertFalse(node1.isDelProp());
605:       assertFalse(node1.isNumber());
606:       assertFalse(node1.isGetterDef());
607:       assertFalse(node1.isTrue());
608:       assertFalse(node1.isOr());
609:       assertFalse(node1.isParamList());
610:       assertFalse(node1.isDo());
611:       assertFalse(node1.isDefaultCase());
612:       assertFalse(node1.isVar());
613:       assertFalse(node1.isLabel());
614:       assertFalse(node1.isSwitch());
615:       assertFalse(node1.isInc());
616:       assertFalse(node1.isString());
617:       assertTrue(node1.hasChildren());
618:       assertFalse(node1.isInstanceOf());
619:       assertFalse(node1.isBreak());
620:       assertFalse(node1.isGetProp());
621:       assertFalse(node1.isCase());
622:       assertFalse(node1.isFor());
623:       assertFalse(node1.isWith());
624:       assertFalse(node1.isHook());
625:       assertTrue(node1.hasOneChild());
626:       assertFalse(node1.isComma());
627:       assertEquals(16, node1.getCharno());
628:       assertEquals(1, node1.getChildCount());
629:       assertFalse(node1.isThis());
630:       assertFalse(node1.isFunction());
631:       assertEquals(46, node1.getLineno());
632:       assertFalse(node1.isCast());
633:       assertEquals(188432, node1.getSourcePosition());
634:       assertFalse(node1.isNot());
635:       assertFalse(node1.isAnd());
636:       assertFalse(node1.isObjectLit());
637:       assertFalse(node1.isIf());
638:       assertFalse(node1.isNE());
639:       assertFalse(node1.isDebugger());
640:       assertFalse(node1.isIn());
641:       assertFalse(node1.isSetterDef());
642:       assertTrue(node1.isAssignAdd());
643:       assertFalse(node1.isThrow());
644:       assertFalse(node1.isContinue());
645:       assertFalse(node1.isFalse());
646:       
647:       Iterable<Node> iterable0 = node0.children();
648:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
649:       assertEquals(29, Node.JSDOC_INFO_PROP);
650:       assertEquals(53, Node.INPUT_ID);
651:       assertEquals(56, Node.CHANGE_TIME);
652:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
653:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
654:       assertEquals(43, Node.IS_CONSTANT_NAME);
655:       assertEquals(36, Node.QUOTED_PROP);
656:       assertEquals(12, Node.COLUMN_BITS);
657:       assertEquals(32, Node.INCRDECR_PROP);
658:       assertEquals(4095, Node.COLUMN_MASK);
659:       assertEquals(48, Node.DIRECTIVES);
660:       assertEquals(1, Node.DECR_FLAG);
661:       assertEquals(49, Node.DIRECT_EVAL);
662:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
663:       assertEquals(37, Node.OPT_ARG_NAME);
664:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
665:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
666:       assertEquals(57, Node.REFLECTED_OBJECT);
667:       assertEquals(52, Node.LENGTH);
668:       assertEquals(40, Node.ORIGINALNAME_PROP);
669:       assertEquals(15, Node.NO_SIDE_EFFECTS);
670:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
671:       assertEquals(8, Node.FLAG_NO_THROWS);
672:       assertEquals(50, Node.FREE_CALL);
673:       assertEquals(54, Node.SLASH_V);
674:       assertEquals(51, Node.STATIC_SOURCE_FILE);
675:       assertEquals(46, Node.IS_NAMESPACE);
676:       assertEquals(55, Node.INFERRED_FUNCTION);
677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
678:       assertEquals(39, Node.EMPTY_BLOCK);
679:       assertEquals(57, Node.LAST_PROP);
680:       assertEquals(47, Node.IS_DISPATCHER);
681:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
682:       assertEquals(2, Node.POST_FLAG);
683:       assertEquals(30, Node.VAR_ARGS_NAME);
684:       assertFalse(node0.equals((Object)node1));
685:       assertNotNull(iterable0);
686:       assertFalse(iterable0.contains(node1));
687:       assertFalse(node0.isExprResult());
688:       assertFalse(node0.hasOneChild());
689:       assertFalse(node0.isNot());
690:       assertFalse(node0.isScript());
691:       assertEquals((-1), node0.getSourcePosition());
692:       assertFalse(node0.isObjectLit());
693:       assertFalse(node0.isNumber());
694:       assertFalse(node0.isLabel());
695:       assertFalse(node0.isAnd());
696:       assertFalse(node0.isLabelName());
697:       assertFalse(node0.isThrow());
698:       assertFalse(node0.isCast());
699:       assertFalse(node0.isContinue());
700:       assertFalse(node0.isFalse());
701:       assertEquals((-1), node0.getCharno());
702:       assertFalse(node0.isBlock());
703:       assertFalse(node0.isHook());
704:       assertFalse(node0.isInc());
705:       assertFalse(node0.isSwitch());
706:       assertEquals(93, node0.getType());
707:       assertFalse(node0.isStringKey());
708:       assertFalse(node0.isCase());
709:       assertFalse(node0.isIn());
710:       assertEquals((-1), node0.getLineno());
711:       assertFalse(node0.isThis());
712:       assertFalse(node0.isNE());
713:       assertFalse(node0.isIf());
714:       assertFalse(node0.isFor());
715:       assertFalse(node0.isRegExp());
716:       assertFalse(node0.isCatch());
717:       assertFalse(node0.isInstanceOf());
718:       assertFalse(node0.hasMoreThanOneChild());
719:       assertFalse(node0.isWith());
720:       assertFalse(node0.isTry());
721:       assertFalse(node0.isDebugger());
722:       assertFalse(node0.isTrue());
723:       assertFalse(node0.isArrayLit());
724:       assertFalse(node0.isDefaultCase());
725:       assertFalse(node0.isVoid());
726:       assertFalse(node0.isEmpty());
727:       assertFalse(node0.isGetterDef());
728:       assertFalse(node0.isSetterDef());
729:       assertFalse(node0.isParamList());
730:       assertTrue(node0.isAssignAdd());
731:       assertEquals(0, node0.getChildCount());
732:       assertFalse(node0.isFunction());
733:       assertFalse(node0.isAdd());
734:       assertFalse(node0.isNew());
735:       assertFalse(node0.isVar());
736:       assertFalse(node0.isName());
737:       assertFalse(node0.isDo());
738:       assertFalse(node0.isString());
739:       assertFalse(node0.isNull());
740:       assertFalse(node0.isOr());
741:       assertFalse(node0.isGetProp());
742:       assertFalse(node0.isReturn());
743:       assertFalse(node0.isDelProp());
744:       assertFalse(node0.isAssign());
745:       assertFalse(node0.isWhile());
746:       assertFalse(node0.hasChildren());
747:       assertFalse(node0.isBreak());
748:       assertFalse(node0.isGetElem());
749:       assertFalse(node0.isCall());
750:       assertFalse(node0.isDec());
751:       assertFalse(node0.isComma());
752:       assertFalse(node0.isTypeOf());
753:       
754:       boolean boolean0 = node1.isContinue();
755:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
756:       assertEquals(29, Node.JSDOC_INFO_PROP);
757:       assertEquals(53, Node.INPUT_ID);
758:       assertEquals(56, Node.CHANGE_TIME);
759:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
760:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
761:       assertEquals(43, Node.IS_CONSTANT_NAME);
762:       assertEquals(36, Node.QUOTED_PROP);
763:       assertEquals(12, Node.COLUMN_BITS);
764:       assertEquals(32, Node.INCRDECR_PROP);
765:       assertEquals(4095, Node.COLUMN_MASK);
766:       assertEquals(48, Node.DIRECTIVES);
767:       assertEquals(1, Node.DECR_FLAG);
768:       assertEquals(49, Node.DIRECT_EVAL);
769:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
770:       assertEquals(37, Node.OPT_ARG_NAME);
771:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
772:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
773:       assertEquals(57, Node.REFLECTED_OBJECT);
774:       assertEquals(52, Node.LENGTH);
775:       assertEquals(40, Node.ORIGINALNAME_PROP);
776:       assertEquals(15, Node.NO_SIDE_EFFECTS);
777:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
778:       assertEquals(8, Node.FLAG_NO_THROWS);
779:       assertEquals(50, Node.FREE_CALL);
780:       assertEquals(54, Node.SLASH_V);
781:       assertEquals(51, Node.STATIC_SOURCE_FILE);
782:       assertEquals(46, Node.IS_NAMESPACE);
783:       assertEquals(55, Node.INFERRED_FUNCTION);
784:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
785:       assertEquals(39, Node.EMPTY_BLOCK);
786:       assertEquals(57, Node.LAST_PROP);
787:       assertEquals(47, Node.IS_DISPATCHER);
788:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
789:       assertEquals(2, Node.POST_FLAG);
790:       assertEquals(30, Node.VAR_ARGS_NAME);
791:       assertEquals(52, Node.LENGTH);
792:       assertEquals(57, Node.REFLECTED_OBJECT);
793:       assertEquals(40, Node.ORIGINALNAME_PROP);
794:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
795:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
796:       assertEquals(49, Node.DIRECT_EVAL);
797:       assertEquals(50, Node.FREE_CALL);
798:       assertEquals(54, Node.SLASH_V);
799:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
800:       assertEquals(8, Node.FLAG_NO_THROWS);
801:       assertEquals(39, Node.EMPTY_BLOCK);
802:       assertEquals(55, Node.INFERRED_FUNCTION);
803:       assertEquals(15, Node.NO_SIDE_EFFECTS);
804:       assertEquals(57, Node.LAST_PROP);
805:       assertEquals(47, Node.IS_DISPATCHER);
806:       assertEquals(2, Node.POST_FLAG);
807:       assertEquals(30, Node.VAR_ARGS_NAME);
808:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
809:       assertEquals(29, Node.JSDOC_INFO_PROP);
810:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
811:       assertEquals(53, Node.INPUT_ID);
812:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
813:       assertEquals(36, Node.QUOTED_PROP);
814:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
815:       assertEquals(43, Node.IS_CONSTANT_NAME);
816:       assertEquals(56, Node.CHANGE_TIME);
817:       assertEquals(32, Node.INCRDECR_PROP);
818:       assertEquals(46, Node.IS_NAMESPACE);
819:       assertEquals(48, Node.DIRECTIVES);
820:       assertEquals(51, Node.STATIC_SOURCE_FILE);
821:       assertEquals(37, Node.OPT_ARG_NAME);
822:       assertEquals(4095, Node.COLUMN_MASK);
823:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
824:       assertEquals(1, Node.DECR_FLAG);
825:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
826:       assertEquals(12, Node.COLUMN_BITS);
827:       assertFalse(node0.equals((Object)node1));
828:       assertFalse(node1.equals((Object)node0));
829:       assertFalse(boolean0);
830:       assertFalse(node0.isExprResult());
831:       assertFalse(node0.hasOneChild());
832:       assertFalse(node0.isNot());
833:       assertFalse(node0.isScript());
834:       assertEquals((-1), node0.getSourcePosition());
835:       assertFalse(node0.isObjectLit());
836:       assertFalse(node0.isNumber());
837:       assertFalse(node0.isLabel());
838:       assertFalse(node0.isAnd());
839:       assertFalse(node0.isLabelName());
840:       assertFalse(node0.isThrow());
841:       assertFalse(node0.isCast());
842:       assertFalse(node0.isContinue());
843:       assertFalse(node0.isFalse());
844:       assertEquals((-1), node0.getCharno());
845:       assertFalse(node0.isBlock());
846:       assertFalse(node0.isHook());
847:       assertFalse(node0.isInc());
848:       assertFalse(node0.isSwitch());
849:       assertEquals(93, node0.getType());
850:       assertFalse(node0.isStringKey());
851:       assertFalse(node0.isCase());
852:       assertFalse(node0.isIn());
853:       assertEquals((-1), node0.getLineno());
854:       assertFalse(node0.isThis());
855:       assertFalse(node0.isNE());
856:       assertFalse(node0.isIf());
857:       assertFalse(node0.isFor());
858:       assertFalse(node0.isRegExp());
859:       assertFalse(node0.isCatch());
860:       assertFalse(node0.isInstanceOf());
861:       assertFalse(node0.hasMoreThanOneChild());
862:       assertFalse(node0.isWith());
863:       assertFalse(node0.isTry());
864:       assertFalse(node0.isDebugger());
865:       assertFalse(node0.isTrue());
866:       assertFalse(node0.isArrayLit());
867:       assertFalse(node0.isDefaultCase());
868:       assertFalse(node0.isVoid());
869:       assertFalse(node0.isEmpty());
870:       assertFalse(node0.isGetterDef());
871:       assertFalse(node0.isSetterDef());
872:       assertFalse(node0.isParamList());
873:       assertTrue(node0.isAssignAdd());
874:       assertEquals(0, node0.getChildCount());
875:       assertFalse(node0.isFunction());
876:       assertFalse(node0.isAdd());
877:       assertFalse(node0.isNew());
878:       assertFalse(node0.isVar());
879:       assertFalse(node0.isName());
880:       assertFalse(node0.isDo());
881:       assertFalse(node0.isString());
882:       assertFalse(node0.isNull());
883:       assertFalse(node0.isOr());
884:       assertFalse(node0.isGetProp());
885:       assertFalse(node0.isReturn());
886:       assertFalse(node0.isDelProp());
887:       assertFalse(node0.isAssign());
888:       assertFalse(node0.isWhile());
889:       assertFalse(node0.hasChildren());
890:       assertFalse(node0.isBreak());
891:       assertFalse(node0.isGetElem());
892:       assertFalse(node0.isCall());
893:       assertFalse(node0.isDec());
894:       assertFalse(node0.isComma());
895:       assertFalse(node0.isTypeOf());
896:       assertFalse(node1.isBlock());
897:       assertFalse(node1.isNew());
898:       assertFalse(node1.isAdd());
899:       assertEquals(93, node1.getType());
900:       assertFalse(node1.isCall());
901:       assertFalse(node1.isName());
902:       assertFalse(node1.isStringKey());
903:       assertFalse(node1.isNull());
904:       assertFalse(node1.isCatch());
905:       assertFalse(node1.isGetElem());
906:       assertFalse(node1.isAssign());
907:       assertFalse(node1.isWhile());
908:       assertFalse(node1.hasMoreThanOneChild());
909:       assertFalse(node1.isTypeOf());
910:       assertFalse(node1.isRegExp());
911:       assertFalse(node1.isDec());
912:       assertFalse(node1.isReturn());
913:       assertFalse(node1.isVoid());
914:       assertFalse(node1.isTry());
915:       assertFalse(node1.isScript());
916:       assertFalse(node1.isArrayLit());
917:       assertFalse(node1.isExprResult());
918:       assertFalse(node1.isLabelName());
919:       assertFalse(node1.isEmpty());
920:       assertFalse(node1.isDelProp());
921:       assertFalse(node1.isNumber());
922:       assertFalse(node1.isGetterDef());
923:       assertFalse(node1.isTrue());
924:       assertFalse(node1.isOr());
925:       assertFalse(node1.isParamList());
926:       assertFalse(node1.isDo());
927:       assertFalse(node1.isDefaultCase());
928:       assertFalse(node1.isVar());
929:       assertFalse(node1.isLabel());
930:       assertFalse(node1.isSwitch());
931:       assertFalse(node1.isInc());
932:       assertFalse(node1.isString());
933:       assertTrue(node1.hasChildren());
934:       assertFalse(node1.isInstanceOf());
935:       assertFalse(node1.isBreak());
936:       assertFalse(node1.isGetProp());
937:       assertFalse(node1.isCase());
938:       assertFalse(node1.isFor());
939:       assertFalse(node1.isWith());
940:       assertFalse(node1.isHook());
941:       assertTrue(node1.hasOneChild());
942:       assertFalse(node1.isComma());
943:       assertEquals(16, node1.getCharno());
944:       assertEquals(1, node1.getChildCount());
945:       assertFalse(node1.isThis());
946:       assertFalse(node1.isFunction());
947:       assertEquals(46, node1.getLineno());
948:       assertFalse(node1.isCast());
949:       assertEquals(188432, node1.getSourcePosition());
950:       assertFalse(node1.isNot());
951:       assertFalse(node1.isAnd());
952:       assertFalse(node1.isObjectLit());
953:       assertFalse(node1.isIf());
954:       assertFalse(node1.isNE());
955:       assertFalse(node1.isDebugger());
956:       assertFalse(node1.isIn());
957:       assertFalse(node1.isSetterDef());
958:       assertTrue(node1.isAssignAdd());
959:       assertFalse(node1.isThrow());
960:       assertFalse(node1.isContinue());
961:       assertFalse(node1.isFalse());
962:       
963:       int int0 = node0.getLength();
964:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
965:       assertEquals(29, Node.JSDOC_INFO_PROP);
966:       assertEquals(53, Node.INPUT_ID);
967:       assertEquals(56, Node.CHANGE_TIME);
968:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
969:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
970:       assertEquals(43, Node.IS_CONSTANT_NAME);
971:       assertEquals(36, Node.QUOTED_PROP);
972:       assertEquals(12, Node.COLUMN_BITS);
973:       assertEquals(32, Node.INCRDECR_PROP);
974:       assertEquals(4095, Node.COLUMN_MASK);
975:       assertEquals(48, Node.DIRECTIVES);
976:       assertEquals(1, Node.DECR_FLAG);
977:       assertEquals(49, Node.DIRECT_EVAL);
978:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
979:       assertEquals(37, Node.OPT_ARG_NAME);
980:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
982:       assertEquals(57, Node.REFLECTED_OBJECT);
983:       assertEquals(52, Node.LENGTH);
984:       assertEquals(40, Node.ORIGINALNAME_PROP);
985:       assertEquals(15, Node.NO_SIDE_EFFECTS);
986:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
987:       assertEquals(8, Node.FLAG_NO_THROWS);
988:       assertEquals(50, Node.FREE_CALL);
989:       assertEquals(54, Node.SLASH_V);
990:       assertEquals(51, Node.STATIC_SOURCE_FILE);
991:       assertEquals(46, Node.IS_NAMESPACE);
992:       assertEquals(55, Node.INFERRED_FUNCTION);
993:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
994:       assertEquals(39, Node.EMPTY_BLOCK);
995:       assertEquals(57, Node.LAST_PROP);
996:       assertEquals(47, Node.IS_DISPATCHER);
997:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
998:       assertEquals(2, Node.POST_FLAG);
999:       assertEquals(30, Node.VAR_ARGS_NAME);
1000:       assertFalse(node0.equals((Object)node1));
1001:       assertEquals(0, int0);
1002:       assertFalse(node0.isExprResult());
1003:       assertFalse(node0.hasOneChild());
1004:       assertFalse(node0.isNot());
1005:       assertFalse(node0.isScript());
1006:       assertEquals((-1), node0.getSourcePosition());
1007:       assertFalse(node0.isObjectLit());
1008:       assertFalse(node0.isNumber());
1009:       assertFalse(node0.isLabel());
1010:       assertFalse(node0.isAnd());
1011:       assertFalse(node0.isLabelName());
1012:       assertFalse(node0.isThrow());
1013:       assertFalse(node0.isCast());
1014:       assertFalse(node0.isContinue());
1015:       assertFalse(node0.isFalse());
1016:       assertEquals((-1), node0.getCharno());
1017:       assertFalse(node0.isBlock());
1018:       assertFalse(node0.isHook());
1019:       assertFalse(node0.isInc());
1020:       assertFalse(node0.isSwitch());
1021:       assertEquals(93, node0.getType());
1022:       assertFalse(node0.isStringKey());
1023:       assertFalse(node0.isCase());
1024:       assertFalse(node0.isIn());
1025:       assertEquals((-1), node0.getLineno());
1026:       assertFalse(node0.isThis());
1027:       assertFalse(node0.isNE());
1028:       assertFalse(node0.isIf());
1029:       assertFalse(node0.isFor());
1030:       assertFalse(node0.isRegExp());
1031:       assertFalse(node0.isCatch());
1032:       assertFalse(node0.isInstanceOf());
1033:       assertFalse(node0.hasMoreThanOneChild());
1034:       assertFalse(node0.isWith());
1035:       assertFalse(node0.isTry());
1036:       assertFalse(node0.isDebugger());
1037:       assertFalse(node0.isTrue());
1038:       assertFalse(node0.isArrayLit());
1039:       assertFalse(node0.isDefaultCase());
1040:       assertFalse(node0.isVoid());
1041:       assertFalse(node0.isEmpty());
1042:       assertFalse(node0.isGetterDef());
1043:       assertFalse(node0.isSetterDef());
1044:       assertFalse(node0.isParamList());
1045:       assertTrue(node0.isAssignAdd());
1046:       assertEquals(0, node0.getChildCount());
1047:       assertFalse(node0.isFunction());
1048:       assertFalse(node0.isAdd());
1049:       assertFalse(node0.isNew());
1050:       assertFalse(node0.isVar());
1051:       assertFalse(node0.isName());
1052:       assertFalse(node0.isDo());
1053:       assertFalse(node0.isString());
1054:       assertFalse(node0.isNull());
1055:       assertFalse(node0.isOr());
1056:       assertFalse(node0.isGetProp());
1057:       assertFalse(node0.isReturn());
1058:       assertFalse(node0.isDelProp());
1059:       assertFalse(node0.isAssign());
1060:       assertFalse(node0.isWhile());
1061:       assertFalse(node0.hasChildren());
1062:       assertFalse(node0.isBreak());
1063:       assertFalse(node0.isGetElem());
1064:       assertFalse(node0.isCall());
1065:       assertFalse(node0.isDec());
1066:       assertFalse(node0.isComma());
1067:       assertFalse(node0.isTypeOf());
1068:       
1069:       boolean boolean1 = node0.isFunction();
1070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1071:       assertEquals(29, Node.JSDOC_INFO_PROP);
1072:       assertEquals(53, Node.INPUT_ID);
1073:       assertEquals(56, Node.CHANGE_TIME);
1074:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1075:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1076:       assertEquals(43, Node.IS_CONSTANT_NAME);
1077:       assertEquals(36, Node.QUOTED_PROP);
1078:       assertEquals(12, Node.COLUMN_BITS);
1079:       assertEquals(32, Node.INCRDECR_PROP);
1080:       assertEquals(4095, Node.COLUMN_MASK);
1081:       assertEquals(48, Node.DIRECTIVES);
1082:       assertEquals(1, Node.DECR_FLAG);
1083:       assertEquals(49, Node.DIRECT_EVAL);
1084:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1085:       assertEquals(37, Node.OPT_ARG_NAME);
1086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1087:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1088:       assertEquals(57, Node.REFLECTED_OBJECT);
1089:       assertEquals(52, Node.LENGTH);
1090:       assertEquals(40, Node.ORIGINALNAME_PROP);
1091:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1092:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1093:       assertEquals(8, Node.FLAG_NO_THROWS);
1094:       assertEquals(50, Node.FREE_CALL);
1095:       assertEquals(54, Node.SLASH_V);
1096:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1097:       assertEquals(46, Node.IS_NAMESPACE);
1098:       assertEquals(55, Node.INFERRED_FUNCTION);
1099:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1100:       assertEquals(39, Node.EMPTY_BLOCK);
1101:       assertEquals(57, Node.LAST_PROP);
1102:       assertEquals(47, Node.IS_DISPATCHER);
1103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1104:       assertEquals(2, Node.POST_FLAG);
1105:       assertEquals(30, Node.VAR_ARGS_NAME);
1106:       assertFalse(node0.equals((Object)node1));
1107:       assertTrue(boolean1 == boolean0);
1108:       assertFalse(boolean1);
1109:       assertFalse(node0.isExprResult());
1110:       assertFalse(node0.hasOneChild());
1111:       assertFalse(node0.isNot());
1112:       assertFalse(node0.isScript());
1113:       assertEquals((-1), node0.getSourcePosition());
1114:       assertFalse(node0.isObjectLit());
1115:       assertFalse(node0.isNumber());
1116:       assertFalse(node0.isLabel());
1117:       assertFalse(node0.isAnd());
1118:       assertFalse(node0.isLabelName());
1119:       assertFalse(node0.isThrow());
1120:       assertFalse(node0.isCast());
1121:       assertFalse(node0.isContinue());
1122:       assertFalse(node0.isFalse());
1123:       assertEquals((-1), node0.getCharno());
1124:       assertFalse(node0.isBlock());
1125:       assertFalse(node0.isHook());
1126:       assertFalse(node0.isInc());
1127:       assertFalse(node0.isSwitch());
1128:       assertEquals(93, node0.getType());
1129:       assertFalse(node0.isStringKey());
1130:       assertFalse(node0.isCase());
1131:       assertFalse(node0.isIn());
1132:       assertEquals((-1), node0.getLineno());
1133:       assertFalse(node0.isThis());
1134:       assertFalse(node0.isNE());
1135:       assertFalse(node0.isIf());
1136:       assertFalse(node0.isFor());
1137:       assertFalse(node0.isRegExp());
1138:       assertFalse(node0.isCatch());
1139:       assertFalse(node0.isInstanceOf());
1140:       assertFalse(node0.hasMoreThanOneChild());
1141:       assertFalse(node0.isWith());
1142:       assertFalse(node0.isTry());
1143:       assertFalse(node0.isDebugger());
1144:       assertFalse(node0.isTrue());
1145:       assertFalse(node0.isArrayLit());
1146:       assertFalse(node0.isDefaultCase());
1147:       assertFalse(node0.isVoid());
1148:       assertFalse(node0.isEmpty());
1149:       assertFalse(node0.isGetterDef());
1150:       assertFalse(node0.isSetterDef());
1151:       assertFalse(node0.isParamList());
1152:       assertTrue(node0.isAssignAdd());
1153:       assertEquals(0, node0.getChildCount());
1154:       assertFalse(node0.isFunction());
1155:       assertFalse(node0.isAdd());
1156:       assertFalse(node0.isNew());
1157:       assertFalse(node0.isVar());
1158:       assertFalse(node0.isName());
1159:       assertFalse(node0.isDo());
1160:       assertFalse(node0.isString());
1161:       assertFalse(node0.isNull());
1162:       assertFalse(node0.isOr());
1163:       assertFalse(node0.isGetProp());
1164:       assertFalse(node0.isReturn());
1165:       assertFalse(node0.isDelProp());
1166:       assertFalse(node0.isAssign());
1167:       assertFalse(node0.isWhile());
1168:       assertFalse(node0.hasChildren());
1169:       assertFalse(node0.isBreak());
1170:       assertFalse(node0.isGetElem());
1171:       assertFalse(node0.isCall());
1172:       assertFalse(node0.isDec());
1173:       assertFalse(node0.isComma());
1174:       assertFalse(node0.isTypeOf());
1175:       
1176:       boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
1177:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1178:       assertEquals(29, Node.JSDOC_INFO_PROP);
1179:       assertEquals(53, Node.INPUT_ID);
1180:       assertEquals(56, Node.CHANGE_TIME);
1181:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1182:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1183:       assertEquals(43, Node.IS_CONSTANT_NAME);
1184:       assertEquals(36, Node.QUOTED_PROP);
1185:       assertEquals(12, Node.COLUMN_BITS);
1186:       assertEquals(32, Node.INCRDECR_PROP);
1187:       assertEquals(4095, Node.COLUMN_MASK);
1188:       assertEquals(48, Node.DIRECTIVES);
1189:       assertEquals(1, Node.DECR_FLAG);
1190:       assertEquals(49, Node.DIRECT_EVAL);
1191:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1192:       assertEquals(37, Node.OPT_ARG_NAME);
1193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1195:       assertEquals(57, Node.REFLECTED_OBJECT);
1196:       assertEquals(52, Node.LENGTH);
1197:       assertEquals(40, Node.ORIGINALNAME_PROP);
1198:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1200:       assertEquals(8, Node.FLAG_NO_THROWS);
1201:       assertEquals(50, Node.FREE_CALL);
1202:       assertEquals(54, Node.SLASH_V);
1203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1204:       assertEquals(46, Node.IS_NAMESPACE);
1205:       assertEquals(55, Node.INFERRED_FUNCTION);
1206:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1207:       assertEquals(39, Node.EMPTY_BLOCK);
1208:       assertEquals(57, Node.LAST_PROP);
1209:       assertEquals(47, Node.IS_DISPATCHER);
1210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1211:       assertEquals(2, Node.POST_FLAG);
1212:       assertEquals(30, Node.VAR_ARGS_NAME);
1213:       assertFalse(node0.equals((Object)node1));
1214:       assertTrue(boolean2 == boolean1);
1215:       assertTrue(boolean2 == boolean0);
1216:       assertFalse(boolean2);
1217:       assertFalse(node0.isExprResult());
1218:       assertFalse(node0.hasOneChild());
1219:       assertFalse(node0.isNot());
1220:       assertFalse(node0.isScript());
1221:       assertEquals((-1), node0.getSourcePosition());
1222:       assertFalse(node0.isObjectLit());
1223:       assertFalse(node0.isNumber());
1224:       assertFalse(node0.isLabel());
1225:       assertFalse(node0.isAnd());
1226:       assertFalse(node0.isLabelName());
1227:       assertFalse(node0.isThrow());
1228:       assertFalse(node0.isCast());
1229:       assertFalse(node0.isContinue());
1230:       assertFalse(node0.isFalse());
1231:       assertEquals((-1), node0.getCharno());
1232:       assertFalse(node0.isBlock());
1233:       assertFalse(node0.isHook());
1234:       assertFalse(node0.isInc());
1235:       assertFalse(node0.isSwitch());
1236:       assertEquals(93, node0.getType());
1237:       assertFalse(node0.isStringKey());
1238:       assertFalse(node0.isCase());
1239:       assertFalse(node0.isIn());
1240:       assertEquals((-1), node0.getLineno());
1241:       assertFalse(node0.isThis());
1242:       assertFalse(node0.isNE());
1243:       assertFalse(node0.isIf());
1244:       assertFalse(node0.isFor());
1245:       assertFalse(node0.isRegExp());
1246:       assertFalse(node0.isCatch());
1247:       assertFalse(node0.isInstanceOf());
1248:       assertFalse(node0.hasMoreThanOneChild());
1249:       assertFalse(node0.isWith());
1250:       assertFalse(node0.isTry());
1251:       assertFalse(node0.isDebugger());
1252:       assertFalse(node0.isTrue());
1253:       assertFalse(node0.isArrayLit());
1254:       assertFalse(node0.isDefaultCase());
1255:       assertFalse(node0.isVoid());
1256:       assertFalse(node0.isEmpty());
1257:       assertFalse(node0.isGetterDef());
1258:       assertFalse(node0.isSetterDef());
1259:       assertFalse(node0.isParamList());
1260:       assertTrue(node0.isAssignAdd());
1261:       assertEquals(0, node0.getChildCount());
1262:       assertFalse(node0.isFunction());
1263:       assertFalse(node0.isAdd());
1264:       assertFalse(node0.isNew());
1265:       assertFalse(node0.isVar());
1266:       assertFalse(node0.isName());
1267:       assertFalse(node0.isDo());
1268:       assertFalse(node0.isString());
1269:       assertFalse(node0.isNull());
1270:       assertFalse(node0.isOr());
1271:       assertFalse(node0.isGetProp());
1272:       assertFalse(node0.isReturn());
1273:       assertFalse(node0.isDelProp());
1274:       assertFalse(node0.isAssign());
1275:       assertFalse(node0.isWhile());
1276:       assertFalse(node0.hasChildren());
1277:       assertFalse(node0.isBreak());
1278:       assertFalse(node0.isGetElem());
1279:       assertFalse(node0.isCall());
1280:       assertFalse(node0.isDec());
1281:       assertFalse(node0.isComma());
1282:       assertFalse(node0.isTypeOf());
1283:       
1284:       node0.putIntProp(48, 0);
1285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1286:       assertEquals(29, Node.JSDOC_INFO_PROP);
1287:       assertEquals(53, Node.INPUT_ID);
1288:       assertEquals(56, Node.CHANGE_TIME);
1289:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1290:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1291:       assertEquals(43, Node.IS_CONSTANT_NAME);
1292:       assertEquals(36, Node.QUOTED_PROP);
1293:       assertEquals(12, Node.COLUMN_BITS);
1294:       assertEquals(32, Node.INCRDECR_PROP);
1295:       assertEquals(4095, Node.COLUMN_MASK);
1296:       assertEquals(48, Node.DIRECTIVES);
1297:       assertEquals(1, Node.DECR_FLAG);
1298:       assertEquals(49, Node.DIRECT_EVAL);
1299:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1300:       assertEquals(37, Node.OPT_ARG_NAME);
1301:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1303:       assertEquals(57, Node.REFLECTED_OBJECT);
1304:       assertEquals(52, Node.LENGTH);
1305:       assertEquals(40, Node.ORIGINALNAME_PROP);
1306:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1308:       assertEquals(8, Node.FLAG_NO_THROWS);
1309:       assertEquals(50, Node.FREE_CALL);
1310:       assertEquals(54, Node.SLASH_V);
1311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1312:       assertEquals(46, Node.IS_NAMESPACE);
1313:       assertEquals(55, Node.INFERRED_FUNCTION);
1314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1315:       assertEquals(39, Node.EMPTY_BLOCK);
1316:       assertEquals(57, Node.LAST_PROP);
1317:       assertEquals(47, Node.IS_DISPATCHER);
1318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1319:       assertEquals(2, Node.POST_FLAG);
1320:       assertEquals(30, Node.VAR_ARGS_NAME);
1321:       assertFalse(node0.equals((Object)node1));
1322:       assertFalse(node0.isExprResult());
1323:       assertFalse(node0.hasOneChild());
1324:       assertFalse(node0.isNot());
1325:       assertFalse(node0.isScript());
1326:       assertEquals((-1), node0.getSourcePosition());
1327:       assertFalse(node0.isObjectLit());
1328:       assertFalse(node0.isNumber());
1329:       assertFalse(node0.isLabel());
1330:       assertFalse(node0.isAnd());
1331:       assertFalse(node0.isLabelName());
1332:       assertFalse(node0.isThrow());
1333:       assertFalse(node0.isCast());
1334:       assertFalse(node0.isContinue());
1335:       assertFalse(node0.isFalse());
1336:       assertEquals((-1), node0.getCharno());
1337:       assertFalse(node0.isBlock());
1338:       assertFalse(node0.isHook());
1339:       assertFalse(node0.isInc());
1340:       assertFalse(node0.isSwitch());
1341:       assertEquals(93, node0.getType());
1342:       assertFalse(node0.isStringKey());
1343:       assertFalse(node0.isCase());
1344:       assertFalse(node0.isIn());
1345:       assertEquals((-1), node0.getLineno());
1346:       assertFalse(node0.isThis());
1347:       assertFalse(node0.isNE());
1348:       assertFalse(node0.isIf());
1349:       assertFalse(node0.isFor());
1350:       assertFalse(node0.isRegExp());
1351:       assertFalse(node0.isCatch());
1352:       assertFalse(node0.isInstanceOf());
1353:       assertFalse(node0.hasMoreThanOneChild());
1354:       assertFalse(node0.isWith());
1355:       assertFalse(node0.isTry());
1356:       assertFalse(node0.isDebugger());
1357:       assertFalse(node0.isTrue());
1358:       assertFalse(node0.isArrayLit());
1359:       assertFalse(node0.isDefaultCase());
1360:       assertFalse(node0.isVoid());
1361:       assertFalse(node0.isEmpty());
1362:       assertFalse(node0.isGetterDef());
1363:       assertFalse(node0.isSetterDef());
1364:       assertFalse(node0.isParamList());
1365:       assertTrue(node0.isAssignAdd());
1366:       assertEquals(0, node0.getChildCount());
1367:       assertFalse(node0.isFunction());
1368:       assertFalse(node0.isAdd());
1369:       assertFalse(node0.isNew());
1370:       assertFalse(node0.isVar());
1371:       assertFalse(node0.isName());
1372:       assertFalse(node0.isDo());
1373:       assertFalse(node0.isString());
1374:       assertFalse(node0.isNull());
1375:       assertFalse(node0.isOr());
1376:       assertFalse(node0.isGetProp());
1377:       assertFalse(node0.isReturn());
1378:       assertFalse(node0.isDelProp());
1379:       assertFalse(node0.isAssign());
1380:       assertFalse(node0.isWhile());
1381:       assertFalse(node0.hasChildren());
1382:       assertFalse(node0.isBreak());
1383:       assertFalse(node0.isGetElem());
1384:       assertFalse(node0.isCall());
1385:       assertFalse(node0.isDec());
1386:       assertFalse(node0.isComma());
1387:       assertFalse(node0.isTypeOf());
1388:       
1389:       boolean boolean3 = node0.mayMutateGlobalStateOrThrow();
1390:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1391:       assertEquals(29, Node.JSDOC_INFO_PROP);
1392:       assertEquals(53, Node.INPUT_ID);
1393:       assertEquals(56, Node.CHANGE_TIME);
1394:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1396:       assertEquals(43, Node.IS_CONSTANT_NAME);
1397:       assertEquals(36, Node.QUOTED_PROP);
1398:       assertEquals(12, Node.COLUMN_BITS);
1399:       assertEquals(32, Node.INCRDECR_PROP);
1400:       assertEquals(4095, Node.COLUMN_MASK);
1401:       assertEquals(48, Node.DIRECTIVES);
1402:       assertEquals(1, Node.DECR_FLAG);
1403:       assertEquals(49, Node.DIRECT_EVAL);
1404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1405:       assertEquals(37, Node.OPT_ARG_NAME);
1406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1407:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1408:       assertEquals(57, Node.REFLECTED_OBJECT);
1409:       assertEquals(52, Node.LENGTH);
1410:       assertEquals(40, Node.ORIGINALNAME_PROP);
1411:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1412:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1413:       assertEquals(8, Node.FLAG_NO_THROWS);
1414:       assertEquals(50, Node.FREE_CALL);
1415:       assertEquals(54, Node.SLASH_V);
1416:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1417:       assertEquals(46, Node.IS_NAMESPACE);
1418:       assertEquals(55, Node.INFERRED_FUNCTION);
1419:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1420:       assertEquals(39, Node.EMPTY_BLOCK);
1421:       assertEquals(57, Node.LAST_PROP);
1422:       assertEquals(47, Node.IS_DISPATCHER);
1423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1424:       assertEquals(2, Node.POST_FLAG);
1425:       assertEquals(30, Node.VAR_ARGS_NAME);
1426:       assertFalse(node0.equals((Object)node1));
1427:       assertFalse(boolean3 == boolean0);
1428:       assertFalse(boolean3 == boolean2);
1429:       assertFalse(boolean3 == boolean1);
1430:       assertTrue(boolean3);
1431:       assertFalse(node0.isExprResult());
1432:       assertFalse(node0.hasOneChild());
1433:       assertFalse(node0.isNot());
1434:       assertFalse(node0.isScript());
1435:       assertEquals((-1), node0.getSourcePosition());
1436:       assertFalse(node0.isObjectLit());
1437:       assertFalse(node0.isNumber());
1438:       assertFalse(node0.isLabel());
1439:       assertFalse(node0.isAnd());
1440:       assertFalse(node0.isLabelName());
1441:       assertFalse(node0.isThrow());
1442:       assertFalse(node0.isCast());
1443:       assertFalse(node0.isContinue());
1444:       assertFalse(node0.isFalse());
1445:       assertEquals((-1), node0.getCharno());
1446:       assertFalse(node0.isBlock());
1447:       assertFalse(node0.isHook());
1448:       assertFalse(node0.isInc());
1449:       assertFalse(node0.isSwitch());
1450:       assertEquals(93, node0.getType());
1451:       assertFalse(node0.isStringKey());
1452:       assertFalse(node0.isCase());
1453:       assertFalse(node0.isIn());
1454:       assertEquals((-1), node0.getLineno());
1455:       assertFalse(node0.isThis());
1456:       assertFalse(node0.isNE());
1457:       assertFalse(node0.isIf());
1458:       assertFalse(node0.isFor());
1459:       assertFalse(node0.isRegExp());
1460:       assertFalse(node0.isCatch());
1461:       assertFalse(node0.isInstanceOf());
1462:       assertFalse(node0.hasMoreThanOneChild());
1463:       assertFalse(node0.isWith());
1464:       assertFalse(node0.isTry());
1465:       assertFalse(node0.isDebugger());
1466:       assertFalse(node0.isTrue());
1467:       assertFalse(node0.isArrayLit());
1468:       assertFalse(node0.isDefaultCase());
1469:       assertFalse(node0.isVoid());
1470:       assertFalse(node0.isEmpty());
1471:       assertFalse(node0.isGetterDef());
1472:       assertFalse(node0.isSetterDef());
1473:       assertFalse(node0.isParamList());
1474:       assertTrue(node0.isAssignAdd());
1475:       assertEquals(0, node0.getChildCount());
1476:       assertFalse(node0.isFunction());
1477:       assertFalse(node0.isAdd());
1478:       assertFalse(node0.isNew());
1479:       assertFalse(node0.isVar());
1480:       assertFalse(node0.isName());
1481:       assertFalse(node0.isDo());
1482:       assertFalse(node0.isString());
1483:       assertFalse(node0.isNull());
1484:       assertFalse(node0.isOr());
1485:       assertFalse(node0.isGetProp());
1486:       assertFalse(node0.isReturn());
1487:       assertFalse(node0.isDelProp());
1488:       assertFalse(node0.isAssign());
1489:       assertFalse(node0.isWhile());
1490:       assertFalse(node0.hasChildren());
1491:       assertFalse(node0.isBreak());
1492:       assertFalse(node0.isGetElem());
1493:       assertFalse(node0.isCall());
1494:       assertFalse(node0.isDec());
1495:       assertFalse(node0.isComma());
1496:       assertFalse(node0.isTypeOf());
1497:       
1498:       Iterable<Node> iterable1 = node1.siblings();
1499:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1500:       assertEquals(29, Node.JSDOC_INFO_PROP);
1501:       assertEquals(53, Node.INPUT_ID);
1502:       assertEquals(56, Node.CHANGE_TIME);
1503:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1504:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1505:       assertEquals(43, Node.IS_CONSTANT_NAME);
1506:       assertEquals(36, Node.QUOTED_PROP);
1507:       assertEquals(12, Node.COLUMN_BITS);
1508:       assertEquals(32, Node.INCRDECR_PROP);
1509:       assertEquals(4095, Node.COLUMN_MASK);
1510:       assertEquals(48, Node.DIRECTIVES);
1511:       assertEquals(1, Node.DECR_FLAG);
1512:       assertEquals(49, Node.DIRECT_EVAL);
1513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1514:       assertEquals(37, Node.OPT_ARG_NAME);
1515:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1516:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1517:       assertEquals(57, Node.REFLECTED_OBJECT);
1518:       assertEquals(52, Node.LENGTH);
1519:       assertEquals(40, Node.ORIGINALNAME_PROP);
1520:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1522:       assertEquals(8, Node.FLAG_NO_THROWS);
1523:       assertEquals(50, Node.FREE_CALL);
1524:       assertEquals(54, Node.SLASH_V);
1525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1526:       assertEquals(46, Node.IS_NAMESPACE);
1527:       assertEquals(55, Node.INFERRED_FUNCTION);
1528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1529:       assertEquals(39, Node.EMPTY_BLOCK);
1530:       assertEquals(57, Node.LAST_PROP);
1531:       assertEquals(47, Node.IS_DISPATCHER);
1532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1533:       assertEquals(2, Node.POST_FLAG);
1534:       assertEquals(30, Node.VAR_ARGS_NAME);
1535:       assertEquals(52, Node.LENGTH);
1536:       assertEquals(57, Node.REFLECTED_OBJECT);
1537:       assertEquals(40, Node.ORIGINALNAME_PROP);
1538:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1539:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1540:       assertEquals(49, Node.DIRECT_EVAL);
1541:       assertEquals(50, Node.FREE_CALL);
1542:       assertEquals(54, Node.SLASH_V);
1543:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1544:       assertEquals(8, Node.FLAG_NO_THROWS);
1545:       assertEquals(39, Node.EMPTY_BLOCK);
1546:       assertEquals(55, Node.INFERRED_FUNCTION);
1547:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1548:       assertEquals(57, Node.LAST_PROP);
1549:       assertEquals(47, Node.IS_DISPATCHER);
1550:       assertEquals(2, Node.POST_FLAG);
1551:       assertEquals(30, Node.VAR_ARGS_NAME);
1552:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1553:       assertEquals(29, Node.JSDOC_INFO_PROP);
1554:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1555:       assertEquals(53, Node.INPUT_ID);
1556:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1557:       assertEquals(36, Node.QUOTED_PROP);
1558:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1559:       assertEquals(43, Node.IS_CONSTANT_NAME);
1560:       assertEquals(56, Node.CHANGE_TIME);
1561:       assertEquals(32, Node.INCRDECR_PROP);
1562:       assertEquals(46, Node.IS_NAMESPACE);
1563:       assertEquals(48, Node.DIRECTIVES);
1564:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1565:       assertEquals(37, Node.OPT_ARG_NAME);
1566:       assertEquals(4095, Node.COLUMN_MASK);
1567:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1568:       assertEquals(1, Node.DECR_FLAG);
1569:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1570:       assertEquals(12, Node.COLUMN_BITS);
1571:       assertFalse(node0.equals((Object)node1));
1572:       assertFalse(node1.equals((Object)node0));
1573:       assertFalse(iterable1.equals((Object)iterable0));
1574:       assertNotNull(iterable1);
1575:       assertFalse(node0.isExprResult());
1576:       assertFalse(node0.hasOneChild());
1577:       assertFalse(node0.isNot());
1578:       assertFalse(node0.isScript());
1579:       assertEquals((-1), node0.getSourcePosition());
1580:       assertFalse(node0.isObjectLit());
1581:       assertFalse(node0.isNumber());
1582:       assertFalse(node0.isLabel());
1583:       assertFalse(node0.isAnd());
1584:       assertFalse(node0.isLabelName());
1585:       assertFalse(node0.isThrow());
1586:       assertFalse(node0.isCast());
1587:       assertFalse(node0.isContinue());
1588:       assertFalse(node0.isFalse());
1589:       assertEquals((-1), node0.getCharno());
1590:       assertFalse(node0.isBlock());
1591:       assertFalse(node0.isHook());
1592:       assertFalse(node0.isInc());
1593:       assertFalse(node0.isSwitch());
1594:       assertEquals(93, node0.getType());
1595:       assertFalse(node0.isStringKey());
1596:       assertFalse(node0.isCase());
1597:       assertFalse(node0.isIn());
1598:       assertEquals((-1), node0.getLineno());
1599:       assertFalse(node0.isThis());
1600:       assertFalse(node0.isNE());
1601:       assertFalse(node0.isIf());
1602:       assertFalse(node0.isFor());
1603:       assertFalse(node0.isRegExp());
1604:       assertFalse(node0.isCatch());
1605:       assertFalse(node0.isInstanceOf());
1606:       assertFalse(node0.hasMoreThanOneChild());
1607:       assertFalse(node0.isWith());
1608:       assertFalse(node0.isTry());
1609:       assertFalse(node0.isDebugger());
1610:       assertFalse(node0.isTrue());
1611:       assertFalse(node0.isArrayLit());
1612:       assertFalse(node0.isDefaultCase());
1613:       assertFalse(node0.isVoid());
1614:       assertFalse(node0.isEmpty());
1615:       assertFalse(node0.isGetterDef());
1616:       assertFalse(node0.isSetterDef());
1617:       assertFalse(node0.isParamList());
1618:       assertTrue(node0.isAssignAdd());
1619:       assertEquals(0, node0.getChildCount());
1620:       assertFalse(node0.isFunction());
1621:       assertFalse(node0.isAdd());
1622:       assertFalse(node0.isNew());
1623:       assertFalse(node0.isVar());
1624:       assertFalse(node0.isName());
1625:       assertFalse(node0.isDo());
1626:       assertFalse(node0.isString());
1627:       assertFalse(node0.isNull());
1628:       assertFalse(node0.isOr());
1629:       assertFalse(node0.isGetProp());
1630:       assertFalse(node0.isReturn());
1631:       assertFalse(node0.isDelProp());
1632:       assertFalse(node0.isAssign());
1633:       assertFalse(node0.isWhile());
1634:       assertFalse(node0.hasChildren());
1635:       assertFalse(node0.isBreak());
1636:       assertFalse(node0.isGetElem());
1637:       assertFalse(node0.isCall());
1638:       assertFalse(node0.isDec());
1639:       assertFalse(node0.isComma());
1640:       assertFalse(node0.isTypeOf());
1641:       assertFalse(node1.isBlock());
1642:       assertFalse(node1.isNew());
1643:       assertFalse(node1.isAdd());
1644:       assertEquals(93, node1.getType());
1645:       assertFalse(node1.isCall());
1646:       assertFalse(node1.isName());
1647:       assertFalse(node1.isStringKey());
1648:       assertFalse(node1.isNull());
1649:       assertFalse(node1.isCatch());
1650:       assertFalse(node1.isGetElem());
1651:       assertFalse(node1.isAssign());
1652:       assertFalse(node1.isWhile());
1653:       assertFalse(node1.hasMoreThanOneChild());
1654:       assertFalse(node1.isTypeOf());
1655:       assertFalse(node1.isRegExp());
1656:       assertFalse(node1.isDec());
1657:       assertFalse(node1.isReturn());
1658:       assertFalse(node1.isVoid());
1659:       assertFalse(node1.isTry());
1660:       assertFalse(node1.isScript());
1661:       assertFalse(node1.isArrayLit());
1662:       assertFalse(node1.isExprResult());
1663:       assertFalse(node1.isLabelName());
1664:       assertFalse(node1.isEmpty());
1665:       assertFalse(node1.isDelProp());
1666:       assertFalse(node1.isNumber());
1667:       assertFalse(node1.isGetterDef());
1668:       assertFalse(node1.isTrue());
1669:       assertFalse(node1.isOr());
1670:       assertFalse(node1.isParamList());
1671:       assertFalse(node1.isDo());
1672:       assertFalse(node1.isDefaultCase());
1673:       assertFalse(node1.isVar());
1674:       assertFalse(node1.isLabel());
1675:       assertFalse(node1.isSwitch());
1676:       assertFalse(node1.isInc());
1677:       assertFalse(node1.isString());
1678:       assertTrue(node1.hasChildren());
1679:       assertFalse(node1.isInstanceOf());
1680:       assertFalse(node1.isBreak());
1681:       assertFalse(node1.isGetProp());
1682:       assertFalse(node1.isCase());
1683:       assertFalse(node1.isFor());
1684:       assertFalse(node1.isWith());
1685:       assertFalse(node1.isHook());
1686:       assertTrue(node1.hasOneChild());
1687:       assertFalse(node1.isComma());
1688:       assertEquals(16, node1.getCharno());
1689:       assertEquals(1, node1.getChildCount());
1690:       assertFalse(node1.isThis());
1691:       assertFalse(node1.isFunction());
1692:       assertEquals(46, node1.getLineno());
1693:       assertFalse(node1.isCast());
1694:       assertEquals(188432, node1.getSourcePosition());
1695:       assertFalse(node1.isNot());
1696:       assertFalse(node1.isAnd());
1697:       assertFalse(node1.isObjectLit());
1698:       assertFalse(node1.isIf());
1699:       assertFalse(node1.isNE());
1700:       assertFalse(node1.isDebugger());
1701:       assertFalse(node1.isIn());
1702:       assertFalse(node1.isSetterDef());
1703:       assertTrue(node1.isAssignAdd());
1704:       assertFalse(node1.isThrow());
1705:       assertFalse(node1.isContinue());
1706:       assertFalse(node1.isFalse());
1707:       
1708:       Node node2 = new Node(2216);
1709:       assertEquals(32, Node.INCRDECR_PROP);
1710:       assertEquals(37, Node.OPT_ARG_NAME);
1711:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1712:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1713:       assertEquals(29, Node.JSDOC_INFO_PROP);
1714:       assertEquals(49, Node.DIRECT_EVAL);
1715:       assertEquals(56, Node.CHANGE_TIME);
1716:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1717:       assertEquals(46, Node.IS_NAMESPACE);
1718:       assertEquals(53, Node.INPUT_ID);
1719:       assertEquals(54, Node.SLASH_V);
1720:       assertEquals(52, Node.LENGTH);
1721:       assertEquals(40, Node.ORIGINALNAME_PROP);
1722:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1723:       assertEquals(30, Node.VAR_ARGS_NAME);
1724:       assertEquals(57, Node.LAST_PROP);
1725:       assertEquals(2, Node.POST_FLAG);
1726:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1727:       assertEquals(47, Node.IS_DISPATCHER);
1728:       assertEquals(48, Node.DIRECTIVES);
1729:       assertEquals(8, Node.FLAG_NO_THROWS);
1730:       assertEquals(55, Node.INFERRED_FUNCTION);
1731:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1732:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1733:       assertEquals(39, Node.EMPTY_BLOCK);
1734:       assertEquals(50, Node.FREE_CALL);
1735:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1736:       assertEquals(43, Node.IS_CONSTANT_NAME);
1737:       assertEquals(36, Node.QUOTED_PROP);
1738:       assertEquals(57, Node.REFLECTED_OBJECT);
1739:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1740:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1741:       assertEquals(1, Node.DECR_FLAG);
1742:       assertEquals(4095, Node.COLUMN_MASK);
1743:       assertEquals(12, Node.COLUMN_BITS);
1744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1745:       assertFalse(node2.equals((Object)node1));
1746:       assertFalse(node2.equals((Object)node0));
1747:       assertNotNull(node2);
1748:       assertFalse(node2.isNE());
1749:       assertFalse(node2.isIf());
1750:       assertFalse(node2.isDelProp());
1751:       assertFalse(node2.isEmpty());
1752:       assertFalse(node2.isString());
1753:       assertFalse(node2.isIn());
1754:       assertFalse(node2.isGetterDef());
1755:       assertFalse(node2.isTrue());
1756:       assertFalse(node2.isCase());
1757:       assertFalse(node2.isVoid());
1758:       assertFalse(node2.isTry());
1759:       assertFalse(node2.isCatch());
1760:       assertFalse(node2.isHook());
1761:       assertFalse(node2.isFor());
1762:       assertFalse(node2.isRegExp());
1763:       assertFalse(node2.isComma());
1764:       assertFalse(node2.isSetterDef());
1765:       assertFalse(node2.isGetProp());
1766:       assertFalse(node2.isAnd());
1767:       assertFalse(node2.isNot());
1768:       assertFalse(node2.isObjectLit());
1769:       assertFalse(node2.isFunction());
1770:       assertFalse(node2.isInc());
1771:       assertFalse(node2.isDebugger());
1772:       assertFalse(node2.isCast());
1773:       assertFalse(node2.isContinue());
1774:       assertEquals(2216, node2.getType());
1775:       assertFalse(node2.isThrow());
1776:       assertFalse(node2.isFalse());
1777:       assertEquals((-1), node2.getLineno());
1778:       assertFalse(node2.isAssignAdd());
1779:       assertFalse(node2.isLabelName());
1780:       assertFalse(node2.isNumber());
1781:       assertEquals((-1), node2.getSourcePosition());
1782:       assertFalse(node2.isOr());
1783:       assertFalse(node2.isBlock());
1784:       assertFalse(node2.isScript());
1785:       assertFalse(node2.isExprResult());
1786:       assertFalse(node2.isWhile());
1787:       assertFalse(node2.hasOneChild());
1788:       assertFalse(node2.hasMoreThanOneChild());
1789:       assertFalse(node2.isGetElem());
1790:       assertFalse(node2.isInstanceOf());
1791:       assertFalse(node2.isCall());
1792:       assertFalse(node2.isReturn());
1793:       assertFalse(node2.isWith());
1794:       assertFalse(node2.hasChildren());
1795:       assertFalse(node2.isDec());
1796:       assertFalse(node2.isTypeOf());
1797:       assertFalse(node2.isAssign());
1798:       assertFalse(node2.isParamList());
1799:       assertFalse(node2.isThis());
1800:       assertFalse(node2.isNull());
1801:       assertFalse(node2.isBreak());
1802:       assertFalse(node2.isName());
1803:       assertFalse(node2.isStringKey());
1804:       assertFalse(node2.isSwitch());
1805:       assertEquals((-1), node2.getCharno());
1806:       assertFalse(node2.isAdd());
1807:       assertFalse(node2.isDefaultCase());
1808:       assertFalse(node2.isNew());
1809:       assertFalse(node2.isDo());
1810:       assertFalse(node2.isArrayLit());
1811:       assertFalse(node2.isVar());
1812:       assertFalse(node2.isLabel());
1813:       assertEquals(0, node2.getChildCount());
1814:       
1815:       int int1 = node1.getIndexOfChild(node2);
1816:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1817:       assertEquals(29, Node.JSDOC_INFO_PROP);
1818:       assertEquals(53, Node.INPUT_ID);
1819:       assertEquals(56, Node.CHANGE_TIME);
1820:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1821:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1822:       assertEquals(43, Node.IS_CONSTANT_NAME);
1823:       assertEquals(36, Node.QUOTED_PROP);
1824:       assertEquals(12, Node.COLUMN_BITS);
1825:       assertEquals(32, Node.INCRDECR_PROP);
1826:       assertEquals(4095, Node.COLUMN_MASK);
1827:       assertEquals(48, Node.DIRECTIVES);
1828:       assertEquals(1, Node.DECR_FLAG);
1829:       assertEquals(49, Node.DIRECT_EVAL);
1830:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1831:       assertEquals(37, Node.OPT_ARG_NAME);
1832:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1833:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1834:       assertEquals(57, Node.REFLECTED_OBJECT);
1835:       assertEquals(52, Node.LENGTH);
1836:       assertEquals(40, Node.ORIGINALNAME_PROP);
1837:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1838:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1839:       assertEquals(8, Node.FLAG_NO_THROWS);
1840:       assertEquals(50, Node.FREE_CALL);
1841:       assertEquals(54, Node.SLASH_V);
1842:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1843:       assertEquals(46, Node.IS_NAMESPACE);
1844:       assertEquals(55, Node.INFERRED_FUNCTION);
1845:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1846:       assertEquals(39, Node.EMPTY_BLOCK);
1847:       assertEquals(57, Node.LAST_PROP);
1848:       assertEquals(47, Node.IS_DISPATCHER);
1849:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1850:       assertEquals(2, Node.POST_FLAG);
1851:       assertEquals(30, Node.VAR_ARGS_NAME);
1852:       assertEquals(52, Node.LENGTH);
1853:       assertEquals(57, Node.REFLECTED_OBJECT);
1854:       assertEquals(40, Node.ORIGINALNAME_PROP);
1855:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1857:       assertEquals(49, Node.DIRECT_EVAL);
1858:       assertEquals(50, Node.FREE_CALL);
1859:       assertEquals(54, Node.SLASH_V);
1860:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1861:       assertEquals(8, Node.FLAG_NO_THROWS);
1862:       assertEquals(39, Node.EMPTY_BLOCK);
1863:       assertEquals(55, Node.INFERRED_FUNCTION);
1864:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1865:       assertEquals(57, Node.LAST_PROP);
1866:       assertEquals(47, Node.IS_DISPATCHER);
1867:       assertEquals(2, Node.POST_FLAG);
1868:       assertEquals(30, Node.VAR_ARGS_NAME);
1869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1870:       assertEquals(29, Node.JSDOC_INFO_PROP);
1871:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1872:       assertEquals(53, Node.INPUT_ID);
1873:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1874:       assertEquals(36, Node.QUOTED_PROP);
1875:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1876:       assertEquals(43, Node.IS_CONSTANT_NAME);
1877:       assertEquals(56, Node.CHANGE_TIME);
1878:       assertEquals(32, Node.INCRDECR_PROP);
1879:       assertEquals(46, Node.IS_NAMESPACE);
1880:       assertEquals(48, Node.DIRECTIVES);
1881:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1882:       assertEquals(37, Node.OPT_ARG_NAME);
1883:       assertEquals(4095, Node.COLUMN_MASK);
1884:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1885:       assertEquals(1, Node.DECR_FLAG);
1886:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1887:       assertEquals(12, Node.COLUMN_BITS);
1888:       assertEquals(32, Node.INCRDECR_PROP);
1889:       assertEquals(37, Node.OPT_ARG_NAME);
1890:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1891:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1892:       assertEquals(29, Node.JSDOC_INFO_PROP);
1893:       assertEquals(49, Node.DIRECT_EVAL);
1894:       assertEquals(56, Node.CHANGE_TIME);
1895:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1896:       assertEquals(46, Node.IS_NAMESPACE);
1897:       assertEquals(53, Node.INPUT_ID);
1898:       assertEquals(54, Node.SLASH_V);
1899:       assertEquals(52, Node.LENGTH);
1900:       assertEquals(40, Node.ORIGINALNAME_PROP);
1901:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1902:       assertEquals(30, Node.VAR_ARGS_NAME);
1903:       assertEquals(57, Node.LAST_PROP);
1904:       assertEquals(2, Node.POST_FLAG);
1905:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1906:       assertEquals(47, Node.IS_DISPATCHER);
1907:       assertEquals(48, Node.DIRECTIVES);
1908:       assertEquals(8, Node.FLAG_NO_THROWS);
1909:       assertEquals(55, Node.INFERRED_FUNCTION);
1910:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1911:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1912:       assertEquals(39, Node.EMPTY_BLOCK);
1913:       assertEquals(50, Node.FREE_CALL);
1914:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1915:       assertEquals(43, Node.IS_CONSTANT_NAME);
1916:       assertEquals(36, Node.QUOTED_PROP);
1917:       assertEquals(57, Node.REFLECTED_OBJECT);
1918:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1919:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1920:       assertEquals(1, Node.DECR_FLAG);
1921:       assertEquals(4095, Node.COLUMN_MASK);
1922:       assertEquals(12, Node.COLUMN_BITS);
1923:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1924:       assertFalse(node0.equals((Object)node1));
1925:       assertFalse(node0.equals((Object)node2));
1926:       assertFalse(node1.equals((Object)node0));
1927:       assertFalse(node1.equals((Object)node2));
1928:       assertFalse(node2.equals((Object)node1));
1929:       assertFalse(node2.equals((Object)node0));
1930:       assertFalse(int1 == int0);
1931:       assertNotSame(node1, node2);
1932:       assertNotSame(node2, node1);
1933:       assertEquals((-1), int1);
1934:       assertFalse(node0.isExprResult());
1935:       assertFalse(node0.hasOneChild());
1936:       assertFalse(node0.isNot());
1937:       assertFalse(node0.isScript());
1938:       assertEquals((-1), node0.getSourcePosition());
1939:       assertFalse(node0.isObjectLit());
1940:       assertFalse(node0.isNumber());
1941:       assertFalse(node0.isLabel());
1942:       assertFalse(node0.isAnd());
1943:       assertFalse(node0.isLabelName());
1944:       assertFalse(node0.isThrow());
1945:       assertFalse(node0.isCast());
1946:       assertFalse(node0.isContinue());
1947:       assertFalse(node0.isFalse());
1948:       assertEquals((-1), node0.getCharno());
1949:       assertFalse(node0.isBlock());
1950:       assertFalse(node0.isHook());
1951:       assertFalse(node0.isInc());
1952:       assertFalse(node0.isSwitch());
1953:       assertEquals(93, node0.getType());
1954:       assertFalse(node0.isStringKey());
1955:       assertFalse(node0.isCase());
1956:       assertFalse(node0.isIn());
1957:       assertEquals((-1), node0.getLineno());
1958:       assertFalse(node0.isThis());
1959:       assertFalse(node0.isNE());
1960:       assertFalse(node0.isIf());
1961:       assertFalse(node0.isFor());
1962:       assertFalse(node0.isRegExp());
1963:       assertFalse(node0.isCatch());
1964:       assertFalse(node0.isInstanceOf());
1965:       assertFalse(node0.hasMoreThanOneChild());
1966:       assertFalse(node0.isWith());
1967:       assertFalse(node0.isTry());
1968:       assertFalse(node0.isDebugger());
1969:       assertFalse(node0.isTrue());
1970:       assertFalse(node0.isArrayLit());
1971:       assertFalse(node0.isDefaultCase());
1972:       assertFalse(node0.isVoid());
1973:       assertFalse(node0.isEmpty());
1974:       assertFalse(node0.isGetterDef());
1975:       assertFalse(node0.isSetterDef());
1976:       assertFalse(node0.isParamList());
1977:       assertTrue(node0.isAssignAdd());
1978:       assertEquals(0, node0.getChildCount());
1979:       assertFalse(node0.isFunction());
1980:       assertFalse(node0.isAdd());
1981:       assertFalse(node0.isNew());
1982:       assertFalse(node0.isVar());
1983:       assertFalse(node0.isName());
1984:       assertFalse(node0.isDo());
1985:       assertFalse(node0.isString());
1986:       assertFalse(node0.isNull());
1987:       assertFalse(node0.isOr());
1988:       assertFalse(node0.isGetProp());
1989:       assertFalse(node0.isReturn());
1990:       assertFalse(node0.isDelProp());
1991:       assertFalse(node0.isAssign());
1992:       assertFalse(node0.isWhile());
1993:       assertFalse(node0.hasChildren());
1994:       assertFalse(node0.isBreak());
1995:       assertFalse(node0.isGetElem());
1996:       assertFalse(node0.isCall());
1997:       assertFalse(node0.isDec());
1998:       assertFalse(node0.isComma());
1999:       assertFalse(node0.isTypeOf());
2000:       assertFalse(node1.isBlock());
2001:       assertFalse(node1.isNew());
2002:       assertFalse(node1.isAdd());
2003:       assertEquals(93, node1.getType());
2004:       assertFalse(node1.isCall());
2005:       assertFalse(node1.isName());
2006:       assertFalse(node1.isStringKey());
2007:       assertFalse(node1.isNull());
2008:       assertFalse(node1.isCatch());
2009:       assertFalse(node1.isGetElem());
2010:       assertFalse(node1.isAssign());
2011:       assertFalse(node1.isWhile());
2012:       assertFalse(node1.hasMoreThanOneChild());
2013:       assertFalse(node1.isTypeOf());
2014:       assertFalse(node1.isRegExp());
2015:       assertFalse(node1.isDec());
2016:       assertFalse(node1.isReturn());
2017:       assertFalse(node1.isVoid());
2018:       assertFalse(node1.isTry());
2019:       assertFalse(node1.isScript());
2020:       assertFalse(node1.isArrayLit());
2021:       assertFalse(node1.isExprResult());
2022:       assertFalse(node1.isLabelName());
2023:       assertFalse(node1.isEmpty());
2024:       assertFalse(node1.isDelProp());
2025:       assertFalse(node1.isNumber());
2026:       assertFalse(node1.isGetterDef());
2027:       assertFalse(node1.isTrue());
2028:       assertFalse(node1.isOr());
2029:       assertFalse(node1.isParamList());
2030:       assertFalse(node1.isDo());
2031:       assertFalse(node1.isDefaultCase());
2032:       assertFalse(node1.isVar());
2033:       assertFalse(node1.isLabel());
2034:       assertFalse(node1.isSwitch());
2035:       assertFalse(node1.isInc());
2036:       assertFalse(node1.isString());
2037:       assertTrue(node1.hasChildren());
2038:       assertFalse(node1.isInstanceOf());
2039:       assertFalse(node1.isBreak());
2040:       assertFalse(node1.isGetProp());
2041:       assertFalse(node1.isCase());
2042:       assertFalse(node1.isFor());
2043:       assertFalse(node1.isWith());
2044:       assertFalse(node1.isHook());
2045:       assertTrue(node1.hasOneChild());
2046:       assertFalse(node1.isComma());
2047:       assertEquals(16, node1.getCharno());
2048:       assertEquals(1, node1.getChildCount());
2049:       assertFalse(node1.isThis());
2050:       assertFalse(node1.isFunction());
2051:       assertEquals(46, node1.getLineno());
2052:       assertFalse(node1.isCast());
2053:       assertEquals(188432, node1.getSourcePosition());
2054:       assertFalse(node1.isNot());
2055:       assertFalse(node1.isAnd());
2056:       assertFalse(node1.isObjectLit());
2057:       assertFalse(node1.isIf());
2058:       assertFalse(node1.isNE());
2059:       assertFalse(node1.isDebugger());
2060:       assertFalse(node1.isIn());
2061:       assertFalse(node1.isSetterDef());
2062:       assertTrue(node1.isAssignAdd());
2063:       assertFalse(node1.isThrow());
2064:       assertFalse(node1.isContinue());
2065:       assertFalse(node1.isFalse());
2066:       assertFalse(node2.isNE());
2067:       assertFalse(node2.isIf());
2068:       assertFalse(node2.isDelProp());
2069:       assertFalse(node2.isEmpty());
2070:       assertFalse(node2.isString());
2071:       assertFalse(node2.isIn());
2072:       assertFalse(node2.isGetterDef());
2073:       assertFalse(node2.isTrue());
2074:       assertFalse(node2.isCase());
2075:       assertFalse(node2.isVoid());
2076:       assertFalse(node2.isTry());
2077:       assertFalse(node2.isCatch());
2078:       assertFalse(node2.isHook());
2079:       assertFalse(node2.isFor());
2080:       assertFalse(node2.isRegExp());
2081:       assertFalse(node2.isComma());
2082:       assertFalse(node2.isSetterDef());
2083:       assertFalse(node2.isGetProp());
2084:       assertFalse(node2.isAnd());
2085:       assertFalse(node2.isNot());
2086:       assertFalse(node2.isObjectLit());
2087:       assertFalse(node2.isFunction());
2088:       assertFalse(node2.isInc());
2089:       assertFalse(node2.isDebugger());
2090:       assertFalse(node2.isCast());
2091:       assertFalse(node2.isContinue());
2092:       assertEquals(2216, node2.getType());
2093:       assertFalse(node2.isThrow());
2094:       assertFalse(node2.isFalse());
2095:       assertEquals((-1), node2.getLineno());
2096:       assertFalse(node2.isAssignAdd());
2097:       assertFalse(node2.isLabelName());
2098:       assertFalse(node2.isNumber());
2099:       assertEquals((-1), node2.getSourcePosition());
2100:       assertFalse(node2.isOr());
2101:       assertFalse(node2.isBlock());
2102:       assertFalse(node2.isScript());
2103:       assertFalse(node2.isExprResult());
2104:       assertFalse(node2.isWhile());
2105:       assertFalse(node2.hasOneChild());
2106:       assertFalse(node2.hasMoreThanOneChild());
2107:       assertFalse(node2.isGetElem());
2108:       assertFalse(node2.isInstanceOf());
2109:       assertFalse(node2.isCall());
2110:       assertFalse(node2.isReturn());
2111:       assertFalse(node2.isWith());
2112:       assertFalse(node2.hasChildren());
2113:       assertFalse(node2.isDec());
2114:       assertFalse(node2.isTypeOf());
2115:       assertFalse(node2.isAssign());
2116:       assertFalse(node2.isParamList());
2117:       assertFalse(node2.isThis());
2118:       assertFalse(node2.isNull());
2119:       assertFalse(node2.isBreak());
2120:       assertFalse(node2.isName());
2121:       assertFalse(node2.isStringKey());
2122:       assertFalse(node2.isSwitch());
2123:       assertEquals((-1), node2.getCharno());
2124:       assertFalse(node2.isAdd());
2125:       assertFalse(node2.isDefaultCase());
2126:       assertFalse(node2.isNew());
2127:       assertFalse(node2.isDo());
2128:       assertFalse(node2.isArrayLit());
2129:       assertFalse(node2.isVar());
2130:       assertFalse(node2.isLabel());
2131:       assertEquals(0, node2.getChildCount());
2132:       
2133:       int int2 = Node.extractCharno(2);
2134:       assertFalse(int2 == int1);
2135:       assertFalse(int2 == int0);
2136:       assertEquals(2, int2);
2137:   }
2138: }
RegularFileObject[/tmp/EvoSuite_435_1628159623937/com/google/javascript/rhino/Node_435_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_435_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_435_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.common.base.Joiner$MapJoiner",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_435_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.common.collect.Iterators$12",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2"
359:     );
360:   }
361: }

[MASTER] 10:33:44.461 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(93, "");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNull(staticSourceFile0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());

Node node1 = new Node(93, node0, node0, node0, 46, 16);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(93, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isCatch());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertEquals(16, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertEquals(46, node1.getLineno());
assertFalse(node1.isCast());
assertEquals(188432, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertTrue(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

node1.setLength(38);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(93, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isCatch());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertEquals(16, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertEquals(46, node1.getLineno());
assertFalse(node1.isCast());
assertEquals(188432, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertTrue(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

Iterable<Node> iterable0 = node0.children();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());

boolean boolean0 = node1.isContinue();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(93, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isCatch());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertEquals(16, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertEquals(46, node1.getLineno());
assertFalse(node1.isCast());
assertEquals(188432, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertTrue(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

int int0 = node0.getLength();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertEquals(0, int0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());

boolean boolean1 = node0.isFunction();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());

boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());

node0.putIntProp(48, 0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());

boolean boolean3 = node0.mayMutateGlobalStateOrThrow();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean2);
assertFalse(boolean3 == boolean1);
assertTrue(boolean3);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());

Iterable<Node> iterable1 = node1.siblings();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(iterable1.equals((Object)iterable0));
assertNotNull(iterable1);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(93, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isCatch());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertEquals(16, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertEquals(46, node1.getLineno());
assertFalse(node1.isCast());
assertEquals(188432, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertTrue(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

Node node2 = new Node(2216);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTrue());
assertFalse(node2.isCase());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals(2216, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCall());
assertFalse(node2.isReturn());
assertFalse(node2.isWith());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());

int int1 = node1.getIndexOfChild(node2);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(int1 == int0);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertEquals((-1), int1);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(93, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertTrue(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(93, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isCatch());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertEquals(16, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertEquals(46, node1.getLineno());
assertFalse(node1.isCast());
assertEquals(188432, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertTrue(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTrue());
assertFalse(node2.isCase());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals(2216, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCall());
assertFalse(node2.isReturn());
assertFalse(node2.isWith());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());

int int2 = Node.extractCharno(2);
assertFalse(int2 == int1);
assertFalse(int2 == int0);
assertEquals(2, int2);


[MASTER] 10:34:00.491 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:00.776 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:01.025 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:01.245 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:01.463 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:01.684 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:01.976 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:02.181 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:02.394 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:02.593 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:02.816 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:02.993 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:03.162 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:03.334 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/16
* Done!

* Computation finished
