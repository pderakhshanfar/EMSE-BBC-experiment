* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 16964
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3890767571
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:14:40.218 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:14:55.817 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.UnionType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 10:14:59.984 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:18:00.626 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 800 generations, 300224 statements, best individual has fitness: 2610.0
* Minimizing test suite
[MASTER] 10:26:07.329 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 804
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 637
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 114
* Number of covered goals: 114
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 479
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 4536
* Number of covered goals: 2390
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 600
* Generated 1248 tests with total length 11222
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:27:29.458 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6669333333333334% of time used, but only 72/1248 tests minimized), falling back to using all assertions
[MASTER] 10:27:49.495 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 10:28:03.982 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 14 seconds more than allowed.
[MASTER] 10:28:20.062 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_256_1628159300006/com/google/javascript/rhino/Node_256_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_256_1628159300006/com/google/javascript/rhino/Node_256_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:20.062 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:20.062 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:20.067 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 517
[MASTER] 10:28:20.069 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_256_1628159300006/com/google/javascript/rhino/Node_256_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_256_tmp__ESTest extends Node_256_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(52, "CharMatcher.JAVA_ISO_CONTROL");
21:       assertNotNull(node0);
22:       assertEquals(2, Node.POST_FLAG);
23:       assertEquals(47, Node.IS_DISPATCHER);
24:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
25:       assertEquals(37, Node.OPT_ARG_NAME);
26:       assertEquals(29, Node.JSDOC_INFO_PROP);
27:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(49, Node.DIRECT_EVAL);
30:       assertEquals(46, Node.IS_NAMESPACE);
31:       assertEquals(56, Node.CHANGE_TIME);
32:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
33:       assertEquals(15, Node.NO_SIDE_EFFECTS);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(30, Node.VAR_ARGS_NAME);
36:       assertEquals(52, Node.LENGTH);
37:       assertEquals(53, Node.INPUT_ID);
38:       assertEquals(55, Node.INFERRED_FUNCTION);
39:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
40:       assertEquals(57, Node.LAST_PROP);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(8, Node.FLAG_NO_THROWS);
43:       assertEquals(39, Node.EMPTY_BLOCK);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
46:       assertEquals(50, Node.FREE_CALL);
47:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
48:       assertEquals(4095, Node.COLUMN_MASK);
49:       assertEquals(40, Node.ORIGINALNAME_PROP);
50:       assertEquals(57, Node.REFLECTED_OBJECT);
51:       assertEquals(43, Node.IS_CONSTANT_NAME);
52:       assertEquals(54, Node.SLASH_V);
53:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertEquals(32, Node.INCRDECR_PROP);
58:       assertFalse(node0.isNot());
59:       assertFalse(node0.isWith());
60:       assertFalse(node0.isAnd());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.hasOneChild());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.isObjectLit());
65:       assertFalse(node0.isAssign());
66:       assertFalse(node0.isGetElem());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isDec());
70:       assertFalse(node0.isThis());
71:       assertFalse(node0.isHook());
72:       assertFalse(node0.isReturn());
73:       assertEquals((-1), node0.getLineno());
74:       assertFalse(node0.isComma());
75:       assertFalse(node0.hasMoreThanOneChild());
76:       assertFalse(node0.isExprResult());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isDo());
79:       assertFalse(node0.isCase());
80:       assertFalse(node0.isSwitch());
81:       assertFalse(node0.isAdd());
82:       assertFalse(node0.isOr());
83:       assertFalse(node0.isAssignAdd());
84:       assertEquals((-1), node0.getCharno());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isNumber());
87:       assertFalse(node0.isLabelName());
88:       assertFalse(node0.isEmpty());
89:       assertFalse(node0.isGetterDef());
90:       assertFalse(node0.isVar());
91:       assertFalse(node0.isStringKey());
92:       assertFalse(node0.isParamList());
93:       assertFalse(node0.isLabel());
94:       assertEquals(0, node0.getChildCount());
95:       assertFalse(node0.isArrayLit());
96:       assertTrue(node0.isInstanceOf());
97:       assertFalse(node0.isTrue());
98:       assertFalse(node0.isDefaultCase());
99:       assertFalse(node0.isTry());
100:       assertFalse(node0.isDebugger());
101:       assertEquals(52, node0.getType());
102:       assertFalse(node0.isSetterDef());
103:       assertFalse(node0.isFor());
104:       assertFalse(node0.isName());
105:       assertFalse(node0.isDelProp());
106:       assertFalse(node0.isNE());
107:       assertFalse(node0.isNull());
108:       assertFalse(node0.isIf());
109:       assertFalse(node0.isBlock());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isCall());
112:       assertFalse(node0.isRegExp());
113:       assertFalse(node0.isCatch());
114:       assertFalse(node0.isWhile());
115:       assertFalse(node0.isInc());
116:       assertFalse(node0.isIn());
117:       assertFalse(node0.isString());
118:       assertFalse(node0.isFalse());
119:       assertEquals((-1), node0.getSourcePosition());
120:       assertFalse(node0.isThrow());
121:       assertFalse(node0.isCast());
122:       assertFalse(node0.isFunction());
123:       assertFalse(node0.isContinue());
124:       
125:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
126:       assertNotNull(node_SideEffectFlags0);
127:       assertEquals(0, node_SideEffectFlags0.valueOf());
128:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
129:       
130:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
131:       assertNotNull(node_SideEffectFlags1);
132:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
133:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
134:       assertEquals(0, node_SideEffectFlags0.valueOf());
135:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
136:       assertEquals(0, node_SideEffectFlags1.valueOf());
137:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
138:       
139:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
140:       assertNotNull(node_SideEffectFlags2);
141:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
142:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
143:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
144:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
145:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
146:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
147:       assertEquals(0, node_SideEffectFlags0.valueOf());
148:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
149:       assertEquals(0, node_SideEffectFlags1.valueOf());
150:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
151:       assertEquals(0, node_SideEffectFlags2.valueOf());
152:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
153:       
154:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
155:       assertNotNull(node_SideEffectFlags3);
156:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
157:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
158:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
159:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
160:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
161:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
162:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
163:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
164:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
165:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
166:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
167:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
168:       assertEquals(0, node_SideEffectFlags0.valueOf());
169:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
170:       assertEquals(0, node_SideEffectFlags1.valueOf());
171:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
172:       assertEquals(0, node_SideEffectFlags2.valueOf());
173:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
174:       assertEquals(0, node_SideEffectFlags3.valueOf());
175:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
176:       
177:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesArguments();
178:       assertNotNull(node_SideEffectFlags4);
179:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
180:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
181:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
182:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
183:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
184:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
185:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
186:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
187:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
188:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
189:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
190:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
191:       assertEquals(0, node_SideEffectFlags0.valueOf());
192:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
193:       assertEquals(0, node_SideEffectFlags1.valueOf());
194:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
195:       assertEquals(0, node_SideEffectFlags4.valueOf());
196:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
197:       
198:       String string0 = node0.toStringTree();
199:       assertEquals("INSTANCEOF CharMatcher.JAVA_ISO_CONTROL\n", string0);
200:       assertNotNull(string0);
201:       assertEquals(2, Node.POST_FLAG);
202:       assertEquals(47, Node.IS_DISPATCHER);
203:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
204:       assertEquals(37, Node.OPT_ARG_NAME);
205:       assertEquals(29, Node.JSDOC_INFO_PROP);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(49, Node.DIRECT_EVAL);
209:       assertEquals(46, Node.IS_NAMESPACE);
210:       assertEquals(56, Node.CHANGE_TIME);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(36, Node.QUOTED_PROP);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(52, Node.LENGTH);
216:       assertEquals(53, Node.INPUT_ID);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(57, Node.LAST_PROP);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(39, Node.EMPTY_BLOCK);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
225:       assertEquals(50, Node.FREE_CALL);
226:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
227:       assertEquals(4095, Node.COLUMN_MASK);
228:       assertEquals(40, Node.ORIGINALNAME_PROP);
229:       assertEquals(57, Node.REFLECTED_OBJECT);
230:       assertEquals(43, Node.IS_CONSTANT_NAME);
231:       assertEquals(54, Node.SLASH_V);
232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
234:       assertEquals(12, Node.COLUMN_BITS);
235:       assertEquals(1, Node.DECR_FLAG);
236:       assertEquals(32, Node.INCRDECR_PROP);
237:       assertFalse(node0.isNot());
238:       assertFalse(node0.isWith());
239:       assertFalse(node0.isAnd());
240:       assertFalse(node0.isGetProp());
241:       assertFalse(node0.hasOneChild());
242:       assertFalse(node0.isScript());
243:       assertFalse(node0.isObjectLit());
244:       assertFalse(node0.isAssign());
245:       assertFalse(node0.isGetElem());
246:       assertFalse(node0.hasChildren());
247:       assertFalse(node0.isBreak());
248:       assertFalse(node0.isDec());
249:       assertFalse(node0.isThis());
250:       assertFalse(node0.isHook());
251:       assertFalse(node0.isReturn());
252:       assertEquals((-1), node0.getLineno());
253:       assertFalse(node0.isComma());
254:       assertFalse(node0.hasMoreThanOneChild());
255:       assertFalse(node0.isExprResult());
256:       assertFalse(node0.isTypeOf());
257:       assertFalse(node0.isDo());
258:       assertFalse(node0.isCase());
259:       assertFalse(node0.isSwitch());
260:       assertFalse(node0.isAdd());
261:       assertFalse(node0.isOr());
262:       assertFalse(node0.isAssignAdd());
263:       assertEquals((-1), node0.getCharno());
264:       assertFalse(node0.isNew());
265:       assertFalse(node0.isNumber());
266:       assertFalse(node0.isLabelName());
267:       assertFalse(node0.isEmpty());
268:       assertFalse(node0.isGetterDef());
269:       assertFalse(node0.isVar());
270:       assertFalse(node0.isStringKey());
271:       assertFalse(node0.isParamList());
272:       assertFalse(node0.isLabel());
273:       assertEquals(0, node0.getChildCount());
274:       assertFalse(node0.isArrayLit());
275:       assertTrue(node0.isInstanceOf());
276:       assertFalse(node0.isTrue());
277:       assertFalse(node0.isDefaultCase());
278:       assertFalse(node0.isTry());
279:       assertFalse(node0.isDebugger());
280:       assertEquals(52, node0.getType());
281:       assertFalse(node0.isSetterDef());
282:       assertFalse(node0.isFor());
283:       assertFalse(node0.isName());
284:       assertFalse(node0.isDelProp());
285:       assertFalse(node0.isNE());
286:       assertFalse(node0.isNull());
287:       assertFalse(node0.isIf());
288:       assertFalse(node0.isBlock());
289:       assertFalse(node0.isVoid());
290:       assertFalse(node0.isCall());
291:       assertFalse(node0.isRegExp());
292:       assertFalse(node0.isCatch());
293:       assertFalse(node0.isWhile());
294:       assertFalse(node0.isInc());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isString());
297:       assertFalse(node0.isFalse());
298:       assertEquals((-1), node0.getSourcePosition());
299:       assertFalse(node0.isThrow());
300:       assertFalse(node0.isCast());
301:       assertFalse(node0.isFunction());
302:       assertFalse(node0.isContinue());
303:       
304:       Node node1 = Node.newString("$dp4&M'~ A", 36, 120);
305:       assertNotNull(node1);
306:       assertEquals(52, Node.LENGTH);
307:       assertEquals(50, Node.FREE_CALL);
308:       assertEquals(54, Node.SLASH_V);
309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
310:       assertEquals(57, Node.REFLECTED_OBJECT);
311:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
312:       assertEquals(57, Node.LAST_PROP);
313:       assertEquals(8, Node.FLAG_NO_THROWS);
314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
315:       assertEquals(1, Node.DECR_FLAG);
316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
317:       assertEquals(39, Node.EMPTY_BLOCK);
318:       assertEquals(51, Node.STATIC_SOURCE_FILE);
319:       assertEquals(30, Node.VAR_ARGS_NAME);
320:       assertEquals(46, Node.IS_NAMESPACE);
321:       assertEquals(2, Node.POST_FLAG);
322:       assertEquals(43, Node.IS_CONSTANT_NAME);
323:       assertEquals(40, Node.ORIGINALNAME_PROP);
324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
325:       assertEquals(47, Node.IS_DISPATCHER);
326:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
327:       assertEquals(36, Node.QUOTED_PROP);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(12, Node.COLUMN_BITS);
333:       assertEquals(4095, Node.COLUMN_MASK);
334:       assertEquals(55, Node.INFERRED_FUNCTION);
335:       assertEquals(32, Node.INCRDECR_PROP);
336:       assertEquals(56, Node.CHANGE_TIME);
337:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
338:       assertEquals(48, Node.DIRECTIVES);
339:       assertEquals(49, Node.DIRECT_EVAL);
340:       assertEquals(37, Node.OPT_ARG_NAME);
341:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
342:       assertNotSame(node1, node0);
343:       assertFalse(node1.equals((Object)node0));
344:       assertFalse(node1.isLabel());
345:       assertFalse(node1.isOr());
346:       assertEquals(36, node1.getLineno());
347:       assertFalse(node1.isAssignAdd());
348:       assertFalse(node1.isGetElem());
349:       assertFalse(node1.isAssign());
350:       assertFalse(node1.isDo());
351:       assertFalse(node1.isWhile());
352:       assertFalse(node1.isContinue());
353:       assertFalse(node1.hasMoreThanOneChild());
354:       assertFalse(node1.isTypeOf());
355:       assertFalse(node1.isDec());
356:       assertFalse(node1.isReturn());
357:       assertFalse(node1.hasChildren());
358:       assertFalse(node1.isAdd());
359:       assertFalse(node1.isNew());
360:       assertFalse(node1.isExprResult());
361:       assertFalse(node1.isCall());
362:       assertEquals(120, node1.getCharno());
363:       assertFalse(node1.isName());
364:       assertFalse(node1.isNull());
365:       assertFalse(node1.isGetProp());
366:       assertFalse(node1.isBreak());
367:       assertFalse(node1.isSetterDef());
368:       assertEquals(40, node1.getType());
369:       assertFalse(node1.isThrow());
370:       assertFalse(node1.isFalse());
371:       assertFalse(node1.isComma());
372:       assertEquals(147576, node1.getSourcePosition());
373:       assertFalse(node1.isFunction());
374:       assertFalse(node1.isCast());
375:       assertFalse(node1.isNot());
376:       assertFalse(node1.isAnd());
377:       assertFalse(node1.isObjectLit());
378:       assertFalse(node1.isDebugger());
379:       assertFalse(node1.isIn());
380:       assertFalse(node1.isCase());
381:       assertFalse(node1.isFor());
382:       assertFalse(node1.isVoid());
383:       assertFalse(node1.isInc());
384:       assertFalse(node1.isEmpty());
385:       assertFalse(node1.isDelProp());
386:       assertFalse(node1.isIf());
387:       assertFalse(node1.isNE());
388:       assertFalse(node1.isTrue());
389:       assertFalse(node1.isParamList());
390:       assertFalse(node1.isInstanceOf());
391:       assertFalse(node1.isCatch());
392:       assertFalse(node1.isWith());
393:       assertFalse(node1.isDefaultCase());
394:       assertFalse(node1.isRegExp());
395:       assertEquals(0, node1.getChildCount());
396:       assertFalse(node1.isVar());
397:       assertFalse(node1.isThis());
398:       assertFalse(node1.isHook());
399:       assertFalse(node1.isBlock());
400:       assertTrue(node1.isString());
401:       assertFalse(node1.isTry());
402:       assertFalse(node1.isSwitch());
403:       assertFalse(node1.isScript());
404:       assertFalse(node1.isArrayLit());
405:       assertFalse(node1.hasOneChild());
406:       assertFalse(node1.isLabelName());
407:       assertFalse(node1.isStringKey());
408:       assertFalse(node1.isGetterDef());
409:       assertFalse(node1.isNumber());
410:       
411:       Iterable<Node> iterable0 = node1.children();
412:       assertNotNull(iterable0);
413:       assertEquals(52, Node.LENGTH);
414:       assertEquals(50, Node.FREE_CALL);
415:       assertEquals(54, Node.SLASH_V);
416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(57, Node.LAST_PROP);
420:       assertEquals(8, Node.FLAG_NO_THROWS);
421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
422:       assertEquals(1, Node.DECR_FLAG);
423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
424:       assertEquals(39, Node.EMPTY_BLOCK);
425:       assertEquals(51, Node.STATIC_SOURCE_FILE);
426:       assertEquals(30, Node.VAR_ARGS_NAME);
427:       assertEquals(46, Node.IS_NAMESPACE);
428:       assertEquals(2, Node.POST_FLAG);
429:       assertEquals(43, Node.IS_CONSTANT_NAME);
430:       assertEquals(40, Node.ORIGINALNAME_PROP);
431:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
432:       assertEquals(47, Node.IS_DISPATCHER);
433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
434:       assertEquals(36, Node.QUOTED_PROP);
435:       assertEquals(29, Node.JSDOC_INFO_PROP);
436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
437:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
438:       assertEquals(53, Node.INPUT_ID);
439:       assertEquals(12, Node.COLUMN_BITS);
440:       assertEquals(4095, Node.COLUMN_MASK);
441:       assertEquals(55, Node.INFERRED_FUNCTION);
442:       assertEquals(32, Node.INCRDECR_PROP);
443:       assertEquals(56, Node.CHANGE_TIME);
444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
445:       assertEquals(48, Node.DIRECTIVES);
446:       assertEquals(49, Node.DIRECT_EVAL);
447:       assertEquals(37, Node.OPT_ARG_NAME);
448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
449:       assertNotSame(node1, node0);
450:       assertFalse(node1.equals((Object)node0));
451:       assertFalse(node1.isLabel());
452:       assertFalse(node1.isOr());
453:       assertEquals(36, node1.getLineno());
454:       assertFalse(node1.isAssignAdd());
455:       assertFalse(node1.isGetElem());
456:       assertFalse(node1.isAssign());
457:       assertFalse(node1.isDo());
458:       assertFalse(node1.isWhile());
459:       assertFalse(node1.isContinue());
460:       assertFalse(node1.hasMoreThanOneChild());
461:       assertFalse(node1.isTypeOf());
462:       assertFalse(node1.isDec());
463:       assertFalse(node1.isReturn());
464:       assertFalse(node1.hasChildren());
465:       assertFalse(node1.isAdd());
466:       assertFalse(node1.isNew());
467:       assertFalse(node1.isExprResult());
468:       assertFalse(node1.isCall());
469:       assertEquals(120, node1.getCharno());
470:       assertFalse(node1.isName());
471:       assertFalse(node1.isNull());
472:       assertFalse(node1.isGetProp());
473:       assertFalse(node1.isBreak());
474:       assertFalse(node1.isSetterDef());
475:       assertEquals(40, node1.getType());
476:       assertFalse(node1.isThrow());
477:       assertFalse(node1.isFalse());
478:       assertFalse(node1.isComma());
479:       assertEquals(147576, node1.getSourcePosition());
480:       assertFalse(node1.isFunction());
481:       assertFalse(node1.isCast());
482:       assertFalse(node1.isNot());
483:       assertFalse(node1.isAnd());
484:       assertFalse(node1.isObjectLit());
485:       assertFalse(node1.isDebugger());
486:       assertFalse(node1.isIn());
487:       assertFalse(node1.isCase());
488:       assertFalse(node1.isFor());
489:       assertFalse(node1.isVoid());
490:       assertFalse(node1.isInc());
491:       assertFalse(node1.isEmpty());
492:       assertFalse(node1.isDelProp());
493:       assertFalse(node1.isIf());
494:       assertFalse(node1.isNE());
495:       assertFalse(node1.isTrue());
496:       assertFalse(node1.isParamList());
497:       assertFalse(node1.isInstanceOf());
498:       assertFalse(node1.isCatch());
499:       assertFalse(node1.isWith());
500:       assertFalse(node1.isDefaultCase());
501:       assertFalse(node1.isRegExp());
502:       assertEquals(0, node1.getChildCount());
503:       assertFalse(node1.isVar());
504:       assertFalse(node1.isThis());
505:       assertFalse(node1.isHook());
506:       assertFalse(node1.isBlock());
507:       assertTrue(node1.isString());
508:       assertFalse(node1.isTry());
509:       assertFalse(node1.isSwitch());
510:       assertFalse(node1.isScript());
511:       assertFalse(node1.isArrayLit());
512:       assertFalse(node1.hasOneChild());
513:       assertFalse(node1.isLabelName());
514:       assertFalse(node1.isStringKey());
515:       assertFalse(node1.isGetterDef());
516:       assertFalse(node1.isNumber());
517:       assertFalse(iterable0.contains(node0));
518:       
519:       boolean boolean0 = node0.isCall();
520:       assertFalse(boolean0);
521:       assertEquals(2, Node.POST_FLAG);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(37, Node.OPT_ARG_NAME);
525:       assertEquals(29, Node.JSDOC_INFO_PROP);
526:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
527:       assertEquals(51, Node.STATIC_SOURCE_FILE);
528:       assertEquals(49, Node.DIRECT_EVAL);
529:       assertEquals(46, Node.IS_NAMESPACE);
530:       assertEquals(56, Node.CHANGE_TIME);
531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
533:       assertEquals(36, Node.QUOTED_PROP);
534:       assertEquals(30, Node.VAR_ARGS_NAME);
535:       assertEquals(52, Node.LENGTH);
536:       assertEquals(53, Node.INPUT_ID);
537:       assertEquals(55, Node.INFERRED_FUNCTION);
538:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
539:       assertEquals(57, Node.LAST_PROP);
540:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
541:       assertEquals(8, Node.FLAG_NO_THROWS);
542:       assertEquals(39, Node.EMPTY_BLOCK);
543:       assertEquals(48, Node.DIRECTIVES);
544:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
545:       assertEquals(50, Node.FREE_CALL);
546:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
547:       assertEquals(4095, Node.COLUMN_MASK);
548:       assertEquals(40, Node.ORIGINALNAME_PROP);
549:       assertEquals(57, Node.REFLECTED_OBJECT);
550:       assertEquals(43, Node.IS_CONSTANT_NAME);
551:       assertEquals(54, Node.SLASH_V);
552:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
553:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
554:       assertEquals(12, Node.COLUMN_BITS);
555:       assertEquals(1, Node.DECR_FLAG);
556:       assertEquals(32, Node.INCRDECR_PROP);
557:       assertNotSame(node0, node1);
558:       assertFalse(node0.equals((Object)node1));
559:       assertFalse(node0.isNot());
560:       assertFalse(node0.isWith());
561:       assertFalse(node0.isAnd());
562:       assertFalse(node0.isGetProp());
563:       assertFalse(node0.hasOneChild());
564:       assertFalse(node0.isScript());
565:       assertFalse(node0.isObjectLit());
566:       assertFalse(node0.isAssign());
567:       assertFalse(node0.isGetElem());
568:       assertFalse(node0.hasChildren());
569:       assertFalse(node0.isBreak());
570:       assertFalse(node0.isDec());
571:       assertFalse(node0.isThis());
572:       assertFalse(node0.isHook());
573:       assertFalse(node0.isReturn());
574:       assertEquals((-1), node0.getLineno());
575:       assertFalse(node0.isComma());
576:       assertFalse(node0.hasMoreThanOneChild());
577:       assertFalse(node0.isExprResult());
578:       assertFalse(node0.isTypeOf());
579:       assertFalse(node0.isDo());
580:       assertFalse(node0.isCase());
581:       assertFalse(node0.isSwitch());
582:       assertFalse(node0.isAdd());
583:       assertFalse(node0.isOr());
584:       assertFalse(node0.isAssignAdd());
585:       assertEquals((-1), node0.getCharno());
586:       assertFalse(node0.isNew());
587:       assertFalse(node0.isNumber());
588:       assertFalse(node0.isLabelName());
589:       assertFalse(node0.isEmpty());
590:       assertFalse(node0.isGetterDef());
591:       assertFalse(node0.isVar());
592:       assertFalse(node0.isStringKey());
593:       assertFalse(node0.isParamList());
594:       assertFalse(node0.isLabel());
595:       assertEquals(0, node0.getChildCount());
596:       assertFalse(node0.isArrayLit());
597:       assertTrue(node0.isInstanceOf());
598:       assertFalse(node0.isTrue());
599:       assertFalse(node0.isDefaultCase());
600:       assertFalse(node0.isTry());
601:       assertFalse(node0.isDebugger());
602:       assertEquals(52, node0.getType());
603:       assertFalse(node0.isSetterDef());
604:       assertFalse(node0.isFor());
605:       assertFalse(node0.isName());
606:       assertFalse(node0.isDelProp());
607:       assertFalse(node0.isNE());
608:       assertFalse(node0.isNull());
609:       assertFalse(node0.isIf());
610:       assertFalse(node0.isBlock());
611:       assertFalse(node0.isVoid());
612:       assertFalse(node0.isCall());
613:       assertFalse(node0.isRegExp());
614:       assertFalse(node0.isCatch());
615:       assertFalse(node0.isWhile());
616:       assertFalse(node0.isInc());
617:       assertFalse(node0.isIn());
618:       assertFalse(node0.isString());
619:       assertFalse(node0.isFalse());
620:       assertEquals((-1), node0.getSourcePosition());
621:       assertFalse(node0.isThrow());
622:       assertFalse(node0.isCast());
623:       assertFalse(node0.isFunction());
624:       assertFalse(node0.isContinue());
625:   }
626: }
RegularFileObject[/tmp/EvoSuite_256_1628159300006/com/google/javascript/rhino/Node_256_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_256_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_256_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_256_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:20.080 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(52, "CharMatcher.JAVA_ISO_CONTROL");
assertNotNull(node0);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertTrue(node0.isInstanceOf());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertEquals(52, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
assertNotNull(node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesArguments();
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());

String string0 = node0.toStringTree();
assertEquals("INSTANCEOF CharMatcher.JAVA_ISO_CONTROL\n", string0);
assertNotNull(string0);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertTrue(node0.isInstanceOf());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertEquals(52, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());

Node node1 = Node.newString("$dp4&M'~ A", 36, 120);
assertNotNull(node1);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(36, node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(120, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(147576, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(36, node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(120, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(147576, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isCall();
assertFalse(boolean0);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertTrue(node0.isInstanceOf());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertEquals(52, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());


[MASTER] 10:28:20.124 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_257_1628159300081/com/google/javascript/rhino/Node_257_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_257_1628159300081/com/google/javascript/rhino/Node_257_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:20.124 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:20.124 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:20.124 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 337
[MASTER] 10:28:20.125 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_257_1628159300081/com/google/javascript/rhino/Node_257_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_257_tmp__ESTest extends Node_257_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(1445);
21:       assertNotNull(node0);
22:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
23:       assertEquals(53, Node.INPUT_ID);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(47, Node.IS_DISPATCHER);
26:       assertEquals(2, Node.POST_FLAG);
27:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
28:       assertEquals(4095, Node.COLUMN_MASK);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(37, Node.OPT_ARG_NAME);
31:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
32:       assertEquals(39, Node.EMPTY_BLOCK);
33:       assertEquals(56, Node.CHANGE_TIME);
34:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
35:       assertEquals(55, Node.INFERRED_FUNCTION);
36:       assertEquals(29, Node.JSDOC_INFO_PROP);
37:       assertEquals(57, Node.REFLECTED_OBJECT);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
40:       assertEquals(52, Node.LENGTH);
41:       assertEquals(8, Node.FLAG_NO_THROWS);
42:       assertEquals(54, Node.SLASH_V);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
45:       assertEquals(57, Node.LAST_PROP);
46:       assertEquals(49, Node.DIRECT_EVAL);
47:       assertEquals(12, Node.COLUMN_BITS);
48:       assertEquals(40, Node.ORIGINALNAME_PROP);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(30, Node.VAR_ARGS_NAME);
51:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
52:       assertEquals(32, Node.INCRDECR_PROP);
53:       assertEquals(46, Node.IS_NAMESPACE);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(51, Node.STATIC_SOURCE_FILE);
57:       assertEquals(50, Node.FREE_CALL);
58:       assertFalse(node0.isNull());
59:       assertFalse(node0.isSetterDef());
60:       assertFalse(node0.isCall());
61:       assertFalse(node0.isParamList());
62:       assertFalse(node0.isStringKey());
63:       assertFalse(node0.isName());
64:       assertFalse(node0.isWhile());
65:       assertFalse(node0.isDebugger());
66:       assertFalse(node0.isCatch());
67:       assertFalse(node0.isRegExp());
68:       assertFalse(node0.hasMoreThanOneChild());
69:       assertFalse(node0.isBlock());
70:       assertFalse(node0.isReturn());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isFor());
73:       assertEquals((-1), node0.getSourcePosition());
74:       assertFalse(node0.isCast());
75:       assertEquals((-1), node0.getLineno());
76:       assertFalse(node0.isNE());
77:       assertFalse(node0.isIf());
78:       assertFalse(node0.isFunction());
79:       assertFalse(node0.isContinue());
80:       assertFalse(node0.isInc());
81:       assertFalse(node0.isIn());
82:       assertFalse(node0.isThrow());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isComma());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isInstanceOf());
88:       assertFalse(node0.isAnd());
89:       assertFalse(node0.isSwitch());
90:       assertFalse(node0.isString());
91:       assertEquals(1445, node0.getType());
92:       assertFalse(node0.isNot());
93:       assertFalse(node0.isScript());
94:       assertFalse(node0.isCase());
95:       assertFalse(node0.isExprResult());
96:       assertFalse(node0.isObjectLit());
97:       assertEquals((-1), node0.getCharno());
98:       assertFalse(node0.isWith());
99:       assertFalse(node0.hasOneChild());
100:       assertFalse(node0.isGetProp());
101:       assertFalse(node0.isHook());
102:       assertFalse(node0.isDelProp());
103:       assertFalse(node0.isGetterDef());
104:       assertFalse(node0.isAssign());
105:       assertFalse(node0.isLabelName());
106:       assertFalse(node0.isDec());
107:       assertFalse(node0.isEmpty());
108:       assertFalse(node0.isGetElem());
109:       assertFalse(node0.hasChildren());
110:       assertFalse(node0.isTypeOf());
111:       assertFalse(node0.isNumber());
112:       assertFalse(node0.isOr());
113:       assertFalse(node0.isArrayLit());
114:       assertFalse(node0.isTrue());
115:       assertFalse(node0.isVoid());
116:       assertFalse(node0.isDo());
117:       assertEquals(0, node0.getChildCount());
118:       assertFalse(node0.isVar());
119:       assertFalse(node0.isAdd());
120:       assertFalse(node0.isLabel());
121:       assertFalse(node0.isNew());
122:       assertFalse(node0.isDefaultCase());
123:       assertFalse(node0.isAssignAdd());
124:       
125:       Node node1 = new Node(37);
126:       assertNotNull(node1);
127:       assertEquals(1, Node.DECR_FLAG);
128:       assertEquals(30, Node.VAR_ARGS_NAME);
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
131:       assertEquals(37, Node.OPT_ARG_NAME);
132:       assertEquals(52, Node.LENGTH);
133:       assertEquals(56, Node.CHANGE_TIME);
134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
135:       assertEquals(46, Node.IS_NAMESPACE);
136:       assertEquals(54, Node.SLASH_V);
137:       assertEquals(57, Node.REFLECTED_OBJECT);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(39, Node.EMPTY_BLOCK);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(29, Node.JSDOC_INFO_PROP);
142:       assertEquals(53, Node.INPUT_ID);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(57, Node.LAST_PROP);
145:       assertEquals(47, Node.IS_DISPATCHER);
146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
147:       assertEquals(4095, Node.COLUMN_MASK);
148:       assertEquals(55, Node.INFERRED_FUNCTION);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
152:       assertEquals(8, Node.FLAG_NO_THROWS);
153:       assertEquals(43, Node.IS_CONSTANT_NAME);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
156:       assertEquals(50, Node.FREE_CALL);
157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(32, Node.INCRDECR_PROP);
162:       assertEquals(12, Node.COLUMN_BITS);
163:       assertFalse(node1.equals((Object)node0));
164:       assertFalse(node1.isTry());
165:       assertFalse(node1.isDebugger());
166:       assertFalse(node1.isFor());
167:       assertFalse(node1.isTrue());
168:       assertFalse(node1.isDefaultCase());
169:       assertFalse(node1.isGetterDef());
170:       assertFalse(node1.isEmpty());
171:       assertFalse(node1.isIn());
172:       assertFalse(node1.isNE());
173:       assertFalse(node1.isNull());
174:       assertFalse(node1.isDelProp());
175:       assertFalse(node1.isIf());
176:       assertEquals(37, node1.getType());
177:       assertFalse(node1.isName());
178:       assertFalse(node1.isRegExp());
179:       assertFalse(node1.isVoid());
180:       assertFalse(node1.isCatch());
181:       assertEquals((-1), node1.getCharno());
182:       assertFalse(node1.isStringKey());
183:       assertFalse(node1.isVar());
184:       assertFalse(node1.isBlock());
185:       assertFalse(node1.isHook());
186:       assertFalse(node1.isDo());
187:       assertFalse(node1.isNew());
188:       assertFalse(node1.isCase());
189:       assertFalse(node1.isAdd());
190:       assertEquals(0, node1.getChildCount());
191:       assertFalse(node1.isAssignAdd());
192:       assertFalse(node1.isParamList());
193:       assertFalse(node1.isLabel());
194:       assertFalse(node1.isLabelName());
195:       assertFalse(node1.isSwitch());
196:       assertFalse(node1.isArrayLit());
197:       assertFalse(node1.hasOneChild());
198:       assertEquals((-1), node1.getSourcePosition());
199:       assertFalse(node1.isNot());
200:       assertFalse(node1.isNumber());
201:       assertFalse(node1.isScript());
202:       assertFalse(node1.isInstanceOf());
203:       assertEquals((-1), node1.getLineno());
204:       assertFalse(node1.hasMoreThanOneChild());
205:       assertFalse(node1.isOr());
206:       assertFalse(node1.isComma());
207:       assertFalse(node1.isReturn());
208:       assertFalse(node1.isThis());
209:       assertFalse(node1.hasChildren());
210:       assertFalse(node1.isBreak());
211:       assertFalse(node1.isDec());
212:       assertTrue(node1.isCall());
213:       assertFalse(node1.isAssign());
214:       assertFalse(node1.isWith());
215:       assertFalse(node1.isTypeOf());
216:       assertFalse(node1.isGetElem());
217:       assertFalse(node1.isExprResult());
218:       assertFalse(node1.isThrow());
219:       assertFalse(node1.isWhile());
220:       assertFalse(node1.isString());
221:       assertFalse(node1.isGetProp());
222:       assertFalse(node1.isSetterDef());
223:       assertFalse(node1.isInc());
224:       assertFalse(node1.isObjectLit());
225:       assertFalse(node1.isAnd());
226:       assertFalse(node1.isFunction());
227:       assertFalse(node1.isFalse());
228:       assertFalse(node1.isContinue());
229:       assertFalse(node1.isCast());
230:       
231:       Iterable<Node> iterable0 = node0.children();
232:       assertNotNull(iterable0);
233:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(47, Node.IS_DISPATCHER);
237:       assertEquals(2, Node.POST_FLAG);
238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(48, Node.DIRECTIVES);
241:       assertEquals(37, Node.OPT_ARG_NAME);
242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
243:       assertEquals(39, Node.EMPTY_BLOCK);
244:       assertEquals(56, Node.CHANGE_TIME);
245:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
246:       assertEquals(55, Node.INFERRED_FUNCTION);
247:       assertEquals(29, Node.JSDOC_INFO_PROP);
248:       assertEquals(57, Node.REFLECTED_OBJECT);
249:       assertEquals(36, Node.QUOTED_PROP);
250:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
251:       assertEquals(52, Node.LENGTH);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(54, Node.SLASH_V);
254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
255:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
256:       assertEquals(57, Node.LAST_PROP);
257:       assertEquals(49, Node.DIRECT_EVAL);
258:       assertEquals(12, Node.COLUMN_BITS);
259:       assertEquals(40, Node.ORIGINALNAME_PROP);
260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
261:       assertEquals(30, Node.VAR_ARGS_NAME);
262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
263:       assertEquals(32, Node.INCRDECR_PROP);
264:       assertEquals(46, Node.IS_NAMESPACE);
265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
268:       assertEquals(50, Node.FREE_CALL);
269:       assertNotSame(node0, node1);
270:       assertFalse(node0.equals((Object)node1));
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isSetterDef());
273:       assertFalse(node0.isCall());
274:       assertFalse(node0.isParamList());
275:       assertFalse(node0.isStringKey());
276:       assertFalse(node0.isName());
277:       assertFalse(node0.isWhile());
278:       assertFalse(node0.isDebugger());
279:       assertFalse(node0.isCatch());
280:       assertFalse(node0.isRegExp());
281:       assertFalse(node0.hasMoreThanOneChild());
282:       assertFalse(node0.isBlock());
283:       assertFalse(node0.isReturn());
284:       assertFalse(node0.isTry());
285:       assertFalse(node0.isFor());
286:       assertEquals((-1), node0.getSourcePosition());
287:       assertFalse(node0.isCast());
288:       assertEquals((-1), node0.getLineno());
289:       assertFalse(node0.isNE());
290:       assertFalse(node0.isIf());
291:       assertFalse(node0.isFunction());
292:       assertFalse(node0.isContinue());
293:       assertFalse(node0.isInc());
294:       assertFalse(node0.isIn());
295:       assertFalse(node0.isThrow());
296:       assertFalse(node0.isBreak());
297:       assertFalse(node0.isThis());
298:       assertFalse(node0.isComma());
299:       assertFalse(node0.isFalse());
300:       assertFalse(node0.isInstanceOf());
301:       assertFalse(node0.isAnd());
302:       assertFalse(node0.isSwitch());
303:       assertFalse(node0.isString());
304:       assertEquals(1445, node0.getType());
305:       assertFalse(node0.isNot());
306:       assertFalse(node0.isScript());
307:       assertFalse(node0.isCase());
308:       assertFalse(node0.isExprResult());
309:       assertFalse(node0.isObjectLit());
310:       assertEquals((-1), node0.getCharno());
311:       assertFalse(node0.isWith());
312:       assertFalse(node0.hasOneChild());
313:       assertFalse(node0.isGetProp());
314:       assertFalse(node0.isHook());
315:       assertFalse(node0.isDelProp());
316:       assertFalse(node0.isGetterDef());
317:       assertFalse(node0.isAssign());
318:       assertFalse(node0.isLabelName());
319:       assertFalse(node0.isDec());
320:       assertFalse(node0.isEmpty());
321:       assertFalse(node0.isGetElem());
322:       assertFalse(node0.hasChildren());
323:       assertFalse(node0.isTypeOf());
324:       assertFalse(node0.isNumber());
325:       assertFalse(node0.isOr());
326:       assertFalse(node0.isArrayLit());
327:       assertFalse(node0.isTrue());
328:       assertFalse(node0.isVoid());
329:       assertFalse(node0.isDo());
330:       assertEquals(0, node0.getChildCount());
331:       assertFalse(node0.isVar());
332:       assertFalse(node0.isAdd());
333:       assertFalse(node0.isLabel());
334:       assertFalse(node0.isNew());
335:       assertFalse(node0.isDefaultCase());
336:       assertFalse(node0.isAssignAdd());
337:       assertFalse(iterable0.contains(node1));
338:   }
339: }
RegularFileObject[/tmp/EvoSuite_257_1628159300081/com/google/javascript/rhino/Node_257_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_257_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_257_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_257_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:20.129 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(1445);
assertNotNull(node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals(1445, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());

Node node1 = new Node(37);
assertNotNull(node1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(37, node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertTrue(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isThrow());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals(1445, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(iterable0.contains(node1));


[MASTER] 10:28:28.952 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_335_1628159308920/com/google/javascript/rhino/Node_335_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_335_1628159308920/com/google/javascript/rhino/Node_335_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:28.952 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:28.952 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:28.953 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 516
[MASTER] 10:28:28.953 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_335_1628159308920/com/google/javascript/rhino/Node_335_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:28 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_335_tmp__ESTest extends Node_335_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(309, 309, 309);
22:       assertNotNull(node0);
23:       assertEquals(47, Node.IS_DISPATCHER);
24:       assertEquals(56, Node.CHANGE_TIME);
25:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
26:       assertEquals(29, Node.JSDOC_INFO_PROP);
27:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
28:       assertEquals(2, Node.POST_FLAG);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
31:       assertEquals(51, Node.STATIC_SOURCE_FILE);
32:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
33:       assertEquals(37, Node.OPT_ARG_NAME);
34:       assertEquals(49, Node.DIRECT_EVAL);
35:       assertEquals(43, Node.IS_CONSTANT_NAME);
36:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
37:       assertEquals(4095, Node.COLUMN_MASK);
38:       assertEquals(12, Node.COLUMN_BITS);
39:       assertEquals(1, Node.DECR_FLAG);
40:       assertEquals(32, Node.INCRDECR_PROP);
41:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(39, Node.EMPTY_BLOCK);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(50, Node.FREE_CALL);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(40, Node.ORIGINALNAME_PROP);
48:       assertEquals(57, Node.REFLECTED_OBJECT);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(54, Node.SLASH_V);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(57, Node.LAST_PROP);
53:       assertEquals(36, Node.QUOTED_PROP);
54:       assertEquals(30, Node.VAR_ARGS_NAME);
55:       assertEquals(52, Node.LENGTH);
56:       assertEquals(55, Node.INFERRED_FUNCTION);
57:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
58:       assertEquals(53, Node.INPUT_ID);
59:       assertFalse(node0.isCatch());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isParamList());
63:       assertEquals(1265973, node0.getSourcePosition());
64:       assertFalse(node0.isNull());
65:       assertFalse(node0.isTrue());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isStringKey());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isArrayLit());
70:       assertFalse(node0.isEmpty());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isFunction());
73:       assertFalse(node0.isContinue());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.isDo());
76:       assertFalse(node0.isAssignAdd());
77:       assertFalse(node0.isNew());
78:       assertFalse(node0.isAdd());
79:       assertEquals(309, node0.getType());
80:       assertFalse(node0.isString());
81:       assertFalse(node0.isOr());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isCall());
84:       assertFalse(node0.isBreak());
85:       assertFalse(node0.isDelProp());
86:       assertFalse(node0.isName());
87:       assertFalse(node0.isExprResult());
88:       assertFalse(node0.isVoid());
89:       assertFalse(node0.isComma());
90:       assertFalse(node0.isReturn());
91:       assertFalse(node0.hasChildren());
92:       assertFalse(node0.isDec());
93:       assertFalse(node0.isAssign());
94:       assertFalse(node0.isTypeOf());
95:       assertFalse(node0.isAnd());
96:       assertFalse(node0.isObjectLit());
97:       assertFalse(node0.isGetProp());
98:       assertFalse(node0.isScript());
99:       assertFalse(node0.isNot());
100:       assertFalse(node0.isThrow());
101:       assertFalse(node0.isCast());
102:       assertFalse(node0.isLabelName());
103:       assertFalse(node0.isLabel());
104:       assertFalse(node0.isFalse());
105:       assertFalse(node0.isCase());
106:       assertFalse(node0.isSwitch());
107:       assertFalse(node0.isNE());
108:       assertFalse(node0.isInc());
109:       assertFalse(node0.isGetterDef());
110:       assertFalse(node0.isIn());
111:       assertFalse(node0.isNumber());
112:       assertEquals(309, node0.getLineno());
113:       assertFalse(node0.isFor());
114:       assertFalse(node0.isHook());
115:       assertFalse(node0.isIf());
116:       assertFalse(node0.hasOneChild());
117:       assertEquals(309, node0.getCharno());
118:       assertFalse(node0.isTry());
119:       assertFalse(node0.isThis());
120:       assertFalse(node0.isBlock());
121:       assertFalse(node0.isInstanceOf());
122:       assertFalse(node0.isRegExp());
123:       assertFalse(node0.hasMoreThanOneChild());
124:       assertFalse(node0.isWith());
125:       
126:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
127:       assertNotNull(node_SideEffectFlags0);
128:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
129:       assertEquals(0, node_SideEffectFlags0.valueOf());
130:       
131:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
132:       assertNotNull(node_SideEffectFlags1);
133:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
134:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
135:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
136:       assertEquals(0, node_SideEffectFlags0.valueOf());
137:       assertEquals(0, node_SideEffectFlags1.valueOf());
138:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
139:       
140:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
141:       assertNotNull(node_SideEffectFlags2);
142:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
143:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
144:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
145:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
146:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
147:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
148:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
149:       assertEquals(0, node_SideEffectFlags0.valueOf());
150:       assertEquals(0, node_SideEffectFlags1.valueOf());
151:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
152:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
153:       assertEquals(0, node_SideEffectFlags2.valueOf());
154:       
155:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
156:       assertNotNull(node_SideEffectFlags3);
157:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
158:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
159:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
160:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
161:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
162:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
163:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
164:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
165:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
166:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
167:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
168:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
169:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
170:       assertEquals(0, node_SideEffectFlags0.valueOf());
171:       assertEquals(0, node_SideEffectFlags1.valueOf());
172:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
173:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
174:       assertEquals(0, node_SideEffectFlags2.valueOf());
175:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
176:       assertEquals(0, node_SideEffectFlags3.valueOf());
177:       
178:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesArguments();
179:       assertNotNull(node_SideEffectFlags4);
180:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
181:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
182:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
183:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
184:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
185:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
186:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
187:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
188:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
189:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
190:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
191:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
192:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
193:       assertEquals(0, node_SideEffectFlags0.valueOf());
194:       assertEquals(0, node_SideEffectFlags1.valueOf());
195:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
196:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
197:       assertEquals(0, node_SideEffectFlags4.valueOf());
198:       
199:       String string0 = node0.toStringTree();
200:       assertEquals("LC 309\n", string0);
201:       assertNotNull(string0);
202:       assertEquals(47, Node.IS_DISPATCHER);
203:       assertEquals(56, Node.CHANGE_TIME);
204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
205:       assertEquals(29, Node.JSDOC_INFO_PROP);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(2, Node.POST_FLAG);
208:       assertEquals(46, Node.IS_NAMESPACE);
209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(43, Node.IS_CONSTANT_NAME);
215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertEquals(12, Node.COLUMN_BITS);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(32, Node.INCRDECR_PROP);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
222:       assertEquals(39, Node.EMPTY_BLOCK);
223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
224:       assertEquals(50, Node.FREE_CALL);
225:       assertEquals(8, Node.FLAG_NO_THROWS);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(57, Node.REFLECTED_OBJECT);
228:       assertEquals(48, Node.DIRECTIVES);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(15, Node.NO_SIDE_EFFECTS);
231:       assertEquals(57, Node.LAST_PROP);
232:       assertEquals(36, Node.QUOTED_PROP);
233:       assertEquals(30, Node.VAR_ARGS_NAME);
234:       assertEquals(52, Node.LENGTH);
235:       assertEquals(55, Node.INFERRED_FUNCTION);
236:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
237:       assertEquals(53, Node.INPUT_ID);
238:       assertFalse(node0.isCatch());
239:       assertFalse(node0.isDefaultCase());
240:       assertFalse(node0.isDebugger());
241:       assertFalse(node0.isParamList());
242:       assertEquals(1265973, node0.getSourcePosition());
243:       assertFalse(node0.isNull());
244:       assertFalse(node0.isTrue());
245:       assertFalse(node0.isSetterDef());
246:       assertFalse(node0.isStringKey());
247:       assertFalse(node0.isVar());
248:       assertFalse(node0.isArrayLit());
249:       assertFalse(node0.isEmpty());
250:       assertEquals(0, node0.getChildCount());
251:       assertFalse(node0.isFunction());
252:       assertFalse(node0.isContinue());
253:       assertFalse(node0.isWhile());
254:       assertFalse(node0.isDo());
255:       assertFalse(node0.isAssignAdd());
256:       assertFalse(node0.isNew());
257:       assertFalse(node0.isAdd());
258:       assertEquals(309, node0.getType());
259:       assertFalse(node0.isString());
260:       assertFalse(node0.isOr());
261:       assertFalse(node0.isGetElem());
262:       assertFalse(node0.isCall());
263:       assertFalse(node0.isBreak());
264:       assertFalse(node0.isDelProp());
265:       assertFalse(node0.isName());
266:       assertFalse(node0.isExprResult());
267:       assertFalse(node0.isVoid());
268:       assertFalse(node0.isComma());
269:       assertFalse(node0.isReturn());
270:       assertFalse(node0.hasChildren());
271:       assertFalse(node0.isDec());
272:       assertFalse(node0.isAssign());
273:       assertFalse(node0.isTypeOf());
274:       assertFalse(node0.isAnd());
275:       assertFalse(node0.isObjectLit());
276:       assertFalse(node0.isGetProp());
277:       assertFalse(node0.isScript());
278:       assertFalse(node0.isNot());
279:       assertFalse(node0.isThrow());
280:       assertFalse(node0.isCast());
281:       assertFalse(node0.isLabelName());
282:       assertFalse(node0.isLabel());
283:       assertFalse(node0.isFalse());
284:       assertFalse(node0.isCase());
285:       assertFalse(node0.isSwitch());
286:       assertFalse(node0.isNE());
287:       assertFalse(node0.isInc());
288:       assertFalse(node0.isGetterDef());
289:       assertFalse(node0.isIn());
290:       assertFalse(node0.isNumber());
291:       assertEquals(309, node0.getLineno());
292:       assertFalse(node0.isFor());
293:       assertFalse(node0.isHook());
294:       assertFalse(node0.isIf());
295:       assertFalse(node0.hasOneChild());
296:       assertEquals(309, node0.getCharno());
297:       assertFalse(node0.isTry());
298:       assertFalse(node0.isThis());
299:       assertFalse(node0.isBlock());
300:       assertFalse(node0.isInstanceOf());
301:       assertFalse(node0.isRegExp());
302:       assertFalse(node0.hasMoreThanOneChild());
303:       assertFalse(node0.isWith());
304:       
305:       Node node1 = Node.newString("$dp4&M'~ A", 36, 120);
306:       assertNotNull(node1);
307:       assertEquals(1, Node.DECR_FLAG);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(57, Node.LAST_PROP);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(49, Node.DIRECT_EVAL);
313:       assertEquals(32, Node.INCRDECR_PROP);
314:       assertEquals(54, Node.SLASH_V);
315:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
317:       assertEquals(52, Node.LENGTH);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(40, Node.ORIGINALNAME_PROP);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(47, Node.IS_DISPATCHER);
322:       assertEquals(2, Node.POST_FLAG);
323:       assertEquals(30, Node.VAR_ARGS_NAME);
324:       assertEquals(55, Node.INFERRED_FUNCTION);
325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
326:       assertEquals(43, Node.IS_CONSTANT_NAME);
327:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
328:       assertEquals(39, Node.EMPTY_BLOCK);
329:       assertEquals(53, Node.INPUT_ID);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
332:       assertEquals(50, Node.FREE_CALL);
333:       assertEquals(8, Node.FLAG_NO_THROWS);
334:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
335:       assertEquals(57, Node.REFLECTED_OBJECT);
336:       assertEquals(56, Node.CHANGE_TIME);
337:       assertEquals(48, Node.DIRECTIVES);
338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
339:       assertEquals(37, Node.OPT_ARG_NAME);
340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
341:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
342:       assertEquals(4095, Node.COLUMN_MASK);
343:       assertFalse(node1.equals((Object)node0));
344:       assertFalse(node1.hasOneChild());
345:       assertFalse(node1.isCast());
346:       assertEquals(120, node1.getCharno());
347:       assertFalse(node1.isAssign());
348:       assertFalse(node1.hasChildren());
349:       assertFalse(node1.isDec());
350:       assertFalse(node1.isScript());
351:       assertFalse(node1.isAssignAdd());
352:       assertFalse(node1.isInstanceOf());
353:       assertFalse(node1.isReturn());
354:       assertFalse(node1.isComma());
355:       assertEquals(36, node1.getLineno());
356:       assertFalse(node1.isTypeOf());
357:       assertFalse(node1.isOr());
358:       assertFalse(node1.hasMoreThanOneChild());
359:       assertFalse(node1.isWith());
360:       assertFalse(node1.isBreak());
361:       assertFalse(node1.isGetElem());
362:       assertFalse(node1.isExprResult());
363:       assertFalse(node1.isVar());
364:       assertFalse(node1.isAdd());
365:       assertFalse(node1.isBlock());
366:       assertFalse(node1.isHook());
367:       assertFalse(node1.isThis());
368:       assertFalse(node1.isNew());
369:       assertFalse(node1.isCase());
370:       assertFalse(node1.isDo());
371:       assertTrue(node1.isString());
372:       assertEquals(0, node1.getChildCount());
373:       assertFalse(node1.isLabel());
374:       assertFalse(node1.isNumber());
375:       assertFalse(node1.isGetterDef());
376:       assertFalse(node1.isStringKey());
377:       assertFalse(node1.isParamList());
378:       assertFalse(node1.isLabelName());
379:       assertFalse(node1.isSwitch());
380:       assertFalse(node1.isArrayLit());
381:       assertFalse(node1.isDebugger());
382:       assertFalse(node1.isRegExp());
383:       assertFalse(node1.isFunction());
384:       assertFalse(node1.isDefaultCase());
385:       assertFalse(node1.isEmpty());
386:       assertFalse(node1.isFor());
387:       assertEquals(40, node1.getType());
388:       assertFalse(node1.isTry());
389:       assertFalse(node1.isIn());
390:       assertFalse(node1.isCatch());
391:       assertFalse(node1.isDelProp());
392:       assertFalse(node1.isIf());
393:       assertFalse(node1.isNull());
394:       assertFalse(node1.isNE());
395:       assertFalse(node1.isTrue());
396:       assertFalse(node1.isVoid());
397:       assertFalse(node1.isName());
398:       assertFalse(node1.isCall());
399:       assertFalse(node1.isFalse());
400:       assertFalse(node1.isWhile());
401:       assertFalse(node1.isSetterDef());
402:       assertFalse(node1.isInc());
403:       assertFalse(node1.isGetProp());
404:       assertFalse(node1.isThrow());
405:       assertEquals(147576, node1.getSourcePosition());
406:       assertFalse(node1.isObjectLit());
407:       assertFalse(node1.isContinue());
408:       assertFalse(node1.isNot());
409:       assertFalse(node1.isAnd());
410:       
411:       Iterable<Node> iterable0 = node1.children();
412:       assertNotNull(iterable0);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(12, Node.COLUMN_BITS);
415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
416:       assertEquals(57, Node.LAST_PROP);
417:       assertEquals(46, Node.IS_NAMESPACE);
418:       assertEquals(49, Node.DIRECT_EVAL);
419:       assertEquals(32, Node.INCRDECR_PROP);
420:       assertEquals(54, Node.SLASH_V);
421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(52, Node.LENGTH);
424:       assertEquals(29, Node.JSDOC_INFO_PROP);
425:       assertEquals(40, Node.ORIGINALNAME_PROP);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(47, Node.IS_DISPATCHER);
428:       assertEquals(2, Node.POST_FLAG);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(55, Node.INFERRED_FUNCTION);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(43, Node.IS_CONSTANT_NAME);
433:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
434:       assertEquals(39, Node.EMPTY_BLOCK);
435:       assertEquals(53, Node.INPUT_ID);
436:       assertEquals(36, Node.QUOTED_PROP);
437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
438:       assertEquals(50, Node.FREE_CALL);
439:       assertEquals(8, Node.FLAG_NO_THROWS);
440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
441:       assertEquals(57, Node.REFLECTED_OBJECT);
442:       assertEquals(56, Node.CHANGE_TIME);
443:       assertEquals(48, Node.DIRECTIVES);
444:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
445:       assertEquals(37, Node.OPT_ARG_NAME);
446:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
447:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
448:       assertEquals(4095, Node.COLUMN_MASK);
449:       assertFalse(node1.equals((Object)node0));
450:       assertFalse(node1.hasOneChild());
451:       assertFalse(node1.isCast());
452:       assertEquals(120, node1.getCharno());
453:       assertFalse(node1.isAssign());
454:       assertFalse(node1.hasChildren());
455:       assertFalse(node1.isDec());
456:       assertFalse(node1.isScript());
457:       assertFalse(node1.isAssignAdd());
458:       assertFalse(node1.isInstanceOf());
459:       assertFalse(node1.isReturn());
460:       assertFalse(node1.isComma());
461:       assertEquals(36, node1.getLineno());
462:       assertFalse(node1.isTypeOf());
463:       assertFalse(node1.isOr());
464:       assertFalse(node1.hasMoreThanOneChild());
465:       assertFalse(node1.isWith());
466:       assertFalse(node1.isBreak());
467:       assertFalse(node1.isGetElem());
468:       assertFalse(node1.isExprResult());
469:       assertFalse(node1.isVar());
470:       assertFalse(node1.isAdd());
471:       assertFalse(node1.isBlock());
472:       assertFalse(node1.isHook());
473:       assertFalse(node1.isThis());
474:       assertFalse(node1.isNew());
475:       assertFalse(node1.isCase());
476:       assertFalse(node1.isDo());
477:       assertTrue(node1.isString());
478:       assertEquals(0, node1.getChildCount());
479:       assertFalse(node1.isLabel());
480:       assertFalse(node1.isNumber());
481:       assertFalse(node1.isGetterDef());
482:       assertFalse(node1.isStringKey());
483:       assertFalse(node1.isParamList());
484:       assertFalse(node1.isLabelName());
485:       assertFalse(node1.isSwitch());
486:       assertFalse(node1.isArrayLit());
487:       assertFalse(node1.isDebugger());
488:       assertFalse(node1.isRegExp());
489:       assertFalse(node1.isFunction());
490:       assertFalse(node1.isDefaultCase());
491:       assertFalse(node1.isEmpty());
492:       assertFalse(node1.isFor());
493:       assertEquals(40, node1.getType());
494:       assertFalse(node1.isTry());
495:       assertFalse(node1.isIn());
496:       assertFalse(node1.isCatch());
497:       assertFalse(node1.isDelProp());
498:       assertFalse(node1.isIf());
499:       assertFalse(node1.isNull());
500:       assertFalse(node1.isNE());
501:       assertFalse(node1.isTrue());
502:       assertFalse(node1.isVoid());
503:       assertFalse(node1.isName());
504:       assertFalse(node1.isCall());
505:       assertFalse(node1.isFalse());
506:       assertFalse(node1.isWhile());
507:       assertFalse(node1.isSetterDef());
508:       assertFalse(node1.isInc());
509:       assertFalse(node1.isGetProp());
510:       assertFalse(node1.isThrow());
511:       assertEquals(147576, node1.getSourcePosition());
512:       assertFalse(node1.isObjectLit());
513:       assertFalse(node1.isContinue());
514:       assertFalse(node1.isNot());
515:       assertFalse(node1.isAnd());
516:       assertFalse(iterable0.contains(node1));
517:       
518:       // Undeclared exception!
519:       try { 
520:         node0.getExistingIntProp(1102);
521:         fail("Expecting exception: IllegalStateException");
522:       
523:       } catch(IllegalStateException e) {
524:          //
525:          // missing prop: 1102
526:          //
527:          verifyException("com.google.javascript.rhino.Node", e);
528:       }
529:   }
530: }
RegularFileObject[/tmp/EvoSuite_335_1628159308920/com/google/javascript/rhino/Node_335_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:28 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_335_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_335_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_335_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:28.960 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(309, 309, 309);
assertNotNull(node0);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals(1265973, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(309, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertEquals(309, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertEquals(309, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesArguments();
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());

String string0 = node0.toStringTree();
assertEquals("LC 309\n", string0);
assertNotNull(string0);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals(1265973, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(309, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertEquals(309, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertEquals(309, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());

Node node1 = Node.newString("$dp4&M'~ A", 36, 120);
assertNotNull(node1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertEquals(120, node1.getCharno());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertEquals(36, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(147576, node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertEquals(120, node1.getCharno());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertEquals(36, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(147576, node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(iterable0.contains(node1));

node0.getExistingIntProp(1102);

[MASTER] 10:28:31.382 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_357_1628159311325/com/google/javascript/rhino/Node_357_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_357_1628159311325/com/google/javascript/rhino/Node_357_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:31.382 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:31.382 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:31.383 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 496
[MASTER] 10:28:31.384 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_357_1628159311325/com/google/javascript/rhino/Node_357_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:31 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_357_tmp__ESTest extends Node_357_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(309, ".");
21:       assertNotNull(node0);
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(53, Node.INPUT_ID);
24:       assertEquals(2, Node.POST_FLAG);
25:       assertEquals(47, Node.IS_DISPATCHER);
26:       assertEquals(32, Node.INCRDECR_PROP);
27:       assertEquals(46, Node.IS_NAMESPACE);
28:       assertEquals(1, Node.DECR_FLAG);
29:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
30:       assertEquals(50, Node.FREE_CALL);
31:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
32:       assertEquals(43, Node.IS_CONSTANT_NAME);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(52, Node.LENGTH);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(15, Node.NO_SIDE_EFFECTS);
38:       assertEquals(30, Node.VAR_ARGS_NAME);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(57, Node.LAST_PROP);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(12, Node.COLUMN_BITS);
43:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
44:       assertEquals(4095, Node.COLUMN_MASK);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(39, Node.EMPTY_BLOCK);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(29, Node.JSDOC_INFO_PROP);
51:       assertEquals(49, Node.DIRECT_EVAL);
52:       assertEquals(56, Node.CHANGE_TIME);
53:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(8, Node.FLAG_NO_THROWS);
56:       assertEquals(36, Node.QUOTED_PROP);
57:       assertEquals(57, Node.REFLECTED_OBJECT);
58:       assertFalse(node0.isParamList());
59:       assertFalse(node0.isSetterDef());
60:       assertFalse(node0.isNull());
61:       assertEquals(0, node0.getChildCount());
62:       assertFalse(node0.isCatch());
63:       assertFalse(node0.isCall());
64:       assertFalse(node0.isStringKey());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isVoid());
69:       assertFalse(node0.isDefaultCase());
70:       assertFalse(node0.isVar());
71:       assertFalse(node0.isAdd());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isEmpty());
74:       assertFalse(node0.isNew());
75:       assertFalse(node0.isNE());
76:       assertFalse(node0.isNumber());
77:       assertFalse(node0.isAssignAdd());
78:       assertFalse(node0.isIf());
79:       assertFalse(node0.isGetterDef());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isLabel());
82:       assertFalse(node0.hasMoreThanOneChild());
83:       assertEquals((-1), node0.getLineno());
84:       assertFalse(node0.isLabelName());
85:       assertFalse(node0.isArrayLit());
86:       assertFalse(node0.isSwitch());
87:       assertFalse(node0.isScript());
88:       assertFalse(node0.isRegExp());
89:       assertFalse(node0.isWith());
90:       assertFalse(node0.isBlock());
91:       assertFalse(node0.isHook());
92:       assertEquals((-1), node0.getCharno());
93:       assertFalse(node0.isTry());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isCase());
96:       assertFalse(node0.isComma());
97:       assertFalse(node0.isThis());
98:       assertFalse(node0.isInstanceOf());
99:       assertFalse(node0.isFalse());
100:       assertFalse(node0.isAnd());
101:       assertFalse(node0.isBreak());
102:       assertFalse(node0.isInc());
103:       assertFalse(node0.isThrow());
104:       assertFalse(node0.isIn());
105:       assertFalse(node0.isTypeOf());
106:       assertFalse(node0.isReturn());
107:       assertFalse(node0.isAssign());
108:       assertFalse(node0.isOr());
109:       assertEquals(309, node0.getType());
110:       assertFalse(node0.isDec());
111:       assertEquals((-1), node0.getSourcePosition());
112:       assertFalse(node0.hasChildren());
113:       assertFalse(node0.isCast());
114:       assertFalse(node0.isContinue());
115:       assertFalse(node0.isDelProp());
116:       assertFalse(node0.isGetElem());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.isString());
119:       assertFalse(node0.isWhile());
120:       assertFalse(node0.isNot());
121:       assertFalse(node0.isDebugger());
122:       assertFalse(node0.isObjectLit());
123:       assertFalse(node0.isGetProp());
124:       
125:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
126:       assertNotNull(node_SideEffectFlags0);
127:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
128:       assertEquals(0, node_SideEffectFlags0.valueOf());
129:       
130:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
131:       assertNotNull(node_SideEffectFlags1);
132:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
133:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
134:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
135:       assertEquals(0, node_SideEffectFlags0.valueOf());
136:       assertEquals(0, node_SideEffectFlags1.valueOf());
137:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
138:       
139:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
140:       assertNotNull(node_SideEffectFlags2);
141:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
142:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
143:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
144:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
145:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
146:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
147:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
148:       assertEquals(0, node_SideEffectFlags0.valueOf());
149:       assertEquals(0, node_SideEffectFlags1.valueOf());
150:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
151:       assertEquals(0, node_SideEffectFlags2.valueOf());
152:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
153:       
154:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
155:       assertNotNull(node_SideEffectFlags3);
156:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
157:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
158:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
159:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
160:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
161:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
162:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
163:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
164:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
165:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
166:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
167:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
168:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
169:       assertEquals(0, node_SideEffectFlags0.valueOf());
170:       assertEquals(0, node_SideEffectFlags1.valueOf());
171:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
172:       assertEquals(0, node_SideEffectFlags2.valueOf());
173:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
174:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
175:       assertEquals(0, node_SideEffectFlags3.valueOf());
176:       
177:       String string0 = node0.toStringTree();
178:       assertEquals("LC .\n", string0);
179:       assertNotNull(string0);
180:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
181:       assertEquals(53, Node.INPUT_ID);
182:       assertEquals(2, Node.POST_FLAG);
183:       assertEquals(47, Node.IS_DISPATCHER);
184:       assertEquals(32, Node.INCRDECR_PROP);
185:       assertEquals(46, Node.IS_NAMESPACE);
186:       assertEquals(1, Node.DECR_FLAG);
187:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
188:       assertEquals(50, Node.FREE_CALL);
189:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
190:       assertEquals(43, Node.IS_CONSTANT_NAME);
191:       assertEquals(54, Node.SLASH_V);
192:       assertEquals(51, Node.STATIC_SOURCE_FILE);
193:       assertEquals(52, Node.LENGTH);
194:       assertEquals(40, Node.ORIGINALNAME_PROP);
195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
196:       assertEquals(30, Node.VAR_ARGS_NAME);
197:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
198:       assertEquals(57, Node.LAST_PROP);
199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
200:       assertEquals(12, Node.COLUMN_BITS);
201:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
202:       assertEquals(4095, Node.COLUMN_MASK);
203:       assertEquals(37, Node.OPT_ARG_NAME);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(39, Node.EMPTY_BLOCK);
206:       assertEquals(55, Node.INFERRED_FUNCTION);
207:       assertEquals(48, Node.DIRECTIVES);
208:       assertEquals(29, Node.JSDOC_INFO_PROP);
209:       assertEquals(49, Node.DIRECT_EVAL);
210:       assertEquals(56, Node.CHANGE_TIME);
211:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(8, Node.FLAG_NO_THROWS);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(57, Node.REFLECTED_OBJECT);
216:       assertFalse(node0.isParamList());
217:       assertFalse(node0.isSetterDef());
218:       assertFalse(node0.isNull());
219:       assertEquals(0, node0.getChildCount());
220:       assertFalse(node0.isCatch());
221:       assertFalse(node0.isCall());
222:       assertFalse(node0.isStringKey());
223:       assertFalse(node0.isName());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isTrue());
226:       assertFalse(node0.isVoid());
227:       assertFalse(node0.isDefaultCase());
228:       assertFalse(node0.isVar());
229:       assertFalse(node0.isAdd());
230:       assertFalse(node0.isDo());
231:       assertFalse(node0.isEmpty());
232:       assertFalse(node0.isNew());
233:       assertFalse(node0.isNE());
234:       assertFalse(node0.isNumber());
235:       assertFalse(node0.isAssignAdd());
236:       assertFalse(node0.isIf());
237:       assertFalse(node0.isGetterDef());
238:       assertFalse(node0.isFor());
239:       assertFalse(node0.isLabel());
240:       assertFalse(node0.hasMoreThanOneChild());
241:       assertEquals((-1), node0.getLineno());
242:       assertFalse(node0.isLabelName());
243:       assertFalse(node0.isArrayLit());
244:       assertFalse(node0.isSwitch());
245:       assertFalse(node0.isScript());
246:       assertFalse(node0.isRegExp());
247:       assertFalse(node0.isWith());
248:       assertFalse(node0.isBlock());
249:       assertFalse(node0.isHook());
250:       assertEquals((-1), node0.getCharno());
251:       assertFalse(node0.isTry());
252:       assertFalse(node0.hasOneChild());
253:       assertFalse(node0.isCase());
254:       assertFalse(node0.isComma());
255:       assertFalse(node0.isThis());
256:       assertFalse(node0.isInstanceOf());
257:       assertFalse(node0.isFalse());
258:       assertFalse(node0.isAnd());
259:       assertFalse(node0.isBreak());
260:       assertFalse(node0.isInc());
261:       assertFalse(node0.isThrow());
262:       assertFalse(node0.isIn());
263:       assertFalse(node0.isTypeOf());
264:       assertFalse(node0.isReturn());
265:       assertFalse(node0.isAssign());
266:       assertFalse(node0.isOr());
267:       assertEquals(309, node0.getType());
268:       assertFalse(node0.isDec());
269:       assertEquals((-1), node0.getSourcePosition());
270:       assertFalse(node0.hasChildren());
271:       assertFalse(node0.isCast());
272:       assertFalse(node0.isContinue());
273:       assertFalse(node0.isDelProp());
274:       assertFalse(node0.isGetElem());
275:       assertFalse(node0.isExprResult());
276:       assertFalse(node0.isString());
277:       assertFalse(node0.isWhile());
278:       assertFalse(node0.isNot());
279:       assertFalse(node0.isDebugger());
280:       assertFalse(node0.isObjectLit());
281:       assertFalse(node0.isGetProp());
282:       
283:       Node node1 = Node.newString("$dp4&M'~ A", 36, 120);
284:       assertNotNull(node1);
285:       assertEquals(29, Node.JSDOC_INFO_PROP);
286:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
287:       assertEquals(56, Node.CHANGE_TIME);
288:       assertEquals(2, Node.POST_FLAG);
289:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
290:       assertEquals(47, Node.IS_DISPATCHER);
291:       assertEquals(53, Node.INPUT_ID);
292:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
293:       assertEquals(32, Node.INCRDECR_PROP);
294:       assertEquals(1, Node.DECR_FLAG);
295:       assertEquals(43, Node.IS_CONSTANT_NAME);
296:       assertEquals(30, Node.VAR_ARGS_NAME);
297:       assertEquals(51, Node.STATIC_SOURCE_FILE);
298:       assertEquals(46, Node.IS_NAMESPACE);
299:       assertEquals(54, Node.SLASH_V);
300:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
301:       assertEquals(50, Node.FREE_CALL);
302:       assertEquals(40, Node.ORIGINALNAME_PROP);
303:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
304:       assertEquals(8, Node.FLAG_NO_THROWS);
305:       assertEquals(57, Node.REFLECTED_OBJECT);
306:       assertEquals(52, Node.LENGTH);
307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(39, Node.EMPTY_BLOCK);
311:       assertEquals(57, Node.LAST_PROP);
312:       assertEquals(49, Node.DIRECT_EVAL);
313:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
314:       assertEquals(55, Node.INFERRED_FUNCTION);
315:       assertEquals(12, Node.COLUMN_BITS);
316:       assertEquals(4095, Node.COLUMN_MASK);
317:       assertEquals(36, Node.QUOTED_PROP);
318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
319:       assertEquals(37, Node.OPT_ARG_NAME);
320:       assertEquals(48, Node.DIRECTIVES);
321:       assertNotSame(node1, node0);
322:       assertFalse(node1.equals((Object)node0));
323:       assertFalse(node1.isCatch());
324:       assertFalse(node1.isRegExp());
325:       assertFalse(node1.isDefaultCase());
326:       assertEquals(40, node1.getType());
327:       assertFalse(node1.isFunction());
328:       assertEquals(0, node1.getChildCount());
329:       assertFalse(node1.isCall());
330:       assertFalse(node1.isVar());
331:       assertFalse(node1.isAdd());
332:       assertFalse(node1.isName());
333:       assertFalse(node1.isNew());
334:       assertFalse(node1.isDelProp());
335:       assertFalse(node1.isVoid());
336:       assertFalse(node1.isNull());
337:       assertFalse(node1.isIf());
338:       assertFalse(node1.isSetterDef());
339:       assertFalse(node1.isTrue());
340:       assertFalse(node1.isEmpty());
341:       assertFalse(node1.isNE());
342:       assertFalse(node1.hasMoreThanOneChild());
343:       assertFalse(node1.isCase());
344:       assertFalse(node1.isAssignAdd());
345:       assertFalse(node1.isDo());
346:       assertEquals(36, node1.getLineno());
347:       assertFalse(node1.isBlock());
348:       assertFalse(node1.isFor());
349:       assertFalse(node1.isLabel());
350:       assertFalse(node1.hasOneChild());
351:       assertFalse(node1.isArrayLit());
352:       assertFalse(node1.isHook());
353:       assertFalse(node1.isStringKey());
354:       assertTrue(node1.isString());
355:       assertFalse(node1.isLabelName());
356:       assertFalse(node1.isTry());
357:       assertFalse(node1.isScript());
358:       assertFalse(node1.isNumber());
359:       assertFalse(node1.isSwitch());
360:       assertFalse(node1.isParamList());
361:       assertFalse(node1.isGetterDef());
362:       assertFalse(node1.isAnd());
363:       assertFalse(node1.isInstanceOf());
364:       assertFalse(node1.isGetProp());
365:       assertFalse(node1.isBreak());
366:       assertFalse(node1.isExprResult());
367:       assertFalse(node1.isThis());
368:       assertEquals(147576, node1.getSourcePosition());
369:       assertFalse(node1.isWith());
370:       assertFalse(node1.isFalse());
371:       assertFalse(node1.isComma());
372:       assertEquals(120, node1.getCharno());
373:       assertFalse(node1.isThrow());
374:       assertFalse(node1.isGetElem());
375:       assertFalse(node1.isInc());
376:       assertFalse(node1.isOr());
377:       assertFalse(node1.isIn());
378:       assertFalse(node1.isReturn());
379:       assertFalse(node1.isContinue());
380:       assertFalse(node1.isTypeOf());
381:       assertFalse(node1.hasChildren());
382:       assertFalse(node1.isWhile());
383:       assertFalse(node1.isAssign());
384:       assertFalse(node1.isDec());
385:       assertFalse(node1.isCast());
386:       assertFalse(node1.isObjectLit());
387:       assertFalse(node1.isDebugger());
388:       assertFalse(node1.isNot());
389:       
390:       Iterable<Node> iterable0 = node1.children();
391:       assertNotNull(iterable0);
392:       assertEquals(29, Node.JSDOC_INFO_PROP);
393:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
394:       assertEquals(56, Node.CHANGE_TIME);
395:       assertEquals(2, Node.POST_FLAG);
396:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
397:       assertEquals(47, Node.IS_DISPATCHER);
398:       assertEquals(53, Node.INPUT_ID);
399:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
400:       assertEquals(32, Node.INCRDECR_PROP);
401:       assertEquals(1, Node.DECR_FLAG);
402:       assertEquals(43, Node.IS_CONSTANT_NAME);
403:       assertEquals(30, Node.VAR_ARGS_NAME);
404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
405:       assertEquals(46, Node.IS_NAMESPACE);
406:       assertEquals(54, Node.SLASH_V);
407:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
408:       assertEquals(50, Node.FREE_CALL);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
411:       assertEquals(8, Node.FLAG_NO_THROWS);
412:       assertEquals(57, Node.REFLECTED_OBJECT);
413:       assertEquals(52, Node.LENGTH);
414:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
416:       assertEquals(15, Node.NO_SIDE_EFFECTS);
417:       assertEquals(39, Node.EMPTY_BLOCK);
418:       assertEquals(57, Node.LAST_PROP);
419:       assertEquals(49, Node.DIRECT_EVAL);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(55, Node.INFERRED_FUNCTION);
422:       assertEquals(12, Node.COLUMN_BITS);
423:       assertEquals(4095, Node.COLUMN_MASK);
424:       assertEquals(36, Node.QUOTED_PROP);
425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(48, Node.DIRECTIVES);
428:       assertNotSame(node1, node0);
429:       assertFalse(node1.equals((Object)node0));
430:       assertFalse(node1.isCatch());
431:       assertFalse(node1.isRegExp());
432:       assertFalse(node1.isDefaultCase());
433:       assertEquals(40, node1.getType());
434:       assertFalse(node1.isFunction());
435:       assertEquals(0, node1.getChildCount());
436:       assertFalse(node1.isCall());
437:       assertFalse(node1.isVar());
438:       assertFalse(node1.isAdd());
439:       assertFalse(node1.isName());
440:       assertFalse(node1.isNew());
441:       assertFalse(node1.isDelProp());
442:       assertFalse(node1.isVoid());
443:       assertFalse(node1.isNull());
444:       assertFalse(node1.isIf());
445:       assertFalse(node1.isSetterDef());
446:       assertFalse(node1.isTrue());
447:       assertFalse(node1.isEmpty());
448:       assertFalse(node1.isNE());
449:       assertFalse(node1.hasMoreThanOneChild());
450:       assertFalse(node1.isCase());
451:       assertFalse(node1.isAssignAdd());
452:       assertFalse(node1.isDo());
453:       assertEquals(36, node1.getLineno());
454:       assertFalse(node1.isBlock());
455:       assertFalse(node1.isFor());
456:       assertFalse(node1.isLabel());
457:       assertFalse(node1.hasOneChild());
458:       assertFalse(node1.isArrayLit());
459:       assertFalse(node1.isHook());
460:       assertFalse(node1.isStringKey());
461:       assertTrue(node1.isString());
462:       assertFalse(node1.isLabelName());
463:       assertFalse(node1.isTry());
464:       assertFalse(node1.isScript());
465:       assertFalse(node1.isNumber());
466:       assertFalse(node1.isSwitch());
467:       assertFalse(node1.isParamList());
468:       assertFalse(node1.isGetterDef());
469:       assertFalse(node1.isAnd());
470:       assertFalse(node1.isInstanceOf());
471:       assertFalse(node1.isGetProp());
472:       assertFalse(node1.isBreak());
473:       assertFalse(node1.isExprResult());
474:       assertFalse(node1.isThis());
475:       assertEquals(147576, node1.getSourcePosition());
476:       assertFalse(node1.isWith());
477:       assertFalse(node1.isFalse());
478:       assertFalse(node1.isComma());
479:       assertEquals(120, node1.getCharno());
480:       assertFalse(node1.isThrow());
481:       assertFalse(node1.isGetElem());
482:       assertFalse(node1.isInc());
483:       assertFalse(node1.isOr());
484:       assertFalse(node1.isIn());
485:       assertFalse(node1.isReturn());
486:       assertFalse(node1.isContinue());
487:       assertFalse(node1.isTypeOf());
488:       assertFalse(node1.hasChildren());
489:       assertFalse(node1.isWhile());
490:       assertFalse(node1.isAssign());
491:       assertFalse(node1.isDec());
492:       assertFalse(node1.isCast());
493:       assertFalse(node1.isObjectLit());
494:       assertFalse(node1.isDebugger());
495:       assertFalse(node1.isNot());
496:       assertFalse(iterable0.contains(node0));
497:       
498:       boolean boolean0 = node0.isCall();
499:       assertFalse(boolean0);
500:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
501:       assertEquals(53, Node.INPUT_ID);
502:       assertEquals(2, Node.POST_FLAG);
503:       assertEquals(47, Node.IS_DISPATCHER);
504:       assertEquals(32, Node.INCRDECR_PROP);
505:       assertEquals(46, Node.IS_NAMESPACE);
506:       assertEquals(1, Node.DECR_FLAG);
507:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
508:       assertEquals(50, Node.FREE_CALL);
509:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
510:       assertEquals(43, Node.IS_CONSTANT_NAME);
511:       assertEquals(54, Node.SLASH_V);
512:       assertEquals(51, Node.STATIC_SOURCE_FILE);
513:       assertEquals(52, Node.LENGTH);
514:       assertEquals(40, Node.ORIGINALNAME_PROP);
515:       assertEquals(15, Node.NO_SIDE_EFFECTS);
516:       assertEquals(30, Node.VAR_ARGS_NAME);
517:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
518:       assertEquals(57, Node.LAST_PROP);
519:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
520:       assertEquals(12, Node.COLUMN_BITS);
521:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
522:       assertEquals(4095, Node.COLUMN_MASK);
523:       assertEquals(37, Node.OPT_ARG_NAME);
524:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
525:       assertEquals(39, Node.EMPTY_BLOCK);
526:       assertEquals(55, Node.INFERRED_FUNCTION);
527:       assertEquals(48, Node.DIRECTIVES);
528:       assertEquals(29, Node.JSDOC_INFO_PROP);
529:       assertEquals(49, Node.DIRECT_EVAL);
530:       assertEquals(56, Node.CHANGE_TIME);
531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
532:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
533:       assertEquals(8, Node.FLAG_NO_THROWS);
534:       assertEquals(36, Node.QUOTED_PROP);
535:       assertEquals(57, Node.REFLECTED_OBJECT);
536:       assertNotSame(node0, node1);
537:       assertFalse(node0.equals((Object)node1));
538:       assertFalse(node0.isParamList());
539:       assertFalse(node0.isSetterDef());
540:       assertFalse(node0.isNull());
541:       assertEquals(0, node0.getChildCount());
542:       assertFalse(node0.isCatch());
543:       assertFalse(node0.isCall());
544:       assertFalse(node0.isStringKey());
545:       assertFalse(node0.isName());
546:       assertFalse(node0.isFunction());
547:       assertFalse(node0.isTrue());
548:       assertFalse(node0.isVoid());
549:       assertFalse(node0.isDefaultCase());
550:       assertFalse(node0.isVar());
551:       assertFalse(node0.isAdd());
552:       assertFalse(node0.isDo());
553:       assertFalse(node0.isEmpty());
554:       assertFalse(node0.isNew());
555:       assertFalse(node0.isNE());
556:       assertFalse(node0.isNumber());
557:       assertFalse(node0.isAssignAdd());
558:       assertFalse(node0.isIf());
559:       assertFalse(node0.isGetterDef());
560:       assertFalse(node0.isFor());
561:       assertFalse(node0.isLabel());
562:       assertFalse(node0.hasMoreThanOneChild());
563:       assertEquals((-1), node0.getLineno());
564:       assertFalse(node0.isLabelName());
565:       assertFalse(node0.isArrayLit());
566:       assertFalse(node0.isSwitch());
567:       assertFalse(node0.isScript());
568:       assertFalse(node0.isRegExp());
569:       assertFalse(node0.isWith());
570:       assertFalse(node0.isBlock());
571:       assertFalse(node0.isHook());
572:       assertEquals((-1), node0.getCharno());
573:       assertFalse(node0.isTry());
574:       assertFalse(node0.hasOneChild());
575:       assertFalse(node0.isCase());
576:       assertFalse(node0.isComma());
577:       assertFalse(node0.isThis());
578:       assertFalse(node0.isInstanceOf());
579:       assertFalse(node0.isFalse());
580:       assertFalse(node0.isAnd());
581:       assertFalse(node0.isBreak());
582:       assertFalse(node0.isInc());
583:       assertFalse(node0.isThrow());
584:       assertFalse(node0.isIn());
585:       assertFalse(node0.isTypeOf());
586:       assertFalse(node0.isReturn());
587:       assertFalse(node0.isAssign());
588:       assertFalse(node0.isOr());
589:       assertEquals(309, node0.getType());
590:       assertFalse(node0.isDec());
591:       assertEquals((-1), node0.getSourcePosition());
592:       assertFalse(node0.hasChildren());
593:       assertFalse(node0.isCast());
594:       assertFalse(node0.isContinue());
595:       assertFalse(node0.isDelProp());
596:       assertFalse(node0.isGetElem());
597:       assertFalse(node0.isExprResult());
598:       assertFalse(node0.isString());
599:       assertFalse(node0.isWhile());
600:       assertFalse(node0.isNot());
601:       assertFalse(node0.isDebugger());
602:       assertFalse(node0.isObjectLit());
603:       assertFalse(node0.isGetProp());
604:       
605:       int int0 = node0.getChildCount();
606:       assertEquals(0, int0);
607:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
608:       assertEquals(53, Node.INPUT_ID);
609:       assertEquals(2, Node.POST_FLAG);
610:       assertEquals(47, Node.IS_DISPATCHER);
611:       assertEquals(32, Node.INCRDECR_PROP);
612:       assertEquals(46, Node.IS_NAMESPACE);
613:       assertEquals(1, Node.DECR_FLAG);
614:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
615:       assertEquals(50, Node.FREE_CALL);
616:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
617:       assertEquals(43, Node.IS_CONSTANT_NAME);
618:       assertEquals(54, Node.SLASH_V);
619:       assertEquals(51, Node.STATIC_SOURCE_FILE);
620:       assertEquals(52, Node.LENGTH);
621:       assertEquals(40, Node.ORIGINALNAME_PROP);
622:       assertEquals(15, Node.NO_SIDE_EFFECTS);
623:       assertEquals(30, Node.VAR_ARGS_NAME);
624:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
625:       assertEquals(57, Node.LAST_PROP);
626:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
627:       assertEquals(12, Node.COLUMN_BITS);
628:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
629:       assertEquals(4095, Node.COLUMN_MASK);
630:       assertEquals(37, Node.OPT_ARG_NAME);
631:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
632:       assertEquals(39, Node.EMPTY_BLOCK);
633:       assertEquals(55, Node.INFERRED_FUNCTION);
634:       assertEquals(48, Node.DIRECTIVES);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(49, Node.DIRECT_EVAL);
637:       assertEquals(56, Node.CHANGE_TIME);
638:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
639:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
640:       assertEquals(8, Node.FLAG_NO_THROWS);
641:       assertEquals(36, Node.QUOTED_PROP);
642:       assertEquals(57, Node.REFLECTED_OBJECT);
643:       assertNotSame(node0, node1);
644:       assertFalse(node0.equals((Object)node1));
645:       assertFalse(node0.isParamList());
646:       assertFalse(node0.isSetterDef());
647:       assertFalse(node0.isNull());
648:       assertEquals(0, node0.getChildCount());
649:       assertFalse(node0.isCatch());
650:       assertFalse(node0.isCall());
651:       assertFalse(node0.isStringKey());
652:       assertFalse(node0.isName());
653:       assertFalse(node0.isFunction());
654:       assertFalse(node0.isTrue());
655:       assertFalse(node0.isVoid());
656:       assertFalse(node0.isDefaultCase());
657:       assertFalse(node0.isVar());
658:       assertFalse(node0.isAdd());
659:       assertFalse(node0.isDo());
660:       assertFalse(node0.isEmpty());
661:       assertFalse(node0.isNew());
662:       assertFalse(node0.isNE());
663:       assertFalse(node0.isNumber());
664:       assertFalse(node0.isAssignAdd());
665:       assertFalse(node0.isIf());
666:       assertFalse(node0.isGetterDef());
667:       assertFalse(node0.isFor());
668:       assertFalse(node0.isLabel());
669:       assertFalse(node0.hasMoreThanOneChild());
670:       assertEquals((-1), node0.getLineno());
671:       assertFalse(node0.isLabelName());
672:       assertFalse(node0.isArrayLit());
673:       assertFalse(node0.isSwitch());
674:       assertFalse(node0.isScript());
675:       assertFalse(node0.isRegExp());
676:       assertFalse(node0.isWith());
677:       assertFalse(node0.isBlock());
678:       assertFalse(node0.isHook());
679:       assertEquals((-1), node0.getCharno());
680:       assertFalse(node0.isTry());
681:       assertFalse(node0.hasOneChild());
682:       assertFalse(node0.isCase());
683:       assertFalse(node0.isComma());
684:       assertFalse(node0.isThis());
685:       assertFalse(node0.isInstanceOf());
686:       assertFalse(node0.isFalse());
687:       assertFalse(node0.isAnd());
688:       assertFalse(node0.isBreak());
689:       assertFalse(node0.isInc());
690:       assertFalse(node0.isThrow());
691:       assertFalse(node0.isIn());
692:       assertFalse(node0.isTypeOf());
693:       assertFalse(node0.isReturn());
694:       assertFalse(node0.isAssign());
695:       assertFalse(node0.isOr());
696:       assertEquals(309, node0.getType());
697:       assertFalse(node0.isDec());
698:       assertEquals((-1), node0.getSourcePosition());
699:       assertFalse(node0.hasChildren());
700:       assertFalse(node0.isCast());
701:       assertFalse(node0.isContinue());
702:       assertFalse(node0.isDelProp());
703:       assertFalse(node0.isGetElem());
704:       assertFalse(node0.isExprResult());
705:       assertFalse(node0.isString());
706:       assertFalse(node0.isWhile());
707:       assertFalse(node0.isNot());
708:       assertFalse(node0.isDebugger());
709:       assertFalse(node0.isObjectLit());
710:       assertFalse(node0.isGetProp());
711:   }
712: }
RegularFileObject[/tmp/EvoSuite_357_1628159311325/com/google/javascript/rhino/Node_357_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:31 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_357_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_357_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_357_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:31.400 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(309, ".");
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals(309, node0.getType());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());

String string0 = node0.toStringTree();
assertEquals("LC .\n", string0);
assertNotNull(string0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals(309, node0.getType());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());

Node node1 = Node.newString("$dp4&M'~ A", 36, 120);
assertNotNull(node1);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertEquals(36, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertTrue(node1.isString());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertEquals(147576, node1.getSourcePosition());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(120, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isOr());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertEquals(36, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertTrue(node1.isString());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertEquals(147576, node1.getSourcePosition());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(120, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isOr());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isCall();
assertFalse(boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals(309, node0.getType());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());

int int0 = node0.getChildCount();
assertEquals(0, int0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals(309, node0.getType());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());


[MASTER] 10:28:35.007 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_388_1628159314829/com/google/javascript/rhino/Node_388_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_388_1628159314829/com/google/javascript/rhino/Node_388_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:35.007 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:35.007 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:35.007 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1056
[MASTER] 10:28:35.008 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_388_1628159314829/com/google/javascript/rhino/Node_388_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.Vector;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_388_tmp__ESTest extends Node_388_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1898.08877, 0, 0);
22:       assertNotNull(node0);
23:       assertEquals(12, Node.COLUMN_BITS);
24:       assertEquals(46, Node.IS_NAMESPACE);
25:       assertEquals(30, Node.VAR_ARGS_NAME);
26:       assertEquals(51, Node.STATIC_SOURCE_FILE);
27:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
28:       assertEquals(15, Node.NO_SIDE_EFFECTS);
29:       assertEquals(47, Node.IS_DISPATCHER);
30:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
31:       assertEquals(57, Node.LAST_PROP);
32:       assertEquals(1, Node.DECR_FLAG);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
35:       assertEquals(57, Node.REFLECTED_OBJECT);
36:       assertEquals(29, Node.JSDOC_INFO_PROP);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
39:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
40:       assertEquals(37, Node.OPT_ARG_NAME);
41:       assertEquals(36, Node.QUOTED_PROP);
42:       assertEquals(56, Node.CHANGE_TIME);
43:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(49, Node.DIRECT_EVAL);
46:       assertEquals(55, Node.INFERRED_FUNCTION);
47:       assertEquals(4095, Node.COLUMN_MASK);
48:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(40, Node.ORIGINALNAME_PROP);
55:       assertEquals(2, Node.POST_FLAG);
56:       assertEquals(50, Node.FREE_CALL);
57:       assertEquals(43, Node.IS_CONSTANT_NAME);
58:       assertEquals(54, Node.SLASH_V);
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isArrayLit());
62:       assertFalse(node0.isDefaultCase());
63:       assertFalse(node0.isVoid());
64:       assertFalse(node0.isFor());
65:       assertFalse(node0.isCatch());
66:       assertEquals(0, node0.getChildCount());
67:       assertFalse(node0.isFunction());
68:       assertFalse(node0.isRegExp());
69:       assertTrue(node0.isNumber());
70:       assertEquals(0, node0.getLineno());
71:       assertFalse(node0.isParamList());
72:       assertFalse(node0.isString());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isStringKey());
75:       assertFalse(node0.isDebugger());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isNew());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isVar());
80:       assertFalse(node0.isSwitch());
81:       assertFalse(node0.isName());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.isCall());
85:       assertFalse(node0.isComma());
86:       assertFalse(node0.isLabel());
87:       assertFalse(node0.isOr());
88:       assertFalse(node0.isAssignAdd());
89:       assertFalse(node0.isDelProp());
90:       assertFalse(node0.isDo());
91:       assertFalse(node0.isEmpty());
92:       assertEquals(0, node0.getSourcePosition());
93:       assertFalse(node0.isNull());
94:       assertFalse(node0.isExprResult());
95:       assertEquals(0, node0.getCharno());
96:       assertFalse(node0.hasOneChild());
97:       assertFalse(node0.isAssign());
98:       assertFalse(node0.isLabelName());
99:       assertFalse(node0.isWith());
100:       assertFalse(node0.hasChildren());
101:       assertFalse(node0.isGetElem());
102:       assertFalse(node0.isCast());
103:       assertFalse(node0.isDec());
104:       assertFalse(node0.isTypeOf());
105:       assertFalse(node0.isGetProp());
106:       assertFalse(node0.isReturn());
107:       assertFalse(node0.isThis());
108:       assertFalse(node0.isAnd());
109:       assertFalse(node0.isNot());
110:       assertFalse(node0.isScript());
111:       assertFalse(node0.isObjectLit());
112:       assertFalse(node0.isHook());
113:       assertFalse(node0.isBlock());
114:       assertFalse(node0.isInc());
115:       assertEquals(39, node0.getType());
116:       assertFalse(node0.isThrow());
117:       assertFalse(node0.hasMoreThanOneChild());
118:       assertFalse(node0.isContinue());
119:       assertFalse(node0.isFalse());
120:       assertFalse(node0.isInstanceOf());
121:       assertFalse(node0.isNE());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isIf());
124:       assertFalse(node0.isIn());
125:       
126:       String string0 = node0.toStringTree();
127:       assertEquals("NUMBER 1898.08877 0\n", string0);
128:       assertNotNull(string0);
129:       assertEquals(12, Node.COLUMN_BITS);
130:       assertEquals(46, Node.IS_NAMESPACE);
131:       assertEquals(30, Node.VAR_ARGS_NAME);
132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
133:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
134:       assertEquals(15, Node.NO_SIDE_EFFECTS);
135:       assertEquals(47, Node.IS_DISPATCHER);
136:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
137:       assertEquals(57, Node.LAST_PROP);
138:       assertEquals(1, Node.DECR_FLAG);
139:       assertEquals(32, Node.INCRDECR_PROP);
140:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(29, Node.JSDOC_INFO_PROP);
143:       assertEquals(52, Node.LENGTH);
144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
146:       assertEquals(37, Node.OPT_ARG_NAME);
147:       assertEquals(36, Node.QUOTED_PROP);
148:       assertEquals(56, Node.CHANGE_TIME);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(49, Node.DIRECT_EVAL);
152:       assertEquals(55, Node.INFERRED_FUNCTION);
153:       assertEquals(4095, Node.COLUMN_MASK);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
156:       assertEquals(8, Node.FLAG_NO_THROWS);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(53, Node.INPUT_ID);
159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
160:       assertEquals(40, Node.ORIGINALNAME_PROP);
161:       assertEquals(2, Node.POST_FLAG);
162:       assertEquals(50, Node.FREE_CALL);
163:       assertEquals(43, Node.IS_CONSTANT_NAME);
164:       assertEquals(54, Node.SLASH_V);
165:       assertFalse(node0.isTry());
166:       assertFalse(node0.isTrue());
167:       assertFalse(node0.isArrayLit());
168:       assertFalse(node0.isDefaultCase());
169:       assertFalse(node0.isVoid());
170:       assertFalse(node0.isFor());
171:       assertFalse(node0.isCatch());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isFunction());
174:       assertFalse(node0.isRegExp());
175:       assertTrue(node0.isNumber());
176:       assertEquals(0, node0.getLineno());
177:       assertFalse(node0.isParamList());
178:       assertFalse(node0.isString());
179:       assertFalse(node0.isCase());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isDebugger());
182:       assertFalse(node0.isGetterDef());
183:       assertFalse(node0.isNew());
184:       assertFalse(node0.isAdd());
185:       assertFalse(node0.isVar());
186:       assertFalse(node0.isSwitch());
187:       assertFalse(node0.isName());
188:       assertFalse(node0.isWhile());
189:       assertFalse(node0.isBreak());
190:       assertFalse(node0.isCall());
191:       assertFalse(node0.isComma());
192:       assertFalse(node0.isLabel());
193:       assertFalse(node0.isOr());
194:       assertFalse(node0.isAssignAdd());
195:       assertFalse(node0.isDelProp());
196:       assertFalse(node0.isDo());
197:       assertFalse(node0.isEmpty());
198:       assertEquals(0, node0.getSourcePosition());
199:       assertFalse(node0.isNull());
200:       assertFalse(node0.isExprResult());
201:       assertEquals(0, node0.getCharno());
202:       assertFalse(node0.hasOneChild());
203:       assertFalse(node0.isAssign());
204:       assertFalse(node0.isLabelName());
205:       assertFalse(node0.isWith());
206:       assertFalse(node0.hasChildren());
207:       assertFalse(node0.isGetElem());
208:       assertFalse(node0.isCast());
209:       assertFalse(node0.isDec());
210:       assertFalse(node0.isTypeOf());
211:       assertFalse(node0.isGetProp());
212:       assertFalse(node0.isReturn());
213:       assertFalse(node0.isThis());
214:       assertFalse(node0.isAnd());
215:       assertFalse(node0.isNot());
216:       assertFalse(node0.isScript());
217:       assertFalse(node0.isObjectLit());
218:       assertFalse(node0.isHook());
219:       assertFalse(node0.isBlock());
220:       assertFalse(node0.isInc());
221:       assertEquals(39, node0.getType());
222:       assertFalse(node0.isThrow());
223:       assertFalse(node0.hasMoreThanOneChild());
224:       assertFalse(node0.isContinue());
225:       assertFalse(node0.isFalse());
226:       assertFalse(node0.isInstanceOf());
227:       assertFalse(node0.isNE());
228:       assertFalse(node0.isSetterDef());
229:       assertFalse(node0.isIf());
230:       assertFalse(node0.isIn());
231:       
232:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
233:       assertNotNull(node_FileLevelJsDocBuilder0);
234:       assertEquals(12, Node.COLUMN_BITS);
235:       assertEquals(46, Node.IS_NAMESPACE);
236:       assertEquals(30, Node.VAR_ARGS_NAME);
237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
239:       assertEquals(15, Node.NO_SIDE_EFFECTS);
240:       assertEquals(47, Node.IS_DISPATCHER);
241:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
242:       assertEquals(57, Node.LAST_PROP);
243:       assertEquals(1, Node.DECR_FLAG);
244:       assertEquals(32, Node.INCRDECR_PROP);
245:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
246:       assertEquals(57, Node.REFLECTED_OBJECT);
247:       assertEquals(29, Node.JSDOC_INFO_PROP);
248:       assertEquals(52, Node.LENGTH);
249:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
251:       assertEquals(37, Node.OPT_ARG_NAME);
252:       assertEquals(36, Node.QUOTED_PROP);
253:       assertEquals(56, Node.CHANGE_TIME);
254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
255:       assertEquals(48, Node.DIRECTIVES);
256:       assertEquals(49, Node.DIRECT_EVAL);
257:       assertEquals(55, Node.INFERRED_FUNCTION);
258:       assertEquals(4095, Node.COLUMN_MASK);
259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
260:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
261:       assertEquals(8, Node.FLAG_NO_THROWS);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(53, Node.INPUT_ID);
264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
265:       assertEquals(40, Node.ORIGINALNAME_PROP);
266:       assertEquals(2, Node.POST_FLAG);
267:       assertEquals(50, Node.FREE_CALL);
268:       assertEquals(43, Node.IS_CONSTANT_NAME);
269:       assertEquals(54, Node.SLASH_V);
270:       assertFalse(node0.isTry());
271:       assertFalse(node0.isTrue());
272:       assertFalse(node0.isArrayLit());
273:       assertFalse(node0.isDefaultCase());
274:       assertFalse(node0.isVoid());
275:       assertFalse(node0.isFor());
276:       assertFalse(node0.isCatch());
277:       assertEquals(0, node0.getChildCount());
278:       assertFalse(node0.isFunction());
279:       assertFalse(node0.isRegExp());
280:       assertTrue(node0.isNumber());
281:       assertEquals(0, node0.getLineno());
282:       assertFalse(node0.isParamList());
283:       assertFalse(node0.isString());
284:       assertFalse(node0.isCase());
285:       assertFalse(node0.isStringKey());
286:       assertFalse(node0.isDebugger());
287:       assertFalse(node0.isGetterDef());
288:       assertFalse(node0.isNew());
289:       assertFalse(node0.isAdd());
290:       assertFalse(node0.isVar());
291:       assertFalse(node0.isSwitch());
292:       assertFalse(node0.isName());
293:       assertFalse(node0.isWhile());
294:       assertFalse(node0.isBreak());
295:       assertFalse(node0.isCall());
296:       assertFalse(node0.isComma());
297:       assertFalse(node0.isLabel());
298:       assertFalse(node0.isOr());
299:       assertFalse(node0.isAssignAdd());
300:       assertFalse(node0.isDelProp());
301:       assertFalse(node0.isDo());
302:       assertFalse(node0.isEmpty());
303:       assertEquals(0, node0.getSourcePosition());
304:       assertFalse(node0.isNull());
305:       assertFalse(node0.isExprResult());
306:       assertEquals(0, node0.getCharno());
307:       assertFalse(node0.hasOneChild());
308:       assertFalse(node0.isAssign());
309:       assertFalse(node0.isLabelName());
310:       assertFalse(node0.isWith());
311:       assertFalse(node0.hasChildren());
312:       assertFalse(node0.isGetElem());
313:       assertFalse(node0.isCast());
314:       assertFalse(node0.isDec());
315:       assertFalse(node0.isTypeOf());
316:       assertFalse(node0.isGetProp());
317:       assertFalse(node0.isReturn());
318:       assertFalse(node0.isThis());
319:       assertFalse(node0.isAnd());
320:       assertFalse(node0.isNot());
321:       assertFalse(node0.isScript());
322:       assertFalse(node0.isObjectLit());
323:       assertFalse(node0.isHook());
324:       assertFalse(node0.isBlock());
325:       assertFalse(node0.isInc());
326:       assertEquals(39, node0.getType());
327:       assertFalse(node0.isThrow());
328:       assertFalse(node0.hasMoreThanOneChild());
329:       assertFalse(node0.isContinue());
330:       assertFalse(node0.isFalse());
331:       assertFalse(node0.isInstanceOf());
332:       assertFalse(node0.isNE());
333:       assertFalse(node0.isSetterDef());
334:       assertFalse(node0.isIf());
335:       assertFalse(node0.isIn());
336:       
337:       node_FileLevelJsDocBuilder0.append("NUMBER 1898.08877 0\n");
338:       assertEquals(12, Node.COLUMN_BITS);
339:       assertEquals(46, Node.IS_NAMESPACE);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       assertEquals(51, Node.STATIC_SOURCE_FILE);
342:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
343:       assertEquals(15, Node.NO_SIDE_EFFECTS);
344:       assertEquals(47, Node.IS_DISPATCHER);
345:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
346:       assertEquals(57, Node.LAST_PROP);
347:       assertEquals(1, Node.DECR_FLAG);
348:       assertEquals(32, Node.INCRDECR_PROP);
349:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
350:       assertEquals(57, Node.REFLECTED_OBJECT);
351:       assertEquals(29, Node.JSDOC_INFO_PROP);
352:       assertEquals(52, Node.LENGTH);
353:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
354:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
355:       assertEquals(37, Node.OPT_ARG_NAME);
356:       assertEquals(36, Node.QUOTED_PROP);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
359:       assertEquals(48, Node.DIRECTIVES);
360:       assertEquals(49, Node.DIRECT_EVAL);
361:       assertEquals(55, Node.INFERRED_FUNCTION);
362:       assertEquals(4095, Node.COLUMN_MASK);
363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
364:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
365:       assertEquals(8, Node.FLAG_NO_THROWS);
366:       assertEquals(39, Node.EMPTY_BLOCK);
367:       assertEquals(53, Node.INPUT_ID);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(40, Node.ORIGINALNAME_PROP);
370:       assertEquals(2, Node.POST_FLAG);
371:       assertEquals(50, Node.FREE_CALL);
372:       assertEquals(43, Node.IS_CONSTANT_NAME);
373:       assertEquals(54, Node.SLASH_V);
374:       assertFalse(node0.isTry());
375:       assertFalse(node0.isTrue());
376:       assertFalse(node0.isArrayLit());
377:       assertFalse(node0.isDefaultCase());
378:       assertFalse(node0.isVoid());
379:       assertFalse(node0.isFor());
380:       assertFalse(node0.isCatch());
381:       assertEquals(0, node0.getChildCount());
382:       assertFalse(node0.isFunction());
383:       assertFalse(node0.isRegExp());
384:       assertTrue(node0.isNumber());
385:       assertEquals(0, node0.getLineno());
386:       assertFalse(node0.isParamList());
387:       assertFalse(node0.isString());
388:       assertFalse(node0.isCase());
389:       assertFalse(node0.isStringKey());
390:       assertFalse(node0.isDebugger());
391:       assertFalse(node0.isGetterDef());
392:       assertFalse(node0.isNew());
393:       assertFalse(node0.isAdd());
394:       assertFalse(node0.isVar());
395:       assertFalse(node0.isSwitch());
396:       assertFalse(node0.isName());
397:       assertFalse(node0.isWhile());
398:       assertFalse(node0.isBreak());
399:       assertFalse(node0.isCall());
400:       assertFalse(node0.isComma());
401:       assertFalse(node0.isLabel());
402:       assertFalse(node0.isOr());
403:       assertFalse(node0.isAssignAdd());
404:       assertFalse(node0.isDelProp());
405:       assertFalse(node0.isDo());
406:       assertFalse(node0.isEmpty());
407:       assertEquals(0, node0.getSourcePosition());
408:       assertFalse(node0.isNull());
409:       assertFalse(node0.isExprResult());
410:       assertEquals(0, node0.getCharno());
411:       assertFalse(node0.hasOneChild());
412:       assertFalse(node0.isAssign());
413:       assertFalse(node0.isLabelName());
414:       assertFalse(node0.isWith());
415:       assertFalse(node0.hasChildren());
416:       assertFalse(node0.isGetElem());
417:       assertFalse(node0.isCast());
418:       assertFalse(node0.isDec());
419:       assertFalse(node0.isTypeOf());
420:       assertFalse(node0.isGetProp());
421:       assertFalse(node0.isReturn());
422:       assertFalse(node0.isThis());
423:       assertFalse(node0.isAnd());
424:       assertFalse(node0.isNot());
425:       assertFalse(node0.isScript());
426:       assertFalse(node0.isObjectLit());
427:       assertFalse(node0.isHook());
428:       assertFalse(node0.isBlock());
429:       assertFalse(node0.isInc());
430:       assertEquals(39, node0.getType());
431:       assertFalse(node0.isThrow());
432:       assertFalse(node0.hasMoreThanOneChild());
433:       assertFalse(node0.isContinue());
434:       assertFalse(node0.isFalse());
435:       assertFalse(node0.isInstanceOf());
436:       assertFalse(node0.isNE());
437:       assertFalse(node0.isSetterDef());
438:       assertFalse(node0.isIf());
439:       assertFalse(node0.isIn());
440:       
441:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
442:       assertNotNull(node_SideEffectFlags0);
443:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
444:       assertEquals(0, node_SideEffectFlags0.valueOf());
445:       
446:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
447:       assertNotNull(node_SideEffectFlags1);
448:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
449:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
450:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
451:       assertEquals(0, node_SideEffectFlags0.valueOf());
452:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
453:       assertEquals(0, node_SideEffectFlags1.valueOf());
454:       
455:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
456:       assertNotNull(node_SideEffectFlags2);
457:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
458:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
459:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
460:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
461:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
462:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
463:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
464:       assertEquals(0, node_SideEffectFlags0.valueOf());
465:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
466:       assertEquals(0, node_SideEffectFlags1.valueOf());
467:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
468:       assertEquals(0, node_SideEffectFlags2.valueOf());
469:       
470:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
471:       assertNotNull(node_SideEffectFlags3);
472:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
473:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
474:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
475:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
476:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
477:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
478:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
479:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
480:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
481:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
482:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
483:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
484:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
485:       assertEquals(0, node_SideEffectFlags0.valueOf());
486:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
487:       assertEquals(0, node_SideEffectFlags1.valueOf());
488:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
489:       assertEquals(0, node_SideEffectFlags2.valueOf());
490:       assertEquals(0, node_SideEffectFlags3.valueOf());
491:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
492:       
493:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setThrows();
494:       assertNotNull(node_SideEffectFlags4);
495:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
496:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
497:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
498:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
499:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
500:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
501:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
502:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
503:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
504:       assertEquals(0, node_SideEffectFlags0.valueOf());
505:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
506:       assertEquals(0, node_SideEffectFlags4.valueOf());
507:       
508:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
509:       assertNotNull(node_SideEffectFlags5);
510:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
511:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
512:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
513:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
514:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
515:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
516:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
517:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
518:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
519:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
520:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
521:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
522:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
523:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
524:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
525:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
526:       assertEquals(0, node_SideEffectFlags0.valueOf());
527:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
528:       assertEquals(0, node_SideEffectFlags4.valueOf());
529:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
530:       assertEquals(0, node_SideEffectFlags5.valueOf());
531:       
532:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setThrows();
533:       assertNotNull(node_SideEffectFlags6);
534:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
535:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
536:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
537:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
538:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
539:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
540:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
541:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
542:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
543:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
544:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
545:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
546:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
547:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
548:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
549:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
550:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
551:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
552:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
553:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
554:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
555:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
556:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
557:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
558:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
559:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
560:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
561:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
562:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
563:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
564:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
565:       assertEquals(0, node_SideEffectFlags0.valueOf());
566:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
567:       assertEquals(0, node_SideEffectFlags1.valueOf());
568:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
569:       assertEquals(0, node_SideEffectFlags2.valueOf());
570:       assertEquals(0, node_SideEffectFlags3.valueOf());
571:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
572:       assertEquals(0, node_SideEffectFlags6.valueOf());
573:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
574:       
575:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setMutatesGlobalState();
576:       assertNotNull(node_SideEffectFlags7);
577:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
578:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
579:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
580:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
581:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
582:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
583:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
584:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
585:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
586:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
587:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
588:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
589:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
590:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
591:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
592:       assertEquals(0, node_SideEffectFlags0.valueOf());
593:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
594:       assertEquals(0, node_SideEffectFlags7.valueOf());
595:       
596:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags4.setMutatesArguments();
597:       assertNotNull(node_SideEffectFlags8);
598:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
599:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
600:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
601:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
602:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
603:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
604:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
605:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
606:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
607:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
608:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
609:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
610:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
611:       assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
612:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
613:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
614:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
615:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
616:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
617:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
618:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
619:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
620:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
621:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
622:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
623:       assertEquals(0, node_SideEffectFlags0.valueOf());
624:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
625:       assertEquals(0, node_SideEffectFlags4.valueOf());
626:       assertEquals(0, node_SideEffectFlags8.valueOf());
627:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
628:       
629:       String string1 = node0.toStringTree();
630:       assertNotNull(string1);
631:       assertEquals(12, Node.COLUMN_BITS);
632:       assertEquals(46, Node.IS_NAMESPACE);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(51, Node.STATIC_SOURCE_FILE);
635:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
636:       assertEquals(15, Node.NO_SIDE_EFFECTS);
637:       assertEquals(47, Node.IS_DISPATCHER);
638:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
639:       assertEquals(57, Node.LAST_PROP);
640:       assertEquals(1, Node.DECR_FLAG);
641:       assertEquals(32, Node.INCRDECR_PROP);
642:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
643:       assertEquals(57, Node.REFLECTED_OBJECT);
644:       assertEquals(29, Node.JSDOC_INFO_PROP);
645:       assertEquals(52, Node.LENGTH);
646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
647:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
648:       assertEquals(37, Node.OPT_ARG_NAME);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(56, Node.CHANGE_TIME);
651:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
652:       assertEquals(48, Node.DIRECTIVES);
653:       assertEquals(49, Node.DIRECT_EVAL);
654:       assertEquals(55, Node.INFERRED_FUNCTION);
655:       assertEquals(4095, Node.COLUMN_MASK);
656:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
658:       assertEquals(8, Node.FLAG_NO_THROWS);
659:       assertEquals(39, Node.EMPTY_BLOCK);
660:       assertEquals(53, Node.INPUT_ID);
661:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
662:       assertEquals(40, Node.ORIGINALNAME_PROP);
663:       assertEquals(2, Node.POST_FLAG);
664:       assertEquals(50, Node.FREE_CALL);
665:       assertEquals(43, Node.IS_CONSTANT_NAME);
666:       assertEquals(54, Node.SLASH_V);
667:       assertFalse(string1.equals((Object)string0));
668:       assertFalse(node0.isTry());
669:       assertFalse(node0.isTrue());
670:       assertFalse(node0.isArrayLit());
671:       assertFalse(node0.isDefaultCase());
672:       assertFalse(node0.isVoid());
673:       assertFalse(node0.isFor());
674:       assertFalse(node0.isCatch());
675:       assertEquals(0, node0.getChildCount());
676:       assertFalse(node0.isFunction());
677:       assertFalse(node0.isRegExp());
678:       assertTrue(node0.isNumber());
679:       assertEquals(0, node0.getLineno());
680:       assertFalse(node0.isParamList());
681:       assertFalse(node0.isString());
682:       assertFalse(node0.isCase());
683:       assertFalse(node0.isStringKey());
684:       assertFalse(node0.isDebugger());
685:       assertFalse(node0.isGetterDef());
686:       assertFalse(node0.isNew());
687:       assertFalse(node0.isAdd());
688:       assertFalse(node0.isVar());
689:       assertFalse(node0.isSwitch());
690:       assertFalse(node0.isName());
691:       assertFalse(node0.isWhile());
692:       assertFalse(node0.isBreak());
693:       assertFalse(node0.isCall());
694:       assertFalse(node0.isComma());
695:       assertFalse(node0.isLabel());
696:       assertFalse(node0.isOr());
697:       assertFalse(node0.isAssignAdd());
698:       assertFalse(node0.isDelProp());
699:       assertFalse(node0.isDo());
700:       assertFalse(node0.isEmpty());
701:       assertEquals(0, node0.getSourcePosition());
702:       assertFalse(node0.isNull());
703:       assertFalse(node0.isExprResult());
704:       assertEquals(0, node0.getCharno());
705:       assertFalse(node0.hasOneChild());
706:       assertFalse(node0.isAssign());
707:       assertFalse(node0.isLabelName());
708:       assertFalse(node0.isWith());
709:       assertFalse(node0.hasChildren());
710:       assertFalse(node0.isGetElem());
711:       assertFalse(node0.isCast());
712:       assertFalse(node0.isDec());
713:       assertFalse(node0.isTypeOf());
714:       assertFalse(node0.isGetProp());
715:       assertFalse(node0.isReturn());
716:       assertFalse(node0.isThis());
717:       assertFalse(node0.isAnd());
718:       assertFalse(node0.isNot());
719:       assertFalse(node0.isScript());
720:       assertFalse(node0.isObjectLit());
721:       assertFalse(node0.isHook());
722:       assertFalse(node0.isBlock());
723:       assertFalse(node0.isInc());
724:       assertEquals(39, node0.getType());
725:       assertFalse(node0.isThrow());
726:       assertFalse(node0.hasMoreThanOneChild());
727:       assertFalse(node0.isContinue());
728:       assertFalse(node0.isFalse());
729:       assertFalse(node0.isInstanceOf());
730:       assertFalse(node0.isNE());
731:       assertFalse(node0.isSetterDef());
732:       assertFalse(node0.isIf());
733:       assertFalse(node0.isIn());
734:       
735:       Node node1 = Node.newString("NUMBER 1898.08877 0 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005]\n", 334, (-788));
736:       assertNotNull(node1);
737:       assertEquals(52, Node.LENGTH);
738:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
739:       assertEquals(54, Node.SLASH_V);
740:       assertEquals(57, Node.REFLECTED_OBJECT);
741:       assertEquals(57, Node.LAST_PROP);
742:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
743:       assertEquals(50, Node.FREE_CALL);
744:       assertEquals(15, Node.NO_SIDE_EFFECTS);
745:       assertEquals(1, Node.DECR_FLAG);
746:       assertEquals(8, Node.FLAG_NO_THROWS);
747:       assertEquals(39, Node.EMPTY_BLOCK);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
750:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
751:       assertEquals(30, Node.VAR_ARGS_NAME);
752:       assertEquals(47, Node.IS_DISPATCHER);
753:       assertEquals(2, Node.POST_FLAG);
754:       assertEquals(40, Node.ORIGINALNAME_PROP);
755:       assertEquals(53, Node.INPUT_ID);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(43, Node.IS_CONSTANT_NAME);
758:       assertEquals(29, Node.JSDOC_INFO_PROP);
759:       assertEquals(36, Node.QUOTED_PROP);
760:       assertEquals(55, Node.INFERRED_FUNCTION);
761:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
762:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
763:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
764:       assertEquals(32, Node.INCRDECR_PROP);
765:       assertEquals(48, Node.DIRECTIVES);
766:       assertEquals(37, Node.OPT_ARG_NAME);
767:       assertEquals(12, Node.COLUMN_BITS);
768:       assertEquals(56, Node.CHANGE_TIME);
769:       assertEquals(49, Node.DIRECT_EVAL);
770:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
771:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
772:       assertEquals(4095, Node.COLUMN_MASK);
773:       assertFalse(node1.equals((Object)node0));
774:       assertFalse(node1.isNE());
775:       assertFalse(node1.isDelProp());
776:       assertFalse(node1.isGetterDef());
777:       assertFalse(node1.isEmpty());
778:       assertFalse(node1.isIn());
779:       assertFalse(node1.isCase());
780:       assertFalse(node1.isFor());
781:       assertFalse(node1.isTry());
782:       assertFalse(node1.isRegExp());
783:       assertFalse(node1.isTrue());
784:       assertFalse(node1.isInc());
785:       assertFalse(node1.isVoid());
786:       assertFalse(node1.isCatch());
787:       assertFalse(node1.isIf());
788:       assertFalse(node1.isThis());
789:       assertFalse(node1.isNull());
790:       assertFalse(node1.isInstanceOf());
791:       assertFalse(node1.isVar());
792:       assertFalse(node1.isHook());
793:       assertEquals(0, node1.getChildCount());
794:       assertFalse(node1.isBlock());
795:       assertTrue(node1.isString());
796:       assertFalse(node1.isDefaultCase());
797:       assertFalse(node1.isScript());
798:       assertFalse(node1.isSwitch());
799:       assertEquals((-1), node1.getCharno());
800:       assertFalse(node1.isArrayLit());
801:       assertFalse(node1.isLabelName());
802:       assertFalse(node1.isStringKey());
803:       assertFalse(node1.isParamList());
804:       assertFalse(node1.isNumber());
805:       assertFalse(node1.isTypeOf());
806:       assertFalse(node1.hasChildren());
807:       assertFalse(node1.isDec());
808:       assertEquals((-1), node1.getSourcePosition());
809:       assertFalse(node1.isAssign());
810:       assertFalse(node1.isOr());
811:       assertFalse(node1.isGetElem());
812:       assertFalse(node1.hasMoreThanOneChild());
813:       assertFalse(node1.hasOneChild());
814:       assertFalse(node1.isLabel());
815:       assertFalse(node1.isDo());
816:       assertFalse(node1.isAssignAdd());
817:       assertFalse(node1.isReturn());
818:       assertFalse(node1.isWhile());
819:       assertFalse(node1.isExprResult());
820:       assertFalse(node1.isNew());
821:       assertFalse(node1.isAdd());
822:       assertFalse(node1.isWith());
823:       assertFalse(node1.isCall());
824:       assertEquals((-1), node1.getLineno());
825:       assertFalse(node1.isName());
826:       assertFalse(node1.isSetterDef());
827:       assertFalse(node1.isGetProp());
828:       assertFalse(node1.isBreak());
829:       assertFalse(node1.isComma());
830:       assertFalse(node1.isFalse());
831:       assertEquals(40, node1.getType());
832:       assertFalse(node1.isThrow());
833:       assertFalse(node1.isFunction());
834:       assertFalse(node1.isDebugger());
835:       assertFalse(node1.isNot());
836:       assertFalse(node1.isContinue());
837:       assertFalse(node1.isCast());
838:       assertFalse(node1.isObjectLit());
839:       assertFalse(node1.isAnd());
840:       
841:       String string2 = node1.getSourceFileName();
842:       assertNull(string2);
843:       assertEquals(52, Node.LENGTH);
844:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
845:       assertEquals(54, Node.SLASH_V);
846:       assertEquals(57, Node.REFLECTED_OBJECT);
847:       assertEquals(57, Node.LAST_PROP);
848:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
849:       assertEquals(50, Node.FREE_CALL);
850:       assertEquals(15, Node.NO_SIDE_EFFECTS);
851:       assertEquals(1, Node.DECR_FLAG);
852:       assertEquals(8, Node.FLAG_NO_THROWS);
853:       assertEquals(39, Node.EMPTY_BLOCK);
854:       assertEquals(46, Node.IS_NAMESPACE);
855:       assertEquals(51, Node.STATIC_SOURCE_FILE);
856:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
857:       assertEquals(30, Node.VAR_ARGS_NAME);
858:       assertEquals(47, Node.IS_DISPATCHER);
859:       assertEquals(2, Node.POST_FLAG);
860:       assertEquals(40, Node.ORIGINALNAME_PROP);
861:       assertEquals(53, Node.INPUT_ID);
862:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
863:       assertEquals(43, Node.IS_CONSTANT_NAME);
864:       assertEquals(29, Node.JSDOC_INFO_PROP);
865:       assertEquals(36, Node.QUOTED_PROP);
866:       assertEquals(55, Node.INFERRED_FUNCTION);
867:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
868:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
869:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
870:       assertEquals(32, Node.INCRDECR_PROP);
871:       assertEquals(48, Node.DIRECTIVES);
872:       assertEquals(37, Node.OPT_ARG_NAME);
873:       assertEquals(12, Node.COLUMN_BITS);
874:       assertEquals(56, Node.CHANGE_TIME);
875:       assertEquals(49, Node.DIRECT_EVAL);
876:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
877:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
878:       assertEquals(4095, Node.COLUMN_MASK);
879:       assertFalse(node1.equals((Object)node0));
880:       assertFalse(node1.isNE());
881:       assertFalse(node1.isDelProp());
882:       assertFalse(node1.isGetterDef());
883:       assertFalse(node1.isEmpty());
884:       assertFalse(node1.isIn());
885:       assertFalse(node1.isCase());
886:       assertFalse(node1.isFor());
887:       assertFalse(node1.isTry());
888:       assertFalse(node1.isRegExp());
889:       assertFalse(node1.isTrue());
890:       assertFalse(node1.isInc());
891:       assertFalse(node1.isVoid());
892:       assertFalse(node1.isCatch());
893:       assertFalse(node1.isIf());
894:       assertFalse(node1.isThis());
895:       assertFalse(node1.isNull());
896:       assertFalse(node1.isInstanceOf());
897:       assertFalse(node1.isVar());
898:       assertFalse(node1.isHook());
899:       assertEquals(0, node1.getChildCount());
900:       assertFalse(node1.isBlock());
901:       assertTrue(node1.isString());
902:       assertFalse(node1.isDefaultCase());
903:       assertFalse(node1.isScript());
904:       assertFalse(node1.isSwitch());
905:       assertEquals((-1), node1.getCharno());
906:       assertFalse(node1.isArrayLit());
907:       assertFalse(node1.isLabelName());
908:       assertFalse(node1.isStringKey());
909:       assertFalse(node1.isParamList());
910:       assertFalse(node1.isNumber());
911:       assertFalse(node1.isTypeOf());
912:       assertFalse(node1.hasChildren());
913:       assertFalse(node1.isDec());
914:       assertEquals((-1), node1.getSourcePosition());
915:       assertFalse(node1.isAssign());
916:       assertFalse(node1.isOr());
917:       assertFalse(node1.isGetElem());
918:       assertFalse(node1.hasMoreThanOneChild());
919:       assertFalse(node1.hasOneChild());
920:       assertFalse(node1.isLabel());
921:       assertFalse(node1.isDo());
922:       assertFalse(node1.isAssignAdd());
923:       assertFalse(node1.isReturn());
924:       assertFalse(node1.isWhile());
925:       assertFalse(node1.isExprResult());
926:       assertFalse(node1.isNew());
927:       assertFalse(node1.isAdd());
928:       assertFalse(node1.isWith());
929:       assertFalse(node1.isCall());
930:       assertEquals((-1), node1.getLineno());
931:       assertFalse(node1.isName());
932:       assertFalse(node1.isSetterDef());
933:       assertFalse(node1.isGetProp());
934:       assertFalse(node1.isBreak());
935:       assertFalse(node1.isComma());
936:       assertFalse(node1.isFalse());
937:       assertEquals(40, node1.getType());
938:       assertFalse(node1.isThrow());
939:       assertFalse(node1.isFunction());
940:       assertFalse(node1.isDebugger());
941:       assertFalse(node1.isNot());
942:       assertFalse(node1.isContinue());
943:       assertFalse(node1.isCast());
944:       assertFalse(node1.isObjectLit());
945:       assertFalse(node1.isAnd());
946:       
947:       Node node2 = new Node(15);
948:       assertNotNull(node2);
949:       assertEquals(2, Node.POST_FLAG);
950:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
951:       assertEquals(37, Node.OPT_ARG_NAME);
952:       assertEquals(56, Node.CHANGE_TIME);
953:       assertEquals(47, Node.IS_DISPATCHER);
954:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
955:       assertEquals(51, Node.STATIC_SOURCE_FILE);
956:       assertEquals(46, Node.IS_NAMESPACE);
957:       assertEquals(49, Node.DIRECT_EVAL);
958:       assertEquals(43, Node.IS_CONSTANT_NAME);
959:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
960:       assertEquals(54, Node.SLASH_V);
961:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
962:       assertEquals(12, Node.COLUMN_BITS);
963:       assertEquals(1, Node.DECR_FLAG);
964:       assertEquals(32, Node.INCRDECR_PROP);
965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
966:       assertEquals(8, Node.FLAG_NO_THROWS);
967:       assertEquals(39, Node.EMPTY_BLOCK);
968:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
969:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
970:       assertEquals(50, Node.FREE_CALL);
971:       assertEquals(4095, Node.COLUMN_MASK);
972:       assertEquals(57, Node.REFLECTED_OBJECT);
973:       assertEquals(40, Node.ORIGINALNAME_PROP);
974:       assertEquals(48, Node.DIRECTIVES);
975:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
976:       assertEquals(36, Node.QUOTED_PROP);
977:       assertEquals(15, Node.NO_SIDE_EFFECTS);
978:       assertEquals(53, Node.INPUT_ID);
979:       assertEquals(30, Node.VAR_ARGS_NAME);
980:       assertEquals(52, Node.LENGTH);
981:       assertEquals(55, Node.INFERRED_FUNCTION);
982:       assertEquals(29, Node.JSDOC_INFO_PROP);
983:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
984:       assertEquals(57, Node.LAST_PROP);
985:       assertFalse(node2.equals((Object)node0));
986:       assertFalse(node2.equals((Object)node1));
987:       assertFalse(node2.isDefaultCase());
988:       assertFalse(node2.isVoid());
989:       assertFalse(node2.isTry());
990:       assertEquals(15, node2.getType());
991:       assertFalse(node2.isTrue());
992:       assertFalse(node2.isSetterDef());
993:       assertFalse(node2.isDebugger());
994:       assertFalse(node2.isEmpty());
995:       assertFalse(node2.isStringKey());
996:       assertFalse(node2.isVar());
997:       assertFalse(node2.isParamList());
998:       assertFalse(node2.isArrayLit());
999:       assertEquals(0, node2.getChildCount());
1000:       assertFalse(node2.isFunction());
1001:       assertFalse(node2.isDo());
1002:       assertFalse(node2.isWhile());
1003:       assertFalse(node2.isString());
1004:       assertFalse(node2.isAdd());
1005:       assertFalse(node2.isOr());
1006:       assertFalse(node2.isNew());
1007:       assertEquals((-1), node2.getSourcePosition());
1008:       assertFalse(node2.isAssign());
1009:       assertFalse(node2.hasChildren());
1010:       assertFalse(node2.isBreak());
1011:       assertFalse(node2.isGetElem());
1012:       assertFalse(node2.isCall());
1013:       assertFalse(node2.isNull());
1014:       assertFalse(node2.isDelProp());
1015:       assertFalse(node2.isName());
1016:       assertFalse(node2.isExprResult());
1017:       assertFalse(node2.isReturn());
1018:       assertFalse(node2.isDec());
1019:       assertFalse(node2.isComma());
1020:       assertFalse(node2.isTypeOf());
1021:       assertFalse(node2.isNot());
1022:       assertFalse(node2.isWith());
1023:       assertFalse(node2.isAnd());
1024:       assertFalse(node2.isGetProp());
1025:       assertFalse(node2.isScript());
1026:       assertFalse(node2.isObjectLit());
1027:       assertFalse(node2.isLabelName());
1028:       assertFalse(node2.isThrow());
1029:       assertFalse(node2.isLabel());
1030:       assertFalse(node2.isAssignAdd());
1031:       assertFalse(node2.isCast());
1032:       assertFalse(node2.isContinue());
1033:       assertFalse(node2.isFalse());
1034:       assertFalse(node2.isCase());
1035:       assertFalse(node2.isSwitch());
1036:       assertEquals((-1), node2.getCharno());
1037:       assertFalse(node2.isInc());
1038:       assertFalse(node2.isGetterDef());
1039:       assertFalse(node2.isIn());
1040:       assertFalse(node2.isNumber());
1041:       assertFalse(node2.isFor());
1042:       assertFalse(node2.isNE());
1043:       assertFalse(node2.hasOneChild());
1044:       assertFalse(node2.isIf());
1045:       assertEquals((-1), node2.getLineno());
1046:       assertFalse(node2.isThis());
1047:       assertFalse(node2.isBlock());
1048:       assertFalse(node2.isHook());
1049:       assertFalse(node2.hasMoreThanOneChild());
1050:       assertFalse(node2.isCatch());
1051:       assertFalse(node2.isInstanceOf());
1052:       assertFalse(node2.isRegExp());
1053:       
1054:       Iterable<Node> iterable0 = new Vector<Node>();
1055:       assertNotNull(iterable0);
1056:       assertFalse(iterable0.contains(node2));
1057:       
1058:       boolean boolean0 = node2.isCall();
1059:       assertFalse(boolean0);
1060:       assertEquals(2, Node.POST_FLAG);
1061:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1062:       assertEquals(37, Node.OPT_ARG_NAME);
1063:       assertEquals(56, Node.CHANGE_TIME);
1064:       assertEquals(47, Node.IS_DISPATCHER);
1065:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1066:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1067:       assertEquals(46, Node.IS_NAMESPACE);
1068:       assertEquals(49, Node.DIRECT_EVAL);
1069:       assertEquals(43, Node.IS_CONSTANT_NAME);
1070:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1071:       assertEquals(54, Node.SLASH_V);
1072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1073:       assertEquals(12, Node.COLUMN_BITS);
1074:       assertEquals(1, Node.DECR_FLAG);
1075:       assertEquals(32, Node.INCRDECR_PROP);
1076:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1077:       assertEquals(8, Node.FLAG_NO_THROWS);
1078:       assertEquals(39, Node.EMPTY_BLOCK);
1079:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1080:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1081:       assertEquals(50, Node.FREE_CALL);
1082:       assertEquals(4095, Node.COLUMN_MASK);
1083:       assertEquals(57, Node.REFLECTED_OBJECT);
1084:       assertEquals(40, Node.ORIGINALNAME_PROP);
1085:       assertEquals(48, Node.DIRECTIVES);
1086:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1087:       assertEquals(36, Node.QUOTED_PROP);
1088:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1089:       assertEquals(53, Node.INPUT_ID);
1090:       assertEquals(30, Node.VAR_ARGS_NAME);
1091:       assertEquals(52, Node.LENGTH);
1092:       assertEquals(55, Node.INFERRED_FUNCTION);
1093:       assertEquals(29, Node.JSDOC_INFO_PROP);
1094:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1095:       assertEquals(57, Node.LAST_PROP);
1096:       assertFalse(node2.equals((Object)node0));
1097:       assertFalse(node2.equals((Object)node1));
1098:       assertFalse(node2.isDefaultCase());
1099:       assertFalse(node2.isVoid());
1100:       assertFalse(node2.isTry());
1101:       assertEquals(15, node2.getType());
1102:       assertFalse(node2.isTrue());
1103:       assertFalse(node2.isSetterDef());
1104:       assertFalse(node2.isDebugger());
1105:       assertFalse(node2.isEmpty());
1106:       assertFalse(node2.isStringKey());
1107:       assertFalse(node2.isVar());
1108:       assertFalse(node2.isParamList());
1109:       assertFalse(node2.isArrayLit());
1110:       assertEquals(0, node2.getChildCount());
1111:       assertFalse(node2.isFunction());
1112:       assertFalse(node2.isDo());
1113:       assertFalse(node2.isWhile());
1114:       assertFalse(node2.isString());
1115:       assertFalse(node2.isAdd());
1116:       assertFalse(node2.isOr());
1117:       assertFalse(node2.isNew());
1118:       assertEquals((-1), node2.getSourcePosition());
1119:       assertFalse(node2.isAssign());
1120:       assertFalse(node2.hasChildren());
1121:       assertFalse(node2.isBreak());
1122:       assertFalse(node2.isGetElem());
1123:       assertFalse(node2.isCall());
1124:       assertFalse(node2.isNull());
1125:       assertFalse(node2.isDelProp());
1126:       assertFalse(node2.isName());
1127:       assertFalse(node2.isExprResult());
1128:       assertFalse(node2.isReturn());
1129:       assertFalse(node2.isDec());
1130:       assertFalse(node2.isComma());
1131:       assertFalse(node2.isTypeOf());
1132:       assertFalse(node2.isNot());
1133:       assertFalse(node2.isWith());
1134:       assertFalse(node2.isAnd());
1135:       assertFalse(node2.isGetProp());
1136:       assertFalse(node2.isScript());
1137:       assertFalse(node2.isObjectLit());
1138:       assertFalse(node2.isLabelName());
1139:       assertFalse(node2.isThrow());
1140:       assertFalse(node2.isLabel());
1141:       assertFalse(node2.isAssignAdd());
1142:       assertFalse(node2.isCast());
1143:       assertFalse(node2.isContinue());
1144:       assertFalse(node2.isFalse());
1145:       assertFalse(node2.isCase());
1146:       assertFalse(node2.isSwitch());
1147:       assertEquals((-1), node2.getCharno());
1148:       assertFalse(node2.isInc());
1149:       assertFalse(node2.isGetterDef());
1150:       assertFalse(node2.isIn());
1151:       assertFalse(node2.isNumber());
1152:       assertFalse(node2.isFor());
1153:       assertFalse(node2.isNE());
1154:       assertFalse(node2.hasOneChild());
1155:       assertFalse(node2.isIf());
1156:       assertEquals((-1), node2.getLineno());
1157:       assertFalse(node2.isThis());
1158:       assertFalse(node2.isBlock());
1159:       assertFalse(node2.isHook());
1160:       assertFalse(node2.hasMoreThanOneChild());
1161:       assertFalse(node2.isCatch());
1162:       assertFalse(node2.isInstanceOf());
1163:       assertFalse(node2.isRegExp());
1164:   }
1165: }
RegularFileObject[/tmp/EvoSuite_388_1628159314829/com/google/javascript/rhino/Node_388_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_388_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_388_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_388_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:35.035 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1898.08877, 0, 0);
assertNotNull(node0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());

String string0 = node0.toStringTree();
assertEquals("NUMBER 1898.08877 0\n", string0);
assertNotNull(string0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());

node_FileLevelJsDocBuilder0.append("NUMBER 1898.08877 0\n");
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setThrows();
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
assertNotNull(node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setThrows();
assertNotNull(node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setMutatesGlobalState();
assertNotNull(node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags4.setMutatesArguments();
assertNotNull(node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertTrue(node_SideEffectFlags8.areAllFlagsSet());

String string1 = node0.toStringTree();
assertNotNull(string1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(string1.equals((Object)string0));
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());

Node node1 = Node.newString("NUMBER 1898.08877 0 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005]\n", 334, (-788));
assertNotNull(node1);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isWith());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());

String string2 = node1.getSourceFileName();
assertNull(string2);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isWith());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());

Node node2 = new Node(15);
assertNotNull(node2);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertEquals(15, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());

Iterable<Node> iterable0 = new Vector<Node>();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node2));

boolean boolean0 = node2.isCall();
assertFalse(boolean0);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertEquals(15, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());


[MASTER] 10:28:35.075 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_389_1628159315036/com/google/javascript/rhino/Node_389_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_389_1628159315036/com/google/javascript/rhino/Node_389_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:35.075 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:35.075 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:35.075 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 438
[MASTER] 10:28:35.076 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_389_1628159315036/com/google/javascript/rhino/Node_389_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_389_tmp__ESTest extends Node_389_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(544, "");
21:       assertNotNull(node0);
22:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
23:       assertEquals(4095, Node.COLUMN_MASK);
24:       assertEquals(55, Node.INFERRED_FUNCTION);
25:       assertEquals(36, Node.QUOTED_PROP);
26:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
27:       assertEquals(48, Node.DIRECTIVES);
28:       assertEquals(43, Node.IS_CONSTANT_NAME);
29:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
30:       assertEquals(40, Node.ORIGINALNAME_PROP);
31:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
32:       assertEquals(29, Node.JSDOC_INFO_PROP);
33:       assertEquals(52, Node.LENGTH);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(57, Node.REFLECTED_OBJECT);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(8, Node.FLAG_NO_THROWS);
38:       assertEquals(39, Node.EMPTY_BLOCK);
39:       assertEquals(53, Node.INPUT_ID);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(15, Node.NO_SIDE_EFFECTS);
43:       assertEquals(12, Node.COLUMN_BITS);
44:       assertEquals(46, Node.IS_NAMESPACE);
45:       assertEquals(30, Node.VAR_ARGS_NAME);
46:       assertEquals(51, Node.STATIC_SOURCE_FILE);
47:       assertEquals(37, Node.OPT_ARG_NAME);
48:       assertEquals(54, Node.SLASH_V);
49:       assertEquals(56, Node.CHANGE_TIME);
50:       assertEquals(49, Node.DIRECT_EVAL);
51:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertFalse(node0.isHook());
59:       assertFalse(node0.isInc());
60:       assertFalse(node0.isSwitch());
61:       assertFalse(node0.isString());
62:       assertEquals((-1), node0.getCharno());
63:       assertFalse(node0.isInstanceOf());
64:       assertFalse(node0.isGetProp());
65:       assertFalse(node0.isCase());
66:       assertFalse(node0.isWith());
67:       assertFalse(node0.isBreak());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isThis());
70:       assertFalse(node0.isComma());
71:       assertEquals(544, node0.getType());
72:       assertFalse(node0.isCast());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isObjectLit());
76:       assertFalse(node0.isDebugger());
77:       assertEquals((-1), node0.getSourcePosition());
78:       assertFalse(node0.isNot());
79:       assertFalse(node0.isIn());
80:       assertFalse(node0.isAnd());
81:       assertFalse(node0.isSetterDef());
82:       assertFalse(node0.isThrow());
83:       assertFalse(node0.isFunction());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isFalse());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isAdd());
88:       assertFalse(node0.isVar());
89:       assertFalse(node0.isCall());
90:       assertFalse(node0.isName());
91:       assertFalse(node0.isNew());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isStringKey());
94:       assertEquals((-1), node0.getLineno());
95:       assertFalse(node0.isReturn());
96:       assertFalse(node0.isCatch());
97:       assertFalse(node0.isWhile());
98:       assertFalse(node0.hasChildren());
99:       assertFalse(node0.isGetElem());
100:       assertFalse(node0.hasMoreThanOneChild());
101:       assertFalse(node0.isTypeOf());
102:       assertFalse(node0.isRegExp());
103:       assertFalse(node0.isAssign());
104:       assertFalse(node0.isDec());
105:       assertFalse(node0.isExprResult());
106:       assertFalse(node0.isVoid());
107:       assertFalse(node0.isArrayLit());
108:       assertFalse(node0.hasOneChild());
109:       assertFalse(node0.isLabelName());
110:       assertFalse(node0.isTry());
111:       assertFalse(node0.isDelProp());
112:       assertFalse(node0.isGetterDef());
113:       assertFalse(node0.isNumber());
114:       assertFalse(node0.isScript());
115:       assertFalse(node0.isEmpty());
116:       assertFalse(node0.isTrue());
117:       assertFalse(node0.isOr());
118:       assertFalse(node0.isAssignAdd());
119:       assertFalse(node0.isParamList());
120:       assertFalse(node0.isDo());
121:       assertFalse(node0.isDefaultCase());
122:       assertFalse(node0.isLabel());
123:       assertEquals(0, node0.getChildCount());
124:       
125:       boolean boolean0 = node0.isReturn();
126:       assertFalse(boolean0);
127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertEquals(55, Node.INFERRED_FUNCTION);
130:       assertEquals(36, Node.QUOTED_PROP);
131:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(43, Node.IS_CONSTANT_NAME);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(40, Node.ORIGINALNAME_PROP);
136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
137:       assertEquals(29, Node.JSDOC_INFO_PROP);
138:       assertEquals(52, Node.LENGTH);
139:       assertEquals(47, Node.IS_DISPATCHER);
140:       assertEquals(57, Node.REFLECTED_OBJECT);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(8, Node.FLAG_NO_THROWS);
143:       assertEquals(39, Node.EMPTY_BLOCK);
144:       assertEquals(53, Node.INPUT_ID);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(15, Node.NO_SIDE_EFFECTS);
148:       assertEquals(12, Node.COLUMN_BITS);
149:       assertEquals(46, Node.IS_NAMESPACE);
150:       assertEquals(30, Node.VAR_ARGS_NAME);
151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(54, Node.SLASH_V);
154:       assertEquals(56, Node.CHANGE_TIME);
155:       assertEquals(49, Node.DIRECT_EVAL);
156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertFalse(node0.isHook());
164:       assertFalse(node0.isInc());
165:       assertFalse(node0.isSwitch());
166:       assertFalse(node0.isString());
167:       assertEquals((-1), node0.getCharno());
168:       assertFalse(node0.isInstanceOf());
169:       assertFalse(node0.isGetProp());
170:       assertFalse(node0.isCase());
171:       assertFalse(node0.isWith());
172:       assertFalse(node0.isBreak());
173:       assertFalse(node0.isFor());
174:       assertFalse(node0.isThis());
175:       assertFalse(node0.isComma());
176:       assertEquals(544, node0.getType());
177:       assertFalse(node0.isCast());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isNE());
180:       assertFalse(node0.isObjectLit());
181:       assertFalse(node0.isDebugger());
182:       assertEquals((-1), node0.getSourcePosition());
183:       assertFalse(node0.isNot());
184:       assertFalse(node0.isIn());
185:       assertFalse(node0.isAnd());
186:       assertFalse(node0.isSetterDef());
187:       assertFalse(node0.isThrow());
188:       assertFalse(node0.isFunction());
189:       assertFalse(node0.isContinue());
190:       assertFalse(node0.isFalse());
191:       assertFalse(node0.isBlock());
192:       assertFalse(node0.isAdd());
193:       assertFalse(node0.isVar());
194:       assertFalse(node0.isCall());
195:       assertFalse(node0.isName());
196:       assertFalse(node0.isNew());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isStringKey());
199:       assertEquals((-1), node0.getLineno());
200:       assertFalse(node0.isReturn());
201:       assertFalse(node0.isCatch());
202:       assertFalse(node0.isWhile());
203:       assertFalse(node0.hasChildren());
204:       assertFalse(node0.isGetElem());
205:       assertFalse(node0.hasMoreThanOneChild());
206:       assertFalse(node0.isTypeOf());
207:       assertFalse(node0.isRegExp());
208:       assertFalse(node0.isAssign());
209:       assertFalse(node0.isDec());
210:       assertFalse(node0.isExprResult());
211:       assertFalse(node0.isVoid());
212:       assertFalse(node0.isArrayLit());
213:       assertFalse(node0.hasOneChild());
214:       assertFalse(node0.isLabelName());
215:       assertFalse(node0.isTry());
216:       assertFalse(node0.isDelProp());
217:       assertFalse(node0.isGetterDef());
218:       assertFalse(node0.isNumber());
219:       assertFalse(node0.isScript());
220:       assertFalse(node0.isEmpty());
221:       assertFalse(node0.isTrue());
222:       assertFalse(node0.isOr());
223:       assertFalse(node0.isAssignAdd());
224:       assertFalse(node0.isParamList());
225:       assertFalse(node0.isDo());
226:       assertFalse(node0.isDefaultCase());
227:       assertFalse(node0.isLabel());
228:       assertEquals(0, node0.getChildCount());
229:       
230:       node0.putIntProp(3, (-1741));
231:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
232:       assertEquals(4095, Node.COLUMN_MASK);
233:       assertEquals(55, Node.INFERRED_FUNCTION);
234:       assertEquals(36, Node.QUOTED_PROP);
235:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
236:       assertEquals(48, Node.DIRECTIVES);
237:       assertEquals(43, Node.IS_CONSTANT_NAME);
238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
239:       assertEquals(40, Node.ORIGINALNAME_PROP);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(29, Node.JSDOC_INFO_PROP);
242:       assertEquals(52, Node.LENGTH);
243:       assertEquals(47, Node.IS_DISPATCHER);
244:       assertEquals(57, Node.REFLECTED_OBJECT);
245:       assertEquals(2, Node.POST_FLAG);
246:       assertEquals(8, Node.FLAG_NO_THROWS);
247:       assertEquals(39, Node.EMPTY_BLOCK);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
250:       assertEquals(57, Node.LAST_PROP);
251:       assertEquals(15, Node.NO_SIDE_EFFECTS);
252:       assertEquals(12, Node.COLUMN_BITS);
253:       assertEquals(46, Node.IS_NAMESPACE);
254:       assertEquals(30, Node.VAR_ARGS_NAME);
255:       assertEquals(51, Node.STATIC_SOURCE_FILE);
256:       assertEquals(37, Node.OPT_ARG_NAME);
257:       assertEquals(54, Node.SLASH_V);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(49, Node.DIRECT_EVAL);
260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(50, Node.FREE_CALL);
263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertFalse(node0.isHook());
268:       assertFalse(node0.isInc());
269:       assertFalse(node0.isSwitch());
270:       assertFalse(node0.isString());
271:       assertEquals((-1), node0.getCharno());
272:       assertFalse(node0.isInstanceOf());
273:       assertFalse(node0.isGetProp());
274:       assertFalse(node0.isCase());
275:       assertFalse(node0.isWith());
276:       assertFalse(node0.isBreak());
277:       assertFalse(node0.isFor());
278:       assertFalse(node0.isThis());
279:       assertFalse(node0.isComma());
280:       assertEquals(544, node0.getType());
281:       assertFalse(node0.isCast());
282:       assertFalse(node0.isIf());
283:       assertFalse(node0.isNE());
284:       assertFalse(node0.isObjectLit());
285:       assertFalse(node0.isDebugger());
286:       assertEquals((-1), node0.getSourcePosition());
287:       assertFalse(node0.isNot());
288:       assertFalse(node0.isIn());
289:       assertFalse(node0.isAnd());
290:       assertFalse(node0.isSetterDef());
291:       assertFalse(node0.isThrow());
292:       assertFalse(node0.isFunction());
293:       assertFalse(node0.isContinue());
294:       assertFalse(node0.isFalse());
295:       assertFalse(node0.isBlock());
296:       assertFalse(node0.isAdd());
297:       assertFalse(node0.isVar());
298:       assertFalse(node0.isCall());
299:       assertFalse(node0.isName());
300:       assertFalse(node0.isNew());
301:       assertFalse(node0.isNull());
302:       assertFalse(node0.isStringKey());
303:       assertEquals((-1), node0.getLineno());
304:       assertFalse(node0.isReturn());
305:       assertFalse(node0.isCatch());
306:       assertFalse(node0.isWhile());
307:       assertFalse(node0.hasChildren());
308:       assertFalse(node0.isGetElem());
309:       assertFalse(node0.hasMoreThanOneChild());
310:       assertFalse(node0.isTypeOf());
311:       assertFalse(node0.isRegExp());
312:       assertFalse(node0.isAssign());
313:       assertFalse(node0.isDec());
314:       assertFalse(node0.isExprResult());
315:       assertFalse(node0.isVoid());
316:       assertFalse(node0.isArrayLit());
317:       assertFalse(node0.hasOneChild());
318:       assertFalse(node0.isLabelName());
319:       assertFalse(node0.isTry());
320:       assertFalse(node0.isDelProp());
321:       assertFalse(node0.isGetterDef());
322:       assertFalse(node0.isNumber());
323:       assertFalse(node0.isScript());
324:       assertFalse(node0.isEmpty());
325:       assertFalse(node0.isTrue());
326:       assertFalse(node0.isOr());
327:       assertFalse(node0.isAssignAdd());
328:       assertFalse(node0.isParamList());
329:       assertFalse(node0.isDo());
330:       assertFalse(node0.isDefaultCase());
331:       assertFalse(node0.isLabel());
332:       assertEquals(0, node0.getChildCount());
333:       
334:       Iterable<Node> iterable0 = node0.children();
335:       assertNotNull(iterable0);
336:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
337:       assertEquals(4095, Node.COLUMN_MASK);
338:       assertEquals(55, Node.INFERRED_FUNCTION);
339:       assertEquals(36, Node.QUOTED_PROP);
340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
341:       assertEquals(48, Node.DIRECTIVES);
342:       assertEquals(43, Node.IS_CONSTANT_NAME);
343:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
344:       assertEquals(40, Node.ORIGINALNAME_PROP);
345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
346:       assertEquals(29, Node.JSDOC_INFO_PROP);
347:       assertEquals(52, Node.LENGTH);
348:       assertEquals(47, Node.IS_DISPATCHER);
349:       assertEquals(57, Node.REFLECTED_OBJECT);
350:       assertEquals(2, Node.POST_FLAG);
351:       assertEquals(8, Node.FLAG_NO_THROWS);
352:       assertEquals(39, Node.EMPTY_BLOCK);
353:       assertEquals(53, Node.INPUT_ID);
354:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
355:       assertEquals(57, Node.LAST_PROP);
356:       assertEquals(15, Node.NO_SIDE_EFFECTS);
357:       assertEquals(12, Node.COLUMN_BITS);
358:       assertEquals(46, Node.IS_NAMESPACE);
359:       assertEquals(30, Node.VAR_ARGS_NAME);
360:       assertEquals(51, Node.STATIC_SOURCE_FILE);
361:       assertEquals(37, Node.OPT_ARG_NAME);
362:       assertEquals(54, Node.SLASH_V);
363:       assertEquals(56, Node.CHANGE_TIME);
364:       assertEquals(49, Node.DIRECT_EVAL);
365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
366:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
367:       assertEquals(50, Node.FREE_CALL);
368:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
371:       assertEquals(1, Node.DECR_FLAG);
372:       assertFalse(node0.isHook());
373:       assertFalse(node0.isInc());
374:       assertFalse(node0.isSwitch());
375:       assertFalse(node0.isString());
376:       assertEquals((-1), node0.getCharno());
377:       assertFalse(node0.isInstanceOf());
378:       assertFalse(node0.isGetProp());
379:       assertFalse(node0.isCase());
380:       assertFalse(node0.isWith());
381:       assertFalse(node0.isBreak());
382:       assertFalse(node0.isFor());
383:       assertFalse(node0.isThis());
384:       assertFalse(node0.isComma());
385:       assertEquals(544, node0.getType());
386:       assertFalse(node0.isCast());
387:       assertFalse(node0.isIf());
388:       assertFalse(node0.isNE());
389:       assertFalse(node0.isObjectLit());
390:       assertFalse(node0.isDebugger());
391:       assertEquals((-1), node0.getSourcePosition());
392:       assertFalse(node0.isNot());
393:       assertFalse(node0.isIn());
394:       assertFalse(node0.isAnd());
395:       assertFalse(node0.isSetterDef());
396:       assertFalse(node0.isThrow());
397:       assertFalse(node0.isFunction());
398:       assertFalse(node0.isContinue());
399:       assertFalse(node0.isFalse());
400:       assertFalse(node0.isBlock());
401:       assertFalse(node0.isAdd());
402:       assertFalse(node0.isVar());
403:       assertFalse(node0.isCall());
404:       assertFalse(node0.isName());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isNull());
407:       assertFalse(node0.isStringKey());
408:       assertEquals((-1), node0.getLineno());
409:       assertFalse(node0.isReturn());
410:       assertFalse(node0.isCatch());
411:       assertFalse(node0.isWhile());
412:       assertFalse(node0.hasChildren());
413:       assertFalse(node0.isGetElem());
414:       assertFalse(node0.hasMoreThanOneChild());
415:       assertFalse(node0.isTypeOf());
416:       assertFalse(node0.isRegExp());
417:       assertFalse(node0.isAssign());
418:       assertFalse(node0.isDec());
419:       assertFalse(node0.isExprResult());
420:       assertFalse(node0.isVoid());
421:       assertFalse(node0.isArrayLit());
422:       assertFalse(node0.hasOneChild());
423:       assertFalse(node0.isLabelName());
424:       assertFalse(node0.isTry());
425:       assertFalse(node0.isDelProp());
426:       assertFalse(node0.isGetterDef());
427:       assertFalse(node0.isNumber());
428:       assertFalse(node0.isScript());
429:       assertFalse(node0.isEmpty());
430:       assertFalse(node0.isTrue());
431:       assertFalse(node0.isOr());
432:       assertFalse(node0.isAssignAdd());
433:       assertFalse(node0.isParamList());
434:       assertFalse(node0.isDo());
435:       assertFalse(node0.isDefaultCase());
436:       assertFalse(node0.isLabel());
437:       assertEquals(0, node0.getChildCount());
438:       assertFalse(iterable0.contains(node0));
439:       
440:       boolean boolean1 = node0.isStringKey();
441:       assertFalse(boolean1);
442:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
443:       assertEquals(4095, Node.COLUMN_MASK);
444:       assertEquals(55, Node.INFERRED_FUNCTION);
445:       assertEquals(36, Node.QUOTED_PROP);
446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
447:       assertEquals(48, Node.DIRECTIVES);
448:       assertEquals(43, Node.IS_CONSTANT_NAME);
449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
452:       assertEquals(29, Node.JSDOC_INFO_PROP);
453:       assertEquals(52, Node.LENGTH);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(57, Node.REFLECTED_OBJECT);
456:       assertEquals(2, Node.POST_FLAG);
457:       assertEquals(8, Node.FLAG_NO_THROWS);
458:       assertEquals(39, Node.EMPTY_BLOCK);
459:       assertEquals(53, Node.INPUT_ID);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(57, Node.LAST_PROP);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(12, Node.COLUMN_BITS);
464:       assertEquals(46, Node.IS_NAMESPACE);
465:       assertEquals(30, Node.VAR_ARGS_NAME);
466:       assertEquals(51, Node.STATIC_SOURCE_FILE);
467:       assertEquals(37, Node.OPT_ARG_NAME);
468:       assertEquals(54, Node.SLASH_V);
469:       assertEquals(56, Node.CHANGE_TIME);
470:       assertEquals(49, Node.DIRECT_EVAL);
471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
472:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
473:       assertEquals(50, Node.FREE_CALL);
474:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
475:       assertEquals(32, Node.INCRDECR_PROP);
476:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
477:       assertEquals(1, Node.DECR_FLAG);
478:       assertTrue(boolean1 == boolean0);
479:       assertFalse(node0.isHook());
480:       assertFalse(node0.isInc());
481:       assertFalse(node0.isSwitch());
482:       assertFalse(node0.isString());
483:       assertEquals((-1), node0.getCharno());
484:       assertFalse(node0.isInstanceOf());
485:       assertFalse(node0.isGetProp());
486:       assertFalse(node0.isCase());
487:       assertFalse(node0.isWith());
488:       assertFalse(node0.isBreak());
489:       assertFalse(node0.isFor());
490:       assertFalse(node0.isThis());
491:       assertFalse(node0.isComma());
492:       assertEquals(544, node0.getType());
493:       assertFalse(node0.isCast());
494:       assertFalse(node0.isIf());
495:       assertFalse(node0.isNE());
496:       assertFalse(node0.isObjectLit());
497:       assertFalse(node0.isDebugger());
498:       assertEquals((-1), node0.getSourcePosition());
499:       assertFalse(node0.isNot());
500:       assertFalse(node0.isIn());
501:       assertFalse(node0.isAnd());
502:       assertFalse(node0.isSetterDef());
503:       assertFalse(node0.isThrow());
504:       assertFalse(node0.isFunction());
505:       assertFalse(node0.isContinue());
506:       assertFalse(node0.isFalse());
507:       assertFalse(node0.isBlock());
508:       assertFalse(node0.isAdd());
509:       assertFalse(node0.isVar());
510:       assertFalse(node0.isCall());
511:       assertFalse(node0.isName());
512:       assertFalse(node0.isNew());
513:       assertFalse(node0.isNull());
514:       assertFalse(node0.isStringKey());
515:       assertEquals((-1), node0.getLineno());
516:       assertFalse(node0.isReturn());
517:       assertFalse(node0.isCatch());
518:       assertFalse(node0.isWhile());
519:       assertFalse(node0.hasChildren());
520:       assertFalse(node0.isGetElem());
521:       assertFalse(node0.hasMoreThanOneChild());
522:       assertFalse(node0.isTypeOf());
523:       assertFalse(node0.isRegExp());
524:       assertFalse(node0.isAssign());
525:       assertFalse(node0.isDec());
526:       assertFalse(node0.isExprResult());
527:       assertFalse(node0.isVoid());
528:       assertFalse(node0.isArrayLit());
529:       assertFalse(node0.hasOneChild());
530:       assertFalse(node0.isLabelName());
531:       assertFalse(node0.isTry());
532:       assertFalse(node0.isDelProp());
533:       assertFalse(node0.isGetterDef());
534:       assertFalse(node0.isNumber());
535:       assertFalse(node0.isScript());
536:       assertFalse(node0.isEmpty());
537:       assertFalse(node0.isTrue());
538:       assertFalse(node0.isOr());
539:       assertFalse(node0.isAssignAdd());
540:       assertFalse(node0.isParamList());
541:       assertFalse(node0.isDo());
542:       assertFalse(node0.isDefaultCase());
543:       assertFalse(node0.isLabel());
544:       assertEquals(0, node0.getChildCount());
545:       
546:       boolean boolean2 = node0.isCase();
547:       assertFalse(boolean2);
548:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
549:       assertEquals(4095, Node.COLUMN_MASK);
550:       assertEquals(55, Node.INFERRED_FUNCTION);
551:       assertEquals(36, Node.QUOTED_PROP);
552:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
553:       assertEquals(48, Node.DIRECTIVES);
554:       assertEquals(43, Node.IS_CONSTANT_NAME);
555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
556:       assertEquals(40, Node.ORIGINALNAME_PROP);
557:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
558:       assertEquals(29, Node.JSDOC_INFO_PROP);
559:       assertEquals(52, Node.LENGTH);
560:       assertEquals(47, Node.IS_DISPATCHER);
561:       assertEquals(57, Node.REFLECTED_OBJECT);
562:       assertEquals(2, Node.POST_FLAG);
563:       assertEquals(8, Node.FLAG_NO_THROWS);
564:       assertEquals(39, Node.EMPTY_BLOCK);
565:       assertEquals(53, Node.INPUT_ID);
566:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
567:       assertEquals(57, Node.LAST_PROP);
568:       assertEquals(15, Node.NO_SIDE_EFFECTS);
569:       assertEquals(12, Node.COLUMN_BITS);
570:       assertEquals(46, Node.IS_NAMESPACE);
571:       assertEquals(30, Node.VAR_ARGS_NAME);
572:       assertEquals(51, Node.STATIC_SOURCE_FILE);
573:       assertEquals(37, Node.OPT_ARG_NAME);
574:       assertEquals(54, Node.SLASH_V);
575:       assertEquals(56, Node.CHANGE_TIME);
576:       assertEquals(49, Node.DIRECT_EVAL);
577:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
579:       assertEquals(50, Node.FREE_CALL);
580:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
583:       assertEquals(1, Node.DECR_FLAG);
584:       assertTrue(boolean2 == boolean1);
585:       assertTrue(boolean2 == boolean0);
586:       assertFalse(node0.isHook());
587:       assertFalse(node0.isInc());
588:       assertFalse(node0.isSwitch());
589:       assertFalse(node0.isString());
590:       assertEquals((-1), node0.getCharno());
591:       assertFalse(node0.isInstanceOf());
592:       assertFalse(node0.isGetProp());
593:       assertFalse(node0.isCase());
594:       assertFalse(node0.isWith());
595:       assertFalse(node0.isBreak());
596:       assertFalse(node0.isFor());
597:       assertFalse(node0.isThis());
598:       assertFalse(node0.isComma());
599:       assertEquals(544, node0.getType());
600:       assertFalse(node0.isCast());
601:       assertFalse(node0.isIf());
602:       assertFalse(node0.isNE());
603:       assertFalse(node0.isObjectLit());
604:       assertFalse(node0.isDebugger());
605:       assertEquals((-1), node0.getSourcePosition());
606:       assertFalse(node0.isNot());
607:       assertFalse(node0.isIn());
608:       assertFalse(node0.isAnd());
609:       assertFalse(node0.isSetterDef());
610:       assertFalse(node0.isThrow());
611:       assertFalse(node0.isFunction());
612:       assertFalse(node0.isContinue());
613:       assertFalse(node0.isFalse());
614:       assertFalse(node0.isBlock());
615:       assertFalse(node0.isAdd());
616:       assertFalse(node0.isVar());
617:       assertFalse(node0.isCall());
618:       assertFalse(node0.isName());
619:       assertFalse(node0.isNew());
620:       assertFalse(node0.isNull());
621:       assertFalse(node0.isStringKey());
622:       assertEquals((-1), node0.getLineno());
623:       assertFalse(node0.isReturn());
624:       assertFalse(node0.isCatch());
625:       assertFalse(node0.isWhile());
626:       assertFalse(node0.hasChildren());
627:       assertFalse(node0.isGetElem());
628:       assertFalse(node0.hasMoreThanOneChild());
629:       assertFalse(node0.isTypeOf());
630:       assertFalse(node0.isRegExp());
631:       assertFalse(node0.isAssign());
632:       assertFalse(node0.isDec());
633:       assertFalse(node0.isExprResult());
634:       assertFalse(node0.isVoid());
635:       assertFalse(node0.isArrayLit());
636:       assertFalse(node0.hasOneChild());
637:       assertFalse(node0.isLabelName());
638:       assertFalse(node0.isTry());
639:       assertFalse(node0.isDelProp());
640:       assertFalse(node0.isGetterDef());
641:       assertFalse(node0.isNumber());
642:       assertFalse(node0.isScript());
643:       assertFalse(node0.isEmpty());
644:       assertFalse(node0.isTrue());
645:       assertFalse(node0.isOr());
646:       assertFalse(node0.isAssignAdd());
647:       assertFalse(node0.isParamList());
648:       assertFalse(node0.isDo());
649:       assertFalse(node0.isDefaultCase());
650:       assertFalse(node0.isLabel());
651:       assertEquals(0, node0.getChildCount());
652:   }
653: }
RegularFileObject[/tmp/EvoSuite_389_1628159315036/com/google/javascript/rhino/Node_389_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_389_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_389_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_389_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:35.084 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(544, "");
assertNotNull(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(544, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

boolean boolean0 = node0.isReturn();
assertFalse(boolean0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(544, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

node0.putIntProp(3, (-1741));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(544, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(544, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.isStringKey();
assertFalse(boolean1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(544, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

boolean boolean2 = node0.isCase();
assertFalse(boolean2);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(544, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());


[MASTER] 10:28:35.305 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_395_1628159315271/com/google/javascript/rhino/Node_395_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_395_1628159315271/com/google/javascript/rhino/Node_395_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:35.305 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:35.305 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:35.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 439
[MASTER] 10:28:35.306 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_395_1628159315271/com/google/javascript/rhino/Node_395_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_395_tmp__ESTest extends Node_395_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(544, "");
22:       assertNotNull(node0);
23:       assertEquals(40, Node.ORIGINALNAME_PROP);
24:       assertEquals(50, Node.FREE_CALL);
25:       assertEquals(57, Node.REFLECTED_OBJECT);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(48, Node.DIRECTIVES);
28:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
29:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
30:       assertEquals(4095, Node.COLUMN_MASK);
31:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
32:       assertEquals(30, Node.VAR_ARGS_NAME);
33:       assertEquals(49, Node.DIRECT_EVAL);
34:       assertEquals(57, Node.LAST_PROP);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(53, Node.INPUT_ID);
37:       assertEquals(39, Node.EMPTY_BLOCK);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(15, Node.NO_SIDE_EFFECTS);
40:       assertEquals(55, Node.INFERRED_FUNCTION);
41:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(8, Node.FLAG_NO_THROWS);
45:       assertEquals(47, Node.IS_DISPATCHER);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(2, Node.POST_FLAG);
48:       assertEquals(37, Node.OPT_ARG_NAME);
49:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
50:       assertEquals(1, Node.DECR_FLAG);
51:       assertEquals(51, Node.STATIC_SOURCE_FILE);
52:       assertEquals(12, Node.COLUMN_BITS);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(54, Node.SLASH_V);
57:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
58:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
59:       assertFalse(node0.isIn());
60:       assertFalse(node0.isString());
61:       assertFalse(node0.isDelProp());
62:       assertFalse(node0.isGetterDef());
63:       assertFalse(node0.isIf());
64:       assertEquals((-1), node0.getCharno());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isNE());
67:       assertFalse(node0.isHook());
68:       assertFalse(node0.isTry());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isComma());
71:       assertFalse(node0.isCase());
72:       assertFalse(node0.isThis());
73:       assertFalse(node0.isFor());
74:       assertEquals(0, node0.getChildCount());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isNull());
77:       assertFalse(node0.isVoid());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isTrue());
80:       assertFalse(node0.isStringKey());
81:       assertFalse(node0.isParamList());
82:       assertFalse(node0.isArrayLit());
83:       assertFalse(node0.isNew());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isDefaultCase());
87:       assertFalse(node0.isDo());
88:       assertFalse(node0.isVar());
89:       assertFalse(node0.isAssignAdd());
90:       assertFalse(node0.isReturn());
91:       assertFalse(node0.isLabel());
92:       assertFalse(node0.isOr());
93:       assertEquals((-1), node0.getLineno());
94:       assertFalse(node0.isContinue());
95:       assertFalse(node0.hasMoreThanOneChild());
96:       assertFalse(node0.isNumber());
97:       assertFalse(node0.isLabelName());
98:       assertEquals((-1), node0.getSourcePosition());
99:       assertFalse(node0.hasOneChild());
100:       assertFalse(node0.isGetElem());
101:       assertFalse(node0.isExprResult());
102:       assertFalse(node0.isCall());
103:       assertFalse(node0.isScript());
104:       assertFalse(node0.hasChildren());
105:       assertFalse(node0.isWith());
106:       assertFalse(node0.isTypeOf());
107:       assertFalse(node0.isAssign());
108:       assertFalse(node0.isDec());
109:       assertFalse(node0.isBlock());
110:       assertFalse(node0.isWhile());
111:       assertFalse(node0.isObjectLit());
112:       assertFalse(node0.isGetProp());
113:       assertFalse(node0.isSetterDef());
114:       assertFalse(node0.isInstanceOf());
115:       assertFalse(node0.isCatch());
116:       assertFalse(node0.isNot());
117:       assertFalse(node0.isAnd());
118:       assertFalse(node0.isDebugger());
119:       assertFalse(node0.isFunction());
120:       assertFalse(node0.isFalse());
121:       assertEquals(544, node0.getType());
122:       assertFalse(node0.isInc());
123:       assertFalse(node0.isCast());
124:       assertFalse(node0.isThrow());
125:       
126:       boolean boolean0 = node0.isReturn();
127:       assertFalse(boolean0);
128:       assertEquals(40, Node.ORIGINALNAME_PROP);
129:       assertEquals(50, Node.FREE_CALL);
130:       assertEquals(57, Node.REFLECTED_OBJECT);
131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(4095, Node.COLUMN_MASK);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(30, Node.VAR_ARGS_NAME);
138:       assertEquals(49, Node.DIRECT_EVAL);
139:       assertEquals(57, Node.LAST_PROP);
140:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
141:       assertEquals(53, Node.INPUT_ID);
142:       assertEquals(39, Node.EMPTY_BLOCK);
143:       assertEquals(36, Node.QUOTED_PROP);
144:       assertEquals(15, Node.NO_SIDE_EFFECTS);
145:       assertEquals(55, Node.INFERRED_FUNCTION);
146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
147:       assertEquals(29, Node.JSDOC_INFO_PROP);
148:       assertEquals(52, Node.LENGTH);
149:       assertEquals(8, Node.FLAG_NO_THROWS);
150:       assertEquals(47, Node.IS_DISPATCHER);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(2, Node.POST_FLAG);
153:       assertEquals(37, Node.OPT_ARG_NAME);
154:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
155:       assertEquals(1, Node.DECR_FLAG);
156:       assertEquals(51, Node.STATIC_SOURCE_FILE);
157:       assertEquals(12, Node.COLUMN_BITS);
158:       assertEquals(32, Node.INCRDECR_PROP);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(54, Node.SLASH_V);
162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
164:       assertFalse(node0.isIn());
165:       assertFalse(node0.isString());
166:       assertFalse(node0.isDelProp());
167:       assertFalse(node0.isGetterDef());
168:       assertFalse(node0.isIf());
169:       assertEquals((-1), node0.getCharno());
170:       assertFalse(node0.isSwitch());
171:       assertFalse(node0.isNE());
172:       assertFalse(node0.isHook());
173:       assertFalse(node0.isTry());
174:       assertFalse(node0.isRegExp());
175:       assertFalse(node0.isComma());
176:       assertFalse(node0.isCase());
177:       assertFalse(node0.isThis());
178:       assertFalse(node0.isFor());
179:       assertEquals(0, node0.getChildCount());
180:       assertFalse(node0.isBreak());
181:       assertFalse(node0.isNull());
182:       assertFalse(node0.isVoid());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isTrue());
185:       assertFalse(node0.isStringKey());
186:       assertFalse(node0.isParamList());
187:       assertFalse(node0.isArrayLit());
188:       assertFalse(node0.isNew());
189:       assertFalse(node0.isAdd());
190:       assertFalse(node0.isEmpty());
191:       assertFalse(node0.isDefaultCase());
192:       assertFalse(node0.isDo());
193:       assertFalse(node0.isVar());
194:       assertFalse(node0.isAssignAdd());
195:       assertFalse(node0.isReturn());
196:       assertFalse(node0.isLabel());
197:       assertFalse(node0.isOr());
198:       assertEquals((-1), node0.getLineno());
199:       assertFalse(node0.isContinue());
200:       assertFalse(node0.hasMoreThanOneChild());
201:       assertFalse(node0.isNumber());
202:       assertFalse(node0.isLabelName());
203:       assertEquals((-1), node0.getSourcePosition());
204:       assertFalse(node0.hasOneChild());
205:       assertFalse(node0.isGetElem());
206:       assertFalse(node0.isExprResult());
207:       assertFalse(node0.isCall());
208:       assertFalse(node0.isScript());
209:       assertFalse(node0.hasChildren());
210:       assertFalse(node0.isWith());
211:       assertFalse(node0.isTypeOf());
212:       assertFalse(node0.isAssign());
213:       assertFalse(node0.isDec());
214:       assertFalse(node0.isBlock());
215:       assertFalse(node0.isWhile());
216:       assertFalse(node0.isObjectLit());
217:       assertFalse(node0.isGetProp());
218:       assertFalse(node0.isSetterDef());
219:       assertFalse(node0.isInstanceOf());
220:       assertFalse(node0.isCatch());
221:       assertFalse(node0.isNot());
222:       assertFalse(node0.isAnd());
223:       assertFalse(node0.isDebugger());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isFalse());
226:       assertEquals(544, node0.getType());
227:       assertFalse(node0.isInc());
228:       assertFalse(node0.isCast());
229:       assertFalse(node0.isThrow());
230:       
231:       node0.putIntProp(3, (-1741));
232:       assertEquals(40, Node.ORIGINALNAME_PROP);
233:       assertEquals(50, Node.FREE_CALL);
234:       assertEquals(57, Node.REFLECTED_OBJECT);
235:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
236:       assertEquals(48, Node.DIRECTIVES);
237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(30, Node.VAR_ARGS_NAME);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(57, Node.LAST_PROP);
244:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
245:       assertEquals(53, Node.INPUT_ID);
246:       assertEquals(39, Node.EMPTY_BLOCK);
247:       assertEquals(36, Node.QUOTED_PROP);
248:       assertEquals(15, Node.NO_SIDE_EFFECTS);
249:       assertEquals(55, Node.INFERRED_FUNCTION);
250:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
251:       assertEquals(29, Node.JSDOC_INFO_PROP);
252:       assertEquals(52, Node.LENGTH);
253:       assertEquals(8, Node.FLAG_NO_THROWS);
254:       assertEquals(47, Node.IS_DISPATCHER);
255:       assertEquals(56, Node.CHANGE_TIME);
256:       assertEquals(2, Node.POST_FLAG);
257:       assertEquals(37, Node.OPT_ARG_NAME);
258:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
259:       assertEquals(1, Node.DECR_FLAG);
260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
261:       assertEquals(12, Node.COLUMN_BITS);
262:       assertEquals(32, Node.INCRDECR_PROP);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(43, Node.IS_CONSTANT_NAME);
265:       assertEquals(54, Node.SLASH_V);
266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
268:       assertFalse(node0.isIn());
269:       assertFalse(node0.isString());
270:       assertFalse(node0.isDelProp());
271:       assertFalse(node0.isGetterDef());
272:       assertFalse(node0.isIf());
273:       assertEquals((-1), node0.getCharno());
274:       assertFalse(node0.isSwitch());
275:       assertFalse(node0.isNE());
276:       assertFalse(node0.isHook());
277:       assertFalse(node0.isTry());
278:       assertFalse(node0.isRegExp());
279:       assertFalse(node0.isComma());
280:       assertFalse(node0.isCase());
281:       assertFalse(node0.isThis());
282:       assertFalse(node0.isFor());
283:       assertEquals(0, node0.getChildCount());
284:       assertFalse(node0.isBreak());
285:       assertFalse(node0.isNull());
286:       assertFalse(node0.isVoid());
287:       assertFalse(node0.isName());
288:       assertFalse(node0.isTrue());
289:       assertFalse(node0.isStringKey());
290:       assertFalse(node0.isParamList());
291:       assertFalse(node0.isArrayLit());
292:       assertFalse(node0.isNew());
293:       assertFalse(node0.isAdd());
294:       assertFalse(node0.isEmpty());
295:       assertFalse(node0.isDefaultCase());
296:       assertFalse(node0.isDo());
297:       assertFalse(node0.isVar());
298:       assertFalse(node0.isAssignAdd());
299:       assertFalse(node0.isReturn());
300:       assertFalse(node0.isLabel());
301:       assertFalse(node0.isOr());
302:       assertEquals((-1), node0.getLineno());
303:       assertFalse(node0.isContinue());
304:       assertFalse(node0.hasMoreThanOneChild());
305:       assertFalse(node0.isNumber());
306:       assertFalse(node0.isLabelName());
307:       assertEquals((-1), node0.getSourcePosition());
308:       assertFalse(node0.hasOneChild());
309:       assertFalse(node0.isGetElem());
310:       assertFalse(node0.isExprResult());
311:       assertFalse(node0.isCall());
312:       assertFalse(node0.isScript());
313:       assertFalse(node0.hasChildren());
314:       assertFalse(node0.isWith());
315:       assertFalse(node0.isTypeOf());
316:       assertFalse(node0.isAssign());
317:       assertFalse(node0.isDec());
318:       assertFalse(node0.isBlock());
319:       assertFalse(node0.isWhile());
320:       assertFalse(node0.isObjectLit());
321:       assertFalse(node0.isGetProp());
322:       assertFalse(node0.isSetterDef());
323:       assertFalse(node0.isInstanceOf());
324:       assertFalse(node0.isCatch());
325:       assertFalse(node0.isNot());
326:       assertFalse(node0.isAnd());
327:       assertFalse(node0.isDebugger());
328:       assertFalse(node0.isFunction());
329:       assertFalse(node0.isFalse());
330:       assertEquals(544, node0.getType());
331:       assertFalse(node0.isInc());
332:       assertFalse(node0.isCast());
333:       assertFalse(node0.isThrow());
334:       
335:       Iterable<Node> iterable0 = node0.children();
336:       assertNotNull(iterable0);
337:       assertEquals(40, Node.ORIGINALNAME_PROP);
338:       assertEquals(50, Node.FREE_CALL);
339:       assertEquals(57, Node.REFLECTED_OBJECT);
340:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
341:       assertEquals(48, Node.DIRECTIVES);
342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
343:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
344:       assertEquals(4095, Node.COLUMN_MASK);
345:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
346:       assertEquals(30, Node.VAR_ARGS_NAME);
347:       assertEquals(49, Node.DIRECT_EVAL);
348:       assertEquals(57, Node.LAST_PROP);
349:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
350:       assertEquals(53, Node.INPUT_ID);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(36, Node.QUOTED_PROP);
353:       assertEquals(15, Node.NO_SIDE_EFFECTS);
354:       assertEquals(55, Node.INFERRED_FUNCTION);
355:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
356:       assertEquals(29, Node.JSDOC_INFO_PROP);
357:       assertEquals(52, Node.LENGTH);
358:       assertEquals(8, Node.FLAG_NO_THROWS);
359:       assertEquals(47, Node.IS_DISPATCHER);
360:       assertEquals(56, Node.CHANGE_TIME);
361:       assertEquals(2, Node.POST_FLAG);
362:       assertEquals(37, Node.OPT_ARG_NAME);
363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
364:       assertEquals(1, Node.DECR_FLAG);
365:       assertEquals(51, Node.STATIC_SOURCE_FILE);
366:       assertEquals(12, Node.COLUMN_BITS);
367:       assertEquals(32, Node.INCRDECR_PROP);
368:       assertEquals(46, Node.IS_NAMESPACE);
369:       assertEquals(43, Node.IS_CONSTANT_NAME);
370:       assertEquals(54, Node.SLASH_V);
371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
372:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
373:       assertFalse(node0.isIn());
374:       assertFalse(node0.isString());
375:       assertFalse(node0.isDelProp());
376:       assertFalse(node0.isGetterDef());
377:       assertFalse(node0.isIf());
378:       assertEquals((-1), node0.getCharno());
379:       assertFalse(node0.isSwitch());
380:       assertFalse(node0.isNE());
381:       assertFalse(node0.isHook());
382:       assertFalse(node0.isTry());
383:       assertFalse(node0.isRegExp());
384:       assertFalse(node0.isComma());
385:       assertFalse(node0.isCase());
386:       assertFalse(node0.isThis());
387:       assertFalse(node0.isFor());
388:       assertEquals(0, node0.getChildCount());
389:       assertFalse(node0.isBreak());
390:       assertFalse(node0.isNull());
391:       assertFalse(node0.isVoid());
392:       assertFalse(node0.isName());
393:       assertFalse(node0.isTrue());
394:       assertFalse(node0.isStringKey());
395:       assertFalse(node0.isParamList());
396:       assertFalse(node0.isArrayLit());
397:       assertFalse(node0.isNew());
398:       assertFalse(node0.isAdd());
399:       assertFalse(node0.isEmpty());
400:       assertFalse(node0.isDefaultCase());
401:       assertFalse(node0.isDo());
402:       assertFalse(node0.isVar());
403:       assertFalse(node0.isAssignAdd());
404:       assertFalse(node0.isReturn());
405:       assertFalse(node0.isLabel());
406:       assertFalse(node0.isOr());
407:       assertEquals((-1), node0.getLineno());
408:       assertFalse(node0.isContinue());
409:       assertFalse(node0.hasMoreThanOneChild());
410:       assertFalse(node0.isNumber());
411:       assertFalse(node0.isLabelName());
412:       assertEquals((-1), node0.getSourcePosition());
413:       assertFalse(node0.hasOneChild());
414:       assertFalse(node0.isGetElem());
415:       assertFalse(node0.isExprResult());
416:       assertFalse(node0.isCall());
417:       assertFalse(node0.isScript());
418:       assertFalse(node0.hasChildren());
419:       assertFalse(node0.isWith());
420:       assertFalse(node0.isTypeOf());
421:       assertFalse(node0.isAssign());
422:       assertFalse(node0.isDec());
423:       assertFalse(node0.isBlock());
424:       assertFalse(node0.isWhile());
425:       assertFalse(node0.isObjectLit());
426:       assertFalse(node0.isGetProp());
427:       assertFalse(node0.isSetterDef());
428:       assertFalse(node0.isInstanceOf());
429:       assertFalse(node0.isCatch());
430:       assertFalse(node0.isNot());
431:       assertFalse(node0.isAnd());
432:       assertFalse(node0.isDebugger());
433:       assertFalse(node0.isFunction());
434:       assertFalse(node0.isFalse());
435:       assertEquals(544, node0.getType());
436:       assertFalse(node0.isInc());
437:       assertFalse(node0.isCast());
438:       assertFalse(node0.isThrow());
439:       assertFalse(iterable0.contains(node0));
440:       
441:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
442:       assertNotNull(node_FileLevelJsDocBuilder0);
443:       assertEquals(40, Node.ORIGINALNAME_PROP);
444:       assertEquals(50, Node.FREE_CALL);
445:       assertEquals(57, Node.REFLECTED_OBJECT);
446:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
447:       assertEquals(48, Node.DIRECTIVES);
448:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
450:       assertEquals(4095, Node.COLUMN_MASK);
451:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
452:       assertEquals(30, Node.VAR_ARGS_NAME);
453:       assertEquals(49, Node.DIRECT_EVAL);
454:       assertEquals(57, Node.LAST_PROP);
455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
456:       assertEquals(53, Node.INPUT_ID);
457:       assertEquals(39, Node.EMPTY_BLOCK);
458:       assertEquals(36, Node.QUOTED_PROP);
459:       assertEquals(15, Node.NO_SIDE_EFFECTS);
460:       assertEquals(55, Node.INFERRED_FUNCTION);
461:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
462:       assertEquals(29, Node.JSDOC_INFO_PROP);
463:       assertEquals(52, Node.LENGTH);
464:       assertEquals(8, Node.FLAG_NO_THROWS);
465:       assertEquals(47, Node.IS_DISPATCHER);
466:       assertEquals(56, Node.CHANGE_TIME);
467:       assertEquals(2, Node.POST_FLAG);
468:       assertEquals(37, Node.OPT_ARG_NAME);
469:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
470:       assertEquals(1, Node.DECR_FLAG);
471:       assertEquals(51, Node.STATIC_SOURCE_FILE);
472:       assertEquals(12, Node.COLUMN_BITS);
473:       assertEquals(32, Node.INCRDECR_PROP);
474:       assertEquals(46, Node.IS_NAMESPACE);
475:       assertEquals(43, Node.IS_CONSTANT_NAME);
476:       assertEquals(54, Node.SLASH_V);
477:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
479:       assertFalse(node0.isIn());
480:       assertFalse(node0.isString());
481:       assertFalse(node0.isDelProp());
482:       assertFalse(node0.isGetterDef());
483:       assertFalse(node0.isIf());
484:       assertEquals((-1), node0.getCharno());
485:       assertFalse(node0.isSwitch());
486:       assertFalse(node0.isNE());
487:       assertFalse(node0.isHook());
488:       assertFalse(node0.isTry());
489:       assertFalse(node0.isRegExp());
490:       assertFalse(node0.isComma());
491:       assertFalse(node0.isCase());
492:       assertFalse(node0.isThis());
493:       assertFalse(node0.isFor());
494:       assertEquals(0, node0.getChildCount());
495:       assertFalse(node0.isBreak());
496:       assertFalse(node0.isNull());
497:       assertFalse(node0.isVoid());
498:       assertFalse(node0.isName());
499:       assertFalse(node0.isTrue());
500:       assertFalse(node0.isStringKey());
501:       assertFalse(node0.isParamList());
502:       assertFalse(node0.isArrayLit());
503:       assertFalse(node0.isNew());
504:       assertFalse(node0.isAdd());
505:       assertFalse(node0.isEmpty());
506:       assertFalse(node0.isDefaultCase());
507:       assertFalse(node0.isDo());
508:       assertFalse(node0.isVar());
509:       assertFalse(node0.isAssignAdd());
510:       assertFalse(node0.isReturn());
511:       assertFalse(node0.isLabel());
512:       assertFalse(node0.isOr());
513:       assertEquals((-1), node0.getLineno());
514:       assertFalse(node0.isContinue());
515:       assertFalse(node0.hasMoreThanOneChild());
516:       assertFalse(node0.isNumber());
517:       assertFalse(node0.isLabelName());
518:       assertEquals((-1), node0.getSourcePosition());
519:       assertFalse(node0.hasOneChild());
520:       assertFalse(node0.isGetElem());
521:       assertFalse(node0.isExprResult());
522:       assertFalse(node0.isCall());
523:       assertFalse(node0.isScript());
524:       assertFalse(node0.hasChildren());
525:       assertFalse(node0.isWith());
526:       assertFalse(node0.isTypeOf());
527:       assertFalse(node0.isAssign());
528:       assertFalse(node0.isDec());
529:       assertFalse(node0.isBlock());
530:       assertFalse(node0.isWhile());
531:       assertFalse(node0.isObjectLit());
532:       assertFalse(node0.isGetProp());
533:       assertFalse(node0.isSetterDef());
534:       assertFalse(node0.isInstanceOf());
535:       assertFalse(node0.isCatch());
536:       assertFalse(node0.isNot());
537:       assertFalse(node0.isAnd());
538:       assertFalse(node0.isDebugger());
539:       assertFalse(node0.isFunction());
540:       assertFalse(node0.isFalse());
541:       assertEquals(544, node0.getType());
542:       assertFalse(node0.isInc());
543:       assertFalse(node0.isCast());
544:       assertFalse(node0.isThrow());
545:       
546:       String string0 = "com.google.common.collect.RegularImmutableMap";
547:       // Undeclared exception!
548:       try { 
549:         node0.useSourceInfoIfMissingFromForTree((Node) null);
550:         fail("Expecting exception: NullPointerException");
551:       
552:       } catch(NullPointerException e) {
553:          //
554:          // no message in exception (getMessage() returned null)
555:          //
556:          verifyException("com.google.javascript.rhino.Node", e);
557:       }
558:   }
559: }
RegularFileObject[/tmp/EvoSuite_395_1628159315271/com/google/javascript/rhino/Node_395_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_395_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_395_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_395_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:35.312 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(544, "");
assertNotNull(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(544, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());

boolean boolean0 = node0.isReturn();
assertFalse(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(544, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());

node0.putIntProp(3, (-1741));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(544, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(544, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(iterable0.contains(node0));

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(544, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());

String string0 = "com.google.common.collect.RegularImmutableMap";
node0.useSourceInfoIfMissingFromForTree((Node) null);

[MASTER] 10:28:37.305 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_419_1628159317223/com/google/javascript/rhino/Node_419_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_419_1628159317223/com/google/javascript/rhino/Node_419_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:37.305 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:37.305 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:37.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 976
[MASTER] 10:28:37.306 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_419_1628159317223/com/google/javascript/rhino/Node_419_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_419_tmp__ESTest extends Node_419_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(474);
21:       assertNotNull(node0);
22:       assertEquals(30, Node.VAR_ARGS_NAME);
23:       assertEquals(49, Node.DIRECT_EVAL);
24:       assertEquals(1, Node.DECR_FLAG);
25:       assertEquals(15, Node.NO_SIDE_EFFECTS);
26:       assertEquals(52, Node.LENGTH);
27:       assertEquals(37, Node.OPT_ARG_NAME);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(57, Node.REFLECTED_OBJECT);
30:       assertEquals(46, Node.IS_NAMESPACE);
31:       assertEquals(54, Node.SLASH_V);
32:       assertEquals(56, Node.CHANGE_TIME);
33:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
34:       assertEquals(29, Node.JSDOC_INFO_PROP);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(40, Node.ORIGINALNAME_PROP);
38:       assertEquals(8, Node.FLAG_NO_THROWS);
39:       assertEquals(39, Node.EMPTY_BLOCK);
40:       assertEquals(53, Node.INPUT_ID);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(36, Node.QUOTED_PROP);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(48, Node.DIRECTIVES);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(43, Node.IS_CONSTANT_NAME);
50:       assertEquals(50, Node.FREE_CALL);
51:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
52:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertEquals(12, Node.COLUMN_BITS);
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isTry());
61:       assertFalse(node0.isTrue());
62:       assertEquals(474, node0.getType());
63:       assertFalse(node0.isDefaultCase());
64:       assertFalse(node0.isGetterDef());
65:       assertFalse(node0.isDebugger());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isIn());
68:       assertFalse(node0.isNE());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isIf());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isCall());
74:       assertFalse(node0.isCatch());
75:       assertFalse(node0.isVar());
76:       assertFalse(node0.isHook());
77:       assertFalse(node0.isBlock());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isStringKey());
80:       assertFalse(node0.isNull());
81:       assertEquals((-1), node0.getCharno());
82:       assertFalse(node0.isDo());
83:       assertFalse(node0.isAdd());
84:       assertFalse(node0.isNew());
85:       assertFalse(node0.isCase());
86:       assertEquals(0, node0.getChildCount());
87:       assertFalse(node0.isLabel());
88:       assertFalse(node0.isAssignAdd());
89:       assertFalse(node0.isParamList());
90:       assertFalse(node0.isSwitch());
91:       assertFalse(node0.hasOneChild());
92:       assertFalse(node0.isLabelName());
93:       assertFalse(node0.isScript());
94:       assertEquals((-1), node0.getSourcePosition());
95:       assertFalse(node0.isNumber());
96:       assertFalse(node0.isNot());
97:       assertFalse(node0.hasMoreThanOneChild());
98:       assertEquals((-1), node0.getLineno());
99:       assertFalse(node0.isOr());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isWhile());
102:       assertFalse(node0.isTypeOf());
103:       assertFalse(node0.isThis());
104:       assertFalse(node0.hasChildren());
105:       assertFalse(node0.isBreak());
106:       assertFalse(node0.isAssign());
107:       assertFalse(node0.isDec());
108:       assertFalse(node0.isComma());
109:       assertFalse(node0.isGetElem());
110:       assertFalse(node0.isWith());
111:       assertFalse(node0.isExprResult());
112:       assertFalse(node0.isInstanceOf());
113:       assertFalse(node0.isThrow());
114:       assertFalse(node0.isSetterDef());
115:       assertFalse(node0.isInc());
116:       assertFalse(node0.isGetProp());
117:       assertFalse(node0.isString());
118:       assertFalse(node0.isObjectLit());
119:       assertFalse(node0.isAnd());
120:       assertFalse(node0.isFunction());
121:       assertFalse(node0.isFalse());
122:       assertFalse(node0.isContinue());
123:       assertFalse(node0.isCast());
124:       
125:       node0.setChangeTime(474);
126:       assertEquals(30, Node.VAR_ARGS_NAME);
127:       assertEquals(49, Node.DIRECT_EVAL);
128:       assertEquals(1, Node.DECR_FLAG);
129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
130:       assertEquals(52, Node.LENGTH);
131:       assertEquals(37, Node.OPT_ARG_NAME);
132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(56, Node.CHANGE_TIME);
137:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
138:       assertEquals(29, Node.JSDOC_INFO_PROP);
139:       assertEquals(47, Node.IS_DISPATCHER);
140:       assertEquals(2, Node.POST_FLAG);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(8, Node.FLAG_NO_THROWS);
143:       assertEquals(39, Node.EMPTY_BLOCK);
144:       assertEquals(53, Node.INPUT_ID);
145:       assertEquals(57, Node.LAST_PROP);
146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
147:       assertEquals(36, Node.QUOTED_PROP);
148:       assertEquals(55, Node.INFERRED_FUNCTION);
149:       assertEquals(4095, Node.COLUMN_MASK);
150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
151:       assertEquals(48, Node.DIRECTIVES);
152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
153:       assertEquals(43, Node.IS_CONSTANT_NAME);
154:       assertEquals(50, Node.FREE_CALL);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertFalse(node0.isArrayLit());
163:       assertFalse(node0.isFor());
164:       assertFalse(node0.isTry());
165:       assertFalse(node0.isTrue());
166:       assertEquals(474, node0.getType());
167:       assertFalse(node0.isDefaultCase());
168:       assertFalse(node0.isGetterDef());
169:       assertFalse(node0.isDebugger());
170:       assertFalse(node0.isEmpty());
171:       assertFalse(node0.isIn());
172:       assertFalse(node0.isNE());
173:       assertFalse(node0.isRegExp());
174:       assertFalse(node0.isIf());
175:       assertFalse(node0.isDelProp());
176:       assertFalse(node0.isVoid());
177:       assertFalse(node0.isCall());
178:       assertFalse(node0.isCatch());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isBlock());
182:       assertFalse(node0.isName());
183:       assertFalse(node0.isStringKey());
184:       assertFalse(node0.isNull());
185:       assertEquals((-1), node0.getCharno());
186:       assertFalse(node0.isDo());
187:       assertFalse(node0.isAdd());
188:       assertFalse(node0.isNew());
189:       assertFalse(node0.isCase());
190:       assertEquals(0, node0.getChildCount());
191:       assertFalse(node0.isLabel());
192:       assertFalse(node0.isAssignAdd());
193:       assertFalse(node0.isParamList());
194:       assertFalse(node0.isSwitch());
195:       assertFalse(node0.hasOneChild());
196:       assertFalse(node0.isLabelName());
197:       assertFalse(node0.isScript());
198:       assertEquals((-1), node0.getSourcePosition());
199:       assertFalse(node0.isNumber());
200:       assertFalse(node0.isNot());
201:       assertFalse(node0.hasMoreThanOneChild());
202:       assertEquals((-1), node0.getLineno());
203:       assertFalse(node0.isOr());
204:       assertFalse(node0.isReturn());
205:       assertFalse(node0.isWhile());
206:       assertFalse(node0.isTypeOf());
207:       assertFalse(node0.isThis());
208:       assertFalse(node0.hasChildren());
209:       assertFalse(node0.isBreak());
210:       assertFalse(node0.isAssign());
211:       assertFalse(node0.isDec());
212:       assertFalse(node0.isComma());
213:       assertFalse(node0.isGetElem());
214:       assertFalse(node0.isWith());
215:       assertFalse(node0.isExprResult());
216:       assertFalse(node0.isInstanceOf());
217:       assertFalse(node0.isThrow());
218:       assertFalse(node0.isSetterDef());
219:       assertFalse(node0.isInc());
220:       assertFalse(node0.isGetProp());
221:       assertFalse(node0.isString());
222:       assertFalse(node0.isObjectLit());
223:       assertFalse(node0.isAnd());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isFalse());
226:       assertFalse(node0.isContinue());
227:       assertFalse(node0.isCast());
228:       
229:       Node node1 = new Node(46, 49, 173);
230:       assertNotNull(node1);
231:       assertEquals(32, Node.INCRDECR_PROP);
232:       assertEquals(46, Node.IS_NAMESPACE);
233:       assertEquals(51, Node.STATIC_SOURCE_FILE);
234:       assertEquals(2, Node.POST_FLAG);
235:       assertEquals(29, Node.JSDOC_INFO_PROP);
236:       assertEquals(30, Node.VAR_ARGS_NAME);
237:       assertEquals(15, Node.NO_SIDE_EFFECTS);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
240:       assertEquals(47, Node.IS_DISPATCHER);
241:       assertEquals(12, Node.COLUMN_BITS);
242:       assertEquals(57, Node.LAST_PROP);
243:       assertEquals(53, Node.INPUT_ID);
244:       assertEquals(57, Node.REFLECTED_OBJECT);
245:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
246:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
248:       assertEquals(52, Node.LENGTH);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(36, Node.QUOTED_PROP);
252:       assertEquals(37, Node.OPT_ARG_NAME);
253:       assertEquals(48, Node.DIRECTIVES);
254:       assertEquals(56, Node.CHANGE_TIME);
255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
256:       assertEquals(8, Node.FLAG_NO_THROWS);
257:       assertEquals(39, Node.EMPTY_BLOCK);
258:       assertEquals(55, Node.INFERRED_FUNCTION);
259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
260:       assertEquals(4095, Node.COLUMN_MASK);
261:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
262:       assertEquals(40, Node.ORIGINALNAME_PROP);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(54, Node.SLASH_V);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertFalse(node1.equals((Object)node0));
268:       assertFalse(node1.isExprResult());
269:       assertFalse(node1.isScript());
270:       assertFalse(node1.isAnd());
271:       assertFalse(node1.isCast());
272:       assertFalse(node1.isGetElem());
273:       assertFalse(node1.isAssign());
274:       assertFalse(node1.isWith());
275:       assertEquals(173, node1.getCharno());
276:       assertFalse(node1.isInstanceOf());
277:       assertFalse(node1.isComma());
278:       assertFalse(node1.isThis());
279:       assertFalse(node1.isTypeOf());
280:       assertFalse(node1.isDec());
281:       assertFalse(node1.isGetProp());
282:       assertFalse(node1.hasChildren());
283:       assertFalse(node1.isReturn());
284:       assertFalse(node1.isLabelName());
285:       assertFalse(node1.isObjectLit());
286:       assertFalse(node1.hasOneChild());
287:       assertFalse(node1.isNot());
288:       assertFalse(node1.isNumber());
289:       assertFalse(node1.isInc());
290:       assertEquals(49, node1.getLineno());
291:       assertFalse(node1.isBlock());
292:       assertFalse(node1.hasMoreThanOneChild());
293:       assertFalse(node1.isHook());
294:       assertFalse(node1.isFalse());
295:       assertFalse(node1.isContinue());
296:       assertFalse(node1.isNE());
297:       assertFalse(node1.isSetterDef());
298:       assertFalse(node1.isIf());
299:       assertFalse(node1.isThrow());
300:       assertFalse(node1.isIn());
301:       assertFalse(node1.isFunction());
302:       assertFalse(node1.isTrue());
303:       assertFalse(node1.isVoid());
304:       assertFalse(node1.isRegExp());
305:       assertEquals(200877, node1.getSourcePosition());
306:       assertFalse(node1.isDebugger());
307:       assertFalse(node1.isTry());
308:       assertFalse(node1.isDefaultCase());
309:       assertFalse(node1.isCatch());
310:       assertEquals(0, node1.getChildCount());
311:       assertFalse(node1.isArrayLit());
312:       assertFalse(node1.isFor());
313:       assertFalse(node1.isStringKey());
314:       assertFalse(node1.isParamList());
315:       assertFalse(node1.isCase());
316:       assertFalse(node1.isGetterDef());
317:       assertFalse(node1.isString());
318:       assertFalse(node1.isSwitch());
319:       assertFalse(node1.isNew());
320:       assertFalse(node1.isDo());
321:       assertFalse(node1.isWhile());
322:       assertFalse(node1.isVar());
323:       assertFalse(node1.isCall());
324:       assertFalse(node1.isNull());
325:       assertFalse(node1.isBreak());
326:       assertFalse(node1.isLabel());
327:       assertFalse(node1.isAssignAdd());
328:       assertFalse(node1.isName());
329:       assertFalse(node1.isDelProp());
330:       assertEquals(46, node1.getType());
331:       assertFalse(node1.isOr());
332:       assertFalse(node1.isAdd());
333:       assertFalse(node1.isEmpty());
334:       
335:       boolean boolean0 = node0.isEquivalentToShallow(node1);
336:       assertFalse(boolean0);
337:       assertEquals(30, Node.VAR_ARGS_NAME);
338:       assertEquals(49, Node.DIRECT_EVAL);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
341:       assertEquals(52, Node.LENGTH);
342:       assertEquals(37, Node.OPT_ARG_NAME);
343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
344:       assertEquals(57, Node.REFLECTED_OBJECT);
345:       assertEquals(46, Node.IS_NAMESPACE);
346:       assertEquals(54, Node.SLASH_V);
347:       assertEquals(56, Node.CHANGE_TIME);
348:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
349:       assertEquals(29, Node.JSDOC_INFO_PROP);
350:       assertEquals(47, Node.IS_DISPATCHER);
351:       assertEquals(2, Node.POST_FLAG);
352:       assertEquals(40, Node.ORIGINALNAME_PROP);
353:       assertEquals(8, Node.FLAG_NO_THROWS);
354:       assertEquals(39, Node.EMPTY_BLOCK);
355:       assertEquals(53, Node.INPUT_ID);
356:       assertEquals(57, Node.LAST_PROP);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(36, Node.QUOTED_PROP);
359:       assertEquals(55, Node.INFERRED_FUNCTION);
360:       assertEquals(4095, Node.COLUMN_MASK);
361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
362:       assertEquals(48, Node.DIRECTIVES);
363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
364:       assertEquals(43, Node.IS_CONSTANT_NAME);
365:       assertEquals(50, Node.FREE_CALL);
366:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(32, Node.INCRDECR_PROP);
371:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
372:       assertEquals(12, Node.COLUMN_BITS);
373:       assertEquals(32, Node.INCRDECR_PROP);
374:       assertEquals(46, Node.IS_NAMESPACE);
375:       assertEquals(51, Node.STATIC_SOURCE_FILE);
376:       assertEquals(2, Node.POST_FLAG);
377:       assertEquals(29, Node.JSDOC_INFO_PROP);
378:       assertEquals(30, Node.VAR_ARGS_NAME);
379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
380:       assertEquals(1, Node.DECR_FLAG);
381:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
382:       assertEquals(47, Node.IS_DISPATCHER);
383:       assertEquals(12, Node.COLUMN_BITS);
384:       assertEquals(57, Node.LAST_PROP);
385:       assertEquals(53, Node.INPUT_ID);
386:       assertEquals(57, Node.REFLECTED_OBJECT);
387:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
388:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
389:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
390:       assertEquals(52, Node.LENGTH);
391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
392:       assertEquals(49, Node.DIRECT_EVAL);
393:       assertEquals(36, Node.QUOTED_PROP);
394:       assertEquals(37, Node.OPT_ARG_NAME);
395:       assertEquals(48, Node.DIRECTIVES);
396:       assertEquals(56, Node.CHANGE_TIME);
397:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
398:       assertEquals(8, Node.FLAG_NO_THROWS);
399:       assertEquals(39, Node.EMPTY_BLOCK);
400:       assertEquals(55, Node.INFERRED_FUNCTION);
401:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
402:       assertEquals(4095, Node.COLUMN_MASK);
403:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
404:       assertEquals(40, Node.ORIGINALNAME_PROP);
405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(54, Node.SLASH_V);
408:       assertEquals(43, Node.IS_CONSTANT_NAME);
409:       assertNotSame(node0, node1);
410:       assertNotSame(node1, node0);
411:       assertFalse(node0.equals((Object)node1));
412:       assertFalse(node1.equals((Object)node0));
413:       assertFalse(node0.isArrayLit());
414:       assertFalse(node0.isFor());
415:       assertFalse(node0.isTry());
416:       assertFalse(node0.isTrue());
417:       assertEquals(474, node0.getType());
418:       assertFalse(node0.isDefaultCase());
419:       assertFalse(node0.isGetterDef());
420:       assertFalse(node0.isDebugger());
421:       assertFalse(node0.isEmpty());
422:       assertFalse(node0.isIn());
423:       assertFalse(node0.isNE());
424:       assertFalse(node0.isRegExp());
425:       assertFalse(node0.isIf());
426:       assertFalse(node0.isDelProp());
427:       assertFalse(node0.isVoid());
428:       assertFalse(node0.isCall());
429:       assertFalse(node0.isCatch());
430:       assertFalse(node0.isVar());
431:       assertFalse(node0.isHook());
432:       assertFalse(node0.isBlock());
433:       assertFalse(node0.isName());
434:       assertFalse(node0.isStringKey());
435:       assertFalse(node0.isNull());
436:       assertEquals((-1), node0.getCharno());
437:       assertFalse(node0.isDo());
438:       assertFalse(node0.isAdd());
439:       assertFalse(node0.isNew());
440:       assertFalse(node0.isCase());
441:       assertEquals(0, node0.getChildCount());
442:       assertFalse(node0.isLabel());
443:       assertFalse(node0.isAssignAdd());
444:       assertFalse(node0.isParamList());
445:       assertFalse(node0.isSwitch());
446:       assertFalse(node0.hasOneChild());
447:       assertFalse(node0.isLabelName());
448:       assertFalse(node0.isScript());
449:       assertEquals((-1), node0.getSourcePosition());
450:       assertFalse(node0.isNumber());
451:       assertFalse(node0.isNot());
452:       assertFalse(node0.hasMoreThanOneChild());
453:       assertEquals((-1), node0.getLineno());
454:       assertFalse(node0.isOr());
455:       assertFalse(node0.isReturn());
456:       assertFalse(node0.isWhile());
457:       assertFalse(node0.isTypeOf());
458:       assertFalse(node0.isThis());
459:       assertFalse(node0.hasChildren());
460:       assertFalse(node0.isBreak());
461:       assertFalse(node0.isAssign());
462:       assertFalse(node0.isDec());
463:       assertFalse(node0.isComma());
464:       assertFalse(node0.isGetElem());
465:       assertFalse(node0.isWith());
466:       assertFalse(node0.isExprResult());
467:       assertFalse(node0.isInstanceOf());
468:       assertFalse(node0.isThrow());
469:       assertFalse(node0.isSetterDef());
470:       assertFalse(node0.isInc());
471:       assertFalse(node0.isGetProp());
472:       assertFalse(node0.isString());
473:       assertFalse(node0.isObjectLit());
474:       assertFalse(node0.isAnd());
475:       assertFalse(node0.isFunction());
476:       assertFalse(node0.isFalse());
477:       assertFalse(node0.isContinue());
478:       assertFalse(node0.isCast());
479:       assertFalse(node1.isExprResult());
480:       assertFalse(node1.isScript());
481:       assertFalse(node1.isAnd());
482:       assertFalse(node1.isCast());
483:       assertFalse(node1.isGetElem());
484:       assertFalse(node1.isAssign());
485:       assertFalse(node1.isWith());
486:       assertEquals(173, node1.getCharno());
487:       assertFalse(node1.isInstanceOf());
488:       assertFalse(node1.isComma());
489:       assertFalse(node1.isThis());
490:       assertFalse(node1.isTypeOf());
491:       assertFalse(node1.isDec());
492:       assertFalse(node1.isGetProp());
493:       assertFalse(node1.hasChildren());
494:       assertFalse(node1.isReturn());
495:       assertFalse(node1.isLabelName());
496:       assertFalse(node1.isObjectLit());
497:       assertFalse(node1.hasOneChild());
498:       assertFalse(node1.isNot());
499:       assertFalse(node1.isNumber());
500:       assertFalse(node1.isInc());
501:       assertEquals(49, node1.getLineno());
502:       assertFalse(node1.isBlock());
503:       assertFalse(node1.hasMoreThanOneChild());
504:       assertFalse(node1.isHook());
505:       assertFalse(node1.isFalse());
506:       assertFalse(node1.isContinue());
507:       assertFalse(node1.isNE());
508:       assertFalse(node1.isSetterDef());
509:       assertFalse(node1.isIf());
510:       assertFalse(node1.isThrow());
511:       assertFalse(node1.isIn());
512:       assertFalse(node1.isFunction());
513:       assertFalse(node1.isTrue());
514:       assertFalse(node1.isVoid());
515:       assertFalse(node1.isRegExp());
516:       assertEquals(200877, node1.getSourcePosition());
517:       assertFalse(node1.isDebugger());
518:       assertFalse(node1.isTry());
519:       assertFalse(node1.isDefaultCase());
520:       assertFalse(node1.isCatch());
521:       assertEquals(0, node1.getChildCount());
522:       assertFalse(node1.isArrayLit());
523:       assertFalse(node1.isFor());
524:       assertFalse(node1.isStringKey());
525:       assertFalse(node1.isParamList());
526:       assertFalse(node1.isCase());
527:       assertFalse(node1.isGetterDef());
528:       assertFalse(node1.isString());
529:       assertFalse(node1.isSwitch());
530:       assertFalse(node1.isNew());
531:       assertFalse(node1.isDo());
532:       assertFalse(node1.isWhile());
533:       assertFalse(node1.isVar());
534:       assertFalse(node1.isCall());
535:       assertFalse(node1.isNull());
536:       assertFalse(node1.isBreak());
537:       assertFalse(node1.isLabel());
538:       assertFalse(node1.isAssignAdd());
539:       assertFalse(node1.isName());
540:       assertFalse(node1.isDelProp());
541:       assertEquals(46, node1.getType());
542:       assertFalse(node1.isOr());
543:       assertFalse(node1.isAdd());
544:       assertFalse(node1.isEmpty());
545:       
546:       Node node2 = Node.newString(105, "");
547:       assertNotNull(node2);
548:       assertEquals(56, Node.CHANGE_TIME);
549:       assertEquals(2, Node.POST_FLAG);
550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
551:       assertEquals(29, Node.JSDOC_INFO_PROP);
552:       assertEquals(37, Node.OPT_ARG_NAME);
553:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       assertEquals(46, Node.IS_NAMESPACE);
556:       assertEquals(43, Node.IS_CONSTANT_NAME);
557:       assertEquals(15, Node.NO_SIDE_EFFECTS);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(57, Node.LAST_PROP);
560:       assertEquals(53, Node.INPUT_ID);
561:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
562:       assertEquals(30, Node.VAR_ARGS_NAME);
563:       assertEquals(47, Node.IS_DISPATCHER);
564:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
565:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
566:       assertEquals(8, Node.FLAG_NO_THROWS);
567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
568:       assertEquals(48, Node.DIRECTIVES);
569:       assertEquals(40, Node.ORIGINALNAME_PROP);
570:       assertEquals(39, Node.EMPTY_BLOCK);
571:       assertEquals(57, Node.REFLECTED_OBJECT);
572:       assertEquals(55, Node.INFERRED_FUNCTION);
573:       assertEquals(52, Node.LENGTH);
574:       assertEquals(50, Node.FREE_CALL);
575:       assertEquals(54, Node.SLASH_V);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(1, Node.DECR_FLAG);
578:       assertEquals(49, Node.DIRECT_EVAL);
579:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
580:       assertEquals(12, Node.COLUMN_BITS);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(4095, Node.COLUMN_MASK);
583:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
584:       assertFalse(node2.equals((Object)node1));
585:       assertFalse(node2.equals((Object)node0));
586:       assertFalse(node2.isCatch());
587:       assertEquals(0, node2.getChildCount());
588:       assertFalse(node2.isRegExp());
589:       assertFalse(node2.isDebugger());
590:       assertFalse(node2.isTry());
591:       assertFalse(node2.isDefaultCase());
592:       assertFalse(node2.isSetterDef());
593:       assertFalse(node2.isCall());
594:       assertFalse(node2.isName());
595:       assertFalse(node2.isEmpty());
596:       assertFalse(node2.isFor());
597:       assertFalse(node2.isNull());
598:       assertFalse(node2.isTrue());
599:       assertFalse(node2.isVoid());
600:       assertFalse(node2.isNE());
601:       assertFalse(node2.isIf());
602:       assertFalse(node2.isDelProp());
603:       assertFalse(node2.isWhile());
604:       assertFalse(node2.isString());
605:       assertFalse(node2.isContinue());
606:       assertFalse(node2.isIn());
607:       assertFalse(node2.isReturn());
608:       assertFalse(node2.isInc());
609:       assertFalse(node2.isFalse());
610:       assertFalse(node2.isThrow());
611:       assertFalse(node2.isCast());
612:       assertEquals((-1), node2.getSourcePosition());
613:       assertFalse(node2.isObjectLit());
614:       assertFalse(node2.isWith());
615:       assertFalse(node2.isAnd());
616:       assertFalse(node2.isNot());
617:       assertFalse(node2.isGetProp());
618:       assertFalse(node2.hasOneChild());
619:       assertFalse(node2.isScript());
620:       assertFalse(node2.isGetElem());
621:       assertFalse(node2.isDec());
622:       assertFalse(node2.hasChildren());
623:       assertFalse(node2.isHook());
624:       assertFalse(node2.isTypeOf());
625:       assertFalse(node2.isAssign());
626:       assertFalse(node2.isComma());
627:       assertFalse(node2.isThis());
628:       assertFalse(node2.isExprResult());
629:       assertFalse(node2.isInstanceOf());
630:       assertEquals((-1), node2.getLineno());
631:       assertFalse(node2.isBreak());
632:       assertEquals(105, node2.getType());
633:       assertFalse(node2.hasMoreThanOneChild());
634:       assertFalse(node2.isOr());
635:       assertFalse(node2.isLabel());
636:       assertEquals((-1), node2.getCharno());
637:       assertFalse(node2.isBlock());
638:       assertFalse(node2.isAdd());
639:       assertFalse(node2.isAssignAdd());
640:       assertFalse(node2.isDo());
641:       assertFalse(node2.isNew());
642:       assertFalse(node2.isCase());
643:       assertFalse(node2.isStringKey());
644:       assertFalse(node2.isNumber());
645:       assertFalse(node2.isVar());
646:       assertFalse(node2.isGetterDef());
647:       assertFalse(node2.isSwitch());
648:       assertFalse(node2.isParamList());
649:       assertFalse(node2.isLabelName());
650:       assertFalse(node2.isArrayLit());
651:       assertTrue(node2.isFunction());
652:       
653:       boolean boolean1 = node0.isReturn();
654:       assertFalse(boolean1);
655:       assertEquals(30, Node.VAR_ARGS_NAME);
656:       assertEquals(49, Node.DIRECT_EVAL);
657:       assertEquals(1, Node.DECR_FLAG);
658:       assertEquals(15, Node.NO_SIDE_EFFECTS);
659:       assertEquals(52, Node.LENGTH);
660:       assertEquals(37, Node.OPT_ARG_NAME);
661:       assertEquals(51, Node.STATIC_SOURCE_FILE);
662:       assertEquals(57, Node.REFLECTED_OBJECT);
663:       assertEquals(46, Node.IS_NAMESPACE);
664:       assertEquals(54, Node.SLASH_V);
665:       assertEquals(56, Node.CHANGE_TIME);
666:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
667:       assertEquals(29, Node.JSDOC_INFO_PROP);
668:       assertEquals(47, Node.IS_DISPATCHER);
669:       assertEquals(2, Node.POST_FLAG);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(8, Node.FLAG_NO_THROWS);
672:       assertEquals(39, Node.EMPTY_BLOCK);
673:       assertEquals(53, Node.INPUT_ID);
674:       assertEquals(57, Node.LAST_PROP);
675:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
676:       assertEquals(36, Node.QUOTED_PROP);
677:       assertEquals(55, Node.INFERRED_FUNCTION);
678:       assertEquals(4095, Node.COLUMN_MASK);
679:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
680:       assertEquals(48, Node.DIRECTIVES);
681:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
682:       assertEquals(43, Node.IS_CONSTANT_NAME);
683:       assertEquals(50, Node.FREE_CALL);
684:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
687:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
688:       assertEquals(32, Node.INCRDECR_PROP);
689:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
690:       assertEquals(12, Node.COLUMN_BITS);
691:       assertNotSame(node0, node1);
692:       assertFalse(node0.equals((Object)node2));
693:       assertFalse(node0.equals((Object)node1));
694:       assertTrue(boolean1 == boolean0);
695:       assertFalse(node0.isArrayLit());
696:       assertFalse(node0.isFor());
697:       assertFalse(node0.isTry());
698:       assertFalse(node0.isTrue());
699:       assertEquals(474, node0.getType());
700:       assertFalse(node0.isDefaultCase());
701:       assertFalse(node0.isGetterDef());
702:       assertFalse(node0.isDebugger());
703:       assertFalse(node0.isEmpty());
704:       assertFalse(node0.isIn());
705:       assertFalse(node0.isNE());
706:       assertFalse(node0.isRegExp());
707:       assertFalse(node0.isIf());
708:       assertFalse(node0.isDelProp());
709:       assertFalse(node0.isVoid());
710:       assertFalse(node0.isCall());
711:       assertFalse(node0.isCatch());
712:       assertFalse(node0.isVar());
713:       assertFalse(node0.isHook());
714:       assertFalse(node0.isBlock());
715:       assertFalse(node0.isName());
716:       assertFalse(node0.isStringKey());
717:       assertFalse(node0.isNull());
718:       assertEquals((-1), node0.getCharno());
719:       assertFalse(node0.isDo());
720:       assertFalse(node0.isAdd());
721:       assertFalse(node0.isNew());
722:       assertFalse(node0.isCase());
723:       assertEquals(0, node0.getChildCount());
724:       assertFalse(node0.isLabel());
725:       assertFalse(node0.isAssignAdd());
726:       assertFalse(node0.isParamList());
727:       assertFalse(node0.isSwitch());
728:       assertFalse(node0.hasOneChild());
729:       assertFalse(node0.isLabelName());
730:       assertFalse(node0.isScript());
731:       assertEquals((-1), node0.getSourcePosition());
732:       assertFalse(node0.isNumber());
733:       assertFalse(node0.isNot());
734:       assertFalse(node0.hasMoreThanOneChild());
735:       assertEquals((-1), node0.getLineno());
736:       assertFalse(node0.isOr());
737:       assertFalse(node0.isReturn());
738:       assertFalse(node0.isWhile());
739:       assertFalse(node0.isTypeOf());
740:       assertFalse(node0.isThis());
741:       assertFalse(node0.hasChildren());
742:       assertFalse(node0.isBreak());
743:       assertFalse(node0.isAssign());
744:       assertFalse(node0.isDec());
745:       assertFalse(node0.isComma());
746:       assertFalse(node0.isGetElem());
747:       assertFalse(node0.isWith());
748:       assertFalse(node0.isExprResult());
749:       assertFalse(node0.isInstanceOf());
750:       assertFalse(node0.isThrow());
751:       assertFalse(node0.isSetterDef());
752:       assertFalse(node0.isInc());
753:       assertFalse(node0.isGetProp());
754:       assertFalse(node0.isString());
755:       assertFalse(node0.isObjectLit());
756:       assertFalse(node0.isAnd());
757:       assertFalse(node0.isFunction());
758:       assertFalse(node0.isFalse());
759:       assertFalse(node0.isContinue());
760:       assertFalse(node0.isCast());
761:       
762:       node0.putIntProp(461, 126);
763:       assertEquals(30, Node.VAR_ARGS_NAME);
764:       assertEquals(49, Node.DIRECT_EVAL);
765:       assertEquals(1, Node.DECR_FLAG);
766:       assertEquals(15, Node.NO_SIDE_EFFECTS);
767:       assertEquals(52, Node.LENGTH);
768:       assertEquals(37, Node.OPT_ARG_NAME);
769:       assertEquals(51, Node.STATIC_SOURCE_FILE);
770:       assertEquals(57, Node.REFLECTED_OBJECT);
771:       assertEquals(46, Node.IS_NAMESPACE);
772:       assertEquals(54, Node.SLASH_V);
773:       assertEquals(56, Node.CHANGE_TIME);
774:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
775:       assertEquals(29, Node.JSDOC_INFO_PROP);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(2, Node.POST_FLAG);
778:       assertEquals(40, Node.ORIGINALNAME_PROP);
779:       assertEquals(8, Node.FLAG_NO_THROWS);
780:       assertEquals(39, Node.EMPTY_BLOCK);
781:       assertEquals(53, Node.INPUT_ID);
782:       assertEquals(57, Node.LAST_PROP);
783:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
784:       assertEquals(36, Node.QUOTED_PROP);
785:       assertEquals(55, Node.INFERRED_FUNCTION);
786:       assertEquals(4095, Node.COLUMN_MASK);
787:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
788:       assertEquals(48, Node.DIRECTIVES);
789:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
790:       assertEquals(43, Node.IS_CONSTANT_NAME);
791:       assertEquals(50, Node.FREE_CALL);
792:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
793:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
794:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
795:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
796:       assertEquals(32, Node.INCRDECR_PROP);
797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
798:       assertEquals(12, Node.COLUMN_BITS);
799:       assertNotSame(node0, node1);
800:       assertFalse(node0.equals((Object)node2));
801:       assertFalse(node0.equals((Object)node1));
802:       assertFalse(node0.isArrayLit());
803:       assertFalse(node0.isFor());
804:       assertFalse(node0.isTry());
805:       assertFalse(node0.isTrue());
806:       assertEquals(474, node0.getType());
807:       assertFalse(node0.isDefaultCase());
808:       assertFalse(node0.isGetterDef());
809:       assertFalse(node0.isDebugger());
810:       assertFalse(node0.isEmpty());
811:       assertFalse(node0.isIn());
812:       assertFalse(node0.isNE());
813:       assertFalse(node0.isRegExp());
814:       assertFalse(node0.isIf());
815:       assertFalse(node0.isDelProp());
816:       assertFalse(node0.isVoid());
817:       assertFalse(node0.isCall());
818:       assertFalse(node0.isCatch());
819:       assertFalse(node0.isVar());
820:       assertFalse(node0.isHook());
821:       assertFalse(node0.isBlock());
822:       assertFalse(node0.isName());
823:       assertFalse(node0.isStringKey());
824:       assertFalse(node0.isNull());
825:       assertEquals((-1), node0.getCharno());
826:       assertFalse(node0.isDo());
827:       assertFalse(node0.isAdd());
828:       assertFalse(node0.isNew());
829:       assertFalse(node0.isCase());
830:       assertEquals(0, node0.getChildCount());
831:       assertFalse(node0.isLabel());
832:       assertFalse(node0.isAssignAdd());
833:       assertFalse(node0.isParamList());
834:       assertFalse(node0.isSwitch());
835:       assertFalse(node0.hasOneChild());
836:       assertFalse(node0.isLabelName());
837:       assertFalse(node0.isScript());
838:       assertEquals((-1), node0.getSourcePosition());
839:       assertFalse(node0.isNumber());
840:       assertFalse(node0.isNot());
841:       assertFalse(node0.hasMoreThanOneChild());
842:       assertEquals((-1), node0.getLineno());
843:       assertFalse(node0.isOr());
844:       assertFalse(node0.isReturn());
845:       assertFalse(node0.isWhile());
846:       assertFalse(node0.isTypeOf());
847:       assertFalse(node0.isThis());
848:       assertFalse(node0.hasChildren());
849:       assertFalse(node0.isBreak());
850:       assertFalse(node0.isAssign());
851:       assertFalse(node0.isDec());
852:       assertFalse(node0.isComma());
853:       assertFalse(node0.isGetElem());
854:       assertFalse(node0.isWith());
855:       assertFalse(node0.isExprResult());
856:       assertFalse(node0.isInstanceOf());
857:       assertFalse(node0.isThrow());
858:       assertFalse(node0.isSetterDef());
859:       assertFalse(node0.isInc());
860:       assertFalse(node0.isGetProp());
861:       assertFalse(node0.isString());
862:       assertFalse(node0.isObjectLit());
863:       assertFalse(node0.isAnd());
864:       assertFalse(node0.isFunction());
865:       assertFalse(node0.isFalse());
866:       assertFalse(node0.isContinue());
867:       assertFalse(node0.isCast());
868:       
869:       Iterable<Node> iterable0 = node0.children();
870:       assertNotNull(iterable0);
871:       assertEquals(30, Node.VAR_ARGS_NAME);
872:       assertEquals(49, Node.DIRECT_EVAL);
873:       assertEquals(1, Node.DECR_FLAG);
874:       assertEquals(15, Node.NO_SIDE_EFFECTS);
875:       assertEquals(52, Node.LENGTH);
876:       assertEquals(37, Node.OPT_ARG_NAME);
877:       assertEquals(51, Node.STATIC_SOURCE_FILE);
878:       assertEquals(57, Node.REFLECTED_OBJECT);
879:       assertEquals(46, Node.IS_NAMESPACE);
880:       assertEquals(54, Node.SLASH_V);
881:       assertEquals(56, Node.CHANGE_TIME);
882:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
883:       assertEquals(29, Node.JSDOC_INFO_PROP);
884:       assertEquals(47, Node.IS_DISPATCHER);
885:       assertEquals(2, Node.POST_FLAG);
886:       assertEquals(40, Node.ORIGINALNAME_PROP);
887:       assertEquals(8, Node.FLAG_NO_THROWS);
888:       assertEquals(39, Node.EMPTY_BLOCK);
889:       assertEquals(53, Node.INPUT_ID);
890:       assertEquals(57, Node.LAST_PROP);
891:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
892:       assertEquals(36, Node.QUOTED_PROP);
893:       assertEquals(55, Node.INFERRED_FUNCTION);
894:       assertEquals(4095, Node.COLUMN_MASK);
895:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
896:       assertEquals(48, Node.DIRECTIVES);
897:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
898:       assertEquals(43, Node.IS_CONSTANT_NAME);
899:       assertEquals(50, Node.FREE_CALL);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
902:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
903:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
904:       assertEquals(32, Node.INCRDECR_PROP);
905:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
906:       assertEquals(12, Node.COLUMN_BITS);
907:       assertNotSame(node0, node1);
908:       assertFalse(node0.equals((Object)node2));
909:       assertFalse(node0.equals((Object)node1));
910:       assertFalse(node0.isArrayLit());
911:       assertFalse(node0.isFor());
912:       assertFalse(node0.isTry());
913:       assertFalse(node0.isTrue());
914:       assertEquals(474, node0.getType());
915:       assertFalse(node0.isDefaultCase());
916:       assertFalse(node0.isGetterDef());
917:       assertFalse(node0.isDebugger());
918:       assertFalse(node0.isEmpty());
919:       assertFalse(node0.isIn());
920:       assertFalse(node0.isNE());
921:       assertFalse(node0.isRegExp());
922:       assertFalse(node0.isIf());
923:       assertFalse(node0.isDelProp());
924:       assertFalse(node0.isVoid());
925:       assertFalse(node0.isCall());
926:       assertFalse(node0.isCatch());
927:       assertFalse(node0.isVar());
928:       assertFalse(node0.isHook());
929:       assertFalse(node0.isBlock());
930:       assertFalse(node0.isName());
931:       assertFalse(node0.isStringKey());
932:       assertFalse(node0.isNull());
933:       assertEquals((-1), node0.getCharno());
934:       assertFalse(node0.isDo());
935:       assertFalse(node0.isAdd());
936:       assertFalse(node0.isNew());
937:       assertFalse(node0.isCase());
938:       assertEquals(0, node0.getChildCount());
939:       assertFalse(node0.isLabel());
940:       assertFalse(node0.isAssignAdd());
941:       assertFalse(node0.isParamList());
942:       assertFalse(node0.isSwitch());
943:       assertFalse(node0.hasOneChild());
944:       assertFalse(node0.isLabelName());
945:       assertFalse(node0.isScript());
946:       assertEquals((-1), node0.getSourcePosition());
947:       assertFalse(node0.isNumber());
948:       assertFalse(node0.isNot());
949:       assertFalse(node0.hasMoreThanOneChild());
950:       assertEquals((-1), node0.getLineno());
951:       assertFalse(node0.isOr());
952:       assertFalse(node0.isReturn());
953:       assertFalse(node0.isWhile());
954:       assertFalse(node0.isTypeOf());
955:       assertFalse(node0.isThis());
956:       assertFalse(node0.hasChildren());
957:       assertFalse(node0.isBreak());
958:       assertFalse(node0.isAssign());
959:       assertFalse(node0.isDec());
960:       assertFalse(node0.isComma());
961:       assertFalse(node0.isGetElem());
962:       assertFalse(node0.isWith());
963:       assertFalse(node0.isExprResult());
964:       assertFalse(node0.isInstanceOf());
965:       assertFalse(node0.isThrow());
966:       assertFalse(node0.isSetterDef());
967:       assertFalse(node0.isInc());
968:       assertFalse(node0.isGetProp());
969:       assertFalse(node0.isString());
970:       assertFalse(node0.isObjectLit());
971:       assertFalse(node0.isAnd());
972:       assertFalse(node0.isFunction());
973:       assertFalse(node0.isFalse());
974:       assertFalse(node0.isContinue());
975:       assertFalse(node0.isCast());
976:       assertFalse(iterable0.contains(node0));
977:       
978:       boolean boolean2 = node2.isStringKey();
979:       assertFalse(boolean2);
980:       assertEquals(56, Node.CHANGE_TIME);
981:       assertEquals(2, Node.POST_FLAG);
982:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
983:       assertEquals(29, Node.JSDOC_INFO_PROP);
984:       assertEquals(37, Node.OPT_ARG_NAME);
985:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
986:       assertEquals(51, Node.STATIC_SOURCE_FILE);
987:       assertEquals(46, Node.IS_NAMESPACE);
988:       assertEquals(43, Node.IS_CONSTANT_NAME);
989:       assertEquals(15, Node.NO_SIDE_EFFECTS);
990:       assertEquals(36, Node.QUOTED_PROP);
991:       assertEquals(57, Node.LAST_PROP);
992:       assertEquals(53, Node.INPUT_ID);
993:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
994:       assertEquals(30, Node.VAR_ARGS_NAME);
995:       assertEquals(47, Node.IS_DISPATCHER);
996:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
997:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
998:       assertEquals(8, Node.FLAG_NO_THROWS);
999:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1000:       assertEquals(48, Node.DIRECTIVES);
1001:       assertEquals(40, Node.ORIGINALNAME_PROP);
1002:       assertEquals(39, Node.EMPTY_BLOCK);
1003:       assertEquals(57, Node.REFLECTED_OBJECT);
1004:       assertEquals(55, Node.INFERRED_FUNCTION);
1005:       assertEquals(52, Node.LENGTH);
1006:       assertEquals(50, Node.FREE_CALL);
1007:       assertEquals(54, Node.SLASH_V);
1008:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1009:       assertEquals(1, Node.DECR_FLAG);
1010:       assertEquals(49, Node.DIRECT_EVAL);
1011:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1012:       assertEquals(12, Node.COLUMN_BITS);
1013:       assertEquals(32, Node.INCRDECR_PROP);
1014:       assertEquals(4095, Node.COLUMN_MASK);
1015:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1016:       assertFalse(node2.equals((Object)node1));
1017:       assertFalse(node2.equals((Object)node0));
1018:       assertTrue(boolean2 == boolean0);
1019:       assertTrue(boolean2 == boolean1);
1020:       assertFalse(node2.isCatch());
1021:       assertEquals(0, node2.getChildCount());
1022:       assertFalse(node2.isRegExp());
1023:       assertFalse(node2.isDebugger());
1024:       assertFalse(node2.isTry());
1025:       assertFalse(node2.isDefaultCase());
1026:       assertFalse(node2.isSetterDef());
1027:       assertFalse(node2.isCall());
1028:       assertFalse(node2.isName());
1029:       assertFalse(node2.isEmpty());
1030:       assertFalse(node2.isFor());
1031:       assertFalse(node2.isNull());
1032:       assertFalse(node2.isTrue());
1033:       assertFalse(node2.isVoid());
1034:       assertFalse(node2.isNE());
1035:       assertFalse(node2.isIf());
1036:       assertFalse(node2.isDelProp());
1037:       assertFalse(node2.isWhile());
1038:       assertFalse(node2.isString());
1039:       assertFalse(node2.isContinue());
1040:       assertFalse(node2.isIn());
1041:       assertFalse(node2.isReturn());
1042:       assertFalse(node2.isInc());
1043:       assertFalse(node2.isFalse());
1044:       assertFalse(node2.isThrow());
1045:       assertFalse(node2.isCast());
1046:       assertEquals((-1), node2.getSourcePosition());
1047:       assertFalse(node2.isObjectLit());
1048:       assertFalse(node2.isWith());
1049:       assertFalse(node2.isAnd());
1050:       assertFalse(node2.isNot());
1051:       assertFalse(node2.isGetProp());
1052:       assertFalse(node2.hasOneChild());
1053:       assertFalse(node2.isScript());
1054:       assertFalse(node2.isGetElem());
1055:       assertFalse(node2.isDec());
1056:       assertFalse(node2.hasChildren());
1057:       assertFalse(node2.isHook());
1058:       assertFalse(node2.isTypeOf());
1059:       assertFalse(node2.isAssign());
1060:       assertFalse(node2.isComma());
1061:       assertFalse(node2.isThis());
1062:       assertFalse(node2.isExprResult());
1063:       assertFalse(node2.isInstanceOf());
1064:       assertEquals((-1), node2.getLineno());
1065:       assertFalse(node2.isBreak());
1066:       assertEquals(105, node2.getType());
1067:       assertFalse(node2.hasMoreThanOneChild());
1068:       assertFalse(node2.isOr());
1069:       assertFalse(node2.isLabel());
1070:       assertEquals((-1), node2.getCharno());
1071:       assertFalse(node2.isBlock());
1072:       assertFalse(node2.isAdd());
1073:       assertFalse(node2.isAssignAdd());
1074:       assertFalse(node2.isDo());
1075:       assertFalse(node2.isNew());
1076:       assertFalse(node2.isCase());
1077:       assertFalse(node2.isStringKey());
1078:       assertFalse(node2.isNumber());
1079:       assertFalse(node2.isVar());
1080:       assertFalse(node2.isGetterDef());
1081:       assertFalse(node2.isSwitch());
1082:       assertFalse(node2.isParamList());
1083:       assertFalse(node2.isLabelName());
1084:       assertFalse(node2.isArrayLit());
1085:       assertTrue(node2.isFunction());
1086:       
1087:       boolean boolean3 = node1.isCase();
1088:       assertFalse(boolean3);
1089:       assertEquals(32, Node.INCRDECR_PROP);
1090:       assertEquals(46, Node.IS_NAMESPACE);
1091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1092:       assertEquals(2, Node.POST_FLAG);
1093:       assertEquals(29, Node.JSDOC_INFO_PROP);
1094:       assertEquals(30, Node.VAR_ARGS_NAME);
1095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1096:       assertEquals(1, Node.DECR_FLAG);
1097:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1098:       assertEquals(47, Node.IS_DISPATCHER);
1099:       assertEquals(12, Node.COLUMN_BITS);
1100:       assertEquals(57, Node.LAST_PROP);
1101:       assertEquals(53, Node.INPUT_ID);
1102:       assertEquals(57, Node.REFLECTED_OBJECT);
1103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1106:       assertEquals(52, Node.LENGTH);
1107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1108:       assertEquals(49, Node.DIRECT_EVAL);
1109:       assertEquals(36, Node.QUOTED_PROP);
1110:       assertEquals(37, Node.OPT_ARG_NAME);
1111:       assertEquals(48, Node.DIRECTIVES);
1112:       assertEquals(56, Node.CHANGE_TIME);
1113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1114:       assertEquals(8, Node.FLAG_NO_THROWS);
1115:       assertEquals(39, Node.EMPTY_BLOCK);
1116:       assertEquals(55, Node.INFERRED_FUNCTION);
1117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1118:       assertEquals(4095, Node.COLUMN_MASK);
1119:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1120:       assertEquals(40, Node.ORIGINALNAME_PROP);
1121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1122:       assertEquals(50, Node.FREE_CALL);
1123:       assertEquals(54, Node.SLASH_V);
1124:       assertEquals(43, Node.IS_CONSTANT_NAME);
1125:       assertNotSame(node1, node0);
1126:       assertFalse(node1.equals((Object)node0));
1127:       assertFalse(node1.equals((Object)node2));
1128:       assertTrue(boolean3 == boolean0);
1129:       assertTrue(boolean3 == boolean1);
1130:       assertTrue(boolean3 == boolean2);
1131:       assertFalse(node1.isExprResult());
1132:       assertFalse(node1.isScript());
1133:       assertFalse(node1.isAnd());
1134:       assertFalse(node1.isCast());
1135:       assertFalse(node1.isGetElem());
1136:       assertFalse(node1.isAssign());
1137:       assertFalse(node1.isWith());
1138:       assertEquals(173, node1.getCharno());
1139:       assertFalse(node1.isInstanceOf());
1140:       assertFalse(node1.isComma());
1141:       assertFalse(node1.isThis());
1142:       assertFalse(node1.isTypeOf());
1143:       assertFalse(node1.isDec());
1144:       assertFalse(node1.isGetProp());
1145:       assertFalse(node1.hasChildren());
1146:       assertFalse(node1.isReturn());
1147:       assertFalse(node1.isLabelName());
1148:       assertFalse(node1.isObjectLit());
1149:       assertFalse(node1.hasOneChild());
1150:       assertFalse(node1.isNot());
1151:       assertFalse(node1.isNumber());
1152:       assertFalse(node1.isInc());
1153:       assertEquals(49, node1.getLineno());
1154:       assertFalse(node1.isBlock());
1155:       assertFalse(node1.hasMoreThanOneChild());
1156:       assertFalse(node1.isHook());
1157:       assertFalse(node1.isFalse());
1158:       assertFalse(node1.isContinue());
1159:       assertFalse(node1.isNE());
1160:       assertFalse(node1.isSetterDef());
1161:       assertFalse(node1.isIf());
1162:       assertFalse(node1.isThrow());
1163:       assertFalse(node1.isIn());
1164:       assertFalse(node1.isFunction());
1165:       assertFalse(node1.isTrue());
1166:       assertFalse(node1.isVoid());
1167:       assertFalse(node1.isRegExp());
1168:       assertEquals(200877, node1.getSourcePosition());
1169:       assertFalse(node1.isDebugger());
1170:       assertFalse(node1.isTry());
1171:       assertFalse(node1.isDefaultCase());
1172:       assertFalse(node1.isCatch());
1173:       assertEquals(0, node1.getChildCount());
1174:       assertFalse(node1.isArrayLit());
1175:       assertFalse(node1.isFor());
1176:       assertFalse(node1.isStringKey());
1177:       assertFalse(node1.isParamList());
1178:       assertFalse(node1.isCase());
1179:       assertFalse(node1.isGetterDef());
1180:       assertFalse(node1.isString());
1181:       assertFalse(node1.isSwitch());
1182:       assertFalse(node1.isNew());
1183:       assertFalse(node1.isDo());
1184:       assertFalse(node1.isWhile());
1185:       assertFalse(node1.isVar());
1186:       assertFalse(node1.isCall());
1187:       assertFalse(node1.isNull());
1188:       assertFalse(node1.isBreak());
1189:       assertFalse(node1.isLabel());
1190:       assertFalse(node1.isAssignAdd());
1191:       assertFalse(node1.isName());
1192:       assertFalse(node1.isDelProp());
1193:       assertEquals(46, node1.getType());
1194:       assertFalse(node1.isOr());
1195:       assertFalse(node1.isAdd());
1196:       assertFalse(node1.isEmpty());
1197:   }
1198: }
RegularFileObject[/tmp/EvoSuite_419_1628159317223/com/google/javascript/rhino/Node_419_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:37 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_419_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_419_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_419_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:37.391 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(474);
assertNotNull(node0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertEquals(474, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());

node0.setChangeTime(474);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertEquals(474, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());

Node node1 = new Node(46, 49, 173);
assertNotNull(node1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(173, node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertEquals(49, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertEquals(200877, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertEquals(46, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());

boolean boolean0 = node0.isEquivalentToShallow(node1);
assertFalse(boolean0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertEquals(474, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(173, node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertEquals(49, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertEquals(200877, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertEquals(46, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());

Node node2 = Node.newString(105, "");
assertNotNull(node2);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBreak());
assertEquals(105, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isNumber());
assertFalse(node2.isVar());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertTrue(node2.isFunction());

boolean boolean1 = node0.isReturn();
assertFalse(boolean1);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertEquals(474, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());

node0.putIntProp(461, 126);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertEquals(474, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertEquals(474, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(iterable0.contains(node0));

boolean boolean2 = node2.isStringKey();
assertFalse(boolean2);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBreak());
assertEquals(105, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isNumber());
assertFalse(node2.isVar());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertTrue(node2.isFunction());

boolean boolean3 = node1.isCase();
assertFalse(boolean3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(173, node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertEquals(49, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertEquals(200877, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertEquals(46, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());


[MASTER] 10:28:38.049 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_422_1628159317959/com/google/javascript/rhino/Node_422_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_422_1628159317959/com/google/javascript/rhino/Node_422_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:38.049 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:38.049 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:38.050 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 438
[MASTER] 10:28:38.051 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_422_1628159317959/com/google/javascript/rhino/Node_422_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_422_tmp__ESTest extends Node_422_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(544, "");
21:       assertNotNull(node0);
22:       assertEquals(57, Node.LAST_PROP);
23:       assertEquals(15, Node.NO_SIDE_EFFECTS);
24:       assertEquals(49, Node.DIRECT_EVAL);
25:       assertEquals(32, Node.INCRDECR_PROP);
26:       assertEquals(1, Node.DECR_FLAG);
27:       assertEquals(52, Node.LENGTH);
28:       assertEquals(57, Node.REFLECTED_OBJECT);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(51, Node.STATIC_SOURCE_FILE);
32:       assertEquals(50, Node.FREE_CALL);
33:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
38:       assertEquals(39, Node.EMPTY_BLOCK);
39:       assertEquals(2, Node.POST_FLAG);
40:       assertEquals(30, Node.VAR_ARGS_NAME);
41:       assertEquals(43, Node.IS_CONSTANT_NAME);
42:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(53, Node.INPUT_ID);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
49:       assertEquals(56, Node.CHANGE_TIME);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(37, Node.OPT_ARG_NAME);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(48, Node.DIRECTIVES);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertEquals(4095, Node.COLUMN_MASK);
58:       assertFalse(node0.isCast());
59:       assertFalse(node0.isGetElem());
60:       assertFalse(node0.isAssign());
61:       assertFalse(node0.hasChildren());
62:       assertFalse(node0.isNumber());
63:       assertFalse(node0.isDec());
64:       assertFalse(node0.isTypeOf());
65:       assertFalse(node0.isScript());
66:       assertFalse(node0.isAssignAdd());
67:       assertFalse(node0.hasOneChild());
68:       assertFalse(node0.hasMoreThanOneChild());
69:       assertFalse(node0.isInstanceOf());
70:       assertFalse(node0.isReturn());
71:       assertFalse(node0.isWith());
72:       assertFalse(node0.isOr());
73:       assertFalse(node0.isExprResult());
74:       assertEquals((-1), node0.getLineno());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isHook());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isBlock());
81:       assertFalse(node0.isAdd());
82:       assertFalse(node0.isDo());
83:       assertFalse(node0.isCase());
84:       assertFalse(node0.isNew());
85:       assertFalse(node0.isLabel());
86:       assertEquals(0, node0.getChildCount());
87:       assertFalse(node0.isSwitch());
88:       assertFalse(node0.isParamList());
89:       assertEquals((-1), node0.getCharno());
90:       assertFalse(node0.isLabelName());
91:       assertFalse(node0.isArrayLit());
92:       assertFalse(node0.isEmpty());
93:       assertFalse(node0.isFor());
94:       assertFalse(node0.isGetterDef());
95:       assertFalse(node0.isDefaultCase());
96:       assertFalse(node0.isTry());
97:       assertFalse(node0.isCatch());
98:       assertFalse(node0.isIn());
99:       assertFalse(node0.isRegExp());
100:       assertFalse(node0.isNE());
101:       assertFalse(node0.isNull());
102:       assertFalse(node0.isTrue());
103:       assertFalse(node0.isIf());
104:       assertFalse(node0.isName());
105:       assertFalse(node0.isDelProp());
106:       assertFalse(node0.isVoid());
107:       assertFalse(node0.isThrow());
108:       assertFalse(node0.isCall());
109:       assertFalse(node0.isFalse());
110:       assertFalse(node0.isComma());
111:       assertFalse(node0.isSetterDef());
112:       assertFalse(node0.isInc());
113:       assertFalse(node0.isGetProp());
114:       assertFalse(node0.isWhile());
115:       assertFalse(node0.isAnd());
116:       assertFalse(node0.isContinue());
117:       assertFalse(node0.isString());
118:       assertFalse(node0.isNot());
119:       assertFalse(node0.isObjectLit());
120:       assertFalse(node0.isFunction());
121:       assertFalse(node0.isDebugger());
122:       assertEquals((-1), node0.getSourcePosition());
123:       assertEquals(544, node0.getType());
124:       
125:       boolean boolean0 = node0.isReturn();
126:       assertFalse(boolean0);
127:       assertEquals(57, Node.LAST_PROP);
128:       assertEquals(15, Node.NO_SIDE_EFFECTS);
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(32, Node.INCRDECR_PROP);
131:       assertEquals(1, Node.DECR_FLAG);
132:       assertEquals(52, Node.LENGTH);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
137:       assertEquals(50, Node.FREE_CALL);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(47, Node.IS_DISPATCHER);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
143:       assertEquals(39, Node.EMPTY_BLOCK);
144:       assertEquals(2, Node.POST_FLAG);
145:       assertEquals(30, Node.VAR_ARGS_NAME);
146:       assertEquals(43, Node.IS_CONSTANT_NAME);
147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
154:       assertEquals(56, Node.CHANGE_TIME);
155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
156:       assertEquals(37, Node.OPT_ARG_NAME);
157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
158:       assertEquals(48, Node.DIRECTIVES);
159:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
160:       assertEquals(12, Node.COLUMN_BITS);
161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
162:       assertEquals(4095, Node.COLUMN_MASK);
163:       assertFalse(node0.isCast());
164:       assertFalse(node0.isGetElem());
165:       assertFalse(node0.isAssign());
166:       assertFalse(node0.hasChildren());
167:       assertFalse(node0.isNumber());
168:       assertFalse(node0.isDec());
169:       assertFalse(node0.isTypeOf());
170:       assertFalse(node0.isScript());
171:       assertFalse(node0.isAssignAdd());
172:       assertFalse(node0.hasOneChild());
173:       assertFalse(node0.hasMoreThanOneChild());
174:       assertFalse(node0.isInstanceOf());
175:       assertFalse(node0.isReturn());
176:       assertFalse(node0.isWith());
177:       assertFalse(node0.isOr());
178:       assertFalse(node0.isExprResult());
179:       assertEquals((-1), node0.getLineno());
180:       assertFalse(node0.isBreak());
181:       assertFalse(node0.isStringKey());
182:       assertFalse(node0.isHook());
183:       assertFalse(node0.isVar());
184:       assertFalse(node0.isThis());
185:       assertFalse(node0.isBlock());
186:       assertFalse(node0.isAdd());
187:       assertFalse(node0.isDo());
188:       assertFalse(node0.isCase());
189:       assertFalse(node0.isNew());
190:       assertFalse(node0.isLabel());
191:       assertEquals(0, node0.getChildCount());
192:       assertFalse(node0.isSwitch());
193:       assertFalse(node0.isParamList());
194:       assertEquals((-1), node0.getCharno());
195:       assertFalse(node0.isLabelName());
196:       assertFalse(node0.isArrayLit());
197:       assertFalse(node0.isEmpty());
198:       assertFalse(node0.isFor());
199:       assertFalse(node0.isGetterDef());
200:       assertFalse(node0.isDefaultCase());
201:       assertFalse(node0.isTry());
202:       assertFalse(node0.isCatch());
203:       assertFalse(node0.isIn());
204:       assertFalse(node0.isRegExp());
205:       assertFalse(node0.isNE());
206:       assertFalse(node0.isNull());
207:       assertFalse(node0.isTrue());
208:       assertFalse(node0.isIf());
209:       assertFalse(node0.isName());
210:       assertFalse(node0.isDelProp());
211:       assertFalse(node0.isVoid());
212:       assertFalse(node0.isThrow());
213:       assertFalse(node0.isCall());
214:       assertFalse(node0.isFalse());
215:       assertFalse(node0.isComma());
216:       assertFalse(node0.isSetterDef());
217:       assertFalse(node0.isInc());
218:       assertFalse(node0.isGetProp());
219:       assertFalse(node0.isWhile());
220:       assertFalse(node0.isAnd());
221:       assertFalse(node0.isContinue());
222:       assertFalse(node0.isString());
223:       assertFalse(node0.isNot());
224:       assertFalse(node0.isObjectLit());
225:       assertFalse(node0.isFunction());
226:       assertFalse(node0.isDebugger());
227:       assertEquals((-1), node0.getSourcePosition());
228:       assertEquals(544, node0.getType());
229:       
230:       node0.putIntProp(3, (-1741));
231:       assertEquals(57, Node.LAST_PROP);
232:       assertEquals(15, Node.NO_SIDE_EFFECTS);
233:       assertEquals(49, Node.DIRECT_EVAL);
234:       assertEquals(32, Node.INCRDECR_PROP);
235:       assertEquals(1, Node.DECR_FLAG);
236:       assertEquals(52, Node.LENGTH);
237:       assertEquals(57, Node.REFLECTED_OBJECT);
238:       assertEquals(46, Node.IS_NAMESPACE);
239:       assertEquals(54, Node.SLASH_V);
240:       assertEquals(51, Node.STATIC_SOURCE_FILE);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
243:       assertEquals(47, Node.IS_DISPATCHER);
244:       assertEquals(29, Node.JSDOC_INFO_PROP);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
247:       assertEquals(39, Node.EMPTY_BLOCK);
248:       assertEquals(2, Node.POST_FLAG);
249:       assertEquals(30, Node.VAR_ARGS_NAME);
250:       assertEquals(43, Node.IS_CONSTANT_NAME);
251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
252:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
253:       assertEquals(53, Node.INPUT_ID);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(8, Node.FLAG_NO_THROWS);
256:       assertEquals(36, Node.QUOTED_PROP);
257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
262:       assertEquals(48, Node.DIRECTIVES);
263:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
264:       assertEquals(12, Node.COLUMN_BITS);
265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
266:       assertEquals(4095, Node.COLUMN_MASK);
267:       assertFalse(node0.isCast());
268:       assertFalse(node0.isGetElem());
269:       assertFalse(node0.isAssign());
270:       assertFalse(node0.hasChildren());
271:       assertFalse(node0.isNumber());
272:       assertFalse(node0.isDec());
273:       assertFalse(node0.isTypeOf());
274:       assertFalse(node0.isScript());
275:       assertFalse(node0.isAssignAdd());
276:       assertFalse(node0.hasOneChild());
277:       assertFalse(node0.hasMoreThanOneChild());
278:       assertFalse(node0.isInstanceOf());
279:       assertFalse(node0.isReturn());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isOr());
282:       assertFalse(node0.isExprResult());
283:       assertEquals((-1), node0.getLineno());
284:       assertFalse(node0.isBreak());
285:       assertFalse(node0.isStringKey());
286:       assertFalse(node0.isHook());
287:       assertFalse(node0.isVar());
288:       assertFalse(node0.isThis());
289:       assertFalse(node0.isBlock());
290:       assertFalse(node0.isAdd());
291:       assertFalse(node0.isDo());
292:       assertFalse(node0.isCase());
293:       assertFalse(node0.isNew());
294:       assertFalse(node0.isLabel());
295:       assertEquals(0, node0.getChildCount());
296:       assertFalse(node0.isSwitch());
297:       assertFalse(node0.isParamList());
298:       assertEquals((-1), node0.getCharno());
299:       assertFalse(node0.isLabelName());
300:       assertFalse(node0.isArrayLit());
301:       assertFalse(node0.isEmpty());
302:       assertFalse(node0.isFor());
303:       assertFalse(node0.isGetterDef());
304:       assertFalse(node0.isDefaultCase());
305:       assertFalse(node0.isTry());
306:       assertFalse(node0.isCatch());
307:       assertFalse(node0.isIn());
308:       assertFalse(node0.isRegExp());
309:       assertFalse(node0.isNE());
310:       assertFalse(node0.isNull());
311:       assertFalse(node0.isTrue());
312:       assertFalse(node0.isIf());
313:       assertFalse(node0.isName());
314:       assertFalse(node0.isDelProp());
315:       assertFalse(node0.isVoid());
316:       assertFalse(node0.isThrow());
317:       assertFalse(node0.isCall());
318:       assertFalse(node0.isFalse());
319:       assertFalse(node0.isComma());
320:       assertFalse(node0.isSetterDef());
321:       assertFalse(node0.isInc());
322:       assertFalse(node0.isGetProp());
323:       assertFalse(node0.isWhile());
324:       assertFalse(node0.isAnd());
325:       assertFalse(node0.isContinue());
326:       assertFalse(node0.isString());
327:       assertFalse(node0.isNot());
328:       assertFalse(node0.isObjectLit());
329:       assertFalse(node0.isFunction());
330:       assertFalse(node0.isDebugger());
331:       assertEquals((-1), node0.getSourcePosition());
332:       assertEquals(544, node0.getType());
333:       
334:       Iterable<Node> iterable0 = node0.children();
335:       assertNotNull(iterable0);
336:       assertEquals(57, Node.LAST_PROP);
337:       assertEquals(15, Node.NO_SIDE_EFFECTS);
338:       assertEquals(49, Node.DIRECT_EVAL);
339:       assertEquals(32, Node.INCRDECR_PROP);
340:       assertEquals(1, Node.DECR_FLAG);
341:       assertEquals(52, Node.LENGTH);
342:       assertEquals(57, Node.REFLECTED_OBJECT);
343:       assertEquals(46, Node.IS_NAMESPACE);
344:       assertEquals(54, Node.SLASH_V);
345:       assertEquals(51, Node.STATIC_SOURCE_FILE);
346:       assertEquals(50, Node.FREE_CALL);
347:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
348:       assertEquals(47, Node.IS_DISPATCHER);
349:       assertEquals(29, Node.JSDOC_INFO_PROP);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
352:       assertEquals(39, Node.EMPTY_BLOCK);
353:       assertEquals(2, Node.POST_FLAG);
354:       assertEquals(30, Node.VAR_ARGS_NAME);
355:       assertEquals(43, Node.IS_CONSTANT_NAME);
356:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
357:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
358:       assertEquals(53, Node.INPUT_ID);
359:       assertEquals(55, Node.INFERRED_FUNCTION);
360:       assertEquals(8, Node.FLAG_NO_THROWS);
361:       assertEquals(36, Node.QUOTED_PROP);
362:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
363:       assertEquals(56, Node.CHANGE_TIME);
364:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
365:       assertEquals(37, Node.OPT_ARG_NAME);
366:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
369:       assertEquals(12, Node.COLUMN_BITS);
370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertFalse(node0.isCast());
373:       assertFalse(node0.isGetElem());
374:       assertFalse(node0.isAssign());
375:       assertFalse(node0.hasChildren());
376:       assertFalse(node0.isNumber());
377:       assertFalse(node0.isDec());
378:       assertFalse(node0.isTypeOf());
379:       assertFalse(node0.isScript());
380:       assertFalse(node0.isAssignAdd());
381:       assertFalse(node0.hasOneChild());
382:       assertFalse(node0.hasMoreThanOneChild());
383:       assertFalse(node0.isInstanceOf());
384:       assertFalse(node0.isReturn());
385:       assertFalse(node0.isWith());
386:       assertFalse(node0.isOr());
387:       assertFalse(node0.isExprResult());
388:       assertEquals((-1), node0.getLineno());
389:       assertFalse(node0.isBreak());
390:       assertFalse(node0.isStringKey());
391:       assertFalse(node0.isHook());
392:       assertFalse(node0.isVar());
393:       assertFalse(node0.isThis());
394:       assertFalse(node0.isBlock());
395:       assertFalse(node0.isAdd());
396:       assertFalse(node0.isDo());
397:       assertFalse(node0.isCase());
398:       assertFalse(node0.isNew());
399:       assertFalse(node0.isLabel());
400:       assertEquals(0, node0.getChildCount());
401:       assertFalse(node0.isSwitch());
402:       assertFalse(node0.isParamList());
403:       assertEquals((-1), node0.getCharno());
404:       assertFalse(node0.isLabelName());
405:       assertFalse(node0.isArrayLit());
406:       assertFalse(node0.isEmpty());
407:       assertFalse(node0.isFor());
408:       assertFalse(node0.isGetterDef());
409:       assertFalse(node0.isDefaultCase());
410:       assertFalse(node0.isTry());
411:       assertFalse(node0.isCatch());
412:       assertFalse(node0.isIn());
413:       assertFalse(node0.isRegExp());
414:       assertFalse(node0.isNE());
415:       assertFalse(node0.isNull());
416:       assertFalse(node0.isTrue());
417:       assertFalse(node0.isIf());
418:       assertFalse(node0.isName());
419:       assertFalse(node0.isDelProp());
420:       assertFalse(node0.isVoid());
421:       assertFalse(node0.isThrow());
422:       assertFalse(node0.isCall());
423:       assertFalse(node0.isFalse());
424:       assertFalse(node0.isComma());
425:       assertFalse(node0.isSetterDef());
426:       assertFalse(node0.isInc());
427:       assertFalse(node0.isGetProp());
428:       assertFalse(node0.isWhile());
429:       assertFalse(node0.isAnd());
430:       assertFalse(node0.isContinue());
431:       assertFalse(node0.isString());
432:       assertFalse(node0.isNot());
433:       assertFalse(node0.isObjectLit());
434:       assertFalse(node0.isFunction());
435:       assertFalse(node0.isDebugger());
436:       assertEquals((-1), node0.getSourcePosition());
437:       assertEquals(544, node0.getType());
438:       assertFalse(iterable0.contains(node0));
439:       
440:       boolean boolean1 = node0.isStringKey();
441:       assertFalse(boolean1);
442:       assertEquals(57, Node.LAST_PROP);
443:       assertEquals(15, Node.NO_SIDE_EFFECTS);
444:       assertEquals(49, Node.DIRECT_EVAL);
445:       assertEquals(32, Node.INCRDECR_PROP);
446:       assertEquals(1, Node.DECR_FLAG);
447:       assertEquals(52, Node.LENGTH);
448:       assertEquals(57, Node.REFLECTED_OBJECT);
449:       assertEquals(46, Node.IS_NAMESPACE);
450:       assertEquals(54, Node.SLASH_V);
451:       assertEquals(51, Node.STATIC_SOURCE_FILE);
452:       assertEquals(50, Node.FREE_CALL);
453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(29, Node.JSDOC_INFO_PROP);
456:       assertEquals(40, Node.ORIGINALNAME_PROP);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(39, Node.EMPTY_BLOCK);
459:       assertEquals(2, Node.POST_FLAG);
460:       assertEquals(30, Node.VAR_ARGS_NAME);
461:       assertEquals(43, Node.IS_CONSTANT_NAME);
462:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
463:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
464:       assertEquals(53, Node.INPUT_ID);
465:       assertEquals(55, Node.INFERRED_FUNCTION);
466:       assertEquals(8, Node.FLAG_NO_THROWS);
467:       assertEquals(36, Node.QUOTED_PROP);
468:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
469:       assertEquals(56, Node.CHANGE_TIME);
470:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
471:       assertEquals(37, Node.OPT_ARG_NAME);
472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
473:       assertEquals(48, Node.DIRECTIVES);
474:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
475:       assertEquals(12, Node.COLUMN_BITS);
476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
477:       assertEquals(4095, Node.COLUMN_MASK);
478:       assertTrue(boolean1 == boolean0);
479:       assertFalse(node0.isCast());
480:       assertFalse(node0.isGetElem());
481:       assertFalse(node0.isAssign());
482:       assertFalse(node0.hasChildren());
483:       assertFalse(node0.isNumber());
484:       assertFalse(node0.isDec());
485:       assertFalse(node0.isTypeOf());
486:       assertFalse(node0.isScript());
487:       assertFalse(node0.isAssignAdd());
488:       assertFalse(node0.hasOneChild());
489:       assertFalse(node0.hasMoreThanOneChild());
490:       assertFalse(node0.isInstanceOf());
491:       assertFalse(node0.isReturn());
492:       assertFalse(node0.isWith());
493:       assertFalse(node0.isOr());
494:       assertFalse(node0.isExprResult());
495:       assertEquals((-1), node0.getLineno());
496:       assertFalse(node0.isBreak());
497:       assertFalse(node0.isStringKey());
498:       assertFalse(node0.isHook());
499:       assertFalse(node0.isVar());
500:       assertFalse(node0.isThis());
501:       assertFalse(node0.isBlock());
502:       assertFalse(node0.isAdd());
503:       assertFalse(node0.isDo());
504:       assertFalse(node0.isCase());
505:       assertFalse(node0.isNew());
506:       assertFalse(node0.isLabel());
507:       assertEquals(0, node0.getChildCount());
508:       assertFalse(node0.isSwitch());
509:       assertFalse(node0.isParamList());
510:       assertEquals((-1), node0.getCharno());
511:       assertFalse(node0.isLabelName());
512:       assertFalse(node0.isArrayLit());
513:       assertFalse(node0.isEmpty());
514:       assertFalse(node0.isFor());
515:       assertFalse(node0.isGetterDef());
516:       assertFalse(node0.isDefaultCase());
517:       assertFalse(node0.isTry());
518:       assertFalse(node0.isCatch());
519:       assertFalse(node0.isIn());
520:       assertFalse(node0.isRegExp());
521:       assertFalse(node0.isNE());
522:       assertFalse(node0.isNull());
523:       assertFalse(node0.isTrue());
524:       assertFalse(node0.isIf());
525:       assertFalse(node0.isName());
526:       assertFalse(node0.isDelProp());
527:       assertFalse(node0.isVoid());
528:       assertFalse(node0.isThrow());
529:       assertFalse(node0.isCall());
530:       assertFalse(node0.isFalse());
531:       assertFalse(node0.isComma());
532:       assertFalse(node0.isSetterDef());
533:       assertFalse(node0.isInc());
534:       assertFalse(node0.isGetProp());
535:       assertFalse(node0.isWhile());
536:       assertFalse(node0.isAnd());
537:       assertFalse(node0.isContinue());
538:       assertFalse(node0.isString());
539:       assertFalse(node0.isNot());
540:       assertFalse(node0.isObjectLit());
541:       assertFalse(node0.isFunction());
542:       assertFalse(node0.isDebugger());
543:       assertEquals((-1), node0.getSourcePosition());
544:       assertEquals(544, node0.getType());
545:       
546:       boolean boolean2 = node0.isCase();
547:       assertFalse(boolean2);
548:       assertEquals(57, Node.LAST_PROP);
549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
550:       assertEquals(49, Node.DIRECT_EVAL);
551:       assertEquals(32, Node.INCRDECR_PROP);
552:       assertEquals(1, Node.DECR_FLAG);
553:       assertEquals(52, Node.LENGTH);
554:       assertEquals(57, Node.REFLECTED_OBJECT);
555:       assertEquals(46, Node.IS_NAMESPACE);
556:       assertEquals(54, Node.SLASH_V);
557:       assertEquals(51, Node.STATIC_SOURCE_FILE);
558:       assertEquals(50, Node.FREE_CALL);
559:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
560:       assertEquals(47, Node.IS_DISPATCHER);
561:       assertEquals(29, Node.JSDOC_INFO_PROP);
562:       assertEquals(40, Node.ORIGINALNAME_PROP);
563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
564:       assertEquals(39, Node.EMPTY_BLOCK);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(30, Node.VAR_ARGS_NAME);
567:       assertEquals(43, Node.IS_CONSTANT_NAME);
568:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
569:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
570:       assertEquals(53, Node.INPUT_ID);
571:       assertEquals(55, Node.INFERRED_FUNCTION);
572:       assertEquals(8, Node.FLAG_NO_THROWS);
573:       assertEquals(36, Node.QUOTED_PROP);
574:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
575:       assertEquals(56, Node.CHANGE_TIME);
576:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
577:       assertEquals(37, Node.OPT_ARG_NAME);
578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
579:       assertEquals(48, Node.DIRECTIVES);
580:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
581:       assertEquals(12, Node.COLUMN_BITS);
582:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertTrue(boolean2 == boolean1);
585:       assertTrue(boolean2 == boolean0);
586:       assertFalse(node0.isCast());
587:       assertFalse(node0.isGetElem());
588:       assertFalse(node0.isAssign());
589:       assertFalse(node0.hasChildren());
590:       assertFalse(node0.isNumber());
591:       assertFalse(node0.isDec());
592:       assertFalse(node0.isTypeOf());
593:       assertFalse(node0.isScript());
594:       assertFalse(node0.isAssignAdd());
595:       assertFalse(node0.hasOneChild());
596:       assertFalse(node0.hasMoreThanOneChild());
597:       assertFalse(node0.isInstanceOf());
598:       assertFalse(node0.isReturn());
599:       assertFalse(node0.isWith());
600:       assertFalse(node0.isOr());
601:       assertFalse(node0.isExprResult());
602:       assertEquals((-1), node0.getLineno());
603:       assertFalse(node0.isBreak());
604:       assertFalse(node0.isStringKey());
605:       assertFalse(node0.isHook());
606:       assertFalse(node0.isVar());
607:       assertFalse(node0.isThis());
608:       assertFalse(node0.isBlock());
609:       assertFalse(node0.isAdd());
610:       assertFalse(node0.isDo());
611:       assertFalse(node0.isCase());
612:       assertFalse(node0.isNew());
613:       assertFalse(node0.isLabel());
614:       assertEquals(0, node0.getChildCount());
615:       assertFalse(node0.isSwitch());
616:       assertFalse(node0.isParamList());
617:       assertEquals((-1), node0.getCharno());
618:       assertFalse(node0.isLabelName());
619:       assertFalse(node0.isArrayLit());
620:       assertFalse(node0.isEmpty());
621:       assertFalse(node0.isFor());
622:       assertFalse(node0.isGetterDef());
623:       assertFalse(node0.isDefaultCase());
624:       assertFalse(node0.isTry());
625:       assertFalse(node0.isCatch());
626:       assertFalse(node0.isIn());
627:       assertFalse(node0.isRegExp());
628:       assertFalse(node0.isNE());
629:       assertFalse(node0.isNull());
630:       assertFalse(node0.isTrue());
631:       assertFalse(node0.isIf());
632:       assertFalse(node0.isName());
633:       assertFalse(node0.isDelProp());
634:       assertFalse(node0.isVoid());
635:       assertFalse(node0.isThrow());
636:       assertFalse(node0.isCall());
637:       assertFalse(node0.isFalse());
638:       assertFalse(node0.isComma());
639:       assertFalse(node0.isSetterDef());
640:       assertFalse(node0.isInc());
641:       assertFalse(node0.isGetProp());
642:       assertFalse(node0.isWhile());
643:       assertFalse(node0.isAnd());
644:       assertFalse(node0.isContinue());
645:       assertFalse(node0.isString());
646:       assertFalse(node0.isNot());
647:       assertFalse(node0.isObjectLit());
648:       assertFalse(node0.isFunction());
649:       assertFalse(node0.isDebugger());
650:       assertEquals((-1), node0.getSourcePosition());
651:       assertEquals(544, node0.getType());
652:       
653:       boolean boolean3 = node0.isCatch();
654:       assertFalse(boolean3);
655:       assertEquals(57, Node.LAST_PROP);
656:       assertEquals(15, Node.NO_SIDE_EFFECTS);
657:       assertEquals(49, Node.DIRECT_EVAL);
658:       assertEquals(32, Node.INCRDECR_PROP);
659:       assertEquals(1, Node.DECR_FLAG);
660:       assertEquals(52, Node.LENGTH);
661:       assertEquals(57, Node.REFLECTED_OBJECT);
662:       assertEquals(46, Node.IS_NAMESPACE);
663:       assertEquals(54, Node.SLASH_V);
664:       assertEquals(51, Node.STATIC_SOURCE_FILE);
665:       assertEquals(50, Node.FREE_CALL);
666:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
667:       assertEquals(47, Node.IS_DISPATCHER);
668:       assertEquals(29, Node.JSDOC_INFO_PROP);
669:       assertEquals(40, Node.ORIGINALNAME_PROP);
670:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
671:       assertEquals(39, Node.EMPTY_BLOCK);
672:       assertEquals(2, Node.POST_FLAG);
673:       assertEquals(30, Node.VAR_ARGS_NAME);
674:       assertEquals(43, Node.IS_CONSTANT_NAME);
675:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
676:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
677:       assertEquals(53, Node.INPUT_ID);
678:       assertEquals(55, Node.INFERRED_FUNCTION);
679:       assertEquals(8, Node.FLAG_NO_THROWS);
680:       assertEquals(36, Node.QUOTED_PROP);
681:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
682:       assertEquals(56, Node.CHANGE_TIME);
683:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
684:       assertEquals(37, Node.OPT_ARG_NAME);
685:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
686:       assertEquals(48, Node.DIRECTIVES);
687:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
688:       assertEquals(12, Node.COLUMN_BITS);
689:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
690:       assertEquals(4095, Node.COLUMN_MASK);
691:       assertTrue(boolean3 == boolean2);
692:       assertTrue(boolean3 == boolean0);
693:       assertTrue(boolean3 == boolean1);
694:       assertFalse(node0.isCast());
695:       assertFalse(node0.isGetElem());
696:       assertFalse(node0.isAssign());
697:       assertFalse(node0.hasChildren());
698:       assertFalse(node0.isNumber());
699:       assertFalse(node0.isDec());
700:       assertFalse(node0.isTypeOf());
701:       assertFalse(node0.isScript());
702:       assertFalse(node0.isAssignAdd());
703:       assertFalse(node0.hasOneChild());
704:       assertFalse(node0.hasMoreThanOneChild());
705:       assertFalse(node0.isInstanceOf());
706:       assertFalse(node0.isReturn());
707:       assertFalse(node0.isWith());
708:       assertFalse(node0.isOr());
709:       assertFalse(node0.isExprResult());
710:       assertEquals((-1), node0.getLineno());
711:       assertFalse(node0.isBreak());
712:       assertFalse(node0.isStringKey());
713:       assertFalse(node0.isHook());
714:       assertFalse(node0.isVar());
715:       assertFalse(node0.isThis());
716:       assertFalse(node0.isBlock());
717:       assertFalse(node0.isAdd());
718:       assertFalse(node0.isDo());
719:       assertFalse(node0.isCase());
720:       assertFalse(node0.isNew());
721:       assertFalse(node0.isLabel());
722:       assertEquals(0, node0.getChildCount());
723:       assertFalse(node0.isSwitch());
724:       assertFalse(node0.isParamList());
725:       assertEquals((-1), node0.getCharno());
726:       assertFalse(node0.isLabelName());
727:       assertFalse(node0.isArrayLit());
728:       assertFalse(node0.isEmpty());
729:       assertFalse(node0.isFor());
730:       assertFalse(node0.isGetterDef());
731:       assertFalse(node0.isDefaultCase());
732:       assertFalse(node0.isTry());
733:       assertFalse(node0.isCatch());
734:       assertFalse(node0.isIn());
735:       assertFalse(node0.isRegExp());
736:       assertFalse(node0.isNE());
737:       assertFalse(node0.isNull());
738:       assertFalse(node0.isTrue());
739:       assertFalse(node0.isIf());
740:       assertFalse(node0.isName());
741:       assertFalse(node0.isDelProp());
742:       assertFalse(node0.isVoid());
743:       assertFalse(node0.isThrow());
744:       assertFalse(node0.isCall());
745:       assertFalse(node0.isFalse());
746:       assertFalse(node0.isComma());
747:       assertFalse(node0.isSetterDef());
748:       assertFalse(node0.isInc());
749:       assertFalse(node0.isGetProp());
750:       assertFalse(node0.isWhile());
751:       assertFalse(node0.isAnd());
752:       assertFalse(node0.isContinue());
753:       assertFalse(node0.isString());
754:       assertFalse(node0.isNot());
755:       assertFalse(node0.isObjectLit());
756:       assertFalse(node0.isFunction());
757:       assertFalse(node0.isDebugger());
758:       assertEquals((-1), node0.getSourcePosition());
759:       assertEquals(544, node0.getType());
760:       
761:       boolean boolean4 = node0.isCatch();
762:       assertFalse(boolean4);
763:       assertEquals(57, Node.LAST_PROP);
764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
765:       assertEquals(49, Node.DIRECT_EVAL);
766:       assertEquals(32, Node.INCRDECR_PROP);
767:       assertEquals(1, Node.DECR_FLAG);
768:       assertEquals(52, Node.LENGTH);
769:       assertEquals(57, Node.REFLECTED_OBJECT);
770:       assertEquals(46, Node.IS_NAMESPACE);
771:       assertEquals(54, Node.SLASH_V);
772:       assertEquals(51, Node.STATIC_SOURCE_FILE);
773:       assertEquals(50, Node.FREE_CALL);
774:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
775:       assertEquals(47, Node.IS_DISPATCHER);
776:       assertEquals(29, Node.JSDOC_INFO_PROP);
777:       assertEquals(40, Node.ORIGINALNAME_PROP);
778:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
779:       assertEquals(39, Node.EMPTY_BLOCK);
780:       assertEquals(2, Node.POST_FLAG);
781:       assertEquals(30, Node.VAR_ARGS_NAME);
782:       assertEquals(43, Node.IS_CONSTANT_NAME);
783:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
784:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
785:       assertEquals(53, Node.INPUT_ID);
786:       assertEquals(55, Node.INFERRED_FUNCTION);
787:       assertEquals(8, Node.FLAG_NO_THROWS);
788:       assertEquals(36, Node.QUOTED_PROP);
789:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
790:       assertEquals(56, Node.CHANGE_TIME);
791:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
792:       assertEquals(37, Node.OPT_ARG_NAME);
793:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
794:       assertEquals(48, Node.DIRECTIVES);
795:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
796:       assertEquals(12, Node.COLUMN_BITS);
797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
798:       assertEquals(4095, Node.COLUMN_MASK);
799:       assertTrue(boolean4 == boolean1);
800:       assertTrue(boolean4 == boolean0);
801:       assertTrue(boolean4 == boolean2);
802:       assertTrue(boolean4 == boolean3);
803:       assertFalse(node0.isCast());
804:       assertFalse(node0.isGetElem());
805:       assertFalse(node0.isAssign());
806:       assertFalse(node0.hasChildren());
807:       assertFalse(node0.isNumber());
808:       assertFalse(node0.isDec());
809:       assertFalse(node0.isTypeOf());
810:       assertFalse(node0.isScript());
811:       assertFalse(node0.isAssignAdd());
812:       assertFalse(node0.hasOneChild());
813:       assertFalse(node0.hasMoreThanOneChild());
814:       assertFalse(node0.isInstanceOf());
815:       assertFalse(node0.isReturn());
816:       assertFalse(node0.isWith());
817:       assertFalse(node0.isOr());
818:       assertFalse(node0.isExprResult());
819:       assertEquals((-1), node0.getLineno());
820:       assertFalse(node0.isBreak());
821:       assertFalse(node0.isStringKey());
822:       assertFalse(node0.isHook());
823:       assertFalse(node0.isVar());
824:       assertFalse(node0.isThis());
825:       assertFalse(node0.isBlock());
826:       assertFalse(node0.isAdd());
827:       assertFalse(node0.isDo());
828:       assertFalse(node0.isCase());
829:       assertFalse(node0.isNew());
830:       assertFalse(node0.isLabel());
831:       assertEquals(0, node0.getChildCount());
832:       assertFalse(node0.isSwitch());
833:       assertFalse(node0.isParamList());
834:       assertEquals((-1), node0.getCharno());
835:       assertFalse(node0.isLabelName());
836:       assertFalse(node0.isArrayLit());
837:       assertFalse(node0.isEmpty());
838:       assertFalse(node0.isFor());
839:       assertFalse(node0.isGetterDef());
840:       assertFalse(node0.isDefaultCase());
841:       assertFalse(node0.isTry());
842:       assertFalse(node0.isCatch());
843:       assertFalse(node0.isIn());
844:       assertFalse(node0.isRegExp());
845:       assertFalse(node0.isNE());
846:       assertFalse(node0.isNull());
847:       assertFalse(node0.isTrue());
848:       assertFalse(node0.isIf());
849:       assertFalse(node0.isName());
850:       assertFalse(node0.isDelProp());
851:       assertFalse(node0.isVoid());
852:       assertFalse(node0.isThrow());
853:       assertFalse(node0.isCall());
854:       assertFalse(node0.isFalse());
855:       assertFalse(node0.isComma());
856:       assertFalse(node0.isSetterDef());
857:       assertFalse(node0.isInc());
858:       assertFalse(node0.isGetProp());
859:       assertFalse(node0.isWhile());
860:       assertFalse(node0.isAnd());
861:       assertFalse(node0.isContinue());
862:       assertFalse(node0.isString());
863:       assertFalse(node0.isNot());
864:       assertFalse(node0.isObjectLit());
865:       assertFalse(node0.isFunction());
866:       assertFalse(node0.isDebugger());
867:       assertEquals((-1), node0.getSourcePosition());
868:       assertEquals(544, node0.getType());
869:       
870:       boolean boolean5 = node0.isNot();
871:       assertFalse(boolean5);
872:       assertEquals(57, Node.LAST_PROP);
873:       assertEquals(15, Node.NO_SIDE_EFFECTS);
874:       assertEquals(49, Node.DIRECT_EVAL);
875:       assertEquals(32, Node.INCRDECR_PROP);
876:       assertEquals(1, Node.DECR_FLAG);
877:       assertEquals(52, Node.LENGTH);
878:       assertEquals(57, Node.REFLECTED_OBJECT);
879:       assertEquals(46, Node.IS_NAMESPACE);
880:       assertEquals(54, Node.SLASH_V);
881:       assertEquals(51, Node.STATIC_SOURCE_FILE);
882:       assertEquals(50, Node.FREE_CALL);
883:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
884:       assertEquals(47, Node.IS_DISPATCHER);
885:       assertEquals(29, Node.JSDOC_INFO_PROP);
886:       assertEquals(40, Node.ORIGINALNAME_PROP);
887:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
888:       assertEquals(39, Node.EMPTY_BLOCK);
889:       assertEquals(2, Node.POST_FLAG);
890:       assertEquals(30, Node.VAR_ARGS_NAME);
891:       assertEquals(43, Node.IS_CONSTANT_NAME);
892:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
893:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
894:       assertEquals(53, Node.INPUT_ID);
895:       assertEquals(55, Node.INFERRED_FUNCTION);
896:       assertEquals(8, Node.FLAG_NO_THROWS);
897:       assertEquals(36, Node.QUOTED_PROP);
898:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
899:       assertEquals(56, Node.CHANGE_TIME);
900:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
901:       assertEquals(37, Node.OPT_ARG_NAME);
902:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
903:       assertEquals(48, Node.DIRECTIVES);
904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
905:       assertEquals(12, Node.COLUMN_BITS);
906:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertTrue(boolean5 == boolean3);
909:       assertTrue(boolean5 == boolean0);
910:       assertTrue(boolean5 == boolean4);
911:       assertTrue(boolean5 == boolean1);
912:       assertTrue(boolean5 == boolean2);
913:       assertFalse(node0.isCast());
914:       assertFalse(node0.isGetElem());
915:       assertFalse(node0.isAssign());
916:       assertFalse(node0.hasChildren());
917:       assertFalse(node0.isNumber());
918:       assertFalse(node0.isDec());
919:       assertFalse(node0.isTypeOf());
920:       assertFalse(node0.isScript());
921:       assertFalse(node0.isAssignAdd());
922:       assertFalse(node0.hasOneChild());
923:       assertFalse(node0.hasMoreThanOneChild());
924:       assertFalse(node0.isInstanceOf());
925:       assertFalse(node0.isReturn());
926:       assertFalse(node0.isWith());
927:       assertFalse(node0.isOr());
928:       assertFalse(node0.isExprResult());
929:       assertEquals((-1), node0.getLineno());
930:       assertFalse(node0.isBreak());
931:       assertFalse(node0.isStringKey());
932:       assertFalse(node0.isHook());
933:       assertFalse(node0.isVar());
934:       assertFalse(node0.isThis());
935:       assertFalse(node0.isBlock());
936:       assertFalse(node0.isAdd());
937:       assertFalse(node0.isDo());
938:       assertFalse(node0.isCase());
939:       assertFalse(node0.isNew());
940:       assertFalse(node0.isLabel());
941:       assertEquals(0, node0.getChildCount());
942:       assertFalse(node0.isSwitch());
943:       assertFalse(node0.isParamList());
944:       assertEquals((-1), node0.getCharno());
945:       assertFalse(node0.isLabelName());
946:       assertFalse(node0.isArrayLit());
947:       assertFalse(node0.isEmpty());
948:       assertFalse(node0.isFor());
949:       assertFalse(node0.isGetterDef());
950:       assertFalse(node0.isDefaultCase());
951:       assertFalse(node0.isTry());
952:       assertFalse(node0.isCatch());
953:       assertFalse(node0.isIn());
954:       assertFalse(node0.isRegExp());
955:       assertFalse(node0.isNE());
956:       assertFalse(node0.isNull());
957:       assertFalse(node0.isTrue());
958:       assertFalse(node0.isIf());
959:       assertFalse(node0.isName());
960:       assertFalse(node0.isDelProp());
961:       assertFalse(node0.isVoid());
962:       assertFalse(node0.isThrow());
963:       assertFalse(node0.isCall());
964:       assertFalse(node0.isFalse());
965:       assertFalse(node0.isComma());
966:       assertFalse(node0.isSetterDef());
967:       assertFalse(node0.isInc());
968:       assertFalse(node0.isGetProp());
969:       assertFalse(node0.isWhile());
970:       assertFalse(node0.isAnd());
971:       assertFalse(node0.isContinue());
972:       assertFalse(node0.isString());
973:       assertFalse(node0.isNot());
974:       assertFalse(node0.isObjectLit());
975:       assertFalse(node0.isFunction());
976:       assertFalse(node0.isDebugger());
977:       assertEquals((-1), node0.getSourcePosition());
978:       assertEquals(544, node0.getType());
979:   }
980: }
RegularFileObject[/tmp/EvoSuite_422_1628159317959/com/google/javascript/rhino/Node_422_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_422_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_422_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_422_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:38.091 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(544, "");
assertNotNull(node0);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(544, node0.getType());

boolean boolean0 = node0.isReturn();
assertFalse(boolean0);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(544, node0.getType());

node0.putIntProp(3, (-1741));
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(544, node0.getType());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(544, node0.getType());
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.isStringKey();
assertFalse(boolean1);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(544, node0.getType());

boolean boolean2 = node0.isCase();
assertFalse(boolean2);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(544, node0.getType());

boolean boolean3 = node0.isCatch();
assertFalse(boolean3);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(544, node0.getType());

boolean boolean4 = node0.isCatch();
assertFalse(boolean4);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(544, node0.getType());

boolean boolean5 = node0.isNot();
assertFalse(boolean5);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(544, node0.getType());


[MASTER] 10:28:41.507 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_461_1628159321245/com/google/javascript/rhino/Node_461_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_461_1628159321245/com/google/javascript/rhino/Node_461_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:41.507 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:41.507 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:41.507 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1743
[MASTER] 10:28:41.509 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_461_1628159321245/com/google/javascript/rhino/Node_461_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.JSTypeExpression;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_461_tmp__ESTest extends Node_461_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(1241, 1241, 1241);
23:       assertNotNull(node0);
24:       assertEquals(49, Node.DIRECT_EVAL);
25:       assertEquals(30, Node.VAR_ARGS_NAME);
26:       assertEquals(51, Node.STATIC_SOURCE_FILE);
27:       assertEquals(1, Node.DECR_FLAG);
28:       assertEquals(15, Node.NO_SIDE_EFFECTS);
29:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
30:       assertEquals(2, Node.POST_FLAG);
31:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
32:       assertEquals(32, Node.INCRDECR_PROP);
33:       assertEquals(57, Node.LAST_PROP);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(12, Node.COLUMN_BITS);
36:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
39:       assertEquals(29, Node.JSDOC_INFO_PROP);
40:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
41:       assertEquals(53, Node.INPUT_ID);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(8, Node.FLAG_NO_THROWS);
45:       assertEquals(36, Node.QUOTED_PROP);
46:       assertEquals(48, Node.DIRECTIVES);
47:       assertEquals(57, Node.REFLECTED_OBJECT);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(4095, Node.COLUMN_MASK);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(39, Node.EMPTY_BLOCK);
53:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
54:       assertEquals(40, Node.ORIGINALNAME_PROP);
55:       assertEquals(50, Node.FREE_CALL);
56:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
57:       assertEquals(54, Node.SLASH_V);
58:       assertEquals(46, Node.IS_NAMESPACE);
59:       assertEquals(43, Node.IS_CONSTANT_NAME);
60:       assertFalse(node0.hasOneChild());
61:       assertFalse(node0.isWith());
62:       assertFalse(node0.hasChildren());
63:       assertFalse(node0.isTypeOf());
64:       assertFalse(node0.isAssign());
65:       assertFalse(node0.isLabelName());
66:       assertFalse(node0.isDec());
67:       assertFalse(node0.isExprResult());
68:       assertFalse(node0.isGetElem());
69:       assertFalse(node0.isCast());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isAnd());
73:       assertFalse(node0.isComma());
74:       assertFalse(node0.isThis());
75:       assertEquals(1241, node0.getLineno());
76:       assertEquals(5084377, node0.getSourcePosition());
77:       assertFalse(node0.isWhile());
78:       assertFalse(node0.isNumber());
79:       assertFalse(node0.isNot());
80:       assertFalse(node0.isObjectLit());
81:       assertFalse(node0.isGetProp());
82:       assertFalse(node0.isScript());
83:       assertFalse(node0.isNew());
84:       assertFalse(node0.isSwitch());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isStringKey());
87:       assertFalse(node0.isBreak());
88:       assertFalse(node0.isName());
89:       assertFalse(node0.isCall());
90:       assertFalse(node0.isLabel());
91:       assertFalse(node0.isAssignAdd());
92:       assertEquals(0, node0.getChildCount());
93:       assertFalse(node0.isOr());
94:       assertFalse(node0.isNull());
95:       assertFalse(node0.isDefaultCase());
96:       assertFalse(node0.isDo());
97:       assertFalse(node0.isAdd());
98:       assertEquals(1241, node0.getCharno());
99:       assertFalse(node0.isEmpty());
100:       assertFalse(node0.isArrayLit());
101:       assertFalse(node0.isVoid());
102:       assertFalse(node0.isTry());
103:       assertFalse(node0.isTrue());
104:       assertFalse(node0.isDebugger());
105:       assertFalse(node0.isFor());
106:       assertFalse(node0.isDelProp());
107:       assertFalse(node0.isIf());
108:       assertFalse(node0.isRegExp());
109:       assertFalse(node0.isFunction());
110:       assertFalse(node0.isCatch());
111:       assertFalse(node0.isParamList());
112:       assertFalse(node0.isGetterDef());
113:       assertFalse(node0.isString());
114:       assertFalse(node0.isCase());
115:       assertFalse(node0.isHook());
116:       assertEquals(1241, node0.getType());
117:       assertFalse(node0.isBlock());
118:       assertFalse(node0.isThrow());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.hasMoreThanOneChild());
121:       assertFalse(node0.isFalse());
122:       assertFalse(node0.isIn());
123:       assertFalse(node0.isNE());
124:       assertFalse(node0.isInc());
125:       assertFalse(node0.isSetterDef());
126:       
127:       Node node1 = new Node(3316, node0, node0, node0, node0, 125, 114);
128:       assertNotNull(node1);
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(30, Node.VAR_ARGS_NAME);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(1, Node.DECR_FLAG);
133:       assertEquals(15, Node.NO_SIDE_EFFECTS);
134:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
135:       assertEquals(2, Node.POST_FLAG);
136:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
137:       assertEquals(32, Node.INCRDECR_PROP);
138:       assertEquals(57, Node.LAST_PROP);
139:       assertEquals(47, Node.IS_DISPATCHER);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
146:       assertEquals(53, Node.INPUT_ID);
147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
148:       assertEquals(37, Node.OPT_ARG_NAME);
149:       assertEquals(8, Node.FLAG_NO_THROWS);
150:       assertEquals(36, Node.QUOTED_PROP);
151:       assertEquals(48, Node.DIRECTIVES);
152:       assertEquals(57, Node.REFLECTED_OBJECT);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(55, Node.INFERRED_FUNCTION);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(40, Node.ORIGINALNAME_PROP);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
162:       assertEquals(54, Node.SLASH_V);
163:       assertEquals(46, Node.IS_NAMESPACE);
164:       assertEquals(43, Node.IS_CONSTANT_NAME);
165:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
166:       assertEquals(8, Node.FLAG_NO_THROWS);
167:       assertEquals(39, Node.EMPTY_BLOCK);
168:       assertEquals(48, Node.DIRECTIVES);
169:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
170:       assertEquals(55, Node.INFERRED_FUNCTION);
171:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
172:       assertEquals(40, Node.ORIGINALNAME_PROP);
173:       assertEquals(50, Node.FREE_CALL);
174:       assertEquals(43, Node.IS_CONSTANT_NAME);
175:       assertEquals(57, Node.REFLECTED_OBJECT);
176:       assertEquals(54, Node.SLASH_V);
177:       assertEquals(36, Node.QUOTED_PROP);
178:       assertEquals(52, Node.LENGTH);
179:       assertEquals(15, Node.NO_SIDE_EFFECTS);
180:       assertEquals(53, Node.INPUT_ID);
181:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
182:       assertEquals(30, Node.VAR_ARGS_NAME);
183:       assertEquals(57, Node.LAST_PROP);
184:       assertEquals(47, Node.IS_DISPATCHER);
185:       assertEquals(37, Node.OPT_ARG_NAME);
186:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
187:       assertEquals(2, Node.POST_FLAG);
188:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
189:       assertEquals(29, Node.JSDOC_INFO_PROP);
190:       assertEquals(51, Node.STATIC_SOURCE_FILE);
191:       assertEquals(49, Node.DIRECT_EVAL);
192:       assertEquals(56, Node.CHANGE_TIME);
193:       assertEquals(46, Node.IS_NAMESPACE);
194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
195:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
196:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
197:       assertEquals(4095, Node.COLUMN_MASK);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(1, Node.DECR_FLAG);
200:       assertEquals(12, Node.COLUMN_BITS);
201:       assertFalse(node1.equals((Object)node0));
202:       assertFalse(node0.hasOneChild());
203:       assertFalse(node0.isWith());
204:       assertFalse(node0.hasChildren());
205:       assertFalse(node0.isTypeOf());
206:       assertFalse(node0.isAssign());
207:       assertFalse(node0.isLabelName());
208:       assertFalse(node0.isDec());
209:       assertFalse(node0.isExprResult());
210:       assertFalse(node0.isGetElem());
211:       assertFalse(node0.isCast());
212:       assertFalse(node0.isInstanceOf());
213:       assertFalse(node0.isReturn());
214:       assertFalse(node0.isAnd());
215:       assertFalse(node0.isComma());
216:       assertFalse(node0.isThis());
217:       assertEquals(1241, node0.getLineno());
218:       assertEquals(5084377, node0.getSourcePosition());
219:       assertFalse(node0.isWhile());
220:       assertFalse(node0.isNumber());
221:       assertFalse(node0.isNot());
222:       assertFalse(node0.isObjectLit());
223:       assertFalse(node0.isGetProp());
224:       assertFalse(node0.isScript());
225:       assertFalse(node0.isNew());
226:       assertFalse(node0.isSwitch());
227:       assertFalse(node0.isVar());
228:       assertFalse(node0.isStringKey());
229:       assertFalse(node0.isBreak());
230:       assertFalse(node0.isName());
231:       assertFalse(node0.isCall());
232:       assertFalse(node0.isLabel());
233:       assertFalse(node0.isAssignAdd());
234:       assertEquals(0, node0.getChildCount());
235:       assertFalse(node0.isOr());
236:       assertFalse(node0.isNull());
237:       assertFalse(node0.isDefaultCase());
238:       assertFalse(node0.isDo());
239:       assertFalse(node0.isAdd());
240:       assertEquals(1241, node0.getCharno());
241:       assertFalse(node0.isEmpty());
242:       assertFalse(node0.isArrayLit());
243:       assertFalse(node0.isVoid());
244:       assertFalse(node0.isTry());
245:       assertFalse(node0.isTrue());
246:       assertFalse(node0.isDebugger());
247:       assertFalse(node0.isFor());
248:       assertFalse(node0.isDelProp());
249:       assertFalse(node0.isIf());
250:       assertFalse(node0.isRegExp());
251:       assertFalse(node0.isFunction());
252:       assertFalse(node0.isCatch());
253:       assertFalse(node0.isParamList());
254:       assertFalse(node0.isGetterDef());
255:       assertFalse(node0.isString());
256:       assertFalse(node0.isCase());
257:       assertFalse(node0.isHook());
258:       assertEquals(1241, node0.getType());
259:       assertFalse(node0.isBlock());
260:       assertFalse(node0.isThrow());
261:       assertFalse(node0.isContinue());
262:       assertFalse(node0.hasMoreThanOneChild());
263:       assertFalse(node0.isFalse());
264:       assertFalse(node0.isIn());
265:       assertFalse(node0.isNE());
266:       assertFalse(node0.isInc());
267:       assertFalse(node0.isSetterDef());
268:       assertFalse(node1.isWhile());
269:       assertFalse(node1.isDo());
270:       assertFalse(node1.isBlock());
271:       assertFalse(node1.isAssignAdd());
272:       assertFalse(node1.isNew());
273:       assertFalse(node1.isOr());
274:       assertFalse(node1.isAdd());
275:       assertFalse(node1.isDec());
276:       assertFalse(node1.isAssign());
277:       assertFalse(node1.isTypeOf());
278:       assertFalse(node1.isName());
279:       assertEquals(512114, node1.getSourcePosition());
280:       assertFalse(node1.isNull());
281:       assertFalse(node1.isReturn());
282:       assertFalse(node1.hasMoreThanOneChild());
283:       assertFalse(node1.isCatch());
284:       assertFalse(node1.isGetElem());
285:       assertFalse(node1.isExprResult());
286:       assertFalse(node1.isCall());
287:       assertFalse(node1.isWith());
288:       assertFalse(node1.isDefaultCase());
289:       assertFalse(node1.isRegExp());
290:       assertFalse(node1.isTrue());
291:       assertFalse(node1.isTry());
292:       assertFalse(node1.isScript());
293:       assertFalse(node1.isEmpty());
294:       assertFalse(node1.isNumber());
295:       assertFalse(node1.isLabelName());
296:       assertFalse(node1.isGetterDef());
297:       assertFalse(node1.isParamList());
298:       assertFalse(node1.isStringKey());
299:       assertEquals(114, node1.getCharno());
300:       assertFalse(node1.isVar());
301:       assertFalse(node1.isLabel());
302:       assertFalse(node1.isArrayLit());
303:       assertFalse(node1.isString());
304:       assertFalse(node1.isCase());
305:       assertFalse(node1.isSwitch());
306:       assertFalse(node1.isIn());
307:       assertFalse(node1.isInc());
308:       assertTrue(node1.hasOneChild());
309:       assertFalse(node1.isBreak());
310:       assertFalse(node1.isIf());
311:       assertEquals(3316, node1.getType());
312:       assertFalse(node1.isDelProp());
313:       assertFalse(node1.isComma());
314:       assertFalse(node1.isThis());
315:       assertFalse(node1.isHook());
316:       assertFalse(node1.isNE());
317:       assertFalse(node1.isFor());
318:       assertEquals(1, node1.getChildCount());
319:       assertEquals(125, node1.getLineno());
320:       assertFalse(node1.isVoid());
321:       assertFalse(node1.isInstanceOf());
322:       assertTrue(node1.hasChildren());
323:       assertFalse(node1.isNot());
324:       assertFalse(node1.isObjectLit());
325:       assertFalse(node1.isAnd());
326:       assertFalse(node1.isDebugger());
327:       assertFalse(node1.isSetterDef());
328:       assertFalse(node1.isGetProp());
329:       assertFalse(node1.isFalse());
330:       assertFalse(node1.isThrow());
331:       assertFalse(node1.isCast());
332:       assertFalse(node1.isFunction());
333:       assertFalse(node1.isContinue());
334:       
335:       Node node2 = new Node(3316, node1, node1, 15, 697);
336:       assertNotNull(node2);
337:       assertEquals(49, Node.DIRECT_EVAL);
338:       assertEquals(30, Node.VAR_ARGS_NAME);
339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
340:       assertEquals(1, Node.DECR_FLAG);
341:       assertEquals(15, Node.NO_SIDE_EFFECTS);
342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
343:       assertEquals(2, Node.POST_FLAG);
344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
345:       assertEquals(32, Node.INCRDECR_PROP);
346:       assertEquals(57, Node.LAST_PROP);
347:       assertEquals(47, Node.IS_DISPATCHER);
348:       assertEquals(12, Node.COLUMN_BITS);
349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
350:       assertEquals(52, Node.LENGTH);
351:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
352:       assertEquals(29, Node.JSDOC_INFO_PROP);
353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
354:       assertEquals(53, Node.INPUT_ID);
355:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
356:       assertEquals(37, Node.OPT_ARG_NAME);
357:       assertEquals(8, Node.FLAG_NO_THROWS);
358:       assertEquals(36, Node.QUOTED_PROP);
359:       assertEquals(48, Node.DIRECTIVES);
360:       assertEquals(57, Node.REFLECTED_OBJECT);
361:       assertEquals(56, Node.CHANGE_TIME);
362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
363:       assertEquals(4095, Node.COLUMN_MASK);
364:       assertEquals(55, Node.INFERRED_FUNCTION);
365:       assertEquals(39, Node.EMPTY_BLOCK);
366:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
367:       assertEquals(40, Node.ORIGINALNAME_PROP);
368:       assertEquals(50, Node.FREE_CALL);
369:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
370:       assertEquals(54, Node.SLASH_V);
371:       assertEquals(46, Node.IS_NAMESPACE);
372:       assertEquals(43, Node.IS_CONSTANT_NAME);
373:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
374:       assertEquals(8, Node.FLAG_NO_THROWS);
375:       assertEquals(39, Node.EMPTY_BLOCK);
376:       assertEquals(48, Node.DIRECTIVES);
377:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
378:       assertEquals(55, Node.INFERRED_FUNCTION);
379:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
380:       assertEquals(40, Node.ORIGINALNAME_PROP);
381:       assertEquals(50, Node.FREE_CALL);
382:       assertEquals(43, Node.IS_CONSTANT_NAME);
383:       assertEquals(57, Node.REFLECTED_OBJECT);
384:       assertEquals(54, Node.SLASH_V);
385:       assertEquals(36, Node.QUOTED_PROP);
386:       assertEquals(52, Node.LENGTH);
387:       assertEquals(15, Node.NO_SIDE_EFFECTS);
388:       assertEquals(53, Node.INPUT_ID);
389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
390:       assertEquals(30, Node.VAR_ARGS_NAME);
391:       assertEquals(57, Node.LAST_PROP);
392:       assertEquals(47, Node.IS_DISPATCHER);
393:       assertEquals(37, Node.OPT_ARG_NAME);
394:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
395:       assertEquals(2, Node.POST_FLAG);
396:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
397:       assertEquals(29, Node.JSDOC_INFO_PROP);
398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
399:       assertEquals(49, Node.DIRECT_EVAL);
400:       assertEquals(56, Node.CHANGE_TIME);
401:       assertEquals(46, Node.IS_NAMESPACE);
402:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
403:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
405:       assertEquals(4095, Node.COLUMN_MASK);
406:       assertEquals(32, Node.INCRDECR_PROP);
407:       assertEquals(1, Node.DECR_FLAG);
408:       assertEquals(12, Node.COLUMN_BITS);
409:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
410:       assertEquals(47, Node.IS_DISPATCHER);
411:       assertEquals(56, Node.CHANGE_TIME);
412:       assertEquals(32, Node.INCRDECR_PROP);
413:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
414:       assertEquals(29, Node.JSDOC_INFO_PROP);
415:       assertEquals(53, Node.INPUT_ID);
416:       assertEquals(30, Node.VAR_ARGS_NAME);
417:       assertEquals(57, Node.LAST_PROP);
418:       assertEquals(46, Node.IS_NAMESPACE);
419:       assertEquals(43, Node.IS_CONSTANT_NAME);
420:       assertEquals(51, Node.STATIC_SOURCE_FILE);
421:       assertEquals(54, Node.SLASH_V);
422:       assertEquals(2, Node.POST_FLAG);
423:       assertEquals(40, Node.ORIGINALNAME_PROP);
424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
425:       assertEquals(50, Node.FREE_CALL);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(57, Node.REFLECTED_OBJECT);
428:       assertEquals(52, Node.LENGTH);
429:       assertEquals(8, Node.FLAG_NO_THROWS);
430:       assertEquals(15, Node.NO_SIDE_EFFECTS);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(39, Node.EMPTY_BLOCK);
433:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
434:       assertEquals(1, Node.DECR_FLAG);
435:       assertEquals(49, Node.DIRECT_EVAL);
436:       assertEquals(36, Node.QUOTED_PROP);
437:       assertEquals(12, Node.COLUMN_BITS);
438:       assertEquals(48, Node.DIRECTIVES);
439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
440:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
441:       assertEquals(37, Node.OPT_ARG_NAME);
442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
443:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
444:       assertEquals(4095, Node.COLUMN_MASK);
445:       assertFalse(node0.equals((Object)node1));
446:       assertFalse(node1.equals((Object)node0));
447:       assertFalse(node2.equals((Object)node0));
448:       assertFalse(node2.equals((Object)node1));
449:       assertFalse(node0.hasOneChild());
450:       assertFalse(node0.isWith());
451:       assertFalse(node0.hasChildren());
452:       assertFalse(node0.isTypeOf());
453:       assertFalse(node0.isAssign());
454:       assertFalse(node0.isLabelName());
455:       assertFalse(node0.isDec());
456:       assertFalse(node0.isExprResult());
457:       assertFalse(node0.isGetElem());
458:       assertFalse(node0.isCast());
459:       assertFalse(node0.isInstanceOf());
460:       assertFalse(node0.isReturn());
461:       assertFalse(node0.isAnd());
462:       assertFalse(node0.isComma());
463:       assertFalse(node0.isThis());
464:       assertEquals(1241, node0.getLineno());
465:       assertEquals(5084377, node0.getSourcePosition());
466:       assertFalse(node0.isWhile());
467:       assertFalse(node0.isNumber());
468:       assertFalse(node0.isNot());
469:       assertFalse(node0.isObjectLit());
470:       assertFalse(node0.isGetProp());
471:       assertFalse(node0.isScript());
472:       assertFalse(node0.isNew());
473:       assertFalse(node0.isSwitch());
474:       assertFalse(node0.isVar());
475:       assertFalse(node0.isStringKey());
476:       assertFalse(node0.isBreak());
477:       assertFalse(node0.isName());
478:       assertFalse(node0.isCall());
479:       assertFalse(node0.isLabel());
480:       assertFalse(node0.isAssignAdd());
481:       assertEquals(0, node0.getChildCount());
482:       assertFalse(node0.isOr());
483:       assertFalse(node0.isNull());
484:       assertFalse(node0.isDefaultCase());
485:       assertFalse(node0.isDo());
486:       assertFalse(node0.isAdd());
487:       assertEquals(1241, node0.getCharno());
488:       assertFalse(node0.isEmpty());
489:       assertFalse(node0.isArrayLit());
490:       assertFalse(node0.isVoid());
491:       assertFalse(node0.isTry());
492:       assertFalse(node0.isTrue());
493:       assertFalse(node0.isDebugger());
494:       assertFalse(node0.isFor());
495:       assertFalse(node0.isDelProp());
496:       assertFalse(node0.isIf());
497:       assertFalse(node0.isRegExp());
498:       assertFalse(node0.isFunction());
499:       assertFalse(node0.isCatch());
500:       assertFalse(node0.isParamList());
501:       assertFalse(node0.isGetterDef());
502:       assertFalse(node0.isString());
503:       assertFalse(node0.isCase());
504:       assertFalse(node0.isHook());
505:       assertEquals(1241, node0.getType());
506:       assertFalse(node0.isBlock());
507:       assertFalse(node0.isThrow());
508:       assertFalse(node0.isContinue());
509:       assertFalse(node0.hasMoreThanOneChild());
510:       assertFalse(node0.isFalse());
511:       assertFalse(node0.isIn());
512:       assertFalse(node0.isNE());
513:       assertFalse(node0.isInc());
514:       assertFalse(node0.isSetterDef());
515:       assertFalse(node1.isWhile());
516:       assertFalse(node1.isDo());
517:       assertFalse(node1.isBlock());
518:       assertFalse(node1.isAssignAdd());
519:       assertFalse(node1.isNew());
520:       assertFalse(node1.isOr());
521:       assertFalse(node1.isAdd());
522:       assertFalse(node1.isDec());
523:       assertFalse(node1.isAssign());
524:       assertFalse(node1.isTypeOf());
525:       assertFalse(node1.isName());
526:       assertEquals(512114, node1.getSourcePosition());
527:       assertFalse(node1.isNull());
528:       assertFalse(node1.isReturn());
529:       assertFalse(node1.hasMoreThanOneChild());
530:       assertFalse(node1.isCatch());
531:       assertFalse(node1.isGetElem());
532:       assertFalse(node1.isExprResult());
533:       assertFalse(node1.isCall());
534:       assertFalse(node1.isWith());
535:       assertFalse(node1.isDefaultCase());
536:       assertFalse(node1.isRegExp());
537:       assertFalse(node1.isTrue());
538:       assertFalse(node1.isTry());
539:       assertFalse(node1.isScript());
540:       assertFalse(node1.isEmpty());
541:       assertFalse(node1.isNumber());
542:       assertFalse(node1.isLabelName());
543:       assertFalse(node1.isGetterDef());
544:       assertFalse(node1.isParamList());
545:       assertFalse(node1.isStringKey());
546:       assertEquals(114, node1.getCharno());
547:       assertFalse(node1.isVar());
548:       assertFalse(node1.isLabel());
549:       assertFalse(node1.isArrayLit());
550:       assertFalse(node1.isString());
551:       assertFalse(node1.isCase());
552:       assertFalse(node1.isSwitch());
553:       assertFalse(node1.isIn());
554:       assertFalse(node1.isInc());
555:       assertTrue(node1.hasOneChild());
556:       assertFalse(node1.isBreak());
557:       assertFalse(node1.isIf());
558:       assertEquals(3316, node1.getType());
559:       assertFalse(node1.isDelProp());
560:       assertFalse(node1.isComma());
561:       assertFalse(node1.isThis());
562:       assertFalse(node1.isHook());
563:       assertFalse(node1.isNE());
564:       assertFalse(node1.isFor());
565:       assertEquals(1, node1.getChildCount());
566:       assertEquals(125, node1.getLineno());
567:       assertFalse(node1.isVoid());
568:       assertFalse(node1.isInstanceOf());
569:       assertTrue(node1.hasChildren());
570:       assertFalse(node1.isNot());
571:       assertFalse(node1.isObjectLit());
572:       assertFalse(node1.isAnd());
573:       assertFalse(node1.isDebugger());
574:       assertFalse(node1.isSetterDef());
575:       assertFalse(node1.isGetProp());
576:       assertFalse(node1.isFalse());
577:       assertFalse(node1.isThrow());
578:       assertFalse(node1.isCast());
579:       assertFalse(node1.isFunction());
580:       assertFalse(node1.isContinue());
581:       assertFalse(node2.isInstanceOf());
582:       assertEquals(62137, node2.getSourcePosition());
583:       assertFalse(node2.isGetProp());
584:       assertFalse(node2.isWith());
585:       assertFalse(node2.isFalse());
586:       assertFalse(node2.isThrow());
587:       assertFalse(node2.isComma());
588:       assertFalse(node2.isThis());
589:       assertFalse(node2.isHook());
590:       assertFalse(node2.isGetElem());
591:       assertFalse(node2.isExprResult());
592:       assertFalse(node2.isInc());
593:       assertFalse(node2.isBreak());
594:       assertEquals(3316, node2.getType());
595:       assertEquals(1, node2.getChildCount());
596:       assertFalse(node2.isOr());
597:       assertFalse(node2.isAssignAdd());
598:       assertFalse(node2.hasMoreThanOneChild());
599:       assertFalse(node2.isCase());
600:       assertTrue(node2.hasChildren());
601:       assertFalse(node2.isDo());
602:       assertFalse(node2.isLabel());
603:       assertFalse(node2.isFor());
604:       assertFalse(node2.isBlock());
605:       assertEquals(15, node2.getLineno());
606:       assertFalse(node2.isTry());
607:       assertFalse(node2.isScript());
608:       assertEquals(697, node2.getCharno());
609:       assertFalse(node2.isArrayLit());
610:       assertFalse(node2.isGetterDef());
611:       assertFalse(node2.isLabelName());
612:       assertFalse(node2.isNumber());
613:       assertFalse(node2.isSwitch());
614:       assertFalse(node2.isStringKey());
615:       assertFalse(node2.isParamList());
616:       assertFalse(node2.isCatch());
617:       assertFalse(node2.isSetterDef());
618:       assertFalse(node2.isDefaultCase());
619:       assertFalse(node2.isRegExp());
620:       assertFalse(node2.isFunction());
621:       assertFalse(node2.isVar());
622:       assertFalse(node2.isVoid());
623:       assertFalse(node2.isNew());
624:       assertFalse(node2.isAdd());
625:       assertFalse(node2.isEmpty());
626:       assertFalse(node2.isCall());
627:       assertFalse(node2.isDelProp());
628:       assertFalse(node2.isIf());
629:       assertFalse(node2.isName());
630:       assertFalse(node2.isNull());
631:       assertFalse(node2.isNE());
632:       assertFalse(node2.isTrue());
633:       assertFalse(node2.isIn());
634:       assertFalse(node2.isContinue());
635:       assertFalse(node2.isDec());
636:       assertFalse(node2.isWhile());
637:       assertFalse(node2.isAssign());
638:       assertFalse(node2.isTypeOf());
639:       assertTrue(node2.hasOneChild());
640:       assertFalse(node2.isReturn());
641:       assertFalse(node2.isCast());
642:       assertFalse(node2.isString());
643:       assertFalse(node2.isNot());
644:       assertFalse(node2.isAnd());
645:       assertFalse(node2.isObjectLit());
646:       assertFalse(node2.isDebugger());
647:       
648:       JSDocInfo jSDocInfo0 = new JSDocInfo();
649:       assertNotNull(jSDocInfo0);
650:       assertFalse(jSDocInfo0.hasThisType());
651:       assertFalse(jSDocInfo0.isJaggerInject());
652:       assertFalse(jSDocInfo0.hasModifies());
653:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
654:       assertNull(jSDocInfo0.getMeaning());
655:       assertFalse(jSDocInfo0.isConstructor());
656:       assertFalse(jSDocInfo0.isConstant());
657:       assertNull(jSDocInfo0.getLendsName());
658:       assertFalse(jSDocInfo0.containsDeclaration());
659:       assertEquals("JSDocInfo", jSDocInfo0.toString());
660:       assertFalse(jSDocInfo0.isExport());
661:       assertFalse(jSDocInfo0.isWizaction());
662:       assertFalse(jSDocInfo0.isNgInject());
663:       assertEquals(0, jSDocInfo0.getParameterCount());
664:       assertFalse(jSDocInfo0.isInterface());
665:       assertNull(jSDocInfo0.getBlockDescription());
666:       assertFalse(jSDocInfo0.hasFileOverview());
667:       assertFalse(jSDocInfo0.hasReturnType());
668:       assertFalse(jSDocInfo0.isNoAlias());
669:       assertFalse(jSDocInfo0.isIdGenerator());
670:       assertFalse(jSDocInfo0.hasEnumParameterType());
671:       assertFalse(jSDocInfo0.shouldPreserveTry());
672:       assertFalse(jSDocInfo0.isNoCompile());
673:       assertFalse(jSDocInfo0.isDefine());
674:       assertNull(jSDocInfo0.getFileOverview());
675:       assertNull(jSDocInfo0.getVisibility());
676:       assertFalse(jSDocInfo0.makesStructs());
677:       assertNull(jSDocInfo0.getDescription());
678:       assertFalse(jSDocInfo0.isJavaDispatch());
679:       assertFalse(jSDocInfo0.isNoSideEffects());
680:       assertFalse(jSDocInfo0.isDeprecated());
681:       assertFalse(jSDocInfo0.makesDicts());
682:       assertFalse(jSDocInfo0.isJaggerModule());
683:       assertNull(jSDocInfo0.getDeprecationReason());
684:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
685:       assertFalse(jSDocInfo0.isMappedIdGenerator());
686:       assertFalse(jSDocInfo0.isImplicitCast());
687:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
688:       assertFalse(jSDocInfo0.isNoShadow());
689:       assertFalse(jSDocInfo0.isOverride());
690:       assertFalse(jSDocInfo0.isExpose());
691:       assertNull(jSDocInfo0.getVersion());
692:       assertFalse(jSDocInfo0.isExterns());
693:       assertFalse(jSDocInfo0.isHidden());
694:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
695:       assertNull(jSDocInfo0.getLicense());
696:       assertFalse(jSDocInfo0.isNoTypeCheck());
697:       assertFalse(jSDocInfo0.isDisposes());
698:       assertFalse(jSDocInfo0.hasTypedefType());
699:       assertFalse(jSDocInfo0.isJaggerProvide());
700:       assertNull(jSDocInfo0.getReturnDescription());
701:       assertNull(jSDocInfo0.getOriginalCommentString());
702:       assertFalse(jSDocInfo0.hasType());
703:       assertFalse(jSDocInfo0.isStableIdGenerator());
704:       assertFalse(jSDocInfo0.hasBaseType());
705:       
706:       JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "");
707:       assertNotNull(jSTypeExpression0);
708:       assertEquals(49, Node.DIRECT_EVAL);
709:       assertEquals(30, Node.VAR_ARGS_NAME);
710:       assertEquals(51, Node.STATIC_SOURCE_FILE);
711:       assertEquals(1, Node.DECR_FLAG);
712:       assertEquals(15, Node.NO_SIDE_EFFECTS);
713:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
714:       assertEquals(2, Node.POST_FLAG);
715:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
716:       assertEquals(32, Node.INCRDECR_PROP);
717:       assertEquals(57, Node.LAST_PROP);
718:       assertEquals(47, Node.IS_DISPATCHER);
719:       assertEquals(12, Node.COLUMN_BITS);
720:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
721:       assertEquals(52, Node.LENGTH);
722:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
723:       assertEquals(29, Node.JSDOC_INFO_PROP);
724:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
725:       assertEquals(53, Node.INPUT_ID);
726:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
727:       assertEquals(37, Node.OPT_ARG_NAME);
728:       assertEquals(8, Node.FLAG_NO_THROWS);
729:       assertEquals(36, Node.QUOTED_PROP);
730:       assertEquals(48, Node.DIRECTIVES);
731:       assertEquals(57, Node.REFLECTED_OBJECT);
732:       assertEquals(56, Node.CHANGE_TIME);
733:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
734:       assertEquals(4095, Node.COLUMN_MASK);
735:       assertEquals(55, Node.INFERRED_FUNCTION);
736:       assertEquals(39, Node.EMPTY_BLOCK);
737:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
738:       assertEquals(40, Node.ORIGINALNAME_PROP);
739:       assertEquals(50, Node.FREE_CALL);
740:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
741:       assertEquals(54, Node.SLASH_V);
742:       assertEquals(46, Node.IS_NAMESPACE);
743:       assertEquals(43, Node.IS_CONSTANT_NAME);
744:       assertFalse(node0.equals((Object)node1));
745:       assertFalse(node0.equals((Object)node2));
746:       assertFalse(node0.hasOneChild());
747:       assertFalse(node0.isWith());
748:       assertFalse(node0.hasChildren());
749:       assertFalse(node0.isTypeOf());
750:       assertFalse(node0.isAssign());
751:       assertFalse(node0.isLabelName());
752:       assertFalse(node0.isDec());
753:       assertFalse(node0.isExprResult());
754:       assertFalse(node0.isGetElem());
755:       assertFalse(node0.isCast());
756:       assertFalse(node0.isInstanceOf());
757:       assertFalse(node0.isReturn());
758:       assertFalse(node0.isAnd());
759:       assertFalse(node0.isComma());
760:       assertFalse(node0.isThis());
761:       assertEquals(1241, node0.getLineno());
762:       assertEquals(5084377, node0.getSourcePosition());
763:       assertFalse(node0.isWhile());
764:       assertFalse(node0.isNumber());
765:       assertFalse(node0.isNot());
766:       assertFalse(node0.isObjectLit());
767:       assertFalse(node0.isGetProp());
768:       assertFalse(node0.isScript());
769:       assertFalse(node0.isNew());
770:       assertFalse(node0.isSwitch());
771:       assertFalse(node0.isVar());
772:       assertFalse(node0.isStringKey());
773:       assertFalse(node0.isBreak());
774:       assertFalse(node0.isName());
775:       assertFalse(node0.isCall());
776:       assertFalse(node0.isLabel());
777:       assertFalse(node0.isAssignAdd());
778:       assertEquals(0, node0.getChildCount());
779:       assertFalse(node0.isOr());
780:       assertFalse(node0.isNull());
781:       assertFalse(node0.isDefaultCase());
782:       assertFalse(node0.isDo());
783:       assertFalse(node0.isAdd());
784:       assertEquals(1241, node0.getCharno());
785:       assertFalse(node0.isEmpty());
786:       assertFalse(node0.isArrayLit());
787:       assertFalse(node0.isVoid());
788:       assertFalse(node0.isTry());
789:       assertFalse(node0.isTrue());
790:       assertFalse(node0.isDebugger());
791:       assertFalse(node0.isFor());
792:       assertFalse(node0.isDelProp());
793:       assertFalse(node0.isIf());
794:       assertFalse(node0.isRegExp());
795:       assertFalse(node0.isFunction());
796:       assertFalse(node0.isCatch());
797:       assertFalse(node0.isParamList());
798:       assertFalse(node0.isGetterDef());
799:       assertFalse(node0.isString());
800:       assertFalse(node0.isCase());
801:       assertFalse(node0.isHook());
802:       assertEquals(1241, node0.getType());
803:       assertFalse(node0.isBlock());
804:       assertFalse(node0.isThrow());
805:       assertFalse(node0.isContinue());
806:       assertFalse(node0.hasMoreThanOneChild());
807:       assertFalse(node0.isFalse());
808:       assertFalse(node0.isIn());
809:       assertFalse(node0.isNE());
810:       assertFalse(node0.isInc());
811:       assertFalse(node0.isSetterDef());
812:       assertFalse(jSTypeExpression0.isVarArgs());
813:       assertFalse(jSTypeExpression0.isOptionalArg());
814:       
815:       jSDocInfo0.setEnumParameterType(jSTypeExpression0);
816:       assertEquals(49, Node.DIRECT_EVAL);
817:       assertEquals(30, Node.VAR_ARGS_NAME);
818:       assertEquals(51, Node.STATIC_SOURCE_FILE);
819:       assertEquals(1, Node.DECR_FLAG);
820:       assertEquals(15, Node.NO_SIDE_EFFECTS);
821:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
822:       assertEquals(2, Node.POST_FLAG);
823:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
824:       assertEquals(32, Node.INCRDECR_PROP);
825:       assertEquals(57, Node.LAST_PROP);
826:       assertEquals(47, Node.IS_DISPATCHER);
827:       assertEquals(12, Node.COLUMN_BITS);
828:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
829:       assertEquals(52, Node.LENGTH);
830:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
831:       assertEquals(29, Node.JSDOC_INFO_PROP);
832:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
833:       assertEquals(53, Node.INPUT_ID);
834:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
835:       assertEquals(37, Node.OPT_ARG_NAME);
836:       assertEquals(8, Node.FLAG_NO_THROWS);
837:       assertEquals(36, Node.QUOTED_PROP);
838:       assertEquals(48, Node.DIRECTIVES);
839:       assertEquals(57, Node.REFLECTED_OBJECT);
840:       assertEquals(56, Node.CHANGE_TIME);
841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
842:       assertEquals(4095, Node.COLUMN_MASK);
843:       assertEquals(55, Node.INFERRED_FUNCTION);
844:       assertEquals(39, Node.EMPTY_BLOCK);
845:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
846:       assertEquals(40, Node.ORIGINALNAME_PROP);
847:       assertEquals(50, Node.FREE_CALL);
848:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
849:       assertEquals(54, Node.SLASH_V);
850:       assertEquals(46, Node.IS_NAMESPACE);
851:       assertEquals(43, Node.IS_CONSTANT_NAME);
852:       assertNotSame(node0, node1);
853:       assertNotSame(node0, node2);
854:       assertFalse(node0.equals((Object)node1));
855:       assertFalse(node0.equals((Object)node2));
856:       assertFalse(node0.hasOneChild());
857:       assertFalse(node0.isWith());
858:       assertFalse(node0.hasChildren());
859:       assertFalse(node0.isTypeOf());
860:       assertFalse(node0.isAssign());
861:       assertFalse(node0.isLabelName());
862:       assertFalse(node0.isDec());
863:       assertFalse(node0.isExprResult());
864:       assertFalse(node0.isGetElem());
865:       assertFalse(node0.isCast());
866:       assertFalse(node0.isInstanceOf());
867:       assertFalse(node0.isReturn());
868:       assertFalse(node0.isAnd());
869:       assertFalse(node0.isComma());
870:       assertFalse(node0.isThis());
871:       assertEquals(1241, node0.getLineno());
872:       assertEquals(5084377, node0.getSourcePosition());
873:       assertFalse(node0.isWhile());
874:       assertFalse(node0.isNumber());
875:       assertFalse(node0.isNot());
876:       assertFalse(node0.isObjectLit());
877:       assertFalse(node0.isGetProp());
878:       assertFalse(node0.isScript());
879:       assertFalse(node0.isNew());
880:       assertFalse(node0.isSwitch());
881:       assertFalse(node0.isVar());
882:       assertFalse(node0.isStringKey());
883:       assertFalse(node0.isBreak());
884:       assertFalse(node0.isName());
885:       assertFalse(node0.isCall());
886:       assertFalse(node0.isLabel());
887:       assertFalse(node0.isAssignAdd());
888:       assertEquals(0, node0.getChildCount());
889:       assertFalse(node0.isOr());
890:       assertFalse(node0.isNull());
891:       assertFalse(node0.isDefaultCase());
892:       assertFalse(node0.isDo());
893:       assertFalse(node0.isAdd());
894:       assertEquals(1241, node0.getCharno());
895:       assertFalse(node0.isEmpty());
896:       assertFalse(node0.isArrayLit());
897:       assertFalse(node0.isVoid());
898:       assertFalse(node0.isTry());
899:       assertFalse(node0.isTrue());
900:       assertFalse(node0.isDebugger());
901:       assertFalse(node0.isFor());
902:       assertFalse(node0.isDelProp());
903:       assertFalse(node0.isIf());
904:       assertFalse(node0.isRegExp());
905:       assertFalse(node0.isFunction());
906:       assertFalse(node0.isCatch());
907:       assertFalse(node0.isParamList());
908:       assertFalse(node0.isGetterDef());
909:       assertFalse(node0.isString());
910:       assertFalse(node0.isCase());
911:       assertFalse(node0.isHook());
912:       assertEquals(1241, node0.getType());
913:       assertFalse(node0.isBlock());
914:       assertFalse(node0.isThrow());
915:       assertFalse(node0.isContinue());
916:       assertFalse(node0.hasMoreThanOneChild());
917:       assertFalse(node0.isFalse());
918:       assertFalse(node0.isIn());
919:       assertFalse(node0.isNE());
920:       assertFalse(node0.isInc());
921:       assertFalse(node0.isSetterDef());
922:       assertFalse(jSDocInfo0.hasThisType());
923:       assertFalse(jSDocInfo0.isJaggerInject());
924:       assertFalse(jSDocInfo0.hasModifies());
925:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
926:       assertNull(jSDocInfo0.getMeaning());
927:       assertFalse(jSDocInfo0.isConstructor());
928:       assertFalse(jSDocInfo0.isConstant());
929:       assertNull(jSDocInfo0.getLendsName());
930:       assertEquals("JSDocInfo", jSDocInfo0.toString());
931:       assertFalse(jSDocInfo0.isExport());
932:       assertFalse(jSDocInfo0.isWizaction());
933:       assertFalse(jSDocInfo0.isNgInject());
934:       assertEquals(0, jSDocInfo0.getParameterCount());
935:       assertFalse(jSDocInfo0.isInterface());
936:       assertNull(jSDocInfo0.getBlockDescription());
937:       assertFalse(jSDocInfo0.hasFileOverview());
938:       assertFalse(jSDocInfo0.hasReturnType());
939:       assertFalse(jSDocInfo0.isNoAlias());
940:       assertFalse(jSDocInfo0.isIdGenerator());
941:       assertFalse(jSDocInfo0.shouldPreserveTry());
942:       assertFalse(jSDocInfo0.isNoCompile());
943:       assertFalse(jSDocInfo0.isDefine());
944:       assertNull(jSDocInfo0.getFileOverview());
945:       assertNull(jSDocInfo0.getVisibility());
946:       assertFalse(jSDocInfo0.makesStructs());
947:       assertNull(jSDocInfo0.getDescription());
948:       assertFalse(jSDocInfo0.isJavaDispatch());
949:       assertFalse(jSDocInfo0.isNoSideEffects());
950:       assertFalse(jSDocInfo0.isDeprecated());
951:       assertFalse(jSDocInfo0.makesDicts());
952:       assertFalse(jSDocInfo0.isJaggerModule());
953:       assertNull(jSDocInfo0.getDeprecationReason());
954:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
955:       assertFalse(jSDocInfo0.isMappedIdGenerator());
956:       assertFalse(jSDocInfo0.isImplicitCast());
957:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
958:       assertTrue(jSDocInfo0.containsDeclaration());
959:       assertFalse(jSDocInfo0.isNoShadow());
960:       assertFalse(jSDocInfo0.isOverride());
961:       assertFalse(jSDocInfo0.isExpose());
962:       assertNull(jSDocInfo0.getVersion());
963:       assertFalse(jSDocInfo0.isExterns());
964:       assertFalse(jSDocInfo0.isHidden());
965:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
966:       assertNull(jSDocInfo0.getLicense());
967:       assertFalse(jSDocInfo0.isNoTypeCheck());
968:       assertFalse(jSDocInfo0.isDisposes());
969:       assertFalse(jSDocInfo0.hasTypedefType());
970:       assertFalse(jSDocInfo0.isJaggerProvide());
971:       assertNull(jSDocInfo0.getReturnDescription());
972:       assertNull(jSDocInfo0.getOriginalCommentString());
973:       assertFalse(jSDocInfo0.hasType());
974:       assertFalse(jSDocInfo0.isStableIdGenerator());
975:       assertTrue(jSDocInfo0.hasEnumParameterType());
976:       assertFalse(jSDocInfo0.hasBaseType());
977:       assertFalse(jSTypeExpression0.isVarArgs());
978:       assertFalse(jSTypeExpression0.isOptionalArg());
979:       
980:       jSDocInfo0.setShouldPreserveTry(true);
981:       assertFalse(jSDocInfo0.hasThisType());
982:       assertFalse(jSDocInfo0.isJaggerInject());
983:       assertFalse(jSDocInfo0.hasModifies());
984:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
985:       assertNull(jSDocInfo0.getMeaning());
986:       assertFalse(jSDocInfo0.isConstructor());
987:       assertFalse(jSDocInfo0.isConstant());
988:       assertNull(jSDocInfo0.getLendsName());
989:       assertEquals("JSDocInfo", jSDocInfo0.toString());
990:       assertFalse(jSDocInfo0.isExport());
991:       assertFalse(jSDocInfo0.isWizaction());
992:       assertFalse(jSDocInfo0.isNgInject());
993:       assertEquals(0, jSDocInfo0.getParameterCount());
994:       assertFalse(jSDocInfo0.isInterface());
995:       assertNull(jSDocInfo0.getBlockDescription());
996:       assertFalse(jSDocInfo0.hasFileOverview());
997:       assertFalse(jSDocInfo0.hasReturnType());
998:       assertFalse(jSDocInfo0.isNoAlias());
999:       assertFalse(jSDocInfo0.isIdGenerator());
1000:       assertFalse(jSDocInfo0.isNoCompile());
1001:       assertFalse(jSDocInfo0.isDefine());
1002:       assertNull(jSDocInfo0.getFileOverview());
1003:       assertNull(jSDocInfo0.getVisibility());
1004:       assertFalse(jSDocInfo0.makesStructs());
1005:       assertNull(jSDocInfo0.getDescription());
1006:       assertFalse(jSDocInfo0.isJavaDispatch());
1007:       assertFalse(jSDocInfo0.isNoSideEffects());
1008:       assertFalse(jSDocInfo0.isDeprecated());
1009:       assertFalse(jSDocInfo0.makesDicts());
1010:       assertFalse(jSDocInfo0.isJaggerModule());
1011:       assertNull(jSDocInfo0.getDeprecationReason());
1012:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1013:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1014:       assertFalse(jSDocInfo0.isImplicitCast());
1015:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1016:       assertTrue(jSDocInfo0.containsDeclaration());
1017:       assertFalse(jSDocInfo0.isNoShadow());
1018:       assertFalse(jSDocInfo0.isOverride());
1019:       assertFalse(jSDocInfo0.isExpose());
1020:       assertNull(jSDocInfo0.getVersion());
1021:       assertFalse(jSDocInfo0.isExterns());
1022:       assertFalse(jSDocInfo0.isHidden());
1023:       assertTrue(jSDocInfo0.shouldPreserveTry());
1024:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1025:       assertNull(jSDocInfo0.getLicense());
1026:       assertFalse(jSDocInfo0.isNoTypeCheck());
1027:       assertFalse(jSDocInfo0.isDisposes());
1028:       assertFalse(jSDocInfo0.hasTypedefType());
1029:       assertFalse(jSDocInfo0.isJaggerProvide());
1030:       assertNull(jSDocInfo0.getReturnDescription());
1031:       assertNull(jSDocInfo0.getOriginalCommentString());
1032:       assertFalse(jSDocInfo0.hasType());
1033:       assertFalse(jSDocInfo0.isStableIdGenerator());
1034:       assertTrue(jSDocInfo0.hasEnumParameterType());
1035:       assertFalse(jSDocInfo0.hasBaseType());
1036:       
1037:       Node node3 = node2.setJSDocInfo(jSDocInfo0);
1038:       assertNotNull(node3);
1039:       assertEquals(49, Node.DIRECT_EVAL);
1040:       assertEquals(30, Node.VAR_ARGS_NAME);
1041:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1042:       assertEquals(1, Node.DECR_FLAG);
1043:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1044:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1045:       assertEquals(2, Node.POST_FLAG);
1046:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1047:       assertEquals(32, Node.INCRDECR_PROP);
1048:       assertEquals(57, Node.LAST_PROP);
1049:       assertEquals(47, Node.IS_DISPATCHER);
1050:       assertEquals(12, Node.COLUMN_BITS);
1051:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1052:       assertEquals(52, Node.LENGTH);
1053:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1054:       assertEquals(29, Node.JSDOC_INFO_PROP);
1055:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1056:       assertEquals(53, Node.INPUT_ID);
1057:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1058:       assertEquals(37, Node.OPT_ARG_NAME);
1059:       assertEquals(8, Node.FLAG_NO_THROWS);
1060:       assertEquals(36, Node.QUOTED_PROP);
1061:       assertEquals(48, Node.DIRECTIVES);
1062:       assertEquals(57, Node.REFLECTED_OBJECT);
1063:       assertEquals(56, Node.CHANGE_TIME);
1064:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1065:       assertEquals(4095, Node.COLUMN_MASK);
1066:       assertEquals(55, Node.INFERRED_FUNCTION);
1067:       assertEquals(39, Node.EMPTY_BLOCK);
1068:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1069:       assertEquals(40, Node.ORIGINALNAME_PROP);
1070:       assertEquals(50, Node.FREE_CALL);
1071:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1072:       assertEquals(54, Node.SLASH_V);
1073:       assertEquals(46, Node.IS_NAMESPACE);
1074:       assertEquals(43, Node.IS_CONSTANT_NAME);
1075:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1076:       assertEquals(8, Node.FLAG_NO_THROWS);
1077:       assertEquals(39, Node.EMPTY_BLOCK);
1078:       assertEquals(48, Node.DIRECTIVES);
1079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1080:       assertEquals(55, Node.INFERRED_FUNCTION);
1081:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1082:       assertEquals(40, Node.ORIGINALNAME_PROP);
1083:       assertEquals(50, Node.FREE_CALL);
1084:       assertEquals(43, Node.IS_CONSTANT_NAME);
1085:       assertEquals(57, Node.REFLECTED_OBJECT);
1086:       assertEquals(54, Node.SLASH_V);
1087:       assertEquals(36, Node.QUOTED_PROP);
1088:       assertEquals(52, Node.LENGTH);
1089:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1090:       assertEquals(53, Node.INPUT_ID);
1091:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1092:       assertEquals(30, Node.VAR_ARGS_NAME);
1093:       assertEquals(57, Node.LAST_PROP);
1094:       assertEquals(47, Node.IS_DISPATCHER);
1095:       assertEquals(37, Node.OPT_ARG_NAME);
1096:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1097:       assertEquals(2, Node.POST_FLAG);
1098:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1099:       assertEquals(29, Node.JSDOC_INFO_PROP);
1100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1101:       assertEquals(49, Node.DIRECT_EVAL);
1102:       assertEquals(56, Node.CHANGE_TIME);
1103:       assertEquals(46, Node.IS_NAMESPACE);
1104:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1107:       assertEquals(4095, Node.COLUMN_MASK);
1108:       assertEquals(32, Node.INCRDECR_PROP);
1109:       assertEquals(1, Node.DECR_FLAG);
1110:       assertEquals(12, Node.COLUMN_BITS);
1111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1112:       assertEquals(47, Node.IS_DISPATCHER);
1113:       assertEquals(56, Node.CHANGE_TIME);
1114:       assertEquals(32, Node.INCRDECR_PROP);
1115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1116:       assertEquals(29, Node.JSDOC_INFO_PROP);
1117:       assertEquals(53, Node.INPUT_ID);
1118:       assertEquals(30, Node.VAR_ARGS_NAME);
1119:       assertEquals(57, Node.LAST_PROP);
1120:       assertEquals(46, Node.IS_NAMESPACE);
1121:       assertEquals(43, Node.IS_CONSTANT_NAME);
1122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1123:       assertEquals(54, Node.SLASH_V);
1124:       assertEquals(2, Node.POST_FLAG);
1125:       assertEquals(40, Node.ORIGINALNAME_PROP);
1126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1127:       assertEquals(50, Node.FREE_CALL);
1128:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1129:       assertEquals(57, Node.REFLECTED_OBJECT);
1130:       assertEquals(52, Node.LENGTH);
1131:       assertEquals(8, Node.FLAG_NO_THROWS);
1132:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1133:       assertEquals(55, Node.INFERRED_FUNCTION);
1134:       assertEquals(39, Node.EMPTY_BLOCK);
1135:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1136:       assertEquals(1, Node.DECR_FLAG);
1137:       assertEquals(49, Node.DIRECT_EVAL);
1138:       assertEquals(36, Node.QUOTED_PROP);
1139:       assertEquals(12, Node.COLUMN_BITS);
1140:       assertEquals(48, Node.DIRECTIVES);
1141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1143:       assertEquals(37, Node.OPT_ARG_NAME);
1144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1146:       assertEquals(4095, Node.COLUMN_MASK);
1147:       assertEquals(12, Node.COLUMN_BITS);
1148:       assertEquals(1, Node.DECR_FLAG);
1149:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1150:       assertEquals(49, Node.DIRECT_EVAL);
1151:       assertEquals(32, Node.INCRDECR_PROP);
1152:       assertEquals(57, Node.LAST_PROP);
1153:       assertEquals(46, Node.IS_NAMESPACE);
1154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1156:       assertEquals(29, Node.JSDOC_INFO_PROP);
1157:       assertEquals(52, Node.LENGTH);
1158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(54, Node.SLASH_V);
1161:       assertEquals(2, Node.POST_FLAG);
1162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1163:       assertEquals(47, Node.IS_DISPATCHER);
1164:       assertEquals(30, Node.VAR_ARGS_NAME);
1165:       assertEquals(55, Node.INFERRED_FUNCTION);
1166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1167:       assertEquals(43, Node.IS_CONSTANT_NAME);
1168:       assertEquals(8, Node.FLAG_NO_THROWS);
1169:       assertEquals(39, Node.EMPTY_BLOCK);
1170:       assertEquals(36, Node.QUOTED_PROP);
1171:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1172:       assertEquals(50, Node.FREE_CALL);
1173:       assertEquals(53, Node.INPUT_ID);
1174:       assertEquals(57, Node.REFLECTED_OBJECT);
1175:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1176:       assertEquals(56, Node.CHANGE_TIME);
1177:       assertEquals(48, Node.DIRECTIVES);
1178:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1179:       assertEquals(37, Node.OPT_ARG_NAME);
1180:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1181:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1182:       assertEquals(4095, Node.COLUMN_MASK);
1183:       assertNotSame(node0, node1);
1184:       assertNotSame(node0, node2);
1185:       assertNotSame(node0, node3);
1186:       assertNotSame(node1, node2);
1187:       assertNotSame(node1, node3);
1188:       assertNotSame(node1, node0);
1189:       assertNotSame(node2, node0);
1190:       assertNotSame(node2, node1);
1191:       assertSame(node2, node3);
1192:       assertNotSame(node3, node0);
1193:       assertSame(node3, node2);
1194:       assertNotSame(node3, node1);
1195:       assertFalse(node0.equals((Object)node1));
1196:       assertFalse(node0.equals((Object)node2));
1197:       assertFalse(node1.equals((Object)node2));
1198:       assertFalse(node1.equals((Object)node0));
1199:       assertFalse(node2.equals((Object)node0));
1200:       assertFalse(node2.equals((Object)node1));
1201:       assertFalse(node3.equals((Object)node0));
1202:       assertFalse(node3.equals((Object)node1));
1203:       assertFalse(node0.hasOneChild());
1204:       assertFalse(node0.isWith());
1205:       assertFalse(node0.hasChildren());
1206:       assertFalse(node0.isTypeOf());
1207:       assertFalse(node0.isAssign());
1208:       assertFalse(node0.isLabelName());
1209:       assertFalse(node0.isDec());
1210:       assertFalse(node0.isExprResult());
1211:       assertFalse(node0.isGetElem());
1212:       assertFalse(node0.isCast());
1213:       assertFalse(node0.isInstanceOf());
1214:       assertFalse(node0.isReturn());
1215:       assertFalse(node0.isAnd());
1216:       assertFalse(node0.isComma());
1217:       assertFalse(node0.isThis());
1218:       assertEquals(1241, node0.getLineno());
1219:       assertEquals(5084377, node0.getSourcePosition());
1220:       assertFalse(node0.isWhile());
1221:       assertFalse(node0.isNumber());
1222:       assertFalse(node0.isNot());
1223:       assertFalse(node0.isObjectLit());
1224:       assertFalse(node0.isGetProp());
1225:       assertFalse(node0.isScript());
1226:       assertFalse(node0.isNew());
1227:       assertFalse(node0.isSwitch());
1228:       assertFalse(node0.isVar());
1229:       assertFalse(node0.isStringKey());
1230:       assertFalse(node0.isBreak());
1231:       assertFalse(node0.isName());
1232:       assertFalse(node0.isCall());
1233:       assertFalse(node0.isLabel());
1234:       assertFalse(node0.isAssignAdd());
1235:       assertEquals(0, node0.getChildCount());
1236:       assertFalse(node0.isOr());
1237:       assertFalse(node0.isNull());
1238:       assertFalse(node0.isDefaultCase());
1239:       assertFalse(node0.isDo());
1240:       assertFalse(node0.isAdd());
1241:       assertEquals(1241, node0.getCharno());
1242:       assertFalse(node0.isEmpty());
1243:       assertFalse(node0.isArrayLit());
1244:       assertFalse(node0.isVoid());
1245:       assertFalse(node0.isTry());
1246:       assertFalse(node0.isTrue());
1247:       assertFalse(node0.isDebugger());
1248:       assertFalse(node0.isFor());
1249:       assertFalse(node0.isDelProp());
1250:       assertFalse(node0.isIf());
1251:       assertFalse(node0.isRegExp());
1252:       assertFalse(node0.isFunction());
1253:       assertFalse(node0.isCatch());
1254:       assertFalse(node0.isParamList());
1255:       assertFalse(node0.isGetterDef());
1256:       assertFalse(node0.isString());
1257:       assertFalse(node0.isCase());
1258:       assertFalse(node0.isHook());
1259:       assertEquals(1241, node0.getType());
1260:       assertFalse(node0.isBlock());
1261:       assertFalse(node0.isThrow());
1262:       assertFalse(node0.isContinue());
1263:       assertFalse(node0.hasMoreThanOneChild());
1264:       assertFalse(node0.isFalse());
1265:       assertFalse(node0.isIn());
1266:       assertFalse(node0.isNE());
1267:       assertFalse(node0.isInc());
1268:       assertFalse(node0.isSetterDef());
1269:       assertFalse(node1.isWhile());
1270:       assertFalse(node1.isDo());
1271:       assertFalse(node1.isBlock());
1272:       assertFalse(node1.isAssignAdd());
1273:       assertFalse(node1.isNew());
1274:       assertFalse(node1.isOr());
1275:       assertFalse(node1.isAdd());
1276:       assertFalse(node1.isDec());
1277:       assertFalse(node1.isAssign());
1278:       assertFalse(node1.isTypeOf());
1279:       assertFalse(node1.isName());
1280:       assertEquals(512114, node1.getSourcePosition());
1281:       assertFalse(node1.isNull());
1282:       assertFalse(node1.isReturn());
1283:       assertFalse(node1.hasMoreThanOneChild());
1284:       assertFalse(node1.isCatch());
1285:       assertFalse(node1.isGetElem());
1286:       assertFalse(node1.isExprResult());
1287:       assertFalse(node1.isCall());
1288:       assertFalse(node1.isWith());
1289:       assertFalse(node1.isDefaultCase());
1290:       assertFalse(node1.isRegExp());
1291:       assertFalse(node1.isTrue());
1292:       assertFalse(node1.isTry());
1293:       assertFalse(node1.isScript());
1294:       assertFalse(node1.isEmpty());
1295:       assertFalse(node1.isNumber());
1296:       assertFalse(node1.isLabelName());
1297:       assertFalse(node1.isGetterDef());
1298:       assertFalse(node1.isParamList());
1299:       assertFalse(node1.isStringKey());
1300:       assertEquals(114, node1.getCharno());
1301:       assertFalse(node1.isVar());
1302:       assertFalse(node1.isLabel());
1303:       assertFalse(node1.isArrayLit());
1304:       assertFalse(node1.isString());
1305:       assertFalse(node1.isCase());
1306:       assertFalse(node1.isSwitch());
1307:       assertFalse(node1.isIn());
1308:       assertFalse(node1.isInc());
1309:       assertTrue(node1.hasOneChild());
1310:       assertFalse(node1.isBreak());
1311:       assertFalse(node1.isIf());
1312:       assertEquals(3316, node1.getType());
1313:       assertFalse(node1.isDelProp());
1314:       assertFalse(node1.isComma());
1315:       assertFalse(node1.isThis());
1316:       assertFalse(node1.isHook());
1317:       assertFalse(node1.isNE());
1318:       assertFalse(node1.isFor());
1319:       assertEquals(1, node1.getChildCount());
1320:       assertEquals(125, node1.getLineno());
1321:       assertFalse(node1.isVoid());
1322:       assertFalse(node1.isInstanceOf());
1323:       assertTrue(node1.hasChildren());
1324:       assertFalse(node1.isNot());
1325:       assertFalse(node1.isObjectLit());
1326:       assertFalse(node1.isAnd());
1327:       assertFalse(node1.isDebugger());
1328:       assertFalse(node1.isSetterDef());
1329:       assertFalse(node1.isGetProp());
1330:       assertFalse(node1.isFalse());
1331:       assertFalse(node1.isThrow());
1332:       assertFalse(node1.isCast());
1333:       assertFalse(node1.isFunction());
1334:       assertFalse(node1.isContinue());
1335:       assertFalse(node2.isInstanceOf());
1336:       assertEquals(62137, node2.getSourcePosition());
1337:       assertFalse(node2.isGetProp());
1338:       assertFalse(node2.isWith());
1339:       assertFalse(node2.isFalse());
1340:       assertFalse(node2.isThrow());
1341:       assertFalse(node2.isComma());
1342:       assertFalse(node2.isThis());
1343:       assertFalse(node2.isHook());
1344:       assertFalse(node2.isGetElem());
1345:       assertFalse(node2.isExprResult());
1346:       assertFalse(node2.isInc());
1347:       assertFalse(node2.isBreak());
1348:       assertEquals(3316, node2.getType());
1349:       assertEquals(1, node2.getChildCount());
1350:       assertFalse(node2.isOr());
1351:       assertFalse(node2.isAssignAdd());
1352:       assertFalse(node2.hasMoreThanOneChild());
1353:       assertFalse(node2.isCase());
1354:       assertTrue(node2.hasChildren());
1355:       assertFalse(node2.isDo());
1356:       assertFalse(node2.isLabel());
1357:       assertFalse(node2.isFor());
1358:       assertFalse(node2.isBlock());
1359:       assertEquals(15, node2.getLineno());
1360:       assertFalse(node2.isTry());
1361:       assertFalse(node2.isScript());
1362:       assertEquals(697, node2.getCharno());
1363:       assertFalse(node2.isArrayLit());
1364:       assertFalse(node2.isGetterDef());
1365:       assertFalse(node2.isLabelName());
1366:       assertFalse(node2.isNumber());
1367:       assertFalse(node2.isSwitch());
1368:       assertFalse(node2.isStringKey());
1369:       assertFalse(node2.isParamList());
1370:       assertFalse(node2.isCatch());
1371:       assertFalse(node2.isSetterDef());
1372:       assertFalse(node2.isDefaultCase());
1373:       assertFalse(node2.isRegExp());
1374:       assertFalse(node2.isFunction());
1375:       assertFalse(node2.isVar());
1376:       assertFalse(node2.isVoid());
1377:       assertFalse(node2.isNew());
1378:       assertFalse(node2.isAdd());
1379:       assertFalse(node2.isEmpty());
1380:       assertFalse(node2.isCall());
1381:       assertFalse(node2.isDelProp());
1382:       assertFalse(node2.isIf());
1383:       assertFalse(node2.isName());
1384:       assertFalse(node2.isNull());
1385:       assertFalse(node2.isNE());
1386:       assertFalse(node2.isTrue());
1387:       assertFalse(node2.isIn());
1388:       assertFalse(node2.isContinue());
1389:       assertFalse(node2.isDec());
1390:       assertFalse(node2.isWhile());
1391:       assertFalse(node2.isAssign());
1392:       assertFalse(node2.isTypeOf());
1393:       assertTrue(node2.hasOneChild());
1394:       assertFalse(node2.isReturn());
1395:       assertFalse(node2.isCast());
1396:       assertFalse(node2.isString());
1397:       assertFalse(node2.isNot());
1398:       assertFalse(node2.isAnd());
1399:       assertFalse(node2.isObjectLit());
1400:       assertFalse(node2.isDebugger());
1401:       assertFalse(jSDocInfo0.hasThisType());
1402:       assertFalse(jSDocInfo0.isJaggerInject());
1403:       assertFalse(jSDocInfo0.hasModifies());
1404:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1405:       assertNull(jSDocInfo0.getMeaning());
1406:       assertFalse(jSDocInfo0.isConstructor());
1407:       assertFalse(jSDocInfo0.isConstant());
1408:       assertNull(jSDocInfo0.getLendsName());
1409:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1410:       assertFalse(jSDocInfo0.isExport());
1411:       assertFalse(jSDocInfo0.isWizaction());
1412:       assertFalse(jSDocInfo0.isNgInject());
1413:       assertEquals(0, jSDocInfo0.getParameterCount());
1414:       assertFalse(jSDocInfo0.isInterface());
1415:       assertNull(jSDocInfo0.getBlockDescription());
1416:       assertFalse(jSDocInfo0.hasFileOverview());
1417:       assertFalse(jSDocInfo0.hasReturnType());
1418:       assertFalse(jSDocInfo0.isNoAlias());
1419:       assertFalse(jSDocInfo0.isIdGenerator());
1420:       assertFalse(jSDocInfo0.isNoCompile());
1421:       assertFalse(jSDocInfo0.isDefine());
1422:       assertNull(jSDocInfo0.getFileOverview());
1423:       assertNull(jSDocInfo0.getVisibility());
1424:       assertFalse(jSDocInfo0.makesStructs());
1425:       assertNull(jSDocInfo0.getDescription());
1426:       assertFalse(jSDocInfo0.isJavaDispatch());
1427:       assertFalse(jSDocInfo0.isNoSideEffects());
1428:       assertFalse(jSDocInfo0.isDeprecated());
1429:       assertFalse(jSDocInfo0.makesDicts());
1430:       assertFalse(jSDocInfo0.isJaggerModule());
1431:       assertNull(jSDocInfo0.getDeprecationReason());
1432:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1433:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1434:       assertFalse(jSDocInfo0.isImplicitCast());
1435:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1436:       assertTrue(jSDocInfo0.containsDeclaration());
1437:       assertFalse(jSDocInfo0.isNoShadow());
1438:       assertFalse(jSDocInfo0.isOverride());
1439:       assertFalse(jSDocInfo0.isExpose());
1440:       assertNull(jSDocInfo0.getVersion());
1441:       assertFalse(jSDocInfo0.isExterns());
1442:       assertFalse(jSDocInfo0.isHidden());
1443:       assertTrue(jSDocInfo0.shouldPreserveTry());
1444:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1445:       assertNull(jSDocInfo0.getLicense());
1446:       assertFalse(jSDocInfo0.isNoTypeCheck());
1447:       assertFalse(jSDocInfo0.isDisposes());
1448:       assertFalse(jSDocInfo0.hasTypedefType());
1449:       assertFalse(jSDocInfo0.isJaggerProvide());
1450:       assertNull(jSDocInfo0.getReturnDescription());
1451:       assertNull(jSDocInfo0.getOriginalCommentString());
1452:       assertFalse(jSDocInfo0.hasType());
1453:       assertFalse(jSDocInfo0.isStableIdGenerator());
1454:       assertTrue(jSDocInfo0.hasEnumParameterType());
1455:       assertFalse(jSDocInfo0.hasBaseType());
1456:       assertFalse(node3.isTry());
1457:       assertFalse(node3.isDebugger());
1458:       assertFalse(node3.isVoid());
1459:       assertFalse(node3.isArrayLit());
1460:       assertFalse(node3.isRegExp());
1461:       assertFalse(node3.isFunction());
1462:       assertFalse(node3.isEmpty());
1463:       assertFalse(node3.isFor());
1464:       assertTrue(node3.hasOneChild());
1465:       assertFalse(node3.isDefaultCase());
1466:       assertTrue(node3.hasChildren());
1467:       assertEquals(1, node3.getChildCount());
1468:       assertFalse(node3.isSetterDef());
1469:       assertFalse(node3.isIn());
1470:       assertFalse(node3.isCatch());
1471:       assertFalse(node3.isName());
1472:       assertFalse(node3.isDelProp());
1473:       assertFalse(node3.isNE());
1474:       assertFalse(node3.isNull());
1475:       assertFalse(node3.isTrue());
1476:       assertFalse(node3.isIf());
1477:       assertFalse(node3.isCall());
1478:       assertFalse(node3.isInc());
1479:       assertFalse(node3.isString());
1480:       assertFalse(node3.isFalse());
1481:       assertFalse(node3.isThrow());
1482:       assertFalse(node3.isWhile());
1483:       assertFalse(node3.isGetProp());
1484:       assertFalse(node3.isContinue());
1485:       assertFalse(node3.isNot());
1486:       assertFalse(node3.isObjectLit());
1487:       assertFalse(node3.isAnd());
1488:       assertEquals(15, node3.getLineno());
1489:       assertFalse(node3.isCast());
1490:       assertFalse(node3.isScript());
1491:       assertFalse(node3.isExprResult());
1492:       assertFalse(node3.isAssign());
1493:       assertFalse(node3.isWith());
1494:       assertFalse(node3.isDec());
1495:       assertFalse(node3.isOr());
1496:       assertFalse(node3.isAssignAdd());
1497:       assertFalse(node3.isReturn());
1498:       assertFalse(node3.isComma());
1499:       assertFalse(node3.isTypeOf());
1500:       assertEquals(62137, node3.getSourcePosition());
1501:       assertFalse(node3.hasMoreThanOneChild());
1502:       assertEquals(3316, node3.getType());
1503:       assertFalse(node3.isInstanceOf());
1504:       assertFalse(node3.isGetElem());
1505:       assertFalse(node3.isBreak());
1506:       assertFalse(node3.isAdd());
1507:       assertFalse(node3.isBlock());
1508:       assertFalse(node3.isNew());
1509:       assertEquals(697, node3.getCharno());
1510:       assertFalse(node3.isDo());
1511:       assertFalse(node3.isCase());
1512:       assertFalse(node3.isVar());
1513:       assertFalse(node3.isThis());
1514:       assertFalse(node3.isHook());
1515:       assertFalse(node3.isLabel());
1516:       assertFalse(node3.isNumber());
1517:       assertFalse(node3.isLabelName());
1518:       assertFalse(node3.isGetterDef());
1519:       assertFalse(node3.isSwitch());
1520:       assertFalse(node3.isStringKey());
1521:       assertFalse(node3.isParamList());
1522:       
1523:       node0.removeProp(43);
1524:       assertEquals(49, Node.DIRECT_EVAL);
1525:       assertEquals(30, Node.VAR_ARGS_NAME);
1526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1527:       assertEquals(1, Node.DECR_FLAG);
1528:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1530:       assertEquals(2, Node.POST_FLAG);
1531:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1532:       assertEquals(32, Node.INCRDECR_PROP);
1533:       assertEquals(57, Node.LAST_PROP);
1534:       assertEquals(47, Node.IS_DISPATCHER);
1535:       assertEquals(12, Node.COLUMN_BITS);
1536:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1537:       assertEquals(52, Node.LENGTH);
1538:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1539:       assertEquals(29, Node.JSDOC_INFO_PROP);
1540:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1541:       assertEquals(53, Node.INPUT_ID);
1542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1543:       assertEquals(37, Node.OPT_ARG_NAME);
1544:       assertEquals(8, Node.FLAG_NO_THROWS);
1545:       assertEquals(36, Node.QUOTED_PROP);
1546:       assertEquals(48, Node.DIRECTIVES);
1547:       assertEquals(57, Node.REFLECTED_OBJECT);
1548:       assertEquals(56, Node.CHANGE_TIME);
1549:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1550:       assertEquals(4095, Node.COLUMN_MASK);
1551:       assertEquals(55, Node.INFERRED_FUNCTION);
1552:       assertEquals(39, Node.EMPTY_BLOCK);
1553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1554:       assertEquals(40, Node.ORIGINALNAME_PROP);
1555:       assertEquals(50, Node.FREE_CALL);
1556:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1557:       assertEquals(54, Node.SLASH_V);
1558:       assertEquals(46, Node.IS_NAMESPACE);
1559:       assertEquals(43, Node.IS_CONSTANT_NAME);
1560:       assertNotSame(node0, node1);
1561:       assertNotSame(node0, node2);
1562:       assertNotSame(node0, node3);
1563:       assertFalse(node0.equals((Object)node1));
1564:       assertFalse(node0.equals((Object)node2));
1565:       assertFalse(node0.equals((Object)node3));
1566:       assertFalse(node0.hasOneChild());
1567:       assertFalse(node0.isWith());
1568:       assertFalse(node0.hasChildren());
1569:       assertFalse(node0.isTypeOf());
1570:       assertFalse(node0.isAssign());
1571:       assertFalse(node0.isLabelName());
1572:       assertFalse(node0.isDec());
1573:       assertFalse(node0.isExprResult());
1574:       assertFalse(node0.isGetElem());
1575:       assertFalse(node0.isCast());
1576:       assertFalse(node0.isInstanceOf());
1577:       assertFalse(node0.isReturn());
1578:       assertFalse(node0.isAnd());
1579:       assertFalse(node0.isComma());
1580:       assertFalse(node0.isThis());
1581:       assertEquals(1241, node0.getLineno());
1582:       assertEquals(5084377, node0.getSourcePosition());
1583:       assertFalse(node0.isWhile());
1584:       assertFalse(node0.isNumber());
1585:       assertFalse(node0.isNot());
1586:       assertFalse(node0.isObjectLit());
1587:       assertFalse(node0.isGetProp());
1588:       assertFalse(node0.isScript());
1589:       assertFalse(node0.isNew());
1590:       assertFalse(node0.isSwitch());
1591:       assertFalse(node0.isVar());
1592:       assertFalse(node0.isStringKey());
1593:       assertFalse(node0.isBreak());
1594:       assertFalse(node0.isName());
1595:       assertFalse(node0.isCall());
1596:       assertFalse(node0.isLabel());
1597:       assertFalse(node0.isAssignAdd());
1598:       assertEquals(0, node0.getChildCount());
1599:       assertFalse(node0.isOr());
1600:       assertFalse(node0.isNull());
1601:       assertFalse(node0.isDefaultCase());
1602:       assertFalse(node0.isDo());
1603:       assertFalse(node0.isAdd());
1604:       assertEquals(1241, node0.getCharno());
1605:       assertFalse(node0.isEmpty());
1606:       assertFalse(node0.isArrayLit());
1607:       assertFalse(node0.isVoid());
1608:       assertFalse(node0.isTry());
1609:       assertFalse(node0.isTrue());
1610:       assertFalse(node0.isDebugger());
1611:       assertFalse(node0.isFor());
1612:       assertFalse(node0.isDelProp());
1613:       assertFalse(node0.isIf());
1614:       assertFalse(node0.isRegExp());
1615:       assertFalse(node0.isFunction());
1616:       assertFalse(node0.isCatch());
1617:       assertFalse(node0.isParamList());
1618:       assertFalse(node0.isGetterDef());
1619:       assertFalse(node0.isString());
1620:       assertFalse(node0.isCase());
1621:       assertFalse(node0.isHook());
1622:       assertEquals(1241, node0.getType());
1623:       assertFalse(node0.isBlock());
1624:       assertFalse(node0.isThrow());
1625:       assertFalse(node0.isContinue());
1626:       assertFalse(node0.hasMoreThanOneChild());
1627:       assertFalse(node0.isFalse());
1628:       assertFalse(node0.isIn());
1629:       assertFalse(node0.isNE());
1630:       assertFalse(node0.isInc());
1631:       assertFalse(node0.isSetterDef());
1632:       
1633:       Iterable<Node> iterable0 = node0.children();
1634:       assertNotNull(iterable0);
1635:       assertEquals(49, Node.DIRECT_EVAL);
1636:       assertEquals(30, Node.VAR_ARGS_NAME);
1637:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1638:       assertEquals(1, Node.DECR_FLAG);
1639:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1640:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1641:       assertEquals(2, Node.POST_FLAG);
1642:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1643:       assertEquals(32, Node.INCRDECR_PROP);
1644:       assertEquals(57, Node.LAST_PROP);
1645:       assertEquals(47, Node.IS_DISPATCHER);
1646:       assertEquals(12, Node.COLUMN_BITS);
1647:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1648:       assertEquals(52, Node.LENGTH);
1649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1650:       assertEquals(29, Node.JSDOC_INFO_PROP);
1651:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1652:       assertEquals(53, Node.INPUT_ID);
1653:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1654:       assertEquals(37, Node.OPT_ARG_NAME);
1655:       assertEquals(8, Node.FLAG_NO_THROWS);
1656:       assertEquals(36, Node.QUOTED_PROP);
1657:       assertEquals(48, Node.DIRECTIVES);
1658:       assertEquals(57, Node.REFLECTED_OBJECT);
1659:       assertEquals(56, Node.CHANGE_TIME);
1660:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1661:       assertEquals(4095, Node.COLUMN_MASK);
1662:       assertEquals(55, Node.INFERRED_FUNCTION);
1663:       assertEquals(39, Node.EMPTY_BLOCK);
1664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1665:       assertEquals(40, Node.ORIGINALNAME_PROP);
1666:       assertEquals(50, Node.FREE_CALL);
1667:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1668:       assertEquals(54, Node.SLASH_V);
1669:       assertEquals(46, Node.IS_NAMESPACE);
1670:       assertEquals(43, Node.IS_CONSTANT_NAME);
1671:       assertNotSame(node0, node1);
1672:       assertNotSame(node0, node2);
1673:       assertNotSame(node0, node3);
1674:       assertFalse(node0.equals((Object)node1));
1675:       assertFalse(node0.equals((Object)node2));
1676:       assertFalse(node0.equals((Object)node3));
1677:       assertFalse(node0.hasOneChild());
1678:       assertFalse(node0.isWith());
1679:       assertFalse(node0.hasChildren());
1680:       assertFalse(node0.isTypeOf());
1681:       assertFalse(node0.isAssign());
1682:       assertFalse(node0.isLabelName());
1683:       assertFalse(node0.isDec());
1684:       assertFalse(node0.isExprResult());
1685:       assertFalse(node0.isGetElem());
1686:       assertFalse(node0.isCast());
1687:       assertFalse(node0.isInstanceOf());
1688:       assertFalse(node0.isReturn());
1689:       assertFalse(node0.isAnd());
1690:       assertFalse(node0.isComma());
1691:       assertFalse(node0.isThis());
1692:       assertEquals(1241, node0.getLineno());
1693:       assertEquals(5084377, node0.getSourcePosition());
1694:       assertFalse(node0.isWhile());
1695:       assertFalse(node0.isNumber());
1696:       assertFalse(node0.isNot());
1697:       assertFalse(node0.isObjectLit());
1698:       assertFalse(node0.isGetProp());
1699:       assertFalse(node0.isScript());
1700:       assertFalse(node0.isNew());
1701:       assertFalse(node0.isSwitch());
1702:       assertFalse(node0.isVar());
1703:       assertFalse(node0.isStringKey());
1704:       assertFalse(node0.isBreak());
1705:       assertFalse(node0.isName());
1706:       assertFalse(node0.isCall());
1707:       assertFalse(node0.isLabel());
1708:       assertFalse(node0.isAssignAdd());
1709:       assertEquals(0, node0.getChildCount());
1710:       assertFalse(node0.isOr());
1711:       assertFalse(node0.isNull());
1712:       assertFalse(node0.isDefaultCase());
1713:       assertFalse(node0.isDo());
1714:       assertFalse(node0.isAdd());
1715:       assertEquals(1241, node0.getCharno());
1716:       assertFalse(node0.isEmpty());
1717:       assertFalse(node0.isArrayLit());
1718:       assertFalse(node0.isVoid());
1719:       assertFalse(node0.isTry());
1720:       assertFalse(node0.isTrue());
1721:       assertFalse(node0.isDebugger());
1722:       assertFalse(node0.isFor());
1723:       assertFalse(node0.isDelProp());
1724:       assertFalse(node0.isIf());
1725:       assertFalse(node0.isRegExp());
1726:       assertFalse(node0.isFunction());
1727:       assertFalse(node0.isCatch());
1728:       assertFalse(node0.isParamList());
1729:       assertFalse(node0.isGetterDef());
1730:       assertFalse(node0.isString());
1731:       assertFalse(node0.isCase());
1732:       assertFalse(node0.isHook());
1733:       assertEquals(1241, node0.getType());
1734:       assertFalse(node0.isBlock());
1735:       assertFalse(node0.isThrow());
1736:       assertFalse(node0.isContinue());
1737:       assertFalse(node0.hasMoreThanOneChild());
1738:       assertFalse(node0.isFalse());
1739:       assertFalse(node0.isIn());
1740:       assertFalse(node0.isNE());
1741:       assertFalse(node0.isInc());
1742:       assertFalse(node0.isSetterDef());
1743:       assertFalse(iterable0.contains(node3));
1744:       
1745:       boolean boolean0 = node2.isIn();
1746:       assertFalse(boolean0);
1747:       assertEquals(49, Node.DIRECT_EVAL);
1748:       assertEquals(30, Node.VAR_ARGS_NAME);
1749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1750:       assertEquals(1, Node.DECR_FLAG);
1751:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1752:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1753:       assertEquals(2, Node.POST_FLAG);
1754:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1755:       assertEquals(32, Node.INCRDECR_PROP);
1756:       assertEquals(57, Node.LAST_PROP);
1757:       assertEquals(47, Node.IS_DISPATCHER);
1758:       assertEquals(12, Node.COLUMN_BITS);
1759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1760:       assertEquals(52, Node.LENGTH);
1761:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1762:       assertEquals(29, Node.JSDOC_INFO_PROP);
1763:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1764:       assertEquals(53, Node.INPUT_ID);
1765:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1766:       assertEquals(37, Node.OPT_ARG_NAME);
1767:       assertEquals(8, Node.FLAG_NO_THROWS);
1768:       assertEquals(36, Node.QUOTED_PROP);
1769:       assertEquals(48, Node.DIRECTIVES);
1770:       assertEquals(57, Node.REFLECTED_OBJECT);
1771:       assertEquals(56, Node.CHANGE_TIME);
1772:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1773:       assertEquals(4095, Node.COLUMN_MASK);
1774:       assertEquals(55, Node.INFERRED_FUNCTION);
1775:       assertEquals(39, Node.EMPTY_BLOCK);
1776:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1777:       assertEquals(40, Node.ORIGINALNAME_PROP);
1778:       assertEquals(50, Node.FREE_CALL);
1779:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1780:       assertEquals(54, Node.SLASH_V);
1781:       assertEquals(46, Node.IS_NAMESPACE);
1782:       assertEquals(43, Node.IS_CONSTANT_NAME);
1783:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1784:       assertEquals(8, Node.FLAG_NO_THROWS);
1785:       assertEquals(39, Node.EMPTY_BLOCK);
1786:       assertEquals(48, Node.DIRECTIVES);
1787:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1788:       assertEquals(55, Node.INFERRED_FUNCTION);
1789:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1790:       assertEquals(40, Node.ORIGINALNAME_PROP);
1791:       assertEquals(50, Node.FREE_CALL);
1792:       assertEquals(43, Node.IS_CONSTANT_NAME);
1793:       assertEquals(57, Node.REFLECTED_OBJECT);
1794:       assertEquals(54, Node.SLASH_V);
1795:       assertEquals(36, Node.QUOTED_PROP);
1796:       assertEquals(52, Node.LENGTH);
1797:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1798:       assertEquals(53, Node.INPUT_ID);
1799:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1800:       assertEquals(30, Node.VAR_ARGS_NAME);
1801:       assertEquals(57, Node.LAST_PROP);
1802:       assertEquals(47, Node.IS_DISPATCHER);
1803:       assertEquals(37, Node.OPT_ARG_NAME);
1804:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1805:       assertEquals(2, Node.POST_FLAG);
1806:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1807:       assertEquals(29, Node.JSDOC_INFO_PROP);
1808:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1809:       assertEquals(49, Node.DIRECT_EVAL);
1810:       assertEquals(56, Node.CHANGE_TIME);
1811:       assertEquals(46, Node.IS_NAMESPACE);
1812:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1813:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1814:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1815:       assertEquals(4095, Node.COLUMN_MASK);
1816:       assertEquals(32, Node.INCRDECR_PROP);
1817:       assertEquals(1, Node.DECR_FLAG);
1818:       assertEquals(12, Node.COLUMN_BITS);
1819:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1820:       assertEquals(47, Node.IS_DISPATCHER);
1821:       assertEquals(56, Node.CHANGE_TIME);
1822:       assertEquals(32, Node.INCRDECR_PROP);
1823:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1824:       assertEquals(29, Node.JSDOC_INFO_PROP);
1825:       assertEquals(53, Node.INPUT_ID);
1826:       assertEquals(30, Node.VAR_ARGS_NAME);
1827:       assertEquals(57, Node.LAST_PROP);
1828:       assertEquals(46, Node.IS_NAMESPACE);
1829:       assertEquals(43, Node.IS_CONSTANT_NAME);
1830:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1831:       assertEquals(54, Node.SLASH_V);
1832:       assertEquals(2, Node.POST_FLAG);
1833:       assertEquals(40, Node.ORIGINALNAME_PROP);
1834:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1835:       assertEquals(50, Node.FREE_CALL);
1836:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1837:       assertEquals(57, Node.REFLECTED_OBJECT);
1838:       assertEquals(52, Node.LENGTH);
1839:       assertEquals(8, Node.FLAG_NO_THROWS);
1840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1841:       assertEquals(55, Node.INFERRED_FUNCTION);
1842:       assertEquals(39, Node.EMPTY_BLOCK);
1843:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1844:       assertEquals(1, Node.DECR_FLAG);
1845:       assertEquals(49, Node.DIRECT_EVAL);
1846:       assertEquals(36, Node.QUOTED_PROP);
1847:       assertEquals(12, Node.COLUMN_BITS);
1848:       assertEquals(48, Node.DIRECTIVES);
1849:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1850:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1851:       assertEquals(37, Node.OPT_ARG_NAME);
1852:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1853:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1854:       assertEquals(4095, Node.COLUMN_MASK);
1855:       assertNotSame(node0, node1);
1856:       assertNotSame(node0, node2);
1857:       assertNotSame(node0, node3);
1858:       assertNotSame(node1, node2);
1859:       assertNotSame(node1, node3);
1860:       assertNotSame(node1, node0);
1861:       assertNotSame(node2, node0);
1862:       assertNotSame(node2, node1);
1863:       assertSame(node2, node3);
1864:       assertFalse(node0.equals((Object)node1));
1865:       assertFalse(node0.equals((Object)node2));
1866:       assertFalse(node0.equals((Object)node3));
1867:       assertFalse(node1.equals((Object)node2));
1868:       assertFalse(node1.equals((Object)node3));
1869:       assertFalse(node1.equals((Object)node0));
1870:       assertFalse(node2.equals((Object)node0));
1871:       assertFalse(node2.equals((Object)node1));
1872:       assertFalse(node0.hasOneChild());
1873:       assertFalse(node0.isWith());
1874:       assertFalse(node0.hasChildren());
1875:       assertFalse(node0.isTypeOf());
1876:       assertFalse(node0.isAssign());
1877:       assertFalse(node0.isLabelName());
1878:       assertFalse(node0.isDec());
1879:       assertFalse(node0.isExprResult());
1880:       assertFalse(node0.isGetElem());
1881:       assertFalse(node0.isCast());
1882:       assertFalse(node0.isInstanceOf());
1883:       assertFalse(node0.isReturn());
1884:       assertFalse(node0.isAnd());
1885:       assertFalse(node0.isComma());
1886:       assertFalse(node0.isThis());
1887:       assertEquals(1241, node0.getLineno());
1888:       assertEquals(5084377, node0.getSourcePosition());
1889:       assertFalse(node0.isWhile());
1890:       assertFalse(node0.isNumber());
1891:       assertFalse(node0.isNot());
1892:       assertFalse(node0.isObjectLit());
1893:       assertFalse(node0.isGetProp());
1894:       assertFalse(node0.isScript());
1895:       assertFalse(node0.isNew());
1896:       assertFalse(node0.isSwitch());
1897:       assertFalse(node0.isVar());
1898:       assertFalse(node0.isStringKey());
1899:       assertFalse(node0.isBreak());
1900:       assertFalse(node0.isName());
1901:       assertFalse(node0.isCall());
1902:       assertFalse(node0.isLabel());
1903:       assertFalse(node0.isAssignAdd());
1904:       assertEquals(0, node0.getChildCount());
1905:       assertFalse(node0.isOr());
1906:       assertFalse(node0.isNull());
1907:       assertFalse(node0.isDefaultCase());
1908:       assertFalse(node0.isDo());
1909:       assertFalse(node0.isAdd());
1910:       assertEquals(1241, node0.getCharno());
1911:       assertFalse(node0.isEmpty());
1912:       assertFalse(node0.isArrayLit());
1913:       assertFalse(node0.isVoid());
1914:       assertFalse(node0.isTry());
1915:       assertFalse(node0.isTrue());
1916:       assertFalse(node0.isDebugger());
1917:       assertFalse(node0.isFor());
1918:       assertFalse(node0.isDelProp());
1919:       assertFalse(node0.isIf());
1920:       assertFalse(node0.isRegExp());
1921:       assertFalse(node0.isFunction());
1922:       assertFalse(node0.isCatch());
1923:       assertFalse(node0.isParamList());
1924:       assertFalse(node0.isGetterDef());
1925:       assertFalse(node0.isString());
1926:       assertFalse(node0.isCase());
1927:       assertFalse(node0.isHook());
1928:       assertEquals(1241, node0.getType());
1929:       assertFalse(node0.isBlock());
1930:       assertFalse(node0.isThrow());
1931:       assertFalse(node0.isContinue());
1932:       assertFalse(node0.hasMoreThanOneChild());
1933:       assertFalse(node0.isFalse());
1934:       assertFalse(node0.isIn());
1935:       assertFalse(node0.isNE());
1936:       assertFalse(node0.isInc());
1937:       assertFalse(node0.isSetterDef());
1938:       assertFalse(node1.isWhile());
1939:       assertFalse(node1.isDo());
1940:       assertFalse(node1.isBlock());
1941:       assertFalse(node1.isAssignAdd());
1942:       assertFalse(node1.isNew());
1943:       assertFalse(node1.isOr());
1944:       assertFalse(node1.isAdd());
1945:       assertFalse(node1.isDec());
1946:       assertFalse(node1.isAssign());
1947:       assertFalse(node1.isTypeOf());
1948:       assertFalse(node1.isName());
1949:       assertEquals(512114, node1.getSourcePosition());
1950:       assertFalse(node1.isNull());
1951:       assertFalse(node1.isReturn());
1952:       assertFalse(node1.hasMoreThanOneChild());
1953:       assertFalse(node1.isCatch());
1954:       assertFalse(node1.isGetElem());
1955:       assertFalse(node1.isExprResult());
1956:       assertFalse(node1.isCall());
1957:       assertFalse(node1.isWith());
1958:       assertFalse(node1.isDefaultCase());
1959:       assertFalse(node1.isRegExp());
1960:       assertFalse(node1.isTrue());
1961:       assertFalse(node1.isTry());
1962:       assertFalse(node1.isScript());
1963:       assertFalse(node1.isEmpty());
1964:       assertFalse(node1.isNumber());
1965:       assertFalse(node1.isLabelName());
1966:       assertFalse(node1.isGetterDef());
1967:       assertFalse(node1.isParamList());
1968:       assertFalse(node1.isStringKey());
1969:       assertEquals(114, node1.getCharno());
1970:       assertFalse(node1.isVar());
1971:       assertFalse(node1.isLabel());
1972:       assertFalse(node1.isArrayLit());
1973:       assertFalse(node1.isString());
1974:       assertFalse(node1.isCase());
1975:       assertFalse(node1.isSwitch());
1976:       assertFalse(node1.isIn());
1977:       assertFalse(node1.isInc());
1978:       assertTrue(node1.hasOneChild());
1979:       assertFalse(node1.isBreak());
1980:       assertFalse(node1.isIf());
1981:       assertEquals(3316, node1.getType());
1982:       assertFalse(node1.isDelProp());
1983:       assertFalse(node1.isComma());
1984:       assertFalse(node1.isThis());
1985:       assertFalse(node1.isHook());
1986:       assertFalse(node1.isNE());
1987:       assertFalse(node1.isFor());
1988:       assertEquals(1, node1.getChildCount());
1989:       assertEquals(125, node1.getLineno());
1990:       assertFalse(node1.isVoid());
1991:       assertFalse(node1.isInstanceOf());
1992:       assertTrue(node1.hasChildren());
1993:       assertFalse(node1.isNot());
1994:       assertFalse(node1.isObjectLit());
1995:       assertFalse(node1.isAnd());
1996:       assertFalse(node1.isDebugger());
1997:       assertFalse(node1.isSetterDef());
1998:       assertFalse(node1.isGetProp());
1999:       assertFalse(node1.isFalse());
2000:       assertFalse(node1.isThrow());
2001:       assertFalse(node1.isCast());
2002:       assertFalse(node1.isFunction());
2003:       assertFalse(node1.isContinue());
2004:       assertFalse(node2.isInstanceOf());
2005:       assertEquals(62137, node2.getSourcePosition());
2006:       assertFalse(node2.isGetProp());
2007:       assertFalse(node2.isWith());
2008:       assertFalse(node2.isFalse());
2009:       assertFalse(node2.isThrow());
2010:       assertFalse(node2.isComma());
2011:       assertFalse(node2.isThis());
2012:       assertFalse(node2.isHook());
2013:       assertFalse(node2.isGetElem());
2014:       assertFalse(node2.isExprResult());
2015:       assertFalse(node2.isInc());
2016:       assertFalse(node2.isBreak());
2017:       assertEquals(3316, node2.getType());
2018:       assertEquals(1, node2.getChildCount());
2019:       assertFalse(node2.isOr());
2020:       assertFalse(node2.isAssignAdd());
2021:       assertFalse(node2.hasMoreThanOneChild());
2022:       assertFalse(node2.isCase());
2023:       assertTrue(node2.hasChildren());
2024:       assertFalse(node2.isDo());
2025:       assertFalse(node2.isLabel());
2026:       assertFalse(node2.isFor());
2027:       assertFalse(node2.isBlock());
2028:       assertEquals(15, node2.getLineno());
2029:       assertFalse(node2.isTry());
2030:       assertFalse(node2.isScript());
2031:       assertEquals(697, node2.getCharno());
2032:       assertFalse(node2.isArrayLit());
2033:       assertFalse(node2.isGetterDef());
2034:       assertFalse(node2.isLabelName());
2035:       assertFalse(node2.isNumber());
2036:       assertFalse(node2.isSwitch());
2037:       assertFalse(node2.isStringKey());
2038:       assertFalse(node2.isParamList());
2039:       assertFalse(node2.isCatch());
2040:       assertFalse(node2.isSetterDef());
2041:       assertFalse(node2.isDefaultCase());
2042:       assertFalse(node2.isRegExp());
2043:       assertFalse(node2.isFunction());
2044:       assertFalse(node2.isVar());
2045:       assertFalse(node2.isVoid());
2046:       assertFalse(node2.isNew());
2047:       assertFalse(node2.isAdd());
2048:       assertFalse(node2.isEmpty());
2049:       assertFalse(node2.isCall());
2050:       assertFalse(node2.isDelProp());
2051:       assertFalse(node2.isIf());
2052:       assertFalse(node2.isName());
2053:       assertFalse(node2.isNull());
2054:       assertFalse(node2.isNE());
2055:       assertFalse(node2.isTrue());
2056:       assertFalse(node2.isIn());
2057:       assertFalse(node2.isContinue());
2058:       assertFalse(node2.isDec());
2059:       assertFalse(node2.isWhile());
2060:       assertFalse(node2.isAssign());
2061:       assertFalse(node2.isTypeOf());
2062:       assertTrue(node2.hasOneChild());
2063:       assertFalse(node2.isReturn());
2064:       assertFalse(node2.isCast());
2065:       assertFalse(node2.isString());
2066:       assertFalse(node2.isNot());
2067:       assertFalse(node2.isAnd());
2068:       assertFalse(node2.isObjectLit());
2069:       assertFalse(node2.isDebugger());
2070:   }
2071: }
RegularFileObject[/tmp/EvoSuite_461_1628159321245/com/google/javascript/rhino/Node_461_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_461_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_461_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_461_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:41.612 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(1241, 1241, 1241);
assertNotNull(node0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(1241, node0.getLineno());
assertEquals(5084377, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(1241, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertEquals(1241, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Node node1 = new Node(3316, node0, node0, node0, node0, 125, 114);
assertNotNull(node1);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(1241, node0.getLineno());
assertEquals(5084377, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(1241, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertEquals(1241, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertEquals(512114, node1.getSourcePosition());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(114, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isArrayLit());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertTrue(node1.hasOneChild());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertEquals(3316, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertEquals(125, node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());

Node node2 = new Node(3316, node1, node1, 15, 697);
assertNotNull(node2);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(1241, node0.getLineno());
assertEquals(5084377, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(1241, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertEquals(1241, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertEquals(512114, node1.getSourcePosition());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(114, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isArrayLit());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertTrue(node1.hasOneChild());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertEquals(3316, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertEquals(125, node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node2.isInstanceOf());
assertEquals(62137, node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertEquals(3316, node2.getType());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertEquals(15, node2.getLineno());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertEquals(697, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isCast());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertNotNull(jSDocInfo0);
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getDeprecationReason());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isExpose());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasBaseType());

JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "");
assertNotNull(jSTypeExpression0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(1241, node0.getLineno());
assertEquals(5084377, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(1241, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertEquals(1241, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(jSTypeExpression0.isVarArgs());
assertFalse(jSTypeExpression0.isOptionalArg());

jSDocInfo0.setEnumParameterType(jSTypeExpression0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(1241, node0.getLineno());
assertEquals(5084377, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(1241, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertEquals(1241, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getLendsName());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getDeprecationReason());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertTrue(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isExpose());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertTrue(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSTypeExpression0.isVarArgs());
assertFalse(jSTypeExpression0.isOptionalArg());

jSDocInfo0.setShouldPreserveTry(true);
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getLendsName());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getDeprecationReason());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertTrue(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isExpose());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isHidden());
assertTrue(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertTrue(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasBaseType());

Node node3 = node2.setJSDocInfo(jSDocInfo0);
assertNotNull(node3);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node1, node3);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertSame(node2, node3);
assertNotSame(node3, node0);
assertSame(node3, node2);
assertNotSame(node3, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(1241, node0.getLineno());
assertEquals(5084377, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(1241, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertEquals(1241, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertEquals(512114, node1.getSourcePosition());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(114, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isArrayLit());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertTrue(node1.hasOneChild());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertEquals(3316, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertEquals(125, node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node2.isInstanceOf());
assertEquals(62137, node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertEquals(3316, node2.getType());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertEquals(15, node2.getLineno());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertEquals(697, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isCast());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getLendsName());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getDeprecationReason());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertTrue(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isExpose());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isHidden());
assertTrue(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertTrue(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDefaultCase());
assertTrue(node3.hasChildren());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isCatch());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isIf());
assertFalse(node3.isCall());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isWhile());
assertFalse(node3.isGetProp());
assertFalse(node3.isContinue());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertEquals(15, node3.getLineno());
assertFalse(node3.isCast());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertEquals(62137, node3.getSourcePosition());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(3316, node3.getType());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertEquals(697, node3.getCharno());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isLabel());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());

node0.removeProp(43);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(1241, node0.getLineno());
assertEquals(5084377, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(1241, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertEquals(1241, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(1241, node0.getLineno());
assertEquals(5084377, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(1241, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertEquals(1241, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(iterable0.contains(node3));

boolean boolean0 = node2.isIn();
assertFalse(boolean0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node1, node3);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertSame(node2, node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(1241, node0.getLineno());
assertEquals(5084377, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(1241, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertEquals(1241, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertEquals(512114, node1.getSourcePosition());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(114, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isArrayLit());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertTrue(node1.hasOneChild());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertEquals(3316, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertEquals(125, node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node2.isInstanceOf());
assertEquals(62137, node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertEquals(3316, node2.getType());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertEquals(15, node2.getLineno());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertEquals(697, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isCast());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());


[MASTER] 10:28:42.067 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_463_1628159321912/com/google/javascript/rhino/Node_463_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_463_1628159321912/com/google/javascript/rhino/Node_463_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:42.067 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:42.067 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:42.068 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 438
[MASTER] 10:28:42.068 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_463_1628159321912/com/google/javascript/rhino/Node_463_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_463_tmp__ESTest extends Node_463_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(0, "K`UM");
21:       assertNotNull(node0);
22:       assertEquals(30, Node.VAR_ARGS_NAME);
23:       assertEquals(49, Node.DIRECT_EVAL);
24:       assertEquals(1, Node.DECR_FLAG);
25:       assertEquals(15, Node.NO_SIDE_EFFECTS);
26:       assertEquals(51, Node.STATIC_SOURCE_FILE);
27:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
28:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
29:       assertEquals(12, Node.COLUMN_BITS);
30:       assertEquals(32, Node.INCRDECR_PROP);
31:       assertEquals(57, Node.LAST_PROP);
32:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
33:       assertEquals(50, Node.FREE_CALL);
34:       assertEquals(40, Node.ORIGINALNAME_PROP);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(54, Node.SLASH_V);
38:       assertEquals(43, Node.IS_CONSTANT_NAME);
39:       assertEquals(46, Node.IS_NAMESPACE);
40:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
41:       assertEquals(36, Node.QUOTED_PROP);
42:       assertEquals(55, Node.INFERRED_FUNCTION);
43:       assertEquals(4095, Node.COLUMN_MASK);
44:       assertEquals(53, Node.INPUT_ID);
45:       assertEquals(39, Node.EMPTY_BLOCK);
46:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
47:       assertEquals(29, Node.JSDOC_INFO_PROP);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
52:       assertEquals(52, Node.LENGTH);
53:       assertEquals(48, Node.DIRECTIVES);
54:       assertEquals(37, Node.OPT_ARG_NAME);
55:       assertEquals(56, Node.CHANGE_TIME);
56:       assertEquals(57, Node.REFLECTED_OBJECT);
57:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
58:       assertFalse(node0.hasOneChild());
59:       assertFalse(node0.isLabelName());
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.isTypeOf());
62:       assertFalse(node0.hasChildren());
63:       assertFalse(node0.isGetElem());
64:       assertFalse(node0.isAssign());
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isCast());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isInstanceOf());
69:       assertEquals((-1), node0.getLineno());
70:       assertFalse(node0.isLabel());
71:       assertFalse(node0.isDo());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isOr());
75:       assertFalse(node0.isHook());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.isBlock());
78:       assertFalse(node0.isStringKey());
79:       assertFalse(node0.isNew());
80:       assertFalse(node0.isSwitch());
81:       assertFalse(node0.isThis());
82:       assertFalse(node0.hasMoreThanOneChild());
83:       assertFalse(node0.isParamList());
84:       assertFalse(node0.isNumber());
85:       assertFalse(node0.isScript());
86:       assertFalse(node0.isGetterDef());
87:       assertEquals((-1), node0.getCharno());
88:       assertFalse(node0.isCase());
89:       assertFalse(node0.isArrayLit());
90:       assertFalse(node0.isTrue());
91:       assertFalse(node0.isVoid());
92:       assertFalse(node0.isFor());
93:       assertFalse(node0.isTry());
94:       assertFalse(node0.isIf());
95:       assertFalse(node0.isDelProp());
96:       assertFalse(node0.isRegExp());
97:       assertFalse(node0.isFunction());
98:       assertFalse(node0.isCatch());
99:       assertEquals(0, node0.getChildCount());
100:       assertFalse(node0.isDefaultCase());
101:       assertFalse(node0.isNull());
102:       assertFalse(node0.isNE());
103:       assertFalse(node0.isSetterDef());
104:       assertFalse(node0.isInc());
105:       assertFalse(node0.isEmpty());
106:       assertFalse(node0.isIn());
107:       assertFalse(node0.isThrow());
108:       assertFalse(node0.isName());
109:       assertFalse(node0.isComma());
110:       assertFalse(node0.isBreak());
111:       assertFalse(node0.isFalse());
112:       assertFalse(node0.isCall());
113:       assertEquals(0, node0.getType());
114:       assertFalse(node0.isContinue());
115:       assertFalse(node0.isReturn());
116:       assertFalse(node0.isWhile());
117:       assertFalse(node0.isAnd());
118:       assertEquals((-1), node0.getSourcePosition());
119:       assertFalse(node0.isDebugger());
120:       assertFalse(node0.isGetProp());
121:       assertFalse(node0.isNot());
122:       assertFalse(node0.isObjectLit());
123:       assertFalse(node0.isString());
124:       
125:       boolean boolean0 = node0.isReturn();
126:       assertFalse(boolean0);
127:       assertEquals(30, Node.VAR_ARGS_NAME);
128:       assertEquals(49, Node.DIRECT_EVAL);
129:       assertEquals(1, Node.DECR_FLAG);
130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(12, Node.COLUMN_BITS);
135:       assertEquals(32, Node.INCRDECR_PROP);
136:       assertEquals(57, Node.LAST_PROP);
137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
138:       assertEquals(50, Node.FREE_CALL);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(54, Node.SLASH_V);
143:       assertEquals(43, Node.IS_CONSTANT_NAME);
144:       assertEquals(46, Node.IS_NAMESPACE);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(36, Node.QUOTED_PROP);
147:       assertEquals(55, Node.INFERRED_FUNCTION);
148:       assertEquals(4095, Node.COLUMN_MASK);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(39, Node.EMPTY_BLOCK);
151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
152:       assertEquals(29, Node.JSDOC_INFO_PROP);
153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
155:       assertEquals(8, Node.FLAG_NO_THROWS);
156:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
157:       assertEquals(52, Node.LENGTH);
158:       assertEquals(48, Node.DIRECTIVES);
159:       assertEquals(37, Node.OPT_ARG_NAME);
160:       assertEquals(56, Node.CHANGE_TIME);
161:       assertEquals(57, Node.REFLECTED_OBJECT);
162:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
163:       assertFalse(node0.hasOneChild());
164:       assertFalse(node0.isLabelName());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.isTypeOf());
167:       assertFalse(node0.hasChildren());
168:       assertFalse(node0.isGetElem());
169:       assertFalse(node0.isAssign());
170:       assertFalse(node0.isExprResult());
171:       assertFalse(node0.isCast());
172:       assertFalse(node0.isWith());
173:       assertFalse(node0.isInstanceOf());
174:       assertEquals((-1), node0.getLineno());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isDo());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isOr());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isVar());
182:       assertFalse(node0.isBlock());
183:       assertFalse(node0.isStringKey());
184:       assertFalse(node0.isNew());
185:       assertFalse(node0.isSwitch());
186:       assertFalse(node0.isThis());
187:       assertFalse(node0.hasMoreThanOneChild());
188:       assertFalse(node0.isParamList());
189:       assertFalse(node0.isNumber());
190:       assertFalse(node0.isScript());
191:       assertFalse(node0.isGetterDef());
192:       assertEquals((-1), node0.getCharno());
193:       assertFalse(node0.isCase());
194:       assertFalse(node0.isArrayLit());
195:       assertFalse(node0.isTrue());
196:       assertFalse(node0.isVoid());
197:       assertFalse(node0.isFor());
198:       assertFalse(node0.isTry());
199:       assertFalse(node0.isIf());
200:       assertFalse(node0.isDelProp());
201:       assertFalse(node0.isRegExp());
202:       assertFalse(node0.isFunction());
203:       assertFalse(node0.isCatch());
204:       assertEquals(0, node0.getChildCount());
205:       assertFalse(node0.isDefaultCase());
206:       assertFalse(node0.isNull());
207:       assertFalse(node0.isNE());
208:       assertFalse(node0.isSetterDef());
209:       assertFalse(node0.isInc());
210:       assertFalse(node0.isEmpty());
211:       assertFalse(node0.isIn());
212:       assertFalse(node0.isThrow());
213:       assertFalse(node0.isName());
214:       assertFalse(node0.isComma());
215:       assertFalse(node0.isBreak());
216:       assertFalse(node0.isFalse());
217:       assertFalse(node0.isCall());
218:       assertEquals(0, node0.getType());
219:       assertFalse(node0.isContinue());
220:       assertFalse(node0.isReturn());
221:       assertFalse(node0.isWhile());
222:       assertFalse(node0.isAnd());
223:       assertEquals((-1), node0.getSourcePosition());
224:       assertFalse(node0.isDebugger());
225:       assertFalse(node0.isGetProp());
226:       assertFalse(node0.isNot());
227:       assertFalse(node0.isObjectLit());
228:       assertFalse(node0.isString());
229:       
230:       node0.putIntProp(1812, 0);
231:       assertEquals(30, Node.VAR_ARGS_NAME);
232:       assertEquals(49, Node.DIRECT_EVAL);
233:       assertEquals(1, Node.DECR_FLAG);
234:       assertEquals(15, Node.NO_SIDE_EFFECTS);
235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
236:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
238:       assertEquals(12, Node.COLUMN_BITS);
239:       assertEquals(32, Node.INCRDECR_PROP);
240:       assertEquals(57, Node.LAST_PROP);
241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(40, Node.ORIGINALNAME_PROP);
244:       assertEquals(47, Node.IS_DISPATCHER);
245:       assertEquals(2, Node.POST_FLAG);
246:       assertEquals(54, Node.SLASH_V);
247:       assertEquals(43, Node.IS_CONSTANT_NAME);
248:       assertEquals(46, Node.IS_NAMESPACE);
249:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
250:       assertEquals(36, Node.QUOTED_PROP);
251:       assertEquals(55, Node.INFERRED_FUNCTION);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(53, Node.INPUT_ID);
254:       assertEquals(39, Node.EMPTY_BLOCK);
255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
256:       assertEquals(29, Node.JSDOC_INFO_PROP);
257:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
258:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
259:       assertEquals(8, Node.FLAG_NO_THROWS);
260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
261:       assertEquals(52, Node.LENGTH);
262:       assertEquals(48, Node.DIRECTIVES);
263:       assertEquals(37, Node.OPT_ARG_NAME);
264:       assertEquals(56, Node.CHANGE_TIME);
265:       assertEquals(57, Node.REFLECTED_OBJECT);
266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isLabelName());
269:       assertFalse(node0.isDec());
270:       assertFalse(node0.isTypeOf());
271:       assertFalse(node0.hasChildren());
272:       assertFalse(node0.isGetElem());
273:       assertFalse(node0.isAssign());
274:       assertFalse(node0.isExprResult());
275:       assertFalse(node0.isCast());
276:       assertFalse(node0.isWith());
277:       assertFalse(node0.isInstanceOf());
278:       assertEquals((-1), node0.getLineno());
279:       assertFalse(node0.isLabel());
280:       assertFalse(node0.isDo());
281:       assertFalse(node0.isAssignAdd());
282:       assertFalse(node0.isAdd());
283:       assertFalse(node0.isOr());
284:       assertFalse(node0.isHook());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isBlock());
287:       assertFalse(node0.isStringKey());
288:       assertFalse(node0.isNew());
289:       assertFalse(node0.isSwitch());
290:       assertFalse(node0.isThis());
291:       assertFalse(node0.hasMoreThanOneChild());
292:       assertFalse(node0.isParamList());
293:       assertFalse(node0.isNumber());
294:       assertFalse(node0.isScript());
295:       assertFalse(node0.isGetterDef());
296:       assertEquals((-1), node0.getCharno());
297:       assertFalse(node0.isCase());
298:       assertFalse(node0.isArrayLit());
299:       assertFalse(node0.isTrue());
300:       assertFalse(node0.isVoid());
301:       assertFalse(node0.isFor());
302:       assertFalse(node0.isTry());
303:       assertFalse(node0.isIf());
304:       assertFalse(node0.isDelProp());
305:       assertFalse(node0.isRegExp());
306:       assertFalse(node0.isFunction());
307:       assertFalse(node0.isCatch());
308:       assertEquals(0, node0.getChildCount());
309:       assertFalse(node0.isDefaultCase());
310:       assertFalse(node0.isNull());
311:       assertFalse(node0.isNE());
312:       assertFalse(node0.isSetterDef());
313:       assertFalse(node0.isInc());
314:       assertFalse(node0.isEmpty());
315:       assertFalse(node0.isIn());
316:       assertFalse(node0.isThrow());
317:       assertFalse(node0.isName());
318:       assertFalse(node0.isComma());
319:       assertFalse(node0.isBreak());
320:       assertFalse(node0.isFalse());
321:       assertFalse(node0.isCall());
322:       assertEquals(0, node0.getType());
323:       assertFalse(node0.isContinue());
324:       assertFalse(node0.isReturn());
325:       assertFalse(node0.isWhile());
326:       assertFalse(node0.isAnd());
327:       assertEquals((-1), node0.getSourcePosition());
328:       assertFalse(node0.isDebugger());
329:       assertFalse(node0.isGetProp());
330:       assertFalse(node0.isNot());
331:       assertFalse(node0.isObjectLit());
332:       assertFalse(node0.isString());
333:       
334:       Iterable<Node> iterable0 = node0.children();
335:       assertNotNull(iterable0);
336:       assertEquals(30, Node.VAR_ARGS_NAME);
337:       assertEquals(49, Node.DIRECT_EVAL);
338:       assertEquals(1, Node.DECR_FLAG);
339:       assertEquals(15, Node.NO_SIDE_EFFECTS);
340:       assertEquals(51, Node.STATIC_SOURCE_FILE);
341:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
343:       assertEquals(12, Node.COLUMN_BITS);
344:       assertEquals(32, Node.INCRDECR_PROP);
345:       assertEquals(57, Node.LAST_PROP);
346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
347:       assertEquals(50, Node.FREE_CALL);
348:       assertEquals(40, Node.ORIGINALNAME_PROP);
349:       assertEquals(47, Node.IS_DISPATCHER);
350:       assertEquals(2, Node.POST_FLAG);
351:       assertEquals(54, Node.SLASH_V);
352:       assertEquals(43, Node.IS_CONSTANT_NAME);
353:       assertEquals(46, Node.IS_NAMESPACE);
354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
355:       assertEquals(36, Node.QUOTED_PROP);
356:       assertEquals(55, Node.INFERRED_FUNCTION);
357:       assertEquals(4095, Node.COLUMN_MASK);
358:       assertEquals(53, Node.INPUT_ID);
359:       assertEquals(39, Node.EMPTY_BLOCK);
360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
361:       assertEquals(29, Node.JSDOC_INFO_PROP);
362:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
363:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
364:       assertEquals(8, Node.FLAG_NO_THROWS);
365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(37, Node.OPT_ARG_NAME);
369:       assertEquals(56, Node.CHANGE_TIME);
370:       assertEquals(57, Node.REFLECTED_OBJECT);
371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
372:       assertFalse(node0.hasOneChild());
373:       assertFalse(node0.isLabelName());
374:       assertFalse(node0.isDec());
375:       assertFalse(node0.isTypeOf());
376:       assertFalse(node0.hasChildren());
377:       assertFalse(node0.isGetElem());
378:       assertFalse(node0.isAssign());
379:       assertFalse(node0.isExprResult());
380:       assertFalse(node0.isCast());
381:       assertFalse(node0.isWith());
382:       assertFalse(node0.isInstanceOf());
383:       assertEquals((-1), node0.getLineno());
384:       assertFalse(node0.isLabel());
385:       assertFalse(node0.isDo());
386:       assertFalse(node0.isAssignAdd());
387:       assertFalse(node0.isAdd());
388:       assertFalse(node0.isOr());
389:       assertFalse(node0.isHook());
390:       assertFalse(node0.isVar());
391:       assertFalse(node0.isBlock());
392:       assertFalse(node0.isStringKey());
393:       assertFalse(node0.isNew());
394:       assertFalse(node0.isSwitch());
395:       assertFalse(node0.isThis());
396:       assertFalse(node0.hasMoreThanOneChild());
397:       assertFalse(node0.isParamList());
398:       assertFalse(node0.isNumber());
399:       assertFalse(node0.isScript());
400:       assertFalse(node0.isGetterDef());
401:       assertEquals((-1), node0.getCharno());
402:       assertFalse(node0.isCase());
403:       assertFalse(node0.isArrayLit());
404:       assertFalse(node0.isTrue());
405:       assertFalse(node0.isVoid());
406:       assertFalse(node0.isFor());
407:       assertFalse(node0.isTry());
408:       assertFalse(node0.isIf());
409:       assertFalse(node0.isDelProp());
410:       assertFalse(node0.isRegExp());
411:       assertFalse(node0.isFunction());
412:       assertFalse(node0.isCatch());
413:       assertEquals(0, node0.getChildCount());
414:       assertFalse(node0.isDefaultCase());
415:       assertFalse(node0.isNull());
416:       assertFalse(node0.isNE());
417:       assertFalse(node0.isSetterDef());
418:       assertFalse(node0.isInc());
419:       assertFalse(node0.isEmpty());
420:       assertFalse(node0.isIn());
421:       assertFalse(node0.isThrow());
422:       assertFalse(node0.isName());
423:       assertFalse(node0.isComma());
424:       assertFalse(node0.isBreak());
425:       assertFalse(node0.isFalse());
426:       assertFalse(node0.isCall());
427:       assertEquals(0, node0.getType());
428:       assertFalse(node0.isContinue());
429:       assertFalse(node0.isReturn());
430:       assertFalse(node0.isWhile());
431:       assertFalse(node0.isAnd());
432:       assertEquals((-1), node0.getSourcePosition());
433:       assertFalse(node0.isDebugger());
434:       assertFalse(node0.isGetProp());
435:       assertFalse(node0.isNot());
436:       assertFalse(node0.isObjectLit());
437:       assertFalse(node0.isString());
438:       assertFalse(iterable0.contains(node0));
439:       
440:       boolean boolean1 = node0.isStringKey();
441:       assertFalse(boolean1);
442:       assertEquals(30, Node.VAR_ARGS_NAME);
443:       assertEquals(49, Node.DIRECT_EVAL);
444:       assertEquals(1, Node.DECR_FLAG);
445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
448:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
449:       assertEquals(12, Node.COLUMN_BITS);
450:       assertEquals(32, Node.INCRDECR_PROP);
451:       assertEquals(57, Node.LAST_PROP);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertEquals(50, Node.FREE_CALL);
454:       assertEquals(40, Node.ORIGINALNAME_PROP);
455:       assertEquals(47, Node.IS_DISPATCHER);
456:       assertEquals(2, Node.POST_FLAG);
457:       assertEquals(54, Node.SLASH_V);
458:       assertEquals(43, Node.IS_CONSTANT_NAME);
459:       assertEquals(46, Node.IS_NAMESPACE);
460:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
461:       assertEquals(36, Node.QUOTED_PROP);
462:       assertEquals(55, Node.INFERRED_FUNCTION);
463:       assertEquals(4095, Node.COLUMN_MASK);
464:       assertEquals(53, Node.INPUT_ID);
465:       assertEquals(39, Node.EMPTY_BLOCK);
466:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
467:       assertEquals(29, Node.JSDOC_INFO_PROP);
468:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
469:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
470:       assertEquals(8, Node.FLAG_NO_THROWS);
471:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
472:       assertEquals(52, Node.LENGTH);
473:       assertEquals(48, Node.DIRECTIVES);
474:       assertEquals(37, Node.OPT_ARG_NAME);
475:       assertEquals(56, Node.CHANGE_TIME);
476:       assertEquals(57, Node.REFLECTED_OBJECT);
477:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
478:       assertTrue(boolean1 == boolean0);
479:       assertFalse(node0.hasOneChild());
480:       assertFalse(node0.isLabelName());
481:       assertFalse(node0.isDec());
482:       assertFalse(node0.isTypeOf());
483:       assertFalse(node0.hasChildren());
484:       assertFalse(node0.isGetElem());
485:       assertFalse(node0.isAssign());
486:       assertFalse(node0.isExprResult());
487:       assertFalse(node0.isCast());
488:       assertFalse(node0.isWith());
489:       assertFalse(node0.isInstanceOf());
490:       assertEquals((-1), node0.getLineno());
491:       assertFalse(node0.isLabel());
492:       assertFalse(node0.isDo());
493:       assertFalse(node0.isAssignAdd());
494:       assertFalse(node0.isAdd());
495:       assertFalse(node0.isOr());
496:       assertFalse(node0.isHook());
497:       assertFalse(node0.isVar());
498:       assertFalse(node0.isBlock());
499:       assertFalse(node0.isStringKey());
500:       assertFalse(node0.isNew());
501:       assertFalse(node0.isSwitch());
502:       assertFalse(node0.isThis());
503:       assertFalse(node0.hasMoreThanOneChild());
504:       assertFalse(node0.isParamList());
505:       assertFalse(node0.isNumber());
506:       assertFalse(node0.isScript());
507:       assertFalse(node0.isGetterDef());
508:       assertEquals((-1), node0.getCharno());
509:       assertFalse(node0.isCase());
510:       assertFalse(node0.isArrayLit());
511:       assertFalse(node0.isTrue());
512:       assertFalse(node0.isVoid());
513:       assertFalse(node0.isFor());
514:       assertFalse(node0.isTry());
515:       assertFalse(node0.isIf());
516:       assertFalse(node0.isDelProp());
517:       assertFalse(node0.isRegExp());
518:       assertFalse(node0.isFunction());
519:       assertFalse(node0.isCatch());
520:       assertEquals(0, node0.getChildCount());
521:       assertFalse(node0.isDefaultCase());
522:       assertFalse(node0.isNull());
523:       assertFalse(node0.isNE());
524:       assertFalse(node0.isSetterDef());
525:       assertFalse(node0.isInc());
526:       assertFalse(node0.isEmpty());
527:       assertFalse(node0.isIn());
528:       assertFalse(node0.isThrow());
529:       assertFalse(node0.isName());
530:       assertFalse(node0.isComma());
531:       assertFalse(node0.isBreak());
532:       assertFalse(node0.isFalse());
533:       assertFalse(node0.isCall());
534:       assertEquals(0, node0.getType());
535:       assertFalse(node0.isContinue());
536:       assertFalse(node0.isReturn());
537:       assertFalse(node0.isWhile());
538:       assertFalse(node0.isAnd());
539:       assertEquals((-1), node0.getSourcePosition());
540:       assertFalse(node0.isDebugger());
541:       assertFalse(node0.isGetProp());
542:       assertFalse(node0.isNot());
543:       assertFalse(node0.isObjectLit());
544:       assertFalse(node0.isString());
545:       
546:       boolean boolean2 = node0.isCase();
547:       assertFalse(boolean2);
548:       assertEquals(30, Node.VAR_ARGS_NAME);
549:       assertEquals(49, Node.DIRECT_EVAL);
550:       assertEquals(1, Node.DECR_FLAG);
551:       assertEquals(15, Node.NO_SIDE_EFFECTS);
552:       assertEquals(51, Node.STATIC_SOURCE_FILE);
553:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
554:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
555:       assertEquals(12, Node.COLUMN_BITS);
556:       assertEquals(32, Node.INCRDECR_PROP);
557:       assertEquals(57, Node.LAST_PROP);
558:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
559:       assertEquals(50, Node.FREE_CALL);
560:       assertEquals(40, Node.ORIGINALNAME_PROP);
561:       assertEquals(47, Node.IS_DISPATCHER);
562:       assertEquals(2, Node.POST_FLAG);
563:       assertEquals(54, Node.SLASH_V);
564:       assertEquals(43, Node.IS_CONSTANT_NAME);
565:       assertEquals(46, Node.IS_NAMESPACE);
566:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
567:       assertEquals(36, Node.QUOTED_PROP);
568:       assertEquals(55, Node.INFERRED_FUNCTION);
569:       assertEquals(4095, Node.COLUMN_MASK);
570:       assertEquals(53, Node.INPUT_ID);
571:       assertEquals(39, Node.EMPTY_BLOCK);
572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
573:       assertEquals(29, Node.JSDOC_INFO_PROP);
574:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
575:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
576:       assertEquals(8, Node.FLAG_NO_THROWS);
577:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
578:       assertEquals(52, Node.LENGTH);
579:       assertEquals(48, Node.DIRECTIVES);
580:       assertEquals(37, Node.OPT_ARG_NAME);
581:       assertEquals(56, Node.CHANGE_TIME);
582:       assertEquals(57, Node.REFLECTED_OBJECT);
583:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
584:       assertTrue(boolean2 == boolean1);
585:       assertTrue(boolean2 == boolean0);
586:       assertFalse(node0.hasOneChild());
587:       assertFalse(node0.isLabelName());
588:       assertFalse(node0.isDec());
589:       assertFalse(node0.isTypeOf());
590:       assertFalse(node0.hasChildren());
591:       assertFalse(node0.isGetElem());
592:       assertFalse(node0.isAssign());
593:       assertFalse(node0.isExprResult());
594:       assertFalse(node0.isCast());
595:       assertFalse(node0.isWith());
596:       assertFalse(node0.isInstanceOf());
597:       assertEquals((-1), node0.getLineno());
598:       assertFalse(node0.isLabel());
599:       assertFalse(node0.isDo());
600:       assertFalse(node0.isAssignAdd());
601:       assertFalse(node0.isAdd());
602:       assertFalse(node0.isOr());
603:       assertFalse(node0.isHook());
604:       assertFalse(node0.isVar());
605:       assertFalse(node0.isBlock());
606:       assertFalse(node0.isStringKey());
607:       assertFalse(node0.isNew());
608:       assertFalse(node0.isSwitch());
609:       assertFalse(node0.isThis());
610:       assertFalse(node0.hasMoreThanOneChild());
611:       assertFalse(node0.isParamList());
612:       assertFalse(node0.isNumber());
613:       assertFalse(node0.isScript());
614:       assertFalse(node0.isGetterDef());
615:       assertEquals((-1), node0.getCharno());
616:       assertFalse(node0.isCase());
617:       assertFalse(node0.isArrayLit());
618:       assertFalse(node0.isTrue());
619:       assertFalse(node0.isVoid());
620:       assertFalse(node0.isFor());
621:       assertFalse(node0.isTry());
622:       assertFalse(node0.isIf());
623:       assertFalse(node0.isDelProp());
624:       assertFalse(node0.isRegExp());
625:       assertFalse(node0.isFunction());
626:       assertFalse(node0.isCatch());
627:       assertEquals(0, node0.getChildCount());
628:       assertFalse(node0.isDefaultCase());
629:       assertFalse(node0.isNull());
630:       assertFalse(node0.isNE());
631:       assertFalse(node0.isSetterDef());
632:       assertFalse(node0.isInc());
633:       assertFalse(node0.isEmpty());
634:       assertFalse(node0.isIn());
635:       assertFalse(node0.isThrow());
636:       assertFalse(node0.isName());
637:       assertFalse(node0.isComma());
638:       assertFalse(node0.isBreak());
639:       assertFalse(node0.isFalse());
640:       assertFalse(node0.isCall());
641:       assertEquals(0, node0.getType());
642:       assertFalse(node0.isContinue());
643:       assertFalse(node0.isReturn());
644:       assertFalse(node0.isWhile());
645:       assertFalse(node0.isAnd());
646:       assertEquals((-1), node0.getSourcePosition());
647:       assertFalse(node0.isDebugger());
648:       assertFalse(node0.isGetProp());
649:       assertFalse(node0.isNot());
650:       assertFalse(node0.isObjectLit());
651:       assertFalse(node0.isString());
652:       
653:       boolean boolean3 = node0.isCatch();
654:       assertFalse(boolean3);
655:       assertEquals(30, Node.VAR_ARGS_NAME);
656:       assertEquals(49, Node.DIRECT_EVAL);
657:       assertEquals(1, Node.DECR_FLAG);
658:       assertEquals(15, Node.NO_SIDE_EFFECTS);
659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
660:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
662:       assertEquals(12, Node.COLUMN_BITS);
663:       assertEquals(32, Node.INCRDECR_PROP);
664:       assertEquals(57, Node.LAST_PROP);
665:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
666:       assertEquals(50, Node.FREE_CALL);
667:       assertEquals(40, Node.ORIGINALNAME_PROP);
668:       assertEquals(47, Node.IS_DISPATCHER);
669:       assertEquals(2, Node.POST_FLAG);
670:       assertEquals(54, Node.SLASH_V);
671:       assertEquals(43, Node.IS_CONSTANT_NAME);
672:       assertEquals(46, Node.IS_NAMESPACE);
673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
674:       assertEquals(36, Node.QUOTED_PROP);
675:       assertEquals(55, Node.INFERRED_FUNCTION);
676:       assertEquals(4095, Node.COLUMN_MASK);
677:       assertEquals(53, Node.INPUT_ID);
678:       assertEquals(39, Node.EMPTY_BLOCK);
679:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
680:       assertEquals(29, Node.JSDOC_INFO_PROP);
681:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
682:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
683:       assertEquals(8, Node.FLAG_NO_THROWS);
684:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
685:       assertEquals(52, Node.LENGTH);
686:       assertEquals(48, Node.DIRECTIVES);
687:       assertEquals(37, Node.OPT_ARG_NAME);
688:       assertEquals(56, Node.CHANGE_TIME);
689:       assertEquals(57, Node.REFLECTED_OBJECT);
690:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
691:       assertTrue(boolean3 == boolean2);
692:       assertTrue(boolean3 == boolean0);
693:       assertTrue(boolean3 == boolean1);
694:       assertFalse(node0.hasOneChild());
695:       assertFalse(node0.isLabelName());
696:       assertFalse(node0.isDec());
697:       assertFalse(node0.isTypeOf());
698:       assertFalse(node0.hasChildren());
699:       assertFalse(node0.isGetElem());
700:       assertFalse(node0.isAssign());
701:       assertFalse(node0.isExprResult());
702:       assertFalse(node0.isCast());
703:       assertFalse(node0.isWith());
704:       assertFalse(node0.isInstanceOf());
705:       assertEquals((-1), node0.getLineno());
706:       assertFalse(node0.isLabel());
707:       assertFalse(node0.isDo());
708:       assertFalse(node0.isAssignAdd());
709:       assertFalse(node0.isAdd());
710:       assertFalse(node0.isOr());
711:       assertFalse(node0.isHook());
712:       assertFalse(node0.isVar());
713:       assertFalse(node0.isBlock());
714:       assertFalse(node0.isStringKey());
715:       assertFalse(node0.isNew());
716:       assertFalse(node0.isSwitch());
717:       assertFalse(node0.isThis());
718:       assertFalse(node0.hasMoreThanOneChild());
719:       assertFalse(node0.isParamList());
720:       assertFalse(node0.isNumber());
721:       assertFalse(node0.isScript());
722:       assertFalse(node0.isGetterDef());
723:       assertEquals((-1), node0.getCharno());
724:       assertFalse(node0.isCase());
725:       assertFalse(node0.isArrayLit());
726:       assertFalse(node0.isTrue());
727:       assertFalse(node0.isVoid());
728:       assertFalse(node0.isFor());
729:       assertFalse(node0.isTry());
730:       assertFalse(node0.isIf());
731:       assertFalse(node0.isDelProp());
732:       assertFalse(node0.isRegExp());
733:       assertFalse(node0.isFunction());
734:       assertFalse(node0.isCatch());
735:       assertEquals(0, node0.getChildCount());
736:       assertFalse(node0.isDefaultCase());
737:       assertFalse(node0.isNull());
738:       assertFalse(node0.isNE());
739:       assertFalse(node0.isSetterDef());
740:       assertFalse(node0.isInc());
741:       assertFalse(node0.isEmpty());
742:       assertFalse(node0.isIn());
743:       assertFalse(node0.isThrow());
744:       assertFalse(node0.isName());
745:       assertFalse(node0.isComma());
746:       assertFalse(node0.isBreak());
747:       assertFalse(node0.isFalse());
748:       assertFalse(node0.isCall());
749:       assertEquals(0, node0.getType());
750:       assertFalse(node0.isContinue());
751:       assertFalse(node0.isReturn());
752:       assertFalse(node0.isWhile());
753:       assertFalse(node0.isAnd());
754:       assertEquals((-1), node0.getSourcePosition());
755:       assertFalse(node0.isDebugger());
756:       assertFalse(node0.isGetProp());
757:       assertFalse(node0.isNot());
758:       assertFalse(node0.isObjectLit());
759:       assertFalse(node0.isString());
760:       
761:       boolean boolean4 = node0.isCatch();
762:       assertFalse(boolean4);
763:       assertEquals(30, Node.VAR_ARGS_NAME);
764:       assertEquals(49, Node.DIRECT_EVAL);
765:       assertEquals(1, Node.DECR_FLAG);
766:       assertEquals(15, Node.NO_SIDE_EFFECTS);
767:       assertEquals(51, Node.STATIC_SOURCE_FILE);
768:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
769:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
770:       assertEquals(12, Node.COLUMN_BITS);
771:       assertEquals(32, Node.INCRDECR_PROP);
772:       assertEquals(57, Node.LAST_PROP);
773:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
774:       assertEquals(50, Node.FREE_CALL);
775:       assertEquals(40, Node.ORIGINALNAME_PROP);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(2, Node.POST_FLAG);
778:       assertEquals(54, Node.SLASH_V);
779:       assertEquals(43, Node.IS_CONSTANT_NAME);
780:       assertEquals(46, Node.IS_NAMESPACE);
781:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
782:       assertEquals(36, Node.QUOTED_PROP);
783:       assertEquals(55, Node.INFERRED_FUNCTION);
784:       assertEquals(4095, Node.COLUMN_MASK);
785:       assertEquals(53, Node.INPUT_ID);
786:       assertEquals(39, Node.EMPTY_BLOCK);
787:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
788:       assertEquals(29, Node.JSDOC_INFO_PROP);
789:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
790:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
791:       assertEquals(8, Node.FLAG_NO_THROWS);
792:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
793:       assertEquals(52, Node.LENGTH);
794:       assertEquals(48, Node.DIRECTIVES);
795:       assertEquals(37, Node.OPT_ARG_NAME);
796:       assertEquals(56, Node.CHANGE_TIME);
797:       assertEquals(57, Node.REFLECTED_OBJECT);
798:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
799:       assertTrue(boolean4 == boolean0);
800:       assertTrue(boolean4 == boolean2);
801:       assertTrue(boolean4 == boolean3);
802:       assertTrue(boolean4 == boolean1);
803:       assertFalse(node0.hasOneChild());
804:       assertFalse(node0.isLabelName());
805:       assertFalse(node0.isDec());
806:       assertFalse(node0.isTypeOf());
807:       assertFalse(node0.hasChildren());
808:       assertFalse(node0.isGetElem());
809:       assertFalse(node0.isAssign());
810:       assertFalse(node0.isExprResult());
811:       assertFalse(node0.isCast());
812:       assertFalse(node0.isWith());
813:       assertFalse(node0.isInstanceOf());
814:       assertEquals((-1), node0.getLineno());
815:       assertFalse(node0.isLabel());
816:       assertFalse(node0.isDo());
817:       assertFalse(node0.isAssignAdd());
818:       assertFalse(node0.isAdd());
819:       assertFalse(node0.isOr());
820:       assertFalse(node0.isHook());
821:       assertFalse(node0.isVar());
822:       assertFalse(node0.isBlock());
823:       assertFalse(node0.isStringKey());
824:       assertFalse(node0.isNew());
825:       assertFalse(node0.isSwitch());
826:       assertFalse(node0.isThis());
827:       assertFalse(node0.hasMoreThanOneChild());
828:       assertFalse(node0.isParamList());
829:       assertFalse(node0.isNumber());
830:       assertFalse(node0.isScript());
831:       assertFalse(node0.isGetterDef());
832:       assertEquals((-1), node0.getCharno());
833:       assertFalse(node0.isCase());
834:       assertFalse(node0.isArrayLit());
835:       assertFalse(node0.isTrue());
836:       assertFalse(node0.isVoid());
837:       assertFalse(node0.isFor());
838:       assertFalse(node0.isTry());
839:       assertFalse(node0.isIf());
840:       assertFalse(node0.isDelProp());
841:       assertFalse(node0.isRegExp());
842:       assertFalse(node0.isFunction());
843:       assertFalse(node0.isCatch());
844:       assertEquals(0, node0.getChildCount());
845:       assertFalse(node0.isDefaultCase());
846:       assertFalse(node0.isNull());
847:       assertFalse(node0.isNE());
848:       assertFalse(node0.isSetterDef());
849:       assertFalse(node0.isInc());
850:       assertFalse(node0.isEmpty());
851:       assertFalse(node0.isIn());
852:       assertFalse(node0.isThrow());
853:       assertFalse(node0.isName());
854:       assertFalse(node0.isComma());
855:       assertFalse(node0.isBreak());
856:       assertFalse(node0.isFalse());
857:       assertFalse(node0.isCall());
858:       assertEquals(0, node0.getType());
859:       assertFalse(node0.isContinue());
860:       assertFalse(node0.isReturn());
861:       assertFalse(node0.isWhile());
862:       assertFalse(node0.isAnd());
863:       assertEquals((-1), node0.getSourcePosition());
864:       assertFalse(node0.isDebugger());
865:       assertFalse(node0.isGetProp());
866:       assertFalse(node0.isNot());
867:       assertFalse(node0.isObjectLit());
868:       assertFalse(node0.isString());
869:       
870:       Node node1 = Node.newNumber((double) 2199);
871:       assertNotNull(node1);
872:       assertEquals(12, Node.COLUMN_BITS);
873:       assertEquals(51, Node.STATIC_SOURCE_FILE);
874:       assertEquals(46, Node.IS_NAMESPACE);
875:       assertEquals(30, Node.VAR_ARGS_NAME);
876:       assertEquals(56, Node.CHANGE_TIME);
877:       assertEquals(37, Node.OPT_ARG_NAME);
878:       assertEquals(54, Node.SLASH_V);
879:       assertEquals(49, Node.DIRECT_EVAL);
880:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
881:       assertEquals(50, Node.FREE_CALL);
882:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
883:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
884:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
885:       assertEquals(1, Node.DECR_FLAG);
886:       assertEquals(32, Node.INCRDECR_PROP);
887:       assertEquals(4095, Node.COLUMN_MASK);
888:       assertEquals(55, Node.INFERRED_FUNCTION);
889:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
890:       assertEquals(8, Node.FLAG_NO_THROWS);
891:       assertEquals(43, Node.IS_CONSTANT_NAME);
892:       assertEquals(36, Node.QUOTED_PROP);
893:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
894:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
895:       assertEquals(48, Node.DIRECTIVES);
896:       assertEquals(40, Node.ORIGINALNAME_PROP);
897:       assertEquals(57, Node.REFLECTED_OBJECT);
898:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
899:       assertEquals(29, Node.JSDOC_INFO_PROP);
900:       assertEquals(52, Node.LENGTH);
901:       assertEquals(2, Node.POST_FLAG);
902:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
903:       assertEquals(15, Node.NO_SIDE_EFFECTS);
904:       assertEquals(39, Node.EMPTY_BLOCK);
905:       assertEquals(47, Node.IS_DISPATCHER);
906:       assertEquals(53, Node.INPUT_ID);
907:       assertEquals(57, Node.LAST_PROP);
908:       assertFalse(node1.equals((Object)node0));
909:       assertFalse(node1.isExprResult());
910:       assertFalse(node1.hasOneChild());
911:       assertFalse(node1.isNot());
912:       assertFalse(node1.isScript());
913:       assertEquals((-1), node1.getSourcePosition());
914:       assertFalse(node1.isObjectLit());
915:       assertFalse(node1.isLabel());
916:       assertFalse(node1.isAnd());
917:       assertFalse(node1.isAssignAdd());
918:       assertFalse(node1.isLabelName());
919:       assertFalse(node1.isThrow());
920:       assertFalse(node1.isCast());
921:       assertFalse(node1.isContinue());
922:       assertFalse(node1.isFalse());
923:       assertFalse(node1.isBlock());
924:       assertEquals((-1), node1.getCharno());
925:       assertFalse(node1.isInc());
926:       assertFalse(node1.isHook());
927:       assertFalse(node1.isSwitch());
928:       assertFalse(node1.isCase());
929:       assertFalse(node1.isStringKey());
930:       assertFalse(node1.isIn());
931:       assertEquals((-1), node1.getLineno());
932:       assertFalse(node1.isThis());
933:       assertFalse(node1.isNE());
934:       assertFalse(node1.isIf());
935:       assertFalse(node1.isFor());
936:       assertEquals(39, node1.getType());
937:       assertFalse(node1.isRegExp());
938:       assertFalse(node1.isInstanceOf());
939:       assertFalse(node1.isCatch());
940:       assertFalse(node1.hasMoreThanOneChild());
941:       assertFalse(node1.isWith());
942:       assertFalse(node1.isVoid());
943:       assertFalse(node1.isTry());
944:       assertFalse(node1.isTrue());
945:       assertFalse(node1.isDebugger());
946:       assertFalse(node1.isArrayLit());
947:       assertFalse(node1.isDefaultCase());
948:       assertFalse(node1.isEmpty());
949:       assertFalse(node1.isGetterDef());
950:       assertFalse(node1.isSetterDef());
951:       assertFalse(node1.isParamList());
952:       assertEquals(0, node1.getChildCount());
953:       assertFalse(node1.isFunction());
954:       assertFalse(node1.isAdd());
955:       assertFalse(node1.isNew());
956:       assertFalse(node1.isVar());
957:       assertFalse(node1.isWhile());
958:       assertFalse(node1.isDo());
959:       assertFalse(node1.isString());
960:       assertTrue(node1.isNumber());
961:       assertFalse(node1.isOr());
962:       assertFalse(node1.isReturn());
963:       assertFalse(node1.isGetProp());
964:       assertFalse(node1.isNull());
965:       assertFalse(node1.isDelProp());
966:       assertFalse(node1.isGetElem());
967:       assertFalse(node1.isName());
968:       assertFalse(node1.isAssign());
969:       assertFalse(node1.isCall());
970:       assertFalse(node1.hasChildren());
971:       assertFalse(node1.isBreak());
972:       assertFalse(node1.isTypeOf());
973:       assertFalse(node1.isDec());
974:       assertFalse(node1.isComma());
975:       
976:       Node node2 = new Node(55, node0, node0);
977:       assertNotNull(node2);
978:       assertEquals(30, Node.VAR_ARGS_NAME);
979:       assertEquals(49, Node.DIRECT_EVAL);
980:       assertEquals(1, Node.DECR_FLAG);
981:       assertEquals(15, Node.NO_SIDE_EFFECTS);
982:       assertEquals(51, Node.STATIC_SOURCE_FILE);
983:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
984:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
985:       assertEquals(12, Node.COLUMN_BITS);
986:       assertEquals(32, Node.INCRDECR_PROP);
987:       assertEquals(57, Node.LAST_PROP);
988:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
989:       assertEquals(50, Node.FREE_CALL);
990:       assertEquals(40, Node.ORIGINALNAME_PROP);
991:       assertEquals(47, Node.IS_DISPATCHER);
992:       assertEquals(2, Node.POST_FLAG);
993:       assertEquals(54, Node.SLASH_V);
994:       assertEquals(43, Node.IS_CONSTANT_NAME);
995:       assertEquals(46, Node.IS_NAMESPACE);
996:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
997:       assertEquals(36, Node.QUOTED_PROP);
998:       assertEquals(55, Node.INFERRED_FUNCTION);
999:       assertEquals(4095, Node.COLUMN_MASK);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertEquals(39, Node.EMPTY_BLOCK);
1002:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1003:       assertEquals(29, Node.JSDOC_INFO_PROP);
1004:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1005:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1006:       assertEquals(8, Node.FLAG_NO_THROWS);
1007:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1008:       assertEquals(52, Node.LENGTH);
1009:       assertEquals(48, Node.DIRECTIVES);
1010:       assertEquals(37, Node.OPT_ARG_NAME);
1011:       assertEquals(56, Node.CHANGE_TIME);
1012:       assertEquals(57, Node.REFLECTED_OBJECT);
1013:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1014:       assertEquals(32, Node.INCRDECR_PROP);
1015:       assertEquals(46, Node.IS_NAMESPACE);
1016:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1017:       assertEquals(12, Node.COLUMN_BITS);
1018:       assertEquals(2, Node.POST_FLAG);
1019:       assertEquals(30, Node.VAR_ARGS_NAME);
1020:       assertEquals(29, Node.JSDOC_INFO_PROP);
1021:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1022:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1023:       assertEquals(47, Node.IS_DISPATCHER);
1024:       assertEquals(1, Node.DECR_FLAG);
1025:       assertEquals(57, Node.LAST_PROP);
1026:       assertEquals(40, Node.ORIGINALNAME_PROP);
1027:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1028:       assertEquals(50, Node.FREE_CALL);
1029:       assertEquals(54, Node.SLASH_V);
1030:       assertEquals(43, Node.IS_CONSTANT_NAME);
1031:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1032:       assertEquals(55, Node.INFERRED_FUNCTION);
1033:       assertEquals(4095, Node.COLUMN_MASK);
1034:       assertEquals(8, Node.FLAG_NO_THROWS);
1035:       assertEquals(39, Node.EMPTY_BLOCK);
1036:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1037:       assertEquals(53, Node.INPUT_ID);
1038:       assertEquals(57, Node.REFLECTED_OBJECT);
1039:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1040:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1041:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1042:       assertEquals(52, Node.LENGTH);
1043:       assertEquals(56, Node.CHANGE_TIME);
1044:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1045:       assertEquals(36, Node.QUOTED_PROP);
1046:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1047:       assertEquals(37, Node.OPT_ARG_NAME);
1048:       assertEquals(48, Node.DIRECTIVES);
1049:       assertEquals(49, Node.DIRECT_EVAL);
1050:       assertFalse(node0.equals((Object)node1));
1051:       assertFalse(node2.equals((Object)node1));
1052:       assertFalse(node2.equals((Object)node0));
1053:       assertFalse(node0.hasOneChild());
1054:       assertFalse(node0.isLabelName());
1055:       assertFalse(node0.isDec());
1056:       assertFalse(node0.isTypeOf());
1057:       assertFalse(node0.hasChildren());
1058:       assertFalse(node0.isGetElem());
1059:       assertFalse(node0.isAssign());
1060:       assertFalse(node0.isExprResult());
1061:       assertFalse(node0.isCast());
1062:       assertFalse(node0.isWith());
1063:       assertFalse(node0.isInstanceOf());
1064:       assertEquals((-1), node0.getLineno());
1065:       assertFalse(node0.isLabel());
1066:       assertFalse(node0.isDo());
1067:       assertFalse(node0.isAssignAdd());
1068:       assertFalse(node0.isAdd());
1069:       assertFalse(node0.isOr());
1070:       assertFalse(node0.isHook());
1071:       assertFalse(node0.isVar());
1072:       assertFalse(node0.isBlock());
1073:       assertFalse(node0.isStringKey());
1074:       assertFalse(node0.isNew());
1075:       assertFalse(node0.isSwitch());
1076:       assertFalse(node0.isThis());
1077:       assertFalse(node0.hasMoreThanOneChild());
1078:       assertFalse(node0.isParamList());
1079:       assertFalse(node0.isNumber());
1080:       assertFalse(node0.isScript());
1081:       assertFalse(node0.isGetterDef());
1082:       assertEquals((-1), node0.getCharno());
1083:       assertFalse(node0.isCase());
1084:       assertFalse(node0.isArrayLit());
1085:       assertFalse(node0.isTrue());
1086:       assertFalse(node0.isVoid());
1087:       assertFalse(node0.isFor());
1088:       assertFalse(node0.isTry());
1089:       assertFalse(node0.isIf());
1090:       assertFalse(node0.isDelProp());
1091:       assertFalse(node0.isRegExp());
1092:       assertFalse(node0.isFunction());
1093:       assertFalse(node0.isCatch());
1094:       assertEquals(0, node0.getChildCount());
1095:       assertFalse(node0.isDefaultCase());
1096:       assertFalse(node0.isNull());
1097:       assertFalse(node0.isNE());
1098:       assertFalse(node0.isSetterDef());
1099:       assertFalse(node0.isInc());
1100:       assertFalse(node0.isEmpty());
1101:       assertFalse(node0.isIn());
1102:       assertFalse(node0.isThrow());
1103:       assertFalse(node0.isName());
1104:       assertFalse(node0.isComma());
1105:       assertFalse(node0.isBreak());
1106:       assertFalse(node0.isFalse());
1107:       assertFalse(node0.isCall());
1108:       assertEquals(0, node0.getType());
1109:       assertFalse(node0.isContinue());
1110:       assertFalse(node0.isReturn());
1111:       assertFalse(node0.isWhile());
1112:       assertFalse(node0.isAnd());
1113:       assertEquals((-1), node0.getSourcePosition());
1114:       assertFalse(node0.isDebugger());
1115:       assertFalse(node0.isGetProp());
1116:       assertFalse(node0.isNot());
1117:       assertFalse(node0.isObjectLit());
1118:       assertFalse(node0.isString());
1119:       assertFalse(node2.isFunction());
1120:       assertFalse(node2.isTrue());
1121:       assertFalse(node2.isVoid());
1122:       assertFalse(node2.isRegExp());
1123:       assertFalse(node2.isDebugger());
1124:       assertFalse(node2.isTry());
1125:       assertFalse(node2.isDefaultCase());
1126:       assertFalse(node2.isCatch());
1127:       assertFalse(node2.isArrayLit());
1128:       assertFalse(node2.isSetterDef());
1129:       assertFalse(node2.isNE());
1130:       assertFalse(node2.isNull());
1131:       assertFalse(node2.isDelProp());
1132:       assertFalse(node2.isName());
1133:       assertFalse(node2.isIf());
1134:       assertFalse(node2.isAdd());
1135:       assertFalse(node2.isEmpty());
1136:       assertFalse(node2.isIn());
1137:       assertFalse(node2.isInc());
1138:       assertFalse(node2.isWhile());
1139:       assertFalse(node2.isCall());
1140:       assertFalse(node2.isThrow());
1141:       assertFalse(node2.isFalse());
1142:       assertFalse(node2.isContinue());
1143:       assertFalse(node2.isComma());
1144:       assertFalse(node2.isDec());
1145:       assertEquals((-1), node2.getSourcePosition());
1146:       assertFalse(node2.isGetProp());
1147:       assertTrue(node2.hasOneChild());
1148:       assertFalse(node2.isReturn());
1149:       assertFalse(node2.isObjectLit());
1150:       assertFalse(node2.isString());
1151:       assertFalse(node2.isNot());
1152:       assertFalse(node2.isExprResult());
1153:       assertFalse(node2.isScript());
1154:       assertFalse(node2.isAnd());
1155:       assertFalse(node2.isCast());
1156:       assertFalse(node2.isGetElem());
1157:       assertFalse(node2.isWith());
1158:       assertFalse(node2.isAssign());
1159:       assertFalse(node2.isInstanceOf());
1160:       assertFalse(node2.isTypeOf());
1161:       assertFalse(node2.isBreak());
1162:       assertFalse(node2.isLabel());
1163:       assertEquals((-1), node2.getLineno());
1164:       assertFalse(node2.isAssignAdd());
1165:       assertFalse(node2.isOr());
1166:       assertFalse(node2.isBlock());
1167:       assertFalse(node2.isNew());
1168:       assertEquals((-1), node2.getCharno());
1169:       assertFalse(node2.isDo());
1170:       assertFalse(node2.isSwitch());
1171:       assertFalse(node2.isVar());
1172:       assertFalse(node2.isHook());
1173:       assertEquals(1, node2.getChildCount());
1174:       assertTrue(node2.hasChildren());
1175:       assertFalse(node2.hasMoreThanOneChild());
1176:       assertFalse(node2.isThis());
1177:       assertFalse(node2.isParamList());
1178:       assertFalse(node2.isLabelName());
1179:       assertFalse(node2.isFor());
1180:       assertFalse(node2.isStringKey());
1181:       assertFalse(node2.isCase());
1182:       assertEquals(55, node2.getType());
1183:       assertFalse(node2.isGetterDef());
1184:       assertFalse(node2.isNumber());
1185:       
1186:       boolean boolean5 = node1.isNot();
1187:       assertFalse(boolean5);
1188:       assertEquals(12, Node.COLUMN_BITS);
1189:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1190:       assertEquals(46, Node.IS_NAMESPACE);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(56, Node.CHANGE_TIME);
1193:       assertEquals(37, Node.OPT_ARG_NAME);
1194:       assertEquals(54, Node.SLASH_V);
1195:       assertEquals(49, Node.DIRECT_EVAL);
1196:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1197:       assertEquals(50, Node.FREE_CALL);
1198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1199:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1201:       assertEquals(1, Node.DECR_FLAG);
1202:       assertEquals(32, Node.INCRDECR_PROP);
1203:       assertEquals(4095, Node.COLUMN_MASK);
1204:       assertEquals(55, Node.INFERRED_FUNCTION);
1205:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1206:       assertEquals(8, Node.FLAG_NO_THROWS);
1207:       assertEquals(43, Node.IS_CONSTANT_NAME);
1208:       assertEquals(36, Node.QUOTED_PROP);
1209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1211:       assertEquals(48, Node.DIRECTIVES);
1212:       assertEquals(40, Node.ORIGINALNAME_PROP);
1213:       assertEquals(57, Node.REFLECTED_OBJECT);
1214:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1215:       assertEquals(29, Node.JSDOC_INFO_PROP);
1216:       assertEquals(52, Node.LENGTH);
1217:       assertEquals(2, Node.POST_FLAG);
1218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1220:       assertEquals(39, Node.EMPTY_BLOCK);
1221:       assertEquals(47, Node.IS_DISPATCHER);
1222:       assertEquals(53, Node.INPUT_ID);
1223:       assertEquals(57, Node.LAST_PROP);
1224:       assertFalse(node1.equals((Object)node2));
1225:       assertFalse(node1.equals((Object)node0));
1226:       assertTrue(boolean5 == boolean0);
1227:       assertTrue(boolean5 == boolean2);
1228:       assertTrue(boolean5 == boolean4);
1229:       assertTrue(boolean5 == boolean3);
1230:       assertTrue(boolean5 == boolean1);
1231:       assertFalse(node1.isExprResult());
1232:       assertFalse(node1.hasOneChild());
1233:       assertFalse(node1.isNot());
1234:       assertFalse(node1.isScript());
1235:       assertEquals((-1), node1.getSourcePosition());
1236:       assertFalse(node1.isObjectLit());
1237:       assertFalse(node1.isLabel());
1238:       assertFalse(node1.isAnd());
1239:       assertFalse(node1.isAssignAdd());
1240:       assertFalse(node1.isLabelName());
1241:       assertFalse(node1.isThrow());
1242:       assertFalse(node1.isCast());
1243:       assertFalse(node1.isContinue());
1244:       assertFalse(node1.isFalse());
1245:       assertFalse(node1.isBlock());
1246:       assertEquals((-1), node1.getCharno());
1247:       assertFalse(node1.isInc());
1248:       assertFalse(node1.isHook());
1249:       assertFalse(node1.isSwitch());
1250:       assertFalse(node1.isCase());
1251:       assertFalse(node1.isStringKey());
1252:       assertFalse(node1.isIn());
1253:       assertEquals((-1), node1.getLineno());
1254:       assertFalse(node1.isThis());
1255:       assertFalse(node1.isNE());
1256:       assertFalse(node1.isIf());
1257:       assertFalse(node1.isFor());
1258:       assertEquals(39, node1.getType());
1259:       assertFalse(node1.isRegExp());
1260:       assertFalse(node1.isInstanceOf());
1261:       assertFalse(node1.isCatch());
1262:       assertFalse(node1.hasMoreThanOneChild());
1263:       assertFalse(node1.isWith());
1264:       assertFalse(node1.isVoid());
1265:       assertFalse(node1.isTry());
1266:       assertFalse(node1.isTrue());
1267:       assertFalse(node1.isDebugger());
1268:       assertFalse(node1.isArrayLit());
1269:       assertFalse(node1.isDefaultCase());
1270:       assertFalse(node1.isEmpty());
1271:       assertFalse(node1.isGetterDef());
1272:       assertFalse(node1.isSetterDef());
1273:       assertFalse(node1.isParamList());
1274:       assertEquals(0, node1.getChildCount());
1275:       assertFalse(node1.isFunction());
1276:       assertFalse(node1.isAdd());
1277:       assertFalse(node1.isNew());
1278:       assertFalse(node1.isVar());
1279:       assertFalse(node1.isWhile());
1280:       assertFalse(node1.isDo());
1281:       assertFalse(node1.isString());
1282:       assertTrue(node1.isNumber());
1283:       assertFalse(node1.isOr());
1284:       assertFalse(node1.isReturn());
1285:       assertFalse(node1.isGetProp());
1286:       assertFalse(node1.isNull());
1287:       assertFalse(node1.isDelProp());
1288:       assertFalse(node1.isGetElem());
1289:       assertFalse(node1.isName());
1290:       assertFalse(node1.isAssign());
1291:       assertFalse(node1.isCall());
1292:       assertFalse(node1.hasChildren());
1293:       assertFalse(node1.isBreak());
1294:       assertFalse(node1.isTypeOf());
1295:       assertFalse(node1.isDec());
1296:       assertFalse(node1.isComma());
1297:   }
1298: }
RegularFileObject[/tmp/EvoSuite_463_1628159321912/com/google/javascript/rhino/Node_463_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:42 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_463_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_463_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_463_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.common.base.Objects",
333:       "com.google.common.collect.Iterables",
334:       "com.google.javascript.rhino.InputId",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.common.collect.ImmutableList$1",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.NamespaceType",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 10:28:42.128 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(0, "K`UM");
assertNotNull(node0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());

boolean boolean0 = node0.isReturn();
assertFalse(boolean0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());

node0.putIntProp(1812, 0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.isStringKey();
assertFalse(boolean1);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertTrue(boolean1 == boolean0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());

boolean boolean2 = node0.isCase();
assertFalse(boolean2);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());

boolean boolean3 = node0.isCatch();
assertFalse(boolean3);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());

boolean boolean4 = node0.isCatch();
assertFalse(boolean4);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());

Node node1 = Node.newNumber((double) 2199);
assertNotNull(node1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());

Node node2 = new Node(55, node0, node0);
assertNotNull(node2);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isIf());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.isStringKey());
assertFalse(node2.isCase());
assertEquals(55, node2.getType());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());

boolean boolean5 = node1.isNot();
assertFalse(boolean5);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/13
* Done!

* Computation finished
