* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 14724
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3134267369
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:53:39.750 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:53:41.758 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getSideEffectFlags()I
[MASTER] 10:53:41.775 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2433: com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;:764 - ReplaceComparisonOperator == -> -2
[MASTER] 10:54:43.745 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:58:17.256 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Number of times BBC is called in total: 0
* Search finished after 604s and 692 generations, 274943 statements, best individual has fitness: 2646.0
* Minimizing test suite
[MASTER] 11:05:07.600 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 853
* Number of covered goals: 815
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 636
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 112
* Number of covered goals: 112
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 474
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2337
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 603
* Generated 1178 tests with total length 10574
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:06:22.685 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6715666666666666% of time used, but only 81/1178 tests minimized), falling back to using all assertions
[MASTER] 11:06:42.440 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 11:06:54.836 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 11:07:07.016 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_244_1628161626994/com/google/javascript/rhino/Node_244_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_244_1628161626994/com/google/javascript/rhino/Node_244_tmp__ESTest_scaffolding.java]]
[MASTER] 11:07:07.016 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:07:07.016 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:07:07.019 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 128
[MASTER] 11:07:07.020 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_244_1628161626994/com/google/javascript/rhino/Node_244_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:07:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.Vector;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_244_tmp__ESTest extends Node_244_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("5,: ");
22:       assertNotNull(node0);
23:       assertFalse(node0.isNot());
24:       assertFalse(node0.isWith());
25:       assertFalse(node0.isAnd());
26:       assertFalse(node0.isExprResult());
27:       assertFalse(node0.isScript());
28:       assertFalse(node0.isInstanceOf());
29:       assertFalse(node0.isThis());
30:       assertFalse(node0.isComma());
31:       assertFalse(node0.isLabelName());
32:       assertFalse(node0.isNumber());
33:       assertFalse(node0.isFalse());
34:       assertFalse(node0.isCast());
35:       assertFalse(node0.hasOneChild());
36:       assertFalse(node0.isGetProp());
37:       assertFalse(node0.isObjectLit());
38:       assertEquals((-1), node0.getSourcePosition());
39:       assertEquals((-1), node0.getCharno());
40:       assertFalse(node0.isContinue());
41:       assertFalse(node0.isInc());
42:       assertFalse(node0.isCase());
43:       assertTrue(node0.isString());
44:       assertFalse(node0.hasMoreThanOneChild());
45:       assertFalse(node0.isThrow());
46:       assertFalse(node0.isHook());
47:       assertFalse(node0.isBlock());
48:       assertFalse(node0.isIf());
49:       assertFalse(node0.isSetterDef());
50:       assertEquals((-1), node0.getLineno());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.isNE());
53:       assertFalse(node0.isRegExp());
54:       assertFalse(node0.isDefaultCase());
55:       assertFalse(node0.isCatch());
56:       assertFalse(node0.isVoid());
57:       assertFalse(node0.isTry());
58:       assertEquals(0, node0.getChildCount());
59:       assertFalse(node0.isFunction());
60:       assertEquals(40, node0.getType());
61:       assertFalse(node0.isGetterDef());
62:       assertFalse(node0.isFor());
63:       assertFalse(node0.isStringKey());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isParamList());
66:       assertFalse(node0.isDebugger());
67:       assertFalse(node0.isWhile());
68:       assertFalse(node0.isDo());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isVar());
74:       assertFalse(node0.isDec());
75:       assertFalse(node0.isLabel());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isDelProp());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isEmpty());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isName());
82:       assertFalse(node0.isCall());
83:       assertFalse(node0.isGetElem());
84:       assertFalse(node0.isBreak());
85:       assertFalse(node0.isAdd());
86:       assertFalse(node0.isOr());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isNull());
89:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
90:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
91:       assertEquals(53, Node.INPUT_ID);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(47, Node.IS_DISPATCHER);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(12, Node.COLUMN_BITS);
97:       assertEquals(32, Node.INCRDECR_PROP);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(1, Node.DECR_FLAG);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(43, Node.IS_CONSTANT_NAME);
102:       assertEquals(50, Node.FREE_CALL);
103:       assertEquals(54, Node.SLASH_V);
104:       assertEquals(57, Node.REFLECTED_OBJECT);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(40, Node.ORIGINALNAME_PROP);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
111:       assertEquals(30, Node.VAR_ARGS_NAME);
112:       assertEquals(55, Node.INFERRED_FUNCTION);
113:       assertEquals(4095, Node.COLUMN_MASK);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(48, Node.DIRECTIVES);
116:       assertEquals(49, Node.DIRECT_EVAL);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(56, Node.CHANGE_TIME);
120:       assertEquals(15, Node.NO_SIDE_EFFECTS);
121:       assertEquals(36, Node.QUOTED_PROP);
122:       assertEquals(8, Node.FLAG_NO_THROWS);
123:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
124:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
125:       
126:       Iterable<Node> iterable0 = new Vector<Node>();
127:       assertNotNull(iterable0);
128:       assertFalse(iterable0.contains(node0));
129:       
130:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
131:       assertNull(node_NodeMismatch0);
132:       assertFalse(node0.isNot());
133:       assertFalse(node0.isWith());
134:       assertFalse(node0.isAnd());
135:       assertFalse(node0.isExprResult());
136:       assertFalse(node0.isScript());
137:       assertFalse(node0.isInstanceOf());
138:       assertFalse(node0.isThis());
139:       assertFalse(node0.isComma());
140:       assertFalse(node0.isLabelName());
141:       assertFalse(node0.isNumber());
142:       assertFalse(node0.isFalse());
143:       assertFalse(node0.isCast());
144:       assertFalse(node0.hasOneChild());
145:       assertFalse(node0.isGetProp());
146:       assertFalse(node0.isObjectLit());
147:       assertEquals((-1), node0.getSourcePosition());
148:       assertEquals((-1), node0.getCharno());
149:       assertFalse(node0.isContinue());
150:       assertFalse(node0.isInc());
151:       assertFalse(node0.isCase());
152:       assertTrue(node0.isString());
153:       assertFalse(node0.hasMoreThanOneChild());
154:       assertFalse(node0.isThrow());
155:       assertFalse(node0.isHook());
156:       assertFalse(node0.isBlock());
157:       assertFalse(node0.isIf());
158:       assertFalse(node0.isSetterDef());
159:       assertEquals((-1), node0.getLineno());
160:       assertFalse(node0.isIn());
161:       assertFalse(node0.isNE());
162:       assertFalse(node0.isRegExp());
163:       assertFalse(node0.isDefaultCase());
164:       assertFalse(node0.isCatch());
165:       assertFalse(node0.isVoid());
166:       assertFalse(node0.isTry());
167:       assertEquals(0, node0.getChildCount());
168:       assertFalse(node0.isFunction());
169:       assertEquals(40, node0.getType());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isFor());
172:       assertFalse(node0.isStringKey());
173:       assertFalse(node0.isArrayLit());
174:       assertFalse(node0.isParamList());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isWhile());
177:       assertFalse(node0.isDo());
178:       assertFalse(node0.isSwitch());
179:       assertFalse(node0.isNew());
180:       assertFalse(node0.isReturn());
181:       assertFalse(node0.isAssignAdd());
182:       assertFalse(node0.isVar());
183:       assertFalse(node0.isDec());
184:       assertFalse(node0.isLabel());
185:       assertFalse(node0.hasChildren());
186:       assertFalse(node0.isDelProp());
187:       assertFalse(node0.isAssign());
188:       assertFalse(node0.isEmpty());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isName());
191:       assertFalse(node0.isCall());
192:       assertFalse(node0.isGetElem());
193:       assertFalse(node0.isBreak());
194:       assertFalse(node0.isAdd());
195:       assertFalse(node0.isOr());
196:       assertFalse(node0.isTrue());
197:       assertFalse(node0.isNull());
198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(29, Node.JSDOC_INFO_PROP);
202:       assertEquals(47, Node.IS_DISPATCHER);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(32, Node.INCRDECR_PROP);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(1, Node.DECR_FLAG);
209:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
210:       assertEquals(43, Node.IS_CONSTANT_NAME);
211:       assertEquals(50, Node.FREE_CALL);
212:       assertEquals(54, Node.SLASH_V);
213:       assertEquals(57, Node.REFLECTED_OBJECT);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(40, Node.ORIGINALNAME_PROP);
216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
217:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
218:       assertEquals(57, Node.LAST_PROP);
219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
220:       assertEquals(30, Node.VAR_ARGS_NAME);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(4095, Node.COLUMN_MASK);
223:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
224:       assertEquals(48, Node.DIRECTIVES);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(39, Node.EMPTY_BLOCK);
227:       assertEquals(37, Node.OPT_ARG_NAME);
228:       assertEquals(56, Node.CHANGE_TIME);
229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
230:       assertEquals(36, Node.QUOTED_PROP);
231:       assertEquals(8, Node.FLAG_NO_THROWS);
232:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
233:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
234:   }
235: }
RegularFileObject[/tmp/EvoSuite_244_1628161626994/com/google/javascript/rhino/Node_244_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:07:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_244_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_244_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.common.collect.SingletonImmutableSet",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.common.collect.ImmutableList$SerializedForm",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_244_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.common.base.Objects",
345:       "com.google.common.collect.Iterables",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.Platform",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.Sets$ImprovedAbstractSet",
363:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
364:       "com.google.common.collect.Hashing",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
367:       "com.google.javascript.rhino.JSTypeExpression",
368:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.JSType$TypePair",
374:       "com.google.javascript.rhino.jstype.TernaryValue",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 11:07:07.022 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("5,: ");
assertNotNull(node0);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

Iterable<Node> iterable0 = new Vector<Node>();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
assertNull(node_NodeMismatch0);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/27
* Done!

* Computation finished
