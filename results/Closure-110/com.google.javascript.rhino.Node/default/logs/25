* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 13260
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 124994798
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:44:46.487 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:44:51.780 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:45:46.467 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 743 generations, 302879 statements, best individual has fitness: 2570.0
* Minimizing test suite
[MASTER] 10:56:07.481 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 853
* Number of covered goals: 822
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 639
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 479
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 4536
* Number of covered goals: 2400
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 599
* Generated 1265 tests with total length 12531
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:57:56.727 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.9232333333333334% of time used, but only 58/1265 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 13%
[MASTER] 10:58:01.571 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 10:58:15.213 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 10:58:18.552 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_65_1628161098098/com/google/javascript/rhino/Node_65_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_65_1628161098098/com/google/javascript/rhino/Node_65_tmp__ESTest_scaffolding.java]]
[MASTER] 10:58:18.552 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:18.552 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:18.557 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 875
[MASTER] 10:58:18.560 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_65_1628161098098/com/google/javascript/rhino/Node_65_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:58:18 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_65_tmp__ESTest extends Node_65_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("{NM3z!-nN4#l-HP");
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
24:       assertEquals(53, Node.INPUT_ID);
25:       assertEquals(29, Node.JSDOC_INFO_PROP);
26:       assertEquals(2, Node.POST_FLAG);
27:       assertEquals(47, Node.IS_DISPATCHER);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(12, Node.COLUMN_BITS);
30:       assertEquals(32, Node.INCRDECR_PROP);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(1, Node.DECR_FLAG);
33:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
34:       assertEquals(43, Node.IS_CONSTANT_NAME);
35:       assertEquals(50, Node.FREE_CALL);
36:       assertEquals(54, Node.SLASH_V);
37:       assertEquals(57, Node.REFLECTED_OBJECT);
38:       assertEquals(52, Node.LENGTH);
39:       assertEquals(40, Node.ORIGINALNAME_PROP);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(57, Node.LAST_PROP);
43:       assertEquals(30, Node.VAR_ARGS_NAME);
44:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(4095, Node.COLUMN_MASK);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(49, Node.DIRECT_EVAL);
50:       assertEquals(37, Node.OPT_ARG_NAME);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(56, Node.CHANGE_TIME);
53:       assertEquals(15, Node.NO_SIDE_EFFECTS);
54:       assertEquals(36, Node.QUOTED_PROP);
55:       assertEquals(8, Node.FLAG_NO_THROWS);
56:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
57:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
58:       assertNotNull(node0);
59:       assertFalse(node0.isRegExp());
60:       assertFalse(node0.isFunction());
61:       assertFalse(node0.isTrue());
62:       assertFalse(node0.isDefaultCase());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isVoid());
65:       assertFalse(node0.isArrayLit());
66:       assertFalse(node0.isGetterDef());
67:       assertFalse(node0.isDebugger());
68:       assertFalse(node0.isNE());
69:       assertFalse(node0.isNull());
70:       assertFalse(node0.isIf());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isName());
73:       assertFalse(node0.isCatch());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.isSwitch());
78:       assertFalse(node0.isDo());
79:       assertFalse(node0.isAdd());
80:       assertTrue(node0.isString());
81:       assertFalse(node0.isNew());
82:       assertFalse(node0.isCase());
83:       assertFalse(node0.isStringKey());
84:       assertFalse(node0.isOr());
85:       assertEquals((-1), node0.getCharno());
86:       assertFalse(node0.isParamList());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isLabelName());
89:       assertFalse(node0.isEmpty());
90:       assertFalse(node0.isVar());
91:       assertFalse(node0.isLabel());
92:       assertEquals(0, node0.getChildCount());
93:       assertFalse(node0.isScript());
94:       assertFalse(node0.isExprResult());
95:       assertFalse(node0.hasOneChild());
96:       assertFalse(node0.isObjectLit());
97:       assertFalse(node0.isAnd());
98:       assertFalse(node0.isNot());
99:       assertEquals((-1), node0.getSourcePosition());
100:       assertFalse(node0.isComma());
101:       assertFalse(node0.isThis());
102:       assertFalse(node0.isTypeOf());
103:       assertFalse(node0.isNumber());
104:       assertFalse(node0.isGetElem());
105:       assertFalse(node0.isGetProp());
106:       assertFalse(node0.isBreak());
107:       assertEquals((-1), node0.getLineno());
108:       assertFalse(node0.hasMoreThanOneChild());
109:       assertFalse(node0.isInstanceOf());
110:       assertFalse(node0.isWith());
111:       assertFalse(node0.isAssign());
112:       assertFalse(node0.isReturn());
113:       assertFalse(node0.isHook());
114:       assertFalse(node0.isDec());
115:       assertFalse(node0.hasChildren());
116:       assertFalse(node0.isInc());
117:       assertFalse(node0.isWhile());
118:       assertFalse(node0.isIn());
119:       assertFalse(node0.isSetterDef());
120:       assertFalse(node0.isCast());
121:       assertFalse(node0.isThrow());
122:       assertFalse(node0.isFalse());
123:       assertFalse(node0.isContinue());
124:       assertEquals(40, node0.getType());
125:       
126:       Node node1 = new Node(0);
127:       assertEquals(40, Node.ORIGINALNAME_PROP);
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
130:       assertEquals(50, Node.FREE_CALL);
131:       assertEquals(52, Node.LENGTH);
132:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
133:       assertEquals(15, Node.NO_SIDE_EFFECTS);
134:       assertEquals(39, Node.EMPTY_BLOCK);
135:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
136:       assertEquals(1, Node.DECR_FLAG);
137:       assertEquals(57, Node.LAST_PROP);
138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
139:       assertEquals(46, Node.IS_NAMESPACE);
140:       assertEquals(30, Node.VAR_ARGS_NAME);
141:       assertEquals(43, Node.IS_CONSTANT_NAME);
142:       assertEquals(54, Node.SLASH_V);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(53, Node.INPUT_ID);
146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
147:       assertEquals(2, Node.POST_FLAG);
148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
149:       assertEquals(47, Node.IS_DISPATCHER);
150:       assertEquals(32, Node.INCRDECR_PROP);
151:       assertEquals(12, Node.COLUMN_BITS);
152:       assertEquals(4095, Node.COLUMN_MASK);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(8, Node.FLAG_NO_THROWS);
156:       assertEquals(36, Node.QUOTED_PROP);
157:       assertEquals(56, Node.CHANGE_TIME);
158:       assertEquals(37, Node.OPT_ARG_NAME);
159:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
160:       assertEquals(49, Node.DIRECT_EVAL);
161:       assertEquals(48, Node.DIRECTIVES);
162:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
163:       assertFalse(node1.equals((Object)node0));
164:       assertNotNull(node1);
165:       assertFalse(node1.isNew());
166:       assertFalse(node1.isBlock());
167:       assertFalse(node1.isAdd());
168:       assertFalse(node1.isContinue());
169:       assertFalse(node1.isCall());
170:       assertEquals((-1), node1.getLineno());
171:       assertFalse(node1.isStringKey());
172:       assertFalse(node1.isName());
173:       assertFalse(node1.isParamList());
174:       assertEquals((-1), node1.getSourcePosition());
175:       assertFalse(node1.isDec());
176:       assertFalse(node1.hasChildren());
177:       assertFalse(node1.isAssign());
178:       assertFalse(node1.isNumber());
179:       assertFalse(node1.isTypeOf());
180:       assertFalse(node1.hasMoreThanOneChild());
181:       assertFalse(node1.hasOneChild());
182:       assertFalse(node1.isReturn());
183:       assertFalse(node1.isWhile());
184:       assertFalse(node1.isTrue());
185:       assertFalse(node1.isExprResult());
186:       assertFalse(node1.isScript());
187:       assertFalse(node1.isVoid());
188:       assertFalse(node1.isGetElem());
189:       assertFalse(node1.isArrayLit());
190:       assertFalse(node1.isLabelName());
191:       assertFalse(node1.isDelProp());
192:       assertFalse(node1.isNull());
193:       assertFalse(node1.isLabel());
194:       assertFalse(node1.isOr());
195:       assertEquals(0, node1.getChildCount());
196:       assertFalse(node1.isEmpty());
197:       assertFalse(node1.isVar());
198:       assertFalse(node1.isDo());
199:       assertFalse(node1.isAssignAdd());
200:       assertFalse(node1.isDefaultCase());
201:       assertFalse(node1.isInc());
202:       assertEquals(0, node1.getType());
203:       assertEquals((-1), node1.getCharno());
204:       assertFalse(node1.isString());
205:       assertFalse(node1.isSwitch());
206:       assertFalse(node1.isThis());
207:       assertFalse(node1.isComma());
208:       assertFalse(node1.isGetProp());
209:       assertFalse(node1.isBreak());
210:       assertFalse(node1.isGetterDef());
211:       assertFalse(node1.isInstanceOf());
212:       assertFalse(node1.isHook());
213:       assertFalse(node1.isCase());
214:       assertFalse(node1.isTry());
215:       assertFalse(node1.isFor());
216:       assertFalse(node1.isFunction());
217:       assertFalse(node1.isRegExp());
218:       assertFalse(node1.isDebugger());
219:       assertFalse(node1.isWith());
220:       assertFalse(node1.isNot());
221:       assertFalse(node1.isCatch());
222:       assertFalse(node1.isCast());
223:       assertFalse(node1.isObjectLit());
224:       assertFalse(node1.isIf());
225:       assertFalse(node1.isAnd());
226:       assertFalse(node1.isSetterDef());
227:       assertFalse(node1.isNE());
228:       assertFalse(node1.isFalse());
229:       assertFalse(node1.isIn());
230:       assertFalse(node1.isThrow());
231:       
232:       Node node2 = Node.newNumber((double) 37, (-4014), (-246));
233:       assertEquals(29, Node.JSDOC_INFO_PROP);
234:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
235:       assertEquals(56, Node.CHANGE_TIME);
236:       assertEquals(37, Node.OPT_ARG_NAME);
237:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
238:       assertEquals(32, Node.INCRDECR_PROP);
239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
240:       assertEquals(2, Node.POST_FLAG);
241:       assertEquals(12, Node.COLUMN_BITS);
242:       assertEquals(47, Node.IS_DISPATCHER);
243:       assertEquals(49, Node.DIRECT_EVAL);
244:       assertEquals(57, Node.LAST_PROP);
245:       assertEquals(55, Node.INFERRED_FUNCTION);
246:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
247:       assertEquals(15, Node.NO_SIDE_EFFECTS);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
251:       assertEquals(8, Node.FLAG_NO_THROWS);
252:       assertEquals(36, Node.QUOTED_PROP);
253:       assertEquals(57, Node.REFLECTED_OBJECT);
254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
255:       assertEquals(50, Node.FREE_CALL);
256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
257:       assertEquals(40, Node.ORIGINALNAME_PROP);
258:       assertEquals(39, Node.EMPTY_BLOCK);
259:       assertEquals(48, Node.DIRECTIVES);
260:       assertEquals(4095, Node.COLUMN_MASK);
261:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
262:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
263:       assertEquals(30, Node.VAR_ARGS_NAME);
264:       assertEquals(43, Node.IS_CONSTANT_NAME);
265:       assertEquals(1, Node.DECR_FLAG);
266:       assertEquals(46, Node.IS_NAMESPACE);
267:       assertEquals(54, Node.SLASH_V);
268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
269:       assertFalse(node2.equals((Object)node0));
270:       assertFalse(node2.equals((Object)node1));
271:       assertNotNull(node2);
272:       assertFalse(node2.isCast());
273:       assertFalse(node2.isGetElem());
274:       assertFalse(node2.isExprResult());
275:       assertFalse(node2.isLabelName());
276:       assertFalse(node2.hasOneChild());
277:       assertFalse(node2.isScript());
278:       assertFalse(node2.isObjectLit());
279:       assertFalse(node2.isOr());
280:       assertFalse(node2.isNot());
281:       assertEquals((-1), node2.getSourcePosition());
282:       assertFalse(node2.isAssignAdd());
283:       assertFalse(node2.isAnd());
284:       assertFalse(node2.isDo());
285:       assertFalse(node2.isContinue());
286:       assertFalse(node2.isThrow());
287:       assertFalse(node2.isFalse());
288:       assertFalse(node2.isLabel());
289:       assertFalse(node2.isHook());
290:       assertFalse(node2.isInc());
291:       assertFalse(node2.isSwitch());
292:       assertFalse(node2.isParamList());
293:       assertFalse(node2.isStringKey());
294:       assertEquals((-1), node2.getCharno());
295:       assertFalse(node2.isInstanceOf());
296:       assertFalse(node2.hasMoreThanOneChild());
297:       assertFalse(node2.isCatch());
298:       assertEquals((-1), node2.getLineno());
299:       assertFalse(node2.isCase());
300:       assertFalse(node2.isRegExp());
301:       assertFalse(node2.isWith());
302:       assertFalse(node2.isThis());
303:       assertFalse(node2.isBlock());
304:       assertFalse(node2.isFor());
305:       assertEquals(39, node2.getType());
306:       assertFalse(node2.isVoid());
307:       assertFalse(node2.isTry());
308:       assertFalse(node2.isArrayLit());
309:       assertFalse(node2.isIf());
310:       assertFalse(node2.isGetterDef());
311:       assertFalse(node2.isDelProp());
312:       assertFalse(node2.isNE());
313:       assertFalse(node2.isEmpty());
314:       assertFalse(node2.isTrue());
315:       assertFalse(node2.isDebugger());
316:       assertEquals(0, node2.getChildCount());
317:       assertFalse(node2.isIn());
318:       assertFalse(node2.isSetterDef());
319:       assertFalse(node2.isDefaultCase());
320:       assertFalse(node2.isFunction());
321:       assertFalse(node2.isVar());
322:       assertFalse(node2.isAdd());
323:       assertFalse(node2.isName());
324:       assertFalse(node2.isCall());
325:       assertFalse(node2.isNew());
326:       assertFalse(node2.isNull());
327:       assertFalse(node2.isString());
328:       assertFalse(node2.isReturn());
329:       assertFalse(node2.isGetProp());
330:       assertTrue(node2.isNumber());
331:       assertFalse(node2.isDec());
332:       assertFalse(node2.isBreak());
333:       assertFalse(node2.hasChildren());
334:       assertFalse(node2.isTypeOf());
335:       assertFalse(node2.isWhile());
336:       assertFalse(node2.isAssign());
337:       assertFalse(node2.isComma());
338:       
339:       Node node3 = node1.srcrefTree(node0);
340:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
341:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
342:       assertEquals(53, Node.INPUT_ID);
343:       assertEquals(29, Node.JSDOC_INFO_PROP);
344:       assertEquals(2, Node.POST_FLAG);
345:       assertEquals(47, Node.IS_DISPATCHER);
346:       assertEquals(51, Node.STATIC_SOURCE_FILE);
347:       assertEquals(12, Node.COLUMN_BITS);
348:       assertEquals(32, Node.INCRDECR_PROP);
349:       assertEquals(46, Node.IS_NAMESPACE);
350:       assertEquals(1, Node.DECR_FLAG);
351:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
352:       assertEquals(43, Node.IS_CONSTANT_NAME);
353:       assertEquals(50, Node.FREE_CALL);
354:       assertEquals(54, Node.SLASH_V);
355:       assertEquals(57, Node.REFLECTED_OBJECT);
356:       assertEquals(52, Node.LENGTH);
357:       assertEquals(40, Node.ORIGINALNAME_PROP);
358:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
359:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
360:       assertEquals(57, Node.LAST_PROP);
361:       assertEquals(30, Node.VAR_ARGS_NAME);
362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
363:       assertEquals(55, Node.INFERRED_FUNCTION);
364:       assertEquals(4095, Node.COLUMN_MASK);
365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
366:       assertEquals(48, Node.DIRECTIVES);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(37, Node.OPT_ARG_NAME);
369:       assertEquals(39, Node.EMPTY_BLOCK);
370:       assertEquals(56, Node.CHANGE_TIME);
371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
372:       assertEquals(36, Node.QUOTED_PROP);
373:       assertEquals(8, Node.FLAG_NO_THROWS);
374:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
376:       assertEquals(40, Node.ORIGINALNAME_PROP);
377:       assertEquals(57, Node.REFLECTED_OBJECT);
378:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
379:       assertEquals(50, Node.FREE_CALL);
380:       assertEquals(52, Node.LENGTH);
381:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
382:       assertEquals(15, Node.NO_SIDE_EFFECTS);
383:       assertEquals(39, Node.EMPTY_BLOCK);
384:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
385:       assertEquals(1, Node.DECR_FLAG);
386:       assertEquals(57, Node.LAST_PROP);
387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
388:       assertEquals(46, Node.IS_NAMESPACE);
389:       assertEquals(30, Node.VAR_ARGS_NAME);
390:       assertEquals(43, Node.IS_CONSTANT_NAME);
391:       assertEquals(54, Node.SLASH_V);
392:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
393:       assertEquals(29, Node.JSDOC_INFO_PROP);
394:       assertEquals(53, Node.INPUT_ID);
395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
396:       assertEquals(2, Node.POST_FLAG);
397:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
398:       assertEquals(47, Node.IS_DISPATCHER);
399:       assertEquals(32, Node.INCRDECR_PROP);
400:       assertEquals(12, Node.COLUMN_BITS);
401:       assertEquals(4095, Node.COLUMN_MASK);
402:       assertEquals(55, Node.INFERRED_FUNCTION);
403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
404:       assertEquals(8, Node.FLAG_NO_THROWS);
405:       assertEquals(36, Node.QUOTED_PROP);
406:       assertEquals(56, Node.CHANGE_TIME);
407:       assertEquals(37, Node.OPT_ARG_NAME);
408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
409:       assertEquals(49, Node.DIRECT_EVAL);
410:       assertEquals(48, Node.DIRECTIVES);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
413:       assertEquals(50, Node.FREE_CALL);
414:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
415:       assertEquals(57, Node.REFLECTED_OBJECT);
416:       assertEquals(48, Node.DIRECTIVES);
417:       assertEquals(4095, Node.COLUMN_MASK);
418:       assertEquals(40, Node.ORIGINALNAME_PROP);
419:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
420:       assertEquals(1, Node.DECR_FLAG);
421:       assertEquals(43, Node.IS_CONSTANT_NAME);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
424:       assertEquals(12, Node.COLUMN_BITS);
425:       assertEquals(46, Node.IS_NAMESPACE);
426:       assertEquals(54, Node.SLASH_V);
427:       assertEquals(32, Node.INCRDECR_PROP);
428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
429:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
430:       assertEquals(2, Node.POST_FLAG);
431:       assertEquals(56, Node.CHANGE_TIME);
432:       assertEquals(47, Node.IS_DISPATCHER);
433:       assertEquals(37, Node.OPT_ARG_NAME);
434:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
435:       assertEquals(30, Node.VAR_ARGS_NAME);
436:       assertEquals(57, Node.LAST_PROP);
437:       assertEquals(49, Node.DIRECT_EVAL);
438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
439:       assertEquals(36, Node.QUOTED_PROP);
440:       assertEquals(52, Node.LENGTH);
441:       assertEquals(55, Node.INFERRED_FUNCTION);
442:       assertEquals(8, Node.FLAG_NO_THROWS);
443:       assertEquals(39, Node.EMPTY_BLOCK);
444:       assertEquals(15, Node.NO_SIDE_EFFECTS);
445:       assertEquals(29, Node.JSDOC_INFO_PROP);
446:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
447:       assertEquals(53, Node.INPUT_ID);
448:       assertFalse(node0.equals((Object)node1));
449:       assertFalse(node0.equals((Object)node2));
450:       assertFalse(node1.equals((Object)node2));
451:       assertFalse(node1.equals((Object)node0));
452:       assertFalse(node3.equals((Object)node2));
453:       assertFalse(node3.equals((Object)node0));
454:       assertSame(node1, node3);
455:       assertSame(node3, node1);
456:       assertNotNull(node3);
457:       assertFalse(node0.isRegExp());
458:       assertFalse(node0.isFunction());
459:       assertFalse(node0.isTrue());
460:       assertFalse(node0.isDefaultCase());
461:       assertFalse(node0.isTry());
462:       assertFalse(node0.isVoid());
463:       assertFalse(node0.isArrayLit());
464:       assertFalse(node0.isGetterDef());
465:       assertFalse(node0.isDebugger());
466:       assertFalse(node0.isNE());
467:       assertFalse(node0.isNull());
468:       assertFalse(node0.isIf());
469:       assertFalse(node0.isDelProp());
470:       assertFalse(node0.isName());
471:       assertFalse(node0.isCatch());
472:       assertFalse(node0.isCall());
473:       assertFalse(node0.isBlock());
474:       assertFalse(node0.isFor());
475:       assertFalse(node0.isSwitch());
476:       assertFalse(node0.isDo());
477:       assertFalse(node0.isAdd());
478:       assertTrue(node0.isString());
479:       assertFalse(node0.isNew());
480:       assertFalse(node0.isCase());
481:       assertFalse(node0.isStringKey());
482:       assertFalse(node0.isOr());
483:       assertEquals((-1), node0.getCharno());
484:       assertFalse(node0.isParamList());
485:       assertFalse(node0.isAssignAdd());
486:       assertFalse(node0.isLabelName());
487:       assertFalse(node0.isEmpty());
488:       assertFalse(node0.isVar());
489:       assertFalse(node0.isLabel());
490:       assertEquals(0, node0.getChildCount());
491:       assertFalse(node0.isScript());
492:       assertFalse(node0.isExprResult());
493:       assertFalse(node0.hasOneChild());
494:       assertFalse(node0.isObjectLit());
495:       assertFalse(node0.isAnd());
496:       assertFalse(node0.isNot());
497:       assertEquals((-1), node0.getSourcePosition());
498:       assertFalse(node0.isComma());
499:       assertFalse(node0.isThis());
500:       assertFalse(node0.isTypeOf());
501:       assertFalse(node0.isNumber());
502:       assertFalse(node0.isGetElem());
503:       assertFalse(node0.isGetProp());
504:       assertFalse(node0.isBreak());
505:       assertEquals((-1), node0.getLineno());
506:       assertFalse(node0.hasMoreThanOneChild());
507:       assertFalse(node0.isInstanceOf());
508:       assertFalse(node0.isWith());
509:       assertFalse(node0.isAssign());
510:       assertFalse(node0.isReturn());
511:       assertFalse(node0.isHook());
512:       assertFalse(node0.isDec());
513:       assertFalse(node0.hasChildren());
514:       assertFalse(node0.isInc());
515:       assertFalse(node0.isWhile());
516:       assertFalse(node0.isIn());
517:       assertFalse(node0.isSetterDef());
518:       assertFalse(node0.isCast());
519:       assertFalse(node0.isThrow());
520:       assertFalse(node0.isFalse());
521:       assertFalse(node0.isContinue());
522:       assertEquals(40, node0.getType());
523:       assertFalse(node1.isNew());
524:       assertFalse(node1.isBlock());
525:       assertFalse(node1.isAdd());
526:       assertFalse(node1.isContinue());
527:       assertFalse(node1.isCall());
528:       assertEquals((-1), node1.getLineno());
529:       assertFalse(node1.isStringKey());
530:       assertFalse(node1.isName());
531:       assertFalse(node1.isParamList());
532:       assertEquals((-1), node1.getSourcePosition());
533:       assertFalse(node1.isDec());
534:       assertFalse(node1.hasChildren());
535:       assertFalse(node1.isAssign());
536:       assertFalse(node1.isNumber());
537:       assertFalse(node1.isTypeOf());
538:       assertFalse(node1.hasMoreThanOneChild());
539:       assertFalse(node1.hasOneChild());
540:       assertFalse(node1.isReturn());
541:       assertFalse(node1.isWhile());
542:       assertFalse(node1.isTrue());
543:       assertFalse(node1.isExprResult());
544:       assertFalse(node1.isScript());
545:       assertFalse(node1.isVoid());
546:       assertFalse(node1.isGetElem());
547:       assertFalse(node1.isArrayLit());
548:       assertFalse(node1.isLabelName());
549:       assertFalse(node1.isDelProp());
550:       assertFalse(node1.isNull());
551:       assertFalse(node1.isLabel());
552:       assertFalse(node1.isOr());
553:       assertEquals(0, node1.getChildCount());
554:       assertFalse(node1.isEmpty());
555:       assertFalse(node1.isVar());
556:       assertFalse(node1.isDo());
557:       assertFalse(node1.isAssignAdd());
558:       assertFalse(node1.isDefaultCase());
559:       assertFalse(node1.isInc());
560:       assertEquals(0, node1.getType());
561:       assertEquals((-1), node1.getCharno());
562:       assertFalse(node1.isString());
563:       assertFalse(node1.isSwitch());
564:       assertFalse(node1.isThis());
565:       assertFalse(node1.isComma());
566:       assertFalse(node1.isGetProp());
567:       assertFalse(node1.isBreak());
568:       assertFalse(node1.isGetterDef());
569:       assertFalse(node1.isInstanceOf());
570:       assertFalse(node1.isHook());
571:       assertFalse(node1.isCase());
572:       assertFalse(node1.isTry());
573:       assertFalse(node1.isFor());
574:       assertFalse(node1.isFunction());
575:       assertFalse(node1.isRegExp());
576:       assertFalse(node1.isDebugger());
577:       assertFalse(node1.isWith());
578:       assertFalse(node1.isNot());
579:       assertFalse(node1.isCatch());
580:       assertFalse(node1.isCast());
581:       assertFalse(node1.isObjectLit());
582:       assertFalse(node1.isIf());
583:       assertFalse(node1.isAnd());
584:       assertFalse(node1.isSetterDef());
585:       assertFalse(node1.isNE());
586:       assertFalse(node1.isFalse());
587:       assertFalse(node1.isIn());
588:       assertFalse(node1.isThrow());
589:       assertEquals((-1), node3.getCharno());
590:       assertFalse(node3.isThrow());
591:       assertFalse(node3.isHook());
592:       assertFalse(node3.isString());
593:       assertFalse(node3.isGetProp());
594:       assertFalse(node3.isCase());
595:       assertFalse(node3.isInc());
596:       assertFalse(node3.isIn());
597:       assertFalse(node3.isInstanceOf());
598:       assertFalse(node3.isComma());
599:       assertFalse(node3.isNE());
600:       assertFalse(node3.isThis());
601:       assertFalse(node3.isIf());
602:       assertFalse(node3.isDelProp());
603:       assertFalse(node3.isBreak());
604:       assertFalse(node3.isWith());
605:       assertEquals(0, node3.getType());
606:       assertFalse(node3.isExprResult());
607:       assertFalse(node3.hasOneChild());
608:       assertFalse(node3.isTry());
609:       assertFalse(node3.isFor());
610:       assertFalse(node3.isTrue());
611:       assertFalse(node3.isGetterDef());
612:       assertFalse(node3.isDefaultCase());
613:       assertFalse(node3.isNumber());
614:       assertFalse(node3.isScript());
615:       assertFalse(node3.isEmpty());
616:       assertEquals(0, node3.getChildCount());
617:       assertFalse(node3.isAssignAdd());
618:       assertFalse(node3.isParamList());
619:       assertFalse(node3.isLabel());
620:       assertFalse(node3.isLabelName());
621:       assertFalse(node3.isSwitch());
622:       assertFalse(node3.isArrayLit());
623:       assertFalse(node3.isStringKey());
624:       assertFalse(node3.isVar());
625:       assertFalse(node3.isBlock());
626:       assertFalse(node3.isWhile());
627:       assertFalse(node3.isDo());
628:       assertFalse(node3.isNew());
629:       assertFalse(node3.isAdd());
630:       assertFalse(node3.isSetterDef());
631:       assertEquals((-1), node3.getLineno());
632:       assertFalse(node3.isOr());
633:       assertFalse(node3.hasMoreThanOneChild());
634:       assertFalse(node3.isReturn());
635:       assertFalse(node3.isNull());
636:       assertFalse(node3.hasChildren());
637:       assertFalse(node3.isDec());
638:       assertFalse(node3.isRegExp());
639:       assertFalse(node3.isAssign());
640:       assertFalse(node3.isTypeOf());
641:       assertFalse(node3.isName());
642:       assertFalse(node3.isVoid());
643:       assertFalse(node3.isCatch());
644:       assertFalse(node3.isGetElem());
645:       assertFalse(node3.isCall());
646:       assertFalse(node3.isDebugger());
647:       assertEquals((-1), node3.getSourcePosition());
648:       assertFalse(node3.isNot());
649:       assertFalse(node3.isAnd());
650:       assertFalse(node3.isObjectLit());
651:       assertFalse(node3.isFunction());
652:       assertFalse(node3.isFalse());
653:       assertFalse(node3.isContinue());
654:       assertFalse(node3.isCast());
655:       
656:       Node node4 = Node.newNumber((double) 30, 0, 12);
657:       assertEquals(4095, Node.COLUMN_MASK);
658:       assertEquals(43, Node.IS_CONSTANT_NAME);
659:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
660:       assertEquals(8, Node.FLAG_NO_THROWS);
661:       assertEquals(39, Node.EMPTY_BLOCK);
662:       assertEquals(36, Node.QUOTED_PROP);
663:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
664:       assertEquals(50, Node.FREE_CALL);
665:       assertEquals(53, Node.INPUT_ID);
666:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
667:       assertEquals(55, Node.INFERRED_FUNCTION);
668:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
669:       assertEquals(57, Node.REFLECTED_OBJECT);
670:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
671:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
672:       assertEquals(56, Node.CHANGE_TIME);
673:       assertEquals(48, Node.DIRECTIVES);
674:       assertEquals(37, Node.OPT_ARG_NAME);
675:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
676:       assertEquals(12, Node.COLUMN_BITS);
677:       assertEquals(32, Node.INCRDECR_PROP);
678:       assertEquals(51, Node.STATIC_SOURCE_FILE);
679:       assertEquals(1, Node.DECR_FLAG);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(57, Node.LAST_PROP);
682:       assertEquals(46, Node.IS_NAMESPACE);
683:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
684:       assertEquals(15, Node.NO_SIDE_EFFECTS);
685:       assertEquals(29, Node.JSDOC_INFO_PROP);
686:       assertEquals(52, Node.LENGTH);
687:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
688:       assertEquals(40, Node.ORIGINALNAME_PROP);
689:       assertEquals(54, Node.SLASH_V);
690:       assertEquals(2, Node.POST_FLAG);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(30, Node.VAR_ARGS_NAME);
693:       assertFalse(node4.equals((Object)node1));
694:       assertFalse(node4.equals((Object)node2));
695:       assertFalse(node4.equals((Object)node3));
696:       assertFalse(node4.equals((Object)node0));
697:       assertNotSame(node4, node2);
698:       assertNotNull(node4);
699:       assertFalse(node4.isParamList());
700:       assertFalse(node4.isSetterDef());
701:       assertFalse(node4.isNull());
702:       assertFalse(node4.isStringKey());
703:       assertFalse(node4.isCall());
704:       assertFalse(node4.isName());
705:       assertEquals(0, node4.getChildCount());
706:       assertEquals(0, node4.getLineno());
707:       assertFalse(node4.isCatch());
708:       assertFalse(node4.isFunction());
709:       assertFalse(node4.isTrue());
710:       assertFalse(node4.isNew());
711:       assertFalse(node4.isVoid());
712:       assertFalse(node4.isDefaultCase());
713:       assertFalse(node4.isVar());
714:       assertFalse(node4.isDo());
715:       assertFalse(node4.isAdd());
716:       assertFalse(node4.isEmpty());
717:       assertFalse(node4.isLabel());
718:       assertFalse(node4.isAssignAdd());
719:       assertFalse(node4.isIf());
720:       assertFalse(node4.isFor());
721:       assertFalse(node4.isNE());
722:       assertFalse(node4.hasMoreThanOneChild());
723:       assertFalse(node4.isArrayLit());
724:       assertFalse(node4.isLabelName());
725:       assertFalse(node4.isSwitch());
726:       assertFalse(node4.isRegExp());
727:       assertFalse(node4.isTry());
728:       assertEquals(39, node4.getType());
729:       assertFalse(node4.isBlock());
730:       assertFalse(node4.isHook());
731:       assertFalse(node4.hasOneChild());
732:       assertFalse(node4.isCase());
733:       assertFalse(node4.isGetterDef());
734:       assertFalse(node4.isScript());
735:       assertFalse(node4.isThis());
736:       assertFalse(node4.isComma());
737:       assertFalse(node4.isGetProp());
738:       assertFalse(node4.isThrow());
739:       assertFalse(node4.isAnd());
740:       assertFalse(node4.isFalse());
741:       assertEquals(12, node4.getCharno());
742:       assertFalse(node4.isWith());
743:       assertFalse(node4.isBreak());
744:       assertFalse(node4.isInstanceOf());
745:       assertFalse(node4.isInc());
746:       assertFalse(node4.isExprResult());
747:       assertFalse(node4.isIn());
748:       assertFalse(node4.isTypeOf());
749:       assertFalse(node4.isOr());
750:       assertFalse(node4.isDec());
751:       assertFalse(node4.isReturn());
752:       assertFalse(node4.isDelProp());
753:       assertFalse(node4.hasChildren());
754:       assertFalse(node4.isContinue());
755:       assertFalse(node4.isAssign());
756:       assertFalse(node4.isGetElem());
757:       assertFalse(node4.isCast());
758:       assertFalse(node4.isDebugger());
759:       assertEquals(12, node4.getSourcePosition());
760:       assertFalse(node4.isWhile());
761:       assertFalse(node4.isObjectLit());
762:       assertFalse(node4.isNot());
763:       assertTrue(node4.isNumber());
764:       assertFalse(node4.isString());
765:       
766:       Iterable<Node> iterable0 = node4.children();
767:       assertEquals(4095, Node.COLUMN_MASK);
768:       assertEquals(43, Node.IS_CONSTANT_NAME);
769:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
770:       assertEquals(8, Node.FLAG_NO_THROWS);
771:       assertEquals(39, Node.EMPTY_BLOCK);
772:       assertEquals(36, Node.QUOTED_PROP);
773:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
774:       assertEquals(50, Node.FREE_CALL);
775:       assertEquals(53, Node.INPUT_ID);
776:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
777:       assertEquals(55, Node.INFERRED_FUNCTION);
778:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
779:       assertEquals(57, Node.REFLECTED_OBJECT);
780:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
781:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
782:       assertEquals(56, Node.CHANGE_TIME);
783:       assertEquals(48, Node.DIRECTIVES);
784:       assertEquals(37, Node.OPT_ARG_NAME);
785:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
786:       assertEquals(12, Node.COLUMN_BITS);
787:       assertEquals(32, Node.INCRDECR_PROP);
788:       assertEquals(51, Node.STATIC_SOURCE_FILE);
789:       assertEquals(1, Node.DECR_FLAG);
790:       assertEquals(49, Node.DIRECT_EVAL);
791:       assertEquals(57, Node.LAST_PROP);
792:       assertEquals(46, Node.IS_NAMESPACE);
793:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
794:       assertEquals(15, Node.NO_SIDE_EFFECTS);
795:       assertEquals(29, Node.JSDOC_INFO_PROP);
796:       assertEquals(52, Node.LENGTH);
797:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
798:       assertEquals(40, Node.ORIGINALNAME_PROP);
799:       assertEquals(54, Node.SLASH_V);
800:       assertEquals(2, Node.POST_FLAG);
801:       assertEquals(47, Node.IS_DISPATCHER);
802:       assertEquals(30, Node.VAR_ARGS_NAME);
803:       assertFalse(node4.equals((Object)node1));
804:       assertFalse(node4.equals((Object)node2));
805:       assertFalse(node4.equals((Object)node3));
806:       assertFalse(node4.equals((Object)node0));
807:       assertNotSame(node4, node2);
808:       assertNotNull(iterable0);
809:       assertFalse(node4.isParamList());
810:       assertFalse(node4.isSetterDef());
811:       assertFalse(node4.isNull());
812:       assertFalse(node4.isStringKey());
813:       assertFalse(node4.isCall());
814:       assertFalse(node4.isName());
815:       assertEquals(0, node4.getChildCount());
816:       assertEquals(0, node4.getLineno());
817:       assertFalse(node4.isCatch());
818:       assertFalse(node4.isFunction());
819:       assertFalse(node4.isTrue());
820:       assertFalse(node4.isNew());
821:       assertFalse(node4.isVoid());
822:       assertFalse(node4.isDefaultCase());
823:       assertFalse(node4.isVar());
824:       assertFalse(node4.isDo());
825:       assertFalse(node4.isAdd());
826:       assertFalse(node4.isEmpty());
827:       assertFalse(node4.isLabel());
828:       assertFalse(node4.isAssignAdd());
829:       assertFalse(node4.isIf());
830:       assertFalse(node4.isFor());
831:       assertFalse(node4.isNE());
832:       assertFalse(node4.hasMoreThanOneChild());
833:       assertFalse(node4.isArrayLit());
834:       assertFalse(node4.isLabelName());
835:       assertFalse(node4.isSwitch());
836:       assertFalse(node4.isRegExp());
837:       assertFalse(node4.isTry());
838:       assertEquals(39, node4.getType());
839:       assertFalse(node4.isBlock());
840:       assertFalse(node4.isHook());
841:       assertFalse(node4.hasOneChild());
842:       assertFalse(node4.isCase());
843:       assertFalse(node4.isGetterDef());
844:       assertFalse(node4.isScript());
845:       assertFalse(node4.isThis());
846:       assertFalse(node4.isComma());
847:       assertFalse(node4.isGetProp());
848:       assertFalse(node4.isThrow());
849:       assertFalse(node4.isAnd());
850:       assertFalse(node4.isFalse());
851:       assertEquals(12, node4.getCharno());
852:       assertFalse(node4.isWith());
853:       assertFalse(node4.isBreak());
854:       assertFalse(node4.isInstanceOf());
855:       assertFalse(node4.isInc());
856:       assertFalse(node4.isExprResult());
857:       assertFalse(node4.isIn());
858:       assertFalse(node4.isTypeOf());
859:       assertFalse(node4.isOr());
860:       assertFalse(node4.isDec());
861:       assertFalse(node4.isReturn());
862:       assertFalse(node4.isDelProp());
863:       assertFalse(node4.hasChildren());
864:       assertFalse(node4.isContinue());
865:       assertFalse(node4.isAssign());
866:       assertFalse(node4.isGetElem());
867:       assertFalse(node4.isCast());
868:       assertFalse(node4.isDebugger());
869:       assertEquals(12, node4.getSourcePosition());
870:       assertFalse(node4.isWhile());
871:       assertFalse(node4.isObjectLit());
872:       assertFalse(node4.isNot());
873:       assertTrue(node4.isNumber());
874:       assertFalse(node4.isString());
875:       assertFalse(iterable0.contains(node2));
876:       
877:       boolean boolean0 = node4.isQualifiedName();
878:       assertEquals(4095, Node.COLUMN_MASK);
879:       assertEquals(43, Node.IS_CONSTANT_NAME);
880:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
881:       assertEquals(8, Node.FLAG_NO_THROWS);
882:       assertEquals(39, Node.EMPTY_BLOCK);
883:       assertEquals(36, Node.QUOTED_PROP);
884:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
885:       assertEquals(50, Node.FREE_CALL);
886:       assertEquals(53, Node.INPUT_ID);
887:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
888:       assertEquals(55, Node.INFERRED_FUNCTION);
889:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
890:       assertEquals(57, Node.REFLECTED_OBJECT);
891:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
892:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
893:       assertEquals(56, Node.CHANGE_TIME);
894:       assertEquals(48, Node.DIRECTIVES);
895:       assertEquals(37, Node.OPT_ARG_NAME);
896:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
897:       assertEquals(12, Node.COLUMN_BITS);
898:       assertEquals(32, Node.INCRDECR_PROP);
899:       assertEquals(51, Node.STATIC_SOURCE_FILE);
900:       assertEquals(1, Node.DECR_FLAG);
901:       assertEquals(49, Node.DIRECT_EVAL);
902:       assertEquals(57, Node.LAST_PROP);
903:       assertEquals(46, Node.IS_NAMESPACE);
904:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
905:       assertEquals(15, Node.NO_SIDE_EFFECTS);
906:       assertEquals(29, Node.JSDOC_INFO_PROP);
907:       assertEquals(52, Node.LENGTH);
908:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
909:       assertEquals(40, Node.ORIGINALNAME_PROP);
910:       assertEquals(54, Node.SLASH_V);
911:       assertEquals(2, Node.POST_FLAG);
912:       assertEquals(47, Node.IS_DISPATCHER);
913:       assertEquals(30, Node.VAR_ARGS_NAME);
914:       assertFalse(node4.equals((Object)node1));
915:       assertFalse(node4.equals((Object)node2));
916:       assertFalse(node4.equals((Object)node3));
917:       assertFalse(node4.equals((Object)node0));
918:       assertNotSame(node4, node2);
919:       assertFalse(boolean0);
920:       assertFalse(node4.isParamList());
921:       assertFalse(node4.isSetterDef());
922:       assertFalse(node4.isNull());
923:       assertFalse(node4.isStringKey());
924:       assertFalse(node4.isCall());
925:       assertFalse(node4.isName());
926:       assertEquals(0, node4.getChildCount());
927:       assertEquals(0, node4.getLineno());
928:       assertFalse(node4.isCatch());
929:       assertFalse(node4.isFunction());
930:       assertFalse(node4.isTrue());
931:       assertFalse(node4.isNew());
932:       assertFalse(node4.isVoid());
933:       assertFalse(node4.isDefaultCase());
934:       assertFalse(node4.isVar());
935:       assertFalse(node4.isDo());
936:       assertFalse(node4.isAdd());
937:       assertFalse(node4.isEmpty());
938:       assertFalse(node4.isLabel());
939:       assertFalse(node4.isAssignAdd());
940:       assertFalse(node4.isIf());
941:       assertFalse(node4.isFor());
942:       assertFalse(node4.isNE());
943:       assertFalse(node4.hasMoreThanOneChild());
944:       assertFalse(node4.isArrayLit());
945:       assertFalse(node4.isLabelName());
946:       assertFalse(node4.isSwitch());
947:       assertFalse(node4.isRegExp());
948:       assertFalse(node4.isTry());
949:       assertEquals(39, node4.getType());
950:       assertFalse(node4.isBlock());
951:       assertFalse(node4.isHook());
952:       assertFalse(node4.hasOneChild());
953:       assertFalse(node4.isCase());
954:       assertFalse(node4.isGetterDef());
955:       assertFalse(node4.isScript());
956:       assertFalse(node4.isThis());
957:       assertFalse(node4.isComma());
958:       assertFalse(node4.isGetProp());
959:       assertFalse(node4.isThrow());
960:       assertFalse(node4.isAnd());
961:       assertFalse(node4.isFalse());
962:       assertEquals(12, node4.getCharno());
963:       assertFalse(node4.isWith());
964:       assertFalse(node4.isBreak());
965:       assertFalse(node4.isInstanceOf());
966:       assertFalse(node4.isInc());
967:       assertFalse(node4.isExprResult());
968:       assertFalse(node4.isIn());
969:       assertFalse(node4.isTypeOf());
970:       assertFalse(node4.isOr());
971:       assertFalse(node4.isDec());
972:       assertFalse(node4.isReturn());
973:       assertFalse(node4.isDelProp());
974:       assertFalse(node4.hasChildren());
975:       assertFalse(node4.isContinue());
976:       assertFalse(node4.isAssign());
977:       assertFalse(node4.isGetElem());
978:       assertFalse(node4.isCast());
979:       assertFalse(node4.isDebugger());
980:       assertEquals(12, node4.getSourcePosition());
981:       assertFalse(node4.isWhile());
982:       assertFalse(node4.isObjectLit());
983:       assertFalse(node4.isNot());
984:       assertTrue(node4.isNumber());
985:       assertFalse(node4.isString());
986:       
987:       boolean boolean1 = node0.isOptionalArg();
988:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
989:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
990:       assertEquals(53, Node.INPUT_ID);
991:       assertEquals(29, Node.JSDOC_INFO_PROP);
992:       assertEquals(2, Node.POST_FLAG);
993:       assertEquals(47, Node.IS_DISPATCHER);
994:       assertEquals(51, Node.STATIC_SOURCE_FILE);
995:       assertEquals(12, Node.COLUMN_BITS);
996:       assertEquals(32, Node.INCRDECR_PROP);
997:       assertEquals(46, Node.IS_NAMESPACE);
998:       assertEquals(1, Node.DECR_FLAG);
999:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1000:       assertEquals(43, Node.IS_CONSTANT_NAME);
1001:       assertEquals(50, Node.FREE_CALL);
1002:       assertEquals(54, Node.SLASH_V);
1003:       assertEquals(57, Node.REFLECTED_OBJECT);
1004:       assertEquals(52, Node.LENGTH);
1005:       assertEquals(40, Node.ORIGINALNAME_PROP);
1006:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1007:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1008:       assertEquals(57, Node.LAST_PROP);
1009:       assertEquals(30, Node.VAR_ARGS_NAME);
1010:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1011:       assertEquals(55, Node.INFERRED_FUNCTION);
1012:       assertEquals(4095, Node.COLUMN_MASK);
1013:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1014:       assertEquals(48, Node.DIRECTIVES);
1015:       assertEquals(49, Node.DIRECT_EVAL);
1016:       assertEquals(37, Node.OPT_ARG_NAME);
1017:       assertEquals(39, Node.EMPTY_BLOCK);
1018:       assertEquals(56, Node.CHANGE_TIME);
1019:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1020:       assertEquals(36, Node.QUOTED_PROP);
1021:       assertEquals(8, Node.FLAG_NO_THROWS);
1022:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1023:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1024:       assertFalse(node0.equals((Object)node1));
1025:       assertFalse(node0.equals((Object)node2));
1026:       assertFalse(node0.equals((Object)node4));
1027:       assertFalse(node0.equals((Object)node3));
1028:       assertTrue(boolean1 == boolean0);
1029:       assertFalse(boolean1);
1030:       assertFalse(node0.isRegExp());
1031:       assertFalse(node0.isFunction());
1032:       assertFalse(node0.isTrue());
1033:       assertFalse(node0.isDefaultCase());
1034:       assertFalse(node0.isTry());
1035:       assertFalse(node0.isVoid());
1036:       assertFalse(node0.isArrayLit());
1037:       assertFalse(node0.isGetterDef());
1038:       assertFalse(node0.isDebugger());
1039:       assertFalse(node0.isNE());
1040:       assertFalse(node0.isNull());
1041:       assertFalse(node0.isIf());
1042:       assertFalse(node0.isDelProp());
1043:       assertFalse(node0.isName());
1044:       assertFalse(node0.isCatch());
1045:       assertFalse(node0.isCall());
1046:       assertFalse(node0.isBlock());
1047:       assertFalse(node0.isFor());
1048:       assertFalse(node0.isSwitch());
1049:       assertFalse(node0.isDo());
1050:       assertFalse(node0.isAdd());
1051:       assertTrue(node0.isString());
1052:       assertFalse(node0.isNew());
1053:       assertFalse(node0.isCase());
1054:       assertFalse(node0.isStringKey());
1055:       assertFalse(node0.isOr());
1056:       assertEquals((-1), node0.getCharno());
1057:       assertFalse(node0.isParamList());
1058:       assertFalse(node0.isAssignAdd());
1059:       assertFalse(node0.isLabelName());
1060:       assertFalse(node0.isEmpty());
1061:       assertFalse(node0.isVar());
1062:       assertFalse(node0.isLabel());
1063:       assertEquals(0, node0.getChildCount());
1064:       assertFalse(node0.isScript());
1065:       assertFalse(node0.isExprResult());
1066:       assertFalse(node0.hasOneChild());
1067:       assertFalse(node0.isObjectLit());
1068:       assertFalse(node0.isAnd());
1069:       assertFalse(node0.isNot());
1070:       assertEquals((-1), node0.getSourcePosition());
1071:       assertFalse(node0.isComma());
1072:       assertFalse(node0.isThis());
1073:       assertFalse(node0.isTypeOf());
1074:       assertFalse(node0.isNumber());
1075:       assertFalse(node0.isGetElem());
1076:       assertFalse(node0.isGetProp());
1077:       assertFalse(node0.isBreak());
1078:       assertEquals((-1), node0.getLineno());
1079:       assertFalse(node0.hasMoreThanOneChild());
1080:       assertFalse(node0.isInstanceOf());
1081:       assertFalse(node0.isWith());
1082:       assertFalse(node0.isAssign());
1083:       assertFalse(node0.isReturn());
1084:       assertFalse(node0.isHook());
1085:       assertFalse(node0.isDec());
1086:       assertFalse(node0.hasChildren());
1087:       assertFalse(node0.isInc());
1088:       assertFalse(node0.isWhile());
1089:       assertFalse(node0.isIn());
1090:       assertFalse(node0.isSetterDef());
1091:       assertFalse(node0.isCast());
1092:       assertFalse(node0.isThrow());
1093:       assertFalse(node0.isFalse());
1094:       assertFalse(node0.isContinue());
1095:       assertEquals(40, node0.getType());
1096:       
1097:       node2.setIsSyntheticBlock(false);
1098:       assertEquals(29, Node.JSDOC_INFO_PROP);
1099:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1100:       assertEquals(56, Node.CHANGE_TIME);
1101:       assertEquals(37, Node.OPT_ARG_NAME);
1102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1103:       assertEquals(32, Node.INCRDECR_PROP);
1104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1105:       assertEquals(2, Node.POST_FLAG);
1106:       assertEquals(12, Node.COLUMN_BITS);
1107:       assertEquals(47, Node.IS_DISPATCHER);
1108:       assertEquals(49, Node.DIRECT_EVAL);
1109:       assertEquals(57, Node.LAST_PROP);
1110:       assertEquals(55, Node.INFERRED_FUNCTION);
1111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1113:       assertEquals(53, Node.INPUT_ID);
1114:       assertEquals(52, Node.LENGTH);
1115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1116:       assertEquals(8, Node.FLAG_NO_THROWS);
1117:       assertEquals(36, Node.QUOTED_PROP);
1118:       assertEquals(57, Node.REFLECTED_OBJECT);
1119:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1120:       assertEquals(50, Node.FREE_CALL);
1121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1122:       assertEquals(40, Node.ORIGINALNAME_PROP);
1123:       assertEquals(39, Node.EMPTY_BLOCK);
1124:       assertEquals(48, Node.DIRECTIVES);
1125:       assertEquals(4095, Node.COLUMN_MASK);
1126:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1128:       assertEquals(30, Node.VAR_ARGS_NAME);
1129:       assertEquals(43, Node.IS_CONSTANT_NAME);
1130:       assertEquals(1, Node.DECR_FLAG);
1131:       assertEquals(46, Node.IS_NAMESPACE);
1132:       assertEquals(54, Node.SLASH_V);
1133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1134:       assertFalse(node2.equals((Object)node0));
1135:       assertFalse(node2.equals((Object)node3));
1136:       assertFalse(node2.equals((Object)node1));
1137:       assertFalse(node2.equals((Object)node4));
1138:       assertNotSame(node2, node4);
1139:       assertFalse(node2.isCast());
1140:       assertFalse(node2.isGetElem());
1141:       assertFalse(node2.isExprResult());
1142:       assertFalse(node2.isLabelName());
1143:       assertFalse(node2.hasOneChild());
1144:       assertFalse(node2.isScript());
1145:       assertFalse(node2.isObjectLit());
1146:       assertFalse(node2.isOr());
1147:       assertFalse(node2.isNot());
1148:       assertEquals((-1), node2.getSourcePosition());
1149:       assertFalse(node2.isAssignAdd());
1150:       assertFalse(node2.isAnd());
1151:       assertFalse(node2.isDo());
1152:       assertFalse(node2.isContinue());
1153:       assertFalse(node2.isThrow());
1154:       assertFalse(node2.isFalse());
1155:       assertFalse(node2.isLabel());
1156:       assertFalse(node2.isHook());
1157:       assertFalse(node2.isInc());
1158:       assertFalse(node2.isSwitch());
1159:       assertFalse(node2.isParamList());
1160:       assertFalse(node2.isStringKey());
1161:       assertEquals((-1), node2.getCharno());
1162:       assertFalse(node2.isInstanceOf());
1163:       assertFalse(node2.hasMoreThanOneChild());
1164:       assertFalse(node2.isCatch());
1165:       assertEquals((-1), node2.getLineno());
1166:       assertFalse(node2.isCase());
1167:       assertFalse(node2.isRegExp());
1168:       assertFalse(node2.isWith());
1169:       assertFalse(node2.isThis());
1170:       assertFalse(node2.isBlock());
1171:       assertFalse(node2.isFor());
1172:       assertEquals(39, node2.getType());
1173:       assertFalse(node2.isVoid());
1174:       assertFalse(node2.isTry());
1175:       assertFalse(node2.isArrayLit());
1176:       assertFalse(node2.isIf());
1177:       assertFalse(node2.isGetterDef());
1178:       assertFalse(node2.isDelProp());
1179:       assertFalse(node2.isNE());
1180:       assertFalse(node2.isEmpty());
1181:       assertFalse(node2.isTrue());
1182:       assertFalse(node2.isDebugger());
1183:       assertEquals(0, node2.getChildCount());
1184:       assertFalse(node2.isIn());
1185:       assertFalse(node2.isSetterDef());
1186:       assertFalse(node2.isDefaultCase());
1187:       assertFalse(node2.isFunction());
1188:       assertFalse(node2.isVar());
1189:       assertFalse(node2.isAdd());
1190:       assertFalse(node2.isName());
1191:       assertFalse(node2.isCall());
1192:       assertFalse(node2.isNew());
1193:       assertFalse(node2.isNull());
1194:       assertFalse(node2.isString());
1195:       assertFalse(node2.isReturn());
1196:       assertFalse(node2.isGetProp());
1197:       assertTrue(node2.isNumber());
1198:       assertFalse(node2.isDec());
1199:       assertFalse(node2.isBreak());
1200:       assertFalse(node2.hasChildren());
1201:       assertFalse(node2.isTypeOf());
1202:       assertFalse(node2.isWhile());
1203:       assertFalse(node2.isAssign());
1204:       assertFalse(node2.isComma());
1205:       
1206:       boolean boolean2 = node4.isQuotedString();
1207:       assertEquals(4095, Node.COLUMN_MASK);
1208:       assertEquals(43, Node.IS_CONSTANT_NAME);
1209:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1210:       assertEquals(8, Node.FLAG_NO_THROWS);
1211:       assertEquals(39, Node.EMPTY_BLOCK);
1212:       assertEquals(36, Node.QUOTED_PROP);
1213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1214:       assertEquals(50, Node.FREE_CALL);
1215:       assertEquals(53, Node.INPUT_ID);
1216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1217:       assertEquals(55, Node.INFERRED_FUNCTION);
1218:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1219:       assertEquals(57, Node.REFLECTED_OBJECT);
1220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1222:       assertEquals(56, Node.CHANGE_TIME);
1223:       assertEquals(48, Node.DIRECTIVES);
1224:       assertEquals(37, Node.OPT_ARG_NAME);
1225:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1226:       assertEquals(12, Node.COLUMN_BITS);
1227:       assertEquals(32, Node.INCRDECR_PROP);
1228:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1229:       assertEquals(1, Node.DECR_FLAG);
1230:       assertEquals(49, Node.DIRECT_EVAL);
1231:       assertEquals(57, Node.LAST_PROP);
1232:       assertEquals(46, Node.IS_NAMESPACE);
1233:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1234:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1235:       assertEquals(29, Node.JSDOC_INFO_PROP);
1236:       assertEquals(52, Node.LENGTH);
1237:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1238:       assertEquals(40, Node.ORIGINALNAME_PROP);
1239:       assertEquals(54, Node.SLASH_V);
1240:       assertEquals(2, Node.POST_FLAG);
1241:       assertEquals(47, Node.IS_DISPATCHER);
1242:       assertEquals(30, Node.VAR_ARGS_NAME);
1243:       assertFalse(node4.equals((Object)node1));
1244:       assertFalse(node4.equals((Object)node2));
1245:       assertFalse(node4.equals((Object)node3));
1246:       assertFalse(node4.equals((Object)node0));
1247:       assertTrue(boolean2 == boolean1);
1248:       assertTrue(boolean2 == boolean0);
1249:       assertNotSame(node4, node2);
1250:       assertFalse(boolean2);
1251:       assertFalse(node4.isParamList());
1252:       assertFalse(node4.isSetterDef());
1253:       assertFalse(node4.isNull());
1254:       assertFalse(node4.isStringKey());
1255:       assertFalse(node4.isCall());
1256:       assertFalse(node4.isName());
1257:       assertEquals(0, node4.getChildCount());
1258:       assertEquals(0, node4.getLineno());
1259:       assertFalse(node4.isCatch());
1260:       assertFalse(node4.isFunction());
1261:       assertFalse(node4.isTrue());
1262:       assertFalse(node4.isNew());
1263:       assertFalse(node4.isVoid());
1264:       assertFalse(node4.isDefaultCase());
1265:       assertFalse(node4.isVar());
1266:       assertFalse(node4.isDo());
1267:       assertFalse(node4.isAdd());
1268:       assertFalse(node4.isEmpty());
1269:       assertFalse(node4.isLabel());
1270:       assertFalse(node4.isAssignAdd());
1271:       assertFalse(node4.isIf());
1272:       assertFalse(node4.isFor());
1273:       assertFalse(node4.isNE());
1274:       assertFalse(node4.hasMoreThanOneChild());
1275:       assertFalse(node4.isArrayLit());
1276:       assertFalse(node4.isLabelName());
1277:       assertFalse(node4.isSwitch());
1278:       assertFalse(node4.isRegExp());
1279:       assertFalse(node4.isTry());
1280:       assertEquals(39, node4.getType());
1281:       assertFalse(node4.isBlock());
1282:       assertFalse(node4.isHook());
1283:       assertFalse(node4.hasOneChild());
1284:       assertFalse(node4.isCase());
1285:       assertFalse(node4.isGetterDef());
1286:       assertFalse(node4.isScript());
1287:       assertFalse(node4.isThis());
1288:       assertFalse(node4.isComma());
1289:       assertFalse(node4.isGetProp());
1290:       assertFalse(node4.isThrow());
1291:       assertFalse(node4.isAnd());
1292:       assertFalse(node4.isFalse());
1293:       assertEquals(12, node4.getCharno());
1294:       assertFalse(node4.isWith());
1295:       assertFalse(node4.isBreak());
1296:       assertFalse(node4.isInstanceOf());
1297:       assertFalse(node4.isInc());
1298:       assertFalse(node4.isExprResult());
1299:       assertFalse(node4.isIn());
1300:       assertFalse(node4.isTypeOf());
1301:       assertFalse(node4.isOr());
1302:       assertFalse(node4.isDec());
1303:       assertFalse(node4.isReturn());
1304:       assertFalse(node4.isDelProp());
1305:       assertFalse(node4.hasChildren());
1306:       assertFalse(node4.isContinue());
1307:       assertFalse(node4.isAssign());
1308:       assertFalse(node4.isGetElem());
1309:       assertFalse(node4.isCast());
1310:       assertFalse(node4.isDebugger());
1311:       assertEquals(12, node4.getSourcePosition());
1312:       assertFalse(node4.isWhile());
1313:       assertFalse(node4.isObjectLit());
1314:       assertFalse(node4.isNot());
1315:       assertTrue(node4.isNumber());
1316:       assertFalse(node4.isString());
1317:       
1318:       boolean boolean3 = node3.isNoSideEffectsCall();
1319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1320:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1321:       assertEquals(53, Node.INPUT_ID);
1322:       assertEquals(29, Node.JSDOC_INFO_PROP);
1323:       assertEquals(2, Node.POST_FLAG);
1324:       assertEquals(47, Node.IS_DISPATCHER);
1325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1326:       assertEquals(12, Node.COLUMN_BITS);
1327:       assertEquals(32, Node.INCRDECR_PROP);
1328:       assertEquals(46, Node.IS_NAMESPACE);
1329:       assertEquals(1, Node.DECR_FLAG);
1330:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1331:       assertEquals(43, Node.IS_CONSTANT_NAME);
1332:       assertEquals(50, Node.FREE_CALL);
1333:       assertEquals(54, Node.SLASH_V);
1334:       assertEquals(57, Node.REFLECTED_OBJECT);
1335:       assertEquals(52, Node.LENGTH);
1336:       assertEquals(40, Node.ORIGINALNAME_PROP);
1337:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1338:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1339:       assertEquals(57, Node.LAST_PROP);
1340:       assertEquals(30, Node.VAR_ARGS_NAME);
1341:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1342:       assertEquals(55, Node.INFERRED_FUNCTION);
1343:       assertEquals(4095, Node.COLUMN_MASK);
1344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1345:       assertEquals(48, Node.DIRECTIVES);
1346:       assertEquals(49, Node.DIRECT_EVAL);
1347:       assertEquals(37, Node.OPT_ARG_NAME);
1348:       assertEquals(39, Node.EMPTY_BLOCK);
1349:       assertEquals(56, Node.CHANGE_TIME);
1350:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1351:       assertEquals(36, Node.QUOTED_PROP);
1352:       assertEquals(8, Node.FLAG_NO_THROWS);
1353:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1354:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1355:       assertEquals(40, Node.ORIGINALNAME_PROP);
1356:       assertEquals(57, Node.REFLECTED_OBJECT);
1357:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1358:       assertEquals(50, Node.FREE_CALL);
1359:       assertEquals(52, Node.LENGTH);
1360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1361:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1362:       assertEquals(39, Node.EMPTY_BLOCK);
1363:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1364:       assertEquals(1, Node.DECR_FLAG);
1365:       assertEquals(57, Node.LAST_PROP);
1366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1367:       assertEquals(46, Node.IS_NAMESPACE);
1368:       assertEquals(30, Node.VAR_ARGS_NAME);
1369:       assertEquals(43, Node.IS_CONSTANT_NAME);
1370:       assertEquals(54, Node.SLASH_V);
1371:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1372:       assertEquals(29, Node.JSDOC_INFO_PROP);
1373:       assertEquals(53, Node.INPUT_ID);
1374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1375:       assertEquals(2, Node.POST_FLAG);
1376:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1377:       assertEquals(47, Node.IS_DISPATCHER);
1378:       assertEquals(32, Node.INCRDECR_PROP);
1379:       assertEquals(12, Node.COLUMN_BITS);
1380:       assertEquals(4095, Node.COLUMN_MASK);
1381:       assertEquals(55, Node.INFERRED_FUNCTION);
1382:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1383:       assertEquals(8, Node.FLAG_NO_THROWS);
1384:       assertEquals(36, Node.QUOTED_PROP);
1385:       assertEquals(56, Node.CHANGE_TIME);
1386:       assertEquals(37, Node.OPT_ARG_NAME);
1387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1388:       assertEquals(49, Node.DIRECT_EVAL);
1389:       assertEquals(48, Node.DIRECTIVES);
1390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1391:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1392:       assertEquals(50, Node.FREE_CALL);
1393:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1394:       assertEquals(57, Node.REFLECTED_OBJECT);
1395:       assertEquals(48, Node.DIRECTIVES);
1396:       assertEquals(4095, Node.COLUMN_MASK);
1397:       assertEquals(40, Node.ORIGINALNAME_PROP);
1398:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1399:       assertEquals(1, Node.DECR_FLAG);
1400:       assertEquals(43, Node.IS_CONSTANT_NAME);
1401:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1402:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1403:       assertEquals(12, Node.COLUMN_BITS);
1404:       assertEquals(46, Node.IS_NAMESPACE);
1405:       assertEquals(54, Node.SLASH_V);
1406:       assertEquals(32, Node.INCRDECR_PROP);
1407:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1408:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1409:       assertEquals(2, Node.POST_FLAG);
1410:       assertEquals(56, Node.CHANGE_TIME);
1411:       assertEquals(47, Node.IS_DISPATCHER);
1412:       assertEquals(37, Node.OPT_ARG_NAME);
1413:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1414:       assertEquals(30, Node.VAR_ARGS_NAME);
1415:       assertEquals(57, Node.LAST_PROP);
1416:       assertEquals(49, Node.DIRECT_EVAL);
1417:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1418:       assertEquals(36, Node.QUOTED_PROP);
1419:       assertEquals(52, Node.LENGTH);
1420:       assertEquals(55, Node.INFERRED_FUNCTION);
1421:       assertEquals(8, Node.FLAG_NO_THROWS);
1422:       assertEquals(39, Node.EMPTY_BLOCK);
1423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1424:       assertEquals(29, Node.JSDOC_INFO_PROP);
1425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1426:       assertEquals(53, Node.INPUT_ID);
1427:       assertFalse(node0.equals((Object)node1));
1428:       assertFalse(node0.equals((Object)node2));
1429:       assertFalse(node0.equals((Object)node4));
1430:       assertFalse(node0.equals((Object)node3));
1431:       assertFalse(node1.equals((Object)node2));
1432:       assertFalse(node1.equals((Object)node0));
1433:       assertFalse(node1.equals((Object)node4));
1434:       assertFalse(node3.equals((Object)node4));
1435:       assertFalse(node3.equals((Object)node2));
1436:       assertFalse(node3.equals((Object)node0));
1437:       assertTrue(boolean3 == boolean1);
1438:       assertTrue(boolean3 == boolean2);
1439:       assertTrue(boolean3 == boolean0);
1440:       assertSame(node1, node3);
1441:       assertSame(node3, node1);
1442:       assertFalse(boolean3);
1443:       assertFalse(node0.isRegExp());
1444:       assertFalse(node0.isFunction());
1445:       assertFalse(node0.isTrue());
1446:       assertFalse(node0.isDefaultCase());
1447:       assertFalse(node0.isTry());
1448:       assertFalse(node0.isVoid());
1449:       assertFalse(node0.isArrayLit());
1450:       assertFalse(node0.isGetterDef());
1451:       assertFalse(node0.isDebugger());
1452:       assertFalse(node0.isNE());
1453:       assertFalse(node0.isNull());
1454:       assertFalse(node0.isIf());
1455:       assertFalse(node0.isDelProp());
1456:       assertFalse(node0.isName());
1457:       assertFalse(node0.isCatch());
1458:       assertFalse(node0.isCall());
1459:       assertFalse(node0.isBlock());
1460:       assertFalse(node0.isFor());
1461:       assertFalse(node0.isSwitch());
1462:       assertFalse(node0.isDo());
1463:       assertFalse(node0.isAdd());
1464:       assertTrue(node0.isString());
1465:       assertFalse(node0.isNew());
1466:       assertFalse(node0.isCase());
1467:       assertFalse(node0.isStringKey());
1468:       assertFalse(node0.isOr());
1469:       assertEquals((-1), node0.getCharno());
1470:       assertFalse(node0.isParamList());
1471:       assertFalse(node0.isAssignAdd());
1472:       assertFalse(node0.isLabelName());
1473:       assertFalse(node0.isEmpty());
1474:       assertFalse(node0.isVar());
1475:       assertFalse(node0.isLabel());
1476:       assertEquals(0, node0.getChildCount());
1477:       assertFalse(node0.isScript());
1478:       assertFalse(node0.isExprResult());
1479:       assertFalse(node0.hasOneChild());
1480:       assertFalse(node0.isObjectLit());
1481:       assertFalse(node0.isAnd());
1482:       assertFalse(node0.isNot());
1483:       assertEquals((-1), node0.getSourcePosition());
1484:       assertFalse(node0.isComma());
1485:       assertFalse(node0.isThis());
1486:       assertFalse(node0.isTypeOf());
1487:       assertFalse(node0.isNumber());
1488:       assertFalse(node0.isGetElem());
1489:       assertFalse(node0.isGetProp());
1490:       assertFalse(node0.isBreak());
1491:       assertEquals((-1), node0.getLineno());
1492:       assertFalse(node0.hasMoreThanOneChild());
1493:       assertFalse(node0.isInstanceOf());
1494:       assertFalse(node0.isWith());
1495:       assertFalse(node0.isAssign());
1496:       assertFalse(node0.isReturn());
1497:       assertFalse(node0.isHook());
1498:       assertFalse(node0.isDec());
1499:       assertFalse(node0.hasChildren());
1500:       assertFalse(node0.isInc());
1501:       assertFalse(node0.isWhile());
1502:       assertFalse(node0.isIn());
1503:       assertFalse(node0.isSetterDef());
1504:       assertFalse(node0.isCast());
1505:       assertFalse(node0.isThrow());
1506:       assertFalse(node0.isFalse());
1507:       assertFalse(node0.isContinue());
1508:       assertEquals(40, node0.getType());
1509:       assertFalse(node1.isNew());
1510:       assertFalse(node1.isBlock());
1511:       assertFalse(node1.isAdd());
1512:       assertFalse(node1.isContinue());
1513:       assertFalse(node1.isCall());
1514:       assertEquals((-1), node1.getLineno());
1515:       assertFalse(node1.isStringKey());
1516:       assertFalse(node1.isName());
1517:       assertFalse(node1.isParamList());
1518:       assertEquals((-1), node1.getSourcePosition());
1519:       assertFalse(node1.isDec());
1520:       assertFalse(node1.hasChildren());
1521:       assertFalse(node1.isAssign());
1522:       assertFalse(node1.isNumber());
1523:       assertFalse(node1.isTypeOf());
1524:       assertFalse(node1.hasMoreThanOneChild());
1525:       assertFalse(node1.hasOneChild());
1526:       assertFalse(node1.isReturn());
1527:       assertFalse(node1.isWhile());
1528:       assertFalse(node1.isTrue());
1529:       assertFalse(node1.isExprResult());
1530:       assertFalse(node1.isScript());
1531:       assertFalse(node1.isVoid());
1532:       assertFalse(node1.isGetElem());
1533:       assertFalse(node1.isArrayLit());
1534:       assertFalse(node1.isLabelName());
1535:       assertFalse(node1.isDelProp());
1536:       assertFalse(node1.isNull());
1537:       assertFalse(node1.isLabel());
1538:       assertFalse(node1.isOr());
1539:       assertEquals(0, node1.getChildCount());
1540:       assertFalse(node1.isEmpty());
1541:       assertFalse(node1.isVar());
1542:       assertFalse(node1.isDo());
1543:       assertFalse(node1.isAssignAdd());
1544:       assertFalse(node1.isDefaultCase());
1545:       assertFalse(node1.isInc());
1546:       assertEquals(0, node1.getType());
1547:       assertEquals((-1), node1.getCharno());
1548:       assertFalse(node1.isString());
1549:       assertFalse(node1.isSwitch());
1550:       assertFalse(node1.isThis());
1551:       assertFalse(node1.isComma());
1552:       assertFalse(node1.isGetProp());
1553:       assertFalse(node1.isBreak());
1554:       assertFalse(node1.isGetterDef());
1555:       assertFalse(node1.isInstanceOf());
1556:       assertFalse(node1.isHook());
1557:       assertFalse(node1.isCase());
1558:       assertFalse(node1.isTry());
1559:       assertFalse(node1.isFor());
1560:       assertFalse(node1.isFunction());
1561:       assertFalse(node1.isRegExp());
1562:       assertFalse(node1.isDebugger());
1563:       assertFalse(node1.isWith());
1564:       assertFalse(node1.isNot());
1565:       assertFalse(node1.isCatch());
1566:       assertFalse(node1.isCast());
1567:       assertFalse(node1.isObjectLit());
1568:       assertFalse(node1.isIf());
1569:       assertFalse(node1.isAnd());
1570:       assertFalse(node1.isSetterDef());
1571:       assertFalse(node1.isNE());
1572:       assertFalse(node1.isFalse());
1573:       assertFalse(node1.isIn());
1574:       assertFalse(node1.isThrow());
1575:       assertEquals((-1), node3.getCharno());
1576:       assertFalse(node3.isThrow());
1577:       assertFalse(node3.isHook());
1578:       assertFalse(node3.isString());
1579:       assertFalse(node3.isGetProp());
1580:       assertFalse(node3.isCase());
1581:       assertFalse(node3.isInc());
1582:       assertFalse(node3.isIn());
1583:       assertFalse(node3.isInstanceOf());
1584:       assertFalse(node3.isComma());
1585:       assertFalse(node3.isNE());
1586:       assertFalse(node3.isThis());
1587:       assertFalse(node3.isIf());
1588:       assertFalse(node3.isDelProp());
1589:       assertFalse(node3.isBreak());
1590:       assertFalse(node3.isWith());
1591:       assertEquals(0, node3.getType());
1592:       assertFalse(node3.isExprResult());
1593:       assertFalse(node3.hasOneChild());
1594:       assertFalse(node3.isTry());
1595:       assertFalse(node3.isFor());
1596:       assertFalse(node3.isTrue());
1597:       assertFalse(node3.isGetterDef());
1598:       assertFalse(node3.isDefaultCase());
1599:       assertFalse(node3.isNumber());
1600:       assertFalse(node3.isScript());
1601:       assertFalse(node3.isEmpty());
1602:       assertEquals(0, node3.getChildCount());
1603:       assertFalse(node3.isAssignAdd());
1604:       assertFalse(node3.isParamList());
1605:       assertFalse(node3.isLabel());
1606:       assertFalse(node3.isLabelName());
1607:       assertFalse(node3.isSwitch());
1608:       assertFalse(node3.isArrayLit());
1609:       assertFalse(node3.isStringKey());
1610:       assertFalse(node3.isVar());
1611:       assertFalse(node3.isBlock());
1612:       assertFalse(node3.isWhile());
1613:       assertFalse(node3.isDo());
1614:       assertFalse(node3.isNew());
1615:       assertFalse(node3.isAdd());
1616:       assertFalse(node3.isSetterDef());
1617:       assertEquals((-1), node3.getLineno());
1618:       assertFalse(node3.isOr());
1619:       assertFalse(node3.hasMoreThanOneChild());
1620:       assertFalse(node3.isReturn());
1621:       assertFalse(node3.isNull());
1622:       assertFalse(node3.hasChildren());
1623:       assertFalse(node3.isDec());
1624:       assertFalse(node3.isRegExp());
1625:       assertFalse(node3.isAssign());
1626:       assertFalse(node3.isTypeOf());
1627:       assertFalse(node3.isName());
1628:       assertFalse(node3.isVoid());
1629:       assertFalse(node3.isCatch());
1630:       assertFalse(node3.isGetElem());
1631:       assertFalse(node3.isCall());
1632:       assertFalse(node3.isDebugger());
1633:       assertEquals((-1), node3.getSourcePosition());
1634:       assertFalse(node3.isNot());
1635:       assertFalse(node3.isAnd());
1636:       assertFalse(node3.isObjectLit());
1637:       assertFalse(node3.isFunction());
1638:       assertFalse(node3.isFalse());
1639:       assertFalse(node3.isContinue());
1640:       assertFalse(node3.isCast());
1641:       
1642:       node0.addChildrenToFront(node3);
1643:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1645:       assertEquals(53, Node.INPUT_ID);
1646:       assertEquals(29, Node.JSDOC_INFO_PROP);
1647:       assertEquals(2, Node.POST_FLAG);
1648:       assertEquals(47, Node.IS_DISPATCHER);
1649:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1650:       assertEquals(12, Node.COLUMN_BITS);
1651:       assertEquals(32, Node.INCRDECR_PROP);
1652:       assertEquals(46, Node.IS_NAMESPACE);
1653:       assertEquals(1, Node.DECR_FLAG);
1654:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1655:       assertEquals(43, Node.IS_CONSTANT_NAME);
1656:       assertEquals(50, Node.FREE_CALL);
1657:       assertEquals(54, Node.SLASH_V);
1658:       assertEquals(57, Node.REFLECTED_OBJECT);
1659:       assertEquals(52, Node.LENGTH);
1660:       assertEquals(40, Node.ORIGINALNAME_PROP);
1661:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1662:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1663:       assertEquals(57, Node.LAST_PROP);
1664:       assertEquals(30, Node.VAR_ARGS_NAME);
1665:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1666:       assertEquals(55, Node.INFERRED_FUNCTION);
1667:       assertEquals(4095, Node.COLUMN_MASK);
1668:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1669:       assertEquals(48, Node.DIRECTIVES);
1670:       assertEquals(49, Node.DIRECT_EVAL);
1671:       assertEquals(37, Node.OPT_ARG_NAME);
1672:       assertEquals(39, Node.EMPTY_BLOCK);
1673:       assertEquals(56, Node.CHANGE_TIME);
1674:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1675:       assertEquals(36, Node.QUOTED_PROP);
1676:       assertEquals(8, Node.FLAG_NO_THROWS);
1677:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1678:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1679:       assertEquals(40, Node.ORIGINALNAME_PROP);
1680:       assertEquals(57, Node.REFLECTED_OBJECT);
1681:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1682:       assertEquals(50, Node.FREE_CALL);
1683:       assertEquals(52, Node.LENGTH);
1684:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1685:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1686:       assertEquals(39, Node.EMPTY_BLOCK);
1687:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1688:       assertEquals(1, Node.DECR_FLAG);
1689:       assertEquals(57, Node.LAST_PROP);
1690:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1691:       assertEquals(46, Node.IS_NAMESPACE);
1692:       assertEquals(30, Node.VAR_ARGS_NAME);
1693:       assertEquals(43, Node.IS_CONSTANT_NAME);
1694:       assertEquals(54, Node.SLASH_V);
1695:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1696:       assertEquals(29, Node.JSDOC_INFO_PROP);
1697:       assertEquals(53, Node.INPUT_ID);
1698:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1699:       assertEquals(2, Node.POST_FLAG);
1700:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1701:       assertEquals(47, Node.IS_DISPATCHER);
1702:       assertEquals(32, Node.INCRDECR_PROP);
1703:       assertEquals(12, Node.COLUMN_BITS);
1704:       assertEquals(4095, Node.COLUMN_MASK);
1705:       assertEquals(55, Node.INFERRED_FUNCTION);
1706:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1707:       assertEquals(8, Node.FLAG_NO_THROWS);
1708:       assertEquals(36, Node.QUOTED_PROP);
1709:       assertEquals(56, Node.CHANGE_TIME);
1710:       assertEquals(37, Node.OPT_ARG_NAME);
1711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1712:       assertEquals(49, Node.DIRECT_EVAL);
1713:       assertEquals(48, Node.DIRECTIVES);
1714:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1715:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1716:       assertEquals(50, Node.FREE_CALL);
1717:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1718:       assertEquals(57, Node.REFLECTED_OBJECT);
1719:       assertEquals(48, Node.DIRECTIVES);
1720:       assertEquals(4095, Node.COLUMN_MASK);
1721:       assertEquals(40, Node.ORIGINALNAME_PROP);
1722:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1723:       assertEquals(1, Node.DECR_FLAG);
1724:       assertEquals(43, Node.IS_CONSTANT_NAME);
1725:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1726:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1727:       assertEquals(12, Node.COLUMN_BITS);
1728:       assertEquals(46, Node.IS_NAMESPACE);
1729:       assertEquals(54, Node.SLASH_V);
1730:       assertEquals(32, Node.INCRDECR_PROP);
1731:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1732:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1733:       assertEquals(2, Node.POST_FLAG);
1734:       assertEquals(56, Node.CHANGE_TIME);
1735:       assertEquals(47, Node.IS_DISPATCHER);
1736:       assertEquals(37, Node.OPT_ARG_NAME);
1737:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1738:       assertEquals(30, Node.VAR_ARGS_NAME);
1739:       assertEquals(57, Node.LAST_PROP);
1740:       assertEquals(49, Node.DIRECT_EVAL);
1741:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1742:       assertEquals(36, Node.QUOTED_PROP);
1743:       assertEquals(52, Node.LENGTH);
1744:       assertEquals(55, Node.INFERRED_FUNCTION);
1745:       assertEquals(8, Node.FLAG_NO_THROWS);
1746:       assertEquals(39, Node.EMPTY_BLOCK);
1747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1748:       assertEquals(29, Node.JSDOC_INFO_PROP);
1749:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1750:       assertEquals(53, Node.INPUT_ID);
1751:       assertFalse(node0.equals((Object)node1));
1752:       assertFalse(node0.equals((Object)node2));
1753:       assertFalse(node0.equals((Object)node4));
1754:       assertFalse(node0.equals((Object)node3));
1755:       assertFalse(node1.equals((Object)node2));
1756:       assertFalse(node1.equals((Object)node0));
1757:       assertFalse(node1.equals((Object)node4));
1758:       assertFalse(node3.equals((Object)node4));
1759:       assertFalse(node3.equals((Object)node2));
1760:       assertFalse(node3.equals((Object)node0));
1761:       assertSame(node1, node3);
1762:       assertSame(node3, node1);
1763:       assertFalse(node0.isRegExp());
1764:       assertFalse(node0.isFunction());
1765:       assertFalse(node0.isTrue());
1766:       assertFalse(node0.isDefaultCase());
1767:       assertFalse(node0.isTry());
1768:       assertFalse(node0.isVoid());
1769:       assertFalse(node0.isArrayLit());
1770:       assertFalse(node0.isGetterDef());
1771:       assertFalse(node0.isDebugger());
1772:       assertFalse(node0.isNE());
1773:       assertFalse(node0.isNull());
1774:       assertFalse(node0.isIf());
1775:       assertTrue(node0.hasChildren());
1776:       assertFalse(node0.isDelProp());
1777:       assertFalse(node0.isName());
1778:       assertFalse(node0.isCatch());
1779:       assertFalse(node0.isCall());
1780:       assertTrue(node0.hasOneChild());
1781:       assertFalse(node0.isBlock());
1782:       assertFalse(node0.isFor());
1783:       assertEquals(1, node0.getChildCount());
1784:       assertFalse(node0.isSwitch());
1785:       assertFalse(node0.isDo());
1786:       assertFalse(node0.isAdd());
1787:       assertTrue(node0.isString());
1788:       assertFalse(node0.isNew());
1789:       assertFalse(node0.isCase());
1790:       assertFalse(node0.isStringKey());
1791:       assertFalse(node0.isOr());
1792:       assertEquals((-1), node0.getCharno());
1793:       assertFalse(node0.isParamList());
1794:       assertFalse(node0.isAssignAdd());
1795:       assertFalse(node0.isLabelName());
1796:       assertFalse(node0.isEmpty());
1797:       assertFalse(node0.isVar());
1798:       assertFalse(node0.isLabel());
1799:       assertFalse(node0.isScript());
1800:       assertFalse(node0.isExprResult());
1801:       assertFalse(node0.isObjectLit());
1802:       assertFalse(node0.isAnd());
1803:       assertFalse(node0.isNot());
1804:       assertEquals((-1), node0.getSourcePosition());
1805:       assertFalse(node0.isComma());
1806:       assertFalse(node0.isThis());
1807:       assertFalse(node0.isTypeOf());
1808:       assertFalse(node0.isNumber());
1809:       assertFalse(node0.isGetElem());
1810:       assertFalse(node0.isGetProp());
1811:       assertFalse(node0.isBreak());
1812:       assertEquals((-1), node0.getLineno());
1813:       assertFalse(node0.hasMoreThanOneChild());
1814:       assertFalse(node0.isInstanceOf());
1815:       assertFalse(node0.isWith());
1816:       assertFalse(node0.isAssign());
1817:       assertFalse(node0.isReturn());
1818:       assertFalse(node0.isHook());
1819:       assertFalse(node0.isDec());
1820:       assertFalse(node0.isInc());
1821:       assertFalse(node0.isWhile());
1822:       assertFalse(node0.isIn());
1823:       assertFalse(node0.isSetterDef());
1824:       assertFalse(node0.isCast());
1825:       assertFalse(node0.isThrow());
1826:       assertFalse(node0.isFalse());
1827:       assertFalse(node0.isContinue());
1828:       assertEquals(40, node0.getType());
1829:       assertFalse(node1.isNew());
1830:       assertFalse(node1.isBlock());
1831:       assertFalse(node1.isAdd());
1832:       assertFalse(node1.isContinue());
1833:       assertFalse(node1.isCall());
1834:       assertEquals((-1), node1.getLineno());
1835:       assertFalse(node1.isStringKey());
1836:       assertFalse(node1.isName());
1837:       assertFalse(node1.isParamList());
1838:       assertEquals((-1), node1.getSourcePosition());
1839:       assertFalse(node1.isDec());
1840:       assertFalse(node1.hasChildren());
1841:       assertFalse(node1.isAssign());
1842:       assertFalse(node1.isNumber());
1843:       assertFalse(node1.isTypeOf());
1844:       assertFalse(node1.hasMoreThanOneChild());
1845:       assertFalse(node1.hasOneChild());
1846:       assertFalse(node1.isReturn());
1847:       assertFalse(node1.isWhile());
1848:       assertFalse(node1.isTrue());
1849:       assertFalse(node1.isExprResult());
1850:       assertFalse(node1.isScript());
1851:       assertFalse(node1.isVoid());
1852:       assertFalse(node1.isGetElem());
1853:       assertFalse(node1.isArrayLit());
1854:       assertFalse(node1.isLabelName());
1855:       assertFalse(node1.isDelProp());
1856:       assertFalse(node1.isNull());
1857:       assertFalse(node1.isLabel());
1858:       assertFalse(node1.isOr());
1859:       assertEquals(0, node1.getChildCount());
1860:       assertFalse(node1.isEmpty());
1861:       assertFalse(node1.isVar());
1862:       assertFalse(node1.isDo());
1863:       assertFalse(node1.isAssignAdd());
1864:       assertFalse(node1.isDefaultCase());
1865:       assertFalse(node1.isInc());
1866:       assertEquals(0, node1.getType());
1867:       assertEquals((-1), node1.getCharno());
1868:       assertFalse(node1.isString());
1869:       assertFalse(node1.isSwitch());
1870:       assertFalse(node1.isThis());
1871:       assertFalse(node1.isComma());
1872:       assertFalse(node1.isGetProp());
1873:       assertFalse(node1.isBreak());
1874:       assertFalse(node1.isGetterDef());
1875:       assertFalse(node1.isInstanceOf());
1876:       assertFalse(node1.isHook());
1877:       assertFalse(node1.isCase());
1878:       assertFalse(node1.isTry());
1879:       assertFalse(node1.isFor());
1880:       assertFalse(node1.isFunction());
1881:       assertFalse(node1.isRegExp());
1882:       assertFalse(node1.isDebugger());
1883:       assertFalse(node1.isWith());
1884:       assertFalse(node1.isNot());
1885:       assertFalse(node1.isCatch());
1886:       assertFalse(node1.isCast());
1887:       assertFalse(node1.isObjectLit());
1888:       assertFalse(node1.isIf());
1889:       assertFalse(node1.isAnd());
1890:       assertFalse(node1.isSetterDef());
1891:       assertFalse(node1.isNE());
1892:       assertFalse(node1.isFalse());
1893:       assertFalse(node1.isIn());
1894:       assertFalse(node1.isThrow());
1895:       assertEquals((-1), node3.getCharno());
1896:       assertFalse(node3.isThrow());
1897:       assertFalse(node3.isHook());
1898:       assertFalse(node3.isString());
1899:       assertFalse(node3.isGetProp());
1900:       assertFalse(node3.isCase());
1901:       assertFalse(node3.isInc());
1902:       assertFalse(node3.isIn());
1903:       assertFalse(node3.isInstanceOf());
1904:       assertFalse(node3.isComma());
1905:       assertFalse(node3.isNE());
1906:       assertFalse(node3.isThis());
1907:       assertFalse(node3.isIf());
1908:       assertFalse(node3.isDelProp());
1909:       assertFalse(node3.isBreak());
1910:       assertFalse(node3.isWith());
1911:       assertEquals(0, node3.getType());
1912:       assertFalse(node3.isExprResult());
1913:       assertFalse(node3.hasOneChild());
1914:       assertFalse(node3.isTry());
1915:       assertFalse(node3.isFor());
1916:       assertFalse(node3.isTrue());
1917:       assertFalse(node3.isGetterDef());
1918:       assertFalse(node3.isDefaultCase());
1919:       assertFalse(node3.isNumber());
1920:       assertFalse(node3.isScript());
1921:       assertFalse(node3.isEmpty());
1922:       assertEquals(0, node3.getChildCount());
1923:       assertFalse(node3.isAssignAdd());
1924:       assertFalse(node3.isParamList());
1925:       assertFalse(node3.isLabel());
1926:       assertFalse(node3.isLabelName());
1927:       assertFalse(node3.isSwitch());
1928:       assertFalse(node3.isArrayLit());
1929:       assertFalse(node3.isStringKey());
1930:       assertFalse(node3.isVar());
1931:       assertFalse(node3.isBlock());
1932:       assertFalse(node3.isWhile());
1933:       assertFalse(node3.isDo());
1934:       assertFalse(node3.isNew());
1935:       assertFalse(node3.isAdd());
1936:       assertFalse(node3.isSetterDef());
1937:       assertEquals((-1), node3.getLineno());
1938:       assertFalse(node3.isOr());
1939:       assertFalse(node3.hasMoreThanOneChild());
1940:       assertFalse(node3.isReturn());
1941:       assertFalse(node3.isNull());
1942:       assertFalse(node3.hasChildren());
1943:       assertFalse(node3.isDec());
1944:       assertFalse(node3.isRegExp());
1945:       assertFalse(node3.isAssign());
1946:       assertFalse(node3.isTypeOf());
1947:       assertFalse(node3.isName());
1948:       assertFalse(node3.isVoid());
1949:       assertFalse(node3.isCatch());
1950:       assertFalse(node3.isGetElem());
1951:       assertFalse(node3.isCall());
1952:       assertFalse(node3.isDebugger());
1953:       assertEquals((-1), node3.getSourcePosition());
1954:       assertFalse(node3.isNot());
1955:       assertFalse(node3.isAnd());
1956:       assertFalse(node3.isObjectLit());
1957:       assertFalse(node3.isFunction());
1958:       assertFalse(node3.isFalse());
1959:       assertFalse(node3.isContinue());
1960:       assertFalse(node3.isCast());
1961:       
1962:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
1963:       assertNotNull(node_SideEffectFlags0);
1964:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1965:       assertEquals(0, node_SideEffectFlags0.valueOf());
1966:       
1967:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1968:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1969:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1970:       assertNotNull(node_SideEffectFlags1);
1971:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1972:       assertEquals(0, node_SideEffectFlags0.valueOf());
1973:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1974:       assertEquals(0, node_SideEffectFlags1.valueOf());
1975:       
1976:       Node node5 = null;
1977:       try {
1978:         node5 = new Node(147, node1);
1979:         fail("Expecting exception: IllegalArgumentException");
1980:       
1981:       } catch(IllegalArgumentException e) {
1982:          //
1983:          // new child has existing parent
1984:          //
1985:          verifyException("com.google.common.base.Preconditions", e);
1986:       }
1987:   }
1988: }
RegularFileObject[/tmp/EvoSuite_65_1628161098098/com/google/javascript/rhino/Node_65_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:58:18 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_65_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_65_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.EmptyImmutableSet",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_65_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Preconditions",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.collect.ImmutableSet",
339:       "com.google.common.collect.EmptyImmutableSet",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
346:       "com.google.common.collect.Sets",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.JSTypeExpression",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.common.collect.Iterables",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator"
366:     );
367:   }
368: }

[MASTER] 10:58:18.732 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("{NM3z!-nN4#l-HP");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertNotNull(node0);
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());

Node node1 = new Node(0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());

Node node2 = Node.newNumber((double) 37, (-4014), (-246));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabelName());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isOr());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isNew());
assertFalse(node2.isNull());
assertFalse(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());

Node node3 = node1.srcrefTree(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertSame(node1, node3);
assertSame(node3, node1);
assertNotNull(node3);
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isString());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isWith());
assertEquals(0, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isEmpty());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isLabel());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isReturn());
assertFalse(node3.isNull());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isRegExp());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());

Node node4 = Node.newNumber((double) 30, 0, 12);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertNotSame(node4, node2);
assertNotNull(node4);
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertEquals(0, node4.getChildCount());
assertEquals(0, node4.getLineno());
assertFalse(node4.isCatch());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isNew());
assertFalse(node4.isVoid());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVar());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertFalse(node4.isRegExp());
assertFalse(node4.isTry());
assertEquals(39, node4.getType());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.isThrow());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertEquals(12, node4.getCharno());
assertFalse(node4.isWith());
assertFalse(node4.isBreak());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isInc());
assertFalse(node4.isExprResult());
assertFalse(node4.isIn());
assertFalse(node4.isTypeOf());
assertFalse(node4.isOr());
assertFalse(node4.isDec());
assertFalse(node4.isReturn());
assertFalse(node4.isDelProp());
assertFalse(node4.hasChildren());
assertFalse(node4.isContinue());
assertFalse(node4.isAssign());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.isDebugger());
assertEquals(12, node4.getSourcePosition());
assertFalse(node4.isWhile());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertTrue(node4.isNumber());
assertFalse(node4.isString());

Iterable<Node> iterable0 = node4.children();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertNotSame(node4, node2);
assertNotNull(iterable0);
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertEquals(0, node4.getChildCount());
assertEquals(0, node4.getLineno());
assertFalse(node4.isCatch());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isNew());
assertFalse(node4.isVoid());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVar());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertFalse(node4.isRegExp());
assertFalse(node4.isTry());
assertEquals(39, node4.getType());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.isThrow());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertEquals(12, node4.getCharno());
assertFalse(node4.isWith());
assertFalse(node4.isBreak());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isInc());
assertFalse(node4.isExprResult());
assertFalse(node4.isIn());
assertFalse(node4.isTypeOf());
assertFalse(node4.isOr());
assertFalse(node4.isDec());
assertFalse(node4.isReturn());
assertFalse(node4.isDelProp());
assertFalse(node4.hasChildren());
assertFalse(node4.isContinue());
assertFalse(node4.isAssign());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.isDebugger());
assertEquals(12, node4.getSourcePosition());
assertFalse(node4.isWhile());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertTrue(node4.isNumber());
assertFalse(node4.isString());
assertFalse(iterable0.contains(node2));

boolean boolean0 = node4.isQualifiedName();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertNotSame(node4, node2);
assertFalse(boolean0);
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertEquals(0, node4.getChildCount());
assertEquals(0, node4.getLineno());
assertFalse(node4.isCatch());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isNew());
assertFalse(node4.isVoid());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVar());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertFalse(node4.isRegExp());
assertFalse(node4.isTry());
assertEquals(39, node4.getType());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.isThrow());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertEquals(12, node4.getCharno());
assertFalse(node4.isWith());
assertFalse(node4.isBreak());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isInc());
assertFalse(node4.isExprResult());
assertFalse(node4.isIn());
assertFalse(node4.isTypeOf());
assertFalse(node4.isOr());
assertFalse(node4.isDec());
assertFalse(node4.isReturn());
assertFalse(node4.isDelProp());
assertFalse(node4.hasChildren());
assertFalse(node4.isContinue());
assertFalse(node4.isAssign());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.isDebugger());
assertEquals(12, node4.getSourcePosition());
assertFalse(node4.isWhile());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertTrue(node4.isNumber());
assertFalse(node4.isString());

boolean boolean1 = node0.isOptionalArg();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());

node2.setIsSyntheticBlock(false);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertNotSame(node2, node4);
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabelName());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isOr());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isNew());
assertFalse(node2.isNull());
assertFalse(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());

boolean boolean2 = node4.isQuotedString();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node4, node2);
assertFalse(boolean2);
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertEquals(0, node4.getChildCount());
assertEquals(0, node4.getLineno());
assertFalse(node4.isCatch());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isNew());
assertFalse(node4.isVoid());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVar());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertFalse(node4.isRegExp());
assertFalse(node4.isTry());
assertEquals(39, node4.getType());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.isThrow());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertEquals(12, node4.getCharno());
assertFalse(node4.isWith());
assertFalse(node4.isBreak());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isInc());
assertFalse(node4.isExprResult());
assertFalse(node4.isIn());
assertFalse(node4.isTypeOf());
assertFalse(node4.isOr());
assertFalse(node4.isDec());
assertFalse(node4.isReturn());
assertFalse(node4.isDelProp());
assertFalse(node4.hasChildren());
assertFalse(node4.isContinue());
assertFalse(node4.isAssign());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.isDebugger());
assertEquals(12, node4.getSourcePosition());
assertFalse(node4.isWhile());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertTrue(node4.isNumber());
assertFalse(node4.isString());

boolean boolean3 = node3.isNoSideEffectsCall();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertSame(node1, node3);
assertSame(node3, node1);
assertFalse(boolean3);
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isString());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isWith());
assertEquals(0, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isEmpty());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isLabel());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isReturn());
assertFalse(node3.isNull());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isRegExp());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());

node0.addChildrenToFront(node3);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertSame(node1, node3);
assertSame(node3, node1);
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertTrue(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertTrue(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isString());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isWith());
assertEquals(0, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isEmpty());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isLabel());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isReturn());
assertFalse(node3.isNull());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isRegExp());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

Node node5 = new Node(147, node1);

[MASTER] 10:58:19.154 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_66_1628161098733/com/google/javascript/rhino/Node_66_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_66_1628161098733/com/google/javascript/rhino/Node_66_tmp__ESTest_scaffolding.java]]
[MASTER] 10:58:19.154 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:19.154 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:19.155 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1662
[MASTER] 10:58:19.158 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_66_1628161098733/com/google/javascript/rhino/Node_66_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:58:18 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_66_tmp__ESTest extends Node_66_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       String string0 = "Mk";
22:       Node node0 = Node.newString((-1388), "Mk", 113, (-1388));
23:       assertEquals(37, Node.OPT_ARG_NAME);
24:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
25:       assertEquals(56, Node.CHANGE_TIME);
26:       assertEquals(32, Node.INCRDECR_PROP);
27:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
28:       assertEquals(29, Node.JSDOC_INFO_PROP);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(51, Node.STATIC_SOURCE_FILE);
31:       assertEquals(43, Node.IS_CONSTANT_NAME);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(15, Node.NO_SIDE_EFFECTS);
35:       assertEquals(57, Node.LAST_PROP);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(30, Node.VAR_ARGS_NAME);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
43:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
46:       assertEquals(57, Node.REFLECTED_OBJECT);
47:       assertEquals(55, Node.INFERRED_FUNCTION);
48:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
49:       assertEquals(52, Node.LENGTH);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(50, Node.FREE_CALL);
52:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
53:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
54:       assertEquals(49, Node.DIRECT_EVAL);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
57:       assertEquals(12, Node.COLUMN_BITS);
58:       assertEquals(4095, Node.COLUMN_MASK);
59:       assertNotNull(node0);
60:       assertFalse(node0.isFor());
61:       assertFalse(node0.isEmpty());
62:       assertFalse(node0.isIf());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isTry());
65:       assertFalse(node0.isDelProp());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isRegExp());
68:       assertFalse(node0.isCase());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isParamList());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isString());
74:       assertEquals((-1388), node0.getType());
75:       assertFalse(node0.isGetterDef());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isVar());
78:       assertFalse(node0.isCall());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isName());
81:       assertEquals(0, node0.getChildCount());
82:       assertFalse(node0.isComma());
83:       assertFalse(node0.isDefaultCase());
84:       assertFalse(node0.isAssignAdd());
85:       assertFalse(node0.isDo());
86:       assertFalse(node0.isVoid());
87:       assertFalse(node0.isNew());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isNull());
90:       assertFalse(node0.isTrue());
91:       assertFalse(node0.isOr());
92:       assertFalse(node0.isGetElem());
93:       assertFalse(node0.isCast());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isLabelName());
96:       assertFalse(node0.isLabel());
97:       assertFalse(node0.isReturn());
98:       assertFalse(node0.isExprResult());
99:       assertFalse(node0.isDec());
100:       assertFalse(node0.hasChildren());
101:       assertFalse(node0.isWith());
102:       assertFalse(node0.hasMoreThanOneChild());
103:       assertFalse(node0.isAssign());
104:       assertFalse(node0.isTypeOf());
105:       assertFalse(node0.isContinue());
106:       assertFalse(node0.isAnd());
107:       assertFalse(node0.isWhile());
108:       assertFalse(node0.isGetProp());
109:       assertFalse(node0.isScript());
110:       assertFalse(node0.isNumber());
111:       assertEquals((-1), node0.getSourcePosition());
112:       assertFalse(node0.isNot());
113:       assertFalse(node0.isObjectLit());
114:       assertFalse(node0.isThrow());
115:       assertFalse(node0.isFalse());
116:       assertFalse(node0.isThis());
117:       assertFalse(node0.isBlock());
118:       assertFalse(node0.isHook());
119:       assertFalse(node0.isInstanceOf());
120:       assertFalse(node0.isCatch());
121:       assertEquals((-1), node0.getLineno());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isNE());
124:       assertFalse(node0.isInc());
125:       assertFalse(node0.isIn());
126:       
127:       Node node1 = Node.newNumber((double) 16);
128:       assertEquals(12, Node.COLUMN_BITS);
129:       assertEquals(57, Node.LAST_PROP);
130:       assertEquals(32, Node.INCRDECR_PROP);
131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
132:       assertEquals(49, Node.DIRECT_EVAL);
133:       assertEquals(1, Node.DECR_FLAG);
134:       assertEquals(37, Node.OPT_ARG_NAME);
135:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
136:       assertEquals(47, Node.IS_DISPATCHER);
137:       assertEquals(2, Node.POST_FLAG);
138:       assertEquals(30, Node.VAR_ARGS_NAME);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
144:       assertEquals(48, Node.DIRECTIVES);
145:       assertEquals(8, Node.FLAG_NO_THROWS);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(56, Node.CHANGE_TIME);
149:       assertEquals(52, Node.LENGTH);
150:       assertEquals(57, Node.REFLECTED_OBJECT);
151:       assertEquals(36, Node.QUOTED_PROP);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(4095, Node.COLUMN_MASK);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
156:       assertEquals(40, Node.ORIGINALNAME_PROP);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(54, Node.SLASH_V);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(50, Node.FREE_CALL);
163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
164:       assertFalse(node1.equals((Object)node0));
165:       assertNotNull(node1);
166:       assertFalse(node1.isLabel());
167:       assertFalse(node1.isAssignAdd());
168:       assertFalse(node1.isReturn());
169:       assertEquals((-1), node1.getLineno());
170:       assertFalse(node1.isLabelName());
171:       assertEquals((-1), node1.getSourcePosition());
172:       assertFalse(node1.isOr());
173:       assertFalse(node1.isAdd());
174:       assertFalse(node1.isNew());
175:       assertFalse(node1.isDo());
176:       assertFalse(node1.isContinue());
177:       assertFalse(node1.isVar());
178:       assertFalse(node1.isCast());
179:       assertFalse(node1.isGetProp());
180:       assertFalse(node1.isBreak());
181:       assertFalse(node1.isName());
182:       assertFalse(node1.isAnd());
183:       assertFalse(node1.isNull());
184:       assertFalse(node1.isDebugger());
185:       assertFalse(node1.isObjectLit());
186:       assertFalse(node1.isNot());
187:       assertFalse(node1.isTrue());
188:       assertFalse(node1.isExprResult());
189:       assertFalse(node1.isVoid());
190:       assertFalse(node1.isGetElem());
191:       assertFalse(node1.isWhile());
192:       assertFalse(node1.isCall());
193:       assertFalse(node1.isDec());
194:       assertFalse(node1.isTypeOf());
195:       assertFalse(node1.hasChildren());
196:       assertFalse(node1.isComma());
197:       assertFalse(node1.isAssign());
198:       assertFalse(node1.isNE());
199:       assertFalse(node1.isIf());
200:       assertTrue(node1.isNumber());
201:       assertFalse(node1.isDelProp());
202:       assertFalse(node1.isCase());
203:       assertFalse(node1.isString());
204:       assertFalse(node1.isEmpty());
205:       assertFalse(node1.isIn());
206:       assertFalse(node1.isGetterDef());
207:       assertEquals((-1), node1.getCharno());
208:       assertFalse(node1.isInc());
209:       assertFalse(node1.isArrayLit());
210:       assertFalse(node1.isSwitch());
211:       assertFalse(node1.isDefaultCase());
212:       assertFalse(node1.isFalse());
213:       assertFalse(node1.isThrow());
214:       assertFalse(node1.isFunction());
215:       assertEquals(0, node1.getChildCount());
216:       assertFalse(node1.isParamList());
217:       assertFalse(node1.isThis());
218:       assertFalse(node1.isSetterDef());
219:       assertFalse(node1.isStringKey());
220:       assertFalse(node1.isBlock());
221:       assertFalse(node1.isScript());
222:       assertFalse(node1.hasOneChild());
223:       assertFalse(node1.isTry());
224:       assertEquals(39, node1.getType());
225:       assertFalse(node1.isWith());
226:       assertFalse(node1.isFor());
227:       assertFalse(node1.isCatch());
228:       assertFalse(node1.isHook());
229:       assertFalse(node1.isRegExp());
230:       assertFalse(node1.isInstanceOf());
231:       assertFalse(node1.hasMoreThanOneChild());
232:       
233:       Node node2 = new Node(1524, node0, node0, node0);
234:       assertEquals(37, Node.OPT_ARG_NAME);
235:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
236:       assertEquals(56, Node.CHANGE_TIME);
237:       assertEquals(32, Node.INCRDECR_PROP);
238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
239:       assertEquals(29, Node.JSDOC_INFO_PROP);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
242:       assertEquals(43, Node.IS_CONSTANT_NAME);
243:       assertEquals(53, Node.INPUT_ID);
244:       assertEquals(54, Node.SLASH_V);
245:       assertEquals(15, Node.NO_SIDE_EFFECTS);
246:       assertEquals(57, Node.LAST_PROP);
247:       assertEquals(40, Node.ORIGINALNAME_PROP);
248:       assertEquals(47, Node.IS_DISPATCHER);
249:       assertEquals(2, Node.POST_FLAG);
250:       assertEquals(30, Node.VAR_ARGS_NAME);
251:       assertEquals(8, Node.FLAG_NO_THROWS);
252:       assertEquals(39, Node.EMPTY_BLOCK);
253:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
254:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
255:       assertEquals(48, Node.DIRECTIVES);
256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
257:       assertEquals(57, Node.REFLECTED_OBJECT);
258:       assertEquals(55, Node.INFERRED_FUNCTION);
259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
260:       assertEquals(52, Node.LENGTH);
261:       assertEquals(36, Node.QUOTED_PROP);
262:       assertEquals(50, Node.FREE_CALL);
263:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
264:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
265:       assertEquals(49, Node.DIRECT_EVAL);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(12, Node.COLUMN_BITS);
269:       assertEquals(4095, Node.COLUMN_MASK);
270:       assertEquals(37, Node.OPT_ARG_NAME);
271:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
272:       assertEquals(56, Node.CHANGE_TIME);
273:       assertEquals(32, Node.INCRDECR_PROP);
274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
275:       assertEquals(12, Node.COLUMN_BITS);
276:       assertEquals(47, Node.IS_DISPATCHER);
277:       assertEquals(2, Node.POST_FLAG);
278:       assertEquals(30, Node.VAR_ARGS_NAME);
279:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
280:       assertEquals(43, Node.IS_CONSTANT_NAME);
281:       assertEquals(54, Node.SLASH_V);
282:       assertEquals(1, Node.DECR_FLAG);
283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
284:       assertEquals(46, Node.IS_NAMESPACE);
285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
286:       assertEquals(50, Node.FREE_CALL);
287:       assertEquals(8, Node.FLAG_NO_THROWS);
288:       assertEquals(39, Node.EMPTY_BLOCK);
289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
290:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
291:       assertEquals(48, Node.DIRECTIVES);
292:       assertEquals(40, Node.ORIGINALNAME_PROP);
293:       assertEquals(4095, Node.COLUMN_MASK);
294:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
295:       assertEquals(53, Node.INPUT_ID);
296:       assertEquals(15, Node.NO_SIDE_EFFECTS);
297:       assertEquals(57, Node.LAST_PROP);
298:       assertEquals(49, Node.DIRECT_EVAL);
299:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
300:       assertEquals(57, Node.REFLECTED_OBJECT);
301:       assertEquals(55, Node.INFERRED_FUNCTION);
302:       assertEquals(29, Node.JSDOC_INFO_PROP);
303:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
304:       assertEquals(52, Node.LENGTH);
305:       assertEquals(36, Node.QUOTED_PROP);
306:       assertFalse(node0.equals((Object)node1));
307:       assertFalse(node2.equals((Object)node1));
308:       assertFalse(node2.equals((Object)node0));
309:       assertNotNull(node2);
310:       assertFalse(node0.isFor());
311:       assertFalse(node0.isEmpty());
312:       assertFalse(node0.isIf());
313:       assertFalse(node0.isArrayLit());
314:       assertFalse(node0.isTry());
315:       assertFalse(node0.isDelProp());
316:       assertFalse(node0.isFunction());
317:       assertFalse(node0.isRegExp());
318:       assertFalse(node0.isCase());
319:       assertFalse(node0.isSwitch());
320:       assertFalse(node0.isParamList());
321:       assertEquals((-1), node0.getCharno());
322:       assertFalse(node0.isDebugger());
323:       assertFalse(node0.isString());
324:       assertEquals((-1388), node0.getType());
325:       assertFalse(node0.isGetterDef());
326:       assertFalse(node0.isStringKey());
327:       assertFalse(node0.isVar());
328:       assertFalse(node0.isCall());
329:       assertFalse(node0.isBreak());
330:       assertFalse(node0.isName());
331:       assertEquals(0, node0.getChildCount());
332:       assertFalse(node0.isComma());
333:       assertFalse(node0.isDefaultCase());
334:       assertFalse(node0.isAssignAdd());
335:       assertFalse(node0.isDo());
336:       assertFalse(node0.isVoid());
337:       assertFalse(node0.isNew());
338:       assertFalse(node0.isAdd());
339:       assertFalse(node0.isNull());
340:       assertFalse(node0.isTrue());
341:       assertFalse(node0.isOr());
342:       assertFalse(node0.isGetElem());
343:       assertFalse(node0.isCast());
344:       assertFalse(node0.hasOneChild());
345:       assertFalse(node0.isLabelName());
346:       assertFalse(node0.isLabel());
347:       assertFalse(node0.isReturn());
348:       assertFalse(node0.isExprResult());
349:       assertFalse(node0.isDec());
350:       assertFalse(node0.hasChildren());
351:       assertFalse(node0.isWith());
352:       assertFalse(node0.hasMoreThanOneChild());
353:       assertFalse(node0.isAssign());
354:       assertFalse(node0.isTypeOf());
355:       assertFalse(node0.isContinue());
356:       assertFalse(node0.isAnd());
357:       assertFalse(node0.isWhile());
358:       assertFalse(node0.isGetProp());
359:       assertFalse(node0.isScript());
360:       assertFalse(node0.isNumber());
361:       assertEquals((-1), node0.getSourcePosition());
362:       assertFalse(node0.isNot());
363:       assertFalse(node0.isObjectLit());
364:       assertFalse(node0.isThrow());
365:       assertFalse(node0.isFalse());
366:       assertFalse(node0.isThis());
367:       assertFalse(node0.isBlock());
368:       assertFalse(node0.isHook());
369:       assertFalse(node0.isInstanceOf());
370:       assertFalse(node0.isCatch());
371:       assertEquals((-1), node0.getLineno());
372:       assertFalse(node0.isSetterDef());
373:       assertFalse(node0.isNE());
374:       assertFalse(node0.isInc());
375:       assertFalse(node0.isIn());
376:       assertTrue(node2.hasOneChild());
377:       assertFalse(node2.isFor());
378:       assertFalse(node2.isEmpty());
379:       assertFalse(node2.isIf());
380:       assertFalse(node2.isArrayLit());
381:       assertFalse(node2.isTry());
382:       assertFalse(node2.isDelProp());
383:       assertFalse(node2.isDebugger());
384:       assertFalse(node2.isNE());
385:       assertFalse(node2.isTrue());
386:       assertFalse(node2.isIn());
387:       assertFalse(node2.isGetterDef());
388:       assertFalse(node2.isCase());
389:       assertFalse(node2.isCatch());
390:       assertFalse(node2.isVoid());
391:       assertTrue(node2.hasChildren());
392:       assertFalse(node2.isHook());
393:       assertEquals(1, node2.getChildCount());
394:       assertFalse(node2.isRegExp());
395:       assertFalse(node2.isStringKey());
396:       assertFalse(node2.isVar());
397:       assertFalse(node2.isCall());
398:       assertFalse(node2.isBreak());
399:       assertFalse(node2.isName());
400:       assertFalse(node2.isNew());
401:       assertFalse(node2.isParamList());
402:       assertEquals((-1), node2.getCharno());
403:       assertFalse(node2.isAdd());
404:       assertFalse(node2.isNull());
405:       assertEquals(1524, node2.getType());
406:       assertFalse(node2.isDefaultCase());
407:       assertFalse(node2.isDo());
408:       assertFalse(node2.isSwitch());
409:       assertFalse(node2.isLabel());
410:       assertFalse(node2.isAssignAdd());
411:       assertFalse(node2.isGetElem());
412:       assertFalse(node2.isCast());
413:       assertFalse(node2.isLabelName());
414:       assertFalse(node2.isScript());
415:       assertFalse(node2.isNumber());
416:       assertEquals((-1), node2.getSourcePosition());
417:       assertFalse(node2.isOr());
418:       assertFalse(node2.isNot());
419:       assertFalse(node2.isWhile());
420:       assertEquals((-1), node2.getLineno());
421:       assertFalse(node2.isReturn());
422:       assertFalse(node2.isThis());
423:       assertFalse(node2.isBlock());
424:       assertFalse(node2.isExprResult());
425:       assertFalse(node2.isInstanceOf());
426:       assertFalse(node2.isDec());
427:       assertFalse(node2.isWith());
428:       assertFalse(node2.hasMoreThanOneChild());
429:       assertFalse(node2.isAssign());
430:       assertFalse(node2.isComma());
431:       assertFalse(node2.isTypeOf());
432:       assertFalse(node2.isThrow());
433:       assertFalse(node2.isFalse());
434:       assertFalse(node2.isGetProp());
435:       assertFalse(node2.isSetterDef());
436:       assertFalse(node2.isInc());
437:       assertFalse(node2.isString());
438:       assertFalse(node2.isObjectLit());
439:       assertFalse(node2.isContinue());
440:       assertFalse(node2.isAnd());
441:       assertFalse(node2.isFunction());
442:       
443:       Node node3 = Node.newNumber((double) 2);
444:       assertEquals(53, Node.INPUT_ID);
445:       assertEquals(36, Node.QUOTED_PROP);
446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
447:       assertEquals(43, Node.IS_CONSTANT_NAME);
448:       assertEquals(4095, Node.COLUMN_MASK);
449:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
450:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
451:       assertEquals(46, Node.IS_NAMESPACE);
452:       assertEquals(12, Node.COLUMN_BITS);
453:       assertEquals(32, Node.INCRDECR_PROP);
454:       assertEquals(1, Node.DECR_FLAG);
455:       assertEquals(50, Node.FREE_CALL);
456:       assertEquals(51, Node.STATIC_SOURCE_FILE);
457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
458:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
459:       assertEquals(54, Node.SLASH_V);
460:       assertEquals(57, Node.LAST_PROP);
461:       assertEquals(57, Node.REFLECTED_OBJECT);
462:       assertEquals(40, Node.ORIGINALNAME_PROP);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
466:       assertEquals(48, Node.DIRECTIVES);
467:       assertEquals(8, Node.FLAG_NO_THROWS);
468:       assertEquals(39, Node.EMPTY_BLOCK);
469:       assertEquals(2, Node.POST_FLAG);
470:       assertEquals(37, Node.OPT_ARG_NAME);
471:       assertEquals(47, Node.IS_DISPATCHER);
472:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
473:       assertEquals(56, Node.CHANGE_TIME);
474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
475:       assertEquals(15, Node.NO_SIDE_EFFECTS);
476:       assertEquals(55, Node.INFERRED_FUNCTION);
477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
478:       assertEquals(29, Node.JSDOC_INFO_PROP);
479:       assertEquals(52, Node.LENGTH);
480:       assertFalse(node3.equals((Object)node2));
481:       assertFalse(node3.equals((Object)node1));
482:       assertFalse(node3.equals((Object)node0));
483:       assertNotSame(node3, node1);
484:       assertNotNull(node3);
485:       assertFalse(node3.isDefaultCase());
486:       assertFalse(node3.isTrue());
487:       assertFalse(node3.isTry());
488:       assertFalse(node3.isDebugger());
489:       assertFalse(node3.isSetterDef());
490:       assertFalse(node3.isFor());
491:       assertFalse(node3.isName());
492:       assertFalse(node3.isDelProp());
493:       assertFalse(node3.isNull());
494:       assertFalse(node3.isIf());
495:       assertFalse(node3.isNE());
496:       assertFalse(node3.isBlock());
497:       assertFalse(node3.isVoid());
498:       assertFalse(node3.isRegExp());
499:       assertFalse(node3.isCall());
500:       assertFalse(node3.isCatch());
501:       assertFalse(node3.isCase());
502:       assertEquals(39, node3.getType());
503:       assertFalse(node3.isDo());
504:       assertFalse(node3.isSwitch());
505:       assertFalse(node3.isAdd());
506:       assertFalse(node3.isNew());
507:       assertFalse(node3.isAssignAdd());
508:       assertEquals((-1), node3.getCharno());
509:       assertFalse(node3.isOr());
510:       assertFalse(node3.isEmpty());
511:       assertFalse(node3.isGetterDef());
512:       assertFalse(node3.isLabelName());
513:       assertFalse(node3.isVar());
514:       assertFalse(node3.isParamList());
515:       assertFalse(node3.isStringKey());
516:       assertFalse(node3.isLabel());
517:       assertEquals(0, node3.getChildCount());
518:       assertFalse(node3.isArrayLit());
519:       assertFalse(node3.isWith());
520:       assertFalse(node3.isObjectLit());
521:       assertFalse(node3.isNot());
522:       assertFalse(node3.isAnd());
523:       assertFalse(node3.isGetProp());
524:       assertFalse(node3.hasOneChild());
525:       assertFalse(node3.isScript());
526:       assertFalse(node3.isGetElem());
527:       assertFalse(node3.isBreak());
528:       assertFalse(node3.isAssign());
529:       assertFalse(node3.isDec());
530:       assertFalse(node3.isThis());
531:       assertFalse(node3.isHook());
532:       assertFalse(node3.hasChildren());
533:       assertFalse(node3.isReturn());
534:       assertEquals((-1), node3.getLineno());
535:       assertFalse(node3.isComma());
536:       assertFalse(node3.isTypeOf());
537:       assertFalse(node3.hasMoreThanOneChild());
538:       assertFalse(node3.isExprResult());
539:       assertFalse(node3.isInstanceOf());
540:       assertFalse(node3.isWhile());
541:       assertTrue(node3.isNumber());
542:       assertFalse(node3.isIn());
543:       assertFalse(node3.isInc());
544:       assertFalse(node3.isString());
545:       assertFalse(node3.isFalse());
546:       assertEquals((-1), node3.getSourcePosition());
547:       assertFalse(node3.isThrow());
548:       assertFalse(node3.isFunction());
549:       assertFalse(node3.isContinue());
550:       assertFalse(node3.isCast());
551:       
552:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node3);
553:       assertEquals(37, Node.OPT_ARG_NAME);
554:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
555:       assertEquals(56, Node.CHANGE_TIME);
556:       assertEquals(32, Node.INCRDECR_PROP);
557:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
558:       assertEquals(29, Node.JSDOC_INFO_PROP);
559:       assertEquals(46, Node.IS_NAMESPACE);
560:       assertEquals(51, Node.STATIC_SOURCE_FILE);
561:       assertEquals(43, Node.IS_CONSTANT_NAME);
562:       assertEquals(53, Node.INPUT_ID);
563:       assertEquals(54, Node.SLASH_V);
564:       assertEquals(15, Node.NO_SIDE_EFFECTS);
565:       assertEquals(57, Node.LAST_PROP);
566:       assertEquals(40, Node.ORIGINALNAME_PROP);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(2, Node.POST_FLAG);
569:       assertEquals(30, Node.VAR_ARGS_NAME);
570:       assertEquals(8, Node.FLAG_NO_THROWS);
571:       assertEquals(39, Node.EMPTY_BLOCK);
572:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
573:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
574:       assertEquals(48, Node.DIRECTIVES);
575:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
576:       assertEquals(57, Node.REFLECTED_OBJECT);
577:       assertEquals(55, Node.INFERRED_FUNCTION);
578:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
579:       assertEquals(52, Node.LENGTH);
580:       assertEquals(36, Node.QUOTED_PROP);
581:       assertEquals(50, Node.FREE_CALL);
582:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
583:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
584:       assertEquals(49, Node.DIRECT_EVAL);
585:       assertEquals(1, Node.DECR_FLAG);
586:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
587:       assertEquals(12, Node.COLUMN_BITS);
588:       assertEquals(4095, Node.COLUMN_MASK);
589:       assertEquals(53, Node.INPUT_ID);
590:       assertEquals(36, Node.QUOTED_PROP);
591:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
592:       assertEquals(43, Node.IS_CONSTANT_NAME);
593:       assertEquals(4095, Node.COLUMN_MASK);
594:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
595:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
596:       assertEquals(46, Node.IS_NAMESPACE);
597:       assertEquals(12, Node.COLUMN_BITS);
598:       assertEquals(32, Node.INCRDECR_PROP);
599:       assertEquals(1, Node.DECR_FLAG);
600:       assertEquals(50, Node.FREE_CALL);
601:       assertEquals(51, Node.STATIC_SOURCE_FILE);
602:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
603:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
604:       assertEquals(54, Node.SLASH_V);
605:       assertEquals(57, Node.LAST_PROP);
606:       assertEquals(57, Node.REFLECTED_OBJECT);
607:       assertEquals(40, Node.ORIGINALNAME_PROP);
608:       assertEquals(30, Node.VAR_ARGS_NAME);
609:       assertEquals(49, Node.DIRECT_EVAL);
610:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
611:       assertEquals(48, Node.DIRECTIVES);
612:       assertEquals(8, Node.FLAG_NO_THROWS);
613:       assertEquals(39, Node.EMPTY_BLOCK);
614:       assertEquals(2, Node.POST_FLAG);
615:       assertEquals(37, Node.OPT_ARG_NAME);
616:       assertEquals(47, Node.IS_DISPATCHER);
617:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
618:       assertEquals(56, Node.CHANGE_TIME);
619:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
620:       assertEquals(15, Node.NO_SIDE_EFFECTS);
621:       assertEquals(55, Node.INFERRED_FUNCTION);
622:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
623:       assertEquals(29, Node.JSDOC_INFO_PROP);
624:       assertEquals(52, Node.LENGTH);
625:       assertFalse(node0.equals((Object)node2));
626:       assertFalse(node0.equals((Object)node1));
627:       assertFalse(node0.equals((Object)node3));
628:       assertFalse(node3.equals((Object)node2));
629:       assertFalse(node3.equals((Object)node1));
630:       assertFalse(node3.equals((Object)node0));
631:       assertNotSame(node3, node1);
632:       assertNotNull(node_NodeMismatch0);
633:       assertFalse(node0.isFor());
634:       assertFalse(node0.isEmpty());
635:       assertFalse(node0.isIf());
636:       assertFalse(node0.isArrayLit());
637:       assertFalse(node0.isTry());
638:       assertFalse(node0.isDelProp());
639:       assertFalse(node0.isFunction());
640:       assertFalse(node0.isRegExp());
641:       assertFalse(node0.isCase());
642:       assertFalse(node0.isSwitch());
643:       assertFalse(node0.isParamList());
644:       assertEquals((-1), node0.getCharno());
645:       assertFalse(node0.isDebugger());
646:       assertFalse(node0.isString());
647:       assertEquals((-1388), node0.getType());
648:       assertFalse(node0.isGetterDef());
649:       assertFalse(node0.isStringKey());
650:       assertFalse(node0.isVar());
651:       assertFalse(node0.isCall());
652:       assertFalse(node0.isBreak());
653:       assertFalse(node0.isName());
654:       assertEquals(0, node0.getChildCount());
655:       assertFalse(node0.isComma());
656:       assertFalse(node0.isDefaultCase());
657:       assertFalse(node0.isAssignAdd());
658:       assertFalse(node0.isDo());
659:       assertFalse(node0.isVoid());
660:       assertFalse(node0.isNew());
661:       assertFalse(node0.isAdd());
662:       assertFalse(node0.isNull());
663:       assertFalse(node0.isTrue());
664:       assertFalse(node0.isOr());
665:       assertFalse(node0.isGetElem());
666:       assertFalse(node0.isCast());
667:       assertFalse(node0.hasOneChild());
668:       assertFalse(node0.isLabelName());
669:       assertFalse(node0.isLabel());
670:       assertFalse(node0.isReturn());
671:       assertFalse(node0.isExprResult());
672:       assertFalse(node0.isDec());
673:       assertFalse(node0.hasChildren());
674:       assertFalse(node0.isWith());
675:       assertFalse(node0.hasMoreThanOneChild());
676:       assertFalse(node0.isAssign());
677:       assertFalse(node0.isTypeOf());
678:       assertFalse(node0.isContinue());
679:       assertFalse(node0.isAnd());
680:       assertFalse(node0.isWhile());
681:       assertFalse(node0.isGetProp());
682:       assertFalse(node0.isScript());
683:       assertFalse(node0.isNumber());
684:       assertEquals((-1), node0.getSourcePosition());
685:       assertFalse(node0.isNot());
686:       assertFalse(node0.isObjectLit());
687:       assertFalse(node0.isThrow());
688:       assertFalse(node0.isFalse());
689:       assertFalse(node0.isThis());
690:       assertFalse(node0.isBlock());
691:       assertFalse(node0.isHook());
692:       assertFalse(node0.isInstanceOf());
693:       assertFalse(node0.isCatch());
694:       assertEquals((-1), node0.getLineno());
695:       assertFalse(node0.isSetterDef());
696:       assertFalse(node0.isNE());
697:       assertFalse(node0.isInc());
698:       assertFalse(node0.isIn());
699:       assertFalse(node3.isDefaultCase());
700:       assertFalse(node3.isTrue());
701:       assertFalse(node3.isTry());
702:       assertFalse(node3.isDebugger());
703:       assertFalse(node3.isSetterDef());
704:       assertFalse(node3.isFor());
705:       assertFalse(node3.isName());
706:       assertFalse(node3.isDelProp());
707:       assertFalse(node3.isNull());
708:       assertFalse(node3.isIf());
709:       assertFalse(node3.isNE());
710:       assertFalse(node3.isBlock());
711:       assertFalse(node3.isVoid());
712:       assertFalse(node3.isRegExp());
713:       assertFalse(node3.isCall());
714:       assertFalse(node3.isCatch());
715:       assertFalse(node3.isCase());
716:       assertEquals(39, node3.getType());
717:       assertFalse(node3.isDo());
718:       assertFalse(node3.isSwitch());
719:       assertFalse(node3.isAdd());
720:       assertFalse(node3.isNew());
721:       assertFalse(node3.isAssignAdd());
722:       assertEquals((-1), node3.getCharno());
723:       assertFalse(node3.isOr());
724:       assertFalse(node3.isEmpty());
725:       assertFalse(node3.isGetterDef());
726:       assertFalse(node3.isLabelName());
727:       assertFalse(node3.isVar());
728:       assertFalse(node3.isParamList());
729:       assertFalse(node3.isStringKey());
730:       assertFalse(node3.isLabel());
731:       assertEquals(0, node3.getChildCount());
732:       assertFalse(node3.isArrayLit());
733:       assertFalse(node3.isWith());
734:       assertFalse(node3.isObjectLit());
735:       assertFalse(node3.isNot());
736:       assertFalse(node3.isAnd());
737:       assertFalse(node3.isGetProp());
738:       assertFalse(node3.hasOneChild());
739:       assertFalse(node3.isScript());
740:       assertFalse(node3.isGetElem());
741:       assertFalse(node3.isBreak());
742:       assertFalse(node3.isAssign());
743:       assertFalse(node3.isDec());
744:       assertFalse(node3.isThis());
745:       assertFalse(node3.isHook());
746:       assertFalse(node3.hasChildren());
747:       assertFalse(node3.isReturn());
748:       assertEquals((-1), node3.getLineno());
749:       assertFalse(node3.isComma());
750:       assertFalse(node3.isTypeOf());
751:       assertFalse(node3.hasMoreThanOneChild());
752:       assertFalse(node3.isExprResult());
753:       assertFalse(node3.isInstanceOf());
754:       assertFalse(node3.isWhile());
755:       assertTrue(node3.isNumber());
756:       assertFalse(node3.isIn());
757:       assertFalse(node3.isInc());
758:       assertFalse(node3.isString());
759:       assertFalse(node3.isFalse());
760:       assertEquals((-1), node3.getSourcePosition());
761:       assertFalse(node3.isThrow());
762:       assertFalse(node3.isFunction());
763:       assertFalse(node3.isContinue());
764:       assertFalse(node3.isCast());
765:       
766:       Node node4 = Node.newNumber((double) 39, 52, 4);
767:       assertEquals(30, Node.VAR_ARGS_NAME);
768:       assertEquals(57, Node.LAST_PROP);
769:       assertEquals(1, Node.DECR_FLAG);
770:       assertEquals(49, Node.DIRECT_EVAL);
771:       assertEquals(15, Node.NO_SIDE_EFFECTS);
772:       assertEquals(32, Node.INCRDECR_PROP);
773:       assertEquals(47, Node.IS_DISPATCHER);
774:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
775:       assertEquals(12, Node.COLUMN_BITS);
776:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
777:       assertEquals(8, Node.FLAG_NO_THROWS);
778:       assertEquals(39, Node.EMPTY_BLOCK);
779:       assertEquals(37, Node.OPT_ARG_NAME);
780:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
781:       assertEquals(29, Node.JSDOC_INFO_PROP);
782:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
783:       assertEquals(52, Node.LENGTH);
784:       assertEquals(48, Node.DIRECTIVES);
785:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
786:       assertEquals(56, Node.CHANGE_TIME);
787:       assertEquals(57, Node.REFLECTED_OBJECT);
788:       assertEquals(36, Node.QUOTED_PROP);
789:       assertEquals(55, Node.INFERRED_FUNCTION);
790:       assertEquals(4095, Node.COLUMN_MASK);
791:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
792:       assertEquals(53, Node.INPUT_ID);
793:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
794:       assertEquals(2, Node.POST_FLAG);
795:       assertEquals(50, Node.FREE_CALL);
796:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
797:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
798:       assertEquals(40, Node.ORIGINALNAME_PROP);
799:       assertEquals(51, Node.STATIC_SOURCE_FILE);
800:       assertEquals(43, Node.IS_CONSTANT_NAME);
801:       assertEquals(46, Node.IS_NAMESPACE);
802:       assertEquals(54, Node.SLASH_V);
803:       assertFalse(node4.equals((Object)node2));
804:       assertFalse(node4.equals((Object)node1));
805:       assertFalse(node4.equals((Object)node0));
806:       assertFalse(node4.equals((Object)node3));
807:       assertNotSame(node4, node1);
808:       assertNotSame(node4, node3);
809:       assertNotNull(node4);
810:       assertFalse(node4.isOr());
811:       assertFalse(node4.isAssignAdd());
812:       assertFalse(node4.hasMoreThanOneChild());
813:       assertFalse(node4.isContinue());
814:       assertFalse(node4.isLabelName());
815:       assertFalse(node4.isNew());
816:       assertFalse(node4.isAdd());
817:       assertFalse(node4.isCast());
818:       assertFalse(node4.isDo());
819:       assertFalse(node4.isLabel());
820:       assertFalse(node4.isVar());
821:       assertFalse(node4.isObjectLit());
822:       assertFalse(node4.isGetProp());
823:       assertFalse(node4.isBreak());
824:       assertFalse(node4.isNot());
825:       assertFalse(node4.isName());
826:       assertFalse(node4.isAnd());
827:       assertFalse(node4.isDebugger());
828:       assertFalse(node4.isNull());
829:       assertFalse(node4.isTrue());
830:       assertEquals(212996, node4.getSourcePosition());
831:       assertFalse(node4.isVoid());
832:       assertFalse(node4.isGetElem());
833:       assertFalse(node4.isCall());
834:       assertFalse(node4.isExprResult());
835:       assertFalse(node4.hasChildren());
836:       assertFalse(node4.isWhile());
837:       assertFalse(node4.isDec());
838:       assertFalse(node4.isAssign());
839:       assertFalse(node4.isTypeOf());
840:       assertFalse(node4.isComma());
841:       assertFalse(node4.isReturn());
842:       assertFalse(node4.isIn());
843:       assertTrue(node4.isNumber());
844:       assertFalse(node4.isCase());
845:       assertFalse(node4.isIf());
846:       assertFalse(node4.isGetterDef());
847:       assertFalse(node4.isDelProp());
848:       assertFalse(node4.isString());
849:       assertFalse(node4.isSwitch());
850:       assertFalse(node4.isNE());
851:       assertFalse(node4.isArrayLit());
852:       assertFalse(node4.isEmpty());
853:       assertFalse(node4.isInc());
854:       assertFalse(node4.isDefaultCase());
855:       assertFalse(node4.isFunction());
856:       assertFalse(node4.isFalse());
857:       assertFalse(node4.isThrow());
858:       assertEquals(0, node4.getChildCount());
859:       assertFalse(node4.isInstanceOf());
860:       assertFalse(node4.isCatch());
861:       assertFalse(node4.isSetterDef());
862:       assertEquals(52, node4.getLineno());
863:       assertEquals(4, node4.getCharno());
864:       assertFalse(node4.isStringKey());
865:       assertFalse(node4.isParamList());
866:       assertFalse(node4.hasOneChild());
867:       assertFalse(node4.isTry());
868:       assertFalse(node4.isScript());
869:       assertFalse(node4.isWith());
870:       assertFalse(node4.isRegExp());
871:       assertEquals(39, node4.getType());
872:       assertFalse(node4.isFor());
873:       assertFalse(node4.isThis());
874:       assertFalse(node4.isBlock());
875:       assertFalse(node4.isHook());
876:       
877:       Node node5 = Node.newNumber(0.0, 12, 4);
878:       assertEquals(48, Node.DIRECTIVES);
879:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
880:       assertEquals(8, Node.FLAG_NO_THROWS);
881:       assertEquals(39, Node.EMPTY_BLOCK);
882:       assertEquals(4095, Node.COLUMN_MASK);
883:       assertEquals(55, Node.INFERRED_FUNCTION);
884:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
885:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
886:       assertEquals(52, Node.LENGTH);
887:       assertEquals(29, Node.JSDOC_INFO_PROP);
888:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
889:       assertEquals(53, Node.INPUT_ID);
890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
891:       assertEquals(49, Node.DIRECT_EVAL);
892:       assertEquals(36, Node.QUOTED_PROP);
893:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
894:       assertEquals(57, Node.REFLECTED_OBJECT);
895:       assertEquals(56, Node.CHANGE_TIME);
896:       assertEquals(32, Node.INCRDECR_PROP);
897:       assertEquals(46, Node.IS_NAMESPACE);
898:       assertEquals(51, Node.STATIC_SOURCE_FILE);
899:       assertEquals(37, Node.OPT_ARG_NAME);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(15, Node.NO_SIDE_EFFECTS);
902:       assertEquals(57, Node.LAST_PROP);
903:       assertEquals(47, Node.IS_DISPATCHER);
904:       assertEquals(2, Node.POST_FLAG);
905:       assertEquals(30, Node.VAR_ARGS_NAME);
906:       assertEquals(1, Node.DECR_FLAG);
907:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
908:       assertEquals(12, Node.COLUMN_BITS);
909:       assertEquals(40, Node.ORIGINALNAME_PROP);
910:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
911:       assertEquals(50, Node.FREE_CALL);
912:       assertEquals(54, Node.SLASH_V);
913:       assertEquals(43, Node.IS_CONSTANT_NAME);
914:       assertFalse(node5.equals((Object)node0));
915:       assertFalse(node5.equals((Object)node1));
916:       assertFalse(node5.equals((Object)node2));
917:       assertFalse(node5.equals((Object)node4));
918:       assertFalse(node5.equals((Object)node3));
919:       assertNotSame(node5, node1);
920:       assertNotSame(node5, node4);
921:       assertNotSame(node5, node3);
922:       assertNotNull(node5);
923:       assertFalse(node5.isBreak());
924:       assertFalse(node5.isComma());
925:       assertFalse(node5.isFalse());
926:       assertFalse(node5.isGetProp());
927:       assertFalse(node5.isObjectLit());
928:       assertFalse(node5.isAnd());
929:       assertFalse(node5.isSwitch());
930:       assertFalse(node5.isInc());
931:       assertFalse(node5.isThrow());
932:       assertFalse(node5.isIf());
933:       assertFalse(node5.isLabelName());
934:       assertFalse(node5.isGetterDef());
935:       assertEquals(49156, node5.getSourcePosition());
936:       assertFalse(node5.isIn());
937:       assertFalse(node5.isArrayLit());
938:       assertFalse(node5.isNE());
939:       assertFalse(node5.isWith());
940:       assertEquals(4, node5.getCharno());
941:       assertFalse(node5.isRegExp());
942:       assertFalse(node5.isCase());
943:       assertFalse(node5.isCatch());
944:       assertFalse(node5.isScript());
945:       assertFalse(node5.hasOneChild());
946:       assertFalse(node5.isHook());
947:       assertFalse(node5.isInstanceOf());
948:       assertFalse(node5.hasMoreThanOneChild());
949:       assertFalse(node5.isTry());
950:       assertFalse(node5.isBlock());
951:       assertEquals(39, node5.getType());
952:       assertFalse(node5.isThis());
953:       assertFalse(node5.isFor());
954:       assertFalse(node5.isSetterDef());
955:       assertFalse(node5.isCall());
956:       assertFalse(node5.isStringKey());
957:       assertFalse(node5.isName());
958:       assertFalse(node5.isParamList());
959:       assertFalse(node5.isNull());
960:       assertFalse(node5.isDefaultCase());
961:       assertFalse(node5.isFunction());
962:       assertFalse(node5.isDo());
963:       assertFalse(node5.isNew());
964:       assertFalse(node5.isContinue());
965:       assertFalse(node5.isAdd());
966:       assertEquals(12, node5.getLineno());
967:       assertEquals(0, node5.getChildCount());
968:       assertFalse(node5.isLabel());
969:       assertFalse(node5.isAssignAdd());
970:       assertFalse(node5.isVar());
971:       assertFalse(node5.isDec());
972:       assertFalse(node5.hasChildren());
973:       assertFalse(node5.isAssign());
974:       assertFalse(node5.isDelProp());
975:       assertFalse(node5.isTypeOf());
976:       assertFalse(node5.isGetElem());
977:       assertFalse(node5.isCast());
978:       assertFalse(node5.isEmpty());
979:       assertFalse(node5.isOr());
980:       assertFalse(node5.isDebugger());
981:       assertFalse(node5.isTrue());
982:       assertFalse(node5.isNot());
983:       assertFalse(node5.isVoid());
984:       assertFalse(node5.isString());
985:       assertFalse(node5.isExprResult());
986:       assertTrue(node5.isNumber());
987:       assertFalse(node5.isReturn());
988:       assertFalse(node5.isWhile());
989:       
990:       Node node6 = node5.srcrefTree(node1);
991:       assertEquals(12, Node.COLUMN_BITS);
992:       assertEquals(57, Node.LAST_PROP);
993:       assertEquals(32, Node.INCRDECR_PROP);
994:       assertEquals(15, Node.NO_SIDE_EFFECTS);
995:       assertEquals(49, Node.DIRECT_EVAL);
996:       assertEquals(1, Node.DECR_FLAG);
997:       assertEquals(37, Node.OPT_ARG_NAME);
998:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
999:       assertEquals(47, Node.IS_DISPATCHER);
1000:       assertEquals(2, Node.POST_FLAG);
1001:       assertEquals(30, Node.VAR_ARGS_NAME);
1002:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1003:       assertEquals(29, Node.JSDOC_INFO_PROP);
1004:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1005:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1006:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1007:       assertEquals(48, Node.DIRECTIVES);
1008:       assertEquals(8, Node.FLAG_NO_THROWS);
1009:       assertEquals(39, Node.EMPTY_BLOCK);
1010:       assertEquals(53, Node.INPUT_ID);
1011:       assertEquals(56, Node.CHANGE_TIME);
1012:       assertEquals(52, Node.LENGTH);
1013:       assertEquals(57, Node.REFLECTED_OBJECT);
1014:       assertEquals(36, Node.QUOTED_PROP);
1015:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1016:       assertEquals(4095, Node.COLUMN_MASK);
1017:       assertEquals(55, Node.INFERRED_FUNCTION);
1018:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1019:       assertEquals(40, Node.ORIGINALNAME_PROP);
1020:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1021:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1022:       assertEquals(54, Node.SLASH_V);
1023:       assertEquals(43, Node.IS_CONSTANT_NAME);
1024:       assertEquals(46, Node.IS_NAMESPACE);
1025:       assertEquals(50, Node.FREE_CALL);
1026:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1027:       assertEquals(48, Node.DIRECTIVES);
1028:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1029:       assertEquals(8, Node.FLAG_NO_THROWS);
1030:       assertEquals(39, Node.EMPTY_BLOCK);
1031:       assertEquals(4095, Node.COLUMN_MASK);
1032:       assertEquals(55, Node.INFERRED_FUNCTION);
1033:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1034:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1035:       assertEquals(52, Node.LENGTH);
1036:       assertEquals(29, Node.JSDOC_INFO_PROP);
1037:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1038:       assertEquals(53, Node.INPUT_ID);
1039:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1040:       assertEquals(49, Node.DIRECT_EVAL);
1041:       assertEquals(36, Node.QUOTED_PROP);
1042:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1043:       assertEquals(57, Node.REFLECTED_OBJECT);
1044:       assertEquals(56, Node.CHANGE_TIME);
1045:       assertEquals(32, Node.INCRDECR_PROP);
1046:       assertEquals(46, Node.IS_NAMESPACE);
1047:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1048:       assertEquals(37, Node.OPT_ARG_NAME);
1049:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1050:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1051:       assertEquals(57, Node.LAST_PROP);
1052:       assertEquals(47, Node.IS_DISPATCHER);
1053:       assertEquals(2, Node.POST_FLAG);
1054:       assertEquals(30, Node.VAR_ARGS_NAME);
1055:       assertEquals(1, Node.DECR_FLAG);
1056:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1057:       assertEquals(12, Node.COLUMN_BITS);
1058:       assertEquals(40, Node.ORIGINALNAME_PROP);
1059:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1060:       assertEquals(50, Node.FREE_CALL);
1061:       assertEquals(54, Node.SLASH_V);
1062:       assertEquals(43, Node.IS_CONSTANT_NAME);
1063:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1064:       assertEquals(43, Node.IS_CONSTANT_NAME);
1065:       assertEquals(53, Node.INPUT_ID);
1066:       assertEquals(36, Node.QUOTED_PROP);
1067:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1068:       assertEquals(4095, Node.COLUMN_MASK);
1069:       assertEquals(48, Node.DIRECTIVES);
1070:       assertEquals(37, Node.OPT_ARG_NAME);
1071:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1072:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1073:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1074:       assertEquals(50, Node.FREE_CALL);
1075:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1076:       assertEquals(12, Node.COLUMN_BITS);
1077:       assertEquals(1, Node.DECR_FLAG);
1078:       assertEquals(32, Node.INCRDECR_PROP);
1079:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1080:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1081:       assertEquals(54, Node.SLASH_V);
1082:       assertEquals(52, Node.LENGTH);
1083:       assertEquals(30, Node.VAR_ARGS_NAME);
1084:       assertEquals(40, Node.ORIGINALNAME_PROP);
1085:       assertEquals(57, Node.REFLECTED_OBJECT);
1086:       assertEquals(46, Node.IS_NAMESPACE);
1087:       assertEquals(49, Node.DIRECT_EVAL);
1088:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1089:       assertEquals(8, Node.FLAG_NO_THROWS);
1090:       assertEquals(39, Node.EMPTY_BLOCK);
1091:       assertEquals(56, Node.CHANGE_TIME);
1092:       assertEquals(47, Node.IS_DISPATCHER);
1093:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1094:       assertEquals(2, Node.POST_FLAG);
1095:       assertEquals(55, Node.INFERRED_FUNCTION);
1096:       assertEquals(29, Node.JSDOC_INFO_PROP);
1097:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1098:       assertEquals(57, Node.LAST_PROP);
1099:       assertFalse(node1.equals((Object)node4));
1100:       assertFalse(node1.equals((Object)node3));
1101:       assertFalse(node1.equals((Object)node5));
1102:       assertFalse(node1.equals((Object)node2));
1103:       assertFalse(node1.equals((Object)node0));
1104:       assertFalse(node5.equals((Object)node0));
1105:       assertFalse(node5.equals((Object)node1));
1106:       assertFalse(node5.equals((Object)node2));
1107:       assertFalse(node5.equals((Object)node4));
1108:       assertFalse(node5.equals((Object)node3));
1109:       assertFalse(node6.equals((Object)node2));
1110:       assertFalse(node6.equals((Object)node0));
1111:       assertFalse(node6.equals((Object)node4));
1112:       assertFalse(node6.equals((Object)node3));
1113:       assertFalse(node6.equals((Object)node1));
1114:       assertNotSame(node1, node4);
1115:       assertNotSame(node1, node3);
1116:       assertNotSame(node1, node5);
1117:       assertNotSame(node1, node6);
1118:       assertNotSame(node5, node1);
1119:       assertNotSame(node5, node4);
1120:       assertSame(node5, node6);
1121:       assertNotSame(node5, node3);
1122:       assertSame(node6, node5);
1123:       assertNotSame(node6, node4);
1124:       assertNotSame(node6, node3);
1125:       assertNotSame(node6, node1);
1126:       assertNotNull(node6);
1127:       assertFalse(node1.isLabel());
1128:       assertFalse(node1.isAssignAdd());
1129:       assertFalse(node1.isReturn());
1130:       assertEquals((-1), node1.getLineno());
1131:       assertFalse(node1.isLabelName());
1132:       assertEquals((-1), node1.getSourcePosition());
1133:       assertFalse(node1.isOr());
1134:       assertFalse(node1.isAdd());
1135:       assertFalse(node1.isNew());
1136:       assertFalse(node1.isDo());
1137:       assertFalse(node1.isContinue());
1138:       assertFalse(node1.isVar());
1139:       assertFalse(node1.isCast());
1140:       assertFalse(node1.isGetProp());
1141:       assertFalse(node1.isBreak());
1142:       assertFalse(node1.isName());
1143:       assertFalse(node1.isAnd());
1144:       assertFalse(node1.isNull());
1145:       assertFalse(node1.isDebugger());
1146:       assertFalse(node1.isObjectLit());
1147:       assertFalse(node1.isNot());
1148:       assertFalse(node1.isTrue());
1149:       assertFalse(node1.isExprResult());
1150:       assertFalse(node1.isVoid());
1151:       assertFalse(node1.isGetElem());
1152:       assertFalse(node1.isWhile());
1153:       assertFalse(node1.isCall());
1154:       assertFalse(node1.isDec());
1155:       assertFalse(node1.isTypeOf());
1156:       assertFalse(node1.hasChildren());
1157:       assertFalse(node1.isComma());
1158:       assertFalse(node1.isAssign());
1159:       assertFalse(node1.isNE());
1160:       assertFalse(node1.isIf());
1161:       assertTrue(node1.isNumber());
1162:       assertFalse(node1.isDelProp());
1163:       assertFalse(node1.isCase());
1164:       assertFalse(node1.isString());
1165:       assertFalse(node1.isEmpty());
1166:       assertFalse(node1.isIn());
1167:       assertFalse(node1.isGetterDef());
1168:       assertEquals((-1), node1.getCharno());
1169:       assertFalse(node1.isInc());
1170:       assertFalse(node1.isArrayLit());
1171:       assertFalse(node1.isSwitch());
1172:       assertFalse(node1.isDefaultCase());
1173:       assertFalse(node1.isFalse());
1174:       assertFalse(node1.isThrow());
1175:       assertFalse(node1.isFunction());
1176:       assertEquals(0, node1.getChildCount());
1177:       assertFalse(node1.isParamList());
1178:       assertFalse(node1.isThis());
1179:       assertFalse(node1.isSetterDef());
1180:       assertFalse(node1.isStringKey());
1181:       assertFalse(node1.isBlock());
1182:       assertFalse(node1.isScript());
1183:       assertFalse(node1.hasOneChild());
1184:       assertFalse(node1.isTry());
1185:       assertEquals(39, node1.getType());
1186:       assertFalse(node1.isWith());
1187:       assertFalse(node1.isFor());
1188:       assertFalse(node1.isCatch());
1189:       assertFalse(node1.isHook());
1190:       assertFalse(node1.isRegExp());
1191:       assertFalse(node1.isInstanceOf());
1192:       assertFalse(node1.hasMoreThanOneChild());
1193:       assertFalse(node5.isBreak());
1194:       assertFalse(node5.isComma());
1195:       assertFalse(node5.isFalse());
1196:       assertFalse(node5.isGetProp());
1197:       assertFalse(node5.isObjectLit());
1198:       assertEquals((-1), node5.getCharno());
1199:       assertFalse(node5.isAnd());
1200:       assertFalse(node5.isSwitch());
1201:       assertFalse(node5.isInc());
1202:       assertFalse(node5.isThrow());
1203:       assertFalse(node5.isIf());
1204:       assertFalse(node5.isLabelName());
1205:       assertFalse(node5.isGetterDef());
1206:       assertFalse(node5.isIn());
1207:       assertFalse(node5.isArrayLit());
1208:       assertEquals((-1), node5.getLineno());
1209:       assertFalse(node5.isNE());
1210:       assertFalse(node5.isWith());
1211:       assertFalse(node5.isRegExp());
1212:       assertFalse(node5.isCase());
1213:       assertFalse(node5.isCatch());
1214:       assertFalse(node5.isScript());
1215:       assertFalse(node5.hasOneChild());
1216:       assertFalse(node5.isHook());
1217:       assertFalse(node5.isInstanceOf());
1218:       assertFalse(node5.hasMoreThanOneChild());
1219:       assertFalse(node5.isTry());
1220:       assertFalse(node5.isBlock());
1221:       assertEquals(39, node5.getType());
1222:       assertFalse(node5.isThis());
1223:       assertFalse(node5.isFor());
1224:       assertFalse(node5.isSetterDef());
1225:       assertFalse(node5.isCall());
1226:       assertFalse(node5.isStringKey());
1227:       assertFalse(node5.isName());
1228:       assertFalse(node5.isParamList());
1229:       assertFalse(node5.isNull());
1230:       assertFalse(node5.isDefaultCase());
1231:       assertFalse(node5.isFunction());
1232:       assertFalse(node5.isDo());
1233:       assertFalse(node5.isNew());
1234:       assertFalse(node5.isContinue());
1235:       assertFalse(node5.isAdd());
1236:       assertEquals(0, node5.getChildCount());
1237:       assertFalse(node5.isLabel());
1238:       assertFalse(node5.isAssignAdd());
1239:       assertFalse(node5.isVar());
1240:       assertEquals((-1), node5.getSourcePosition());
1241:       assertFalse(node5.isDec());
1242:       assertFalse(node5.hasChildren());
1243:       assertFalse(node5.isAssign());
1244:       assertFalse(node5.isDelProp());
1245:       assertFalse(node5.isTypeOf());
1246:       assertFalse(node5.isGetElem());
1247:       assertFalse(node5.isCast());
1248:       assertFalse(node5.isEmpty());
1249:       assertFalse(node5.isOr());
1250:       assertFalse(node5.isDebugger());
1251:       assertFalse(node5.isTrue());
1252:       assertFalse(node5.isNot());
1253:       assertFalse(node5.isVoid());
1254:       assertFalse(node5.isString());
1255:       assertFalse(node5.isExprResult());
1256:       assertTrue(node5.isNumber());
1257:       assertFalse(node5.isReturn());
1258:       assertFalse(node5.isWhile());
1259:       assertFalse(node6.isAnd());
1260:       assertFalse(node6.isInstanceOf());
1261:       assertFalse(node6.isWith());
1262:       assertFalse(node6.isNot());
1263:       assertFalse(node6.isObjectLit());
1264:       assertFalse(node6.isGetProp());
1265:       assertFalse(node6.isComma());
1266:       assertFalse(node6.isThis());
1267:       assertFalse(node6.isScript());
1268:       assertFalse(node6.hasOneChild());
1269:       assertFalse(node6.isHook());
1270:       assertFalse(node6.isGetElem());
1271:       assertFalse(node6.isDec());
1272:       assertFalse(node6.hasChildren());
1273:       assertFalse(node6.isAssign());
1274:       assertFalse(node6.isTypeOf());
1275:       assertFalse(node6.isExprResult());
1276:       assertFalse(node6.isBreak());
1277:       assertEquals((-1), node6.getLineno());
1278:       assertFalse(node6.isCase());
1279:       assertEquals(39, node6.getType());
1280:       assertFalse(node6.isOr());
1281:       assertFalse(node6.hasMoreThanOneChild());
1282:       assertFalse(node6.isNew());
1283:       assertFalse(node6.isLabel());
1284:       assertFalse(node6.isAdd());
1285:       assertFalse(node6.isBlock());
1286:       assertFalse(node6.isAssignAdd());
1287:       assertFalse(node6.isDo());
1288:       assertFalse(node6.isStringKey());
1289:       assertFalse(node6.isVar());
1290:       assertFalse(node6.isGetterDef());
1291:       assertEquals((-1), node6.getCharno());
1292:       assertFalse(node6.isParamList());
1293:       assertFalse(node6.isArrayLit());
1294:       assertFalse(node6.isLabelName());
1295:       assertFalse(node6.isSwitch());
1296:       assertFalse(node6.isCatch());
1297:       assertEquals(0, node6.getChildCount());
1298:       assertFalse(node6.isRegExp());
1299:       assertFalse(node6.isFunction());
1300:       assertFalse(node6.isSetterDef());
1301:       assertFalse(node6.isDefaultCase());
1302:       assertFalse(node6.isTry());
1303:       assertFalse(node6.isEmpty());
1304:       assertFalse(node6.isFor());
1305:       assertFalse(node6.isCall());
1306:       assertFalse(node6.isVoid());
1307:       assertFalse(node6.isNE());
1308:       assertFalse(node6.isNull());
1309:       assertFalse(node6.isTrue());
1310:       assertFalse(node6.isIf());
1311:       assertFalse(node6.isDelProp());
1312:       assertFalse(node6.isName());
1313:       assertFalse(node6.isContinue());
1314:       assertFalse(node6.isIn());
1315:       assertFalse(node6.isString());
1316:       assertFalse(node6.isReturn());
1317:       assertFalse(node6.isInc());
1318:       assertTrue(node6.isNumber());
1319:       assertFalse(node6.isWhile());
1320:       assertFalse(node6.isThrow());
1321:       assertFalse(node6.isCast());
1322:       assertEquals((-1), node6.getSourcePosition());
1323:       assertFalse(node6.isFalse());
1324:       assertFalse(node6.isDebugger());
1325:       
1326:       Iterable<Node> iterable0 = node6.children();
1327:       assertEquals(12, Node.COLUMN_BITS);
1328:       assertEquals(57, Node.LAST_PROP);
1329:       assertEquals(32, Node.INCRDECR_PROP);
1330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1331:       assertEquals(49, Node.DIRECT_EVAL);
1332:       assertEquals(1, Node.DECR_FLAG);
1333:       assertEquals(37, Node.OPT_ARG_NAME);
1334:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1335:       assertEquals(47, Node.IS_DISPATCHER);
1336:       assertEquals(2, Node.POST_FLAG);
1337:       assertEquals(30, Node.VAR_ARGS_NAME);
1338:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1339:       assertEquals(29, Node.JSDOC_INFO_PROP);
1340:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1341:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1342:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1343:       assertEquals(48, Node.DIRECTIVES);
1344:       assertEquals(8, Node.FLAG_NO_THROWS);
1345:       assertEquals(39, Node.EMPTY_BLOCK);
1346:       assertEquals(53, Node.INPUT_ID);
1347:       assertEquals(56, Node.CHANGE_TIME);
1348:       assertEquals(52, Node.LENGTH);
1349:       assertEquals(57, Node.REFLECTED_OBJECT);
1350:       assertEquals(36, Node.QUOTED_PROP);
1351:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1352:       assertEquals(4095, Node.COLUMN_MASK);
1353:       assertEquals(55, Node.INFERRED_FUNCTION);
1354:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1355:       assertEquals(40, Node.ORIGINALNAME_PROP);
1356:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1357:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1358:       assertEquals(54, Node.SLASH_V);
1359:       assertEquals(43, Node.IS_CONSTANT_NAME);
1360:       assertEquals(46, Node.IS_NAMESPACE);
1361:       assertEquals(50, Node.FREE_CALL);
1362:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1363:       assertEquals(48, Node.DIRECTIVES);
1364:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1365:       assertEquals(8, Node.FLAG_NO_THROWS);
1366:       assertEquals(39, Node.EMPTY_BLOCK);
1367:       assertEquals(4095, Node.COLUMN_MASK);
1368:       assertEquals(55, Node.INFERRED_FUNCTION);
1369:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1370:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1371:       assertEquals(52, Node.LENGTH);
1372:       assertEquals(29, Node.JSDOC_INFO_PROP);
1373:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1374:       assertEquals(53, Node.INPUT_ID);
1375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1376:       assertEquals(49, Node.DIRECT_EVAL);
1377:       assertEquals(36, Node.QUOTED_PROP);
1378:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1379:       assertEquals(57, Node.REFLECTED_OBJECT);
1380:       assertEquals(56, Node.CHANGE_TIME);
1381:       assertEquals(32, Node.INCRDECR_PROP);
1382:       assertEquals(46, Node.IS_NAMESPACE);
1383:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1384:       assertEquals(37, Node.OPT_ARG_NAME);
1385:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1386:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1387:       assertEquals(57, Node.LAST_PROP);
1388:       assertEquals(47, Node.IS_DISPATCHER);
1389:       assertEquals(2, Node.POST_FLAG);
1390:       assertEquals(30, Node.VAR_ARGS_NAME);
1391:       assertEquals(1, Node.DECR_FLAG);
1392:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1393:       assertEquals(12, Node.COLUMN_BITS);
1394:       assertEquals(40, Node.ORIGINALNAME_PROP);
1395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1396:       assertEquals(50, Node.FREE_CALL);
1397:       assertEquals(54, Node.SLASH_V);
1398:       assertEquals(43, Node.IS_CONSTANT_NAME);
1399:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1400:       assertEquals(43, Node.IS_CONSTANT_NAME);
1401:       assertEquals(53, Node.INPUT_ID);
1402:       assertEquals(36, Node.QUOTED_PROP);
1403:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1404:       assertEquals(4095, Node.COLUMN_MASK);
1405:       assertEquals(48, Node.DIRECTIVES);
1406:       assertEquals(37, Node.OPT_ARG_NAME);
1407:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1409:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1410:       assertEquals(50, Node.FREE_CALL);
1411:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1412:       assertEquals(12, Node.COLUMN_BITS);
1413:       assertEquals(1, Node.DECR_FLAG);
1414:       assertEquals(32, Node.INCRDECR_PROP);
1415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1417:       assertEquals(54, Node.SLASH_V);
1418:       assertEquals(52, Node.LENGTH);
1419:       assertEquals(30, Node.VAR_ARGS_NAME);
1420:       assertEquals(40, Node.ORIGINALNAME_PROP);
1421:       assertEquals(57, Node.REFLECTED_OBJECT);
1422:       assertEquals(46, Node.IS_NAMESPACE);
1423:       assertEquals(49, Node.DIRECT_EVAL);
1424:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1425:       assertEquals(8, Node.FLAG_NO_THROWS);
1426:       assertEquals(39, Node.EMPTY_BLOCK);
1427:       assertEquals(56, Node.CHANGE_TIME);
1428:       assertEquals(47, Node.IS_DISPATCHER);
1429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1430:       assertEquals(2, Node.POST_FLAG);
1431:       assertEquals(55, Node.INFERRED_FUNCTION);
1432:       assertEquals(29, Node.JSDOC_INFO_PROP);
1433:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1434:       assertEquals(57, Node.LAST_PROP);
1435:       assertFalse(node1.equals((Object)node4));
1436:       assertFalse(node1.equals((Object)node3));
1437:       assertFalse(node1.equals((Object)node5));
1438:       assertFalse(node1.equals((Object)node2));
1439:       assertFalse(node1.equals((Object)node6));
1440:       assertFalse(node1.equals((Object)node0));
1441:       assertFalse(node5.equals((Object)node0));
1442:       assertFalse(node5.equals((Object)node1));
1443:       assertFalse(node5.equals((Object)node2));
1444:       assertFalse(node5.equals((Object)node4));
1445:       assertFalse(node5.equals((Object)node3));
1446:       assertFalse(node6.equals((Object)node2));
1447:       assertFalse(node6.equals((Object)node0));
1448:       assertFalse(node6.equals((Object)node4));
1449:       assertFalse(node6.equals((Object)node3));
1450:       assertFalse(node6.equals((Object)node1));
1451:       assertNotSame(node1, node4);
1452:       assertNotSame(node1, node3);
1453:       assertNotSame(node1, node5);
1454:       assertNotSame(node1, node6);
1455:       assertNotSame(node5, node1);
1456:       assertNotSame(node5, node4);
1457:       assertSame(node5, node6);
1458:       assertNotSame(node5, node3);
1459:       assertSame(node6, node5);
1460:       assertNotSame(node6, node4);
1461:       assertNotSame(node6, node3);
1462:       assertNotSame(node6, node1);
1463:       assertNotNull(iterable0);
1464:       assertFalse(node1.isLabel());
1465:       assertFalse(node1.isAssignAdd());
1466:       assertFalse(node1.isReturn());
1467:       assertEquals((-1), node1.getLineno());
1468:       assertFalse(node1.isLabelName());
1469:       assertEquals((-1), node1.getSourcePosition());
1470:       assertFalse(node1.isOr());
1471:       assertFalse(node1.isAdd());
1472:       assertFalse(node1.isNew());
1473:       assertFalse(node1.isDo());
1474:       assertFalse(node1.isContinue());
1475:       assertFalse(node1.isVar());
1476:       assertFalse(node1.isCast());
1477:       assertFalse(node1.isGetProp());
1478:       assertFalse(node1.isBreak());
1479:       assertFalse(node1.isName());
1480:       assertFalse(node1.isAnd());
1481:       assertFalse(node1.isNull());
1482:       assertFalse(node1.isDebugger());
1483:       assertFalse(node1.isObjectLit());
1484:       assertFalse(node1.isNot());
1485:       assertFalse(node1.isTrue());
1486:       assertFalse(node1.isExprResult());
1487:       assertFalse(node1.isVoid());
1488:       assertFalse(node1.isGetElem());
1489:       assertFalse(node1.isWhile());
1490:       assertFalse(node1.isCall());
1491:       assertFalse(node1.isDec());
1492:       assertFalse(node1.isTypeOf());
1493:       assertFalse(node1.hasChildren());
1494:       assertFalse(node1.isComma());
1495:       assertFalse(node1.isAssign());
1496:       assertFalse(node1.isNE());
1497:       assertFalse(node1.isIf());
1498:       assertTrue(node1.isNumber());
1499:       assertFalse(node1.isDelProp());
1500:       assertFalse(node1.isCase());
1501:       assertFalse(node1.isString());
1502:       assertFalse(node1.isEmpty());
1503:       assertFalse(node1.isIn());
1504:       assertFalse(node1.isGetterDef());
1505:       assertEquals((-1), node1.getCharno());
1506:       assertFalse(node1.isInc());
1507:       assertFalse(node1.isArrayLit());
1508:       assertFalse(node1.isSwitch());
1509:       assertFalse(node1.isDefaultCase());
1510:       assertFalse(node1.isFalse());
1511:       assertFalse(node1.isThrow());
1512:       assertFalse(node1.isFunction());
1513:       assertEquals(0, node1.getChildCount());
1514:       assertFalse(node1.isParamList());
1515:       assertFalse(node1.isThis());
1516:       assertFalse(node1.isSetterDef());
1517:       assertFalse(node1.isStringKey());
1518:       assertFalse(node1.isBlock());
1519:       assertFalse(node1.isScript());
1520:       assertFalse(node1.hasOneChild());
1521:       assertFalse(node1.isTry());
1522:       assertEquals(39, node1.getType());
1523:       assertFalse(node1.isWith());
1524:       assertFalse(node1.isFor());
1525:       assertFalse(node1.isCatch());
1526:       assertFalse(node1.isHook());
1527:       assertFalse(node1.isRegExp());
1528:       assertFalse(node1.isInstanceOf());
1529:       assertFalse(node1.hasMoreThanOneChild());
1530:       assertFalse(node5.isBreak());
1531:       assertFalse(node5.isComma());
1532:       assertFalse(node5.isFalse());
1533:       assertFalse(node5.isGetProp());
1534:       assertFalse(node5.isObjectLit());
1535:       assertEquals((-1), node5.getCharno());
1536:       assertFalse(node5.isAnd());
1537:       assertFalse(node5.isSwitch());
1538:       assertFalse(node5.isInc());
1539:       assertFalse(node5.isThrow());
1540:       assertFalse(node5.isIf());
1541:       assertFalse(node5.isLabelName());
1542:       assertFalse(node5.isGetterDef());
1543:       assertFalse(node5.isIn());
1544:       assertFalse(node5.isArrayLit());
1545:       assertEquals((-1), node5.getLineno());
1546:       assertFalse(node5.isNE());
1547:       assertFalse(node5.isWith());
1548:       assertFalse(node5.isRegExp());
1549:       assertFalse(node5.isCase());
1550:       assertFalse(node5.isCatch());
1551:       assertFalse(node5.isScript());
1552:       assertFalse(node5.hasOneChild());
1553:       assertFalse(node5.isHook());
1554:       assertFalse(node5.isInstanceOf());
1555:       assertFalse(node5.hasMoreThanOneChild());
1556:       assertFalse(node5.isTry());
1557:       assertFalse(node5.isBlock());
1558:       assertEquals(39, node5.getType());
1559:       assertFalse(node5.isThis());
1560:       assertFalse(node5.isFor());
1561:       assertFalse(node5.isSetterDef());
1562:       assertFalse(node5.isCall());
1563:       assertFalse(node5.isStringKey());
1564:       assertFalse(node5.isName());
1565:       assertFalse(node5.isParamList());
1566:       assertFalse(node5.isNull());
1567:       assertFalse(node5.isDefaultCase());
1568:       assertFalse(node5.isFunction());
1569:       assertFalse(node5.isDo());
1570:       assertFalse(node5.isNew());
1571:       assertFalse(node5.isContinue());
1572:       assertFalse(node5.isAdd());
1573:       assertEquals(0, node5.getChildCount());
1574:       assertFalse(node5.isLabel());
1575:       assertFalse(node5.isAssignAdd());
1576:       assertFalse(node5.isVar());
1577:       assertEquals((-1), node5.getSourcePosition());
1578:       assertFalse(node5.isDec());
1579:       assertFalse(node5.hasChildren());
1580:       assertFalse(node5.isAssign());
1581:       assertFalse(node5.isDelProp());
1582:       assertFalse(node5.isTypeOf());
1583:       assertFalse(node5.isGetElem());
1584:       assertFalse(node5.isCast());
1585:       assertFalse(node5.isEmpty());
1586:       assertFalse(node5.isOr());
1587:       assertFalse(node5.isDebugger());
1588:       assertFalse(node5.isTrue());
1589:       assertFalse(node5.isNot());
1590:       assertFalse(node5.isVoid());
1591:       assertFalse(node5.isString());
1592:       assertFalse(node5.isExprResult());
1593:       assertTrue(node5.isNumber());
1594:       assertFalse(node5.isReturn());
1595:       assertFalse(node5.isWhile());
1596:       assertFalse(node6.isAnd());
1597:       assertFalse(node6.isInstanceOf());
1598:       assertFalse(node6.isWith());
1599:       assertFalse(node6.isNot());
1600:       assertFalse(node6.isObjectLit());
1601:       assertFalse(node6.isGetProp());
1602:       assertFalse(node6.isComma());
1603:       assertFalse(node6.isThis());
1604:       assertFalse(node6.isScript());
1605:       assertFalse(node6.hasOneChild());
1606:       assertFalse(node6.isHook());
1607:       assertFalse(node6.isGetElem());
1608:       assertFalse(node6.isDec());
1609:       assertFalse(node6.hasChildren());
1610:       assertFalse(node6.isAssign());
1611:       assertFalse(node6.isTypeOf());
1612:       assertFalse(node6.isExprResult());
1613:       assertFalse(node6.isBreak());
1614:       assertEquals((-1), node6.getLineno());
1615:       assertFalse(node6.isCase());
1616:       assertEquals(39, node6.getType());
1617:       assertFalse(node6.isOr());
1618:       assertFalse(node6.hasMoreThanOneChild());
1619:       assertFalse(node6.isNew());
1620:       assertFalse(node6.isLabel());
1621:       assertFalse(node6.isAdd());
1622:       assertFalse(node6.isBlock());
1623:       assertFalse(node6.isAssignAdd());
1624:       assertFalse(node6.isDo());
1625:       assertFalse(node6.isStringKey());
1626:       assertFalse(node6.isVar());
1627:       assertFalse(node6.isGetterDef());
1628:       assertEquals((-1), node6.getCharno());
1629:       assertFalse(node6.isParamList());
1630:       assertFalse(node6.isArrayLit());
1631:       assertFalse(node6.isLabelName());
1632:       assertFalse(node6.isSwitch());
1633:       assertFalse(node6.isCatch());
1634:       assertEquals(0, node6.getChildCount());
1635:       assertFalse(node6.isRegExp());
1636:       assertFalse(node6.isFunction());
1637:       assertFalse(node6.isSetterDef());
1638:       assertFalse(node6.isDefaultCase());
1639:       assertFalse(node6.isTry());
1640:       assertFalse(node6.isEmpty());
1641:       assertFalse(node6.isFor());
1642:       assertFalse(node6.isCall());
1643:       assertFalse(node6.isVoid());
1644:       assertFalse(node6.isNE());
1645:       assertFalse(node6.isNull());
1646:       assertFalse(node6.isTrue());
1647:       assertFalse(node6.isIf());
1648:       assertFalse(node6.isDelProp());
1649:       assertFalse(node6.isName());
1650:       assertFalse(node6.isContinue());
1651:       assertFalse(node6.isIn());
1652:       assertFalse(node6.isString());
1653:       assertFalse(node6.isReturn());
1654:       assertFalse(node6.isInc());
1655:       assertTrue(node6.isNumber());
1656:       assertFalse(node6.isWhile());
1657:       assertFalse(node6.isThrow());
1658:       assertFalse(node6.isCast());
1659:       assertEquals((-1), node6.getSourcePosition());
1660:       assertFalse(node6.isFalse());
1661:       assertFalse(node6.isDebugger());
1662:       assertFalse(iterable0.contains(node4));
1663:       
1664:       boolean boolean0 = node5.isQualifiedName();
1665:       assertEquals(48, Node.DIRECTIVES);
1666:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1667:       assertEquals(8, Node.FLAG_NO_THROWS);
1668:       assertEquals(39, Node.EMPTY_BLOCK);
1669:       assertEquals(4095, Node.COLUMN_MASK);
1670:       assertEquals(55, Node.INFERRED_FUNCTION);
1671:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1672:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1673:       assertEquals(52, Node.LENGTH);
1674:       assertEquals(29, Node.JSDOC_INFO_PROP);
1675:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1676:       assertEquals(53, Node.INPUT_ID);
1677:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1678:       assertEquals(49, Node.DIRECT_EVAL);
1679:       assertEquals(36, Node.QUOTED_PROP);
1680:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1681:       assertEquals(57, Node.REFLECTED_OBJECT);
1682:       assertEquals(56, Node.CHANGE_TIME);
1683:       assertEquals(32, Node.INCRDECR_PROP);
1684:       assertEquals(46, Node.IS_NAMESPACE);
1685:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1686:       assertEquals(37, Node.OPT_ARG_NAME);
1687:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1688:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1689:       assertEquals(57, Node.LAST_PROP);
1690:       assertEquals(47, Node.IS_DISPATCHER);
1691:       assertEquals(2, Node.POST_FLAG);
1692:       assertEquals(30, Node.VAR_ARGS_NAME);
1693:       assertEquals(1, Node.DECR_FLAG);
1694:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1695:       assertEquals(12, Node.COLUMN_BITS);
1696:       assertEquals(40, Node.ORIGINALNAME_PROP);
1697:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1698:       assertEquals(50, Node.FREE_CALL);
1699:       assertEquals(54, Node.SLASH_V);
1700:       assertEquals(43, Node.IS_CONSTANT_NAME);
1701:       assertFalse(node5.equals((Object)node0));
1702:       assertFalse(node5.equals((Object)node1));
1703:       assertFalse(node5.equals((Object)node2));
1704:       assertFalse(node5.equals((Object)node4));
1705:       assertFalse(node5.equals((Object)node3));
1706:       assertNotSame(node5, node1);
1707:       assertNotSame(node5, node4);
1708:       assertSame(node5, node6);
1709:       assertNotSame(node5, node3);
1710:       assertFalse(boolean0);
1711:       assertFalse(node5.isBreak());
1712:       assertFalse(node5.isComma());
1713:       assertFalse(node5.isFalse());
1714:       assertFalse(node5.isGetProp());
1715:       assertFalse(node5.isObjectLit());
1716:       assertEquals((-1), node5.getCharno());
1717:       assertFalse(node5.isAnd());
1718:       assertFalse(node5.isSwitch());
1719:       assertFalse(node5.isInc());
1720:       assertFalse(node5.isThrow());
1721:       assertFalse(node5.isIf());
1722:       assertFalse(node5.isLabelName());
1723:       assertFalse(node5.isGetterDef());
1724:       assertFalse(node5.isIn());
1725:       assertFalse(node5.isArrayLit());
1726:       assertEquals((-1), node5.getLineno());
1727:       assertFalse(node5.isNE());
1728:       assertFalse(node5.isWith());
1729:       assertFalse(node5.isRegExp());
1730:       assertFalse(node5.isCase());
1731:       assertFalse(node5.isCatch());
1732:       assertFalse(node5.isScript());
1733:       assertFalse(node5.hasOneChild());
1734:       assertFalse(node5.isHook());
1735:       assertFalse(node5.isInstanceOf());
1736:       assertFalse(node5.hasMoreThanOneChild());
1737:       assertFalse(node5.isTry());
1738:       assertFalse(node5.isBlock());
1739:       assertEquals(39, node5.getType());
1740:       assertFalse(node5.isThis());
1741:       assertFalse(node5.isFor());
1742:       assertFalse(node5.isSetterDef());
1743:       assertFalse(node5.isCall());
1744:       assertFalse(node5.isStringKey());
1745:       assertFalse(node5.isName());
1746:       assertFalse(node5.isParamList());
1747:       assertFalse(node5.isNull());
1748:       assertFalse(node5.isDefaultCase());
1749:       assertFalse(node5.isFunction());
1750:       assertFalse(node5.isDo());
1751:       assertFalse(node5.isNew());
1752:       assertFalse(node5.isContinue());
1753:       assertFalse(node5.isAdd());
1754:       assertEquals(0, node5.getChildCount());
1755:       assertFalse(node5.isLabel());
1756:       assertFalse(node5.isAssignAdd());
1757:       assertFalse(node5.isVar());
1758:       assertEquals((-1), node5.getSourcePosition());
1759:       assertFalse(node5.isDec());
1760:       assertFalse(node5.hasChildren());
1761:       assertFalse(node5.isAssign());
1762:       assertFalse(node5.isDelProp());
1763:       assertFalse(node5.isTypeOf());
1764:       assertFalse(node5.isGetElem());
1765:       assertFalse(node5.isCast());
1766:       assertFalse(node5.isEmpty());
1767:       assertFalse(node5.isOr());
1768:       assertFalse(node5.isDebugger());
1769:       assertFalse(node5.isTrue());
1770:       assertFalse(node5.isNot());
1771:       assertFalse(node5.isVoid());
1772:       assertFalse(node5.isString());
1773:       assertFalse(node5.isExprResult());
1774:       assertTrue(node5.isNumber());
1775:       assertFalse(node5.isReturn());
1776:       assertFalse(node5.isWhile());
1777:       
1778:       boolean boolean1 = node0.isOptionalArg();
1779:       assertEquals(37, Node.OPT_ARG_NAME);
1780:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1781:       assertEquals(56, Node.CHANGE_TIME);
1782:       assertEquals(32, Node.INCRDECR_PROP);
1783:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1784:       assertEquals(29, Node.JSDOC_INFO_PROP);
1785:       assertEquals(46, Node.IS_NAMESPACE);
1786:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1787:       assertEquals(43, Node.IS_CONSTANT_NAME);
1788:       assertEquals(53, Node.INPUT_ID);
1789:       assertEquals(54, Node.SLASH_V);
1790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1791:       assertEquals(57, Node.LAST_PROP);
1792:       assertEquals(40, Node.ORIGINALNAME_PROP);
1793:       assertEquals(47, Node.IS_DISPATCHER);
1794:       assertEquals(2, Node.POST_FLAG);
1795:       assertEquals(30, Node.VAR_ARGS_NAME);
1796:       assertEquals(8, Node.FLAG_NO_THROWS);
1797:       assertEquals(39, Node.EMPTY_BLOCK);
1798:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1799:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1800:       assertEquals(48, Node.DIRECTIVES);
1801:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1802:       assertEquals(57, Node.REFLECTED_OBJECT);
1803:       assertEquals(55, Node.INFERRED_FUNCTION);
1804:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1805:       assertEquals(52, Node.LENGTH);
1806:       assertEquals(36, Node.QUOTED_PROP);
1807:       assertEquals(50, Node.FREE_CALL);
1808:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1809:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1810:       assertEquals(49, Node.DIRECT_EVAL);
1811:       assertEquals(1, Node.DECR_FLAG);
1812:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1813:       assertEquals(12, Node.COLUMN_BITS);
1814:       assertEquals(4095, Node.COLUMN_MASK);
1815:       assertFalse(node0.equals((Object)node6));
1816:       assertFalse(node0.equals((Object)node2));
1817:       assertFalse(node0.equals((Object)node5));
1818:       assertFalse(node0.equals((Object)node4));
1819:       assertFalse(node0.equals((Object)node1));
1820:       assertFalse(node0.equals((Object)node3));
1821:       assertTrue(boolean1 == boolean0);
1822:       assertFalse(boolean1);
1823:       assertFalse(node0.isFor());
1824:       assertFalse(node0.isEmpty());
1825:       assertFalse(node0.isIf());
1826:       assertFalse(node0.isArrayLit());
1827:       assertFalse(node0.isTry());
1828:       assertFalse(node0.isDelProp());
1829:       assertFalse(node0.isFunction());
1830:       assertFalse(node0.isRegExp());
1831:       assertFalse(node0.isCase());
1832:       assertFalse(node0.isSwitch());
1833:       assertFalse(node0.isParamList());
1834:       assertEquals((-1), node0.getCharno());
1835:       assertFalse(node0.isDebugger());
1836:       assertFalse(node0.isString());
1837:       assertEquals((-1388), node0.getType());
1838:       assertFalse(node0.isGetterDef());
1839:       assertFalse(node0.isStringKey());
1840:       assertFalse(node0.isVar());
1841:       assertFalse(node0.isCall());
1842:       assertFalse(node0.isBreak());
1843:       assertFalse(node0.isName());
1844:       assertEquals(0, node0.getChildCount());
1845:       assertFalse(node0.isComma());
1846:       assertFalse(node0.isDefaultCase());
1847:       assertFalse(node0.isAssignAdd());
1848:       assertFalse(node0.isDo());
1849:       assertFalse(node0.isVoid());
1850:       assertFalse(node0.isNew());
1851:       assertFalse(node0.isAdd());
1852:       assertFalse(node0.isNull());
1853:       assertFalse(node0.isTrue());
1854:       assertFalse(node0.isOr());
1855:       assertFalse(node0.isGetElem());
1856:       assertFalse(node0.isCast());
1857:       assertFalse(node0.hasOneChild());
1858:       assertFalse(node0.isLabelName());
1859:       assertFalse(node0.isLabel());
1860:       assertFalse(node0.isReturn());
1861:       assertFalse(node0.isExprResult());
1862:       assertFalse(node0.isDec());
1863:       assertFalse(node0.hasChildren());
1864:       assertFalse(node0.isWith());
1865:       assertFalse(node0.hasMoreThanOneChild());
1866:       assertFalse(node0.isAssign());
1867:       assertFalse(node0.isTypeOf());
1868:       assertFalse(node0.isContinue());
1869:       assertFalse(node0.isAnd());
1870:       assertFalse(node0.isWhile());
1871:       assertFalse(node0.isGetProp());
1872:       assertFalse(node0.isScript());
1873:       assertFalse(node0.isNumber());
1874:       assertEquals((-1), node0.getSourcePosition());
1875:       assertFalse(node0.isNot());
1876:       assertFalse(node0.isObjectLit());
1877:       assertFalse(node0.isThrow());
1878:       assertFalse(node0.isFalse());
1879:       assertFalse(node0.isThis());
1880:       assertFalse(node0.isBlock());
1881:       assertFalse(node0.isHook());
1882:       assertFalse(node0.isInstanceOf());
1883:       assertFalse(node0.isCatch());
1884:       assertEquals((-1), node0.getLineno());
1885:       assertFalse(node0.isSetterDef());
1886:       assertFalse(node0.isNE());
1887:       assertFalse(node0.isInc());
1888:       assertFalse(node0.isIn());
1889:       
1890:       node4.setIsSyntheticBlock(false);
1891:       assertEquals(30, Node.VAR_ARGS_NAME);
1892:       assertEquals(57, Node.LAST_PROP);
1893:       assertEquals(1, Node.DECR_FLAG);
1894:       assertEquals(49, Node.DIRECT_EVAL);
1895:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1896:       assertEquals(32, Node.INCRDECR_PROP);
1897:       assertEquals(47, Node.IS_DISPATCHER);
1898:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1899:       assertEquals(12, Node.COLUMN_BITS);
1900:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1901:       assertEquals(8, Node.FLAG_NO_THROWS);
1902:       assertEquals(39, Node.EMPTY_BLOCK);
1903:       assertEquals(37, Node.OPT_ARG_NAME);
1904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1905:       assertEquals(29, Node.JSDOC_INFO_PROP);
1906:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1907:       assertEquals(52, Node.LENGTH);
1908:       assertEquals(48, Node.DIRECTIVES);
1909:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1910:       assertEquals(56, Node.CHANGE_TIME);
1911:       assertEquals(57, Node.REFLECTED_OBJECT);
1912:       assertEquals(36, Node.QUOTED_PROP);
1913:       assertEquals(55, Node.INFERRED_FUNCTION);
1914:       assertEquals(4095, Node.COLUMN_MASK);
1915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1916:       assertEquals(53, Node.INPUT_ID);
1917:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1918:       assertEquals(2, Node.POST_FLAG);
1919:       assertEquals(50, Node.FREE_CALL);
1920:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1921:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1922:       assertEquals(40, Node.ORIGINALNAME_PROP);
1923:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1924:       assertEquals(43, Node.IS_CONSTANT_NAME);
1925:       assertEquals(46, Node.IS_NAMESPACE);
1926:       assertEquals(54, Node.SLASH_V);
1927:       assertFalse(node4.equals((Object)node5));
1928:       assertFalse(node4.equals((Object)node2));
1929:       assertFalse(node4.equals((Object)node1));
1930:       assertFalse(node4.equals((Object)node0));
1931:       assertFalse(node4.equals((Object)node6));
1932:       assertFalse(node4.equals((Object)node3));
1933:       assertNotSame(node4, node5);
1934:       assertNotSame(node4, node1);
1935:       assertNotSame(node4, node6);
1936:       assertNotSame(node4, node3);
1937:       assertFalse(node4.isOr());
1938:       assertFalse(node4.isAssignAdd());
1939:       assertFalse(node4.hasMoreThanOneChild());
1940:       assertFalse(node4.isContinue());
1941:       assertFalse(node4.isLabelName());
1942:       assertFalse(node4.isNew());
1943:       assertFalse(node4.isAdd());
1944:       assertFalse(node4.isCast());
1945:       assertFalse(node4.isDo());
1946:       assertFalse(node4.isLabel());
1947:       assertFalse(node4.isVar());
1948:       assertFalse(node4.isObjectLit());
1949:       assertFalse(node4.isGetProp());
1950:       assertFalse(node4.isBreak());
1951:       assertFalse(node4.isNot());
1952:       assertFalse(node4.isName());
1953:       assertFalse(node4.isAnd());
1954:       assertFalse(node4.isDebugger());
1955:       assertFalse(node4.isNull());
1956:       assertFalse(node4.isTrue());
1957:       assertEquals(212996, node4.getSourcePosition());
1958:       assertFalse(node4.isVoid());
1959:       assertFalse(node4.isGetElem());
1960:       assertFalse(node4.isCall());
1961:       assertFalse(node4.isExprResult());
1962:       assertFalse(node4.hasChildren());
1963:       assertFalse(node4.isWhile());
1964:       assertFalse(node4.isDec());
1965:       assertFalse(node4.isAssign());
1966:       assertFalse(node4.isTypeOf());
1967:       assertFalse(node4.isComma());
1968:       assertFalse(node4.isReturn());
1969:       assertFalse(node4.isIn());
1970:       assertTrue(node4.isNumber());
1971:       assertFalse(node4.isCase());
1972:       assertFalse(node4.isIf());
1973:       assertFalse(node4.isGetterDef());
1974:       assertFalse(node4.isDelProp());
1975:       assertFalse(node4.isString());
1976:       assertFalse(node4.isSwitch());
1977:       assertFalse(node4.isNE());
1978:       assertFalse(node4.isArrayLit());
1979:       assertFalse(node4.isEmpty());
1980:       assertFalse(node4.isInc());
1981:       assertFalse(node4.isDefaultCase());
1982:       assertFalse(node4.isFunction());
1983:       assertFalse(node4.isFalse());
1984:       assertFalse(node4.isThrow());
1985:       assertEquals(0, node4.getChildCount());
1986:       assertFalse(node4.isInstanceOf());
1987:       assertFalse(node4.isCatch());
1988:       assertFalse(node4.isSetterDef());
1989:       assertEquals(52, node4.getLineno());
1990:       assertEquals(4, node4.getCharno());
1991:       assertFalse(node4.isStringKey());
1992:       assertFalse(node4.isParamList());
1993:       assertFalse(node4.hasOneChild());
1994:       assertFalse(node4.isTry());
1995:       assertFalse(node4.isScript());
1996:       assertFalse(node4.isWith());
1997:       assertFalse(node4.isRegExp());
1998:       assertEquals(39, node4.getType());
1999:       assertFalse(node4.isFor());
2000:       assertFalse(node4.isThis());
2001:       assertFalse(node4.isBlock());
2002:       assertFalse(node4.isHook());
2003:       
2004:       boolean boolean2 = node0.isQuotedString();
2005:       assertEquals(37, Node.OPT_ARG_NAME);
2006:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2007:       assertEquals(56, Node.CHANGE_TIME);
2008:       assertEquals(32, Node.INCRDECR_PROP);
2009:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2010:       assertEquals(29, Node.JSDOC_INFO_PROP);
2011:       assertEquals(46, Node.IS_NAMESPACE);
2012:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2013:       assertEquals(43, Node.IS_CONSTANT_NAME);
2014:       assertEquals(53, Node.INPUT_ID);
2015:       assertEquals(54, Node.SLASH_V);
2016:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2017:       assertEquals(57, Node.LAST_PROP);
2018:       assertEquals(40, Node.ORIGINALNAME_PROP);
2019:       assertEquals(47, Node.IS_DISPATCHER);
2020:       assertEquals(2, Node.POST_FLAG);
2021:       assertEquals(30, Node.VAR_ARGS_NAME);
2022:       assertEquals(8, Node.FLAG_NO_THROWS);
2023:       assertEquals(39, Node.EMPTY_BLOCK);
2024:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2025:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2026:       assertEquals(48, Node.DIRECTIVES);
2027:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2028:       assertEquals(57, Node.REFLECTED_OBJECT);
2029:       assertEquals(55, Node.INFERRED_FUNCTION);
2030:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2031:       assertEquals(52, Node.LENGTH);
2032:       assertEquals(36, Node.QUOTED_PROP);
2033:       assertEquals(50, Node.FREE_CALL);
2034:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2035:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2036:       assertEquals(49, Node.DIRECT_EVAL);
2037:       assertEquals(1, Node.DECR_FLAG);
2038:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2039:       assertEquals(12, Node.COLUMN_BITS);
2040:       assertEquals(4095, Node.COLUMN_MASK);
2041:       assertFalse(node0.equals((Object)node6));
2042:       assertFalse(node0.equals((Object)node2));
2043:       assertFalse(node0.equals((Object)node5));
2044:       assertFalse(node0.equals((Object)node4));
2045:       assertFalse(node0.equals((Object)node1));
2046:       assertFalse(node0.equals((Object)node3));
2047:       assertTrue(boolean2 == boolean0);
2048:       assertTrue(boolean2 == boolean1);
2049:       assertFalse(boolean2);
2050:       assertFalse(node0.isFor());
2051:       assertFalse(node0.isEmpty());
2052:       assertFalse(node0.isIf());
2053:       assertFalse(node0.isArrayLit());
2054:       assertFalse(node0.isTry());
2055:       assertFalse(node0.isDelProp());
2056:       assertFalse(node0.isFunction());
2057:       assertFalse(node0.isRegExp());
2058:       assertFalse(node0.isCase());
2059:       assertFalse(node0.isSwitch());
2060:       assertFalse(node0.isParamList());
2061:       assertEquals((-1), node0.getCharno());
2062:       assertFalse(node0.isDebugger());
2063:       assertFalse(node0.isString());
2064:       assertEquals((-1388), node0.getType());
2065:       assertFalse(node0.isGetterDef());
2066:       assertFalse(node0.isStringKey());
2067:       assertFalse(node0.isVar());
2068:       assertFalse(node0.isCall());
2069:       assertFalse(node0.isBreak());
2070:       assertFalse(node0.isName());
2071:       assertEquals(0, node0.getChildCount());
2072:       assertFalse(node0.isComma());
2073:       assertFalse(node0.isDefaultCase());
2074:       assertFalse(node0.isAssignAdd());
2075:       assertFalse(node0.isDo());
2076:       assertFalse(node0.isVoid());
2077:       assertFalse(node0.isNew());
2078:       assertFalse(node0.isAdd());
2079:       assertFalse(node0.isNull());
2080:       assertFalse(node0.isTrue());
2081:       assertFalse(node0.isOr());
2082:       assertFalse(node0.isGetElem());
2083:       assertFalse(node0.isCast());
2084:       assertFalse(node0.hasOneChild());
2085:       assertFalse(node0.isLabelName());
2086:       assertFalse(node0.isLabel());
2087:       assertFalse(node0.isReturn());
2088:       assertFalse(node0.isExprResult());
2089:       assertFalse(node0.isDec());
2090:       assertFalse(node0.hasChildren());
2091:       assertFalse(node0.isWith());
2092:       assertFalse(node0.hasMoreThanOneChild());
2093:       assertFalse(node0.isAssign());
2094:       assertFalse(node0.isTypeOf());
2095:       assertFalse(node0.isContinue());
2096:       assertFalse(node0.isAnd());
2097:       assertFalse(node0.isWhile());
2098:       assertFalse(node0.isGetProp());
2099:       assertFalse(node0.isScript());
2100:       assertFalse(node0.isNumber());
2101:       assertEquals((-1), node0.getSourcePosition());
2102:       assertFalse(node0.isNot());
2103:       assertFalse(node0.isObjectLit());
2104:       assertFalse(node0.isThrow());
2105:       assertFalse(node0.isFalse());
2106:       assertFalse(node0.isThis());
2107:       assertFalse(node0.isBlock());
2108:       assertFalse(node0.isHook());
2109:       assertFalse(node0.isInstanceOf());
2110:       assertFalse(node0.isCatch());
2111:       assertEquals((-1), node0.getLineno());
2112:       assertFalse(node0.isSetterDef());
2113:       assertFalse(node0.isNE());
2114:       assertFalse(node0.isInc());
2115:       assertFalse(node0.isIn());
2116:       
2117:       boolean boolean3 = node0.isEquivalentToTyped(node2);
2118:       assertEquals(37, Node.OPT_ARG_NAME);
2119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2120:       assertEquals(56, Node.CHANGE_TIME);
2121:       assertEquals(32, Node.INCRDECR_PROP);
2122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2123:       assertEquals(29, Node.JSDOC_INFO_PROP);
2124:       assertEquals(46, Node.IS_NAMESPACE);
2125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2126:       assertEquals(43, Node.IS_CONSTANT_NAME);
2127:       assertEquals(53, Node.INPUT_ID);
2128:       assertEquals(54, Node.SLASH_V);
2129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2130:       assertEquals(57, Node.LAST_PROP);
2131:       assertEquals(40, Node.ORIGINALNAME_PROP);
2132:       assertEquals(47, Node.IS_DISPATCHER);
2133:       assertEquals(2, Node.POST_FLAG);
2134:       assertEquals(30, Node.VAR_ARGS_NAME);
2135:       assertEquals(8, Node.FLAG_NO_THROWS);
2136:       assertEquals(39, Node.EMPTY_BLOCK);
2137:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2139:       assertEquals(48, Node.DIRECTIVES);
2140:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2141:       assertEquals(57, Node.REFLECTED_OBJECT);
2142:       assertEquals(55, Node.INFERRED_FUNCTION);
2143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2144:       assertEquals(52, Node.LENGTH);
2145:       assertEquals(36, Node.QUOTED_PROP);
2146:       assertEquals(50, Node.FREE_CALL);
2147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2149:       assertEquals(49, Node.DIRECT_EVAL);
2150:       assertEquals(1, Node.DECR_FLAG);
2151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2152:       assertEquals(12, Node.COLUMN_BITS);
2153:       assertEquals(4095, Node.COLUMN_MASK);
2154:       assertEquals(37, Node.OPT_ARG_NAME);
2155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2156:       assertEquals(56, Node.CHANGE_TIME);
2157:       assertEquals(32, Node.INCRDECR_PROP);
2158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2159:       assertEquals(12, Node.COLUMN_BITS);
2160:       assertEquals(47, Node.IS_DISPATCHER);
2161:       assertEquals(2, Node.POST_FLAG);
2162:       assertEquals(30, Node.VAR_ARGS_NAME);
2163:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2164:       assertEquals(43, Node.IS_CONSTANT_NAME);
2165:       assertEquals(54, Node.SLASH_V);
2166:       assertEquals(1, Node.DECR_FLAG);
2167:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2168:       assertEquals(46, Node.IS_NAMESPACE);
2169:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2170:       assertEquals(50, Node.FREE_CALL);
2171:       assertEquals(8, Node.FLAG_NO_THROWS);
2172:       assertEquals(39, Node.EMPTY_BLOCK);
2173:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2174:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2175:       assertEquals(48, Node.DIRECTIVES);
2176:       assertEquals(40, Node.ORIGINALNAME_PROP);
2177:       assertEquals(4095, Node.COLUMN_MASK);
2178:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2179:       assertEquals(53, Node.INPUT_ID);
2180:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2181:       assertEquals(57, Node.LAST_PROP);
2182:       assertEquals(49, Node.DIRECT_EVAL);
2183:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2184:       assertEquals(57, Node.REFLECTED_OBJECT);
2185:       assertEquals(55, Node.INFERRED_FUNCTION);
2186:       assertEquals(29, Node.JSDOC_INFO_PROP);
2187:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2188:       assertEquals(52, Node.LENGTH);
2189:       assertEquals(36, Node.QUOTED_PROP);
2190:       assertFalse(node0.equals((Object)node6));
2191:       assertFalse(node0.equals((Object)node2));
2192:       assertFalse(node0.equals((Object)node5));
2193:       assertFalse(node0.equals((Object)node4));
2194:       assertFalse(node0.equals((Object)node1));
2195:       assertFalse(node0.equals((Object)node3));
2196:       assertFalse(node2.equals((Object)node6));
2197:       assertFalse(node2.equals((Object)node5));
2198:       assertFalse(node2.equals((Object)node4));
2199:       assertFalse(node2.equals((Object)node1));
2200:       assertFalse(node2.equals((Object)node3));
2201:       assertFalse(node2.equals((Object)node0));
2202:       assertTrue(boolean3 == boolean0);
2203:       assertTrue(boolean3 == boolean2);
2204:       assertTrue(boolean3 == boolean1);
2205:       assertFalse(boolean3);
2206:       assertFalse(node0.isFor());
2207:       assertFalse(node0.isEmpty());
2208:       assertFalse(node0.isIf());
2209:       assertFalse(node0.isArrayLit());
2210:       assertFalse(node0.isTry());
2211:       assertFalse(node0.isDelProp());
2212:       assertFalse(node0.isFunction());
2213:       assertFalse(node0.isRegExp());
2214:       assertFalse(node0.isCase());
2215:       assertFalse(node0.isSwitch());
2216:       assertFalse(node0.isParamList());
2217:       assertEquals((-1), node0.getCharno());
2218:       assertFalse(node0.isDebugger());
2219:       assertFalse(node0.isString());
2220:       assertEquals((-1388), node0.getType());
2221:       assertFalse(node0.isGetterDef());
2222:       assertFalse(node0.isStringKey());
2223:       assertFalse(node0.isVar());
2224:       assertFalse(node0.isCall());
2225:       assertFalse(node0.isBreak());
2226:       assertFalse(node0.isName());
2227:       assertEquals(0, node0.getChildCount());
2228:       assertFalse(node0.isComma());
2229:       assertFalse(node0.isDefaultCase());
2230:       assertFalse(node0.isAssignAdd());
2231:       assertFalse(node0.isDo());
2232:       assertFalse(node0.isVoid());
2233:       assertFalse(node0.isNew());
2234:       assertFalse(node0.isAdd());
2235:       assertFalse(node0.isNull());
2236:       assertFalse(node0.isTrue());
2237:       assertFalse(node0.isOr());
2238:       assertFalse(node0.isGetElem());
2239:       assertFalse(node0.isCast());
2240:       assertFalse(node0.hasOneChild());
2241:       assertFalse(node0.isLabelName());
2242:       assertFalse(node0.isLabel());
2243:       assertFalse(node0.isReturn());
2244:       assertFalse(node0.isExprResult());
2245:       assertFalse(node0.isDec());
2246:       assertFalse(node0.hasChildren());
2247:       assertFalse(node0.isWith());
2248:       assertFalse(node0.hasMoreThanOneChild());
2249:       assertFalse(node0.isAssign());
2250:       assertFalse(node0.isTypeOf());
2251:       assertFalse(node0.isContinue());
2252:       assertFalse(node0.isAnd());
2253:       assertFalse(node0.isWhile());
2254:       assertFalse(node0.isGetProp());
2255:       assertFalse(node0.isScript());
2256:       assertFalse(node0.isNumber());
2257:       assertEquals((-1), node0.getSourcePosition());
2258:       assertFalse(node0.isNot());
2259:       assertFalse(node0.isObjectLit());
2260:       assertFalse(node0.isThrow());
2261:       assertFalse(node0.isFalse());
2262:       assertFalse(node0.isThis());
2263:       assertFalse(node0.isBlock());
2264:       assertFalse(node0.isHook());
2265:       assertFalse(node0.isInstanceOf());
2266:       assertFalse(node0.isCatch());
2267:       assertEquals((-1), node0.getLineno());
2268:       assertFalse(node0.isSetterDef());
2269:       assertFalse(node0.isNE());
2270:       assertFalse(node0.isInc());
2271:       assertFalse(node0.isIn());
2272:       assertTrue(node2.hasOneChild());
2273:       assertFalse(node2.isFor());
2274:       assertFalse(node2.isEmpty());
2275:       assertFalse(node2.isIf());
2276:       assertFalse(node2.isArrayLit());
2277:       assertFalse(node2.isTry());
2278:       assertFalse(node2.isDelProp());
2279:       assertFalse(node2.isDebugger());
2280:       assertFalse(node2.isNE());
2281:       assertFalse(node2.isTrue());
2282:       assertFalse(node2.isIn());
2283:       assertFalse(node2.isGetterDef());
2284:       assertFalse(node2.isCase());
2285:       assertFalse(node2.isCatch());
2286:       assertFalse(node2.isVoid());
2287:       assertTrue(node2.hasChildren());
2288:       assertFalse(node2.isHook());
2289:       assertEquals(1, node2.getChildCount());
2290:       assertFalse(node2.isRegExp());
2291:       assertFalse(node2.isStringKey());
2292:       assertFalse(node2.isVar());
2293:       assertFalse(node2.isCall());
2294:       assertFalse(node2.isBreak());
2295:       assertFalse(node2.isName());
2296:       assertFalse(node2.isNew());
2297:       assertFalse(node2.isParamList());
2298:       assertEquals((-1), node2.getCharno());
2299:       assertFalse(node2.isAdd());
2300:       assertFalse(node2.isNull());
2301:       assertEquals(1524, node2.getType());
2302:       assertFalse(node2.isDefaultCase());
2303:       assertFalse(node2.isDo());
2304:       assertFalse(node2.isSwitch());
2305:       assertFalse(node2.isLabel());
2306:       assertFalse(node2.isAssignAdd());
2307:       assertFalse(node2.isGetElem());
2308:       assertFalse(node2.isCast());
2309:       assertFalse(node2.isLabelName());
2310:       assertFalse(node2.isScript());
2311:       assertFalse(node2.isNumber());
2312:       assertEquals((-1), node2.getSourcePosition());
2313:       assertFalse(node2.isOr());
2314:       assertFalse(node2.isNot());
2315:       assertFalse(node2.isWhile());
2316:       assertEquals((-1), node2.getLineno());
2317:       assertFalse(node2.isReturn());
2318:       assertFalse(node2.isThis());
2319:       assertFalse(node2.isBlock());
2320:       assertFalse(node2.isExprResult());
2321:       assertFalse(node2.isInstanceOf());
2322:       assertFalse(node2.isDec());
2323:       assertFalse(node2.isWith());
2324:       assertFalse(node2.hasMoreThanOneChild());
2325:       assertFalse(node2.isAssign());
2326:       assertFalse(node2.isComma());
2327:       assertFalse(node2.isTypeOf());
2328:       assertFalse(node2.isThrow());
2329:       assertFalse(node2.isFalse());
2330:       assertFalse(node2.isGetProp());
2331:       assertFalse(node2.isSetterDef());
2332:       assertFalse(node2.isInc());
2333:       assertFalse(node2.isString());
2334:       assertFalse(node2.isObjectLit());
2335:       assertFalse(node2.isContinue());
2336:       assertFalse(node2.isAnd());
2337:       assertFalse(node2.isFunction());
2338:       
2339:       Iterable<Node> iterable1 = node0.siblings();
2340:       assertEquals(37, Node.OPT_ARG_NAME);
2341:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2342:       assertEquals(56, Node.CHANGE_TIME);
2343:       assertEquals(32, Node.INCRDECR_PROP);
2344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2345:       assertEquals(29, Node.JSDOC_INFO_PROP);
2346:       assertEquals(46, Node.IS_NAMESPACE);
2347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2348:       assertEquals(43, Node.IS_CONSTANT_NAME);
2349:       assertEquals(53, Node.INPUT_ID);
2350:       assertEquals(54, Node.SLASH_V);
2351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2352:       assertEquals(57, Node.LAST_PROP);
2353:       assertEquals(40, Node.ORIGINALNAME_PROP);
2354:       assertEquals(47, Node.IS_DISPATCHER);
2355:       assertEquals(2, Node.POST_FLAG);
2356:       assertEquals(30, Node.VAR_ARGS_NAME);
2357:       assertEquals(8, Node.FLAG_NO_THROWS);
2358:       assertEquals(39, Node.EMPTY_BLOCK);
2359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2361:       assertEquals(48, Node.DIRECTIVES);
2362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2363:       assertEquals(57, Node.REFLECTED_OBJECT);
2364:       assertEquals(55, Node.INFERRED_FUNCTION);
2365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2366:       assertEquals(52, Node.LENGTH);
2367:       assertEquals(36, Node.QUOTED_PROP);
2368:       assertEquals(50, Node.FREE_CALL);
2369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2371:       assertEquals(49, Node.DIRECT_EVAL);
2372:       assertEquals(1, Node.DECR_FLAG);
2373:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2374:       assertEquals(12, Node.COLUMN_BITS);
2375:       assertEquals(4095, Node.COLUMN_MASK);
2376:       assertFalse(node0.equals((Object)node6));
2377:       assertFalse(node0.equals((Object)node2));
2378:       assertFalse(node0.equals((Object)node5));
2379:       assertFalse(node0.equals((Object)node4));
2380:       assertFalse(node0.equals((Object)node1));
2381:       assertFalse(node0.equals((Object)node3));
2382:       assertFalse(iterable1.equals((Object)iterable0));
2383:       assertNotNull(iterable1);
2384:       assertFalse(node0.isFor());
2385:       assertFalse(node0.isEmpty());
2386:       assertFalse(node0.isIf());
2387:       assertFalse(node0.isArrayLit());
2388:       assertFalse(node0.isTry());
2389:       assertFalse(node0.isDelProp());
2390:       assertFalse(node0.isFunction());
2391:       assertFalse(node0.isRegExp());
2392:       assertFalse(node0.isCase());
2393:       assertFalse(node0.isSwitch());
2394:       assertFalse(node0.isParamList());
2395:       assertEquals((-1), node0.getCharno());
2396:       assertFalse(node0.isDebugger());
2397:       assertFalse(node0.isString());
2398:       assertEquals((-1388), node0.getType());
2399:       assertFalse(node0.isGetterDef());
2400:       assertFalse(node0.isStringKey());
2401:       assertFalse(node0.isVar());
2402:       assertFalse(node0.isCall());
2403:       assertFalse(node0.isBreak());
2404:       assertFalse(node0.isName());
2405:       assertEquals(0, node0.getChildCount());
2406:       assertFalse(node0.isComma());
2407:       assertFalse(node0.isDefaultCase());
2408:       assertFalse(node0.isAssignAdd());
2409:       assertFalse(node0.isDo());
2410:       assertFalse(node0.isVoid());
2411:       assertFalse(node0.isNew());
2412:       assertFalse(node0.isAdd());
2413:       assertFalse(node0.isNull());
2414:       assertFalse(node0.isTrue());
2415:       assertFalse(node0.isOr());
2416:       assertFalse(node0.isGetElem());
2417:       assertFalse(node0.isCast());
2418:       assertFalse(node0.hasOneChild());
2419:       assertFalse(node0.isLabelName());
2420:       assertFalse(node0.isLabel());
2421:       assertFalse(node0.isReturn());
2422:       assertFalse(node0.isExprResult());
2423:       assertFalse(node0.isDec());
2424:       assertFalse(node0.hasChildren());
2425:       assertFalse(node0.isWith());
2426:       assertFalse(node0.hasMoreThanOneChild());
2427:       assertFalse(node0.isAssign());
2428:       assertFalse(node0.isTypeOf());
2429:       assertFalse(node0.isContinue());
2430:       assertFalse(node0.isAnd());
2431:       assertFalse(node0.isWhile());
2432:       assertFalse(node0.isGetProp());
2433:       assertFalse(node0.isScript());
2434:       assertFalse(node0.isNumber());
2435:       assertEquals((-1), node0.getSourcePosition());
2436:       assertFalse(node0.isNot());
2437:       assertFalse(node0.isObjectLit());
2438:       assertFalse(node0.isThrow());
2439:       assertFalse(node0.isFalse());
2440:       assertFalse(node0.isThis());
2441:       assertFalse(node0.isBlock());
2442:       assertFalse(node0.isHook());
2443:       assertFalse(node0.isInstanceOf());
2444:       assertFalse(node0.isCatch());
2445:       assertEquals((-1), node0.getLineno());
2446:       assertFalse(node0.isSetterDef());
2447:       assertFalse(node0.isNE());
2448:       assertFalse(node0.isInc());
2449:       assertFalse(node0.isIn());
2450:       
2451:       // Undeclared exception!
2452:       try { 
2453:         node2.getAncestor((-882));
2454:         fail("Expecting exception: IllegalArgumentException");
2455:       
2456:       } catch(IllegalArgumentException e) {
2457:          //
2458:          // no message in exception (getMessage() returned null)
2459:          //
2460:          verifyException("com.google.common.base.Preconditions", e);
2461:       }
2462:   }
2463: }
RegularFileObject[/tmp/EvoSuite_66_1628161098733/com/google/javascript/rhino/Node_66_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:58:19 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_66_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_66_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.EmptyImmutableSet",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_66_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Preconditions",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.collect.ImmutableSet",
339:       "com.google.common.collect.EmptyImmutableSet",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
346:       "com.google.common.collect.Sets",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.JSTypeExpression",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.common.collect.Iterables",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator"
366:     );
367:   }
368: }

[MASTER] 10:58:19.327 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "Mk";
Node node0 = Node.newString((-1388), "Mk", 113, (-1388));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node0);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertEquals((-1388), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());

Node node1 = Node.newNumber((double) 16);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());

Node node2 = new Node(1524, node0, node0, node0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertEquals((-1388), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isVoid());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertEquals(1524, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isFunction());

Node node3 = Node.newNumber((double) 2);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertNotSame(node3, node1);
assertNotNull(node3);
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isBlock());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.isDo());
assertFalse(node3.isSwitch());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertFalse(node3.isWith());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWhile());
assertTrue(node3.isNumber());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isFalse());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node3);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertNotSame(node3, node1);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertEquals((-1388), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isBlock());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.isDo());
assertFalse(node3.isSwitch());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertFalse(node3.isWith());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWhile());
assertTrue(node3.isNumber());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isFalse());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());

Node node4 = Node.newNumber((double) 39, 52, 4);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertNotSame(node4, node1);
assertNotSame(node4, node3);
assertNotNull(node4);
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertFalse(node4.isLabelName());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isCast());
assertFalse(node4.isDo());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.isNot());
assertFalse(node4.isName());
assertFalse(node4.isAnd());
assertFalse(node4.isDebugger());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertEquals(212996, node4.getSourcePosition());
assertFalse(node4.isVoid());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.hasChildren());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isComma());
assertFalse(node4.isReturn());
assertFalse(node4.isIn());
assertTrue(node4.isNumber());
assertFalse(node4.isCase());
assertFalse(node4.isIf());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDelProp());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isNE());
assertFalse(node4.isArrayLit());
assertFalse(node4.isEmpty());
assertFalse(node4.isInc());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertFalse(node4.isSetterDef());
assertEquals(52, node4.getLineno());
assertEquals(4, node4.getCharno());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isRegExp());
assertEquals(39, node4.getType());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());

Node node5 = Node.newNumber(0.0, 12, 4);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertNotSame(node5, node1);
assertNotSame(node5, node4);
assertNotSame(node5, node3);
assertNotNull(node5);
assertFalse(node5.isBreak());
assertFalse(node5.isComma());
assertFalse(node5.isFalse());
assertFalse(node5.isGetProp());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isSwitch());
assertFalse(node5.isInc());
assertFalse(node5.isThrow());
assertFalse(node5.isIf());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetterDef());
assertEquals(49156, node5.getSourcePosition());
assertFalse(node5.isIn());
assertFalse(node5.isArrayLit());
assertFalse(node5.isNE());
assertFalse(node5.isWith());
assertEquals(4, node5.getCharno());
assertFalse(node5.isRegExp());
assertFalse(node5.isCase());
assertFalse(node5.isCatch());
assertFalse(node5.isScript());
assertFalse(node5.hasOneChild());
assertFalse(node5.isHook());
assertFalse(node5.isInstanceOf());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isBlock());
assertEquals(39, node5.getType());
assertFalse(node5.isThis());
assertFalse(node5.isFor());
assertFalse(node5.isSetterDef());
assertFalse(node5.isCall());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFunction());
assertFalse(node5.isDo());
assertFalse(node5.isNew());
assertFalse(node5.isContinue());
assertFalse(node5.isAdd());
assertEquals(12, node5.getLineno());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isVar());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isAssign());
assertFalse(node5.isDelProp());
assertFalse(node5.isTypeOf());
assertFalse(node5.isGetElem());
assertFalse(node5.isCast());
assertFalse(node5.isEmpty());
assertFalse(node5.isOr());
assertFalse(node5.isDebugger());
assertFalse(node5.isTrue());
assertFalse(node5.isNot());
assertFalse(node5.isVoid());
assertFalse(node5.isString());
assertFalse(node5.isExprResult());
assertTrue(node5.isNumber());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());

Node node6 = node5.srcrefTree(node1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertNotSame(node1, node4);
assertNotSame(node1, node3);
assertNotSame(node1, node5);
assertNotSame(node1, node6);
assertNotSame(node5, node1);
assertNotSame(node5, node4);
assertSame(node5, node6);
assertNotSame(node5, node3);
assertSame(node6, node5);
assertNotSame(node6, node4);
assertNotSame(node6, node3);
assertNotSame(node6, node1);
assertNotNull(node6);
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node5.isBreak());
assertFalse(node5.isComma());
assertFalse(node5.isFalse());
assertFalse(node5.isGetProp());
assertFalse(node5.isObjectLit());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isAnd());
assertFalse(node5.isSwitch());
assertFalse(node5.isInc());
assertFalse(node5.isThrow());
assertFalse(node5.isIf());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIn());
assertFalse(node5.isArrayLit());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isNE());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node5.isCase());
assertFalse(node5.isCatch());
assertFalse(node5.isScript());
assertFalse(node5.hasOneChild());
assertFalse(node5.isHook());
assertFalse(node5.isInstanceOf());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isBlock());
assertEquals(39, node5.getType());
assertFalse(node5.isThis());
assertFalse(node5.isFor());
assertFalse(node5.isSetterDef());
assertFalse(node5.isCall());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFunction());
assertFalse(node5.isDo());
assertFalse(node5.isNew());
assertFalse(node5.isContinue());
assertFalse(node5.isAdd());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isVar());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isAssign());
assertFalse(node5.isDelProp());
assertFalse(node5.isTypeOf());
assertFalse(node5.isGetElem());
assertFalse(node5.isCast());
assertFalse(node5.isEmpty());
assertFalse(node5.isOr());
assertFalse(node5.isDebugger());
assertFalse(node5.isTrue());
assertFalse(node5.isNot());
assertFalse(node5.isVoid());
assertFalse(node5.isString());
assertFalse(node5.isExprResult());
assertTrue(node5.isNumber());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());
assertFalse(node6.isAnd());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isWith());
assertFalse(node6.isNot());
assertFalse(node6.isObjectLit());
assertFalse(node6.isGetProp());
assertFalse(node6.isComma());
assertFalse(node6.isThis());
assertFalse(node6.isScript());
assertFalse(node6.hasOneChild());
assertFalse(node6.isHook());
assertFalse(node6.isGetElem());
assertFalse(node6.isDec());
assertFalse(node6.hasChildren());
assertFalse(node6.isAssign());
assertFalse(node6.isTypeOf());
assertFalse(node6.isExprResult());
assertFalse(node6.isBreak());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isCase());
assertEquals(39, node6.getType());
assertFalse(node6.isOr());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isNew());
assertFalse(node6.isLabel());
assertFalse(node6.isAdd());
assertFalse(node6.isBlock());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isDo());
assertFalse(node6.isStringKey());
assertFalse(node6.isVar());
assertFalse(node6.isGetterDef());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isParamList());
assertFalse(node6.isArrayLit());
assertFalse(node6.isLabelName());
assertFalse(node6.isSwitch());
assertFalse(node6.isCatch());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isRegExp());
assertFalse(node6.isFunction());
assertFalse(node6.isSetterDef());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isTry());
assertFalse(node6.isEmpty());
assertFalse(node6.isFor());
assertFalse(node6.isCall());
assertFalse(node6.isVoid());
assertFalse(node6.isNE());
assertFalse(node6.isNull());
assertFalse(node6.isTrue());
assertFalse(node6.isIf());
assertFalse(node6.isDelProp());
assertFalse(node6.isName());
assertFalse(node6.isContinue());
assertFalse(node6.isIn());
assertFalse(node6.isString());
assertFalse(node6.isReturn());
assertFalse(node6.isInc());
assertTrue(node6.isNumber());
assertFalse(node6.isWhile());
assertFalse(node6.isThrow());
assertFalse(node6.isCast());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isFalse());
assertFalse(node6.isDebugger());

Iterable<Node> iterable0 = node6.children();
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node0));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertNotSame(node1, node4);
assertNotSame(node1, node3);
assertNotSame(node1, node5);
assertNotSame(node1, node6);
assertNotSame(node5, node1);
assertNotSame(node5, node4);
assertSame(node5, node6);
assertNotSame(node5, node3);
assertSame(node6, node5);
assertNotSame(node6, node4);
assertNotSame(node6, node3);
assertNotSame(node6, node1);
assertNotNull(iterable0);
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node5.isBreak());
assertFalse(node5.isComma());
assertFalse(node5.isFalse());
assertFalse(node5.isGetProp());
assertFalse(node5.isObjectLit());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isAnd());
assertFalse(node5.isSwitch());
assertFalse(node5.isInc());
assertFalse(node5.isThrow());
assertFalse(node5.isIf());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIn());
assertFalse(node5.isArrayLit());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isNE());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node5.isCase());
assertFalse(node5.isCatch());
assertFalse(node5.isScript());
assertFalse(node5.hasOneChild());
assertFalse(node5.isHook());
assertFalse(node5.isInstanceOf());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isBlock());
assertEquals(39, node5.getType());
assertFalse(node5.isThis());
assertFalse(node5.isFor());
assertFalse(node5.isSetterDef());
assertFalse(node5.isCall());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFunction());
assertFalse(node5.isDo());
assertFalse(node5.isNew());
assertFalse(node5.isContinue());
assertFalse(node5.isAdd());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isVar());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isAssign());
assertFalse(node5.isDelProp());
assertFalse(node5.isTypeOf());
assertFalse(node5.isGetElem());
assertFalse(node5.isCast());
assertFalse(node5.isEmpty());
assertFalse(node5.isOr());
assertFalse(node5.isDebugger());
assertFalse(node5.isTrue());
assertFalse(node5.isNot());
assertFalse(node5.isVoid());
assertFalse(node5.isString());
assertFalse(node5.isExprResult());
assertTrue(node5.isNumber());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());
assertFalse(node6.isAnd());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isWith());
assertFalse(node6.isNot());
assertFalse(node6.isObjectLit());
assertFalse(node6.isGetProp());
assertFalse(node6.isComma());
assertFalse(node6.isThis());
assertFalse(node6.isScript());
assertFalse(node6.hasOneChild());
assertFalse(node6.isHook());
assertFalse(node6.isGetElem());
assertFalse(node6.isDec());
assertFalse(node6.hasChildren());
assertFalse(node6.isAssign());
assertFalse(node6.isTypeOf());
assertFalse(node6.isExprResult());
assertFalse(node6.isBreak());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isCase());
assertEquals(39, node6.getType());
assertFalse(node6.isOr());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isNew());
assertFalse(node6.isLabel());
assertFalse(node6.isAdd());
assertFalse(node6.isBlock());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isDo());
assertFalse(node6.isStringKey());
assertFalse(node6.isVar());
assertFalse(node6.isGetterDef());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isParamList());
assertFalse(node6.isArrayLit());
assertFalse(node6.isLabelName());
assertFalse(node6.isSwitch());
assertFalse(node6.isCatch());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isRegExp());
assertFalse(node6.isFunction());
assertFalse(node6.isSetterDef());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isTry());
assertFalse(node6.isEmpty());
assertFalse(node6.isFor());
assertFalse(node6.isCall());
assertFalse(node6.isVoid());
assertFalse(node6.isNE());
assertFalse(node6.isNull());
assertFalse(node6.isTrue());
assertFalse(node6.isIf());
assertFalse(node6.isDelProp());
assertFalse(node6.isName());
assertFalse(node6.isContinue());
assertFalse(node6.isIn());
assertFalse(node6.isString());
assertFalse(node6.isReturn());
assertFalse(node6.isInc());
assertTrue(node6.isNumber());
assertFalse(node6.isWhile());
assertFalse(node6.isThrow());
assertFalse(node6.isCast());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isFalse());
assertFalse(node6.isDebugger());
assertFalse(iterable0.contains(node4));

boolean boolean0 = node5.isQualifiedName();
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertNotSame(node5, node1);
assertNotSame(node5, node4);
assertSame(node5, node6);
assertNotSame(node5, node3);
assertFalse(boolean0);
assertFalse(node5.isBreak());
assertFalse(node5.isComma());
assertFalse(node5.isFalse());
assertFalse(node5.isGetProp());
assertFalse(node5.isObjectLit());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isAnd());
assertFalse(node5.isSwitch());
assertFalse(node5.isInc());
assertFalse(node5.isThrow());
assertFalse(node5.isIf());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIn());
assertFalse(node5.isArrayLit());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isNE());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node5.isCase());
assertFalse(node5.isCatch());
assertFalse(node5.isScript());
assertFalse(node5.hasOneChild());
assertFalse(node5.isHook());
assertFalse(node5.isInstanceOf());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isBlock());
assertEquals(39, node5.getType());
assertFalse(node5.isThis());
assertFalse(node5.isFor());
assertFalse(node5.isSetterDef());
assertFalse(node5.isCall());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFunction());
assertFalse(node5.isDo());
assertFalse(node5.isNew());
assertFalse(node5.isContinue());
assertFalse(node5.isAdd());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isVar());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isAssign());
assertFalse(node5.isDelProp());
assertFalse(node5.isTypeOf());
assertFalse(node5.isGetElem());
assertFalse(node5.isCast());
assertFalse(node5.isEmpty());
assertFalse(node5.isOr());
assertFalse(node5.isDebugger());
assertFalse(node5.isTrue());
assertFalse(node5.isNot());
assertFalse(node5.isVoid());
assertFalse(node5.isString());
assertFalse(node5.isExprResult());
assertTrue(node5.isNumber());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());

boolean boolean1 = node0.isOptionalArg();
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertEquals((-1388), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());

node4.setIsSyntheticBlock(false);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node3));
assertNotSame(node4, node5);
assertNotSame(node4, node1);
assertNotSame(node4, node6);
assertNotSame(node4, node3);
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertFalse(node4.isLabelName());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isCast());
assertFalse(node4.isDo());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.isNot());
assertFalse(node4.isName());
assertFalse(node4.isAnd());
assertFalse(node4.isDebugger());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertEquals(212996, node4.getSourcePosition());
assertFalse(node4.isVoid());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.hasChildren());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isComma());
assertFalse(node4.isReturn());
assertFalse(node4.isIn());
assertTrue(node4.isNumber());
assertFalse(node4.isCase());
assertFalse(node4.isIf());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDelProp());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isNE());
assertFalse(node4.isArrayLit());
assertFalse(node4.isEmpty());
assertFalse(node4.isInc());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertFalse(node4.isSetterDef());
assertEquals(52, node4.getLineno());
assertEquals(4, node4.getCharno());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isRegExp());
assertEquals(39, node4.getType());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());

boolean boolean2 = node0.isQuotedString();
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertEquals((-1388), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());

boolean boolean3 = node0.isEquivalentToTyped(node2);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertEquals((-1388), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isVoid());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertEquals(1524, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isFunction());

Iterable<Node> iterable1 = node0.siblings();
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(iterable1.equals((Object)iterable0));
assertNotNull(iterable1);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertEquals((-1388), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());

node2.getAncestor((-882));

[MASTER] 10:58:20.273 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_79_1628161100251/com/google/javascript/rhino/Node_79_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_79_1628161100251/com/google/javascript/rhino/Node_79_tmp__ESTest_scaffolding.java]]
[MASTER] 10:58:20.273 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:20.273 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:20.274 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 10:58:20.275 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_79_1628161100251/com/google/javascript/rhino/Node_79_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:58:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_79_tmp__ESTest extends Node_79_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(3479);
21:       assertEquals(52, Node.LENGTH);
22:       assertEquals(57, Node.REFLECTED_OBJECT);
23:       assertEquals(40, Node.ORIGINALNAME_PROP);
24:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
25:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
26:       assertEquals(49, Node.DIRECT_EVAL);
27:       assertEquals(50, Node.FREE_CALL);
28:       assertEquals(48, Node.DIRECTIVES);
29:       assertEquals(54, Node.SLASH_V);
30:       assertEquals(32, Node.INCRDECR_PROP);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(51, Node.STATIC_SOURCE_FILE);
33:       assertEquals(37, Node.OPT_ARG_NAME);
34:       assertEquals(4095, Node.COLUMN_MASK);
35:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
36:       assertEquals(1, Node.DECR_FLAG);
37:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
38:       assertEquals(12, Node.COLUMN_BITS);
39:       assertEquals(53, Node.INPUT_ID);
40:       assertEquals(29, Node.JSDOC_INFO_PROP);
41:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
42:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
43:       assertEquals(36, Node.QUOTED_PROP);
44:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
45:       assertEquals(43, Node.IS_CONSTANT_NAME);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(8, Node.FLAG_NO_THROWS);
49:       assertEquals(39, Node.EMPTY_BLOCK);
50:       assertEquals(55, Node.INFERRED_FUNCTION);
51:       assertEquals(57, Node.LAST_PROP);
52:       assertEquals(15, Node.NO_SIDE_EFFECTS);
53:       assertEquals(47, Node.IS_DISPATCHER);
54:       assertEquals(2, Node.POST_FLAG);
55:       assertEquals(30, Node.VAR_ARGS_NAME);
56:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
57:       assertNotNull(node0);
58:       assertFalse(node0.isSwitch());
59:       assertFalse(node0.isCase());
60:       assertFalse(node0.isInc());
61:       assertFalse(node0.isString());
62:       assertFalse(node0.isHook());
63:       assertFalse(node0.isThrow());
64:       assertFalse(node0.isIf());
65:       assertFalse(node0.isBreak());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isComma());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isTrue());
71:       assertFalse(node0.isNE());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isFunction());
74:       assertFalse(node0.isNot());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isExprResult());
77:       assertEquals((-1), node0.getSourcePosition());
78:       assertFalse(node0.isFalse());
79:       assertFalse(node0.isGetProp());
80:       assertFalse(node0.isCast());
81:       assertFalse(node0.isObjectLit());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.hasMoreThanOneChild());
88:       assertFalse(node0.isBlock());
89:       assertFalse(node0.isLabel());
90:       assertFalse(node0.isAssignAdd());
91:       assertFalse(node0.isReturn());
92:       assertFalse(node0.isWhile());
93:       assertFalse(node0.isVar());
94:       assertFalse(node0.isNull());
95:       assertFalse(node0.isDec());
96:       assertFalse(node0.isTypeOf());
97:       assertFalse(node0.hasChildren());
98:       assertFalse(node0.isAssign());
99:       assertFalse(node0.isGetElem());
100:       assertFalse(node0.isSetterDef());
101:       assertFalse(node0.isCall());
102:       assertEquals((-1), node0.getLineno());
103:       assertFalse(node0.isOr());
104:       assertEquals(3479, node0.getType());
105:       assertFalse(node0.isName());
106:       assertFalse(node0.isRegExp());
107:       assertFalse(node0.isDefaultCase());
108:       assertFalse(node0.isWith());
109:       assertFalse(node0.isScript());
110:       assertFalse(node0.isCatch());
111:       assertFalse(node0.hasOneChild());
112:       assertFalse(node0.isInstanceOf());
113:       assertEquals(0, node0.getChildCount());
114:       assertFalse(node0.isTry());
115:       assertFalse(node0.isThis());
116:       assertFalse(node0.isFor());
117:       assertFalse(node0.isNumber());
118:       assertFalse(node0.isLabelName());
119:       assertFalse(node0.isGetterDef());
120:       assertFalse(node0.isArrayLit());
121:       assertFalse(node0.isStringKey());
122:       assertEquals((-1), node0.getCharno());
123:       assertFalse(node0.isParamList());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(52, Node.LENGTH);
127:       assertEquals(57, Node.REFLECTED_OBJECT);
128:       assertEquals(40, Node.ORIGINALNAME_PROP);
129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
130:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
131:       assertEquals(49, Node.DIRECT_EVAL);
132:       assertEquals(50, Node.FREE_CALL);
133:       assertEquals(48, Node.DIRECTIVES);
134:       assertEquals(54, Node.SLASH_V);
135:       assertEquals(32, Node.INCRDECR_PROP);
136:       assertEquals(46, Node.IS_NAMESPACE);
137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
138:       assertEquals(37, Node.OPT_ARG_NAME);
139:       assertEquals(4095, Node.COLUMN_MASK);
140:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
141:       assertEquals(1, Node.DECR_FLAG);
142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
143:       assertEquals(12, Node.COLUMN_BITS);
144:       assertEquals(53, Node.INPUT_ID);
145:       assertEquals(29, Node.JSDOC_INFO_PROP);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
148:       assertEquals(36, Node.QUOTED_PROP);
149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
150:       assertEquals(43, Node.IS_CONSTANT_NAME);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(8, Node.FLAG_NO_THROWS);
154:       assertEquals(39, Node.EMPTY_BLOCK);
155:       assertEquals(55, Node.INFERRED_FUNCTION);
156:       assertEquals(57, Node.LAST_PROP);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(47, Node.IS_DISPATCHER);
159:       assertEquals(2, Node.POST_FLAG);
160:       assertEquals(30, Node.VAR_ARGS_NAME);
161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
162:       assertNotNull(iterable0);
163:       assertFalse(node0.isSwitch());
164:       assertFalse(node0.isCase());
165:       assertFalse(node0.isInc());
166:       assertFalse(node0.isString());
167:       assertFalse(node0.isHook());
168:       assertFalse(node0.isThrow());
169:       assertFalse(node0.isIf());
170:       assertFalse(node0.isBreak());
171:       assertFalse(node0.isDelProp());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isEmpty());
174:       assertFalse(node0.isIn());
175:       assertFalse(node0.isTrue());
176:       assertFalse(node0.isNE());
177:       assertFalse(node0.isDebugger());
178:       assertFalse(node0.isFunction());
179:       assertFalse(node0.isNot());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isExprResult());
182:       assertEquals((-1), node0.getSourcePosition());
183:       assertFalse(node0.isFalse());
184:       assertFalse(node0.isGetProp());
185:       assertFalse(node0.isCast());
186:       assertFalse(node0.isObjectLit());
187:       assertFalse(node0.isAnd());
188:       assertFalse(node0.isDo());
189:       assertFalse(node0.isAdd());
190:       assertFalse(node0.isNew());
191:       assertFalse(node0.isContinue());
192:       assertFalse(node0.hasMoreThanOneChild());
193:       assertFalse(node0.isBlock());
194:       assertFalse(node0.isLabel());
195:       assertFalse(node0.isAssignAdd());
196:       assertFalse(node0.isReturn());
197:       assertFalse(node0.isWhile());
198:       assertFalse(node0.isVar());
199:       assertFalse(node0.isNull());
200:       assertFalse(node0.isDec());
201:       assertFalse(node0.isTypeOf());
202:       assertFalse(node0.hasChildren());
203:       assertFalse(node0.isAssign());
204:       assertFalse(node0.isGetElem());
205:       assertFalse(node0.isSetterDef());
206:       assertFalse(node0.isCall());
207:       assertEquals((-1), node0.getLineno());
208:       assertFalse(node0.isOr());
209:       assertEquals(3479, node0.getType());
210:       assertFalse(node0.isName());
211:       assertFalse(node0.isRegExp());
212:       assertFalse(node0.isDefaultCase());
213:       assertFalse(node0.isWith());
214:       assertFalse(node0.isScript());
215:       assertFalse(node0.isCatch());
216:       assertFalse(node0.hasOneChild());
217:       assertFalse(node0.isInstanceOf());
218:       assertEquals(0, node0.getChildCount());
219:       assertFalse(node0.isTry());
220:       assertFalse(node0.isThis());
221:       assertFalse(node0.isFor());
222:       assertFalse(node0.isNumber());
223:       assertFalse(node0.isLabelName());
224:       assertFalse(node0.isGetterDef());
225:       assertFalse(node0.isArrayLit());
226:       assertFalse(node0.isStringKey());
227:       assertEquals((-1), node0.getCharno());
228:       assertFalse(node0.isParamList());
229:       assertFalse(iterable0.contains(node0));
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_79_1628161100251/com/google/javascript/rhino/Node_79_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:58:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_79_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_79_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.EmptyImmutableSet",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_79_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Preconditions",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.collect.ImmutableSet",
339:       "com.google.common.collect.EmptyImmutableSet",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
346:       "com.google.common.collect.Sets",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.JSTypeExpression",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.common.collect.Iterables",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator"
366:     );
367:   }
368: }

[MASTER] 10:58:20.276 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(3479);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node0);
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals(3479, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());

Iterable<Node> iterable0 = node0.children();
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(iterable0);
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals(3479, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(iterable0.contains(node0));


[MASTER] 10:58:49.476 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:49.838 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:50.156 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:50.403 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:50.660 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:51.649 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:51.965 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:52.143 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:52.412 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:52.660 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:52.845 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:53.025 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:53.271 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:53.530 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:53.727 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:53.967 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:54.228 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:54.414 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:54.683 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:54.877 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:55.078 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:55.283 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:55.539 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:55.729 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:55.933 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:56.173 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:56.373 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:56.561 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:56.772 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:56.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:57.189 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:58.568 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:58.783 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:58.967 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:59.186 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:59.362 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:59.556 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:59.793 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:59.998 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:00.173 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:00.351 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:00.598 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:00.777 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:00.963 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:01.169 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:01.378 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:01.587 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:01.933 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:02.189 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:02.368 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:02.558 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:02.740 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:02.981 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:03.168 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:03.368 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:03.575 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:03.829 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:04.023 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:04.318 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:04.573 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:04.790 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:04.964 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:05.166 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:05.371 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:05.566 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:05.819 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:06.032 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:06.755 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:06.933 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:07.111 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:07.336 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:07.524 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:07.736 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:07.922 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:09.056 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:09.265 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:09.471 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:09.709 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:09.987 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:10.164 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:10.408 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:10.677 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:10.871 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:11.054 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:11.259 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:11.661 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:11.833 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:12.018 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:59:12.214 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/25
* Done!

* Computation finished
