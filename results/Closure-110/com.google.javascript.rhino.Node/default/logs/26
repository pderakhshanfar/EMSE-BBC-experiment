* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 18536
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1919503386
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:49:22.733 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:49:31.569 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:49:39.387 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 606s and 444 generations, 198527 statements, best individual has fitness: 2872.0
* Minimizing test suite
[MASTER] 11:00:51.046 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 785
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 605
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 466
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2222
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 561
* Generated 1056 tests with total length 10503
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:02:05.706 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6718666666666666% of time used, but only 105/1056 tests minimized), falling back to using all assertions
[MASTER] 11:02:25.414 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
[MASTER] 11:02:40.879 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 15 seconds more than allowed.
[MASTER] 11:02:47.660 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_140_1628161367310/com/google/javascript/rhino/Node_140_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_140_1628161367310/com/google/javascript/rhino/Node_140_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:47.660 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:47.660 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:47.666 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1895
[MASTER] 11:02:47.668 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_140_1628161367310/com/google/javascript/rhino/Node_140_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_140_tmp__ESTest extends Node_140_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(0, 0, 0);
22:       assertFalse(node0.isAnd());
23:       assertFalse(node0.isWith());
24:       assertFalse(node0.isNot());
25:       assertFalse(node0.isObjectLit());
26:       assertEquals(0, node0.getCharno());
27:       assertFalse(node0.isComma());
28:       assertFalse(node0.isInstanceOf());
29:       assertFalse(node0.isBreak());
30:       assertFalse(node0.isCast());
31:       assertFalse(node0.isExprResult());
32:       assertFalse(node0.isLabelName());
33:       assertFalse(node0.isAssign());
34:       assertFalse(node0.isHook());
35:       assertFalse(node0.isDec());
36:       assertFalse(node0.hasChildren());
37:       assertFalse(node0.isThis());
38:       assertFalse(node0.isGetProp());
39:       assertFalse(node0.hasOneChild());
40:       assertFalse(node0.isNumber());
41:       assertFalse(node0.isString());
42:       assertFalse(node0.isScript());
43:       assertFalse(node0.isCase());
44:       assertFalse(node0.isContinue());
45:       assertFalse(node0.hasMoreThanOneChild());
46:       assertFalse(node0.isThrow());
47:       assertFalse(node0.isFalse());
48:       assertFalse(node0.isIf());
49:       assertFalse(node0.isNE());
50:       assertFalse(node0.isIn());
51:       assertFalse(node0.isSetterDef());
52:       assertFalse(node0.isInc());
53:       assertFalse(node0.isDefaultCase());
54:       assertEquals(0, node0.getChildCount());
55:       assertFalse(node0.isTrue());
56:       assertFalse(node0.isParamList());
57:       assertFalse(node0.isFunction());
58:       assertFalse(node0.isRegExp());
59:       assertFalse(node0.isVoid());
60:       assertFalse(node0.isArrayLit());
61:       assertEquals(0, node0.getLineno());
62:       assertFalse(node0.isCatch());
63:       assertFalse(node0.isStringKey());
64:       assertFalse(node0.isGetterDef());
65:       assertFalse(node0.isFor());
66:       assertFalse(node0.isBlock());
67:       assertFalse(node0.isDebugger());
68:       assertFalse(node0.isTry());
69:       assertFalse(node0.isDo());
70:       assertFalse(node0.isWhile());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isLabel());
73:       assertFalse(node0.isSwitch());
74:       assertFalse(node0.isTypeOf());
75:       assertEquals(0, node0.getType());
76:       assertFalse(node0.isCall());
77:       assertFalse(node0.isGetElem());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isDelProp());
80:       assertEquals(0, node0.getSourcePosition());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isNull());
83:       assertFalse(node0.isNew());
84:       assertFalse(node0.isOr());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isAdd());
87:       assertFalse(node0.isEmpty());
88:       assertEquals(55, Node.INFERRED_FUNCTION);
89:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(39, Node.EMPTY_BLOCK);
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
96:       assertEquals(8, Node.FLAG_NO_THROWS);
97:       assertEquals(50, Node.FREE_CALL);
98:       assertEquals(40, Node.ORIGINALNAME_PROP);
99:       assertEquals(29, Node.JSDOC_INFO_PROP);
100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
101:       assertEquals(47, Node.IS_DISPATCHER);
102:       assertEquals(2, Node.POST_FLAG);
103:       assertEquals(30, Node.VAR_ARGS_NAME);
104:       assertEquals(1, Node.DECR_FLAG);
105:       assertEquals(12, Node.COLUMN_BITS);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(49, Node.DIRECT_EVAL);
109:       assertEquals(32, Node.INCRDECR_PROP);
110:       assertEquals(46, Node.IS_NAMESPACE);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
117:       assertEquals(56, Node.CHANGE_TIME);
118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
123:       assertEquals(4095, Node.COLUMN_MASK);
124:       assertNotNull(node0);
125:       
126:       boolean boolean0 = node0.getBooleanProp(0);
127:       assertFalse(boolean0);
128:       assertFalse(node0.isAnd());
129:       assertFalse(node0.isWith());
130:       assertFalse(node0.isNot());
131:       assertFalse(node0.isObjectLit());
132:       assertEquals(0, node0.getCharno());
133:       assertFalse(node0.isComma());
134:       assertFalse(node0.isInstanceOf());
135:       assertFalse(node0.isBreak());
136:       assertFalse(node0.isCast());
137:       assertFalse(node0.isExprResult());
138:       assertFalse(node0.isLabelName());
139:       assertFalse(node0.isAssign());
140:       assertFalse(node0.isHook());
141:       assertFalse(node0.isDec());
142:       assertFalse(node0.hasChildren());
143:       assertFalse(node0.isThis());
144:       assertFalse(node0.isGetProp());
145:       assertFalse(node0.hasOneChild());
146:       assertFalse(node0.isNumber());
147:       assertFalse(node0.isString());
148:       assertFalse(node0.isScript());
149:       assertFalse(node0.isCase());
150:       assertFalse(node0.isContinue());
151:       assertFalse(node0.hasMoreThanOneChild());
152:       assertFalse(node0.isThrow());
153:       assertFalse(node0.isFalse());
154:       assertFalse(node0.isIf());
155:       assertFalse(node0.isNE());
156:       assertFalse(node0.isIn());
157:       assertFalse(node0.isSetterDef());
158:       assertFalse(node0.isInc());
159:       assertFalse(node0.isDefaultCase());
160:       assertEquals(0, node0.getChildCount());
161:       assertFalse(node0.isTrue());
162:       assertFalse(node0.isParamList());
163:       assertFalse(node0.isFunction());
164:       assertFalse(node0.isRegExp());
165:       assertFalse(node0.isVoid());
166:       assertFalse(node0.isArrayLit());
167:       assertEquals(0, node0.getLineno());
168:       assertFalse(node0.isCatch());
169:       assertFalse(node0.isStringKey());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isFor());
172:       assertFalse(node0.isBlock());
173:       assertFalse(node0.isDebugger());
174:       assertFalse(node0.isTry());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.isWhile());
177:       assertFalse(node0.isReturn());
178:       assertFalse(node0.isLabel());
179:       assertFalse(node0.isSwitch());
180:       assertFalse(node0.isTypeOf());
181:       assertEquals(0, node0.getType());
182:       assertFalse(node0.isCall());
183:       assertFalse(node0.isGetElem());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.isDelProp());
186:       assertEquals(0, node0.getSourcePosition());
187:       assertFalse(node0.isVar());
188:       assertFalse(node0.isNull());
189:       assertFalse(node0.isNew());
190:       assertFalse(node0.isOr());
191:       assertFalse(node0.isAssignAdd());
192:       assertFalse(node0.isAdd());
193:       assertFalse(node0.isEmpty());
194:       assertEquals(55, Node.INFERRED_FUNCTION);
195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(36, Node.QUOTED_PROP);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(8, Node.FLAG_NO_THROWS);
203:       assertEquals(50, Node.FREE_CALL);
204:       assertEquals(40, Node.ORIGINALNAME_PROP);
205:       assertEquals(29, Node.JSDOC_INFO_PROP);
206:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(2, Node.POST_FLAG);
209:       assertEquals(30, Node.VAR_ARGS_NAME);
210:       assertEquals(1, Node.DECR_FLAG);
211:       assertEquals(12, Node.COLUMN_BITS);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(32, Node.INCRDECR_PROP);
216:       assertEquals(46, Node.IS_NAMESPACE);
217:       assertEquals(54, Node.SLASH_V);
218:       assertEquals(57, Node.REFLECTED_OBJECT);
219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
223:       assertEquals(56, Node.CHANGE_TIME);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(48, Node.DIRECTIVES);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(37, Node.OPT_ARG_NAME);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(4095, Node.COLUMN_MASK);
230:       
231:       boolean boolean1 = node0.mayMutateGlobalStateOrThrow();
232:       assertTrue(boolean1);
233:       assertFalse(node0.isAnd());
234:       assertFalse(node0.isWith());
235:       assertFalse(node0.isNot());
236:       assertFalse(node0.isObjectLit());
237:       assertEquals(0, node0.getCharno());
238:       assertFalse(node0.isComma());
239:       assertFalse(node0.isInstanceOf());
240:       assertFalse(node0.isBreak());
241:       assertFalse(node0.isCast());
242:       assertFalse(node0.isExprResult());
243:       assertFalse(node0.isLabelName());
244:       assertFalse(node0.isAssign());
245:       assertFalse(node0.isHook());
246:       assertFalse(node0.isDec());
247:       assertFalse(node0.hasChildren());
248:       assertFalse(node0.isThis());
249:       assertFalse(node0.isGetProp());
250:       assertFalse(node0.hasOneChild());
251:       assertFalse(node0.isNumber());
252:       assertFalse(node0.isString());
253:       assertFalse(node0.isScript());
254:       assertFalse(node0.isCase());
255:       assertFalse(node0.isContinue());
256:       assertFalse(node0.hasMoreThanOneChild());
257:       assertFalse(node0.isThrow());
258:       assertFalse(node0.isFalse());
259:       assertFalse(node0.isIf());
260:       assertFalse(node0.isNE());
261:       assertFalse(node0.isIn());
262:       assertFalse(node0.isSetterDef());
263:       assertFalse(node0.isInc());
264:       assertFalse(node0.isDefaultCase());
265:       assertEquals(0, node0.getChildCount());
266:       assertFalse(node0.isTrue());
267:       assertFalse(node0.isParamList());
268:       assertFalse(node0.isFunction());
269:       assertFalse(node0.isRegExp());
270:       assertFalse(node0.isVoid());
271:       assertFalse(node0.isArrayLit());
272:       assertEquals(0, node0.getLineno());
273:       assertFalse(node0.isCatch());
274:       assertFalse(node0.isStringKey());
275:       assertFalse(node0.isGetterDef());
276:       assertFalse(node0.isFor());
277:       assertFalse(node0.isBlock());
278:       assertFalse(node0.isDebugger());
279:       assertFalse(node0.isTry());
280:       assertFalse(node0.isDo());
281:       assertFalse(node0.isWhile());
282:       assertFalse(node0.isReturn());
283:       assertFalse(node0.isLabel());
284:       assertFalse(node0.isSwitch());
285:       assertFalse(node0.isTypeOf());
286:       assertEquals(0, node0.getType());
287:       assertFalse(node0.isCall());
288:       assertFalse(node0.isGetElem());
289:       assertFalse(node0.isName());
290:       assertFalse(node0.isDelProp());
291:       assertEquals(0, node0.getSourcePosition());
292:       assertFalse(node0.isVar());
293:       assertFalse(node0.isNull());
294:       assertFalse(node0.isNew());
295:       assertFalse(node0.isOr());
296:       assertFalse(node0.isAssignAdd());
297:       assertFalse(node0.isAdd());
298:       assertFalse(node0.isEmpty());
299:       assertFalse(boolean1 == boolean0);
300:       assertEquals(55, Node.INFERRED_FUNCTION);
301:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
302:       assertEquals(43, Node.IS_CONSTANT_NAME);
303:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
304:       assertEquals(39, Node.EMPTY_BLOCK);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(36, Node.QUOTED_PROP);
307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
308:       assertEquals(8, Node.FLAG_NO_THROWS);
309:       assertEquals(50, Node.FREE_CALL);
310:       assertEquals(40, Node.ORIGINALNAME_PROP);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
313:       assertEquals(47, Node.IS_DISPATCHER);
314:       assertEquals(2, Node.POST_FLAG);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(1, Node.DECR_FLAG);
317:       assertEquals(12, Node.COLUMN_BITS);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(57, Node.LAST_PROP);
320:       assertEquals(49, Node.DIRECT_EVAL);
321:       assertEquals(32, Node.INCRDECR_PROP);
322:       assertEquals(46, Node.IS_NAMESPACE);
323:       assertEquals(54, Node.SLASH_V);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
329:       assertEquals(56, Node.CHANGE_TIME);
330:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
331:       assertEquals(48, Node.DIRECTIVES);
332:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
333:       assertEquals(37, Node.OPT_ARG_NAME);
334:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
335:       assertEquals(4095, Node.COLUMN_MASK);
336:       
337:       Node node1 = Node.newString("empty_block");
338:       assertFalse(node1.isCast());
339:       assertFalse(node1.hasOneChild());
340:       assertFalse(node1.isGetElem());
341:       assertFalse(node1.isAssign());
342:       assertFalse(node1.isNumber());
343:       assertFalse(node1.isTypeOf());
344:       assertEquals((-1), node1.getSourcePosition());
345:       assertFalse(node1.isExprResult());
346:       assertFalse(node1.isLabelName());
347:       assertEquals((-1), node1.getLineno());
348:       assertFalse(node1.isAnd());
349:       assertFalse(node1.isLabel());
350:       assertFalse(node1.isOr());
351:       assertFalse(node1.isContinue());
352:       assertFalse(node1.isDo());
353:       assertFalse(node1.isAssignAdd());
354:       assertFalse(node1.isNew());
355:       assertFalse(node1.isVar());
356:       assertFalse(node1.isHook());
357:       assertFalse(node1.isParamList());
358:       assertEquals((-1), node1.getCharno());
359:       assertFalse(node1.isStringKey());
360:       assertFalse(node1.isSwitch());
361:       assertFalse(node1.isInstanceOf());
362:       assertFalse(node1.isCatch());
363:       assertFalse(node1.isWith());
364:       assertFalse(node1.hasMoreThanOneChild());
365:       assertFalse(node1.isRegExp());
366:       assertFalse(node1.isScript());
367:       assertFalse(node1.isThis());
368:       assertFalse(node1.isBlock());
369:       assertFalse(node1.isTry());
370:       assertFalse(node1.isFor());
371:       assertFalse(node1.isCase());
372:       assertTrue(node1.isString());
373:       assertFalse(node1.isArrayLit());
374:       assertFalse(node1.isEmpty());
375:       assertFalse(node1.isGetterDef());
376:       assertFalse(node1.isFunction());
377:       assertFalse(node1.isNE());
378:       assertFalse(node1.isDebugger());
379:       assertFalse(node1.isTrue());
380:       assertFalse(node1.isIf());
381:       assertFalse(node1.isDelProp());
382:       assertFalse(node1.isVoid());
383:       assertEquals(40, node1.getType());
384:       assertFalse(node1.isIn());
385:       assertEquals(0, node1.getChildCount());
386:       assertFalse(node1.isInc());
387:       assertFalse(node1.isSetterDef());
388:       assertFalse(node1.isDefaultCase());
389:       assertFalse(node1.isThrow());
390:       assertFalse(node1.isCall());
391:       assertFalse(node1.isAdd());
392:       assertFalse(node1.isFalse());
393:       assertFalse(node1.isBreak());
394:       assertFalse(node1.isNull());
395:       assertFalse(node1.isName());
396:       assertFalse(node1.isReturn());
397:       assertFalse(node1.isNot());
398:       assertFalse(node1.isObjectLit());
399:       assertFalse(node1.isDec());
400:       assertFalse(node1.isComma());
401:       assertFalse(node1.isGetProp());
402:       assertFalse(node1.hasChildren());
403:       assertFalse(node1.isWhile());
404:       assertFalse(node1.equals((Object)node0));
405:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
406:       assertEquals(47, Node.IS_DISPATCHER);
407:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
408:       assertEquals(36, Node.QUOTED_PROP);
409:       assertEquals(29, Node.JSDOC_INFO_PROP);
410:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
411:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
412:       assertEquals(53, Node.INPUT_ID);
413:       assertEquals(55, Node.INFERRED_FUNCTION);
414:       assertEquals(12, Node.COLUMN_BITS);
415:       assertEquals(4095, Node.COLUMN_MASK);
416:       assertEquals(32, Node.INCRDECR_PROP);
417:       assertEquals(1, Node.DECR_FLAG);
418:       assertEquals(37, Node.OPT_ARG_NAME);
419:       assertEquals(56, Node.CHANGE_TIME);
420:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
421:       assertEquals(48, Node.DIRECTIVES);
422:       assertEquals(49, Node.DIRECT_EVAL);
423:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
424:       assertEquals(50, Node.FREE_CALL);
425:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
426:       assertEquals(54, Node.SLASH_V);
427:       assertEquals(57, Node.REFLECTED_OBJECT);
428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
429:       assertEquals(57, Node.LAST_PROP);
430:       assertEquals(8, Node.FLAG_NO_THROWS);
431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
432:       assertEquals(52, Node.LENGTH);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(39, Node.EMPTY_BLOCK);
435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
436:       assertEquals(30, Node.VAR_ARGS_NAME);
437:       assertEquals(46, Node.IS_NAMESPACE);
438:       assertEquals(2, Node.POST_FLAG);
439:       assertEquals(43, Node.IS_CONSTANT_NAME);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertNotNull(node1);
442:       
443:       boolean boolean2 = node1.isQuotedString();
444:       assertFalse(boolean2);
445:       assertFalse(node1.isCast());
446:       assertFalse(node1.hasOneChild());
447:       assertFalse(node1.isGetElem());
448:       assertFalse(node1.isAssign());
449:       assertFalse(node1.isNumber());
450:       assertFalse(node1.isTypeOf());
451:       assertEquals((-1), node1.getSourcePosition());
452:       assertFalse(node1.isExprResult());
453:       assertFalse(node1.isLabelName());
454:       assertEquals((-1), node1.getLineno());
455:       assertFalse(node1.isAnd());
456:       assertFalse(node1.isLabel());
457:       assertFalse(node1.isOr());
458:       assertFalse(node1.isContinue());
459:       assertFalse(node1.isDo());
460:       assertFalse(node1.isAssignAdd());
461:       assertFalse(node1.isNew());
462:       assertFalse(node1.isVar());
463:       assertFalse(node1.isHook());
464:       assertFalse(node1.isParamList());
465:       assertEquals((-1), node1.getCharno());
466:       assertFalse(node1.isStringKey());
467:       assertFalse(node1.isSwitch());
468:       assertFalse(node1.isInstanceOf());
469:       assertFalse(node1.isCatch());
470:       assertFalse(node1.isWith());
471:       assertFalse(node1.hasMoreThanOneChild());
472:       assertFalse(node1.isRegExp());
473:       assertFalse(node1.isScript());
474:       assertFalse(node1.isThis());
475:       assertFalse(node1.isBlock());
476:       assertFalse(node1.isTry());
477:       assertFalse(node1.isFor());
478:       assertFalse(node1.isCase());
479:       assertTrue(node1.isString());
480:       assertFalse(node1.isArrayLit());
481:       assertFalse(node1.isEmpty());
482:       assertFalse(node1.isGetterDef());
483:       assertFalse(node1.isFunction());
484:       assertFalse(node1.isNE());
485:       assertFalse(node1.isDebugger());
486:       assertFalse(node1.isTrue());
487:       assertFalse(node1.isIf());
488:       assertFalse(node1.isDelProp());
489:       assertFalse(node1.isVoid());
490:       assertEquals(40, node1.getType());
491:       assertFalse(node1.isIn());
492:       assertEquals(0, node1.getChildCount());
493:       assertFalse(node1.isInc());
494:       assertFalse(node1.isSetterDef());
495:       assertFalse(node1.isDefaultCase());
496:       assertFalse(node1.isThrow());
497:       assertFalse(node1.isCall());
498:       assertFalse(node1.isAdd());
499:       assertFalse(node1.isFalse());
500:       assertFalse(node1.isBreak());
501:       assertFalse(node1.isNull());
502:       assertFalse(node1.isName());
503:       assertFalse(node1.isReturn());
504:       assertFalse(node1.isNot());
505:       assertFalse(node1.isObjectLit());
506:       assertFalse(node1.isDec());
507:       assertFalse(node1.isComma());
508:       assertFalse(node1.isGetProp());
509:       assertFalse(node1.hasChildren());
510:       assertFalse(node1.isWhile());
511:       assertFalse(node1.equals((Object)node0));
512:       assertTrue(boolean2 == boolean0);
513:       assertFalse(boolean2 == boolean1);
514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
515:       assertEquals(47, Node.IS_DISPATCHER);
516:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
517:       assertEquals(36, Node.QUOTED_PROP);
518:       assertEquals(29, Node.JSDOC_INFO_PROP);
519:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
520:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
521:       assertEquals(53, Node.INPUT_ID);
522:       assertEquals(55, Node.INFERRED_FUNCTION);
523:       assertEquals(12, Node.COLUMN_BITS);
524:       assertEquals(4095, Node.COLUMN_MASK);
525:       assertEquals(32, Node.INCRDECR_PROP);
526:       assertEquals(1, Node.DECR_FLAG);
527:       assertEquals(37, Node.OPT_ARG_NAME);
528:       assertEquals(56, Node.CHANGE_TIME);
529:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
530:       assertEquals(48, Node.DIRECTIVES);
531:       assertEquals(49, Node.DIRECT_EVAL);
532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
533:       assertEquals(50, Node.FREE_CALL);
534:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
535:       assertEquals(54, Node.SLASH_V);
536:       assertEquals(57, Node.REFLECTED_OBJECT);
537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
538:       assertEquals(57, Node.LAST_PROP);
539:       assertEquals(8, Node.FLAG_NO_THROWS);
540:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
541:       assertEquals(52, Node.LENGTH);
542:       assertEquals(15, Node.NO_SIDE_EFFECTS);
543:       assertEquals(39, Node.EMPTY_BLOCK);
544:       assertEquals(51, Node.STATIC_SOURCE_FILE);
545:       assertEquals(30, Node.VAR_ARGS_NAME);
546:       assertEquals(46, Node.IS_NAMESPACE);
547:       assertEquals(2, Node.POST_FLAG);
548:       assertEquals(43, Node.IS_CONSTANT_NAME);
549:       assertEquals(40, Node.ORIGINALNAME_PROP);
550:       
551:       boolean boolean3 = node1.isThrow();
552:       assertFalse(boolean3);
553:       assertFalse(node1.isCast());
554:       assertFalse(node1.hasOneChild());
555:       assertFalse(node1.isGetElem());
556:       assertFalse(node1.isAssign());
557:       assertFalse(node1.isNumber());
558:       assertFalse(node1.isTypeOf());
559:       assertEquals((-1), node1.getSourcePosition());
560:       assertFalse(node1.isExprResult());
561:       assertFalse(node1.isLabelName());
562:       assertEquals((-1), node1.getLineno());
563:       assertFalse(node1.isAnd());
564:       assertFalse(node1.isLabel());
565:       assertFalse(node1.isOr());
566:       assertFalse(node1.isContinue());
567:       assertFalse(node1.isDo());
568:       assertFalse(node1.isAssignAdd());
569:       assertFalse(node1.isNew());
570:       assertFalse(node1.isVar());
571:       assertFalse(node1.isHook());
572:       assertFalse(node1.isParamList());
573:       assertEquals((-1), node1.getCharno());
574:       assertFalse(node1.isStringKey());
575:       assertFalse(node1.isSwitch());
576:       assertFalse(node1.isInstanceOf());
577:       assertFalse(node1.isCatch());
578:       assertFalse(node1.isWith());
579:       assertFalse(node1.hasMoreThanOneChild());
580:       assertFalse(node1.isRegExp());
581:       assertFalse(node1.isScript());
582:       assertFalse(node1.isThis());
583:       assertFalse(node1.isBlock());
584:       assertFalse(node1.isTry());
585:       assertFalse(node1.isFor());
586:       assertFalse(node1.isCase());
587:       assertTrue(node1.isString());
588:       assertFalse(node1.isArrayLit());
589:       assertFalse(node1.isEmpty());
590:       assertFalse(node1.isGetterDef());
591:       assertFalse(node1.isFunction());
592:       assertFalse(node1.isNE());
593:       assertFalse(node1.isDebugger());
594:       assertFalse(node1.isTrue());
595:       assertFalse(node1.isIf());
596:       assertFalse(node1.isDelProp());
597:       assertFalse(node1.isVoid());
598:       assertEquals(40, node1.getType());
599:       assertFalse(node1.isIn());
600:       assertEquals(0, node1.getChildCount());
601:       assertFalse(node1.isInc());
602:       assertFalse(node1.isSetterDef());
603:       assertFalse(node1.isDefaultCase());
604:       assertFalse(node1.isThrow());
605:       assertFalse(node1.isCall());
606:       assertFalse(node1.isAdd());
607:       assertFalse(node1.isFalse());
608:       assertFalse(node1.isBreak());
609:       assertFalse(node1.isNull());
610:       assertFalse(node1.isName());
611:       assertFalse(node1.isReturn());
612:       assertFalse(node1.isNot());
613:       assertFalse(node1.isObjectLit());
614:       assertFalse(node1.isDec());
615:       assertFalse(node1.isComma());
616:       assertFalse(node1.isGetProp());
617:       assertFalse(node1.hasChildren());
618:       assertFalse(node1.isWhile());
619:       assertFalse(node1.equals((Object)node0));
620:       assertFalse(boolean3 == boolean1);
621:       assertTrue(boolean3 == boolean2);
622:       assertTrue(boolean3 == boolean0);
623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
624:       assertEquals(47, Node.IS_DISPATCHER);
625:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
626:       assertEquals(36, Node.QUOTED_PROP);
627:       assertEquals(29, Node.JSDOC_INFO_PROP);
628:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
629:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
630:       assertEquals(53, Node.INPUT_ID);
631:       assertEquals(55, Node.INFERRED_FUNCTION);
632:       assertEquals(12, Node.COLUMN_BITS);
633:       assertEquals(4095, Node.COLUMN_MASK);
634:       assertEquals(32, Node.INCRDECR_PROP);
635:       assertEquals(1, Node.DECR_FLAG);
636:       assertEquals(37, Node.OPT_ARG_NAME);
637:       assertEquals(56, Node.CHANGE_TIME);
638:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
639:       assertEquals(48, Node.DIRECTIVES);
640:       assertEquals(49, Node.DIRECT_EVAL);
641:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
642:       assertEquals(50, Node.FREE_CALL);
643:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
644:       assertEquals(54, Node.SLASH_V);
645:       assertEquals(57, Node.REFLECTED_OBJECT);
646:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
647:       assertEquals(57, Node.LAST_PROP);
648:       assertEquals(8, Node.FLAG_NO_THROWS);
649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
650:       assertEquals(52, Node.LENGTH);
651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
652:       assertEquals(39, Node.EMPTY_BLOCK);
653:       assertEquals(51, Node.STATIC_SOURCE_FILE);
654:       assertEquals(30, Node.VAR_ARGS_NAME);
655:       assertEquals(46, Node.IS_NAMESPACE);
656:       assertEquals(2, Node.POST_FLAG);
657:       assertEquals(43, Node.IS_CONSTANT_NAME);
658:       assertEquals(40, Node.ORIGINALNAME_PROP);
659:       
660:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
661:       assertFalse(node1.isCast());
662:       assertFalse(node1.hasOneChild());
663:       assertFalse(node1.isGetElem());
664:       assertFalse(node1.isAssign());
665:       assertFalse(node1.isNumber());
666:       assertFalse(node1.isTypeOf());
667:       assertEquals((-1), node1.getSourcePosition());
668:       assertFalse(node1.isExprResult());
669:       assertFalse(node1.isLabelName());
670:       assertEquals((-1), node1.getLineno());
671:       assertFalse(node1.isAnd());
672:       assertFalse(node1.isLabel());
673:       assertFalse(node1.isOr());
674:       assertFalse(node1.isContinue());
675:       assertFalse(node1.isDo());
676:       assertFalse(node1.isAssignAdd());
677:       assertFalse(node1.isNew());
678:       assertFalse(node1.isVar());
679:       assertFalse(node1.isHook());
680:       assertFalse(node1.isParamList());
681:       assertEquals((-1), node1.getCharno());
682:       assertFalse(node1.isStringKey());
683:       assertFalse(node1.isSwitch());
684:       assertFalse(node1.isInstanceOf());
685:       assertFalse(node1.isCatch());
686:       assertFalse(node1.isWith());
687:       assertFalse(node1.hasMoreThanOneChild());
688:       assertFalse(node1.isRegExp());
689:       assertFalse(node1.isScript());
690:       assertFalse(node1.isThis());
691:       assertFalse(node1.isBlock());
692:       assertFalse(node1.isTry());
693:       assertFalse(node1.isFor());
694:       assertFalse(node1.isCase());
695:       assertTrue(node1.isString());
696:       assertFalse(node1.isArrayLit());
697:       assertFalse(node1.isEmpty());
698:       assertFalse(node1.isGetterDef());
699:       assertFalse(node1.isFunction());
700:       assertFalse(node1.isNE());
701:       assertFalse(node1.isDebugger());
702:       assertFalse(node1.isTrue());
703:       assertFalse(node1.isIf());
704:       assertFalse(node1.isDelProp());
705:       assertFalse(node1.isVoid());
706:       assertEquals(40, node1.getType());
707:       assertFalse(node1.isIn());
708:       assertEquals(0, node1.getChildCount());
709:       assertFalse(node1.isInc());
710:       assertFalse(node1.isSetterDef());
711:       assertFalse(node1.isDefaultCase());
712:       assertFalse(node1.isThrow());
713:       assertFalse(node1.isCall());
714:       assertFalse(node1.isAdd());
715:       assertFalse(node1.isFalse());
716:       assertFalse(node1.isBreak());
717:       assertFalse(node1.isNull());
718:       assertFalse(node1.isName());
719:       assertFalse(node1.isReturn());
720:       assertFalse(node1.isNot());
721:       assertFalse(node1.isObjectLit());
722:       assertFalse(node1.isDec());
723:       assertFalse(node1.isComma());
724:       assertFalse(node1.isGetProp());
725:       assertFalse(node1.hasChildren());
726:       assertFalse(node1.isWhile());
727:       assertFalse(node1.equals((Object)node0));
728:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
729:       assertEquals(47, Node.IS_DISPATCHER);
730:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
731:       assertEquals(36, Node.QUOTED_PROP);
732:       assertEquals(29, Node.JSDOC_INFO_PROP);
733:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(53, Node.INPUT_ID);
736:       assertEquals(55, Node.INFERRED_FUNCTION);
737:       assertEquals(12, Node.COLUMN_BITS);
738:       assertEquals(4095, Node.COLUMN_MASK);
739:       assertEquals(32, Node.INCRDECR_PROP);
740:       assertEquals(1, Node.DECR_FLAG);
741:       assertEquals(37, Node.OPT_ARG_NAME);
742:       assertEquals(56, Node.CHANGE_TIME);
743:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
744:       assertEquals(48, Node.DIRECTIVES);
745:       assertEquals(49, Node.DIRECT_EVAL);
746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
747:       assertEquals(50, Node.FREE_CALL);
748:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
749:       assertEquals(54, Node.SLASH_V);
750:       assertEquals(57, Node.REFLECTED_OBJECT);
751:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
752:       assertEquals(57, Node.LAST_PROP);
753:       assertEquals(8, Node.FLAG_NO_THROWS);
754:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
755:       assertEquals(52, Node.LENGTH);
756:       assertEquals(15, Node.NO_SIDE_EFFECTS);
757:       assertEquals(39, Node.EMPTY_BLOCK);
758:       assertEquals(51, Node.STATIC_SOURCE_FILE);
759:       assertEquals(30, Node.VAR_ARGS_NAME);
760:       assertEquals(46, Node.IS_NAMESPACE);
761:       assertEquals(2, Node.POST_FLAG);
762:       assertEquals(43, Node.IS_CONSTANT_NAME);
763:       assertEquals(40, Node.ORIGINALNAME_PROP);
764:       assertNotNull(node_FileLevelJsDocBuilder0);
765:       
766:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
767:       assertFalse(node1.isCast());
768:       assertFalse(node1.hasOneChild());
769:       assertFalse(node1.isGetElem());
770:       assertFalse(node1.isAssign());
771:       assertFalse(node1.isNumber());
772:       assertFalse(node1.isTypeOf());
773:       assertEquals((-1), node1.getSourcePosition());
774:       assertFalse(node1.isExprResult());
775:       assertFalse(node1.isLabelName());
776:       assertEquals((-1), node1.getLineno());
777:       assertFalse(node1.isAnd());
778:       assertFalse(node1.isLabel());
779:       assertFalse(node1.isOr());
780:       assertFalse(node1.isContinue());
781:       assertFalse(node1.isDo());
782:       assertFalse(node1.isAssignAdd());
783:       assertFalse(node1.isNew());
784:       assertFalse(node1.isVar());
785:       assertFalse(node1.isHook());
786:       assertFalse(node1.isParamList());
787:       assertEquals((-1), node1.getCharno());
788:       assertFalse(node1.isStringKey());
789:       assertFalse(node1.isSwitch());
790:       assertFalse(node1.isInstanceOf());
791:       assertFalse(node1.isCatch());
792:       assertFalse(node1.isWith());
793:       assertFalse(node1.hasMoreThanOneChild());
794:       assertFalse(node1.isRegExp());
795:       assertFalse(node1.isScript());
796:       assertFalse(node1.isThis());
797:       assertFalse(node1.isBlock());
798:       assertFalse(node1.isTry());
799:       assertFalse(node1.isFor());
800:       assertFalse(node1.isCase());
801:       assertTrue(node1.isString());
802:       assertFalse(node1.isArrayLit());
803:       assertFalse(node1.isEmpty());
804:       assertFalse(node1.isGetterDef());
805:       assertFalse(node1.isFunction());
806:       assertFalse(node1.isNE());
807:       assertFalse(node1.isDebugger());
808:       assertFalse(node1.isTrue());
809:       assertFalse(node1.isIf());
810:       assertFalse(node1.isDelProp());
811:       assertFalse(node1.isVoid());
812:       assertEquals(40, node1.getType());
813:       assertFalse(node1.isIn());
814:       assertEquals(0, node1.getChildCount());
815:       assertFalse(node1.isInc());
816:       assertFalse(node1.isSetterDef());
817:       assertFalse(node1.isDefaultCase());
818:       assertFalse(node1.isThrow());
819:       assertFalse(node1.isCall());
820:       assertFalse(node1.isAdd());
821:       assertFalse(node1.isFalse());
822:       assertFalse(node1.isBreak());
823:       assertFalse(node1.isNull());
824:       assertFalse(node1.isName());
825:       assertFalse(node1.isReturn());
826:       assertFalse(node1.isNot());
827:       assertFalse(node1.isObjectLit());
828:       assertFalse(node1.isDec());
829:       assertFalse(node1.isComma());
830:       assertFalse(node1.isGetProp());
831:       assertFalse(node1.hasChildren());
832:       assertFalse(node1.isWhile());
833:       assertFalse(node1.equals((Object)node0));
834:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
835:       assertEquals(47, Node.IS_DISPATCHER);
836:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
837:       assertEquals(36, Node.QUOTED_PROP);
838:       assertEquals(29, Node.JSDOC_INFO_PROP);
839:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
840:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
841:       assertEquals(53, Node.INPUT_ID);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(12, Node.COLUMN_BITS);
844:       assertEquals(4095, Node.COLUMN_MASK);
845:       assertEquals(32, Node.INCRDECR_PROP);
846:       assertEquals(1, Node.DECR_FLAG);
847:       assertEquals(37, Node.OPT_ARG_NAME);
848:       assertEquals(56, Node.CHANGE_TIME);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(48, Node.DIRECTIVES);
851:       assertEquals(49, Node.DIRECT_EVAL);
852:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
853:       assertEquals(50, Node.FREE_CALL);
854:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
855:       assertEquals(54, Node.SLASH_V);
856:       assertEquals(57, Node.REFLECTED_OBJECT);
857:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
858:       assertEquals(57, Node.LAST_PROP);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
861:       assertEquals(52, Node.LENGTH);
862:       assertEquals(15, Node.NO_SIDE_EFFECTS);
863:       assertEquals(39, Node.EMPTY_BLOCK);
864:       assertEquals(51, Node.STATIC_SOURCE_FILE);
865:       assertEquals(30, Node.VAR_ARGS_NAME);
866:       assertEquals(46, Node.IS_NAMESPACE);
867:       assertEquals(2, Node.POST_FLAG);
868:       assertEquals(43, Node.IS_CONSTANT_NAME);
869:       assertEquals(40, Node.ORIGINALNAME_PROP);
870:       assertNull(staticSourceFile0);
871:       
872:       node_FileLevelJsDocBuilder0.append("Use SerializedForm");
873:       assertFalse(node1.isCast());
874:       assertFalse(node1.hasOneChild());
875:       assertFalse(node1.isGetElem());
876:       assertFalse(node1.isAssign());
877:       assertFalse(node1.isNumber());
878:       assertFalse(node1.isTypeOf());
879:       assertEquals((-1), node1.getSourcePosition());
880:       assertFalse(node1.isExprResult());
881:       assertFalse(node1.isLabelName());
882:       assertEquals((-1), node1.getLineno());
883:       assertFalse(node1.isAnd());
884:       assertFalse(node1.isLabel());
885:       assertFalse(node1.isOr());
886:       assertFalse(node1.isContinue());
887:       assertFalse(node1.isDo());
888:       assertFalse(node1.isAssignAdd());
889:       assertFalse(node1.isNew());
890:       assertFalse(node1.isVar());
891:       assertFalse(node1.isHook());
892:       assertFalse(node1.isParamList());
893:       assertEquals((-1), node1.getCharno());
894:       assertFalse(node1.isStringKey());
895:       assertFalse(node1.isSwitch());
896:       assertFalse(node1.isInstanceOf());
897:       assertFalse(node1.isCatch());
898:       assertFalse(node1.isWith());
899:       assertFalse(node1.hasMoreThanOneChild());
900:       assertFalse(node1.isRegExp());
901:       assertFalse(node1.isScript());
902:       assertFalse(node1.isThis());
903:       assertFalse(node1.isBlock());
904:       assertFalse(node1.isTry());
905:       assertFalse(node1.isFor());
906:       assertFalse(node1.isCase());
907:       assertTrue(node1.isString());
908:       assertFalse(node1.isArrayLit());
909:       assertFalse(node1.isEmpty());
910:       assertFalse(node1.isGetterDef());
911:       assertFalse(node1.isFunction());
912:       assertFalse(node1.isNE());
913:       assertFalse(node1.isDebugger());
914:       assertFalse(node1.isTrue());
915:       assertFalse(node1.isIf());
916:       assertFalse(node1.isDelProp());
917:       assertFalse(node1.isVoid());
918:       assertEquals(40, node1.getType());
919:       assertFalse(node1.isIn());
920:       assertEquals(0, node1.getChildCount());
921:       assertFalse(node1.isInc());
922:       assertFalse(node1.isSetterDef());
923:       assertFalse(node1.isDefaultCase());
924:       assertFalse(node1.isThrow());
925:       assertFalse(node1.isCall());
926:       assertFalse(node1.isAdd());
927:       assertFalse(node1.isFalse());
928:       assertFalse(node1.isBreak());
929:       assertFalse(node1.isNull());
930:       assertFalse(node1.isName());
931:       assertFalse(node1.isReturn());
932:       assertFalse(node1.isNot());
933:       assertFalse(node1.isObjectLit());
934:       assertFalse(node1.isDec());
935:       assertFalse(node1.isComma());
936:       assertFalse(node1.isGetProp());
937:       assertFalse(node1.hasChildren());
938:       assertFalse(node1.isWhile());
939:       assertFalse(node1.equals((Object)node0));
940:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
941:       assertEquals(47, Node.IS_DISPATCHER);
942:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
943:       assertEquals(36, Node.QUOTED_PROP);
944:       assertEquals(29, Node.JSDOC_INFO_PROP);
945:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
946:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
947:       assertEquals(53, Node.INPUT_ID);
948:       assertEquals(55, Node.INFERRED_FUNCTION);
949:       assertEquals(12, Node.COLUMN_BITS);
950:       assertEquals(4095, Node.COLUMN_MASK);
951:       assertEquals(32, Node.INCRDECR_PROP);
952:       assertEquals(1, Node.DECR_FLAG);
953:       assertEquals(37, Node.OPT_ARG_NAME);
954:       assertEquals(56, Node.CHANGE_TIME);
955:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
956:       assertEquals(48, Node.DIRECTIVES);
957:       assertEquals(49, Node.DIRECT_EVAL);
958:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
959:       assertEquals(50, Node.FREE_CALL);
960:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
961:       assertEquals(54, Node.SLASH_V);
962:       assertEquals(57, Node.REFLECTED_OBJECT);
963:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
964:       assertEquals(57, Node.LAST_PROP);
965:       assertEquals(8, Node.FLAG_NO_THROWS);
966:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
967:       assertEquals(52, Node.LENGTH);
968:       assertEquals(15, Node.NO_SIDE_EFFECTS);
969:       assertEquals(39, Node.EMPTY_BLOCK);
970:       assertEquals(51, Node.STATIC_SOURCE_FILE);
971:       assertEquals(30, Node.VAR_ARGS_NAME);
972:       assertEquals(46, Node.IS_NAMESPACE);
973:       assertEquals(2, Node.POST_FLAG);
974:       assertEquals(43, Node.IS_CONSTANT_NAME);
975:       assertEquals(40, Node.ORIGINALNAME_PROP);
976:       
977:       node_FileLevelJsDocBuilder0.append("Use SerializedForm");
978:       assertFalse(node1.isCast());
979:       assertFalse(node1.hasOneChild());
980:       assertFalse(node1.isGetElem());
981:       assertFalse(node1.isAssign());
982:       assertFalse(node1.isNumber());
983:       assertFalse(node1.isTypeOf());
984:       assertEquals((-1), node1.getSourcePosition());
985:       assertFalse(node1.isExprResult());
986:       assertFalse(node1.isLabelName());
987:       assertEquals((-1), node1.getLineno());
988:       assertFalse(node1.isAnd());
989:       assertFalse(node1.isLabel());
990:       assertFalse(node1.isOr());
991:       assertFalse(node1.isContinue());
992:       assertFalse(node1.isDo());
993:       assertFalse(node1.isAssignAdd());
994:       assertFalse(node1.isNew());
995:       assertFalse(node1.isVar());
996:       assertFalse(node1.isHook());
997:       assertFalse(node1.isParamList());
998:       assertEquals((-1), node1.getCharno());
999:       assertFalse(node1.isStringKey());
1000:       assertFalse(node1.isSwitch());
1001:       assertFalse(node1.isInstanceOf());
1002:       assertFalse(node1.isCatch());
1003:       assertFalse(node1.isWith());
1004:       assertFalse(node1.hasMoreThanOneChild());
1005:       assertFalse(node1.isRegExp());
1006:       assertFalse(node1.isScript());
1007:       assertFalse(node1.isThis());
1008:       assertFalse(node1.isBlock());
1009:       assertFalse(node1.isTry());
1010:       assertFalse(node1.isFor());
1011:       assertFalse(node1.isCase());
1012:       assertTrue(node1.isString());
1013:       assertFalse(node1.isArrayLit());
1014:       assertFalse(node1.isEmpty());
1015:       assertFalse(node1.isGetterDef());
1016:       assertFalse(node1.isFunction());
1017:       assertFalse(node1.isNE());
1018:       assertFalse(node1.isDebugger());
1019:       assertFalse(node1.isTrue());
1020:       assertFalse(node1.isIf());
1021:       assertFalse(node1.isDelProp());
1022:       assertFalse(node1.isVoid());
1023:       assertEquals(40, node1.getType());
1024:       assertFalse(node1.isIn());
1025:       assertEquals(0, node1.getChildCount());
1026:       assertFalse(node1.isInc());
1027:       assertFalse(node1.isSetterDef());
1028:       assertFalse(node1.isDefaultCase());
1029:       assertFalse(node1.isThrow());
1030:       assertFalse(node1.isCall());
1031:       assertFalse(node1.isAdd());
1032:       assertFalse(node1.isFalse());
1033:       assertFalse(node1.isBreak());
1034:       assertFalse(node1.isNull());
1035:       assertFalse(node1.isName());
1036:       assertFalse(node1.isReturn());
1037:       assertFalse(node1.isNot());
1038:       assertFalse(node1.isObjectLit());
1039:       assertFalse(node1.isDec());
1040:       assertFalse(node1.isComma());
1041:       assertFalse(node1.isGetProp());
1042:       assertFalse(node1.hasChildren());
1043:       assertFalse(node1.isWhile());
1044:       assertFalse(node1.equals((Object)node0));
1045:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1046:       assertEquals(47, Node.IS_DISPATCHER);
1047:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1048:       assertEquals(36, Node.QUOTED_PROP);
1049:       assertEquals(29, Node.JSDOC_INFO_PROP);
1050:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1051:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1052:       assertEquals(53, Node.INPUT_ID);
1053:       assertEquals(55, Node.INFERRED_FUNCTION);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(4095, Node.COLUMN_MASK);
1056:       assertEquals(32, Node.INCRDECR_PROP);
1057:       assertEquals(1, Node.DECR_FLAG);
1058:       assertEquals(37, Node.OPT_ARG_NAME);
1059:       assertEquals(56, Node.CHANGE_TIME);
1060:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1061:       assertEquals(48, Node.DIRECTIVES);
1062:       assertEquals(49, Node.DIRECT_EVAL);
1063:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1064:       assertEquals(50, Node.FREE_CALL);
1065:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1066:       assertEquals(54, Node.SLASH_V);
1067:       assertEquals(57, Node.REFLECTED_OBJECT);
1068:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1069:       assertEquals(57, Node.LAST_PROP);
1070:       assertEquals(8, Node.FLAG_NO_THROWS);
1071:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1072:       assertEquals(52, Node.LENGTH);
1073:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1074:       assertEquals(39, Node.EMPTY_BLOCK);
1075:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1076:       assertEquals(30, Node.VAR_ARGS_NAME);
1077:       assertEquals(46, Node.IS_NAMESPACE);
1078:       assertEquals(2, Node.POST_FLAG);
1079:       assertEquals(43, Node.IS_CONSTANT_NAME);
1080:       assertEquals(40, Node.ORIGINALNAME_PROP);
1081:       
1082:       Node node2 = new Node(2227, node0, node1, node0, node0, 125, 2);
1083:       assertFalse(node0.isAnd());
1084:       assertFalse(node0.isWith());
1085:       assertFalse(node0.isNot());
1086:       assertFalse(node0.isObjectLit());
1087:       assertEquals(0, node0.getCharno());
1088:       assertFalse(node0.isComma());
1089:       assertFalse(node0.isInstanceOf());
1090:       assertFalse(node0.isBreak());
1091:       assertFalse(node0.isCast());
1092:       assertFalse(node0.isExprResult());
1093:       assertFalse(node0.isLabelName());
1094:       assertFalse(node0.isAssign());
1095:       assertFalse(node0.isHook());
1096:       assertFalse(node0.isDec());
1097:       assertFalse(node0.hasChildren());
1098:       assertFalse(node0.isThis());
1099:       assertFalse(node0.isGetProp());
1100:       assertFalse(node0.hasOneChild());
1101:       assertFalse(node0.isNumber());
1102:       assertFalse(node0.isString());
1103:       assertFalse(node0.isScript());
1104:       assertFalse(node0.isCase());
1105:       assertFalse(node0.isContinue());
1106:       assertFalse(node0.hasMoreThanOneChild());
1107:       assertFalse(node0.isThrow());
1108:       assertFalse(node0.isFalse());
1109:       assertFalse(node0.isIf());
1110:       assertFalse(node0.isNE());
1111:       assertFalse(node0.isIn());
1112:       assertFalse(node0.isSetterDef());
1113:       assertFalse(node0.isInc());
1114:       assertFalse(node0.isDefaultCase());
1115:       assertEquals(0, node0.getChildCount());
1116:       assertFalse(node0.isTrue());
1117:       assertFalse(node0.isParamList());
1118:       assertFalse(node0.isFunction());
1119:       assertFalse(node0.isRegExp());
1120:       assertFalse(node0.isVoid());
1121:       assertFalse(node0.isArrayLit());
1122:       assertEquals(0, node0.getLineno());
1123:       assertFalse(node0.isCatch());
1124:       assertFalse(node0.isStringKey());
1125:       assertFalse(node0.isGetterDef());
1126:       assertFalse(node0.isFor());
1127:       assertFalse(node0.isBlock());
1128:       assertFalse(node0.isDebugger());
1129:       assertFalse(node0.isTry());
1130:       assertFalse(node0.isDo());
1131:       assertFalse(node0.isWhile());
1132:       assertFalse(node0.isReturn());
1133:       assertFalse(node0.isLabel());
1134:       assertFalse(node0.isSwitch());
1135:       assertFalse(node0.isTypeOf());
1136:       assertEquals(0, node0.getType());
1137:       assertFalse(node0.isCall());
1138:       assertFalse(node0.isGetElem());
1139:       assertFalse(node0.isName());
1140:       assertFalse(node0.isDelProp());
1141:       assertEquals(0, node0.getSourcePosition());
1142:       assertFalse(node0.isVar());
1143:       assertFalse(node0.isNull());
1144:       assertFalse(node0.isNew());
1145:       assertFalse(node0.isOr());
1146:       assertFalse(node0.isAssignAdd());
1147:       assertFalse(node0.isAdd());
1148:       assertFalse(node0.isEmpty());
1149:       assertFalse(node1.isCast());
1150:       assertFalse(node1.hasOneChild());
1151:       assertFalse(node1.isGetElem());
1152:       assertFalse(node1.isAssign());
1153:       assertFalse(node1.isNumber());
1154:       assertFalse(node1.isTypeOf());
1155:       assertEquals((-1), node1.getSourcePosition());
1156:       assertFalse(node1.isExprResult());
1157:       assertFalse(node1.isLabelName());
1158:       assertEquals((-1), node1.getLineno());
1159:       assertFalse(node1.isAnd());
1160:       assertFalse(node1.isLabel());
1161:       assertFalse(node1.isOr());
1162:       assertFalse(node1.isContinue());
1163:       assertFalse(node1.isDo());
1164:       assertFalse(node1.isAssignAdd());
1165:       assertFalse(node1.isNew());
1166:       assertFalse(node1.isVar());
1167:       assertFalse(node1.isHook());
1168:       assertFalse(node1.isParamList());
1169:       assertEquals((-1), node1.getCharno());
1170:       assertFalse(node1.isStringKey());
1171:       assertFalse(node1.isSwitch());
1172:       assertFalse(node1.isInstanceOf());
1173:       assertFalse(node1.isCatch());
1174:       assertFalse(node1.isWith());
1175:       assertFalse(node1.hasMoreThanOneChild());
1176:       assertFalse(node1.isRegExp());
1177:       assertFalse(node1.isScript());
1178:       assertFalse(node1.isThis());
1179:       assertFalse(node1.isBlock());
1180:       assertFalse(node1.isTry());
1181:       assertFalse(node1.isFor());
1182:       assertFalse(node1.isCase());
1183:       assertTrue(node1.isString());
1184:       assertFalse(node1.isArrayLit());
1185:       assertFalse(node1.isEmpty());
1186:       assertFalse(node1.isGetterDef());
1187:       assertFalse(node1.isFunction());
1188:       assertFalse(node1.isNE());
1189:       assertFalse(node1.isDebugger());
1190:       assertFalse(node1.isTrue());
1191:       assertFalse(node1.isIf());
1192:       assertFalse(node1.isDelProp());
1193:       assertFalse(node1.isVoid());
1194:       assertEquals(40, node1.getType());
1195:       assertFalse(node1.isIn());
1196:       assertEquals(0, node1.getChildCount());
1197:       assertFalse(node1.isInc());
1198:       assertFalse(node1.isSetterDef());
1199:       assertFalse(node1.isDefaultCase());
1200:       assertFalse(node1.isThrow());
1201:       assertFalse(node1.isCall());
1202:       assertFalse(node1.isAdd());
1203:       assertFalse(node1.isFalse());
1204:       assertFalse(node1.isBreak());
1205:       assertFalse(node1.isNull());
1206:       assertFalse(node1.isName());
1207:       assertFalse(node1.isReturn());
1208:       assertFalse(node1.isNot());
1209:       assertFalse(node1.isObjectLit());
1210:       assertFalse(node1.isDec());
1211:       assertFalse(node1.isComma());
1212:       assertFalse(node1.isGetProp());
1213:       assertFalse(node1.hasChildren());
1214:       assertFalse(node1.isWhile());
1215:       assertFalse(node2.isGetElem());
1216:       assertFalse(node2.isLabelName());
1217:       assertFalse(node2.isAssign());
1218:       assertEquals(2227, node2.getType());
1219:       assertFalse(node2.isNumber());
1220:       assertFalse(node2.isTypeOf());
1221:       assertFalse(node2.isDec());
1222:       assertFalse(node2.isCast());
1223:       assertFalse(node2.isOr());
1224:       assertFalse(node2.isExprResult());
1225:       assertFalse(node2.isNot());
1226:       assertEquals(512002, node2.getSourcePosition());
1227:       assertFalse(node2.isInstanceOf());
1228:       assertFalse(node2.isScript());
1229:       assertFalse(node2.isObjectLit());
1230:       assertFalse(node2.isWith());
1231:       assertFalse(node2.hasMoreThanOneChild());
1232:       assertFalse(node2.isBlock());
1233:       assertFalse(node2.isThis());
1234:       assertFalse(node2.isReturn());
1235:       assertFalse(node2.isComma());
1236:       assertFalse(node2.isGetProp());
1237:       assertFalse(node2.isWhile());
1238:       assertFalse(node2.isFalse());
1239:       assertFalse(node2.isThrow());
1240:       assertFalse(node2.isAnd());
1241:       assertFalse(node2.isFunction());
1242:       assertFalse(node2.isIn());
1243:       assertFalse(node2.isContinue());
1244:       assertFalse(node2.isInc());
1245:       assertFalse(node2.isSetterDef());
1246:       assertFalse(node2.isFor());
1247:       assertFalse(node2.isEmpty());
1248:       assertTrue(node2.hasOneChild());
1249:       assertFalse(node2.isGetterDef());
1250:       assertTrue(node2.hasChildren());
1251:       assertFalse(node2.isVoid());
1252:       assertFalse(node2.isDebugger());
1253:       assertFalse(node2.isTrue());
1254:       assertEquals(2, node2.getCharno());
1255:       assertFalse(node2.isArrayLit());
1256:       assertEquals(125, node2.getLineno());
1257:       assertFalse(node2.isNE());
1258:       assertFalse(node2.isDelProp());
1259:       assertFalse(node2.isIf());
1260:       assertFalse(node2.isCase());
1261:       assertFalse(node2.isRegExp());
1262:       assertFalse(node2.isCatch());
1263:       assertFalse(node2.isString());
1264:       assertFalse(node2.isTry());
1265:       assertEquals(1, node2.getChildCount());
1266:       assertFalse(node2.isHook());
1267:       assertFalse(node2.isStringKey());
1268:       assertFalse(node2.isName());
1269:       assertFalse(node2.isCall());
1270:       assertFalse(node2.isBreak());
1271:       assertFalse(node2.isNull());
1272:       assertFalse(node2.isParamList());
1273:       assertFalse(node2.isSwitch());
1274:       assertFalse(node2.isDo());
1275:       assertFalse(node2.isNew());
1276:       assertFalse(node2.isAdd());
1277:       assertFalse(node2.isLabel());
1278:       assertFalse(node2.isVar());
1279:       assertFalse(node2.isAssignAdd());
1280:       assertFalse(node2.isDefaultCase());
1281:       assertFalse(node0.equals((Object)node1));
1282:       assertFalse(node1.equals((Object)node0));
1283:       assertFalse(node2.equals((Object)node0));
1284:       assertFalse(node2.equals((Object)node1));
1285:       assertEquals(55, Node.INFERRED_FUNCTION);
1286:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1287:       assertEquals(43, Node.IS_CONSTANT_NAME);
1288:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1289:       assertEquals(39, Node.EMPTY_BLOCK);
1290:       assertEquals(53, Node.INPUT_ID);
1291:       assertEquals(36, Node.QUOTED_PROP);
1292:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1293:       assertEquals(8, Node.FLAG_NO_THROWS);
1294:       assertEquals(50, Node.FREE_CALL);
1295:       assertEquals(40, Node.ORIGINALNAME_PROP);
1296:       assertEquals(29, Node.JSDOC_INFO_PROP);
1297:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1298:       assertEquals(47, Node.IS_DISPATCHER);
1299:       assertEquals(2, Node.POST_FLAG);
1300:       assertEquals(30, Node.VAR_ARGS_NAME);
1301:       assertEquals(1, Node.DECR_FLAG);
1302:       assertEquals(12, Node.COLUMN_BITS);
1303:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1304:       assertEquals(57, Node.LAST_PROP);
1305:       assertEquals(49, Node.DIRECT_EVAL);
1306:       assertEquals(32, Node.INCRDECR_PROP);
1307:       assertEquals(46, Node.IS_NAMESPACE);
1308:       assertEquals(54, Node.SLASH_V);
1309:       assertEquals(57, Node.REFLECTED_OBJECT);
1310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1311:       assertEquals(52, Node.LENGTH);
1312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1313:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1314:       assertEquals(56, Node.CHANGE_TIME);
1315:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1316:       assertEquals(48, Node.DIRECTIVES);
1317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1318:       assertEquals(37, Node.OPT_ARG_NAME);
1319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1320:       assertEquals(4095, Node.COLUMN_MASK);
1321:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1322:       assertEquals(47, Node.IS_DISPATCHER);
1323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1324:       assertEquals(36, Node.QUOTED_PROP);
1325:       assertEquals(29, Node.JSDOC_INFO_PROP);
1326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1328:       assertEquals(53, Node.INPUT_ID);
1329:       assertEquals(55, Node.INFERRED_FUNCTION);
1330:       assertEquals(12, Node.COLUMN_BITS);
1331:       assertEquals(4095, Node.COLUMN_MASK);
1332:       assertEquals(32, Node.INCRDECR_PROP);
1333:       assertEquals(1, Node.DECR_FLAG);
1334:       assertEquals(37, Node.OPT_ARG_NAME);
1335:       assertEquals(56, Node.CHANGE_TIME);
1336:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1337:       assertEquals(48, Node.DIRECTIVES);
1338:       assertEquals(49, Node.DIRECT_EVAL);
1339:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1340:       assertEquals(50, Node.FREE_CALL);
1341:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1342:       assertEquals(54, Node.SLASH_V);
1343:       assertEquals(57, Node.REFLECTED_OBJECT);
1344:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1345:       assertEquals(57, Node.LAST_PROP);
1346:       assertEquals(8, Node.FLAG_NO_THROWS);
1347:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1348:       assertEquals(52, Node.LENGTH);
1349:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1350:       assertEquals(39, Node.EMPTY_BLOCK);
1351:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1352:       assertEquals(30, Node.VAR_ARGS_NAME);
1353:       assertEquals(46, Node.IS_NAMESPACE);
1354:       assertEquals(2, Node.POST_FLAG);
1355:       assertEquals(43, Node.IS_CONSTANT_NAME);
1356:       assertEquals(40, Node.ORIGINALNAME_PROP);
1357:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1358:       assertEquals(29, Node.JSDOC_INFO_PROP);
1359:       assertEquals(56, Node.CHANGE_TIME);
1360:       assertEquals(2, Node.POST_FLAG);
1361:       assertEquals(47, Node.IS_DISPATCHER);
1362:       assertEquals(53, Node.INPUT_ID);
1363:       assertEquals(32, Node.INCRDECR_PROP);
1364:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1365:       assertEquals(30, Node.VAR_ARGS_NAME);
1366:       assertEquals(57, Node.LAST_PROP);
1367:       assertEquals(43, Node.IS_CONSTANT_NAME);
1368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1369:       assertEquals(46, Node.IS_NAMESPACE);
1370:       assertEquals(54, Node.SLASH_V);
1371:       assertEquals(40, Node.ORIGINALNAME_PROP);
1372:       assertEquals(50, Node.FREE_CALL);
1373:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1374:       assertEquals(57, Node.REFLECTED_OBJECT);
1375:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1376:       assertEquals(8, Node.FLAG_NO_THROWS);
1377:       assertEquals(52, Node.LENGTH);
1378:       assertEquals(55, Node.INFERRED_FUNCTION);
1379:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1380:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1381:       assertEquals(39, Node.EMPTY_BLOCK);
1382:       assertEquals(49, Node.DIRECT_EVAL);
1383:       assertEquals(1, Node.DECR_FLAG);
1384:       assertEquals(12, Node.COLUMN_BITS);
1385:       assertEquals(36, Node.QUOTED_PROP);
1386:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1387:       assertEquals(48, Node.DIRECTIVES);
1388:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1389:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1390:       assertEquals(4095, Node.COLUMN_MASK);
1391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1392:       assertEquals(37, Node.OPT_ARG_NAME);
1393:       assertNotNull(node2);
1394:       
1395:       boolean boolean4 = node2.isAssign();
1396:       assertFalse(boolean4);
1397:       assertFalse(node0.isAnd());
1398:       assertFalse(node0.isWith());
1399:       assertFalse(node0.isNot());
1400:       assertFalse(node0.isObjectLit());
1401:       assertEquals(0, node0.getCharno());
1402:       assertFalse(node0.isComma());
1403:       assertFalse(node0.isInstanceOf());
1404:       assertFalse(node0.isBreak());
1405:       assertFalse(node0.isCast());
1406:       assertFalse(node0.isExprResult());
1407:       assertFalse(node0.isLabelName());
1408:       assertFalse(node0.isAssign());
1409:       assertFalse(node0.isHook());
1410:       assertFalse(node0.isDec());
1411:       assertFalse(node0.hasChildren());
1412:       assertFalse(node0.isThis());
1413:       assertFalse(node0.isGetProp());
1414:       assertFalse(node0.hasOneChild());
1415:       assertFalse(node0.isNumber());
1416:       assertFalse(node0.isString());
1417:       assertFalse(node0.isScript());
1418:       assertFalse(node0.isCase());
1419:       assertFalse(node0.isContinue());
1420:       assertFalse(node0.hasMoreThanOneChild());
1421:       assertFalse(node0.isThrow());
1422:       assertFalse(node0.isFalse());
1423:       assertFalse(node0.isIf());
1424:       assertFalse(node0.isNE());
1425:       assertFalse(node0.isIn());
1426:       assertFalse(node0.isSetterDef());
1427:       assertFalse(node0.isInc());
1428:       assertFalse(node0.isDefaultCase());
1429:       assertEquals(0, node0.getChildCount());
1430:       assertFalse(node0.isTrue());
1431:       assertFalse(node0.isParamList());
1432:       assertFalse(node0.isFunction());
1433:       assertFalse(node0.isRegExp());
1434:       assertFalse(node0.isVoid());
1435:       assertFalse(node0.isArrayLit());
1436:       assertEquals(0, node0.getLineno());
1437:       assertFalse(node0.isCatch());
1438:       assertFalse(node0.isStringKey());
1439:       assertFalse(node0.isGetterDef());
1440:       assertFalse(node0.isFor());
1441:       assertFalse(node0.isBlock());
1442:       assertFalse(node0.isDebugger());
1443:       assertFalse(node0.isTry());
1444:       assertFalse(node0.isDo());
1445:       assertFalse(node0.isWhile());
1446:       assertFalse(node0.isReturn());
1447:       assertFalse(node0.isLabel());
1448:       assertFalse(node0.isSwitch());
1449:       assertFalse(node0.isTypeOf());
1450:       assertEquals(0, node0.getType());
1451:       assertFalse(node0.isCall());
1452:       assertFalse(node0.isGetElem());
1453:       assertFalse(node0.isName());
1454:       assertFalse(node0.isDelProp());
1455:       assertEquals(0, node0.getSourcePosition());
1456:       assertFalse(node0.isVar());
1457:       assertFalse(node0.isNull());
1458:       assertFalse(node0.isNew());
1459:       assertFalse(node0.isOr());
1460:       assertFalse(node0.isAssignAdd());
1461:       assertFalse(node0.isAdd());
1462:       assertFalse(node0.isEmpty());
1463:       assertFalse(node1.isCast());
1464:       assertFalse(node1.hasOneChild());
1465:       assertFalse(node1.isGetElem());
1466:       assertFalse(node1.isAssign());
1467:       assertFalse(node1.isNumber());
1468:       assertFalse(node1.isTypeOf());
1469:       assertEquals((-1), node1.getSourcePosition());
1470:       assertFalse(node1.isExprResult());
1471:       assertFalse(node1.isLabelName());
1472:       assertEquals((-1), node1.getLineno());
1473:       assertFalse(node1.isAnd());
1474:       assertFalse(node1.isLabel());
1475:       assertFalse(node1.isOr());
1476:       assertFalse(node1.isContinue());
1477:       assertFalse(node1.isDo());
1478:       assertFalse(node1.isAssignAdd());
1479:       assertFalse(node1.isNew());
1480:       assertFalse(node1.isVar());
1481:       assertFalse(node1.isHook());
1482:       assertFalse(node1.isParamList());
1483:       assertEquals((-1), node1.getCharno());
1484:       assertFalse(node1.isStringKey());
1485:       assertFalse(node1.isSwitch());
1486:       assertFalse(node1.isInstanceOf());
1487:       assertFalse(node1.isCatch());
1488:       assertFalse(node1.isWith());
1489:       assertFalse(node1.hasMoreThanOneChild());
1490:       assertFalse(node1.isRegExp());
1491:       assertFalse(node1.isScript());
1492:       assertFalse(node1.isThis());
1493:       assertFalse(node1.isBlock());
1494:       assertFalse(node1.isTry());
1495:       assertFalse(node1.isFor());
1496:       assertFalse(node1.isCase());
1497:       assertTrue(node1.isString());
1498:       assertFalse(node1.isArrayLit());
1499:       assertFalse(node1.isEmpty());
1500:       assertFalse(node1.isGetterDef());
1501:       assertFalse(node1.isFunction());
1502:       assertFalse(node1.isNE());
1503:       assertFalse(node1.isDebugger());
1504:       assertFalse(node1.isTrue());
1505:       assertFalse(node1.isIf());
1506:       assertFalse(node1.isDelProp());
1507:       assertFalse(node1.isVoid());
1508:       assertEquals(40, node1.getType());
1509:       assertFalse(node1.isIn());
1510:       assertEquals(0, node1.getChildCount());
1511:       assertFalse(node1.isInc());
1512:       assertFalse(node1.isSetterDef());
1513:       assertFalse(node1.isDefaultCase());
1514:       assertFalse(node1.isThrow());
1515:       assertFalse(node1.isCall());
1516:       assertFalse(node1.isAdd());
1517:       assertFalse(node1.isFalse());
1518:       assertFalse(node1.isBreak());
1519:       assertFalse(node1.isNull());
1520:       assertFalse(node1.isName());
1521:       assertFalse(node1.isReturn());
1522:       assertFalse(node1.isNot());
1523:       assertFalse(node1.isObjectLit());
1524:       assertFalse(node1.isDec());
1525:       assertFalse(node1.isComma());
1526:       assertFalse(node1.isGetProp());
1527:       assertFalse(node1.hasChildren());
1528:       assertFalse(node1.isWhile());
1529:       assertFalse(node2.isGetElem());
1530:       assertFalse(node2.isLabelName());
1531:       assertFalse(node2.isAssign());
1532:       assertEquals(2227, node2.getType());
1533:       assertFalse(node2.isNumber());
1534:       assertFalse(node2.isTypeOf());
1535:       assertFalse(node2.isDec());
1536:       assertFalse(node2.isCast());
1537:       assertFalse(node2.isOr());
1538:       assertFalse(node2.isExprResult());
1539:       assertFalse(node2.isNot());
1540:       assertEquals(512002, node2.getSourcePosition());
1541:       assertFalse(node2.isInstanceOf());
1542:       assertFalse(node2.isScript());
1543:       assertFalse(node2.isObjectLit());
1544:       assertFalse(node2.isWith());
1545:       assertFalse(node2.hasMoreThanOneChild());
1546:       assertFalse(node2.isBlock());
1547:       assertFalse(node2.isThis());
1548:       assertFalse(node2.isReturn());
1549:       assertFalse(node2.isComma());
1550:       assertFalse(node2.isGetProp());
1551:       assertFalse(node2.isWhile());
1552:       assertFalse(node2.isFalse());
1553:       assertFalse(node2.isThrow());
1554:       assertFalse(node2.isAnd());
1555:       assertFalse(node2.isFunction());
1556:       assertFalse(node2.isIn());
1557:       assertFalse(node2.isContinue());
1558:       assertFalse(node2.isInc());
1559:       assertFalse(node2.isSetterDef());
1560:       assertFalse(node2.isFor());
1561:       assertFalse(node2.isEmpty());
1562:       assertTrue(node2.hasOneChild());
1563:       assertFalse(node2.isGetterDef());
1564:       assertTrue(node2.hasChildren());
1565:       assertFalse(node2.isVoid());
1566:       assertFalse(node2.isDebugger());
1567:       assertFalse(node2.isTrue());
1568:       assertEquals(2, node2.getCharno());
1569:       assertFalse(node2.isArrayLit());
1570:       assertEquals(125, node2.getLineno());
1571:       assertFalse(node2.isNE());
1572:       assertFalse(node2.isDelProp());
1573:       assertFalse(node2.isIf());
1574:       assertFalse(node2.isCase());
1575:       assertFalse(node2.isRegExp());
1576:       assertFalse(node2.isCatch());
1577:       assertFalse(node2.isString());
1578:       assertFalse(node2.isTry());
1579:       assertEquals(1, node2.getChildCount());
1580:       assertFalse(node2.isHook());
1581:       assertFalse(node2.isStringKey());
1582:       assertFalse(node2.isName());
1583:       assertFalse(node2.isCall());
1584:       assertFalse(node2.isBreak());
1585:       assertFalse(node2.isNull());
1586:       assertFalse(node2.isParamList());
1587:       assertFalse(node2.isSwitch());
1588:       assertFalse(node2.isDo());
1589:       assertFalse(node2.isNew());
1590:       assertFalse(node2.isAdd());
1591:       assertFalse(node2.isLabel());
1592:       assertFalse(node2.isVar());
1593:       assertFalse(node2.isAssignAdd());
1594:       assertFalse(node2.isDefaultCase());
1595:       assertFalse(node0.equals((Object)node1));
1596:       assertFalse(node0.equals((Object)node2));
1597:       assertFalse(node1.equals((Object)node0));
1598:       assertFalse(node1.equals((Object)node2));
1599:       assertFalse(node2.equals((Object)node0));
1600:       assertFalse(node2.equals((Object)node1));
1601:       assertTrue(boolean4 == boolean2);
1602:       assertTrue(boolean4 == boolean3);
1603:       assertTrue(boolean4 == boolean0);
1604:       assertFalse(boolean4 == boolean1);
1605:       assertEquals(55, Node.INFERRED_FUNCTION);
1606:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1607:       assertEquals(43, Node.IS_CONSTANT_NAME);
1608:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1609:       assertEquals(39, Node.EMPTY_BLOCK);
1610:       assertEquals(53, Node.INPUT_ID);
1611:       assertEquals(36, Node.QUOTED_PROP);
1612:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1613:       assertEquals(8, Node.FLAG_NO_THROWS);
1614:       assertEquals(50, Node.FREE_CALL);
1615:       assertEquals(40, Node.ORIGINALNAME_PROP);
1616:       assertEquals(29, Node.JSDOC_INFO_PROP);
1617:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1618:       assertEquals(47, Node.IS_DISPATCHER);
1619:       assertEquals(2, Node.POST_FLAG);
1620:       assertEquals(30, Node.VAR_ARGS_NAME);
1621:       assertEquals(1, Node.DECR_FLAG);
1622:       assertEquals(12, Node.COLUMN_BITS);
1623:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1624:       assertEquals(57, Node.LAST_PROP);
1625:       assertEquals(49, Node.DIRECT_EVAL);
1626:       assertEquals(32, Node.INCRDECR_PROP);
1627:       assertEquals(46, Node.IS_NAMESPACE);
1628:       assertEquals(54, Node.SLASH_V);
1629:       assertEquals(57, Node.REFLECTED_OBJECT);
1630:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1631:       assertEquals(52, Node.LENGTH);
1632:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1633:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1634:       assertEquals(56, Node.CHANGE_TIME);
1635:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1636:       assertEquals(48, Node.DIRECTIVES);
1637:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1638:       assertEquals(37, Node.OPT_ARG_NAME);
1639:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1640:       assertEquals(4095, Node.COLUMN_MASK);
1641:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1642:       assertEquals(47, Node.IS_DISPATCHER);
1643:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1644:       assertEquals(36, Node.QUOTED_PROP);
1645:       assertEquals(29, Node.JSDOC_INFO_PROP);
1646:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1648:       assertEquals(53, Node.INPUT_ID);
1649:       assertEquals(55, Node.INFERRED_FUNCTION);
1650:       assertEquals(12, Node.COLUMN_BITS);
1651:       assertEquals(4095, Node.COLUMN_MASK);
1652:       assertEquals(32, Node.INCRDECR_PROP);
1653:       assertEquals(1, Node.DECR_FLAG);
1654:       assertEquals(37, Node.OPT_ARG_NAME);
1655:       assertEquals(56, Node.CHANGE_TIME);
1656:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1657:       assertEquals(48, Node.DIRECTIVES);
1658:       assertEquals(49, Node.DIRECT_EVAL);
1659:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1660:       assertEquals(50, Node.FREE_CALL);
1661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1662:       assertEquals(54, Node.SLASH_V);
1663:       assertEquals(57, Node.REFLECTED_OBJECT);
1664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1665:       assertEquals(57, Node.LAST_PROP);
1666:       assertEquals(8, Node.FLAG_NO_THROWS);
1667:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1668:       assertEquals(52, Node.LENGTH);
1669:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1670:       assertEquals(39, Node.EMPTY_BLOCK);
1671:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1672:       assertEquals(30, Node.VAR_ARGS_NAME);
1673:       assertEquals(46, Node.IS_NAMESPACE);
1674:       assertEquals(2, Node.POST_FLAG);
1675:       assertEquals(43, Node.IS_CONSTANT_NAME);
1676:       assertEquals(40, Node.ORIGINALNAME_PROP);
1677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1678:       assertEquals(29, Node.JSDOC_INFO_PROP);
1679:       assertEquals(56, Node.CHANGE_TIME);
1680:       assertEquals(2, Node.POST_FLAG);
1681:       assertEquals(47, Node.IS_DISPATCHER);
1682:       assertEquals(53, Node.INPUT_ID);
1683:       assertEquals(32, Node.INCRDECR_PROP);
1684:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1685:       assertEquals(30, Node.VAR_ARGS_NAME);
1686:       assertEquals(57, Node.LAST_PROP);
1687:       assertEquals(43, Node.IS_CONSTANT_NAME);
1688:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1689:       assertEquals(46, Node.IS_NAMESPACE);
1690:       assertEquals(54, Node.SLASH_V);
1691:       assertEquals(40, Node.ORIGINALNAME_PROP);
1692:       assertEquals(50, Node.FREE_CALL);
1693:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1694:       assertEquals(57, Node.REFLECTED_OBJECT);
1695:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1696:       assertEquals(8, Node.FLAG_NO_THROWS);
1697:       assertEquals(52, Node.LENGTH);
1698:       assertEquals(55, Node.INFERRED_FUNCTION);
1699:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1700:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1701:       assertEquals(39, Node.EMPTY_BLOCK);
1702:       assertEquals(49, Node.DIRECT_EVAL);
1703:       assertEquals(1, Node.DECR_FLAG);
1704:       assertEquals(12, Node.COLUMN_BITS);
1705:       assertEquals(36, Node.QUOTED_PROP);
1706:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1707:       assertEquals(48, Node.DIRECTIVES);
1708:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1709:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1710:       assertEquals(4095, Node.COLUMN_MASK);
1711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1712:       assertEquals(37, Node.OPT_ARG_NAME);
1713:       assertNotSame(node0, node2);
1714:       assertNotSame(node2, node0);
1715:       
1716:       boolean boolean5 = node1.isDelProp();
1717:       assertFalse(boolean5);
1718:       assertFalse(node1.isCast());
1719:       assertFalse(node1.hasOneChild());
1720:       assertFalse(node1.isGetElem());
1721:       assertFalse(node1.isAssign());
1722:       assertFalse(node1.isNumber());
1723:       assertFalse(node1.isTypeOf());
1724:       assertEquals((-1), node1.getSourcePosition());
1725:       assertFalse(node1.isExprResult());
1726:       assertFalse(node1.isLabelName());
1727:       assertEquals((-1), node1.getLineno());
1728:       assertFalse(node1.isAnd());
1729:       assertFalse(node1.isLabel());
1730:       assertFalse(node1.isOr());
1731:       assertFalse(node1.isContinue());
1732:       assertFalse(node1.isDo());
1733:       assertFalse(node1.isAssignAdd());
1734:       assertFalse(node1.isNew());
1735:       assertFalse(node1.isVar());
1736:       assertFalse(node1.isHook());
1737:       assertFalse(node1.isParamList());
1738:       assertEquals((-1), node1.getCharno());
1739:       assertFalse(node1.isStringKey());
1740:       assertFalse(node1.isSwitch());
1741:       assertFalse(node1.isInstanceOf());
1742:       assertFalse(node1.isCatch());
1743:       assertFalse(node1.isWith());
1744:       assertFalse(node1.hasMoreThanOneChild());
1745:       assertFalse(node1.isRegExp());
1746:       assertFalse(node1.isScript());
1747:       assertFalse(node1.isThis());
1748:       assertFalse(node1.isBlock());
1749:       assertFalse(node1.isTry());
1750:       assertFalse(node1.isFor());
1751:       assertFalse(node1.isCase());
1752:       assertTrue(node1.isString());
1753:       assertFalse(node1.isArrayLit());
1754:       assertFalse(node1.isEmpty());
1755:       assertFalse(node1.isGetterDef());
1756:       assertFalse(node1.isFunction());
1757:       assertFalse(node1.isNE());
1758:       assertFalse(node1.isDebugger());
1759:       assertFalse(node1.isTrue());
1760:       assertFalse(node1.isIf());
1761:       assertFalse(node1.isDelProp());
1762:       assertFalse(node1.isVoid());
1763:       assertEquals(40, node1.getType());
1764:       assertFalse(node1.isIn());
1765:       assertEquals(0, node1.getChildCount());
1766:       assertFalse(node1.isInc());
1767:       assertFalse(node1.isSetterDef());
1768:       assertFalse(node1.isDefaultCase());
1769:       assertFalse(node1.isThrow());
1770:       assertFalse(node1.isCall());
1771:       assertFalse(node1.isAdd());
1772:       assertFalse(node1.isFalse());
1773:       assertFalse(node1.isBreak());
1774:       assertFalse(node1.isNull());
1775:       assertFalse(node1.isName());
1776:       assertFalse(node1.isReturn());
1777:       assertFalse(node1.isNot());
1778:       assertFalse(node1.isObjectLit());
1779:       assertFalse(node1.isDec());
1780:       assertFalse(node1.isComma());
1781:       assertFalse(node1.isGetProp());
1782:       assertFalse(node1.hasChildren());
1783:       assertFalse(node1.isWhile());
1784:       assertFalse(node1.equals((Object)node0));
1785:       assertFalse(node1.equals((Object)node2));
1786:       assertTrue(boolean5 == boolean4);
1787:       assertTrue(boolean5 == boolean2);
1788:       assertTrue(boolean5 == boolean0);
1789:       assertTrue(boolean5 == boolean3);
1790:       assertFalse(boolean5 == boolean1);
1791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1792:       assertEquals(47, Node.IS_DISPATCHER);
1793:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1794:       assertEquals(36, Node.QUOTED_PROP);
1795:       assertEquals(29, Node.JSDOC_INFO_PROP);
1796:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1797:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1798:       assertEquals(53, Node.INPUT_ID);
1799:       assertEquals(55, Node.INFERRED_FUNCTION);
1800:       assertEquals(12, Node.COLUMN_BITS);
1801:       assertEquals(4095, Node.COLUMN_MASK);
1802:       assertEquals(32, Node.INCRDECR_PROP);
1803:       assertEquals(1, Node.DECR_FLAG);
1804:       assertEquals(37, Node.OPT_ARG_NAME);
1805:       assertEquals(56, Node.CHANGE_TIME);
1806:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1807:       assertEquals(48, Node.DIRECTIVES);
1808:       assertEquals(49, Node.DIRECT_EVAL);
1809:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1810:       assertEquals(50, Node.FREE_CALL);
1811:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1812:       assertEquals(54, Node.SLASH_V);
1813:       assertEquals(57, Node.REFLECTED_OBJECT);
1814:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1815:       assertEquals(57, Node.LAST_PROP);
1816:       assertEquals(8, Node.FLAG_NO_THROWS);
1817:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1818:       assertEquals(52, Node.LENGTH);
1819:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1820:       assertEquals(39, Node.EMPTY_BLOCK);
1821:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1822:       assertEquals(30, Node.VAR_ARGS_NAME);
1823:       assertEquals(46, Node.IS_NAMESPACE);
1824:       assertEquals(2, Node.POST_FLAG);
1825:       assertEquals(43, Node.IS_CONSTANT_NAME);
1826:       assertEquals(40, Node.ORIGINALNAME_PROP);
1827:       
1828:       Iterable<Node> iterable0 = node0.children();
1829:       assertFalse(node0.isAnd());
1830:       assertFalse(node0.isWith());
1831:       assertFalse(node0.isNot());
1832:       assertFalse(node0.isObjectLit());
1833:       assertEquals(0, node0.getCharno());
1834:       assertFalse(node0.isComma());
1835:       assertFalse(node0.isInstanceOf());
1836:       assertFalse(node0.isBreak());
1837:       assertFalse(node0.isCast());
1838:       assertFalse(node0.isExprResult());
1839:       assertFalse(node0.isLabelName());
1840:       assertFalse(node0.isAssign());
1841:       assertFalse(node0.isHook());
1842:       assertFalse(node0.isDec());
1843:       assertFalse(node0.hasChildren());
1844:       assertFalse(node0.isThis());
1845:       assertFalse(node0.isGetProp());
1846:       assertFalse(node0.hasOneChild());
1847:       assertFalse(node0.isNumber());
1848:       assertFalse(node0.isString());
1849:       assertFalse(node0.isScript());
1850:       assertFalse(node0.isCase());
1851:       assertFalse(node0.isContinue());
1852:       assertFalse(node0.hasMoreThanOneChild());
1853:       assertFalse(node0.isThrow());
1854:       assertFalse(node0.isFalse());
1855:       assertFalse(node0.isIf());
1856:       assertFalse(node0.isNE());
1857:       assertFalse(node0.isIn());
1858:       assertFalse(node0.isSetterDef());
1859:       assertFalse(node0.isInc());
1860:       assertFalse(node0.isDefaultCase());
1861:       assertEquals(0, node0.getChildCount());
1862:       assertFalse(node0.isTrue());
1863:       assertFalse(node0.isParamList());
1864:       assertFalse(node0.isFunction());
1865:       assertFalse(node0.isRegExp());
1866:       assertFalse(node0.isVoid());
1867:       assertFalse(node0.isArrayLit());
1868:       assertEquals(0, node0.getLineno());
1869:       assertFalse(node0.isCatch());
1870:       assertFalse(node0.isStringKey());
1871:       assertFalse(node0.isGetterDef());
1872:       assertFalse(node0.isFor());
1873:       assertFalse(node0.isBlock());
1874:       assertFalse(node0.isDebugger());
1875:       assertFalse(node0.isTry());
1876:       assertFalse(node0.isDo());
1877:       assertFalse(node0.isWhile());
1878:       assertFalse(node0.isReturn());
1879:       assertFalse(node0.isLabel());
1880:       assertFalse(node0.isSwitch());
1881:       assertFalse(node0.isTypeOf());
1882:       assertEquals(0, node0.getType());
1883:       assertFalse(node0.isCall());
1884:       assertFalse(node0.isGetElem());
1885:       assertFalse(node0.isName());
1886:       assertFalse(node0.isDelProp());
1887:       assertEquals(0, node0.getSourcePosition());
1888:       assertFalse(node0.isVar());
1889:       assertFalse(node0.isNull());
1890:       assertFalse(node0.isNew());
1891:       assertFalse(node0.isOr());
1892:       assertFalse(node0.isAssignAdd());
1893:       assertFalse(node0.isAdd());
1894:       assertFalse(node0.isEmpty());
1895:       assertFalse(iterable0.contains(node1));
1896:       assertFalse(node0.equals((Object)node1));
1897:       assertFalse(node0.equals((Object)node2));
1898:       assertEquals(55, Node.INFERRED_FUNCTION);
1899:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1900:       assertEquals(43, Node.IS_CONSTANT_NAME);
1901:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1902:       assertEquals(39, Node.EMPTY_BLOCK);
1903:       assertEquals(53, Node.INPUT_ID);
1904:       assertEquals(36, Node.QUOTED_PROP);
1905:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1906:       assertEquals(8, Node.FLAG_NO_THROWS);
1907:       assertEquals(50, Node.FREE_CALL);
1908:       assertEquals(40, Node.ORIGINALNAME_PROP);
1909:       assertEquals(29, Node.JSDOC_INFO_PROP);
1910:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1911:       assertEquals(47, Node.IS_DISPATCHER);
1912:       assertEquals(2, Node.POST_FLAG);
1913:       assertEquals(30, Node.VAR_ARGS_NAME);
1914:       assertEquals(1, Node.DECR_FLAG);
1915:       assertEquals(12, Node.COLUMN_BITS);
1916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1917:       assertEquals(57, Node.LAST_PROP);
1918:       assertEquals(49, Node.DIRECT_EVAL);
1919:       assertEquals(32, Node.INCRDECR_PROP);
1920:       assertEquals(46, Node.IS_NAMESPACE);
1921:       assertEquals(54, Node.SLASH_V);
1922:       assertEquals(57, Node.REFLECTED_OBJECT);
1923:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1924:       assertEquals(52, Node.LENGTH);
1925:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1927:       assertEquals(56, Node.CHANGE_TIME);
1928:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1929:       assertEquals(48, Node.DIRECTIVES);
1930:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1931:       assertEquals(37, Node.OPT_ARG_NAME);
1932:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1933:       assertEquals(4095, Node.COLUMN_MASK);
1934:       assertNotSame(node0, node2);
1935:       assertNotNull(iterable0);
1936:       
1937:       boolean boolean6 = node1.isGetElem();
1938:       assertFalse(boolean6);
1939:       assertFalse(node1.isCast());
1940:       assertFalse(node1.hasOneChild());
1941:       assertFalse(node1.isGetElem());
1942:       assertFalse(node1.isAssign());
1943:       assertFalse(node1.isNumber());
1944:       assertFalse(node1.isTypeOf());
1945:       assertEquals((-1), node1.getSourcePosition());
1946:       assertFalse(node1.isExprResult());
1947:       assertFalse(node1.isLabelName());
1948:       assertEquals((-1), node1.getLineno());
1949:       assertFalse(node1.isAnd());
1950:       assertFalse(node1.isLabel());
1951:       assertFalse(node1.isOr());
1952:       assertFalse(node1.isContinue());
1953:       assertFalse(node1.isDo());
1954:       assertFalse(node1.isAssignAdd());
1955:       assertFalse(node1.isNew());
1956:       assertFalse(node1.isVar());
1957:       assertFalse(node1.isHook());
1958:       assertFalse(node1.isParamList());
1959:       assertEquals((-1), node1.getCharno());
1960:       assertFalse(node1.isStringKey());
1961:       assertFalse(node1.isSwitch());
1962:       assertFalse(node1.isInstanceOf());
1963:       assertFalse(node1.isCatch());
1964:       assertFalse(node1.isWith());
1965:       assertFalse(node1.hasMoreThanOneChild());
1966:       assertFalse(node1.isRegExp());
1967:       assertFalse(node1.isScript());
1968:       assertFalse(node1.isThis());
1969:       assertFalse(node1.isBlock());
1970:       assertFalse(node1.isTry());
1971:       assertFalse(node1.isFor());
1972:       assertFalse(node1.isCase());
1973:       assertTrue(node1.isString());
1974:       assertFalse(node1.isArrayLit());
1975:       assertFalse(node1.isEmpty());
1976:       assertFalse(node1.isGetterDef());
1977:       assertFalse(node1.isFunction());
1978:       assertFalse(node1.isNE());
1979:       assertFalse(node1.isDebugger());
1980:       assertFalse(node1.isTrue());
1981:       assertFalse(node1.isIf());
1982:       assertFalse(node1.isDelProp());
1983:       assertFalse(node1.isVoid());
1984:       assertEquals(40, node1.getType());
1985:       assertFalse(node1.isIn());
1986:       assertEquals(0, node1.getChildCount());
1987:       assertFalse(node1.isInc());
1988:       assertFalse(node1.isSetterDef());
1989:       assertFalse(node1.isDefaultCase());
1990:       assertFalse(node1.isThrow());
1991:       assertFalse(node1.isCall());
1992:       assertFalse(node1.isAdd());
1993:       assertFalse(node1.isFalse());
1994:       assertFalse(node1.isBreak());
1995:       assertFalse(node1.isNull());
1996:       assertFalse(node1.isName());
1997:       assertFalse(node1.isReturn());
1998:       assertFalse(node1.isNot());
1999:       assertFalse(node1.isObjectLit());
2000:       assertFalse(node1.isDec());
2001:       assertFalse(node1.isComma());
2002:       assertFalse(node1.isGetProp());
2003:       assertFalse(node1.hasChildren());
2004:       assertFalse(node1.isWhile());
2005:       assertFalse(node1.equals((Object)node0));
2006:       assertFalse(node1.equals((Object)node2));
2007:       assertTrue(boolean6 == boolean0);
2008:       assertFalse(boolean6 == boolean1);
2009:       assertTrue(boolean6 == boolean4);
2010:       assertTrue(boolean6 == boolean2);
2011:       assertTrue(boolean6 == boolean3);
2012:       assertTrue(boolean6 == boolean5);
2013:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2014:       assertEquals(47, Node.IS_DISPATCHER);
2015:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2016:       assertEquals(36, Node.QUOTED_PROP);
2017:       assertEquals(29, Node.JSDOC_INFO_PROP);
2018:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2019:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2020:       assertEquals(53, Node.INPUT_ID);
2021:       assertEquals(55, Node.INFERRED_FUNCTION);
2022:       assertEquals(12, Node.COLUMN_BITS);
2023:       assertEquals(4095, Node.COLUMN_MASK);
2024:       assertEquals(32, Node.INCRDECR_PROP);
2025:       assertEquals(1, Node.DECR_FLAG);
2026:       assertEquals(37, Node.OPT_ARG_NAME);
2027:       assertEquals(56, Node.CHANGE_TIME);
2028:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2029:       assertEquals(48, Node.DIRECTIVES);
2030:       assertEquals(49, Node.DIRECT_EVAL);
2031:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2032:       assertEquals(50, Node.FREE_CALL);
2033:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2034:       assertEquals(54, Node.SLASH_V);
2035:       assertEquals(57, Node.REFLECTED_OBJECT);
2036:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2037:       assertEquals(57, Node.LAST_PROP);
2038:       assertEquals(8, Node.FLAG_NO_THROWS);
2039:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2040:       assertEquals(52, Node.LENGTH);
2041:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2042:       assertEquals(39, Node.EMPTY_BLOCK);
2043:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2044:       assertEquals(30, Node.VAR_ARGS_NAME);
2045:       assertEquals(46, Node.IS_NAMESPACE);
2046:       assertEquals(2, Node.POST_FLAG);
2047:       assertEquals(43, Node.IS_CONSTANT_NAME);
2048:       assertEquals(40, Node.ORIGINALNAME_PROP);
2049:       
2050:       boolean boolean7 = node1.isNew();
2051:       assertFalse(boolean7);
2052:       assertFalse(node1.isCast());
2053:       assertFalse(node1.hasOneChild());
2054:       assertFalse(node1.isGetElem());
2055:       assertFalse(node1.isAssign());
2056:       assertFalse(node1.isNumber());
2057:       assertFalse(node1.isTypeOf());
2058:       assertEquals((-1), node1.getSourcePosition());
2059:       assertFalse(node1.isExprResult());
2060:       assertFalse(node1.isLabelName());
2061:       assertEquals((-1), node1.getLineno());
2062:       assertFalse(node1.isAnd());
2063:       assertFalse(node1.isLabel());
2064:       assertFalse(node1.isOr());
2065:       assertFalse(node1.isContinue());
2066:       assertFalse(node1.isDo());
2067:       assertFalse(node1.isAssignAdd());
2068:       assertFalse(node1.isNew());
2069:       assertFalse(node1.isVar());
2070:       assertFalse(node1.isHook());
2071:       assertFalse(node1.isParamList());
2072:       assertEquals((-1), node1.getCharno());
2073:       assertFalse(node1.isStringKey());
2074:       assertFalse(node1.isSwitch());
2075:       assertFalse(node1.isInstanceOf());
2076:       assertFalse(node1.isCatch());
2077:       assertFalse(node1.isWith());
2078:       assertFalse(node1.hasMoreThanOneChild());
2079:       assertFalse(node1.isRegExp());
2080:       assertFalse(node1.isScript());
2081:       assertFalse(node1.isThis());
2082:       assertFalse(node1.isBlock());
2083:       assertFalse(node1.isTry());
2084:       assertFalse(node1.isFor());
2085:       assertFalse(node1.isCase());
2086:       assertTrue(node1.isString());
2087:       assertFalse(node1.isArrayLit());
2088:       assertFalse(node1.isEmpty());
2089:       assertFalse(node1.isGetterDef());
2090:       assertFalse(node1.isFunction());
2091:       assertFalse(node1.isNE());
2092:       assertFalse(node1.isDebugger());
2093:       assertFalse(node1.isTrue());
2094:       assertFalse(node1.isIf());
2095:       assertFalse(node1.isDelProp());
2096:       assertFalse(node1.isVoid());
2097:       assertEquals(40, node1.getType());
2098:       assertFalse(node1.isIn());
2099:       assertEquals(0, node1.getChildCount());
2100:       assertFalse(node1.isInc());
2101:       assertFalse(node1.isSetterDef());
2102:       assertFalse(node1.isDefaultCase());
2103:       assertFalse(node1.isThrow());
2104:       assertFalse(node1.isCall());
2105:       assertFalse(node1.isAdd());
2106:       assertFalse(node1.isFalse());
2107:       assertFalse(node1.isBreak());
2108:       assertFalse(node1.isNull());
2109:       assertFalse(node1.isName());
2110:       assertFalse(node1.isReturn());
2111:       assertFalse(node1.isNot());
2112:       assertFalse(node1.isObjectLit());
2113:       assertFalse(node1.isDec());
2114:       assertFalse(node1.isComma());
2115:       assertFalse(node1.isGetProp());
2116:       assertFalse(node1.hasChildren());
2117:       assertFalse(node1.isWhile());
2118:       assertFalse(node1.equals((Object)node0));
2119:       assertFalse(node1.equals((Object)node2));
2120:       assertTrue(boolean7 == boolean4);
2121:       assertTrue(boolean7 == boolean0);
2122:       assertTrue(boolean7 == boolean2);
2123:       assertTrue(boolean7 == boolean3);
2124:       assertTrue(boolean7 == boolean5);
2125:       assertTrue(boolean7 == boolean6);
2126:       assertFalse(boolean7 == boolean1);
2127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2128:       assertEquals(47, Node.IS_DISPATCHER);
2129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2130:       assertEquals(36, Node.QUOTED_PROP);
2131:       assertEquals(29, Node.JSDOC_INFO_PROP);
2132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2134:       assertEquals(53, Node.INPUT_ID);
2135:       assertEquals(55, Node.INFERRED_FUNCTION);
2136:       assertEquals(12, Node.COLUMN_BITS);
2137:       assertEquals(4095, Node.COLUMN_MASK);
2138:       assertEquals(32, Node.INCRDECR_PROP);
2139:       assertEquals(1, Node.DECR_FLAG);
2140:       assertEquals(37, Node.OPT_ARG_NAME);
2141:       assertEquals(56, Node.CHANGE_TIME);
2142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2143:       assertEquals(48, Node.DIRECTIVES);
2144:       assertEquals(49, Node.DIRECT_EVAL);
2145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2146:       assertEquals(50, Node.FREE_CALL);
2147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2148:       assertEquals(54, Node.SLASH_V);
2149:       assertEquals(57, Node.REFLECTED_OBJECT);
2150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2151:       assertEquals(57, Node.LAST_PROP);
2152:       assertEquals(8, Node.FLAG_NO_THROWS);
2153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2154:       assertEquals(52, Node.LENGTH);
2155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2156:       assertEquals(39, Node.EMPTY_BLOCK);
2157:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2158:       assertEquals(30, Node.VAR_ARGS_NAME);
2159:       assertEquals(46, Node.IS_NAMESPACE);
2160:       assertEquals(2, Node.POST_FLAG);
2161:       assertEquals(43, Node.IS_CONSTANT_NAME);
2162:       assertEquals(40, Node.ORIGINALNAME_PROP);
2163:       
2164:       Node node3 = Node.newNumber(3522.04892294503);
2165:       assertFalse(node3.isName());
2166:       assertFalse(node3.isStringKey());
2167:       assertFalse(node3.isCall());
2168:       assertFalse(node3.isSetterDef());
2169:       assertFalse(node3.isAdd());
2170:       assertFalse(node3.isParamList());
2171:       assertFalse(node3.isNull());
2172:       assertFalse(node3.isDo());
2173:       assertFalse(node3.isContinue());
2174:       assertFalse(node3.isDefaultCase());
2175:       assertFalse(node3.isLabel());
2176:       assertFalse(node3.isNew());
2177:       assertFalse(node3.isFunction());
2178:       assertFalse(node3.isAssignAdd());
2179:       assertFalse(node3.isVar());
2180:       assertEquals(0, node3.getChildCount());
2181:       assertFalse(node3.isEmpty());
2182:       assertFalse(node3.isAssign());
2183:       assertFalse(node3.isDelProp());
2184:       assertFalse(node3.isCast());
2185:       assertFalse(node3.isGetElem());
2186:       assertFalse(node3.isOr());
2187:       assertFalse(node3.isVoid());
2188:       assertEquals((-1), node3.getSourcePosition());
2189:       assertFalse(node3.isDebugger());
2190:       assertFalse(node3.isTrue());
2191:       assertFalse(node3.isNot());
2192:       assertFalse(node3.isString());
2193:       assertFalse(node3.isWhile());
2194:       assertFalse(node3.isObjectLit());
2195:       assertFalse(node3.isExprResult());
2196:       assertTrue(node3.isNumber());
2197:       assertFalse(node3.isTypeOf());
2198:       assertFalse(node3.isDec());
2199:       assertFalse(node3.isComma());
2200:       assertFalse(node3.isReturn());
2201:       assertFalse(node3.hasChildren());
2202:       assertFalse(node3.isThrow());
2203:       assertFalse(node3.isFalse());
2204:       assertFalse(node3.isBreak());
2205:       assertFalse(node3.isGetProp());
2206:       assertFalse(node3.isSwitch());
2207:       assertEquals((-1), node3.getCharno());
2208:       assertFalse(node3.isAnd());
2209:       assertFalse(node3.isInc());
2210:       assertFalse(node3.isFor());
2211:       assertFalse(node3.isLabelName());
2212:       assertFalse(node3.isGetterDef());
2213:       assertFalse(node3.isIf());
2214:       assertFalse(node3.isArrayLit());
2215:       assertFalse(node3.hasOneChild());
2216:       assertEquals((-1), node3.getLineno());
2217:       assertFalse(node3.isIn());
2218:       assertFalse(node3.isNE());
2219:       assertFalse(node3.isCase());
2220:       assertFalse(node3.isWith());
2221:       assertFalse(node3.hasMoreThanOneChild());
2222:       assertFalse(node3.isScript());
2223:       assertFalse(node3.isInstanceOf());
2224:       assertFalse(node3.isCatch());
2225:       assertFalse(node3.isTry());
2226:       assertFalse(node3.isBlock());
2227:       assertFalse(node3.isRegExp());
2228:       assertEquals(39, node3.getType());
2229:       assertFalse(node3.isHook());
2230:       assertFalse(node3.isThis());
2231:       assertFalse(node3.equals((Object)node2));
2232:       assertFalse(node3.equals((Object)node0));
2233:       assertFalse(node3.equals((Object)node1));
2234:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2235:       assertEquals(50, Node.FREE_CALL);
2236:       assertEquals(40, Node.ORIGINALNAME_PROP);
2237:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2238:       assertEquals(52, Node.LENGTH);
2239:       assertEquals(8, Node.FLAG_NO_THROWS);
2240:       assertEquals(39, Node.EMPTY_BLOCK);
2241:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2243:       assertEquals(57, Node.LAST_PROP);
2244:       assertEquals(49, Node.DIRECT_EVAL);
2245:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2247:       assertEquals(36, Node.QUOTED_PROP);
2248:       assertEquals(4095, Node.COLUMN_MASK);
2249:       assertEquals(55, Node.INFERRED_FUNCTION);
2250:       assertEquals(48, Node.DIRECTIVES);
2251:       assertEquals(37, Node.OPT_ARG_NAME);
2252:       assertEquals(57, Node.REFLECTED_OBJECT);
2253:       assertEquals(56, Node.CHANGE_TIME);
2254:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2255:       assertEquals(29, Node.JSDOC_INFO_PROP);
2256:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2257:       assertEquals(47, Node.IS_DISPATCHER);
2258:       assertEquals(2, Node.POST_FLAG);
2259:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2260:       assertEquals(53, Node.INPUT_ID);
2261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2262:       assertEquals(12, Node.COLUMN_BITS);
2263:       assertEquals(32, Node.INCRDECR_PROP);
2264:       assertEquals(30, Node.VAR_ARGS_NAME);
2265:       assertEquals(1, Node.DECR_FLAG);
2266:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2267:       assertEquals(46, Node.IS_NAMESPACE);
2268:       assertEquals(54, Node.SLASH_V);
2269:       assertEquals(43, Node.IS_CONSTANT_NAME);
2270:       assertNotNull(node3);
2271:   }
2272: }
RegularFileObject[/tmp/EvoSuite_140_1628161367310/com/google/javascript/rhino/Node_140_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:47 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_140_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_140_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_140_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:02:47.804 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0, 0, 0);
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node0);

boolean boolean0 = node0.getBooleanProp(0);
assertFalse(boolean0);
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean1 = node0.mayMutateGlobalStateOrThrow();
assertTrue(boolean1);
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(boolean1 == boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Node node1 = Node.newString("empty_block");
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node1);

boolean boolean2 = node1.isQuotedString();
assertFalse(boolean2);
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean3 = node1.isThrow();
assertFalse(boolean3);
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertFalse(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node_FileLevelJsDocBuilder0);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNull(staticSourceFile0);

node_FileLevelJsDocBuilder0.append("Use SerializedForm");
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

node_FileLevelJsDocBuilder0.append("Use SerializedForm");
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node2 = new Node(2227, node0, node1, node0, node0, 125, 2);
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertEquals(2227, node2.getType());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isCast());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertEquals(512002, node2.getSourcePosition());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAnd());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasChildren());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals(2, node2.getCharno());
assertFalse(node2.isArrayLit());
assertEquals(125, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isString());
assertFalse(node2.isTry());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node2);

boolean boolean4 = node2.isAssign();
assertFalse(boolean4);
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertEquals(2227, node2.getType());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isCast());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertEquals(512002, node2.getSourcePosition());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAnd());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasChildren());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals(2, node2.getCharno());
assertFalse(node2.isArrayLit());
assertEquals(125, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isString());
assertFalse(node2.isTry());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertFalse(boolean4 == boolean1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node0, node2);
assertNotSame(node2, node0);

boolean boolean5 = node1.isDelProp();
assertFalse(boolean5);
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertFalse(boolean5 == boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(iterable0.contains(node1));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node2);
assertNotNull(iterable0);

boolean boolean6 = node1.isGetElem();
assertFalse(boolean6);
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean6 == boolean0);
assertFalse(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean5);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean7 = node1.isNew();
assertFalse(boolean7);
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean6);
assertFalse(boolean7 == boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node3 = Node.newNumber(3522.04892294503);
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isCall());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isLabel());
assertFalse(node3.isNew());
assertFalse(node3.isFunction());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isEmpty());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertFalse(node3.isVoid());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isNot());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isObjectLit());
assertFalse(node3.isExprResult());
assertTrue(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isAnd());
assertFalse(node3.isInc());
assertFalse(node3.isFor());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isCase());
assertFalse(node3.isWith());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isTry());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertEquals(39, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node3);


[MASTER] 11:02:51.360 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_193_1628161371339/com/google/javascript/rhino/Node_193_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_193_1628161371339/com/google/javascript/rhino/Node_193_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:51.360 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:51.361 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:51.361 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 192
[MASTER] 11:02:51.362 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_193_1628161371339/com/google/javascript/rhino/Node_193_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_193_tmp__ESTest extends Node_193_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(62, 62, 62);
21:       assertFalse(node0.hasOneChild());
22:       assertFalse(node0.isCast());
23:       assertEquals(62, node0.getCharno());
24:       assertFalse(node0.isAssign());
25:       assertFalse(node0.isNumber());
26:       assertFalse(node0.isDec());
27:       assertFalse(node0.hasChildren());
28:       assertFalse(node0.isScript());
29:       assertFalse(node0.isAssignAdd());
30:       assertFalse(node0.isInstanceOf());
31:       assertFalse(node0.isReturn());
32:       assertFalse(node0.isWith());
33:       assertFalse(node0.hasMoreThanOneChild());
34:       assertFalse(node0.isComma());
35:       assertFalse(node0.isOr());
36:       assertFalse(node0.isTypeOf());
37:       assertFalse(node0.isBreak());
38:       assertFalse(node0.isExprResult());
39:       assertFalse(node0.isGetElem());
40:       assertFalse(node0.isCall());
41:       assertFalse(node0.isFalse());
42:       assertFalse(node0.isString());
43:       assertFalse(node0.isInc());
44:       assertFalse(node0.isSetterDef());
45:       assertFalse(node0.isWhile());
46:       assertFalse(node0.isThrow());
47:       assertFalse(node0.isGetProp());
48:       assertFalse(node0.isContinue());
49:       assertFalse(node0.isNot());
50:       assertFalse(node0.isObjectLit());
51:       assertFalse(node0.isAnd());
52:       assertEquals(62, node0.getLineno());
53:       assertFalse(node0.isArrayLit());
54:       assertFalse(node0.isDebugger());
55:       assertFalse(node0.isFunction());
56:       assertFalse(node0.isGetterDef());
57:       assertFalse(node0.isRegExp());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isTry());
62:       assertFalse(node0.isIn());
63:       assertFalse(node0.isCatch());
64:       assertFalse(node0.isIf());
65:       assertFalse(node0.isNE());
66:       assertFalse(node0.isTrue());
67:       assertFalse(node0.isNull());
68:       assertEquals(62, node0.getType());
69:       assertEquals(254014, node0.getSourcePosition());
70:       assertFalse(node0.isName());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isHook());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isVar());
76:       assertFalse(node0.isBlock());
77:       assertFalse(node0.isThis());
78:       assertFalse(node0.isNew());
79:       assertFalse(node0.isCase());
80:       assertFalse(node0.isDo());
81:       assertEquals(0, node0.getChildCount());
82:       assertFalse(node0.isLabel());
83:       assertFalse(node0.isParamList());
84:       assertFalse(node0.isStringKey());
85:       assertFalse(node0.isSwitch());
86:       assertFalse(node0.isLabelName());
87:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
88:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
89:       assertEquals(43, Node.IS_CONSTANT_NAME);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(2, Node.POST_FLAG);
93:       assertEquals(37, Node.OPT_ARG_NAME);
94:       assertEquals(51, Node.STATIC_SOURCE_FILE);
95:       assertEquals(4095, Node.COLUMN_MASK);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(12, Node.COLUMN_BITS);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(52, Node.LENGTH);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(54, Node.SLASH_V);
107:       assertEquals(30, Node.VAR_ARGS_NAME);
108:       assertEquals(48, Node.DIRECTIVES);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(40, Node.ORIGINALNAME_PROP);
111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(8, Node.FLAG_NO_THROWS);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(55, Node.INFERRED_FUNCTION);
120:       assertEquals(39, Node.EMPTY_BLOCK);
121:       assertEquals(29, Node.JSDOC_INFO_PROP);
122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(node0.hasOneChild());
127:       assertFalse(node0.isCast());
128:       assertEquals(62, node0.getCharno());
129:       assertFalse(node0.isAssign());
130:       assertFalse(node0.isNumber());
131:       assertFalse(node0.isDec());
132:       assertFalse(node0.hasChildren());
133:       assertFalse(node0.isScript());
134:       assertFalse(node0.isAssignAdd());
135:       assertFalse(node0.isInstanceOf());
136:       assertFalse(node0.isReturn());
137:       assertFalse(node0.isWith());
138:       assertFalse(node0.hasMoreThanOneChild());
139:       assertFalse(node0.isComma());
140:       assertFalse(node0.isOr());
141:       assertFalse(node0.isTypeOf());
142:       assertFalse(node0.isBreak());
143:       assertFalse(node0.isExprResult());
144:       assertFalse(node0.isGetElem());
145:       assertFalse(node0.isCall());
146:       assertFalse(node0.isFalse());
147:       assertFalse(node0.isString());
148:       assertFalse(node0.isInc());
149:       assertFalse(node0.isSetterDef());
150:       assertFalse(node0.isWhile());
151:       assertFalse(node0.isThrow());
152:       assertFalse(node0.isGetProp());
153:       assertFalse(node0.isContinue());
154:       assertFalse(node0.isNot());
155:       assertFalse(node0.isObjectLit());
156:       assertFalse(node0.isAnd());
157:       assertEquals(62, node0.getLineno());
158:       assertFalse(node0.isArrayLit());
159:       assertFalse(node0.isDebugger());
160:       assertFalse(node0.isFunction());
161:       assertFalse(node0.isGetterDef());
162:       assertFalse(node0.isRegExp());
163:       assertFalse(node0.isDefaultCase());
164:       assertFalse(node0.isFor());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isTry());
167:       assertFalse(node0.isIn());
168:       assertFalse(node0.isCatch());
169:       assertFalse(node0.isIf());
170:       assertFalse(node0.isNE());
171:       assertFalse(node0.isTrue());
172:       assertFalse(node0.isNull());
173:       assertEquals(62, node0.getType());
174:       assertEquals(254014, node0.getSourcePosition());
175:       assertFalse(node0.isName());
176:       assertFalse(node0.isDelProp());
177:       assertFalse(node0.isVoid());
178:       assertFalse(node0.isHook());
179:       assertFalse(node0.isAdd());
180:       assertFalse(node0.isVar());
181:       assertFalse(node0.isBlock());
182:       assertFalse(node0.isThis());
183:       assertFalse(node0.isNew());
184:       assertFalse(node0.isCase());
185:       assertFalse(node0.isDo());
186:       assertEquals(0, node0.getChildCount());
187:       assertFalse(node0.isLabel());
188:       assertFalse(node0.isParamList());
189:       assertFalse(node0.isStringKey());
190:       assertFalse(node0.isSwitch());
191:       assertFalse(node0.isLabelName());
192:       assertFalse(iterable0.contains(node0));
193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
195:       assertEquals(43, Node.IS_CONSTANT_NAME);
196:       assertEquals(56, Node.CHANGE_TIME);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(2, Node.POST_FLAG);
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(51, Node.STATIC_SOURCE_FILE);
201:       assertEquals(4095, Node.COLUMN_MASK);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(12, Node.COLUMN_BITS);
204:       assertEquals(46, Node.IS_NAMESPACE);
205:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
206:       assertEquals(50, Node.FREE_CALL);
207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
208:       assertEquals(1, Node.DECR_FLAG);
209:       assertEquals(57, Node.REFLECTED_OBJECT);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(54, Node.SLASH_V);
213:       assertEquals(30, Node.VAR_ARGS_NAME);
214:       assertEquals(48, Node.DIRECTIVES);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(40, Node.ORIGINALNAME_PROP);
217:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
220:       assertEquals(36, Node.QUOTED_PROP);
221:       assertEquals(57, Node.LAST_PROP);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(53, Node.INPUT_ID);
224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
225:       assertEquals(55, Node.INFERRED_FUNCTION);
226:       assertEquals(39, Node.EMPTY_BLOCK);
227:       assertEquals(29, Node.JSDOC_INFO_PROP);
228:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
229:       assertNotNull(iterable0);
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_193_1628161371339/com/google/javascript/rhino/Node_193_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_193_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_193_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_193_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:02:51.364 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(62, 62, 62);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertEquals(62, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(62, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(62, node0.getType());
assertEquals(254014, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertEquals(62, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(62, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(62, node0.getType());
assertEquals(254014, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(iterable0.contains(node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(iterable0);


[MASTER] 11:02:55.725 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_251_1628161375695/com/google/javascript/rhino/Node_251_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_251_1628161375695/com/google/javascript/rhino/Node_251_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:55.725 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:55.725 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:55.725 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 192
[MASTER] 11:02:55.726 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_251_1628161375695/com/google/javascript/rhino/Node_251_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:55 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_251_tmp__ESTest extends Node_251_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(64);
21:       assertFalse(node0.isTry());
22:       assertFalse(node0.isVoid());
23:       assertFalse(node0.isArrayLit());
24:       assertTrue(node0.isObjectLit());
25:       assertFalse(node0.isEmpty());
26:       assertFalse(node0.isGetterDef());
27:       assertFalse(node0.isIf());
28:       assertFalse(node0.isDelProp());
29:       assertFalse(node0.isDebugger());
30:       assertFalse(node0.isNE());
31:       assertFalse(node0.isTrue());
32:       assertFalse(node0.isCase());
33:       assertFalse(node0.isCatch());
34:       assertFalse(node0.isRegExp());
35:       assertFalse(node0.isFor());
36:       assertFalse(node0.isInc());
37:       assertEquals(64, node0.getType());
38:       assertFalse(node0.isString());
39:       assertFalse(node0.isIn());
40:       assertFalse(node0.isContinue());
41:       assertFalse(node0.isSetterDef());
42:       assertFalse(node0.isFalse());
43:       assertFalse(node0.isFunction());
44:       assertFalse(node0.isThrow());
45:       assertFalse(node0.hasOneChild());
46:       assertFalse(node0.isScript());
47:       assertFalse(node0.isCast());
48:       assertFalse(node0.isGetElem());
49:       assertFalse(node0.isExprResult());
50:       assertEquals((-1), node0.getSourcePosition());
51:       assertFalse(node0.isLabelName());
52:       assertFalse(node0.isNot());
53:       assertFalse(node0.isNumber());
54:       assertFalse(node0.isAnd());
55:       assertEquals((-1), node0.getLineno());
56:       assertFalse(node0.isInstanceOf());
57:       assertFalse(node0.hasMoreThanOneChild());
58:       assertFalse(node0.isGetProp());
59:       assertFalse(node0.hasChildren());
60:       assertFalse(node0.isWhile());
61:       assertFalse(node0.isDec());
62:       assertFalse(node0.isAssign());
63:       assertFalse(node0.isWith());
64:       assertFalse(node0.isTypeOf());
65:       assertFalse(node0.isComma());
66:       assertFalse(node0.isHook());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isReturn());
69:       assertFalse(node0.isBlock());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isAdd());
72:       assertFalse(node0.isCall());
73:       assertFalse(node0.isBreak());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.isName());
76:       assertEquals((-1), node0.getCharno());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isParamList());
79:       assertFalse(node0.isNull());
80:       assertEquals(0, node0.getChildCount());
81:       assertFalse(node0.isOr());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isDefaultCase());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.isLabel());
86:       assertFalse(node0.isVar());
87:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
88:       assertEquals(53, Node.INPUT_ID);
89:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
90:       assertEquals(47, Node.IS_DISPATCHER);
91:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(32, Node.INCRDECR_PROP);
94:       assertEquals(46, Node.IS_NAMESPACE);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(2, Node.POST_FLAG);
97:       assertEquals(30, Node.VAR_ARGS_NAME);
98:       assertEquals(43, Node.IS_CONSTANT_NAME);
99:       assertEquals(54, Node.SLASH_V);
100:       assertEquals(40, Node.ORIGINALNAME_PROP);
101:       assertEquals(57, Node.REFLECTED_OBJECT);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(52, Node.LENGTH);
105:       assertEquals(50, Node.FREE_CALL);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(39, Node.EMPTY_BLOCK);
109:       assertEquals(1, Node.DECR_FLAG);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(12, Node.COLUMN_BITS);
113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
114:       assertEquals(4095, Node.COLUMN_MASK);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
117:       assertEquals(56, Node.CHANGE_TIME);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(node0.isTry());
127:       assertFalse(node0.isVoid());
128:       assertFalse(node0.isArrayLit());
129:       assertTrue(node0.isObjectLit());
130:       assertFalse(node0.isEmpty());
131:       assertFalse(node0.isGetterDef());
132:       assertFalse(node0.isIf());
133:       assertFalse(node0.isDelProp());
134:       assertFalse(node0.isDebugger());
135:       assertFalse(node0.isNE());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isCase());
138:       assertFalse(node0.isCatch());
139:       assertFalse(node0.isRegExp());
140:       assertFalse(node0.isFor());
141:       assertFalse(node0.isInc());
142:       assertEquals(64, node0.getType());
143:       assertFalse(node0.isString());
144:       assertFalse(node0.isIn());
145:       assertFalse(node0.isContinue());
146:       assertFalse(node0.isSetterDef());
147:       assertFalse(node0.isFalse());
148:       assertFalse(node0.isFunction());
149:       assertFalse(node0.isThrow());
150:       assertFalse(node0.hasOneChild());
151:       assertFalse(node0.isScript());
152:       assertFalse(node0.isCast());
153:       assertFalse(node0.isGetElem());
154:       assertFalse(node0.isExprResult());
155:       assertEquals((-1), node0.getSourcePosition());
156:       assertFalse(node0.isLabelName());
157:       assertFalse(node0.isNot());
158:       assertFalse(node0.isNumber());
159:       assertFalse(node0.isAnd());
160:       assertEquals((-1), node0.getLineno());
161:       assertFalse(node0.isInstanceOf());
162:       assertFalse(node0.hasMoreThanOneChild());
163:       assertFalse(node0.isGetProp());
164:       assertFalse(node0.hasChildren());
165:       assertFalse(node0.isWhile());
166:       assertFalse(node0.isDec());
167:       assertFalse(node0.isAssign());
168:       assertFalse(node0.isWith());
169:       assertFalse(node0.isTypeOf());
170:       assertFalse(node0.isComma());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isThis());
173:       assertFalse(node0.isReturn());
174:       assertFalse(node0.isBlock());
175:       assertFalse(node0.isNew());
176:       assertFalse(node0.isAdd());
177:       assertFalse(node0.isCall());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.isSwitch());
180:       assertFalse(node0.isName());
181:       assertEquals((-1), node0.getCharno());
182:       assertFalse(node0.isStringKey());
183:       assertFalse(node0.isParamList());
184:       assertFalse(node0.isNull());
185:       assertEquals(0, node0.getChildCount());
186:       assertFalse(node0.isOr());
187:       assertFalse(node0.isAssignAdd());
188:       assertFalse(node0.isDefaultCase());
189:       assertFalse(node0.isDo());
190:       assertFalse(node0.isLabel());
191:       assertFalse(node0.isVar());
192:       assertFalse(iterable0.contains(node0));
193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
194:       assertEquals(53, Node.INPUT_ID);
195:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
196:       assertEquals(47, Node.IS_DISPATCHER);
197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
198:       assertEquals(29, Node.JSDOC_INFO_PROP);
199:       assertEquals(32, Node.INCRDECR_PROP);
200:       assertEquals(46, Node.IS_NAMESPACE);
201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
202:       assertEquals(2, Node.POST_FLAG);
203:       assertEquals(30, Node.VAR_ARGS_NAME);
204:       assertEquals(43, Node.IS_CONSTANT_NAME);
205:       assertEquals(54, Node.SLASH_V);
206:       assertEquals(40, Node.ORIGINALNAME_PROP);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(50, Node.FREE_CALL);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(39, Node.EMPTY_BLOCK);
215:       assertEquals(1, Node.DECR_FLAG);
216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(12, Node.COLUMN_BITS);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(4095, Node.COLUMN_MASK);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
223:       assertEquals(56, Node.CHANGE_TIME);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(48, Node.DIRECTIVES);
226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
227:       assertEquals(37, Node.OPT_ARG_NAME);
228:       assertEquals(49, Node.DIRECT_EVAL);
229:       assertNotNull(iterable0);
230:       
231:       boolean boolean0 = node0.isObjectLit();
232:       assertTrue(boolean0);
233:       assertFalse(node0.isTry());
234:       assertFalse(node0.isVoid());
235:       assertFalse(node0.isArrayLit());
236:       assertTrue(node0.isObjectLit());
237:       assertFalse(node0.isEmpty());
238:       assertFalse(node0.isGetterDef());
239:       assertFalse(node0.isIf());
240:       assertFalse(node0.isDelProp());
241:       assertFalse(node0.isDebugger());
242:       assertFalse(node0.isNE());
243:       assertFalse(node0.isTrue());
244:       assertFalse(node0.isCase());
245:       assertFalse(node0.isCatch());
246:       assertFalse(node0.isRegExp());
247:       assertFalse(node0.isFor());
248:       assertFalse(node0.isInc());
249:       assertEquals(64, node0.getType());
250:       assertFalse(node0.isString());
251:       assertFalse(node0.isIn());
252:       assertFalse(node0.isContinue());
253:       assertFalse(node0.isSetterDef());
254:       assertFalse(node0.isFalse());
255:       assertFalse(node0.isFunction());
256:       assertFalse(node0.isThrow());
257:       assertFalse(node0.hasOneChild());
258:       assertFalse(node0.isScript());
259:       assertFalse(node0.isCast());
260:       assertFalse(node0.isGetElem());
261:       assertFalse(node0.isExprResult());
262:       assertEquals((-1), node0.getSourcePosition());
263:       assertFalse(node0.isLabelName());
264:       assertFalse(node0.isNot());
265:       assertFalse(node0.isNumber());
266:       assertFalse(node0.isAnd());
267:       assertEquals((-1), node0.getLineno());
268:       assertFalse(node0.isInstanceOf());
269:       assertFalse(node0.hasMoreThanOneChild());
270:       assertFalse(node0.isGetProp());
271:       assertFalse(node0.hasChildren());
272:       assertFalse(node0.isWhile());
273:       assertFalse(node0.isDec());
274:       assertFalse(node0.isAssign());
275:       assertFalse(node0.isWith());
276:       assertFalse(node0.isTypeOf());
277:       assertFalse(node0.isComma());
278:       assertFalse(node0.isHook());
279:       assertFalse(node0.isThis());
280:       assertFalse(node0.isReturn());
281:       assertFalse(node0.isBlock());
282:       assertFalse(node0.isNew());
283:       assertFalse(node0.isAdd());
284:       assertFalse(node0.isCall());
285:       assertFalse(node0.isBreak());
286:       assertFalse(node0.isSwitch());
287:       assertFalse(node0.isName());
288:       assertEquals((-1), node0.getCharno());
289:       assertFalse(node0.isStringKey());
290:       assertFalse(node0.isParamList());
291:       assertFalse(node0.isNull());
292:       assertEquals(0, node0.getChildCount());
293:       assertFalse(node0.isOr());
294:       assertFalse(node0.isAssignAdd());
295:       assertFalse(node0.isDefaultCase());
296:       assertFalse(node0.isDo());
297:       assertFalse(node0.isLabel());
298:       assertFalse(node0.isVar());
299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
300:       assertEquals(53, Node.INPUT_ID);
301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
302:       assertEquals(47, Node.IS_DISPATCHER);
303:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
304:       assertEquals(29, Node.JSDOC_INFO_PROP);
305:       assertEquals(32, Node.INCRDECR_PROP);
306:       assertEquals(46, Node.IS_NAMESPACE);
307:       assertEquals(51, Node.STATIC_SOURCE_FILE);
308:       assertEquals(2, Node.POST_FLAG);
309:       assertEquals(30, Node.VAR_ARGS_NAME);
310:       assertEquals(43, Node.IS_CONSTANT_NAME);
311:       assertEquals(54, Node.SLASH_V);
312:       assertEquals(40, Node.ORIGINALNAME_PROP);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
316:       assertEquals(52, Node.LENGTH);
317:       assertEquals(50, Node.FREE_CALL);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(57, Node.LAST_PROP);
320:       assertEquals(39, Node.EMPTY_BLOCK);
321:       assertEquals(1, Node.DECR_FLAG);
322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
323:       assertEquals(55, Node.INFERRED_FUNCTION);
324:       assertEquals(12, Node.COLUMN_BITS);
325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
326:       assertEquals(4095, Node.COLUMN_MASK);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
329:       assertEquals(56, Node.CHANGE_TIME);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(48, Node.DIRECTIVES);
332:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
333:       assertEquals(37, Node.OPT_ARG_NAME);
334:       assertEquals(49, Node.DIRECT_EVAL);
335:       
336:       boolean boolean1 = node0.isDebugger();
337:       assertFalse(boolean1);
338:       assertFalse(node0.isTry());
339:       assertFalse(node0.isVoid());
340:       assertFalse(node0.isArrayLit());
341:       assertTrue(node0.isObjectLit());
342:       assertFalse(node0.isEmpty());
343:       assertFalse(node0.isGetterDef());
344:       assertFalse(node0.isIf());
345:       assertFalse(node0.isDelProp());
346:       assertFalse(node0.isDebugger());
347:       assertFalse(node0.isNE());
348:       assertFalse(node0.isTrue());
349:       assertFalse(node0.isCase());
350:       assertFalse(node0.isCatch());
351:       assertFalse(node0.isRegExp());
352:       assertFalse(node0.isFor());
353:       assertFalse(node0.isInc());
354:       assertEquals(64, node0.getType());
355:       assertFalse(node0.isString());
356:       assertFalse(node0.isIn());
357:       assertFalse(node0.isContinue());
358:       assertFalse(node0.isSetterDef());
359:       assertFalse(node0.isFalse());
360:       assertFalse(node0.isFunction());
361:       assertFalse(node0.isThrow());
362:       assertFalse(node0.hasOneChild());
363:       assertFalse(node0.isScript());
364:       assertFalse(node0.isCast());
365:       assertFalse(node0.isGetElem());
366:       assertFalse(node0.isExprResult());
367:       assertEquals((-1), node0.getSourcePosition());
368:       assertFalse(node0.isLabelName());
369:       assertFalse(node0.isNot());
370:       assertFalse(node0.isNumber());
371:       assertFalse(node0.isAnd());
372:       assertEquals((-1), node0.getLineno());
373:       assertFalse(node0.isInstanceOf());
374:       assertFalse(node0.hasMoreThanOneChild());
375:       assertFalse(node0.isGetProp());
376:       assertFalse(node0.hasChildren());
377:       assertFalse(node0.isWhile());
378:       assertFalse(node0.isDec());
379:       assertFalse(node0.isAssign());
380:       assertFalse(node0.isWith());
381:       assertFalse(node0.isTypeOf());
382:       assertFalse(node0.isComma());
383:       assertFalse(node0.isHook());
384:       assertFalse(node0.isThis());
385:       assertFalse(node0.isReturn());
386:       assertFalse(node0.isBlock());
387:       assertFalse(node0.isNew());
388:       assertFalse(node0.isAdd());
389:       assertFalse(node0.isCall());
390:       assertFalse(node0.isBreak());
391:       assertFalse(node0.isSwitch());
392:       assertFalse(node0.isName());
393:       assertEquals((-1), node0.getCharno());
394:       assertFalse(node0.isStringKey());
395:       assertFalse(node0.isParamList());
396:       assertFalse(node0.isNull());
397:       assertEquals(0, node0.getChildCount());
398:       assertFalse(node0.isOr());
399:       assertFalse(node0.isAssignAdd());
400:       assertFalse(node0.isDefaultCase());
401:       assertFalse(node0.isDo());
402:       assertFalse(node0.isLabel());
403:       assertFalse(node0.isVar());
404:       assertFalse(boolean1 == boolean0);
405:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
406:       assertEquals(53, Node.INPUT_ID);
407:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
408:       assertEquals(47, Node.IS_DISPATCHER);
409:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
410:       assertEquals(29, Node.JSDOC_INFO_PROP);
411:       assertEquals(32, Node.INCRDECR_PROP);
412:       assertEquals(46, Node.IS_NAMESPACE);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(2, Node.POST_FLAG);
415:       assertEquals(30, Node.VAR_ARGS_NAME);
416:       assertEquals(43, Node.IS_CONSTANT_NAME);
417:       assertEquals(54, Node.SLASH_V);
418:       assertEquals(40, Node.ORIGINALNAME_PROP);
419:       assertEquals(57, Node.REFLECTED_OBJECT);
420:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(50, Node.FREE_CALL);
424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(39, Node.EMPTY_BLOCK);
427:       assertEquals(1, Node.DECR_FLAG);
428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
429:       assertEquals(55, Node.INFERRED_FUNCTION);
430:       assertEquals(12, Node.COLUMN_BITS);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(4095, Node.COLUMN_MASK);
433:       assertEquals(8, Node.FLAG_NO_THROWS);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(56, Node.CHANGE_TIME);
436:       assertEquals(36, Node.QUOTED_PROP);
437:       assertEquals(48, Node.DIRECTIVES);
438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
439:       assertEquals(37, Node.OPT_ARG_NAME);
440:       assertEquals(49, Node.DIRECT_EVAL);
441:   }
442: }
RegularFileObject[/tmp/EvoSuite_251_1628161375695/com/google/javascript/rhino/Node_251_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:55 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_251_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_251_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_251_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:02:55.731 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(64);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertTrue(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(64, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertTrue(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(64, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(iterable0.contains(node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(iterable0);

boolean boolean0 = node0.isObjectLit();
assertTrue(boolean0);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertTrue(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(64, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean1 = node0.isDebugger();
assertFalse(boolean1);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertTrue(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(64, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(boolean1 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);


[MASTER] 11:03:01.430 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_313_1628161381367/com/google/javascript/rhino/Node_313_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_313_1628161381367/com/google/javascript/rhino/Node_313_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:01.430 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:01.430 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:01.431 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 450
[MASTER] 11:03:01.431 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_313_1628161381367/com/google/javascript/rhino/Node_313_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:01 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ImmutableList;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.List;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_313_tmp__ESTest extends Node_313_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       int int0 = Node.mergeLineCharNo((-219), (-219));
26:       assertEquals((-1), int0);
27:       
28:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
29:       assertNotNull(simpleErrorReporter0);
30:       
31:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
32:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
33:       assertNotNull(jSTypeRegistry0);
34:       
35:       JSType[] jSTypeArray0 = new JSType[0];
36:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
37:       assertEquals(0, jSTypeArray0.length);
38:       assertEquals(0, immutableList0.size());
39:       assertNotNull(immutableList0);
40:       
41:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
42:       assertEquals(0, jSTypeArray0.length);
43:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
44:       assertEquals(0, immutableList0.size());
45:       assertFalse(node0.isFunction());
46:       assertFalse(node0.isTry());
47:       assertFalse(node0.isTrue());
48:       assertFalse(node0.isVoid());
49:       assertFalse(node0.isRegExp());
50:       assertFalse(node0.isDebugger());
51:       assertFalse(node0.isCatch());
52:       assertFalse(node0.isIf());
53:       assertFalse(node0.isDelProp());
54:       assertFalse(node0.isArrayLit());
55:       assertFalse(node0.isNE());
56:       assertFalse(node0.isIn());
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isNull());
59:       assertFalse(node0.isEmpty());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isSetterDef());
62:       assertFalse(node0.isNew());
63:       assertFalse(node0.isAdd());
64:       assertFalse(node0.isFalse());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isCall());
67:       assertFalse(node0.isContinue());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isGetProp());
70:       assertFalse(node0.isDec());
71:       assertFalse(node0.hasChildren());
72:       assertTrue(node0.isParamList());
73:       assertFalse(node0.isTypeOf());
74:       assertFalse(node0.isReturn());
75:       assertFalse(node0.isAssign());
76:       assertFalse(node0.isComma());
77:       assertEquals((-1), node0.getSourcePosition());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isWhile());
81:       assertFalse(node0.isExprResult());
82:       assertFalse(node0.isNot());
83:       assertFalse(node0.isGetElem());
84:       assertFalse(node0.isWith());
85:       assertFalse(node0.isCast());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isInstanceOf());
88:       assertFalse(node0.isLabelName());
89:       assertEquals(83, node0.getType());
90:       assertFalse(node0.isAssignAdd());
91:       assertFalse(node0.isOr());
92:       assertFalse(node0.isLabel());
93:       assertFalse(node0.isThrow());
94:       assertFalse(node0.isDo());
95:       assertFalse(node0.isInc());
96:       assertFalse(node0.isBlock());
97:       assertFalse(node0.isSwitch());
98:       assertFalse(node0.isHook());
99:       assertFalse(node0.isVar());
100:       assertEquals((-1), node0.getCharno());
101:       assertFalse(node0.isStringKey());
102:       assertFalse(node0.hasMoreThanOneChild());
103:       assertEquals((-1), node0.getLineno());
104:       assertFalse(node0.isNumber());
105:       assertFalse(node0.isGetterDef());
106:       assertFalse(node0.isThis());
107:       assertFalse(node0.isFor());
108:       assertFalse(node0.hasOneChild());
109:       assertFalse(node0.isScript());
110:       assertFalse(node0.isCase());
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(43, Node.IS_CONSTANT_NAME);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(56, Node.CHANGE_TIME);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       assertEquals(32, Node.INCRDECR_PROP);
125:       assertEquals(49, Node.DIRECT_EVAL);
126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(54, Node.SLASH_V);
131:       assertEquals(57, Node.LAST_PROP);
132:       assertEquals(57, Node.REFLECTED_OBJECT);
133:       assertEquals(1, Node.DECR_FLAG);
134:       assertEquals(50, Node.FREE_CALL);
135:       assertEquals(51, Node.STATIC_SOURCE_FILE);
136:       assertEquals(15, Node.NO_SIDE_EFFECTS);
137:       assertEquals(52, Node.LENGTH);
138:       assertEquals(8, Node.FLAG_NO_THROWS);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(39, Node.EMPTY_BLOCK);
141:       assertEquals(47, Node.IS_DISPATCHER);
142:       assertEquals(46, Node.IS_NAMESPACE);
143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
144:       assertEquals(40, Node.ORIGINALNAME_PROP);
145:       assertEquals(30, Node.VAR_ARGS_NAME);
146:       assertEquals(2, Node.POST_FLAG);
147:       assertNotNull(node0);
148:       
149:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
150:       assertEquals(0, node_SideEffectFlags0.valueOf());
151:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
152:       assertNotNull(node_SideEffectFlags0);
153:       
154:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
155:       assertEquals(0, node_SideEffectFlags0.valueOf());
156:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
157:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
158:       assertEquals(0, node_SideEffectFlags1.valueOf());
159:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
160:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
161:       assertNotNull(node_SideEffectFlags1);
162:       
163:       boolean boolean0 = node0.isAssign();
164:       assertEquals(0, jSTypeArray0.length);
165:       assertFalse(boolean0);
166:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
167:       assertEquals(0, immutableList0.size());
168:       assertFalse(node0.isFunction());
169:       assertFalse(node0.isTry());
170:       assertFalse(node0.isTrue());
171:       assertFalse(node0.isVoid());
172:       assertFalse(node0.isRegExp());
173:       assertFalse(node0.isDebugger());
174:       assertFalse(node0.isCatch());
175:       assertFalse(node0.isIf());
176:       assertFalse(node0.isDelProp());
177:       assertFalse(node0.isArrayLit());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isIn());
180:       assertEquals(0, node0.getChildCount());
181:       assertFalse(node0.isNull());
182:       assertFalse(node0.isEmpty());
183:       assertFalse(node0.isDefaultCase());
184:       assertFalse(node0.isSetterDef());
185:       assertFalse(node0.isNew());
186:       assertFalse(node0.isAdd());
187:       assertFalse(node0.isFalse());
188:       assertFalse(node0.isName());
189:       assertFalse(node0.isCall());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.isBreak());
192:       assertFalse(node0.isGetProp());
193:       assertFalse(node0.isDec());
194:       assertFalse(node0.hasChildren());
195:       assertTrue(node0.isParamList());
196:       assertFalse(node0.isTypeOf());
197:       assertFalse(node0.isReturn());
198:       assertFalse(node0.isAssign());
199:       assertFalse(node0.isComma());
200:       assertEquals((-1), node0.getSourcePosition());
201:       assertFalse(node0.isObjectLit());
202:       assertFalse(node0.isString());
203:       assertFalse(node0.isWhile());
204:       assertFalse(node0.isExprResult());
205:       assertFalse(node0.isNot());
206:       assertFalse(node0.isGetElem());
207:       assertFalse(node0.isWith());
208:       assertFalse(node0.isCast());
209:       assertFalse(node0.isAnd());
210:       assertFalse(node0.isInstanceOf());
211:       assertFalse(node0.isLabelName());
212:       assertEquals(83, node0.getType());
213:       assertFalse(node0.isAssignAdd());
214:       assertFalse(node0.isOr());
215:       assertFalse(node0.isLabel());
216:       assertFalse(node0.isThrow());
217:       assertFalse(node0.isDo());
218:       assertFalse(node0.isInc());
219:       assertFalse(node0.isBlock());
220:       assertFalse(node0.isSwitch());
221:       assertFalse(node0.isHook());
222:       assertFalse(node0.isVar());
223:       assertEquals((-1), node0.getCharno());
224:       assertFalse(node0.isStringKey());
225:       assertFalse(node0.hasMoreThanOneChild());
226:       assertEquals((-1), node0.getLineno());
227:       assertFalse(node0.isNumber());
228:       assertFalse(node0.isGetterDef());
229:       assertFalse(node0.isThis());
230:       assertFalse(node0.isFor());
231:       assertFalse(node0.hasOneChild());
232:       assertFalse(node0.isScript());
233:       assertFalse(node0.isCase());
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(36, Node.QUOTED_PROP);
236:       assertEquals(43, Node.IS_CONSTANT_NAME);
237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
239:       assertEquals(29, Node.JSDOC_INFO_PROP);
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(55, Node.INFERRED_FUNCTION);
242:       assertEquals(48, Node.DIRECTIVES);
243:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
244:       assertEquals(37, Node.OPT_ARG_NAME);
245:       assertEquals(56, Node.CHANGE_TIME);
246:       assertEquals(12, Node.COLUMN_BITS);
247:       assertEquals(32, Node.INCRDECR_PROP);
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
251:       assertEquals(4095, Node.COLUMN_MASK);
252:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
253:       assertEquals(54, Node.SLASH_V);
254:       assertEquals(57, Node.LAST_PROP);
255:       assertEquals(57, Node.REFLECTED_OBJECT);
256:       assertEquals(1, Node.DECR_FLAG);
257:       assertEquals(50, Node.FREE_CALL);
258:       assertEquals(51, Node.STATIC_SOURCE_FILE);
259:       assertEquals(15, Node.NO_SIDE_EFFECTS);
260:       assertEquals(52, Node.LENGTH);
261:       assertEquals(8, Node.FLAG_NO_THROWS);
262:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(47, Node.IS_DISPATCHER);
265:       assertEquals(46, Node.IS_NAMESPACE);
266:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
267:       assertEquals(40, Node.ORIGINALNAME_PROP);
268:       assertEquals(30, Node.VAR_ARGS_NAME);
269:       assertEquals(2, Node.POST_FLAG);
270:       
271:       boolean boolean1 = node0.isDelProp();
272:       assertEquals(0, jSTypeArray0.length);
273:       assertFalse(boolean1);
274:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
275:       assertEquals(0, immutableList0.size());
276:       assertFalse(node0.isFunction());
277:       assertFalse(node0.isTry());
278:       assertFalse(node0.isTrue());
279:       assertFalse(node0.isVoid());
280:       assertFalse(node0.isRegExp());
281:       assertFalse(node0.isDebugger());
282:       assertFalse(node0.isCatch());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.isDelProp());
285:       assertFalse(node0.isArrayLit());
286:       assertFalse(node0.isNE());
287:       assertFalse(node0.isIn());
288:       assertEquals(0, node0.getChildCount());
289:       assertFalse(node0.isNull());
290:       assertFalse(node0.isEmpty());
291:       assertFalse(node0.isDefaultCase());
292:       assertFalse(node0.isSetterDef());
293:       assertFalse(node0.isNew());
294:       assertFalse(node0.isAdd());
295:       assertFalse(node0.isFalse());
296:       assertFalse(node0.isName());
297:       assertFalse(node0.isCall());
298:       assertFalse(node0.isContinue());
299:       assertFalse(node0.isBreak());
300:       assertFalse(node0.isGetProp());
301:       assertFalse(node0.isDec());
302:       assertFalse(node0.hasChildren());
303:       assertTrue(node0.isParamList());
304:       assertFalse(node0.isTypeOf());
305:       assertFalse(node0.isReturn());
306:       assertFalse(node0.isAssign());
307:       assertFalse(node0.isComma());
308:       assertEquals((-1), node0.getSourcePosition());
309:       assertFalse(node0.isObjectLit());
310:       assertFalse(node0.isString());
311:       assertFalse(node0.isWhile());
312:       assertFalse(node0.isExprResult());
313:       assertFalse(node0.isNot());
314:       assertFalse(node0.isGetElem());
315:       assertFalse(node0.isWith());
316:       assertFalse(node0.isCast());
317:       assertFalse(node0.isAnd());
318:       assertFalse(node0.isInstanceOf());
319:       assertFalse(node0.isLabelName());
320:       assertEquals(83, node0.getType());
321:       assertFalse(node0.isAssignAdd());
322:       assertFalse(node0.isOr());
323:       assertFalse(node0.isLabel());
324:       assertFalse(node0.isThrow());
325:       assertFalse(node0.isDo());
326:       assertFalse(node0.isInc());
327:       assertFalse(node0.isBlock());
328:       assertFalse(node0.isSwitch());
329:       assertFalse(node0.isHook());
330:       assertFalse(node0.isVar());
331:       assertEquals((-1), node0.getCharno());
332:       assertFalse(node0.isStringKey());
333:       assertFalse(node0.hasMoreThanOneChild());
334:       assertEquals((-1), node0.getLineno());
335:       assertFalse(node0.isNumber());
336:       assertFalse(node0.isGetterDef());
337:       assertFalse(node0.isThis());
338:       assertFalse(node0.isFor());
339:       assertFalse(node0.hasOneChild());
340:       assertFalse(node0.isScript());
341:       assertFalse(node0.isCase());
342:       assertTrue(boolean1 == boolean0);
343:       assertEquals(53, Node.INPUT_ID);
344:       assertEquals(36, Node.QUOTED_PROP);
345:       assertEquals(43, Node.IS_CONSTANT_NAME);
346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
348:       assertEquals(29, Node.JSDOC_INFO_PROP);
349:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
350:       assertEquals(55, Node.INFERRED_FUNCTION);
351:       assertEquals(48, Node.DIRECTIVES);
352:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
353:       assertEquals(37, Node.OPT_ARG_NAME);
354:       assertEquals(56, Node.CHANGE_TIME);
355:       assertEquals(12, Node.COLUMN_BITS);
356:       assertEquals(32, Node.INCRDECR_PROP);
357:       assertEquals(49, Node.DIRECT_EVAL);
358:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
359:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
360:       assertEquals(4095, Node.COLUMN_MASK);
361:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
362:       assertEquals(54, Node.SLASH_V);
363:       assertEquals(57, Node.LAST_PROP);
364:       assertEquals(57, Node.REFLECTED_OBJECT);
365:       assertEquals(1, Node.DECR_FLAG);
366:       assertEquals(50, Node.FREE_CALL);
367:       assertEquals(51, Node.STATIC_SOURCE_FILE);
368:       assertEquals(15, Node.NO_SIDE_EFFECTS);
369:       assertEquals(52, Node.LENGTH);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
372:       assertEquals(39, Node.EMPTY_BLOCK);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(46, Node.IS_NAMESPACE);
375:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
376:       assertEquals(40, Node.ORIGINALNAME_PROP);
377:       assertEquals(30, Node.VAR_ARGS_NAME);
378:       assertEquals(2, Node.POST_FLAG);
379:       
380:       Iterable<Node> iterable0 = node0.children();
381:       assertEquals(0, jSTypeArray0.length);
382:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
383:       assertEquals(0, immutableList0.size());
384:       assertFalse(node0.isFunction());
385:       assertFalse(node0.isTry());
386:       assertFalse(node0.isTrue());
387:       assertFalse(node0.isVoid());
388:       assertFalse(node0.isRegExp());
389:       assertFalse(node0.isDebugger());
390:       assertFalse(node0.isCatch());
391:       assertFalse(node0.isIf());
392:       assertFalse(node0.isDelProp());
393:       assertFalse(node0.isArrayLit());
394:       assertFalse(node0.isNE());
395:       assertFalse(node0.isIn());
396:       assertEquals(0, node0.getChildCount());
397:       assertFalse(node0.isNull());
398:       assertFalse(node0.isEmpty());
399:       assertFalse(node0.isDefaultCase());
400:       assertFalse(node0.isSetterDef());
401:       assertFalse(node0.isNew());
402:       assertFalse(node0.isAdd());
403:       assertFalse(node0.isFalse());
404:       assertFalse(node0.isName());
405:       assertFalse(node0.isCall());
406:       assertFalse(node0.isContinue());
407:       assertFalse(node0.isBreak());
408:       assertFalse(node0.isGetProp());
409:       assertFalse(node0.isDec());
410:       assertFalse(node0.hasChildren());
411:       assertTrue(node0.isParamList());
412:       assertFalse(node0.isTypeOf());
413:       assertFalse(node0.isReturn());
414:       assertFalse(node0.isAssign());
415:       assertFalse(node0.isComma());
416:       assertEquals((-1), node0.getSourcePosition());
417:       assertFalse(node0.isObjectLit());
418:       assertFalse(node0.isString());
419:       assertFalse(node0.isWhile());
420:       assertFalse(node0.isExprResult());
421:       assertFalse(node0.isNot());
422:       assertFalse(node0.isGetElem());
423:       assertFalse(node0.isWith());
424:       assertFalse(node0.isCast());
425:       assertFalse(node0.isAnd());
426:       assertFalse(node0.isInstanceOf());
427:       assertFalse(node0.isLabelName());
428:       assertEquals(83, node0.getType());
429:       assertFalse(node0.isAssignAdd());
430:       assertFalse(node0.isOr());
431:       assertFalse(node0.isLabel());
432:       assertFalse(node0.isThrow());
433:       assertFalse(node0.isDo());
434:       assertFalse(node0.isInc());
435:       assertFalse(node0.isBlock());
436:       assertFalse(node0.isSwitch());
437:       assertFalse(node0.isHook());
438:       assertFalse(node0.isVar());
439:       assertEquals((-1), node0.getCharno());
440:       assertFalse(node0.isStringKey());
441:       assertFalse(node0.hasMoreThanOneChild());
442:       assertEquals((-1), node0.getLineno());
443:       assertFalse(node0.isNumber());
444:       assertFalse(node0.isGetterDef());
445:       assertFalse(node0.isThis());
446:       assertFalse(node0.isFor());
447:       assertFalse(node0.hasOneChild());
448:       assertFalse(node0.isScript());
449:       assertFalse(node0.isCase());
450:       assertFalse(iterable0.contains(node0));
451:       assertEquals(53, Node.INPUT_ID);
452:       assertEquals(36, Node.QUOTED_PROP);
453:       assertEquals(43, Node.IS_CONSTANT_NAME);
454:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
456:       assertEquals(29, Node.JSDOC_INFO_PROP);
457:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
458:       assertEquals(55, Node.INFERRED_FUNCTION);
459:       assertEquals(48, Node.DIRECTIVES);
460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
461:       assertEquals(37, Node.OPT_ARG_NAME);
462:       assertEquals(56, Node.CHANGE_TIME);
463:       assertEquals(12, Node.COLUMN_BITS);
464:       assertEquals(32, Node.INCRDECR_PROP);
465:       assertEquals(49, Node.DIRECT_EVAL);
466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
467:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
468:       assertEquals(4095, Node.COLUMN_MASK);
469:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
470:       assertEquals(54, Node.SLASH_V);
471:       assertEquals(57, Node.LAST_PROP);
472:       assertEquals(57, Node.REFLECTED_OBJECT);
473:       assertEquals(1, Node.DECR_FLAG);
474:       assertEquals(50, Node.FREE_CALL);
475:       assertEquals(51, Node.STATIC_SOURCE_FILE);
476:       assertEquals(15, Node.NO_SIDE_EFFECTS);
477:       assertEquals(52, Node.LENGTH);
478:       assertEquals(8, Node.FLAG_NO_THROWS);
479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
480:       assertEquals(39, Node.EMPTY_BLOCK);
481:       assertEquals(47, Node.IS_DISPATCHER);
482:       assertEquals(46, Node.IS_NAMESPACE);
483:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
484:       assertEquals(40, Node.ORIGINALNAME_PROP);
485:       assertEquals(30, Node.VAR_ARGS_NAME);
486:       assertEquals(2, Node.POST_FLAG);
487:       assertNotNull(iterable0);
488:       
489:       boolean boolean2 = node0.isBreak();
490:       assertEquals(0, jSTypeArray0.length);
491:       assertFalse(boolean2);
492:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
493:       assertEquals(0, immutableList0.size());
494:       assertFalse(node0.isFunction());
495:       assertFalse(node0.isTry());
496:       assertFalse(node0.isTrue());
497:       assertFalse(node0.isVoid());
498:       assertFalse(node0.isRegExp());
499:       assertFalse(node0.isDebugger());
500:       assertFalse(node0.isCatch());
501:       assertFalse(node0.isIf());
502:       assertFalse(node0.isDelProp());
503:       assertFalse(node0.isArrayLit());
504:       assertFalse(node0.isNE());
505:       assertFalse(node0.isIn());
506:       assertEquals(0, node0.getChildCount());
507:       assertFalse(node0.isNull());
508:       assertFalse(node0.isEmpty());
509:       assertFalse(node0.isDefaultCase());
510:       assertFalse(node0.isSetterDef());
511:       assertFalse(node0.isNew());
512:       assertFalse(node0.isAdd());
513:       assertFalse(node0.isFalse());
514:       assertFalse(node0.isName());
515:       assertFalse(node0.isCall());
516:       assertFalse(node0.isContinue());
517:       assertFalse(node0.isBreak());
518:       assertFalse(node0.isGetProp());
519:       assertFalse(node0.isDec());
520:       assertFalse(node0.hasChildren());
521:       assertTrue(node0.isParamList());
522:       assertFalse(node0.isTypeOf());
523:       assertFalse(node0.isReturn());
524:       assertFalse(node0.isAssign());
525:       assertFalse(node0.isComma());
526:       assertEquals((-1), node0.getSourcePosition());
527:       assertFalse(node0.isObjectLit());
528:       assertFalse(node0.isString());
529:       assertFalse(node0.isWhile());
530:       assertFalse(node0.isExprResult());
531:       assertFalse(node0.isNot());
532:       assertFalse(node0.isGetElem());
533:       assertFalse(node0.isWith());
534:       assertFalse(node0.isCast());
535:       assertFalse(node0.isAnd());
536:       assertFalse(node0.isInstanceOf());
537:       assertFalse(node0.isLabelName());
538:       assertEquals(83, node0.getType());
539:       assertFalse(node0.isAssignAdd());
540:       assertFalse(node0.isOr());
541:       assertFalse(node0.isLabel());
542:       assertFalse(node0.isThrow());
543:       assertFalse(node0.isDo());
544:       assertFalse(node0.isInc());
545:       assertFalse(node0.isBlock());
546:       assertFalse(node0.isSwitch());
547:       assertFalse(node0.isHook());
548:       assertFalse(node0.isVar());
549:       assertEquals((-1), node0.getCharno());
550:       assertFalse(node0.isStringKey());
551:       assertFalse(node0.hasMoreThanOneChild());
552:       assertEquals((-1), node0.getLineno());
553:       assertFalse(node0.isNumber());
554:       assertFalse(node0.isGetterDef());
555:       assertFalse(node0.isThis());
556:       assertFalse(node0.isFor());
557:       assertFalse(node0.hasOneChild());
558:       assertFalse(node0.isScript());
559:       assertFalse(node0.isCase());
560:       assertTrue(boolean2 == boolean0);
561:       assertTrue(boolean2 == boolean1);
562:       assertEquals(53, Node.INPUT_ID);
563:       assertEquals(36, Node.QUOTED_PROP);
564:       assertEquals(43, Node.IS_CONSTANT_NAME);
565:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
566:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
567:       assertEquals(29, Node.JSDOC_INFO_PROP);
568:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
569:       assertEquals(55, Node.INFERRED_FUNCTION);
570:       assertEquals(48, Node.DIRECTIVES);
571:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
572:       assertEquals(37, Node.OPT_ARG_NAME);
573:       assertEquals(56, Node.CHANGE_TIME);
574:       assertEquals(12, Node.COLUMN_BITS);
575:       assertEquals(32, Node.INCRDECR_PROP);
576:       assertEquals(49, Node.DIRECT_EVAL);
577:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
578:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
579:       assertEquals(4095, Node.COLUMN_MASK);
580:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
581:       assertEquals(54, Node.SLASH_V);
582:       assertEquals(57, Node.LAST_PROP);
583:       assertEquals(57, Node.REFLECTED_OBJECT);
584:       assertEquals(1, Node.DECR_FLAG);
585:       assertEquals(50, Node.FREE_CALL);
586:       assertEquals(51, Node.STATIC_SOURCE_FILE);
587:       assertEquals(15, Node.NO_SIDE_EFFECTS);
588:       assertEquals(52, Node.LENGTH);
589:       assertEquals(8, Node.FLAG_NO_THROWS);
590:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
591:       assertEquals(39, Node.EMPTY_BLOCK);
592:       assertEquals(47, Node.IS_DISPATCHER);
593:       assertEquals(46, Node.IS_NAMESPACE);
594:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
595:       assertEquals(40, Node.ORIGINALNAME_PROP);
596:       assertEquals(30, Node.VAR_ARGS_NAME);
597:       assertEquals(2, Node.POST_FLAG);
598:       
599:       boolean boolean3 = node0.isNew();
600:       assertEquals(0, jSTypeArray0.length);
601:       assertFalse(boolean3);
602:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
603:       assertEquals(0, immutableList0.size());
604:       assertFalse(node0.isFunction());
605:       assertFalse(node0.isTry());
606:       assertFalse(node0.isTrue());
607:       assertFalse(node0.isVoid());
608:       assertFalse(node0.isRegExp());
609:       assertFalse(node0.isDebugger());
610:       assertFalse(node0.isCatch());
611:       assertFalse(node0.isIf());
612:       assertFalse(node0.isDelProp());
613:       assertFalse(node0.isArrayLit());
614:       assertFalse(node0.isNE());
615:       assertFalse(node0.isIn());
616:       assertEquals(0, node0.getChildCount());
617:       assertFalse(node0.isNull());
618:       assertFalse(node0.isEmpty());
619:       assertFalse(node0.isDefaultCase());
620:       assertFalse(node0.isSetterDef());
621:       assertFalse(node0.isNew());
622:       assertFalse(node0.isAdd());
623:       assertFalse(node0.isFalse());
624:       assertFalse(node0.isName());
625:       assertFalse(node0.isCall());
626:       assertFalse(node0.isContinue());
627:       assertFalse(node0.isBreak());
628:       assertFalse(node0.isGetProp());
629:       assertFalse(node0.isDec());
630:       assertFalse(node0.hasChildren());
631:       assertTrue(node0.isParamList());
632:       assertFalse(node0.isTypeOf());
633:       assertFalse(node0.isReturn());
634:       assertFalse(node0.isAssign());
635:       assertFalse(node0.isComma());
636:       assertEquals((-1), node0.getSourcePosition());
637:       assertFalse(node0.isObjectLit());
638:       assertFalse(node0.isString());
639:       assertFalse(node0.isWhile());
640:       assertFalse(node0.isExprResult());
641:       assertFalse(node0.isNot());
642:       assertFalse(node0.isGetElem());
643:       assertFalse(node0.isWith());
644:       assertFalse(node0.isCast());
645:       assertFalse(node0.isAnd());
646:       assertFalse(node0.isInstanceOf());
647:       assertFalse(node0.isLabelName());
648:       assertEquals(83, node0.getType());
649:       assertFalse(node0.isAssignAdd());
650:       assertFalse(node0.isOr());
651:       assertFalse(node0.isLabel());
652:       assertFalse(node0.isThrow());
653:       assertFalse(node0.isDo());
654:       assertFalse(node0.isInc());
655:       assertFalse(node0.isBlock());
656:       assertFalse(node0.isSwitch());
657:       assertFalse(node0.isHook());
658:       assertFalse(node0.isVar());
659:       assertEquals((-1), node0.getCharno());
660:       assertFalse(node0.isStringKey());
661:       assertFalse(node0.hasMoreThanOneChild());
662:       assertEquals((-1), node0.getLineno());
663:       assertFalse(node0.isNumber());
664:       assertFalse(node0.isGetterDef());
665:       assertFalse(node0.isThis());
666:       assertFalse(node0.isFor());
667:       assertFalse(node0.hasOneChild());
668:       assertFalse(node0.isScript());
669:       assertFalse(node0.isCase());
670:       assertTrue(boolean3 == boolean1);
671:       assertTrue(boolean3 == boolean0);
672:       assertTrue(boolean3 == boolean2);
673:       assertEquals(53, Node.INPUT_ID);
674:       assertEquals(36, Node.QUOTED_PROP);
675:       assertEquals(43, Node.IS_CONSTANT_NAME);
676:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
678:       assertEquals(29, Node.JSDOC_INFO_PROP);
679:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
680:       assertEquals(55, Node.INFERRED_FUNCTION);
681:       assertEquals(48, Node.DIRECTIVES);
682:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
683:       assertEquals(37, Node.OPT_ARG_NAME);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(12, Node.COLUMN_BITS);
686:       assertEquals(32, Node.INCRDECR_PROP);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
689:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
690:       assertEquals(4095, Node.COLUMN_MASK);
691:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
692:       assertEquals(54, Node.SLASH_V);
693:       assertEquals(57, Node.LAST_PROP);
694:       assertEquals(57, Node.REFLECTED_OBJECT);
695:       assertEquals(1, Node.DECR_FLAG);
696:       assertEquals(50, Node.FREE_CALL);
697:       assertEquals(51, Node.STATIC_SOURCE_FILE);
698:       assertEquals(15, Node.NO_SIDE_EFFECTS);
699:       assertEquals(52, Node.LENGTH);
700:       assertEquals(8, Node.FLAG_NO_THROWS);
701:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
702:       assertEquals(39, Node.EMPTY_BLOCK);
703:       assertEquals(47, Node.IS_DISPATCHER);
704:       assertEquals(46, Node.IS_NAMESPACE);
705:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
706:       assertEquals(40, Node.ORIGINALNAME_PROP);
707:       assertEquals(30, Node.VAR_ARGS_NAME);
708:       assertEquals(2, Node.POST_FLAG);
709:   }
710: }
RegularFileObject[/tmp/EvoSuite_313_1628161381367/com/google/javascript/rhino/Node_313_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:01 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_313_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_313_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_313_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:03:01.453 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = Node.mergeLineCharNo((-219), (-219));
assertEquals((-1), int0);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSType[] jSTypeArray0 = new JSType[0];
ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
assertEquals(0, jSTypeArray0.length);
assertEquals(0, immutableList0.size());
assertNotNull(immutableList0);

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
assertEquals(0, jSTypeArray0.length);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, immutableList0.size());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isParamList());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertEquals(83, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

boolean boolean0 = node0.isAssign();
assertEquals(0, jSTypeArray0.length);
assertFalse(boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, immutableList0.size());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isParamList());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertEquals(83, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

boolean boolean1 = node0.isDelProp();
assertEquals(0, jSTypeArray0.length);
assertFalse(boolean1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, immutableList0.size());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isParamList());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertEquals(83, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(boolean1 == boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

Iterable<Node> iterable0 = node0.children();
assertEquals(0, jSTypeArray0.length);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, immutableList0.size());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isParamList());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertEquals(83, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(iterable0.contains(node0));
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertNotNull(iterable0);

boolean boolean2 = node0.isBreak();
assertEquals(0, jSTypeArray0.length);
assertFalse(boolean2);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, immutableList0.size());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isParamList());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertEquals(83, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

boolean boolean3 = node0.isNew();
assertEquals(0, jSTypeArray0.length);
assertFalse(boolean3);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, immutableList0.size());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isParamList());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertEquals(83, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);


[MASTER] 11:03:04.738 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_339_1628161384629/com/google/javascript/rhino/Node_339_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_339_1628161384629/com/google/javascript/rhino/Node_339_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:04.738 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:04.738 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:04.738 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1025
[MASTER] 11:03:04.739 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_339_1628161384629/com/google/javascript/rhino/Node_339_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_339_tmp__ESTest extends Node_339_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber((-1065.94070143));
23:       assertFalse(node0.isString());
24:       assertFalse(node0.isIn());
25:       assertEquals((-1), node0.getCharno());
26:       assertFalse(node0.isSwitch());
27:       assertFalse(node0.isNE());
28:       assertFalse(node0.isIf());
29:       assertFalse(node0.isDelProp());
30:       assertFalse(node0.isThrow());
31:       assertFalse(node0.isFalse());
32:       assertFalse(node0.isEmpty());
33:       assertFalse(node0.isInc());
34:       assertFalse(node0.isDefaultCase());
35:       assertFalse(node0.isObjectLit());
36:       assertFalse(node0.isAnd());
37:       assertFalse(node0.isNot());
38:       assertFalse(node0.isDebugger());
39:       assertFalse(node0.isFunction());
40:       assertFalse(node0.isTrue());
41:       assertFalse(node0.isVoid());
42:       assertFalse(node0.isExprResult());
43:       assertFalse(node0.isBreak());
44:       assertFalse(node0.isGetElem());
45:       assertFalse(node0.isCall());
46:       assertFalse(node0.isDec());
47:       assertFalse(node0.hasChildren());
48:       assertFalse(node0.isTypeOf());
49:       assertFalse(node0.isAssign());
50:       assertFalse(node0.isComma());
51:       assertEquals((-1), node0.getSourcePosition());
52:       assertFalse(node0.isGetProp());
53:       assertTrue(node0.isNumber());
54:       assertFalse(node0.hasMoreThanOneChild());
55:       assertFalse(node0.isWhile());
56:       assertFalse(node0.isContinue());
57:       assertEquals(39, node0.getType());
58:       assertFalse(node0.isReturn());
59:       assertFalse(node0.isOr());
60:       assertFalse(node0.isLabel());
61:       assertFalse(node0.isLabelName());
62:       assertEquals((-1), node0.getLineno());
63:       assertFalse(node0.isName());
64:       assertFalse(node0.isVar());
65:       assertFalse(node0.isCast());
66:       assertFalse(node0.isNull());
67:       assertFalse(node0.isAdd());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isSetterDef());
70:       assertFalse(node0.isDo());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isWith());
73:       assertFalse(node0.isCatch());
74:       assertEquals(0, node0.getChildCount());
75:       assertFalse(node0.isRegExp());
76:       assertFalse(node0.isParamList());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isArrayLit());
79:       assertFalse(node0.isStringKey());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isHook());
82:       assertFalse(node0.isGetterDef());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isBlock());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isScript());
87:       assertFalse(node0.isTry());
88:       assertFalse(node0.isCase());
89:       assertEquals(1, Node.DECR_FLAG);
90:       assertEquals(49, Node.DIRECT_EVAL);
91:       assertEquals(30, Node.VAR_ARGS_NAME);
92:       assertEquals(51, Node.STATIC_SOURCE_FILE);
93:       assertEquals(57, Node.LAST_PROP);
94:       assertEquals(12, Node.COLUMN_BITS);
95:       assertEquals(32, Node.INCRDECR_PROP);
96:       assertEquals(46, Node.IS_NAMESPACE);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(52, Node.LENGTH);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(53, Node.INPUT_ID);
114:       assertEquals(39, Node.EMPTY_BLOCK);
115:       assertEquals(36, Node.QUOTED_PROP);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(40, Node.ORIGINALNAME_PROP);
120:       assertEquals(29, Node.JSDOC_INFO_PROP);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
124:       assertEquals(2, Node.POST_FLAG);
125:       assertNotNull(node0);
126:       
127:       Node node1 = new Node(47, node0, node0, 54, 53);
128:       assertFalse(node0.isString());
129:       assertFalse(node0.isIn());
130:       assertEquals((-1), node0.getCharno());
131:       assertFalse(node0.isSwitch());
132:       assertFalse(node0.isNE());
133:       assertFalse(node0.isIf());
134:       assertFalse(node0.isDelProp());
135:       assertFalse(node0.isThrow());
136:       assertFalse(node0.isFalse());
137:       assertFalse(node0.isEmpty());
138:       assertFalse(node0.isInc());
139:       assertFalse(node0.isDefaultCase());
140:       assertFalse(node0.isObjectLit());
141:       assertFalse(node0.isAnd());
142:       assertFalse(node0.isNot());
143:       assertFalse(node0.isDebugger());
144:       assertFalse(node0.isFunction());
145:       assertFalse(node0.isTrue());
146:       assertFalse(node0.isVoid());
147:       assertFalse(node0.isExprResult());
148:       assertFalse(node0.isBreak());
149:       assertFalse(node0.isGetElem());
150:       assertFalse(node0.isCall());
151:       assertFalse(node0.isDec());
152:       assertFalse(node0.hasChildren());
153:       assertFalse(node0.isTypeOf());
154:       assertFalse(node0.isAssign());
155:       assertFalse(node0.isComma());
156:       assertEquals((-1), node0.getSourcePosition());
157:       assertFalse(node0.isGetProp());
158:       assertTrue(node0.isNumber());
159:       assertFalse(node0.hasMoreThanOneChild());
160:       assertFalse(node0.isWhile());
161:       assertFalse(node0.isContinue());
162:       assertEquals(39, node0.getType());
163:       assertFalse(node0.isReturn());
164:       assertFalse(node0.isOr());
165:       assertFalse(node0.isLabel());
166:       assertFalse(node0.isLabelName());
167:       assertEquals((-1), node0.getLineno());
168:       assertFalse(node0.isName());
169:       assertFalse(node0.isVar());
170:       assertFalse(node0.isCast());
171:       assertFalse(node0.isNull());
172:       assertFalse(node0.isAdd());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.isSetterDef());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.isNew());
177:       assertFalse(node0.isWith());
178:       assertFalse(node0.isCatch());
179:       assertEquals(0, node0.getChildCount());
180:       assertFalse(node0.isRegExp());
181:       assertFalse(node0.isParamList());
182:       assertFalse(node0.isInstanceOf());
183:       assertFalse(node0.isArrayLit());
184:       assertFalse(node0.isStringKey());
185:       assertFalse(node0.isFor());
186:       assertFalse(node0.isHook());
187:       assertFalse(node0.isGetterDef());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isBlock());
190:       assertFalse(node0.hasOneChild());
191:       assertFalse(node0.isScript());
192:       assertFalse(node0.isTry());
193:       assertFalse(node0.isCase());
194:       assertFalse(node1.isIf());
195:       assertFalse(node1.isGetterDef());
196:       assertFalse(node1.isDelProp());
197:       assertTrue(node1.hasOneChild());
198:       assertFalse(node1.isNE());
199:       assertFalse(node1.isFor());
200:       assertFalse(node1.isIn());
201:       assertFalse(node1.isTry());
202:       assertFalse(node1.isCase());
203:       assertFalse(node1.isEmpty());
204:       assertFalse(node1.isVoid());
205:       assertFalse(node1.isTrue());
206:       assertFalse(node1.isHook());
207:       assertEquals(1, node1.getChildCount());
208:       assertFalse(node1.isCatch());
209:       assertTrue(node1.hasChildren());
210:       assertFalse(node1.isBreak());
211:       assertEquals(53, node1.getCharno());
212:       assertFalse(node1.isName());
213:       assertFalse(node1.isStringKey());
214:       assertFalse(node1.isParamList());
215:       assertFalse(node1.isThis());
216:       assertFalse(node1.isVar());
217:       assertFalse(node1.isNull());
218:       assertFalse(node1.isNew());
219:       assertFalse(node1.isAdd());
220:       assertFalse(node1.isDefaultCase());
221:       assertFalse(node1.isSwitch());
222:       assertFalse(node1.isDo());
223:       assertFalse(node1.isArrayLit());
224:       assertFalse(node1.isNumber());
225:       assertFalse(node1.isDec());
226:       assertFalse(node1.isLabelName());
227:       assertFalse(node1.isAssign());
228:       assertFalse(node1.isTypeOf());
229:       assertFalse(node1.isLabel());
230:       assertFalse(node1.isReturn());
231:       assertFalse(node1.isOr());
232:       assertFalse(node1.isAssignAdd());
233:       assertEquals(47, node1.getType());
234:       assertFalse(node1.isScript());
235:       assertFalse(node1.isWhile());
236:       assertFalse(node1.isWith());
237:       assertFalse(node1.isBlock());
238:       assertFalse(node1.isInstanceOf());
239:       assertTrue(node1.isRegExp());
240:       assertFalse(node1.hasMoreThanOneChild());
241:       assertFalse(node1.isGetElem());
242:       assertFalse(node1.isCall());
243:       assertFalse(node1.isExprResult());
244:       assertEquals(221237, node1.getSourcePosition());
245:       assertFalse(node1.isComma());
246:       assertFalse(node1.isThrow());
247:       assertFalse(node1.isObjectLit());
248:       assertFalse(node1.isGetProp());
249:       assertFalse(node1.isSetterDef());
250:       assertFalse(node1.isInc());
251:       assertEquals(54, node1.getLineno());
252:       assertFalse(node1.isString());
253:       assertFalse(node1.isNot());
254:       assertFalse(node1.isFunction());
255:       assertFalse(node1.isAnd());
256:       assertFalse(node1.isDebugger());
257:       assertFalse(node1.isFalse());
258:       assertFalse(node1.isContinue());
259:       assertFalse(node1.isCast());
260:       assertFalse(node1.equals((Object)node0));
261:       assertEquals(1, Node.DECR_FLAG);
262:       assertEquals(49, Node.DIRECT_EVAL);
263:       assertEquals(30, Node.VAR_ARGS_NAME);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(57, Node.LAST_PROP);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(32, Node.INCRDECR_PROP);
268:       assertEquals(46, Node.IS_NAMESPACE);
269:       assertEquals(54, Node.SLASH_V);
270:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
271:       assertEquals(15, Node.NO_SIDE_EFFECTS);
272:       assertEquals(52, Node.LENGTH);
273:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
274:       assertEquals(56, Node.CHANGE_TIME);
275:       assertEquals(57, Node.REFLECTED_OBJECT);
276:       assertEquals(48, Node.DIRECTIVES);
277:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
278:       assertEquals(37, Node.OPT_ARG_NAME);
279:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
281:       assertEquals(4095, Node.COLUMN_MASK);
282:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
283:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
284:       assertEquals(43, Node.IS_CONSTANT_NAME);
285:       assertEquals(53, Node.INPUT_ID);
286:       assertEquals(39, Node.EMPTY_BLOCK);
287:       assertEquals(36, Node.QUOTED_PROP);
288:       assertEquals(55, Node.INFERRED_FUNCTION);
289:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
290:       assertEquals(8, Node.FLAG_NO_THROWS);
291:       assertEquals(40, Node.ORIGINALNAME_PROP);
292:       assertEquals(29, Node.JSDOC_INFO_PROP);
293:       assertEquals(50, Node.FREE_CALL);
294:       assertEquals(47, Node.IS_DISPATCHER);
295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
296:       assertEquals(2, Node.POST_FLAG);
297:       assertEquals(56, Node.CHANGE_TIME);
298:       assertEquals(47, Node.IS_DISPATCHER);
299:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
300:       assertEquals(29, Node.JSDOC_INFO_PROP);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(32, Node.INCRDECR_PROP);
303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertEquals(2, Node.POST_FLAG);
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertEquals(43, Node.IS_CONSTANT_NAME);
308:       assertEquals(54, Node.SLASH_V);
309:       assertEquals(1, Node.DECR_FLAG);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
313:       assertEquals(50, Node.FREE_CALL);
314:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
315:       assertEquals(39, Node.EMPTY_BLOCK);
316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
317:       assertEquals(48, Node.DIRECTIVES);
318:       assertEquals(4095, Node.COLUMN_MASK);
319:       assertEquals(40, Node.ORIGINALNAME_PROP);
320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
321:       assertEquals(15, Node.NO_SIDE_EFFECTS);
322:       assertEquals(57, Node.LAST_PROP);
323:       assertEquals(36, Node.QUOTED_PROP);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(57, Node.REFLECTED_OBJECT);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
329:       assertEquals(53, Node.INPUT_ID);
330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
331:       assertEquals(52, Node.LENGTH);
332:       assertEquals(8, Node.FLAG_NO_THROWS);
333:       assertNotNull(node1);
334:       
335:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
336:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
337:       assertEquals(0, node_SideEffectFlags0.valueOf());
338:       assertNotNull(node_SideEffectFlags0);
339:       
340:       boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
341:       assertFalse(boolean0);
342:       
343:       node_SideEffectFlags0.clearSideEffectFlags();
344:       assertEquals(15, node_SideEffectFlags0.valueOf());
345:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
346:       
347:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
348:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
349:       assertEquals(8, node_SideEffectFlags0.valueOf());
350:       assertEquals(8, node_SideEffectFlags1.valueOf());
351:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
352:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
353:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
354:       assertNotNull(node_SideEffectFlags1);
355:       
356:       boolean boolean1 = node0.isCase();
357:       assertFalse(boolean1);
358:       assertFalse(node0.isString());
359:       assertFalse(node0.isIn());
360:       assertEquals((-1), node0.getCharno());
361:       assertFalse(node0.isSwitch());
362:       assertFalse(node0.isNE());
363:       assertFalse(node0.isIf());
364:       assertFalse(node0.isDelProp());
365:       assertFalse(node0.isThrow());
366:       assertFalse(node0.isFalse());
367:       assertFalse(node0.isEmpty());
368:       assertFalse(node0.isInc());
369:       assertFalse(node0.isDefaultCase());
370:       assertFalse(node0.isObjectLit());
371:       assertFalse(node0.isAnd());
372:       assertFalse(node0.isNot());
373:       assertFalse(node0.isDebugger());
374:       assertFalse(node0.isFunction());
375:       assertFalse(node0.isTrue());
376:       assertFalse(node0.isVoid());
377:       assertFalse(node0.isExprResult());
378:       assertFalse(node0.isBreak());
379:       assertFalse(node0.isGetElem());
380:       assertFalse(node0.isCall());
381:       assertFalse(node0.isDec());
382:       assertFalse(node0.hasChildren());
383:       assertFalse(node0.isTypeOf());
384:       assertFalse(node0.isAssign());
385:       assertFalse(node0.isComma());
386:       assertEquals((-1), node0.getSourcePosition());
387:       assertFalse(node0.isGetProp());
388:       assertTrue(node0.isNumber());
389:       assertFalse(node0.hasMoreThanOneChild());
390:       assertFalse(node0.isWhile());
391:       assertFalse(node0.isContinue());
392:       assertEquals(39, node0.getType());
393:       assertFalse(node0.isReturn());
394:       assertFalse(node0.isOr());
395:       assertFalse(node0.isLabel());
396:       assertFalse(node0.isLabelName());
397:       assertEquals((-1), node0.getLineno());
398:       assertFalse(node0.isName());
399:       assertFalse(node0.isVar());
400:       assertFalse(node0.isCast());
401:       assertFalse(node0.isNull());
402:       assertFalse(node0.isAdd());
403:       assertFalse(node0.isAssignAdd());
404:       assertFalse(node0.isSetterDef());
405:       assertFalse(node0.isDo());
406:       assertFalse(node0.isNew());
407:       assertFalse(node0.isWith());
408:       assertFalse(node0.isCatch());
409:       assertEquals(0, node0.getChildCount());
410:       assertFalse(node0.isRegExp());
411:       assertFalse(node0.isParamList());
412:       assertFalse(node0.isInstanceOf());
413:       assertFalse(node0.isArrayLit());
414:       assertFalse(node0.isStringKey());
415:       assertFalse(node0.isFor());
416:       assertFalse(node0.isHook());
417:       assertFalse(node0.isGetterDef());
418:       assertFalse(node0.isThis());
419:       assertFalse(node0.isBlock());
420:       assertFalse(node0.hasOneChild());
421:       assertFalse(node0.isScript());
422:       assertFalse(node0.isTry());
423:       assertFalse(node0.isCase());
424:       assertFalse(node0.equals((Object)node1));
425:       assertTrue(boolean1 == boolean0);
426:       assertEquals(1, Node.DECR_FLAG);
427:       assertEquals(49, Node.DIRECT_EVAL);
428:       assertEquals(30, Node.VAR_ARGS_NAME);
429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
430:       assertEquals(57, Node.LAST_PROP);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(32, Node.INCRDECR_PROP);
433:       assertEquals(46, Node.IS_NAMESPACE);
434:       assertEquals(54, Node.SLASH_V);
435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
436:       assertEquals(15, Node.NO_SIDE_EFFECTS);
437:       assertEquals(52, Node.LENGTH);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertEquals(56, Node.CHANGE_TIME);
440:       assertEquals(57, Node.REFLECTED_OBJECT);
441:       assertEquals(48, Node.DIRECTIVES);
442:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
443:       assertEquals(37, Node.OPT_ARG_NAME);
444:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
445:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
446:       assertEquals(4095, Node.COLUMN_MASK);
447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
448:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
449:       assertEquals(43, Node.IS_CONSTANT_NAME);
450:       assertEquals(53, Node.INPUT_ID);
451:       assertEquals(39, Node.EMPTY_BLOCK);
452:       assertEquals(36, Node.QUOTED_PROP);
453:       assertEquals(55, Node.INFERRED_FUNCTION);
454:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
455:       assertEquals(8, Node.FLAG_NO_THROWS);
456:       assertEquals(40, Node.ORIGINALNAME_PROP);
457:       assertEquals(29, Node.JSDOC_INFO_PROP);
458:       assertEquals(50, Node.FREE_CALL);
459:       assertEquals(47, Node.IS_DISPATCHER);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(2, Node.POST_FLAG);
462:       
463:       boolean boolean2 = node0.isDelProp();
464:       assertFalse(boolean2);
465:       assertFalse(node0.isString());
466:       assertFalse(node0.isIn());
467:       assertEquals((-1), node0.getCharno());
468:       assertFalse(node0.isSwitch());
469:       assertFalse(node0.isNE());
470:       assertFalse(node0.isIf());
471:       assertFalse(node0.isDelProp());
472:       assertFalse(node0.isThrow());
473:       assertFalse(node0.isFalse());
474:       assertFalse(node0.isEmpty());
475:       assertFalse(node0.isInc());
476:       assertFalse(node0.isDefaultCase());
477:       assertFalse(node0.isObjectLit());
478:       assertFalse(node0.isAnd());
479:       assertFalse(node0.isNot());
480:       assertFalse(node0.isDebugger());
481:       assertFalse(node0.isFunction());
482:       assertFalse(node0.isTrue());
483:       assertFalse(node0.isVoid());
484:       assertFalse(node0.isExprResult());
485:       assertFalse(node0.isBreak());
486:       assertFalse(node0.isGetElem());
487:       assertFalse(node0.isCall());
488:       assertFalse(node0.isDec());
489:       assertFalse(node0.hasChildren());
490:       assertFalse(node0.isTypeOf());
491:       assertFalse(node0.isAssign());
492:       assertFalse(node0.isComma());
493:       assertEquals((-1), node0.getSourcePosition());
494:       assertFalse(node0.isGetProp());
495:       assertTrue(node0.isNumber());
496:       assertFalse(node0.hasMoreThanOneChild());
497:       assertFalse(node0.isWhile());
498:       assertFalse(node0.isContinue());
499:       assertEquals(39, node0.getType());
500:       assertFalse(node0.isReturn());
501:       assertFalse(node0.isOr());
502:       assertFalse(node0.isLabel());
503:       assertFalse(node0.isLabelName());
504:       assertEquals((-1), node0.getLineno());
505:       assertFalse(node0.isName());
506:       assertFalse(node0.isVar());
507:       assertFalse(node0.isCast());
508:       assertFalse(node0.isNull());
509:       assertFalse(node0.isAdd());
510:       assertFalse(node0.isAssignAdd());
511:       assertFalse(node0.isSetterDef());
512:       assertFalse(node0.isDo());
513:       assertFalse(node0.isNew());
514:       assertFalse(node0.isWith());
515:       assertFalse(node0.isCatch());
516:       assertEquals(0, node0.getChildCount());
517:       assertFalse(node0.isRegExp());
518:       assertFalse(node0.isParamList());
519:       assertFalse(node0.isInstanceOf());
520:       assertFalse(node0.isArrayLit());
521:       assertFalse(node0.isStringKey());
522:       assertFalse(node0.isFor());
523:       assertFalse(node0.isHook());
524:       assertFalse(node0.isGetterDef());
525:       assertFalse(node0.isThis());
526:       assertFalse(node0.isBlock());
527:       assertFalse(node0.hasOneChild());
528:       assertFalse(node0.isScript());
529:       assertFalse(node0.isTry());
530:       assertFalse(node0.isCase());
531:       assertFalse(node0.equals((Object)node1));
532:       assertTrue(boolean2 == boolean0);
533:       assertTrue(boolean2 == boolean1);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(49, Node.DIRECT_EVAL);
536:       assertEquals(30, Node.VAR_ARGS_NAME);
537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
538:       assertEquals(57, Node.LAST_PROP);
539:       assertEquals(12, Node.COLUMN_BITS);
540:       assertEquals(32, Node.INCRDECR_PROP);
541:       assertEquals(46, Node.IS_NAMESPACE);
542:       assertEquals(54, Node.SLASH_V);
543:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
544:       assertEquals(15, Node.NO_SIDE_EFFECTS);
545:       assertEquals(52, Node.LENGTH);
546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
547:       assertEquals(56, Node.CHANGE_TIME);
548:       assertEquals(57, Node.REFLECTED_OBJECT);
549:       assertEquals(48, Node.DIRECTIVES);
550:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
551:       assertEquals(37, Node.OPT_ARG_NAME);
552:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
553:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
554:       assertEquals(4095, Node.COLUMN_MASK);
555:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
556:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
557:       assertEquals(43, Node.IS_CONSTANT_NAME);
558:       assertEquals(53, Node.INPUT_ID);
559:       assertEquals(39, Node.EMPTY_BLOCK);
560:       assertEquals(36, Node.QUOTED_PROP);
561:       assertEquals(55, Node.INFERRED_FUNCTION);
562:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
563:       assertEquals(8, Node.FLAG_NO_THROWS);
564:       assertEquals(40, Node.ORIGINALNAME_PROP);
565:       assertEquals(29, Node.JSDOC_INFO_PROP);
566:       assertEquals(50, Node.FREE_CALL);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
569:       assertEquals(2, Node.POST_FLAG);
570:       
571:       boolean boolean3 = node0.isTry();
572:       assertFalse(boolean3);
573:       assertFalse(node0.isString());
574:       assertFalse(node0.isIn());
575:       assertEquals((-1), node0.getCharno());
576:       assertFalse(node0.isSwitch());
577:       assertFalse(node0.isNE());
578:       assertFalse(node0.isIf());
579:       assertFalse(node0.isDelProp());
580:       assertFalse(node0.isThrow());
581:       assertFalse(node0.isFalse());
582:       assertFalse(node0.isEmpty());
583:       assertFalse(node0.isInc());
584:       assertFalse(node0.isDefaultCase());
585:       assertFalse(node0.isObjectLit());
586:       assertFalse(node0.isAnd());
587:       assertFalse(node0.isNot());
588:       assertFalse(node0.isDebugger());
589:       assertFalse(node0.isFunction());
590:       assertFalse(node0.isTrue());
591:       assertFalse(node0.isVoid());
592:       assertFalse(node0.isExprResult());
593:       assertFalse(node0.isBreak());
594:       assertFalse(node0.isGetElem());
595:       assertFalse(node0.isCall());
596:       assertFalse(node0.isDec());
597:       assertFalse(node0.hasChildren());
598:       assertFalse(node0.isTypeOf());
599:       assertFalse(node0.isAssign());
600:       assertFalse(node0.isComma());
601:       assertEquals((-1), node0.getSourcePosition());
602:       assertFalse(node0.isGetProp());
603:       assertTrue(node0.isNumber());
604:       assertFalse(node0.hasMoreThanOneChild());
605:       assertFalse(node0.isWhile());
606:       assertFalse(node0.isContinue());
607:       assertEquals(39, node0.getType());
608:       assertFalse(node0.isReturn());
609:       assertFalse(node0.isOr());
610:       assertFalse(node0.isLabel());
611:       assertFalse(node0.isLabelName());
612:       assertEquals((-1), node0.getLineno());
613:       assertFalse(node0.isName());
614:       assertFalse(node0.isVar());
615:       assertFalse(node0.isCast());
616:       assertFalse(node0.isNull());
617:       assertFalse(node0.isAdd());
618:       assertFalse(node0.isAssignAdd());
619:       assertFalse(node0.isSetterDef());
620:       assertFalse(node0.isDo());
621:       assertFalse(node0.isNew());
622:       assertFalse(node0.isWith());
623:       assertFalse(node0.isCatch());
624:       assertEquals(0, node0.getChildCount());
625:       assertFalse(node0.isRegExp());
626:       assertFalse(node0.isParamList());
627:       assertFalse(node0.isInstanceOf());
628:       assertFalse(node0.isArrayLit());
629:       assertFalse(node0.isStringKey());
630:       assertFalse(node0.isFor());
631:       assertFalse(node0.isHook());
632:       assertFalse(node0.isGetterDef());
633:       assertFalse(node0.isThis());
634:       assertFalse(node0.isBlock());
635:       assertFalse(node0.hasOneChild());
636:       assertFalse(node0.isScript());
637:       assertFalse(node0.isTry());
638:       assertFalse(node0.isCase());
639:       assertFalse(node0.equals((Object)node1));
640:       assertTrue(boolean3 == boolean0);
641:       assertTrue(boolean3 == boolean2);
642:       assertTrue(boolean3 == boolean1);
643:       assertEquals(1, Node.DECR_FLAG);
644:       assertEquals(49, Node.DIRECT_EVAL);
645:       assertEquals(30, Node.VAR_ARGS_NAME);
646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
647:       assertEquals(57, Node.LAST_PROP);
648:       assertEquals(12, Node.COLUMN_BITS);
649:       assertEquals(32, Node.INCRDECR_PROP);
650:       assertEquals(46, Node.IS_NAMESPACE);
651:       assertEquals(54, Node.SLASH_V);
652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
654:       assertEquals(52, Node.LENGTH);
655:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
656:       assertEquals(56, Node.CHANGE_TIME);
657:       assertEquals(57, Node.REFLECTED_OBJECT);
658:       assertEquals(48, Node.DIRECTIVES);
659:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
660:       assertEquals(37, Node.OPT_ARG_NAME);
661:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
662:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
663:       assertEquals(4095, Node.COLUMN_MASK);
664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
665:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
666:       assertEquals(43, Node.IS_CONSTANT_NAME);
667:       assertEquals(53, Node.INPUT_ID);
668:       assertEquals(39, Node.EMPTY_BLOCK);
669:       assertEquals(36, Node.QUOTED_PROP);
670:       assertEquals(55, Node.INFERRED_FUNCTION);
671:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
672:       assertEquals(8, Node.FLAG_NO_THROWS);
673:       assertEquals(40, Node.ORIGINALNAME_PROP);
674:       assertEquals(29, Node.JSDOC_INFO_PROP);
675:       assertEquals(50, Node.FREE_CALL);
676:       assertEquals(47, Node.IS_DISPATCHER);
677:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
678:       assertEquals(2, Node.POST_FLAG);
679:       
680:       Node node2 = node0.cloneNode();
681:       assertFalse(node0.isString());
682:       assertFalse(node0.isIn());
683:       assertEquals((-1), node0.getCharno());
684:       assertFalse(node0.isSwitch());
685:       assertFalse(node0.isNE());
686:       assertFalse(node0.isIf());
687:       assertFalse(node0.isDelProp());
688:       assertFalse(node0.isThrow());
689:       assertFalse(node0.isFalse());
690:       assertFalse(node0.isEmpty());
691:       assertFalse(node0.isInc());
692:       assertFalse(node0.isDefaultCase());
693:       assertFalse(node0.isObjectLit());
694:       assertFalse(node0.isAnd());
695:       assertFalse(node0.isNot());
696:       assertFalse(node0.isDebugger());
697:       assertFalse(node0.isFunction());
698:       assertFalse(node0.isTrue());
699:       assertFalse(node0.isVoid());
700:       assertFalse(node0.isExprResult());
701:       assertFalse(node0.isBreak());
702:       assertFalse(node0.isGetElem());
703:       assertFalse(node0.isCall());
704:       assertFalse(node0.isDec());
705:       assertFalse(node0.hasChildren());
706:       assertFalse(node0.isTypeOf());
707:       assertFalse(node0.isAssign());
708:       assertFalse(node0.isComma());
709:       assertEquals((-1), node0.getSourcePosition());
710:       assertFalse(node0.isGetProp());
711:       assertTrue(node0.isNumber());
712:       assertFalse(node0.hasMoreThanOneChild());
713:       assertFalse(node0.isWhile());
714:       assertFalse(node0.isContinue());
715:       assertEquals(39, node0.getType());
716:       assertFalse(node0.isReturn());
717:       assertFalse(node0.isOr());
718:       assertFalse(node0.isLabel());
719:       assertFalse(node0.isLabelName());
720:       assertEquals((-1), node0.getLineno());
721:       assertFalse(node0.isName());
722:       assertFalse(node0.isVar());
723:       assertFalse(node0.isCast());
724:       assertFalse(node0.isNull());
725:       assertFalse(node0.isAdd());
726:       assertFalse(node0.isAssignAdd());
727:       assertFalse(node0.isSetterDef());
728:       assertFalse(node0.isDo());
729:       assertFalse(node0.isNew());
730:       assertFalse(node0.isWith());
731:       assertFalse(node0.isCatch());
732:       assertEquals(0, node0.getChildCount());
733:       assertFalse(node0.isRegExp());
734:       assertFalse(node0.isParamList());
735:       assertFalse(node0.isInstanceOf());
736:       assertFalse(node0.isArrayLit());
737:       assertFalse(node0.isStringKey());
738:       assertFalse(node0.isFor());
739:       assertFalse(node0.isHook());
740:       assertFalse(node0.isGetterDef());
741:       assertFalse(node0.isThis());
742:       assertFalse(node0.isBlock());
743:       assertFalse(node0.hasOneChild());
744:       assertFalse(node0.isScript());
745:       assertFalse(node0.isTry());
746:       assertFalse(node0.isCase());
747:       assertEquals((-1), node2.getLineno());
748:       assertFalse(node2.isLabel());
749:       assertFalse(node2.isReturn());
750:       assertFalse(node2.isContinue());
751:       assertFalse(node2.isOr());
752:       assertFalse(node2.isTypeOf());
753:       assertFalse(node2.hasMoreThanOneChild());
754:       assertFalse(node2.hasChildren());
755:       assertFalse(node2.isWhile());
756:       assertFalse(node2.isDec());
757:       assertEquals(39, node2.getType());
758:       assertFalse(node2.isNew());
759:       assertFalse(node2.isDo());
760:       assertFalse(node2.isAssignAdd());
761:       assertFalse(node2.isAdd());
762:       assertFalse(node2.isBlock());
763:       assertFalse(node2.isCall());
764:       assertFalse(node2.isAssign());
765:       assertFalse(node2.isNull());
766:       assertFalse(node2.isGetElem());
767:       assertFalse(node2.isExprResult());
768:       assertFalse(node2.isName());
769:       assertFalse(node2.isObjectLit());
770:       assertFalse(node2.isComma());
771:       assertFalse(node2.isNot());
772:       assertFalse(node2.isSetterDef());
773:       assertFalse(node2.isThrow());
774:       assertFalse(node2.isGetProp());
775:       assertFalse(node2.isCast());
776:       assertFalse(node2.isDebugger());
777:       assertFalse(node2.isFalse());
778:       assertFalse(node2.isFunction());
779:       assertEquals((-1), node2.getSourcePosition());
780:       assertFalse(node2.isAnd());
781:       assertFalse(node2.isIn());
782:       assertTrue(node2.isNumber());
783:       assertFalse(node2.isString());
784:       assertFalse(node2.isFor());
785:       assertFalse(node2.isEmpty());
786:       assertFalse(node2.isInc());
787:       assertFalse(node2.isCase());
788:       assertFalse(node2.isHook());
789:       assertFalse(node2.isRegExp());
790:       assertFalse(node2.isIf());
791:       assertFalse(node2.isDelProp());
792:       assertFalse(node2.isBreak());
793:       assertFalse(node2.isNE());
794:       assertFalse(node2.isTrue());
795:       assertFalse(node2.isVoid());
796:       assertEquals(0, node2.getChildCount());
797:       assertFalse(node2.isInstanceOf());
798:       assertFalse(node2.isCatch());
799:       assertFalse(node2.isWith());
800:       assertFalse(node2.isDefaultCase());
801:       assertFalse(node2.isScript());
802:       assertFalse(node2.isThis());
803:       assertFalse(node2.isTry());
804:       assertFalse(node2.hasOneChild());
805:       assertFalse(node2.isArrayLit());
806:       assertFalse(node2.isVar());
807:       assertEquals((-1), node2.getCharno());
808:       assertFalse(node2.isGetterDef());
809:       assertFalse(node2.isStringKey());
810:       assertFalse(node2.isParamList());
811:       assertFalse(node2.isLabelName());
812:       assertFalse(node2.isSwitch());
813:       assertFalse(node0.equals((Object)node1));
814:       assertFalse(node2.equals((Object)node1));
815:       assertFalse(node2.equals((Object)node0));
816:       assertEquals(1, Node.DECR_FLAG);
817:       assertEquals(49, Node.DIRECT_EVAL);
818:       assertEquals(30, Node.VAR_ARGS_NAME);
819:       assertEquals(51, Node.STATIC_SOURCE_FILE);
820:       assertEquals(57, Node.LAST_PROP);
821:       assertEquals(12, Node.COLUMN_BITS);
822:       assertEquals(32, Node.INCRDECR_PROP);
823:       assertEquals(46, Node.IS_NAMESPACE);
824:       assertEquals(54, Node.SLASH_V);
825:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
826:       assertEquals(15, Node.NO_SIDE_EFFECTS);
827:       assertEquals(52, Node.LENGTH);
828:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
829:       assertEquals(56, Node.CHANGE_TIME);
830:       assertEquals(57, Node.REFLECTED_OBJECT);
831:       assertEquals(48, Node.DIRECTIVES);
832:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
833:       assertEquals(37, Node.OPT_ARG_NAME);
834:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
835:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
836:       assertEquals(4095, Node.COLUMN_MASK);
837:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
838:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
839:       assertEquals(43, Node.IS_CONSTANT_NAME);
840:       assertEquals(53, Node.INPUT_ID);
841:       assertEquals(39, Node.EMPTY_BLOCK);
842:       assertEquals(36, Node.QUOTED_PROP);
843:       assertEquals(55, Node.INFERRED_FUNCTION);
844:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
845:       assertEquals(8, Node.FLAG_NO_THROWS);
846:       assertEquals(40, Node.ORIGINALNAME_PROP);
847:       assertEquals(29, Node.JSDOC_INFO_PROP);
848:       assertEquals(50, Node.FREE_CALL);
849:       assertEquals(47, Node.IS_DISPATCHER);
850:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
851:       assertEquals(2, Node.POST_FLAG);
852:       assertEquals(32, Node.INCRDECR_PROP);
853:       assertEquals(46, Node.IS_NAMESPACE);
854:       assertEquals(51, Node.STATIC_SOURCE_FILE);
855:       assertEquals(12, Node.COLUMN_BITS);
856:       assertEquals(47, Node.IS_DISPATCHER);
857:       assertEquals(56, Node.CHANGE_TIME);
858:       assertEquals(2, Node.POST_FLAG);
859:       assertEquals(30, Node.VAR_ARGS_NAME);
860:       assertEquals(49, Node.DIRECT_EVAL);
861:       assertEquals(37, Node.OPT_ARG_NAME);
862:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
863:       assertEquals(54, Node.SLASH_V);
864:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
865:       assertEquals(50, Node.FREE_CALL);
866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
867:       assertEquals(1, Node.DECR_FLAG);
868:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
869:       assertEquals(4095, Node.COLUMN_MASK);
870:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
871:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       assertEquals(48, Node.DIRECTIVES);
874:       assertEquals(40, Node.ORIGINALNAME_PROP);
875:       assertEquals(52, Node.LENGTH);
876:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
877:       assertEquals(57, Node.REFLECTED_OBJECT);
878:       assertEquals(57, Node.LAST_PROP);
879:       assertEquals(36, Node.QUOTED_PROP);
880:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
881:       assertEquals(8, Node.FLAG_NO_THROWS);
882:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
883:       assertEquals(55, Node.INFERRED_FUNCTION);
884:       assertEquals(29, Node.JSDOC_INFO_PROP);
885:       assertEquals(15, Node.NO_SIDE_EFFECTS);
886:       assertEquals(39, Node.EMPTY_BLOCK);
887:       assertEquals(53, Node.INPUT_ID);
888:       assertNotSame(node0, node2);
889:       assertNotSame(node2, node0);
890:       assertNotNull(node2);
891:       
892:       Iterable<Node> iterable0 = node2.children();
893:       assertFalse(node0.isString());
894:       assertFalse(node0.isIn());
895:       assertEquals((-1), node0.getCharno());
896:       assertFalse(node0.isSwitch());
897:       assertFalse(node0.isNE());
898:       assertFalse(node0.isIf());
899:       assertFalse(node0.isDelProp());
900:       assertFalse(node0.isThrow());
901:       assertFalse(node0.isFalse());
902:       assertFalse(node0.isEmpty());
903:       assertFalse(node0.isInc());
904:       assertFalse(node0.isDefaultCase());
905:       assertFalse(node0.isObjectLit());
906:       assertFalse(node0.isAnd());
907:       assertFalse(node0.isNot());
908:       assertFalse(node0.isDebugger());
909:       assertFalse(node0.isFunction());
910:       assertFalse(node0.isTrue());
911:       assertFalse(node0.isVoid());
912:       assertFalse(node0.isExprResult());
913:       assertFalse(node0.isBreak());
914:       assertFalse(node0.isGetElem());
915:       assertFalse(node0.isCall());
916:       assertFalse(node0.isDec());
917:       assertFalse(node0.hasChildren());
918:       assertFalse(node0.isTypeOf());
919:       assertFalse(node0.isAssign());
920:       assertFalse(node0.isComma());
921:       assertEquals((-1), node0.getSourcePosition());
922:       assertFalse(node0.isGetProp());
923:       assertTrue(node0.isNumber());
924:       assertFalse(node0.hasMoreThanOneChild());
925:       assertFalse(node0.isWhile());
926:       assertFalse(node0.isContinue());
927:       assertEquals(39, node0.getType());
928:       assertFalse(node0.isReturn());
929:       assertFalse(node0.isOr());
930:       assertFalse(node0.isLabel());
931:       assertFalse(node0.isLabelName());
932:       assertEquals((-1), node0.getLineno());
933:       assertFalse(node0.isName());
934:       assertFalse(node0.isVar());
935:       assertFalse(node0.isCast());
936:       assertFalse(node0.isNull());
937:       assertFalse(node0.isAdd());
938:       assertFalse(node0.isAssignAdd());
939:       assertFalse(node0.isSetterDef());
940:       assertFalse(node0.isDo());
941:       assertFalse(node0.isNew());
942:       assertFalse(node0.isWith());
943:       assertFalse(node0.isCatch());
944:       assertEquals(0, node0.getChildCount());
945:       assertFalse(node0.isRegExp());
946:       assertFalse(node0.isParamList());
947:       assertFalse(node0.isInstanceOf());
948:       assertFalse(node0.isArrayLit());
949:       assertFalse(node0.isStringKey());
950:       assertFalse(node0.isFor());
951:       assertFalse(node0.isHook());
952:       assertFalse(node0.isGetterDef());
953:       assertFalse(node0.isThis());
954:       assertFalse(node0.isBlock());
955:       assertFalse(node0.hasOneChild());
956:       assertFalse(node0.isScript());
957:       assertFalse(node0.isTry());
958:       assertFalse(node0.isCase());
959:       assertEquals((-1), node2.getLineno());
960:       assertFalse(node2.isLabel());
961:       assertFalse(node2.isReturn());
962:       assertFalse(node2.isContinue());
963:       assertFalse(node2.isOr());
964:       assertFalse(node2.isTypeOf());
965:       assertFalse(node2.hasMoreThanOneChild());
966:       assertFalse(node2.hasChildren());
967:       assertFalse(node2.isWhile());
968:       assertFalse(node2.isDec());
969:       assertEquals(39, node2.getType());
970:       assertFalse(node2.isNew());
971:       assertFalse(node2.isDo());
972:       assertFalse(node2.isAssignAdd());
973:       assertFalse(node2.isAdd());
974:       assertFalse(node2.isBlock());
975:       assertFalse(node2.isCall());
976:       assertFalse(node2.isAssign());
977:       assertFalse(node2.isNull());
978:       assertFalse(node2.isGetElem());
979:       assertFalse(node2.isExprResult());
980:       assertFalse(node2.isName());
981:       assertFalse(node2.isObjectLit());
982:       assertFalse(node2.isComma());
983:       assertFalse(node2.isNot());
984:       assertFalse(node2.isSetterDef());
985:       assertFalse(node2.isThrow());
986:       assertFalse(node2.isGetProp());
987:       assertFalse(node2.isCast());
988:       assertFalse(node2.isDebugger());
989:       assertFalse(node2.isFalse());
990:       assertFalse(node2.isFunction());
991:       assertEquals((-1), node2.getSourcePosition());
992:       assertFalse(node2.isAnd());
993:       assertFalse(node2.isIn());
994:       assertTrue(node2.isNumber());
995:       assertFalse(node2.isString());
996:       assertFalse(node2.isFor());
997:       assertFalse(node2.isEmpty());
998:       assertFalse(node2.isInc());
999:       assertFalse(node2.isCase());
1000:       assertFalse(node2.isHook());
1001:       assertFalse(node2.isRegExp());
1002:       assertFalse(node2.isIf());
1003:       assertFalse(node2.isDelProp());
1004:       assertFalse(node2.isBreak());
1005:       assertFalse(node2.isNE());
1006:       assertFalse(node2.isTrue());
1007:       assertFalse(node2.isVoid());
1008:       assertEquals(0, node2.getChildCount());
1009:       assertFalse(node2.isInstanceOf());
1010:       assertFalse(node2.isCatch());
1011:       assertFalse(node2.isWith());
1012:       assertFalse(node2.isDefaultCase());
1013:       assertFalse(node2.isScript());
1014:       assertFalse(node2.isThis());
1015:       assertFalse(node2.isTry());
1016:       assertFalse(node2.hasOneChild());
1017:       assertFalse(node2.isArrayLit());
1018:       assertFalse(node2.isVar());
1019:       assertEquals((-1), node2.getCharno());
1020:       assertFalse(node2.isGetterDef());
1021:       assertFalse(node2.isStringKey());
1022:       assertFalse(node2.isParamList());
1023:       assertFalse(node2.isLabelName());
1024:       assertFalse(node2.isSwitch());
1025:       assertFalse(iterable0.contains(node1));
1026:       assertFalse(node0.equals((Object)node1));
1027:       assertFalse(node0.equals((Object)node2));
1028:       assertFalse(node2.equals((Object)node1));
1029:       assertFalse(node2.equals((Object)node0));
1030:       assertEquals(1, Node.DECR_FLAG);
1031:       assertEquals(49, Node.DIRECT_EVAL);
1032:       assertEquals(30, Node.VAR_ARGS_NAME);
1033:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1034:       assertEquals(57, Node.LAST_PROP);
1035:       assertEquals(12, Node.COLUMN_BITS);
1036:       assertEquals(32, Node.INCRDECR_PROP);
1037:       assertEquals(46, Node.IS_NAMESPACE);
1038:       assertEquals(54, Node.SLASH_V);
1039:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1040:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1041:       assertEquals(52, Node.LENGTH);
1042:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1043:       assertEquals(56, Node.CHANGE_TIME);
1044:       assertEquals(57, Node.REFLECTED_OBJECT);
1045:       assertEquals(48, Node.DIRECTIVES);
1046:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1047:       assertEquals(37, Node.OPT_ARG_NAME);
1048:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1049:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1050:       assertEquals(4095, Node.COLUMN_MASK);
1051:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1052:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1053:       assertEquals(43, Node.IS_CONSTANT_NAME);
1054:       assertEquals(53, Node.INPUT_ID);
1055:       assertEquals(39, Node.EMPTY_BLOCK);
1056:       assertEquals(36, Node.QUOTED_PROP);
1057:       assertEquals(55, Node.INFERRED_FUNCTION);
1058:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1059:       assertEquals(8, Node.FLAG_NO_THROWS);
1060:       assertEquals(40, Node.ORIGINALNAME_PROP);
1061:       assertEquals(29, Node.JSDOC_INFO_PROP);
1062:       assertEquals(50, Node.FREE_CALL);
1063:       assertEquals(47, Node.IS_DISPATCHER);
1064:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1065:       assertEquals(2, Node.POST_FLAG);
1066:       assertEquals(32, Node.INCRDECR_PROP);
1067:       assertEquals(46, Node.IS_NAMESPACE);
1068:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1069:       assertEquals(12, Node.COLUMN_BITS);
1070:       assertEquals(47, Node.IS_DISPATCHER);
1071:       assertEquals(56, Node.CHANGE_TIME);
1072:       assertEquals(2, Node.POST_FLAG);
1073:       assertEquals(30, Node.VAR_ARGS_NAME);
1074:       assertEquals(49, Node.DIRECT_EVAL);
1075:       assertEquals(37, Node.OPT_ARG_NAME);
1076:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1077:       assertEquals(54, Node.SLASH_V);
1078:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1079:       assertEquals(50, Node.FREE_CALL);
1080:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1081:       assertEquals(1, Node.DECR_FLAG);
1082:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1083:       assertEquals(4095, Node.COLUMN_MASK);
1084:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1085:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1086:       assertEquals(43, Node.IS_CONSTANT_NAME);
1087:       assertEquals(48, Node.DIRECTIVES);
1088:       assertEquals(40, Node.ORIGINALNAME_PROP);
1089:       assertEquals(52, Node.LENGTH);
1090:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1091:       assertEquals(57, Node.REFLECTED_OBJECT);
1092:       assertEquals(57, Node.LAST_PROP);
1093:       assertEquals(36, Node.QUOTED_PROP);
1094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1095:       assertEquals(8, Node.FLAG_NO_THROWS);
1096:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1097:       assertEquals(55, Node.INFERRED_FUNCTION);
1098:       assertEquals(29, Node.JSDOC_INFO_PROP);
1099:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1100:       assertEquals(39, Node.EMPTY_BLOCK);
1101:       assertEquals(53, Node.INPUT_ID);
1102:       assertNotSame(node0, node2);
1103:       assertNotSame(node2, node0);
1104:       assertNotNull(iterable0);
1105:       
1106:       int int0 = node2.getIntProp(33);
1107:       assertEquals(0, int0);
1108:       assertFalse(node0.isString());
1109:       assertFalse(node0.isIn());
1110:       assertEquals((-1), node0.getCharno());
1111:       assertFalse(node0.isSwitch());
1112:       assertFalse(node0.isNE());
1113:       assertFalse(node0.isIf());
1114:       assertFalse(node0.isDelProp());
1115:       assertFalse(node0.isThrow());
1116:       assertFalse(node0.isFalse());
1117:       assertFalse(node0.isEmpty());
1118:       assertFalse(node0.isInc());
1119:       assertFalse(node0.isDefaultCase());
1120:       assertFalse(node0.isObjectLit());
1121:       assertFalse(node0.isAnd());
1122:       assertFalse(node0.isNot());
1123:       assertFalse(node0.isDebugger());
1124:       assertFalse(node0.isFunction());
1125:       assertFalse(node0.isTrue());
1126:       assertFalse(node0.isVoid());
1127:       assertFalse(node0.isExprResult());
1128:       assertFalse(node0.isBreak());
1129:       assertFalse(node0.isGetElem());
1130:       assertFalse(node0.isCall());
1131:       assertFalse(node0.isDec());
1132:       assertFalse(node0.hasChildren());
1133:       assertFalse(node0.isTypeOf());
1134:       assertFalse(node0.isAssign());
1135:       assertFalse(node0.isComma());
1136:       assertEquals((-1), node0.getSourcePosition());
1137:       assertFalse(node0.isGetProp());
1138:       assertTrue(node0.isNumber());
1139:       assertFalse(node0.hasMoreThanOneChild());
1140:       assertFalse(node0.isWhile());
1141:       assertFalse(node0.isContinue());
1142:       assertEquals(39, node0.getType());
1143:       assertFalse(node0.isReturn());
1144:       assertFalse(node0.isOr());
1145:       assertFalse(node0.isLabel());
1146:       assertFalse(node0.isLabelName());
1147:       assertEquals((-1), node0.getLineno());
1148:       assertFalse(node0.isName());
1149:       assertFalse(node0.isVar());
1150:       assertFalse(node0.isCast());
1151:       assertFalse(node0.isNull());
1152:       assertFalse(node0.isAdd());
1153:       assertFalse(node0.isAssignAdd());
1154:       assertFalse(node0.isSetterDef());
1155:       assertFalse(node0.isDo());
1156:       assertFalse(node0.isNew());
1157:       assertFalse(node0.isWith());
1158:       assertFalse(node0.isCatch());
1159:       assertEquals(0, node0.getChildCount());
1160:       assertFalse(node0.isRegExp());
1161:       assertFalse(node0.isParamList());
1162:       assertFalse(node0.isInstanceOf());
1163:       assertFalse(node0.isArrayLit());
1164:       assertFalse(node0.isStringKey());
1165:       assertFalse(node0.isFor());
1166:       assertFalse(node0.isHook());
1167:       assertFalse(node0.isGetterDef());
1168:       assertFalse(node0.isThis());
1169:       assertFalse(node0.isBlock());
1170:       assertFalse(node0.hasOneChild());
1171:       assertFalse(node0.isScript());
1172:       assertFalse(node0.isTry());
1173:       assertFalse(node0.isCase());
1174:       assertEquals((-1), node2.getLineno());
1175:       assertFalse(node2.isLabel());
1176:       assertFalse(node2.isReturn());
1177:       assertFalse(node2.isContinue());
1178:       assertFalse(node2.isOr());
1179:       assertFalse(node2.isTypeOf());
1180:       assertFalse(node2.hasMoreThanOneChild());
1181:       assertFalse(node2.hasChildren());
1182:       assertFalse(node2.isWhile());
1183:       assertFalse(node2.isDec());
1184:       assertEquals(39, node2.getType());
1185:       assertFalse(node2.isNew());
1186:       assertFalse(node2.isDo());
1187:       assertFalse(node2.isAssignAdd());
1188:       assertFalse(node2.isAdd());
1189:       assertFalse(node2.isBlock());
1190:       assertFalse(node2.isCall());
1191:       assertFalse(node2.isAssign());
1192:       assertFalse(node2.isNull());
1193:       assertFalse(node2.isGetElem());
1194:       assertFalse(node2.isExprResult());
1195:       assertFalse(node2.isName());
1196:       assertFalse(node2.isObjectLit());
1197:       assertFalse(node2.isComma());
1198:       assertFalse(node2.isNot());
1199:       assertFalse(node2.isSetterDef());
1200:       assertFalse(node2.isThrow());
1201:       assertFalse(node2.isGetProp());
1202:       assertFalse(node2.isCast());
1203:       assertFalse(node2.isDebugger());
1204:       assertFalse(node2.isFalse());
1205:       assertFalse(node2.isFunction());
1206:       assertEquals((-1), node2.getSourcePosition());
1207:       assertFalse(node2.isAnd());
1208:       assertFalse(node2.isIn());
1209:       assertTrue(node2.isNumber());
1210:       assertFalse(node2.isString());
1211:       assertFalse(node2.isFor());
1212:       assertFalse(node2.isEmpty());
1213:       assertFalse(node2.isInc());
1214:       assertFalse(node2.isCase());
1215:       assertFalse(node2.isHook());
1216:       assertFalse(node2.isRegExp());
1217:       assertFalse(node2.isIf());
1218:       assertFalse(node2.isDelProp());
1219:       assertFalse(node2.isBreak());
1220:       assertFalse(node2.isNE());
1221:       assertFalse(node2.isTrue());
1222:       assertFalse(node2.isVoid());
1223:       assertEquals(0, node2.getChildCount());
1224:       assertFalse(node2.isInstanceOf());
1225:       assertFalse(node2.isCatch());
1226:       assertFalse(node2.isWith());
1227:       assertFalse(node2.isDefaultCase());
1228:       assertFalse(node2.isScript());
1229:       assertFalse(node2.isThis());
1230:       assertFalse(node2.isTry());
1231:       assertFalse(node2.hasOneChild());
1232:       assertFalse(node2.isArrayLit());
1233:       assertFalse(node2.isVar());
1234:       assertEquals((-1), node2.getCharno());
1235:       assertFalse(node2.isGetterDef());
1236:       assertFalse(node2.isStringKey());
1237:       assertFalse(node2.isParamList());
1238:       assertFalse(node2.isLabelName());
1239:       assertFalse(node2.isSwitch());
1240:       assertFalse(node0.equals((Object)node1));
1241:       assertFalse(node0.equals((Object)node2));
1242:       assertFalse(node2.equals((Object)node1));
1243:       assertFalse(node2.equals((Object)node0));
1244:       assertEquals(1, Node.DECR_FLAG);
1245:       assertEquals(49, Node.DIRECT_EVAL);
1246:       assertEquals(30, Node.VAR_ARGS_NAME);
1247:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1248:       assertEquals(57, Node.LAST_PROP);
1249:       assertEquals(12, Node.COLUMN_BITS);
1250:       assertEquals(32, Node.INCRDECR_PROP);
1251:       assertEquals(46, Node.IS_NAMESPACE);
1252:       assertEquals(54, Node.SLASH_V);
1253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1255:       assertEquals(52, Node.LENGTH);
1256:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1257:       assertEquals(56, Node.CHANGE_TIME);
1258:       assertEquals(57, Node.REFLECTED_OBJECT);
1259:       assertEquals(48, Node.DIRECTIVES);
1260:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1261:       assertEquals(37, Node.OPT_ARG_NAME);
1262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1263:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1264:       assertEquals(4095, Node.COLUMN_MASK);
1265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1267:       assertEquals(43, Node.IS_CONSTANT_NAME);
1268:       assertEquals(53, Node.INPUT_ID);
1269:       assertEquals(39, Node.EMPTY_BLOCK);
1270:       assertEquals(36, Node.QUOTED_PROP);
1271:       assertEquals(55, Node.INFERRED_FUNCTION);
1272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1273:       assertEquals(8, Node.FLAG_NO_THROWS);
1274:       assertEquals(40, Node.ORIGINALNAME_PROP);
1275:       assertEquals(29, Node.JSDOC_INFO_PROP);
1276:       assertEquals(50, Node.FREE_CALL);
1277:       assertEquals(47, Node.IS_DISPATCHER);
1278:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1279:       assertEquals(2, Node.POST_FLAG);
1280:       assertEquals(32, Node.INCRDECR_PROP);
1281:       assertEquals(46, Node.IS_NAMESPACE);
1282:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1283:       assertEquals(12, Node.COLUMN_BITS);
1284:       assertEquals(47, Node.IS_DISPATCHER);
1285:       assertEquals(56, Node.CHANGE_TIME);
1286:       assertEquals(2, Node.POST_FLAG);
1287:       assertEquals(30, Node.VAR_ARGS_NAME);
1288:       assertEquals(49, Node.DIRECT_EVAL);
1289:       assertEquals(37, Node.OPT_ARG_NAME);
1290:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1291:       assertEquals(54, Node.SLASH_V);
1292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1293:       assertEquals(50, Node.FREE_CALL);
1294:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1295:       assertEquals(1, Node.DECR_FLAG);
1296:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1297:       assertEquals(4095, Node.COLUMN_MASK);
1298:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1299:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1300:       assertEquals(43, Node.IS_CONSTANT_NAME);
1301:       assertEquals(48, Node.DIRECTIVES);
1302:       assertEquals(40, Node.ORIGINALNAME_PROP);
1303:       assertEquals(52, Node.LENGTH);
1304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1305:       assertEquals(57, Node.REFLECTED_OBJECT);
1306:       assertEquals(57, Node.LAST_PROP);
1307:       assertEquals(36, Node.QUOTED_PROP);
1308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1309:       assertEquals(8, Node.FLAG_NO_THROWS);
1310:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1311:       assertEquals(55, Node.INFERRED_FUNCTION);
1312:       assertEquals(29, Node.JSDOC_INFO_PROP);
1313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1314:       assertEquals(39, Node.EMPTY_BLOCK);
1315:       assertEquals(53, Node.INPUT_ID);
1316:       assertNotSame(node0, node2);
1317:       assertNotSame(node2, node0);
1318:       
1319:       Node node3 = Node.newString(46, "7s", (-1598), 29);
1320:       assertFalse(node3.isCatch());
1321:       assertFalse(node3.isDefaultCase());
1322:       assertFalse(node3.isFunction());
1323:       assertFalse(node3.isRegExp());
1324:       assertEquals(0, node3.getChildCount());
1325:       assertFalse(node3.isArrayLit());
1326:       assertFalse(node3.isStringKey());
1327:       assertFalse(node3.isTry());
1328:       assertFalse(node3.isParamList());
1329:       assertFalse(node3.isDebugger());
1330:       assertFalse(node3.isGetterDef());
1331:       assertFalse(node3.isReturn());
1332:       assertFalse(node3.isAssignAdd());
1333:       assertFalse(node3.isDo());
1334:       assertFalse(node3.isTypeOf());
1335:       assertFalse(node3.isDec());
1336:       assertFalse(node3.hasChildren());
1337:       assertFalse(node3.isWhile());
1338:       assertFalse(node3.isLabel());
1339:       assertFalse(node3.isAssign());
1340:       assertFalse(node3.isCall());
1341:       assertFalse(node3.isAdd());
1342:       assertFalse(node3.isVar());
1343:       assertFalse(node3.isNew());
1344:       assertFalse(node3.isGetElem());
1345:       assertFalse(node3.isName());
1346:       assertFalse(node3.isDelProp());
1347:       assertFalse(node3.isVoid());
1348:       assertFalse(node3.isNull());
1349:       assertFalse(node3.isTrue());
1350:       assertFalse(node3.isEmpty());
1351:       assertFalse(node3.isOr());
1352:       assertFalse(node3.isInstanceOf());
1353:       assertFalse(node3.isAnd());
1354:       assertFalse(node3.isGetProp());
1355:       assertEquals(46, node3.getType());
1356:       assertFalse(node3.isBreak());
1357:       assertFalse(node3.isThis());
1358:       assertFalse(node3.isExprResult());
1359:       assertFalse(node3.isFalse());
1360:       assertFalse(node3.isWith());
1361:       assertFalse(node3.isComma());
1362:       assertFalse(node3.hasOneChild());
1363:       assertFalse(node3.isHook());
1364:       assertFalse(node3.isCast());
1365:       assertFalse(node3.isLabelName());
1366:       assertEquals((-1), node3.getSourcePosition());
1367:       assertFalse(node3.isNumber());
1368:       assertFalse(node3.isSwitch());
1369:       assertFalse(node3.isString());
1370:       assertFalse(node3.isScript());
1371:       assertEquals((-1), node3.getCharno());
1372:       assertFalse(node3.isNot());
1373:       assertFalse(node3.isObjectLit());
1374:       assertFalse(node3.isIn());
1375:       assertFalse(node3.isCase());
1376:       assertEquals((-1), node3.getLineno());
1377:       assertFalse(node3.isFor());
1378:       assertFalse(node3.isBlock());
1379:       assertFalse(node3.isContinue());
1380:       assertFalse(node3.hasMoreThanOneChild());
1381:       assertFalse(node3.isThrow());
1382:       assertFalse(node3.isIf());
1383:       assertFalse(node3.isInc());
1384:       assertFalse(node3.isSetterDef());
1385:       assertFalse(node3.isNE());
1386:       assertFalse(node3.equals((Object)node2));
1387:       assertFalse(node3.equals((Object)node0));
1388:       assertFalse(node3.equals((Object)node1));
1389:       assertEquals(4095, Node.COLUMN_MASK);
1390:       assertEquals(39, Node.EMPTY_BLOCK);
1391:       assertEquals(55, Node.INFERRED_FUNCTION);
1392:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1393:       assertEquals(43, Node.IS_CONSTANT_NAME);
1394:       assertEquals(36, Node.QUOTED_PROP);
1395:       assertEquals(8, Node.FLAG_NO_THROWS);
1396:       assertEquals(48, Node.DIRECTIVES);
1397:       assertEquals(50, Node.FREE_CALL);
1398:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1399:       assertEquals(57, Node.REFLECTED_OBJECT);
1400:       assertEquals(53, Node.INPUT_ID);
1401:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1402:       assertEquals(52, Node.LENGTH);
1403:       assertEquals(40, Node.ORIGINALNAME_PROP);
1404:       assertEquals(29, Node.JSDOC_INFO_PROP);
1405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1406:       assertEquals(57, Node.LAST_PROP);
1407:       assertEquals(47, Node.IS_DISPATCHER);
1408:       assertEquals(2, Node.POST_FLAG);
1409:       assertEquals(30, Node.VAR_ARGS_NAME);
1410:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1411:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1412:       assertEquals(32, Node.INCRDECR_PROP);
1413:       assertEquals(1, Node.DECR_FLAG);
1414:       assertEquals(56, Node.CHANGE_TIME);
1415:       assertEquals(37, Node.OPT_ARG_NAME);
1416:       assertEquals(49, Node.DIRECT_EVAL);
1417:       assertEquals(46, Node.IS_NAMESPACE);
1418:       assertEquals(54, Node.SLASH_V);
1419:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1420:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1424:       assertEquals(12, Node.COLUMN_BITS);
1425:       assertNotNull(node3);
1426:   }
1427: }
RegularFileObject[/tmp/EvoSuite_339_1628161384629/com/google/javascript/rhino/Node_339_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_339_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_339_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_339_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:03:04.874 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-1065.94070143));
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node0);

Node node1 = new Node(47, node0, node0, 54, 53);
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isBreak());
assertEquals(53, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals(47, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(221237, node1.getSourcePosition());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(54, node1.getLineno());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node1);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
assertFalse(boolean0);

node_SideEffectFlags0.clearSideEffectFlags();
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags0.valueOf());
assertEquals(8, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

boolean boolean1 = node0.isCase();
assertFalse(boolean1);
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);

boolean boolean2 = node0.isDelProp();
assertFalse(boolean2);
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);

boolean boolean3 = node0.isTry();
assertFalse(boolean3);
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);

Node node2 = node0.cloneNode();
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isDec());
assertEquals(39, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertNotNull(node2);

Iterable<Node> iterable0 = node2.children();
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isDec());
assertEquals(39, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(iterable0.contains(node1));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertNotNull(iterable0);

int int0 = node2.getIntProp(33);
assertEquals(0, int0);
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isDec());
assertEquals(39, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node0, node2);
assertNotSame(node2, node0);

Node node3 = Node.newString(46, "7s", (-1598), 29);
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isTry());
assertFalse(node3.isParamList());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertFalse(node3.isAssign());
assertFalse(node3.isCall());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertEquals(46, node3.getType());
assertFalse(node3.isBreak());
assertFalse(node3.isThis());
assertFalse(node3.isExprResult());
assertFalse(node3.isFalse());
assertFalse(node3.isWith());
assertFalse(node3.isComma());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isCast());
assertFalse(node3.isLabelName());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNumber());
assertFalse(node3.isSwitch());
assertFalse(node3.isString());
assertFalse(node3.isScript());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isFor());
assertFalse(node3.isBlock());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNE());
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node3);


[MASTER] 11:03:07.604 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_367_1628161387357/com/google/javascript/rhino/Node_367_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_367_1628161387357/com/google/javascript/rhino/Node_367_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:07.604 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:07.604 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:07.605 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 904
[MASTER] 11:03:07.605 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_367_1628161387357/com/google/javascript/rhino/Node_367_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_367_tmp__ESTest extends Node_367_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
23:       assertFalse(boolean0);
24:       
25:       Node node0 = Node.newNumber((-1065.94070143));
26:       assertFalse(node0.isFunction());
27:       assertFalse(node0.isRegExp());
28:       assertFalse(node0.isTrue());
29:       assertFalse(node0.isVoid());
30:       assertFalse(node0.isDebugger());
31:       assertFalse(node0.isTry());
32:       assertFalse(node0.isDefaultCase());
33:       assertFalse(node0.isCatch());
34:       assertEquals(0, node0.getChildCount());
35:       assertFalse(node0.isArrayLit());
36:       assertFalse(node0.isSetterDef());
37:       assertFalse(node0.isNE());
38:       assertFalse(node0.isNull());
39:       assertFalse(node0.isName());
40:       assertFalse(node0.isDelProp());
41:       assertFalse(node0.isIf());
42:       assertFalse(node0.isEmpty());
43:       assertFalse(node0.isAdd());
44:       assertFalse(node0.isIn());
45:       assertFalse(node0.isSwitch());
46:       assertEquals((-1), node0.getCharno());
47:       assertFalse(node0.isNew());
48:       assertEquals(39, node0.getType());
49:       assertFalse(node0.isDo());
50:       assertFalse(node0.isBlock());
51:       assertFalse(node0.hasMoreThanOneChild());
52:       assertFalse(node0.isVar());
53:       assertFalse(node0.isHook());
54:       assertEquals((-1), node0.getLineno());
55:       assertFalse(node0.isThis());
56:       assertFalse(node0.isLabelName());
57:       assertFalse(node0.isFor());
58:       assertFalse(node0.isStringKey());
59:       assertFalse(node0.isParamList());
60:       assertFalse(node0.isCase());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isGetterDef());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isAnd());
66:       assertFalse(node0.isCast());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.isGetElem());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isBreak());
72:       assertFalse(node0.isLabel());
73:       assertFalse(node0.isAssignAdd());
74:       assertFalse(node0.isThrow());
75:       assertFalse(node0.isOr());
76:       assertFalse(node0.isInc());
77:       assertFalse(node0.isWhile());
78:       assertFalse(node0.isCall());
79:       assertFalse(node0.isFalse());
80:       assertFalse(node0.isContinue());
81:       assertFalse(node0.isTypeOf());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.isDec());
84:       assertFalse(node0.hasChildren());
85:       assertEquals((-1), node0.getSourcePosition());
86:       assertFalse(node0.isComma());
87:       assertTrue(node0.isNumber());
88:       assertFalse(node0.isReturn());
89:       assertFalse(node0.isObjectLit());
90:       assertFalse(node0.isNot());
91:       assertFalse(node0.isString());
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(53, Node.INPUT_ID);
95:       assertEquals(55, Node.INFERRED_FUNCTION);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(56, Node.CHANGE_TIME);
101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(48, Node.DIRECTIVES);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(12, Node.COLUMN_BITS);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(4095, Node.COLUMN_MASK);
108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
109:       assertEquals(54, Node.SLASH_V);
110:       assertEquals(57, Node.LAST_PROP);
111:       assertEquals(49, Node.DIRECT_EVAL);
112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
113:       assertEquals(1, Node.DECR_FLAG);
114:       assertEquals(57, Node.REFLECTED_OBJECT);
115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
116:       assertEquals(52, Node.LENGTH);
117:       assertEquals(46, Node.IS_NAMESPACE);
118:       assertEquals(50, Node.FREE_CALL);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(2, Node.POST_FLAG);
121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
122:       assertEquals(8, Node.FLAG_NO_THROWS);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       assertEquals(29, Node.JSDOC_INFO_PROP);
125:       assertEquals(40, Node.ORIGINALNAME_PROP);
126:       assertEquals(30, Node.VAR_ARGS_NAME);
127:       assertEquals(47, Node.IS_DISPATCHER);
128:       assertNotNull(node0);
129:       
130:       Node node1 = new Node(47, node0, node0, 54, 53);
131:       assertFalse(node0.isFunction());
132:       assertFalse(node0.isRegExp());
133:       assertFalse(node0.isTrue());
134:       assertFalse(node0.isVoid());
135:       assertFalse(node0.isDebugger());
136:       assertFalse(node0.isTry());
137:       assertFalse(node0.isDefaultCase());
138:       assertFalse(node0.isCatch());
139:       assertEquals(0, node0.getChildCount());
140:       assertFalse(node0.isArrayLit());
141:       assertFalse(node0.isSetterDef());
142:       assertFalse(node0.isNE());
143:       assertFalse(node0.isNull());
144:       assertFalse(node0.isName());
145:       assertFalse(node0.isDelProp());
146:       assertFalse(node0.isIf());
147:       assertFalse(node0.isEmpty());
148:       assertFalse(node0.isAdd());
149:       assertFalse(node0.isIn());
150:       assertFalse(node0.isSwitch());
151:       assertEquals((-1), node0.getCharno());
152:       assertFalse(node0.isNew());
153:       assertEquals(39, node0.getType());
154:       assertFalse(node0.isDo());
155:       assertFalse(node0.isBlock());
156:       assertFalse(node0.hasMoreThanOneChild());
157:       assertFalse(node0.isVar());
158:       assertFalse(node0.isHook());
159:       assertEquals((-1), node0.getLineno());
160:       assertFalse(node0.isThis());
161:       assertFalse(node0.isLabelName());
162:       assertFalse(node0.isFor());
163:       assertFalse(node0.isStringKey());
164:       assertFalse(node0.isParamList());
165:       assertFalse(node0.isCase());
166:       assertFalse(node0.hasOneChild());
167:       assertFalse(node0.isGetterDef());
168:       assertFalse(node0.isScript());
169:       assertFalse(node0.isExprResult());
170:       assertFalse(node0.isAnd());
171:       assertFalse(node0.isCast());
172:       assertFalse(node0.isWith());
173:       assertFalse(node0.isAssign());
174:       assertFalse(node0.isGetElem());
175:       assertFalse(node0.isInstanceOf());
176:       assertFalse(node0.isBreak());
177:       assertFalse(node0.isLabel());
178:       assertFalse(node0.isAssignAdd());
179:       assertFalse(node0.isThrow());
180:       assertFalse(node0.isOr());
181:       assertFalse(node0.isInc());
182:       assertFalse(node0.isWhile());
183:       assertFalse(node0.isCall());
184:       assertFalse(node0.isFalse());
185:       assertFalse(node0.isContinue());
186:       assertFalse(node0.isTypeOf());
187:       assertFalse(node0.isGetProp());
188:       assertFalse(node0.isDec());
189:       assertFalse(node0.hasChildren());
190:       assertEquals((-1), node0.getSourcePosition());
191:       assertFalse(node0.isComma());
192:       assertTrue(node0.isNumber());
193:       assertFalse(node0.isReturn());
194:       assertFalse(node0.isObjectLit());
195:       assertFalse(node0.isNot());
196:       assertFalse(node0.isString());
197:       assertFalse(node1.isScript());
198:       assertFalse(node1.isExprResult());
199:       assertFalse(node1.isNot());
200:       assertFalse(node1.isObjectLit());
201:       assertFalse(node1.isWith());
202:       assertFalse(node1.isDec());
203:       assertFalse(node1.isComma());
204:       assertFalse(node1.isBreak());
205:       assertFalse(node1.isThis());
206:       assertFalse(node1.isOr());
207:       assertFalse(node1.isAssign());
208:       assertFalse(node1.isTypeOf());
209:       assertFalse(node1.hasMoreThanOneChild());
210:       assertFalse(node1.isInstanceOf());
211:       assertTrue(node1.isRegExp());
212:       assertFalse(node1.isGetElem());
213:       assertFalse(node1.isInc());
214:       assertFalse(node1.isString());
215:       assertFalse(node1.isContinue());
216:       assertFalse(node1.isThrow());
217:       assertFalse(node1.isReturn());
218:       assertFalse(node1.isWhile());
219:       assertFalse(node1.isGetProp());
220:       assertFalse(node1.isFalse());
221:       assertEquals(221237, node1.getSourcePosition());
222:       assertFalse(node1.isCast());
223:       assertFalse(node1.isAnd());
224:       assertFalse(node1.isDebugger());
225:       assertFalse(node1.isTrue());
226:       assertEquals(54, node1.getLineno());
227:       assertFalse(node1.isFunction());
228:       assertFalse(node1.isTry());
229:       assertFalse(node1.isFor());
230:       assertFalse(node1.isDefaultCase());
231:       assertFalse(node1.isNE());
232:       assertTrue(node1.hasOneChild());
233:       assertFalse(node1.isSetterDef());
234:       assertFalse(node1.isNull());
235:       assertFalse(node1.isEmpty());
236:       assertTrue(node1.hasChildren());
237:       assertEquals(1, node1.getChildCount());
238:       assertFalse(node1.isIn());
239:       assertFalse(node1.isCatch());
240:       assertFalse(node1.isCall());
241:       assertFalse(node1.isIf());
242:       assertFalse(node1.isDelProp());
243:       assertFalse(node1.isVoid());
244:       assertFalse(node1.isName());
245:       assertFalse(node1.isSwitch());
246:       assertFalse(node1.isBlock());
247:       assertFalse(node1.isAdd());
248:       assertFalse(node1.isVar());
249:       assertFalse(node1.isHook());
250:       assertEquals(53, node1.getCharno());
251:       assertEquals(47, node1.getType());
252:       assertFalse(node1.isDo());
253:       assertFalse(node1.isAssignAdd());
254:       assertFalse(node1.isCase());
255:       assertFalse(node1.isNew());
256:       assertFalse(node1.isParamList());
257:       assertFalse(node1.isLabel());
258:       assertFalse(node1.isGetterDef());
259:       assertFalse(node1.isNumber());
260:       assertFalse(node1.isArrayLit());
261:       assertFalse(node1.isLabelName());
262:       assertFalse(node1.isStringKey());
263:       assertFalse(node1.equals((Object)node0));
264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertEquals(53, Node.INPUT_ID);
267:       assertEquals(55, Node.INFERRED_FUNCTION);
268:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
270:       assertEquals(36, Node.QUOTED_PROP);
271:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
272:       assertEquals(56, Node.CHANGE_TIME);
273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
274:       assertEquals(32, Node.INCRDECR_PROP);
275:       assertEquals(48, Node.DIRECTIVES);
276:       assertEquals(37, Node.OPT_ARG_NAME);
277:       assertEquals(12, Node.COLUMN_BITS);
278:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
279:       assertEquals(4095, Node.COLUMN_MASK);
280:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
281:       assertEquals(54, Node.SLASH_V);
282:       assertEquals(57, Node.LAST_PROP);
283:       assertEquals(49, Node.DIRECT_EVAL);
284:       assertEquals(15, Node.NO_SIDE_EFFECTS);
285:       assertEquals(1, Node.DECR_FLAG);
286:       assertEquals(57, Node.REFLECTED_OBJECT);
287:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
288:       assertEquals(52, Node.LENGTH);
289:       assertEquals(46, Node.IS_NAMESPACE);
290:       assertEquals(50, Node.FREE_CALL);
291:       assertEquals(51, Node.STATIC_SOURCE_FILE);
292:       assertEquals(2, Node.POST_FLAG);
293:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
294:       assertEquals(8, Node.FLAG_NO_THROWS);
295:       assertEquals(39, Node.EMPTY_BLOCK);
296:       assertEquals(29, Node.JSDOC_INFO_PROP);
297:       assertEquals(40, Node.ORIGINALNAME_PROP);
298:       assertEquals(30, Node.VAR_ARGS_NAME);
299:       assertEquals(47, Node.IS_DISPATCHER);
300:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
301:       assertEquals(43, Node.IS_CONSTANT_NAME);
302:       assertEquals(36, Node.QUOTED_PROP);
303:       assertEquals(4095, Node.COLUMN_MASK);
304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
305:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(46, Node.IS_NAMESPACE);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(51, Node.STATIC_SOURCE_FILE);
310:       assertEquals(1, Node.DECR_FLAG);
311:       assertEquals(32, Node.INCRDECR_PROP);
312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
313:       assertEquals(57, Node.LAST_PROP);
314:       assertEquals(30, Node.VAR_ARGS_NAME);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(54, Node.SLASH_V);
317:       assertEquals(57, Node.REFLECTED_OBJECT);
318:       assertEquals(49, Node.DIRECT_EVAL);
319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
320:       assertEquals(40, Node.ORIGINALNAME_PROP);
321:       assertEquals(2, Node.POST_FLAG);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(56, Node.CHANGE_TIME);
324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
325:       assertEquals(48, Node.DIRECTIVES);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
330:       assertEquals(29, Node.JSDOC_INFO_PROP);
331:       assertEquals(52, Node.LENGTH);
332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
333:       assertEquals(15, Node.NO_SIDE_EFFECTS);
334:       assertEquals(39, Node.EMPTY_BLOCK);
335:       assertEquals(53, Node.INPUT_ID);
336:       assertNotNull(node1);
337:       
338:       boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
339:       assertFalse(boolean1);
340:       assertTrue(boolean1 == boolean0);
341:       
342:       boolean boolean2 = node0.isDelProp();
343:       assertFalse(boolean2);
344:       assertFalse(node0.isFunction());
345:       assertFalse(node0.isRegExp());
346:       assertFalse(node0.isTrue());
347:       assertFalse(node0.isVoid());
348:       assertFalse(node0.isDebugger());
349:       assertFalse(node0.isTry());
350:       assertFalse(node0.isDefaultCase());
351:       assertFalse(node0.isCatch());
352:       assertEquals(0, node0.getChildCount());
353:       assertFalse(node0.isArrayLit());
354:       assertFalse(node0.isSetterDef());
355:       assertFalse(node0.isNE());
356:       assertFalse(node0.isNull());
357:       assertFalse(node0.isName());
358:       assertFalse(node0.isDelProp());
359:       assertFalse(node0.isIf());
360:       assertFalse(node0.isEmpty());
361:       assertFalse(node0.isAdd());
362:       assertFalse(node0.isIn());
363:       assertFalse(node0.isSwitch());
364:       assertEquals((-1), node0.getCharno());
365:       assertFalse(node0.isNew());
366:       assertEquals(39, node0.getType());
367:       assertFalse(node0.isDo());
368:       assertFalse(node0.isBlock());
369:       assertFalse(node0.hasMoreThanOneChild());
370:       assertFalse(node0.isVar());
371:       assertFalse(node0.isHook());
372:       assertEquals((-1), node0.getLineno());
373:       assertFalse(node0.isThis());
374:       assertFalse(node0.isLabelName());
375:       assertFalse(node0.isFor());
376:       assertFalse(node0.isStringKey());
377:       assertFalse(node0.isParamList());
378:       assertFalse(node0.isCase());
379:       assertFalse(node0.hasOneChild());
380:       assertFalse(node0.isGetterDef());
381:       assertFalse(node0.isScript());
382:       assertFalse(node0.isExprResult());
383:       assertFalse(node0.isAnd());
384:       assertFalse(node0.isCast());
385:       assertFalse(node0.isWith());
386:       assertFalse(node0.isAssign());
387:       assertFalse(node0.isGetElem());
388:       assertFalse(node0.isInstanceOf());
389:       assertFalse(node0.isBreak());
390:       assertFalse(node0.isLabel());
391:       assertFalse(node0.isAssignAdd());
392:       assertFalse(node0.isThrow());
393:       assertFalse(node0.isOr());
394:       assertFalse(node0.isInc());
395:       assertFalse(node0.isWhile());
396:       assertFalse(node0.isCall());
397:       assertFalse(node0.isFalse());
398:       assertFalse(node0.isContinue());
399:       assertFalse(node0.isTypeOf());
400:       assertFalse(node0.isGetProp());
401:       assertFalse(node0.isDec());
402:       assertFalse(node0.hasChildren());
403:       assertEquals((-1), node0.getSourcePosition());
404:       assertFalse(node0.isComma());
405:       assertTrue(node0.isNumber());
406:       assertFalse(node0.isReturn());
407:       assertFalse(node0.isObjectLit());
408:       assertFalse(node0.isNot());
409:       assertFalse(node0.isString());
410:       assertFalse(node0.equals((Object)node1));
411:       assertTrue(boolean2 == boolean1);
412:       assertTrue(boolean2 == boolean0);
413:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(53, Node.INPUT_ID);
416:       assertEquals(55, Node.INFERRED_FUNCTION);
417:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
419:       assertEquals(36, Node.QUOTED_PROP);
420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
421:       assertEquals(56, Node.CHANGE_TIME);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(32, Node.INCRDECR_PROP);
424:       assertEquals(48, Node.DIRECTIVES);
425:       assertEquals(37, Node.OPT_ARG_NAME);
426:       assertEquals(12, Node.COLUMN_BITS);
427:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
428:       assertEquals(4095, Node.COLUMN_MASK);
429:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
430:       assertEquals(54, Node.SLASH_V);
431:       assertEquals(57, Node.LAST_PROP);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(1, Node.DECR_FLAG);
435:       assertEquals(57, Node.REFLECTED_OBJECT);
436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
437:       assertEquals(52, Node.LENGTH);
438:       assertEquals(46, Node.IS_NAMESPACE);
439:       assertEquals(50, Node.FREE_CALL);
440:       assertEquals(51, Node.STATIC_SOURCE_FILE);
441:       assertEquals(2, Node.POST_FLAG);
442:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
443:       assertEquals(8, Node.FLAG_NO_THROWS);
444:       assertEquals(39, Node.EMPTY_BLOCK);
445:       assertEquals(29, Node.JSDOC_INFO_PROP);
446:       assertEquals(40, Node.ORIGINALNAME_PROP);
447:       assertEquals(30, Node.VAR_ARGS_NAME);
448:       assertEquals(47, Node.IS_DISPATCHER);
449:       
450:       boolean boolean3 = node0.isTry();
451:       assertFalse(boolean3);
452:       assertFalse(node0.isFunction());
453:       assertFalse(node0.isRegExp());
454:       assertFalse(node0.isTrue());
455:       assertFalse(node0.isVoid());
456:       assertFalse(node0.isDebugger());
457:       assertFalse(node0.isTry());
458:       assertFalse(node0.isDefaultCase());
459:       assertFalse(node0.isCatch());
460:       assertEquals(0, node0.getChildCount());
461:       assertFalse(node0.isArrayLit());
462:       assertFalse(node0.isSetterDef());
463:       assertFalse(node0.isNE());
464:       assertFalse(node0.isNull());
465:       assertFalse(node0.isName());
466:       assertFalse(node0.isDelProp());
467:       assertFalse(node0.isIf());
468:       assertFalse(node0.isEmpty());
469:       assertFalse(node0.isAdd());
470:       assertFalse(node0.isIn());
471:       assertFalse(node0.isSwitch());
472:       assertEquals((-1), node0.getCharno());
473:       assertFalse(node0.isNew());
474:       assertEquals(39, node0.getType());
475:       assertFalse(node0.isDo());
476:       assertFalse(node0.isBlock());
477:       assertFalse(node0.hasMoreThanOneChild());
478:       assertFalse(node0.isVar());
479:       assertFalse(node0.isHook());
480:       assertEquals((-1), node0.getLineno());
481:       assertFalse(node0.isThis());
482:       assertFalse(node0.isLabelName());
483:       assertFalse(node0.isFor());
484:       assertFalse(node0.isStringKey());
485:       assertFalse(node0.isParamList());
486:       assertFalse(node0.isCase());
487:       assertFalse(node0.hasOneChild());
488:       assertFalse(node0.isGetterDef());
489:       assertFalse(node0.isScript());
490:       assertFalse(node0.isExprResult());
491:       assertFalse(node0.isAnd());
492:       assertFalse(node0.isCast());
493:       assertFalse(node0.isWith());
494:       assertFalse(node0.isAssign());
495:       assertFalse(node0.isGetElem());
496:       assertFalse(node0.isInstanceOf());
497:       assertFalse(node0.isBreak());
498:       assertFalse(node0.isLabel());
499:       assertFalse(node0.isAssignAdd());
500:       assertFalse(node0.isThrow());
501:       assertFalse(node0.isOr());
502:       assertFalse(node0.isInc());
503:       assertFalse(node0.isWhile());
504:       assertFalse(node0.isCall());
505:       assertFalse(node0.isFalse());
506:       assertFalse(node0.isContinue());
507:       assertFalse(node0.isTypeOf());
508:       assertFalse(node0.isGetProp());
509:       assertFalse(node0.isDec());
510:       assertFalse(node0.hasChildren());
511:       assertEquals((-1), node0.getSourcePosition());
512:       assertFalse(node0.isComma());
513:       assertTrue(node0.isNumber());
514:       assertFalse(node0.isReturn());
515:       assertFalse(node0.isObjectLit());
516:       assertFalse(node0.isNot());
517:       assertFalse(node0.isString());
518:       assertFalse(node0.equals((Object)node1));
519:       assertTrue(boolean3 == boolean2);
520:       assertTrue(boolean3 == boolean0);
521:       assertTrue(boolean3 == boolean1);
522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
523:       assertEquals(43, Node.IS_CONSTANT_NAME);
524:       assertEquals(53, Node.INPUT_ID);
525:       assertEquals(55, Node.INFERRED_FUNCTION);
526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
527:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
528:       assertEquals(36, Node.QUOTED_PROP);
529:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
530:       assertEquals(56, Node.CHANGE_TIME);
531:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
532:       assertEquals(32, Node.INCRDECR_PROP);
533:       assertEquals(48, Node.DIRECTIVES);
534:       assertEquals(37, Node.OPT_ARG_NAME);
535:       assertEquals(12, Node.COLUMN_BITS);
536:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
537:       assertEquals(4095, Node.COLUMN_MASK);
538:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
539:       assertEquals(54, Node.SLASH_V);
540:       assertEquals(57, Node.LAST_PROP);
541:       assertEquals(49, Node.DIRECT_EVAL);
542:       assertEquals(15, Node.NO_SIDE_EFFECTS);
543:       assertEquals(1, Node.DECR_FLAG);
544:       assertEquals(57, Node.REFLECTED_OBJECT);
545:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
546:       assertEquals(52, Node.LENGTH);
547:       assertEquals(46, Node.IS_NAMESPACE);
548:       assertEquals(50, Node.FREE_CALL);
549:       assertEquals(51, Node.STATIC_SOURCE_FILE);
550:       assertEquals(2, Node.POST_FLAG);
551:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
552:       assertEquals(8, Node.FLAG_NO_THROWS);
553:       assertEquals(39, Node.EMPTY_BLOCK);
554:       assertEquals(29, Node.JSDOC_INFO_PROP);
555:       assertEquals(40, Node.ORIGINALNAME_PROP);
556:       assertEquals(30, Node.VAR_ARGS_NAME);
557:       assertEquals(47, Node.IS_DISPATCHER);
558:       
559:       Node node2 = node0.cloneNode();
560:       assertFalse(node0.isFunction());
561:       assertFalse(node0.isRegExp());
562:       assertFalse(node0.isTrue());
563:       assertFalse(node0.isVoid());
564:       assertFalse(node0.isDebugger());
565:       assertFalse(node0.isTry());
566:       assertFalse(node0.isDefaultCase());
567:       assertFalse(node0.isCatch());
568:       assertEquals(0, node0.getChildCount());
569:       assertFalse(node0.isArrayLit());
570:       assertFalse(node0.isSetterDef());
571:       assertFalse(node0.isNE());
572:       assertFalse(node0.isNull());
573:       assertFalse(node0.isName());
574:       assertFalse(node0.isDelProp());
575:       assertFalse(node0.isIf());
576:       assertFalse(node0.isEmpty());
577:       assertFalse(node0.isAdd());
578:       assertFalse(node0.isIn());
579:       assertFalse(node0.isSwitch());
580:       assertEquals((-1), node0.getCharno());
581:       assertFalse(node0.isNew());
582:       assertEquals(39, node0.getType());
583:       assertFalse(node0.isDo());
584:       assertFalse(node0.isBlock());
585:       assertFalse(node0.hasMoreThanOneChild());
586:       assertFalse(node0.isVar());
587:       assertFalse(node0.isHook());
588:       assertEquals((-1), node0.getLineno());
589:       assertFalse(node0.isThis());
590:       assertFalse(node0.isLabelName());
591:       assertFalse(node0.isFor());
592:       assertFalse(node0.isStringKey());
593:       assertFalse(node0.isParamList());
594:       assertFalse(node0.isCase());
595:       assertFalse(node0.hasOneChild());
596:       assertFalse(node0.isGetterDef());
597:       assertFalse(node0.isScript());
598:       assertFalse(node0.isExprResult());
599:       assertFalse(node0.isAnd());
600:       assertFalse(node0.isCast());
601:       assertFalse(node0.isWith());
602:       assertFalse(node0.isAssign());
603:       assertFalse(node0.isGetElem());
604:       assertFalse(node0.isInstanceOf());
605:       assertFalse(node0.isBreak());
606:       assertFalse(node0.isLabel());
607:       assertFalse(node0.isAssignAdd());
608:       assertFalse(node0.isThrow());
609:       assertFalse(node0.isOr());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isWhile());
612:       assertFalse(node0.isCall());
613:       assertFalse(node0.isFalse());
614:       assertFalse(node0.isContinue());
615:       assertFalse(node0.isTypeOf());
616:       assertFalse(node0.isGetProp());
617:       assertFalse(node0.isDec());
618:       assertFalse(node0.hasChildren());
619:       assertEquals((-1), node0.getSourcePosition());
620:       assertFalse(node0.isComma());
621:       assertTrue(node0.isNumber());
622:       assertFalse(node0.isReturn());
623:       assertFalse(node0.isObjectLit());
624:       assertFalse(node0.isNot());
625:       assertFalse(node0.isString());
626:       assertFalse(node2.isExprResult());
627:       assertFalse(node2.isScript());
628:       assertFalse(node2.hasOneChild());
629:       assertFalse(node2.isAnd());
630:       assertFalse(node2.isObjectLit());
631:       assertFalse(node2.isNot());
632:       assertEquals((-1), node2.getSourcePosition());
633:       assertFalse(node2.isGetProp());
634:       assertFalse(node2.isThis());
635:       assertFalse(node2.isBreak());
636:       assertEquals((-1), node2.getLineno());
637:       assertFalse(node2.isGetElem());
638:       assertFalse(node2.hasMoreThanOneChild());
639:       assertFalse(node2.isInstanceOf());
640:       assertFalse(node2.isWhile());
641:       assertFalse(node2.hasChildren());
642:       assertFalse(node2.isWith());
643:       assertFalse(node2.isHook());
644:       assertFalse(node2.isReturn());
645:       assertFalse(node2.isTypeOf());
646:       assertEquals(39, node2.getType());
647:       assertFalse(node2.isAssign());
648:       assertFalse(node2.isDec());
649:       assertFalse(node2.isComma());
650:       assertFalse(node2.isInc());
651:       assertFalse(node2.isString());
652:       assertFalse(node2.isIn());
653:       assertFalse(node2.isSetterDef());
654:       assertFalse(node2.isThrow());
655:       assertFalse(node2.isContinue());
656:       assertFalse(node2.isFalse());
657:       assertFalse(node2.isCast());
658:       assertFalse(node2.isDebugger());
659:       assertFalse(node2.isVoid());
660:       assertFalse(node2.isFunction());
661:       assertFalse(node2.isTrue());
662:       assertFalse(node2.isDefaultCase());
663:       assertFalse(node2.isArrayLit());
664:       assertFalse(node2.isTry());
665:       assertFalse(node2.isEmpty());
666:       assertFalse(node2.isGetterDef());
667:       assertFalse(node2.isNE());
668:       assertFalse(node2.isIf());
669:       assertFalse(node2.isDelProp());
670:       assertTrue(node2.isNumber());
671:       assertFalse(node2.isCall());
672:       assertFalse(node2.isFor());
673:       assertFalse(node2.isCatch());
674:       assertFalse(node2.isRegExp());
675:       assertEquals((-1), node2.getCharno());
676:       assertFalse(node2.isBlock());
677:       assertFalse(node2.isSwitch());
678:       assertFalse(node2.isAdd());
679:       assertFalse(node2.isDo());
680:       assertFalse(node2.isCase());
681:       assertFalse(node2.isNew());
682:       assertFalse(node2.isName());
683:       assertFalse(node2.isStringKey());
684:       assertFalse(node2.isNull());
685:       assertFalse(node2.isOr());
686:       assertFalse(node2.isAssignAdd());
687:       assertFalse(node2.isParamList());
688:       assertFalse(node2.isLabelName());
689:       assertFalse(node2.isVar());
690:       assertEquals(0, node2.getChildCount());
691:       assertFalse(node2.isLabel());
692:       assertFalse(node0.equals((Object)node1));
693:       assertFalse(node2.equals((Object)node1));
694:       assertFalse(node2.equals((Object)node0));
695:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
696:       assertEquals(43, Node.IS_CONSTANT_NAME);
697:       assertEquals(53, Node.INPUT_ID);
698:       assertEquals(55, Node.INFERRED_FUNCTION);
699:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
700:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
701:       assertEquals(36, Node.QUOTED_PROP);
702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
703:       assertEquals(56, Node.CHANGE_TIME);
704:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
705:       assertEquals(32, Node.INCRDECR_PROP);
706:       assertEquals(48, Node.DIRECTIVES);
707:       assertEquals(37, Node.OPT_ARG_NAME);
708:       assertEquals(12, Node.COLUMN_BITS);
709:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
710:       assertEquals(4095, Node.COLUMN_MASK);
711:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
712:       assertEquals(54, Node.SLASH_V);
713:       assertEquals(57, Node.LAST_PROP);
714:       assertEquals(49, Node.DIRECT_EVAL);
715:       assertEquals(15, Node.NO_SIDE_EFFECTS);
716:       assertEquals(1, Node.DECR_FLAG);
717:       assertEquals(57, Node.REFLECTED_OBJECT);
718:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
719:       assertEquals(52, Node.LENGTH);
720:       assertEquals(46, Node.IS_NAMESPACE);
721:       assertEquals(50, Node.FREE_CALL);
722:       assertEquals(51, Node.STATIC_SOURCE_FILE);
723:       assertEquals(2, Node.POST_FLAG);
724:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
725:       assertEquals(8, Node.FLAG_NO_THROWS);
726:       assertEquals(39, Node.EMPTY_BLOCK);
727:       assertEquals(29, Node.JSDOC_INFO_PROP);
728:       assertEquals(40, Node.ORIGINALNAME_PROP);
729:       assertEquals(30, Node.VAR_ARGS_NAME);
730:       assertEquals(47, Node.IS_DISPATCHER);
731:       assertEquals(53, Node.INPUT_ID);
732:       assertEquals(36, Node.QUOTED_PROP);
733:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(47, Node.IS_DISPATCHER);
736:       assertEquals(2, Node.POST_FLAG);
737:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
738:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
739:       assertEquals(40, Node.ORIGINALNAME_PROP);
740:       assertEquals(50, Node.FREE_CALL);
741:       assertEquals(51, Node.STATIC_SOURCE_FILE);
742:       assertEquals(46, Node.IS_NAMESPACE);
743:       assertEquals(43, Node.IS_CONSTANT_NAME);
744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
745:       assertEquals(54, Node.SLASH_V);
746:       assertEquals(15, Node.NO_SIDE_EFFECTS);
747:       assertEquals(52, Node.LENGTH);
748:       assertEquals(1, Node.DECR_FLAG);
749:       assertEquals(30, Node.VAR_ARGS_NAME);
750:       assertEquals(57, Node.LAST_PROP);
751:       assertEquals(32, Node.INCRDECR_PROP);
752:       assertEquals(12, Node.COLUMN_BITS);
753:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
754:       assertEquals(48, Node.DIRECTIVES);
755:       assertEquals(8, Node.FLAG_NO_THROWS);
756:       assertEquals(39, Node.EMPTY_BLOCK);
757:       assertEquals(37, Node.OPT_ARG_NAME);
758:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
759:       assertEquals(55, Node.INFERRED_FUNCTION);
760:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
761:       assertEquals(29, Node.JSDOC_INFO_PROP);
762:       assertEquals(4095, Node.COLUMN_MASK);
763:       assertEquals(49, Node.DIRECT_EVAL);
764:       assertEquals(57, Node.REFLECTED_OBJECT);
765:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
766:       assertEquals(56, Node.CHANGE_TIME);
767:       assertNotSame(node0, node2);
768:       assertNotSame(node2, node0);
769:       assertNotNull(node2);
770:       
771:       Iterable<Node> iterable0 = node2.children();
772:       assertFalse(node0.isFunction());
773:       assertFalse(node0.isRegExp());
774:       assertFalse(node0.isTrue());
775:       assertFalse(node0.isVoid());
776:       assertFalse(node0.isDebugger());
777:       assertFalse(node0.isTry());
778:       assertFalse(node0.isDefaultCase());
779:       assertFalse(node0.isCatch());
780:       assertEquals(0, node0.getChildCount());
781:       assertFalse(node0.isArrayLit());
782:       assertFalse(node0.isSetterDef());
783:       assertFalse(node0.isNE());
784:       assertFalse(node0.isNull());
785:       assertFalse(node0.isName());
786:       assertFalse(node0.isDelProp());
787:       assertFalse(node0.isIf());
788:       assertFalse(node0.isEmpty());
789:       assertFalse(node0.isAdd());
790:       assertFalse(node0.isIn());
791:       assertFalse(node0.isSwitch());
792:       assertEquals((-1), node0.getCharno());
793:       assertFalse(node0.isNew());
794:       assertEquals(39, node0.getType());
795:       assertFalse(node0.isDo());
796:       assertFalse(node0.isBlock());
797:       assertFalse(node0.hasMoreThanOneChild());
798:       assertFalse(node0.isVar());
799:       assertFalse(node0.isHook());
800:       assertEquals((-1), node0.getLineno());
801:       assertFalse(node0.isThis());
802:       assertFalse(node0.isLabelName());
803:       assertFalse(node0.isFor());
804:       assertFalse(node0.isStringKey());
805:       assertFalse(node0.isParamList());
806:       assertFalse(node0.isCase());
807:       assertFalse(node0.hasOneChild());
808:       assertFalse(node0.isGetterDef());
809:       assertFalse(node0.isScript());
810:       assertFalse(node0.isExprResult());
811:       assertFalse(node0.isAnd());
812:       assertFalse(node0.isCast());
813:       assertFalse(node0.isWith());
814:       assertFalse(node0.isAssign());
815:       assertFalse(node0.isGetElem());
816:       assertFalse(node0.isInstanceOf());
817:       assertFalse(node0.isBreak());
818:       assertFalse(node0.isLabel());
819:       assertFalse(node0.isAssignAdd());
820:       assertFalse(node0.isThrow());
821:       assertFalse(node0.isOr());
822:       assertFalse(node0.isInc());
823:       assertFalse(node0.isWhile());
824:       assertFalse(node0.isCall());
825:       assertFalse(node0.isFalse());
826:       assertFalse(node0.isContinue());
827:       assertFalse(node0.isTypeOf());
828:       assertFalse(node0.isGetProp());
829:       assertFalse(node0.isDec());
830:       assertFalse(node0.hasChildren());
831:       assertEquals((-1), node0.getSourcePosition());
832:       assertFalse(node0.isComma());
833:       assertTrue(node0.isNumber());
834:       assertFalse(node0.isReturn());
835:       assertFalse(node0.isObjectLit());
836:       assertFalse(node0.isNot());
837:       assertFalse(node0.isString());
838:       assertFalse(node2.isExprResult());
839:       assertFalse(node2.isScript());
840:       assertFalse(node2.hasOneChild());
841:       assertFalse(node2.isAnd());
842:       assertFalse(node2.isObjectLit());
843:       assertFalse(node2.isNot());
844:       assertEquals((-1), node2.getSourcePosition());
845:       assertFalse(node2.isGetProp());
846:       assertFalse(node2.isThis());
847:       assertFalse(node2.isBreak());
848:       assertEquals((-1), node2.getLineno());
849:       assertFalse(node2.isGetElem());
850:       assertFalse(node2.hasMoreThanOneChild());
851:       assertFalse(node2.isInstanceOf());
852:       assertFalse(node2.isWhile());
853:       assertFalse(node2.hasChildren());
854:       assertFalse(node2.isWith());
855:       assertFalse(node2.isHook());
856:       assertFalse(node2.isReturn());
857:       assertFalse(node2.isTypeOf());
858:       assertEquals(39, node2.getType());
859:       assertFalse(node2.isAssign());
860:       assertFalse(node2.isDec());
861:       assertFalse(node2.isComma());
862:       assertFalse(node2.isInc());
863:       assertFalse(node2.isString());
864:       assertFalse(node2.isIn());
865:       assertFalse(node2.isSetterDef());
866:       assertFalse(node2.isThrow());
867:       assertFalse(node2.isContinue());
868:       assertFalse(node2.isFalse());
869:       assertFalse(node2.isCast());
870:       assertFalse(node2.isDebugger());
871:       assertFalse(node2.isVoid());
872:       assertFalse(node2.isFunction());
873:       assertFalse(node2.isTrue());
874:       assertFalse(node2.isDefaultCase());
875:       assertFalse(node2.isArrayLit());
876:       assertFalse(node2.isTry());
877:       assertFalse(node2.isEmpty());
878:       assertFalse(node2.isGetterDef());
879:       assertFalse(node2.isNE());
880:       assertFalse(node2.isIf());
881:       assertFalse(node2.isDelProp());
882:       assertTrue(node2.isNumber());
883:       assertFalse(node2.isCall());
884:       assertFalse(node2.isFor());
885:       assertFalse(node2.isCatch());
886:       assertFalse(node2.isRegExp());
887:       assertEquals((-1), node2.getCharno());
888:       assertFalse(node2.isBlock());
889:       assertFalse(node2.isSwitch());
890:       assertFalse(node2.isAdd());
891:       assertFalse(node2.isDo());
892:       assertFalse(node2.isCase());
893:       assertFalse(node2.isNew());
894:       assertFalse(node2.isName());
895:       assertFalse(node2.isStringKey());
896:       assertFalse(node2.isNull());
897:       assertFalse(node2.isOr());
898:       assertFalse(node2.isAssignAdd());
899:       assertFalse(node2.isParamList());
900:       assertFalse(node2.isLabelName());
901:       assertFalse(node2.isVar());
902:       assertEquals(0, node2.getChildCount());
903:       assertFalse(node2.isLabel());
904:       assertFalse(iterable0.contains(node0));
905:       assertFalse(node0.equals((Object)node1));
906:       assertFalse(node0.equals((Object)node2));
907:       assertFalse(node2.equals((Object)node1));
908:       assertFalse(node2.equals((Object)node0));
909:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
910:       assertEquals(43, Node.IS_CONSTANT_NAME);
911:       assertEquals(53, Node.INPUT_ID);
912:       assertEquals(55, Node.INFERRED_FUNCTION);
913:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
914:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
915:       assertEquals(36, Node.QUOTED_PROP);
916:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
917:       assertEquals(56, Node.CHANGE_TIME);
918:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
919:       assertEquals(32, Node.INCRDECR_PROP);
920:       assertEquals(48, Node.DIRECTIVES);
921:       assertEquals(37, Node.OPT_ARG_NAME);
922:       assertEquals(12, Node.COLUMN_BITS);
923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
924:       assertEquals(4095, Node.COLUMN_MASK);
925:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
926:       assertEquals(54, Node.SLASH_V);
927:       assertEquals(57, Node.LAST_PROP);
928:       assertEquals(49, Node.DIRECT_EVAL);
929:       assertEquals(15, Node.NO_SIDE_EFFECTS);
930:       assertEquals(1, Node.DECR_FLAG);
931:       assertEquals(57, Node.REFLECTED_OBJECT);
932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
933:       assertEquals(52, Node.LENGTH);
934:       assertEquals(46, Node.IS_NAMESPACE);
935:       assertEquals(50, Node.FREE_CALL);
936:       assertEquals(51, Node.STATIC_SOURCE_FILE);
937:       assertEquals(2, Node.POST_FLAG);
938:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
939:       assertEquals(8, Node.FLAG_NO_THROWS);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(29, Node.JSDOC_INFO_PROP);
942:       assertEquals(40, Node.ORIGINALNAME_PROP);
943:       assertEquals(30, Node.VAR_ARGS_NAME);
944:       assertEquals(47, Node.IS_DISPATCHER);
945:       assertEquals(53, Node.INPUT_ID);
946:       assertEquals(36, Node.QUOTED_PROP);
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
949:       assertEquals(47, Node.IS_DISPATCHER);
950:       assertEquals(2, Node.POST_FLAG);
951:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
952:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
953:       assertEquals(40, Node.ORIGINALNAME_PROP);
954:       assertEquals(50, Node.FREE_CALL);
955:       assertEquals(51, Node.STATIC_SOURCE_FILE);
956:       assertEquals(46, Node.IS_NAMESPACE);
957:       assertEquals(43, Node.IS_CONSTANT_NAME);
958:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
959:       assertEquals(54, Node.SLASH_V);
960:       assertEquals(15, Node.NO_SIDE_EFFECTS);
961:       assertEquals(52, Node.LENGTH);
962:       assertEquals(1, Node.DECR_FLAG);
963:       assertEquals(30, Node.VAR_ARGS_NAME);
964:       assertEquals(57, Node.LAST_PROP);
965:       assertEquals(32, Node.INCRDECR_PROP);
966:       assertEquals(12, Node.COLUMN_BITS);
967:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
968:       assertEquals(48, Node.DIRECTIVES);
969:       assertEquals(8, Node.FLAG_NO_THROWS);
970:       assertEquals(39, Node.EMPTY_BLOCK);
971:       assertEquals(37, Node.OPT_ARG_NAME);
972:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
973:       assertEquals(55, Node.INFERRED_FUNCTION);
974:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
975:       assertEquals(29, Node.JSDOC_INFO_PROP);
976:       assertEquals(4095, Node.COLUMN_MASK);
977:       assertEquals(49, Node.DIRECT_EVAL);
978:       assertEquals(57, Node.REFLECTED_OBJECT);
979:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
980:       assertEquals(56, Node.CHANGE_TIME);
981:       assertNotSame(node0, node2);
982:       assertNotSame(node2, node0);
983:       assertNotNull(iterable0);
984:       
985:       int int0 = node2.getIntProp(33);
986:       assertEquals(0, int0);
987:       assertFalse(node0.isFunction());
988:       assertFalse(node0.isRegExp());
989:       assertFalse(node0.isTrue());
990:       assertFalse(node0.isVoid());
991:       assertFalse(node0.isDebugger());
992:       assertFalse(node0.isTry());
993:       assertFalse(node0.isDefaultCase());
994:       assertFalse(node0.isCatch());
995:       assertEquals(0, node0.getChildCount());
996:       assertFalse(node0.isArrayLit());
997:       assertFalse(node0.isSetterDef());
998:       assertFalse(node0.isNE());
999:       assertFalse(node0.isNull());
1000:       assertFalse(node0.isName());
1001:       assertFalse(node0.isDelProp());
1002:       assertFalse(node0.isIf());
1003:       assertFalse(node0.isEmpty());
1004:       assertFalse(node0.isAdd());
1005:       assertFalse(node0.isIn());
1006:       assertFalse(node0.isSwitch());
1007:       assertEquals((-1), node0.getCharno());
1008:       assertFalse(node0.isNew());
1009:       assertEquals(39, node0.getType());
1010:       assertFalse(node0.isDo());
1011:       assertFalse(node0.isBlock());
1012:       assertFalse(node0.hasMoreThanOneChild());
1013:       assertFalse(node0.isVar());
1014:       assertFalse(node0.isHook());
1015:       assertEquals((-1), node0.getLineno());
1016:       assertFalse(node0.isThis());
1017:       assertFalse(node0.isLabelName());
1018:       assertFalse(node0.isFor());
1019:       assertFalse(node0.isStringKey());
1020:       assertFalse(node0.isParamList());
1021:       assertFalse(node0.isCase());
1022:       assertFalse(node0.hasOneChild());
1023:       assertFalse(node0.isGetterDef());
1024:       assertFalse(node0.isScript());
1025:       assertFalse(node0.isExprResult());
1026:       assertFalse(node0.isAnd());
1027:       assertFalse(node0.isCast());
1028:       assertFalse(node0.isWith());
1029:       assertFalse(node0.isAssign());
1030:       assertFalse(node0.isGetElem());
1031:       assertFalse(node0.isInstanceOf());
1032:       assertFalse(node0.isBreak());
1033:       assertFalse(node0.isLabel());
1034:       assertFalse(node0.isAssignAdd());
1035:       assertFalse(node0.isThrow());
1036:       assertFalse(node0.isOr());
1037:       assertFalse(node0.isInc());
1038:       assertFalse(node0.isWhile());
1039:       assertFalse(node0.isCall());
1040:       assertFalse(node0.isFalse());
1041:       assertFalse(node0.isContinue());
1042:       assertFalse(node0.isTypeOf());
1043:       assertFalse(node0.isGetProp());
1044:       assertFalse(node0.isDec());
1045:       assertFalse(node0.hasChildren());
1046:       assertEquals((-1), node0.getSourcePosition());
1047:       assertFalse(node0.isComma());
1048:       assertTrue(node0.isNumber());
1049:       assertFalse(node0.isReturn());
1050:       assertFalse(node0.isObjectLit());
1051:       assertFalse(node0.isNot());
1052:       assertFalse(node0.isString());
1053:       assertFalse(node2.isExprResult());
1054:       assertFalse(node2.isScript());
1055:       assertFalse(node2.hasOneChild());
1056:       assertFalse(node2.isAnd());
1057:       assertFalse(node2.isObjectLit());
1058:       assertFalse(node2.isNot());
1059:       assertEquals((-1), node2.getSourcePosition());
1060:       assertFalse(node2.isGetProp());
1061:       assertFalse(node2.isThis());
1062:       assertFalse(node2.isBreak());
1063:       assertEquals((-1), node2.getLineno());
1064:       assertFalse(node2.isGetElem());
1065:       assertFalse(node2.hasMoreThanOneChild());
1066:       assertFalse(node2.isInstanceOf());
1067:       assertFalse(node2.isWhile());
1068:       assertFalse(node2.hasChildren());
1069:       assertFalse(node2.isWith());
1070:       assertFalse(node2.isHook());
1071:       assertFalse(node2.isReturn());
1072:       assertFalse(node2.isTypeOf());
1073:       assertEquals(39, node2.getType());
1074:       assertFalse(node2.isAssign());
1075:       assertFalse(node2.isDec());
1076:       assertFalse(node2.isComma());
1077:       assertFalse(node2.isInc());
1078:       assertFalse(node2.isString());
1079:       assertFalse(node2.isIn());
1080:       assertFalse(node2.isSetterDef());
1081:       assertFalse(node2.isThrow());
1082:       assertFalse(node2.isContinue());
1083:       assertFalse(node2.isFalse());
1084:       assertFalse(node2.isCast());
1085:       assertFalse(node2.isDebugger());
1086:       assertFalse(node2.isVoid());
1087:       assertFalse(node2.isFunction());
1088:       assertFalse(node2.isTrue());
1089:       assertFalse(node2.isDefaultCase());
1090:       assertFalse(node2.isArrayLit());
1091:       assertFalse(node2.isTry());
1092:       assertFalse(node2.isEmpty());
1093:       assertFalse(node2.isGetterDef());
1094:       assertFalse(node2.isNE());
1095:       assertFalse(node2.isIf());
1096:       assertFalse(node2.isDelProp());
1097:       assertTrue(node2.isNumber());
1098:       assertFalse(node2.isCall());
1099:       assertFalse(node2.isFor());
1100:       assertFalse(node2.isCatch());
1101:       assertFalse(node2.isRegExp());
1102:       assertEquals((-1), node2.getCharno());
1103:       assertFalse(node2.isBlock());
1104:       assertFalse(node2.isSwitch());
1105:       assertFalse(node2.isAdd());
1106:       assertFalse(node2.isDo());
1107:       assertFalse(node2.isCase());
1108:       assertFalse(node2.isNew());
1109:       assertFalse(node2.isName());
1110:       assertFalse(node2.isStringKey());
1111:       assertFalse(node2.isNull());
1112:       assertFalse(node2.isOr());
1113:       assertFalse(node2.isAssignAdd());
1114:       assertFalse(node2.isParamList());
1115:       assertFalse(node2.isLabelName());
1116:       assertFalse(node2.isVar());
1117:       assertEquals(0, node2.getChildCount());
1118:       assertFalse(node2.isLabel());
1119:       assertFalse(node0.equals((Object)node1));
1120:       assertFalse(node0.equals((Object)node2));
1121:       assertFalse(node2.equals((Object)node1));
1122:       assertFalse(node2.equals((Object)node0));
1123:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1124:       assertEquals(43, Node.IS_CONSTANT_NAME);
1125:       assertEquals(53, Node.INPUT_ID);
1126:       assertEquals(55, Node.INFERRED_FUNCTION);
1127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1128:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1129:       assertEquals(36, Node.QUOTED_PROP);
1130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1131:       assertEquals(56, Node.CHANGE_TIME);
1132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1133:       assertEquals(32, Node.INCRDECR_PROP);
1134:       assertEquals(48, Node.DIRECTIVES);
1135:       assertEquals(37, Node.OPT_ARG_NAME);
1136:       assertEquals(12, Node.COLUMN_BITS);
1137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1138:       assertEquals(4095, Node.COLUMN_MASK);
1139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1140:       assertEquals(54, Node.SLASH_V);
1141:       assertEquals(57, Node.LAST_PROP);
1142:       assertEquals(49, Node.DIRECT_EVAL);
1143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1144:       assertEquals(1, Node.DECR_FLAG);
1145:       assertEquals(57, Node.REFLECTED_OBJECT);
1146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1147:       assertEquals(52, Node.LENGTH);
1148:       assertEquals(46, Node.IS_NAMESPACE);
1149:       assertEquals(50, Node.FREE_CALL);
1150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1151:       assertEquals(2, Node.POST_FLAG);
1152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1153:       assertEquals(8, Node.FLAG_NO_THROWS);
1154:       assertEquals(39, Node.EMPTY_BLOCK);
1155:       assertEquals(29, Node.JSDOC_INFO_PROP);
1156:       assertEquals(40, Node.ORIGINALNAME_PROP);
1157:       assertEquals(30, Node.VAR_ARGS_NAME);
1158:       assertEquals(47, Node.IS_DISPATCHER);
1159:       assertEquals(53, Node.INPUT_ID);
1160:       assertEquals(36, Node.QUOTED_PROP);
1161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1162:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1163:       assertEquals(47, Node.IS_DISPATCHER);
1164:       assertEquals(2, Node.POST_FLAG);
1165:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1166:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1167:       assertEquals(40, Node.ORIGINALNAME_PROP);
1168:       assertEquals(50, Node.FREE_CALL);
1169:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1170:       assertEquals(46, Node.IS_NAMESPACE);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1173:       assertEquals(54, Node.SLASH_V);
1174:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1175:       assertEquals(52, Node.LENGTH);
1176:       assertEquals(1, Node.DECR_FLAG);
1177:       assertEquals(30, Node.VAR_ARGS_NAME);
1178:       assertEquals(57, Node.LAST_PROP);
1179:       assertEquals(32, Node.INCRDECR_PROP);
1180:       assertEquals(12, Node.COLUMN_BITS);
1181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1182:       assertEquals(48, Node.DIRECTIVES);
1183:       assertEquals(8, Node.FLAG_NO_THROWS);
1184:       assertEquals(39, Node.EMPTY_BLOCK);
1185:       assertEquals(37, Node.OPT_ARG_NAME);
1186:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1187:       assertEquals(55, Node.INFERRED_FUNCTION);
1188:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1189:       assertEquals(29, Node.JSDOC_INFO_PROP);
1190:       assertEquals(4095, Node.COLUMN_MASK);
1191:       assertEquals(49, Node.DIRECT_EVAL);
1192:       assertEquals(57, Node.REFLECTED_OBJECT);
1193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1194:       assertEquals(56, Node.CHANGE_TIME);
1195:       assertNotSame(node0, node2);
1196:       assertNotSame(node2, node0);
1197:       
1198:       Node node3 = Node.newString(46, "7s", (-1598), 29);
1199:       assertFalse(node3.isString());
1200:       assertFalse(node3.isSwitch());
1201:       assertFalse(node3.isCase());
1202:       assertFalse(node3.isInc());
1203:       assertFalse(node3.isIn());
1204:       assertEquals((-1), node3.getCharno());
1205:       assertFalse(node3.isNE());
1206:       assertFalse(node3.isComma());
1207:       assertFalse(node3.isGetterDef());
1208:       assertFalse(node3.isIf());
1209:       assertFalse(node3.isDelProp());
1210:       assertFalse(node3.isBreak());
1211:       assertFalse(node3.isGetProp());
1212:       assertFalse(node3.isInstanceOf());
1213:       assertFalse(node3.isFor());
1214:       assertFalse(node3.isHook());
1215:       assertFalse(node3.isThis());
1216:       assertFalse(node3.isScript());
1217:       assertFalse(node3.isVoid());
1218:       assertFalse(node3.isDefaultCase());
1219:       assertFalse(node3.isTry());
1220:       assertFalse(node3.isExprResult());
1221:       assertFalse(node3.isArrayLit());
1222:       assertFalse(node3.isTrue());
1223:       assertFalse(node3.isParamList());
1224:       assertFalse(node3.isLabelName());
1225:       assertFalse(node3.isEmpty());
1226:       assertEquals(46, node3.getType());
1227:       assertFalse(node3.isVar());
1228:       assertEquals(0, node3.getChildCount());
1229:       assertFalse(node3.isLabel());
1230:       assertFalse(node3.isAssignAdd());
1231:       assertFalse(node3.isDo());
1232:       assertFalse(node3.isAdd());
1233:       assertFalse(node3.isNew());
1234:       assertFalse(node3.isOr());
1235:       assertFalse(node3.isStringKey());
1236:       assertFalse(node3.isTypeOf());
1237:       assertFalse(node3.isNull());
1238:       assertEquals((-1), node3.getSourcePosition());
1239:       assertFalse(node3.isDec());
1240:       assertFalse(node3.isNumber());
1241:       assertFalse(node3.isName());
1242:       assertEquals((-1), node3.getLineno());
1243:       assertFalse(node3.isCall());
1244:       assertFalse(node3.isGetElem());
1245:       assertFalse(node3.hasOneChild());
1246:       assertFalse(node3.isCatch());
1247:       assertFalse(node3.hasMoreThanOneChild());
1248:       assertFalse(node3.isAssign());
1249:       assertFalse(node3.isWhile());
1250:       assertFalse(node3.hasChildren());
1251:       assertFalse(node3.isReturn());
1252:       assertFalse(node3.isBlock());
1253:       assertFalse(node3.isRegExp());
1254:       assertFalse(node3.isFunction());
1255:       assertFalse(node3.isWith());
1256:       assertFalse(node3.isAnd());
1257:       assertFalse(node3.isObjectLit());
1258:       assertFalse(node3.isNot());
1259:       assertFalse(node3.isDebugger());
1260:       assertFalse(node3.isSetterDef());
1261:       assertFalse(node3.isCast());
1262:       assertFalse(node3.isContinue());
1263:       assertFalse(node3.isFalse());
1264:       assertFalse(node3.isThrow());
1265:       assertFalse(node3.equals((Object)node1));
1266:       assertFalse(node3.equals((Object)node2));
1267:       assertFalse(node3.equals((Object)node0));
1268:       assertEquals(54, Node.SLASH_V);
1269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1271:       assertEquals(30, Node.VAR_ARGS_NAME);
1272:       assertEquals(52, Node.LENGTH);
1273:       assertEquals(12, Node.COLUMN_BITS);
1274:       assertEquals(1, Node.DECR_FLAG);
1275:       assertEquals(57, Node.LAST_PROP);
1276:       assertEquals(32, Node.INCRDECR_PROP);
1277:       assertEquals(2, Node.POST_FLAG);
1278:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1279:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1280:       assertEquals(47, Node.IS_DISPATCHER);
1281:       assertEquals(50, Node.FREE_CALL);
1282:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1283:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1284:       assertEquals(46, Node.IS_NAMESPACE);
1285:       assertEquals(40, Node.ORIGINALNAME_PROP);
1286:       assertEquals(43, Node.IS_CONSTANT_NAME);
1287:       assertEquals(36, Node.QUOTED_PROP);
1288:       assertEquals(53, Node.INPUT_ID);
1289:       assertEquals(55, Node.INFERRED_FUNCTION);
1290:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1291:       assertEquals(37, Node.OPT_ARG_NAME);
1292:       assertEquals(56, Node.CHANGE_TIME);
1293:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1294:       assertEquals(39, Node.EMPTY_BLOCK);
1295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1296:       assertEquals(29, Node.JSDOC_INFO_PROP);
1297:       assertEquals(8, Node.FLAG_NO_THROWS);
1298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1299:       assertEquals(4095, Node.COLUMN_MASK);
1300:       assertEquals(57, Node.REFLECTED_OBJECT);
1301:       assertEquals(49, Node.DIRECT_EVAL);
1302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1303:       assertEquals(48, Node.DIRECTIVES);
1304:       assertNotNull(node3);
1305:       
1306:       int int1 = node2.getLineno();
1307:       assertEquals((-1), int1);
1308:       assertFalse(node0.isFunction());
1309:       assertFalse(node0.isRegExp());
1310:       assertFalse(node0.isTrue());
1311:       assertFalse(node0.isVoid());
1312:       assertFalse(node0.isDebugger());
1313:       assertFalse(node0.isTry());
1314:       assertFalse(node0.isDefaultCase());
1315:       assertFalse(node0.isCatch());
1316:       assertEquals(0, node0.getChildCount());
1317:       assertFalse(node0.isArrayLit());
1318:       assertFalse(node0.isSetterDef());
1319:       assertFalse(node0.isNE());
1320:       assertFalse(node0.isNull());
1321:       assertFalse(node0.isName());
1322:       assertFalse(node0.isDelProp());
1323:       assertFalse(node0.isIf());
1324:       assertFalse(node0.isEmpty());
1325:       assertFalse(node0.isAdd());
1326:       assertFalse(node0.isIn());
1327:       assertFalse(node0.isSwitch());
1328:       assertEquals((-1), node0.getCharno());
1329:       assertFalse(node0.isNew());
1330:       assertEquals(39, node0.getType());
1331:       assertFalse(node0.isDo());
1332:       assertFalse(node0.isBlock());
1333:       assertFalse(node0.hasMoreThanOneChild());
1334:       assertFalse(node0.isVar());
1335:       assertFalse(node0.isHook());
1336:       assertEquals((-1), node0.getLineno());
1337:       assertFalse(node0.isThis());
1338:       assertFalse(node0.isLabelName());
1339:       assertFalse(node0.isFor());
1340:       assertFalse(node0.isStringKey());
1341:       assertFalse(node0.isParamList());
1342:       assertFalse(node0.isCase());
1343:       assertFalse(node0.hasOneChild());
1344:       assertFalse(node0.isGetterDef());
1345:       assertFalse(node0.isScript());
1346:       assertFalse(node0.isExprResult());
1347:       assertFalse(node0.isAnd());
1348:       assertFalse(node0.isCast());
1349:       assertFalse(node0.isWith());
1350:       assertFalse(node0.isAssign());
1351:       assertFalse(node0.isGetElem());
1352:       assertFalse(node0.isInstanceOf());
1353:       assertFalse(node0.isBreak());
1354:       assertFalse(node0.isLabel());
1355:       assertFalse(node0.isAssignAdd());
1356:       assertFalse(node0.isThrow());
1357:       assertFalse(node0.isOr());
1358:       assertFalse(node0.isInc());
1359:       assertFalse(node0.isWhile());
1360:       assertFalse(node0.isCall());
1361:       assertFalse(node0.isFalse());
1362:       assertFalse(node0.isContinue());
1363:       assertFalse(node0.isTypeOf());
1364:       assertFalse(node0.isGetProp());
1365:       assertFalse(node0.isDec());
1366:       assertFalse(node0.hasChildren());
1367:       assertEquals((-1), node0.getSourcePosition());
1368:       assertFalse(node0.isComma());
1369:       assertTrue(node0.isNumber());
1370:       assertFalse(node0.isReturn());
1371:       assertFalse(node0.isObjectLit());
1372:       assertFalse(node0.isNot());
1373:       assertFalse(node0.isString());
1374:       assertFalse(node2.isExprResult());
1375:       assertFalse(node2.isScript());
1376:       assertFalse(node2.hasOneChild());
1377:       assertFalse(node2.isAnd());
1378:       assertFalse(node2.isObjectLit());
1379:       assertFalse(node2.isNot());
1380:       assertEquals((-1), node2.getSourcePosition());
1381:       assertFalse(node2.isGetProp());
1382:       assertFalse(node2.isThis());
1383:       assertFalse(node2.isBreak());
1384:       assertEquals((-1), node2.getLineno());
1385:       assertFalse(node2.isGetElem());
1386:       assertFalse(node2.hasMoreThanOneChild());
1387:       assertFalse(node2.isInstanceOf());
1388:       assertFalse(node2.isWhile());
1389:       assertFalse(node2.hasChildren());
1390:       assertFalse(node2.isWith());
1391:       assertFalse(node2.isHook());
1392:       assertFalse(node2.isReturn());
1393:       assertFalse(node2.isTypeOf());
1394:       assertEquals(39, node2.getType());
1395:       assertFalse(node2.isAssign());
1396:       assertFalse(node2.isDec());
1397:       assertFalse(node2.isComma());
1398:       assertFalse(node2.isInc());
1399:       assertFalse(node2.isString());
1400:       assertFalse(node2.isIn());
1401:       assertFalse(node2.isSetterDef());
1402:       assertFalse(node2.isThrow());
1403:       assertFalse(node2.isContinue());
1404:       assertFalse(node2.isFalse());
1405:       assertFalse(node2.isCast());
1406:       assertFalse(node2.isDebugger());
1407:       assertFalse(node2.isVoid());
1408:       assertFalse(node2.isFunction());
1409:       assertFalse(node2.isTrue());
1410:       assertFalse(node2.isDefaultCase());
1411:       assertFalse(node2.isArrayLit());
1412:       assertFalse(node2.isTry());
1413:       assertFalse(node2.isEmpty());
1414:       assertFalse(node2.isGetterDef());
1415:       assertFalse(node2.isNE());
1416:       assertFalse(node2.isIf());
1417:       assertFalse(node2.isDelProp());
1418:       assertTrue(node2.isNumber());
1419:       assertFalse(node2.isCall());
1420:       assertFalse(node2.isFor());
1421:       assertFalse(node2.isCatch());
1422:       assertFalse(node2.isRegExp());
1423:       assertEquals((-1), node2.getCharno());
1424:       assertFalse(node2.isBlock());
1425:       assertFalse(node2.isSwitch());
1426:       assertFalse(node2.isAdd());
1427:       assertFalse(node2.isDo());
1428:       assertFalse(node2.isCase());
1429:       assertFalse(node2.isNew());
1430:       assertFalse(node2.isName());
1431:       assertFalse(node2.isStringKey());
1432:       assertFalse(node2.isNull());
1433:       assertFalse(node2.isOr());
1434:       assertFalse(node2.isAssignAdd());
1435:       assertFalse(node2.isParamList());
1436:       assertFalse(node2.isLabelName());
1437:       assertFalse(node2.isVar());
1438:       assertEquals(0, node2.getChildCount());
1439:       assertFalse(node2.isLabel());
1440:       assertFalse(node0.equals((Object)node1));
1441:       assertFalse(node0.equals((Object)node3));
1442:       assertFalse(node0.equals((Object)node2));
1443:       assertFalse(node2.equals((Object)node1));
1444:       assertFalse(node2.equals((Object)node0));
1445:       assertFalse(node2.equals((Object)node3));
1446:       assertFalse(int1 == int0);
1447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1448:       assertEquals(43, Node.IS_CONSTANT_NAME);
1449:       assertEquals(53, Node.INPUT_ID);
1450:       assertEquals(55, Node.INFERRED_FUNCTION);
1451:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1453:       assertEquals(36, Node.QUOTED_PROP);
1454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1455:       assertEquals(56, Node.CHANGE_TIME);
1456:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1457:       assertEquals(32, Node.INCRDECR_PROP);
1458:       assertEquals(48, Node.DIRECTIVES);
1459:       assertEquals(37, Node.OPT_ARG_NAME);
1460:       assertEquals(12, Node.COLUMN_BITS);
1461:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1462:       assertEquals(4095, Node.COLUMN_MASK);
1463:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1464:       assertEquals(54, Node.SLASH_V);
1465:       assertEquals(57, Node.LAST_PROP);
1466:       assertEquals(49, Node.DIRECT_EVAL);
1467:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1468:       assertEquals(1, Node.DECR_FLAG);
1469:       assertEquals(57, Node.REFLECTED_OBJECT);
1470:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1471:       assertEquals(52, Node.LENGTH);
1472:       assertEquals(46, Node.IS_NAMESPACE);
1473:       assertEquals(50, Node.FREE_CALL);
1474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1475:       assertEquals(2, Node.POST_FLAG);
1476:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1477:       assertEquals(8, Node.FLAG_NO_THROWS);
1478:       assertEquals(39, Node.EMPTY_BLOCK);
1479:       assertEquals(29, Node.JSDOC_INFO_PROP);
1480:       assertEquals(40, Node.ORIGINALNAME_PROP);
1481:       assertEquals(30, Node.VAR_ARGS_NAME);
1482:       assertEquals(47, Node.IS_DISPATCHER);
1483:       assertEquals(53, Node.INPUT_ID);
1484:       assertEquals(36, Node.QUOTED_PROP);
1485:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1486:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1487:       assertEquals(47, Node.IS_DISPATCHER);
1488:       assertEquals(2, Node.POST_FLAG);
1489:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1491:       assertEquals(40, Node.ORIGINALNAME_PROP);
1492:       assertEquals(50, Node.FREE_CALL);
1493:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1494:       assertEquals(46, Node.IS_NAMESPACE);
1495:       assertEquals(43, Node.IS_CONSTANT_NAME);
1496:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1497:       assertEquals(54, Node.SLASH_V);
1498:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1499:       assertEquals(52, Node.LENGTH);
1500:       assertEquals(1, Node.DECR_FLAG);
1501:       assertEquals(30, Node.VAR_ARGS_NAME);
1502:       assertEquals(57, Node.LAST_PROP);
1503:       assertEquals(32, Node.INCRDECR_PROP);
1504:       assertEquals(12, Node.COLUMN_BITS);
1505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1506:       assertEquals(48, Node.DIRECTIVES);
1507:       assertEquals(8, Node.FLAG_NO_THROWS);
1508:       assertEquals(39, Node.EMPTY_BLOCK);
1509:       assertEquals(37, Node.OPT_ARG_NAME);
1510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1511:       assertEquals(55, Node.INFERRED_FUNCTION);
1512:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1513:       assertEquals(29, Node.JSDOC_INFO_PROP);
1514:       assertEquals(4095, Node.COLUMN_MASK);
1515:       assertEquals(49, Node.DIRECT_EVAL);
1516:       assertEquals(57, Node.REFLECTED_OBJECT);
1517:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1518:       assertEquals(56, Node.CHANGE_TIME);
1519:       assertNotSame(node0, node2);
1520:       assertNotSame(node2, node0);
1521:       
1522:       boolean boolean4 = node3.isHook();
1523:       assertFalse(boolean4);
1524:       assertFalse(node3.isString());
1525:       assertFalse(node3.isSwitch());
1526:       assertFalse(node3.isCase());
1527:       assertFalse(node3.isInc());
1528:       assertFalse(node3.isIn());
1529:       assertEquals((-1), node3.getCharno());
1530:       assertFalse(node3.isNE());
1531:       assertFalse(node3.isComma());
1532:       assertFalse(node3.isGetterDef());
1533:       assertFalse(node3.isIf());
1534:       assertFalse(node3.isDelProp());
1535:       assertFalse(node3.isBreak());
1536:       assertFalse(node3.isGetProp());
1537:       assertFalse(node3.isInstanceOf());
1538:       assertFalse(node3.isFor());
1539:       assertFalse(node3.isHook());
1540:       assertFalse(node3.isThis());
1541:       assertFalse(node3.isScript());
1542:       assertFalse(node3.isVoid());
1543:       assertFalse(node3.isDefaultCase());
1544:       assertFalse(node3.isTry());
1545:       assertFalse(node3.isExprResult());
1546:       assertFalse(node3.isArrayLit());
1547:       assertFalse(node3.isTrue());
1548:       assertFalse(node3.isParamList());
1549:       assertFalse(node3.isLabelName());
1550:       assertFalse(node3.isEmpty());
1551:       assertEquals(46, node3.getType());
1552:       assertFalse(node3.isVar());
1553:       assertEquals(0, node3.getChildCount());
1554:       assertFalse(node3.isLabel());
1555:       assertFalse(node3.isAssignAdd());
1556:       assertFalse(node3.isDo());
1557:       assertFalse(node3.isAdd());
1558:       assertFalse(node3.isNew());
1559:       assertFalse(node3.isOr());
1560:       assertFalse(node3.isStringKey());
1561:       assertFalse(node3.isTypeOf());
1562:       assertFalse(node3.isNull());
1563:       assertEquals((-1), node3.getSourcePosition());
1564:       assertFalse(node3.isDec());
1565:       assertFalse(node3.isNumber());
1566:       assertFalse(node3.isName());
1567:       assertEquals((-1), node3.getLineno());
1568:       assertFalse(node3.isCall());
1569:       assertFalse(node3.isGetElem());
1570:       assertFalse(node3.hasOneChild());
1571:       assertFalse(node3.isCatch());
1572:       assertFalse(node3.hasMoreThanOneChild());
1573:       assertFalse(node3.isAssign());
1574:       assertFalse(node3.isWhile());
1575:       assertFalse(node3.hasChildren());
1576:       assertFalse(node3.isReturn());
1577:       assertFalse(node3.isBlock());
1578:       assertFalse(node3.isRegExp());
1579:       assertFalse(node3.isFunction());
1580:       assertFalse(node3.isWith());
1581:       assertFalse(node3.isAnd());
1582:       assertFalse(node3.isObjectLit());
1583:       assertFalse(node3.isNot());
1584:       assertFalse(node3.isDebugger());
1585:       assertFalse(node3.isSetterDef());
1586:       assertFalse(node3.isCast());
1587:       assertFalse(node3.isContinue());
1588:       assertFalse(node3.isFalse());
1589:       assertFalse(node3.isThrow());
1590:       assertFalse(node3.equals((Object)node1));
1591:       assertFalse(node3.equals((Object)node2));
1592:       assertFalse(node3.equals((Object)node0));
1593:       assertTrue(boolean4 == boolean0);
1594:       assertTrue(boolean4 == boolean1);
1595:       assertTrue(boolean4 == boolean3);
1596:       assertTrue(boolean4 == boolean2);
1597:       assertEquals(54, Node.SLASH_V);
1598:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1600:       assertEquals(30, Node.VAR_ARGS_NAME);
1601:       assertEquals(52, Node.LENGTH);
1602:       assertEquals(12, Node.COLUMN_BITS);
1603:       assertEquals(1, Node.DECR_FLAG);
1604:       assertEquals(57, Node.LAST_PROP);
1605:       assertEquals(32, Node.INCRDECR_PROP);
1606:       assertEquals(2, Node.POST_FLAG);
1607:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1608:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1609:       assertEquals(47, Node.IS_DISPATCHER);
1610:       assertEquals(50, Node.FREE_CALL);
1611:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1612:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1613:       assertEquals(46, Node.IS_NAMESPACE);
1614:       assertEquals(40, Node.ORIGINALNAME_PROP);
1615:       assertEquals(43, Node.IS_CONSTANT_NAME);
1616:       assertEquals(36, Node.QUOTED_PROP);
1617:       assertEquals(53, Node.INPUT_ID);
1618:       assertEquals(55, Node.INFERRED_FUNCTION);
1619:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1620:       assertEquals(37, Node.OPT_ARG_NAME);
1621:       assertEquals(56, Node.CHANGE_TIME);
1622:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1623:       assertEquals(39, Node.EMPTY_BLOCK);
1624:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1625:       assertEquals(29, Node.JSDOC_INFO_PROP);
1626:       assertEquals(8, Node.FLAG_NO_THROWS);
1627:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1628:       assertEquals(4095, Node.COLUMN_MASK);
1629:       assertEquals(57, Node.REFLECTED_OBJECT);
1630:       assertEquals(49, Node.DIRECT_EVAL);
1631:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1632:       assertEquals(48, Node.DIRECTIVES);
1633:   }
1634: }
RegularFileObject[/tmp/EvoSuite_367_1628161387357/com/google/javascript/rhino/Node_367_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_367_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_367_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_367_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:03:07.715 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

Node node0 = Node.newNumber((-1065.94070143));
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node0);

Node node1 = new Node(47, node0, node0, 54, 53);
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertEquals(221237, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertEquals(54, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertEquals(53, node1.getCharno());
assertEquals(47, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node1);

boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

boolean boolean2 = node0.isDelProp();
assertFalse(boolean2);
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean3 = node0.isTry();
assertFalse(boolean3);
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Node node2 = node0.cloneNode();
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertEquals(39, node2.getType());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertTrue(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertNotNull(node2);

Iterable<Node> iterable0 = node2.children();
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertEquals(39, node2.getType());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertTrue(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertNotNull(iterable0);

int int0 = node2.getIntProp(33);
assertEquals(0, int0);
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertEquals(39, node2.getType());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertTrue(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node2);
assertNotSame(node2, node0);

Node node3 = Node.newString(46, "7s", (-1598), 29);
assertFalse(node3.isString());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNE());
assertFalse(node3.isComma());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isExprResult());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertEquals(46, node3.getType());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isName());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node3);

int int1 = node2.getLineno();
assertEquals((-1), int1);
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertEquals(39, node2.getType());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertTrue(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(int1 == int0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node2);
assertNotSame(node2, node0);

boolean boolean4 = node3.isHook();
assertFalse(boolean4);
assertFalse(node3.isString());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNE());
assertFalse(node3.isComma());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isExprResult());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertEquals(46, node3.getType());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isName());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);


[MASTER] 11:03:09.255 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_373_1628161388811/com/google/javascript/rhino/Node_373_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_373_1628161388811/com/google/javascript/rhino/Node_373_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:09.255 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:09.255 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:09.256 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2310
[MASTER] 11:03:09.257 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_373_1628161388811/com/google/javascript/rhino/Node_373_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:08 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_373_tmp__ESTest extends Node_373_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(0, 0, 0);
21:       assertFalse(node0.isWith());
22:       assertFalse(node0.isNot());
23:       assertFalse(node0.isObjectLit());
24:       assertFalse(node0.isExprResult());
25:       assertFalse(node0.isScript());
26:       assertFalse(node0.isInstanceOf());
27:       assertFalse(node0.hasOneChild());
28:       assertFalse(node0.isThis());
29:       assertFalse(node0.hasChildren());
30:       assertFalse(node0.isBreak());
31:       assertFalse(node0.isTypeOf());
32:       assertFalse(node0.isAssign());
33:       assertFalse(node0.isDec());
34:       assertFalse(node0.isComma());
35:       assertFalse(node0.isGetElem());
36:       assertFalse(node0.isOr());
37:       assertEquals(0, node0.getCharno());
38:       assertFalse(node0.isCase());
39:       assertFalse(node0.isDo());
40:       assertFalse(node0.hasMoreThanOneChild());
41:       assertFalse(node0.isAdd());
42:       assertFalse(node0.isHook());
43:       assertFalse(node0.isAssignAdd());
44:       assertFalse(node0.isLabel());
45:       assertFalse(node0.isNew());
46:       assertFalse(node0.isBlock());
47:       assertFalse(node0.isVar());
48:       assertFalse(node0.isGetterDef());
49:       assertFalse(node0.isNumber());
50:       assertFalse(node0.isLabelName());
51:       assertFalse(node0.isArrayLit());
52:       assertFalse(node0.isParamList());
53:       assertFalse(node0.isSwitch());
54:       assertFalse(node0.isStringKey());
55:       assertFalse(node0.isDefaultCase());
56:       assertFalse(node0.isRegExp());
57:       assertFalse(node0.isFunction());
58:       assertFalse(node0.isCatch());
59:       assertFalse(node0.isTry());
60:       assertEquals(0, node0.getChildCount());
61:       assertFalse(node0.isFor());
62:       assertFalse(node0.isDelProp());
63:       assertEquals(0, node0.getSourcePosition());
64:       assertFalse(node0.isIf());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isCall());
67:       assertFalse(node0.isSetterDef());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isTrue());
71:       assertFalse(node0.isVoid());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isString());
75:       assertFalse(node0.isWhile());
76:       assertFalse(node0.isContinue());
77:       assertFalse(node0.isInc());
78:       assertEquals(0, node0.getType());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isThrow());
81:       assertFalse(node0.isFalse());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.isCast());
84:       assertEquals(0, node0.getLineno());
85:       assertFalse(node0.isAnd());
86:       assertFalse(node0.isDebugger());
87:       assertEquals(43, Node.IS_CONSTANT_NAME);
88:       assertEquals(36, Node.QUOTED_PROP);
89:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
90:       assertEquals(4095, Node.COLUMN_MASK);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(48, Node.DIRECTIVES);
93:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(50, Node.FREE_CALL);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(12, Node.COLUMN_BITS);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(1, Node.DECR_FLAG);
100:       assertEquals(15, Node.NO_SIDE_EFFECTS);
101:       assertEquals(57, Node.LAST_PROP);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(30, Node.VAR_ARGS_NAME);
105:       assertEquals(51, Node.STATIC_SOURCE_FILE);
106:       assertEquals(46, Node.IS_NAMESPACE);
107:       assertEquals(57, Node.REFLECTED_OBJECT);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(37, Node.OPT_ARG_NAME);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(47, Node.IS_DISPATCHER);
112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
113:       assertEquals(29, Node.JSDOC_INFO_PROP);
114:       assertEquals(56, Node.CHANGE_TIME);
115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
116:       assertEquals(8, Node.FLAG_NO_THROWS);
117:       assertEquals(2, Node.POST_FLAG);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(53, Node.INPUT_ID);
120:       assertEquals(55, Node.INFERRED_FUNCTION);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       
124:       boolean boolean0 = node0.getBooleanProp(0);
125:       assertFalse(boolean0);
126:       assertFalse(node0.isWith());
127:       assertFalse(node0.isNot());
128:       assertFalse(node0.isObjectLit());
129:       assertFalse(node0.isExprResult());
130:       assertFalse(node0.isScript());
131:       assertFalse(node0.isInstanceOf());
132:       assertFalse(node0.hasOneChild());
133:       assertFalse(node0.isThis());
134:       assertFalse(node0.hasChildren());
135:       assertFalse(node0.isBreak());
136:       assertFalse(node0.isTypeOf());
137:       assertFalse(node0.isAssign());
138:       assertFalse(node0.isDec());
139:       assertFalse(node0.isComma());
140:       assertFalse(node0.isGetElem());
141:       assertFalse(node0.isOr());
142:       assertEquals(0, node0.getCharno());
143:       assertFalse(node0.isCase());
144:       assertFalse(node0.isDo());
145:       assertFalse(node0.hasMoreThanOneChild());
146:       assertFalse(node0.isAdd());
147:       assertFalse(node0.isHook());
148:       assertFalse(node0.isAssignAdd());
149:       assertFalse(node0.isLabel());
150:       assertFalse(node0.isNew());
151:       assertFalse(node0.isBlock());
152:       assertFalse(node0.isVar());
153:       assertFalse(node0.isGetterDef());
154:       assertFalse(node0.isNumber());
155:       assertFalse(node0.isLabelName());
156:       assertFalse(node0.isArrayLit());
157:       assertFalse(node0.isParamList());
158:       assertFalse(node0.isSwitch());
159:       assertFalse(node0.isStringKey());
160:       assertFalse(node0.isDefaultCase());
161:       assertFalse(node0.isRegExp());
162:       assertFalse(node0.isFunction());
163:       assertFalse(node0.isCatch());
164:       assertFalse(node0.isTry());
165:       assertEquals(0, node0.getChildCount());
166:       assertFalse(node0.isFor());
167:       assertFalse(node0.isDelProp());
168:       assertEquals(0, node0.getSourcePosition());
169:       assertFalse(node0.isIf());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isCall());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isEmpty());
174:       assertFalse(node0.isIn());
175:       assertFalse(node0.isTrue());
176:       assertFalse(node0.isVoid());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isString());
180:       assertFalse(node0.isWhile());
181:       assertFalse(node0.isContinue());
182:       assertFalse(node0.isInc());
183:       assertEquals(0, node0.getType());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isThrow());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isGetProp());
188:       assertFalse(node0.isCast());
189:       assertEquals(0, node0.getLineno());
190:       assertFalse(node0.isAnd());
191:       assertFalse(node0.isDebugger());
192:       assertEquals(43, Node.IS_CONSTANT_NAME);
193:       assertEquals(36, Node.QUOTED_PROP);
194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
195:       assertEquals(4095, Node.COLUMN_MASK);
196:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
197:       assertEquals(48, Node.DIRECTIVES);
198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(50, Node.FREE_CALL);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(12, Node.COLUMN_BITS);
203:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
204:       assertEquals(1, Node.DECR_FLAG);
205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
206:       assertEquals(57, Node.LAST_PROP);
207:       assertEquals(54, Node.SLASH_V);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(30, Node.VAR_ARGS_NAME);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(57, Node.REFLECTED_OBJECT);
213:       assertEquals(40, Node.ORIGINALNAME_PROP);
214:       assertEquals(37, Node.OPT_ARG_NAME);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(47, Node.IS_DISPATCHER);
217:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
218:       assertEquals(29, Node.JSDOC_INFO_PROP);
219:       assertEquals(56, Node.CHANGE_TIME);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(2, Node.POST_FLAG);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(53, Node.INPUT_ID);
225:       assertEquals(55, Node.INFERRED_FUNCTION);
226:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
227:       assertEquals(39, Node.EMPTY_BLOCK);
228:       
229:       boolean boolean1 = node0.mayMutateGlobalStateOrThrow();
230:       assertTrue(boolean1);
231:       assertFalse(node0.isWith());
232:       assertFalse(node0.isNot());
233:       assertFalse(node0.isObjectLit());
234:       assertFalse(node0.isExprResult());
235:       assertFalse(node0.isScript());
236:       assertFalse(node0.isInstanceOf());
237:       assertFalse(node0.hasOneChild());
238:       assertFalse(node0.isThis());
239:       assertFalse(node0.hasChildren());
240:       assertFalse(node0.isBreak());
241:       assertFalse(node0.isTypeOf());
242:       assertFalse(node0.isAssign());
243:       assertFalse(node0.isDec());
244:       assertFalse(node0.isComma());
245:       assertFalse(node0.isGetElem());
246:       assertFalse(node0.isOr());
247:       assertEquals(0, node0.getCharno());
248:       assertFalse(node0.isCase());
249:       assertFalse(node0.isDo());
250:       assertFalse(node0.hasMoreThanOneChild());
251:       assertFalse(node0.isAdd());
252:       assertFalse(node0.isHook());
253:       assertFalse(node0.isAssignAdd());
254:       assertFalse(node0.isLabel());
255:       assertFalse(node0.isNew());
256:       assertFalse(node0.isBlock());
257:       assertFalse(node0.isVar());
258:       assertFalse(node0.isGetterDef());
259:       assertFalse(node0.isNumber());
260:       assertFalse(node0.isLabelName());
261:       assertFalse(node0.isArrayLit());
262:       assertFalse(node0.isParamList());
263:       assertFalse(node0.isSwitch());
264:       assertFalse(node0.isStringKey());
265:       assertFalse(node0.isDefaultCase());
266:       assertFalse(node0.isRegExp());
267:       assertFalse(node0.isFunction());
268:       assertFalse(node0.isCatch());
269:       assertFalse(node0.isTry());
270:       assertEquals(0, node0.getChildCount());
271:       assertFalse(node0.isFor());
272:       assertFalse(node0.isDelProp());
273:       assertEquals(0, node0.getSourcePosition());
274:       assertFalse(node0.isIf());
275:       assertFalse(node0.isName());
276:       assertFalse(node0.isCall());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isEmpty());
279:       assertFalse(node0.isIn());
280:       assertFalse(node0.isTrue());
281:       assertFalse(node0.isVoid());
282:       assertFalse(node0.isNull());
283:       assertFalse(node0.isNE());
284:       assertFalse(node0.isString());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isContinue());
287:       assertFalse(node0.isInc());
288:       assertEquals(0, node0.getType());
289:       assertFalse(node0.isReturn());
290:       assertFalse(node0.isThrow());
291:       assertFalse(node0.isFalse());
292:       assertFalse(node0.isGetProp());
293:       assertFalse(node0.isCast());
294:       assertEquals(0, node0.getLineno());
295:       assertFalse(node0.isAnd());
296:       assertFalse(node0.isDebugger());
297:       assertFalse(boolean1 == boolean0);
298:       assertEquals(43, Node.IS_CONSTANT_NAME);
299:       assertEquals(36, Node.QUOTED_PROP);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
303:       assertEquals(48, Node.DIRECTIVES);
304:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
310:       assertEquals(1, Node.DECR_FLAG);
311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
312:       assertEquals(57, Node.LAST_PROP);
313:       assertEquals(54, Node.SLASH_V);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
317:       assertEquals(46, Node.IS_NAMESPACE);
318:       assertEquals(57, Node.REFLECTED_OBJECT);
319:       assertEquals(40, Node.ORIGINALNAME_PROP);
320:       assertEquals(37, Node.OPT_ARG_NAME);
321:       assertEquals(49, Node.DIRECT_EVAL);
322:       assertEquals(47, Node.IS_DISPATCHER);
323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(56, Node.CHANGE_TIME);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(2, Node.POST_FLAG);
329:       assertEquals(52, Node.LENGTH);
330:       assertEquals(53, Node.INPUT_ID);
331:       assertEquals(55, Node.INFERRED_FUNCTION);
332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
333:       assertEquals(39, Node.EMPTY_BLOCK);
334:       
335:       boolean boolean2 = node0.isVarArgs();
336:       assertFalse(boolean2);
337:       assertFalse(node0.isWith());
338:       assertFalse(node0.isNot());
339:       assertFalse(node0.isObjectLit());
340:       assertFalse(node0.isExprResult());
341:       assertFalse(node0.isScript());
342:       assertFalse(node0.isInstanceOf());
343:       assertFalse(node0.hasOneChild());
344:       assertFalse(node0.isThis());
345:       assertFalse(node0.hasChildren());
346:       assertFalse(node0.isBreak());
347:       assertFalse(node0.isTypeOf());
348:       assertFalse(node0.isAssign());
349:       assertFalse(node0.isDec());
350:       assertFalse(node0.isComma());
351:       assertFalse(node0.isGetElem());
352:       assertFalse(node0.isOr());
353:       assertEquals(0, node0.getCharno());
354:       assertFalse(node0.isCase());
355:       assertFalse(node0.isDo());
356:       assertFalse(node0.hasMoreThanOneChild());
357:       assertFalse(node0.isAdd());
358:       assertFalse(node0.isHook());
359:       assertFalse(node0.isAssignAdd());
360:       assertFalse(node0.isLabel());
361:       assertFalse(node0.isNew());
362:       assertFalse(node0.isBlock());
363:       assertFalse(node0.isVar());
364:       assertFalse(node0.isGetterDef());
365:       assertFalse(node0.isNumber());
366:       assertFalse(node0.isLabelName());
367:       assertFalse(node0.isArrayLit());
368:       assertFalse(node0.isParamList());
369:       assertFalse(node0.isSwitch());
370:       assertFalse(node0.isStringKey());
371:       assertFalse(node0.isDefaultCase());
372:       assertFalse(node0.isRegExp());
373:       assertFalse(node0.isFunction());
374:       assertFalse(node0.isCatch());
375:       assertFalse(node0.isTry());
376:       assertEquals(0, node0.getChildCount());
377:       assertFalse(node0.isFor());
378:       assertFalse(node0.isDelProp());
379:       assertEquals(0, node0.getSourcePosition());
380:       assertFalse(node0.isIf());
381:       assertFalse(node0.isName());
382:       assertFalse(node0.isCall());
383:       assertFalse(node0.isSetterDef());
384:       assertFalse(node0.isEmpty());
385:       assertFalse(node0.isIn());
386:       assertFalse(node0.isTrue());
387:       assertFalse(node0.isVoid());
388:       assertFalse(node0.isNull());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isString());
391:       assertFalse(node0.isWhile());
392:       assertFalse(node0.isContinue());
393:       assertFalse(node0.isInc());
394:       assertEquals(0, node0.getType());
395:       assertFalse(node0.isReturn());
396:       assertFalse(node0.isThrow());
397:       assertFalse(node0.isFalse());
398:       assertFalse(node0.isGetProp());
399:       assertFalse(node0.isCast());
400:       assertEquals(0, node0.getLineno());
401:       assertFalse(node0.isAnd());
402:       assertFalse(node0.isDebugger());
403:       assertTrue(boolean2 == boolean0);
404:       assertFalse(boolean2 == boolean1);
405:       assertEquals(43, Node.IS_CONSTANT_NAME);
406:       assertEquals(36, Node.QUOTED_PROP);
407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
408:       assertEquals(4095, Node.COLUMN_MASK);
409:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
410:       assertEquals(48, Node.DIRECTIVES);
411:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
412:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
413:       assertEquals(50, Node.FREE_CALL);
414:       assertEquals(32, Node.INCRDECR_PROP);
415:       assertEquals(12, Node.COLUMN_BITS);
416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
417:       assertEquals(1, Node.DECR_FLAG);
418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
419:       assertEquals(57, Node.LAST_PROP);
420:       assertEquals(54, Node.SLASH_V);
421:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
422:       assertEquals(30, Node.VAR_ARGS_NAME);
423:       assertEquals(51, Node.STATIC_SOURCE_FILE);
424:       assertEquals(46, Node.IS_NAMESPACE);
425:       assertEquals(57, Node.REFLECTED_OBJECT);
426:       assertEquals(40, Node.ORIGINALNAME_PROP);
427:       assertEquals(37, Node.OPT_ARG_NAME);
428:       assertEquals(49, Node.DIRECT_EVAL);
429:       assertEquals(47, Node.IS_DISPATCHER);
430:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
431:       assertEquals(29, Node.JSDOC_INFO_PROP);
432:       assertEquals(56, Node.CHANGE_TIME);
433:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
434:       assertEquals(8, Node.FLAG_NO_THROWS);
435:       assertEquals(2, Node.POST_FLAG);
436:       assertEquals(52, Node.LENGTH);
437:       assertEquals(53, Node.INPUT_ID);
438:       assertEquals(55, Node.INFERRED_FUNCTION);
439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
440:       assertEquals(39, Node.EMPTY_BLOCK);
441:       
442:       Node node1 = Node.newString("empty_block");
443:       assertTrue(node1.isString());
444:       assertFalse(node1.isAdd());
445:       assertFalse(node1.isBlock());
446:       assertFalse(node1.isDo());
447:       assertFalse(node1.isNew());
448:       assertFalse(node1.isCall());
449:       assertFalse(node1.hasMoreThanOneChild());
450:       assertFalse(node1.isWhile());
451:       assertFalse(node1.isContinue());
452:       assertFalse(node1.isVar());
453:       assertFalse(node1.isReturn());
454:       assertFalse(node1.isLabel());
455:       assertFalse(node1.isParamList());
456:       assertFalse(node1.isLabelName());
457:       assertFalse(node1.isStringKey());
458:       assertFalse(node1.isNumber());
459:       assertEquals((-1), node1.getSourcePosition());
460:       assertFalse(node1.isDebugger());
461:       assertFalse(node1.isTrue());
462:       assertFalse(node1.isVoid());
463:       assertFalse(node1.isExprResult());
464:       assertFalse(node1.isDefaultCase());
465:       assertFalse(node1.isArrayLit());
466:       assertFalse(node1.isGetElem());
467:       assertEquals(0, node1.getChildCount());
468:       assertFalse(node1.isDec());
469:       assertFalse(node1.hasChildren());
470:       assertFalse(node1.isTypeOf());
471:       assertFalse(node1.isAssign());
472:       assertFalse(node1.isAssignAdd());
473:       assertFalse(node1.isBreak());
474:       assertFalse(node1.isDelProp());
475:       assertFalse(node1.isName());
476:       assertFalse(node1.isEmpty());
477:       assertFalse(node1.isNull());
478:       assertFalse(node1.isOr());
479:       assertFalse(node1.isInc());
480:       assertFalse(node1.isSwitch());
481:       assertFalse(node1.isCase());
482:       assertFalse(node1.isThrow());
483:       assertFalse(node1.isFalse());
484:       assertFalse(node1.isHook());
485:       assertFalse(node1.isThis());
486:       assertFalse(node1.isComma());
487:       assertFalse(node1.isGetProp());
488:       assertFalse(node1.isObjectLit());
489:       assertFalse(node1.isAnd());
490:       assertFalse(node1.isGetterDef());
491:       assertFalse(node1.isNot());
492:       assertEquals((-1), node1.getCharno());
493:       assertFalse(node1.isFunction());
494:       assertFalse(node1.isTry());
495:       assertFalse(node1.hasOneChild());
496:       assertFalse(node1.isScript());
497:       assertFalse(node1.isFor());
498:       assertEquals(40, node1.getType());
499:       assertFalse(node1.isWith());
500:       assertFalse(node1.isCatch());
501:       assertFalse(node1.isCast());
502:       assertFalse(node1.isRegExp());
503:       assertFalse(node1.isNE());
504:       assertFalse(node1.isIf());
505:       assertFalse(node1.isInstanceOf());
506:       assertFalse(node1.isSetterDef());
507:       assertEquals((-1), node1.getLineno());
508:       assertFalse(node1.isIn());
509:       assertFalse(node1.equals((Object)node0));
510:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
511:       assertEquals(54, Node.SLASH_V);
512:       assertEquals(15, Node.NO_SIDE_EFFECTS);
513:       assertEquals(52, Node.LENGTH);
514:       assertEquals(40, Node.ORIGINALNAME_PROP);
515:       assertEquals(49, Node.DIRECT_EVAL);
516:       assertEquals(50, Node.FREE_CALL);
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(57, Node.REFLECTED_OBJECT);
519:       assertEquals(46, Node.IS_NAMESPACE);
520:       assertEquals(39, Node.EMPTY_BLOCK);
521:       assertEquals(2, Node.POST_FLAG);
522:       assertEquals(55, Node.INFERRED_FUNCTION);
523:       assertEquals(8, Node.FLAG_NO_THROWS);
524:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
525:       assertEquals(29, Node.JSDOC_INFO_PROP);
526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
527:       assertEquals(30, Node.VAR_ARGS_NAME);
528:       assertEquals(57, Node.LAST_PROP);
529:       assertEquals(47, Node.IS_DISPATCHER);
530:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
531:       assertEquals(53, Node.INPUT_ID);
532:       assertEquals(36, Node.QUOTED_PROP);
533:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
534:       assertEquals(43, Node.IS_CONSTANT_NAME);
535:       assertEquals(56, Node.CHANGE_TIME);
536:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
537:       assertEquals(48, Node.DIRECTIVES);
538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
539:       assertEquals(37, Node.OPT_ARG_NAME);
540:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
541:       assertEquals(4095, Node.COLUMN_MASK);
542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
543:       assertEquals(1, Node.DECR_FLAG);
544:       assertEquals(12, Node.COLUMN_BITS);
545:       assertEquals(32, Node.INCRDECR_PROP);
546:       
547:       boolean boolean3 = node1.isQuotedString();
548:       assertFalse(boolean3);
549:       assertTrue(node1.isString());
550:       assertFalse(node1.isAdd());
551:       assertFalse(node1.isBlock());
552:       assertFalse(node1.isDo());
553:       assertFalse(node1.isNew());
554:       assertFalse(node1.isCall());
555:       assertFalse(node1.hasMoreThanOneChild());
556:       assertFalse(node1.isWhile());
557:       assertFalse(node1.isContinue());
558:       assertFalse(node1.isVar());
559:       assertFalse(node1.isReturn());
560:       assertFalse(node1.isLabel());
561:       assertFalse(node1.isParamList());
562:       assertFalse(node1.isLabelName());
563:       assertFalse(node1.isStringKey());
564:       assertFalse(node1.isNumber());
565:       assertEquals((-1), node1.getSourcePosition());
566:       assertFalse(node1.isDebugger());
567:       assertFalse(node1.isTrue());
568:       assertFalse(node1.isVoid());
569:       assertFalse(node1.isExprResult());
570:       assertFalse(node1.isDefaultCase());
571:       assertFalse(node1.isArrayLit());
572:       assertFalse(node1.isGetElem());
573:       assertEquals(0, node1.getChildCount());
574:       assertFalse(node1.isDec());
575:       assertFalse(node1.hasChildren());
576:       assertFalse(node1.isTypeOf());
577:       assertFalse(node1.isAssign());
578:       assertFalse(node1.isAssignAdd());
579:       assertFalse(node1.isBreak());
580:       assertFalse(node1.isDelProp());
581:       assertFalse(node1.isName());
582:       assertFalse(node1.isEmpty());
583:       assertFalse(node1.isNull());
584:       assertFalse(node1.isOr());
585:       assertFalse(node1.isInc());
586:       assertFalse(node1.isSwitch());
587:       assertFalse(node1.isCase());
588:       assertFalse(node1.isThrow());
589:       assertFalse(node1.isFalse());
590:       assertFalse(node1.isHook());
591:       assertFalse(node1.isThis());
592:       assertFalse(node1.isComma());
593:       assertFalse(node1.isGetProp());
594:       assertFalse(node1.isObjectLit());
595:       assertFalse(node1.isAnd());
596:       assertFalse(node1.isGetterDef());
597:       assertFalse(node1.isNot());
598:       assertEquals((-1), node1.getCharno());
599:       assertFalse(node1.isFunction());
600:       assertFalse(node1.isTry());
601:       assertFalse(node1.hasOneChild());
602:       assertFalse(node1.isScript());
603:       assertFalse(node1.isFor());
604:       assertEquals(40, node1.getType());
605:       assertFalse(node1.isWith());
606:       assertFalse(node1.isCatch());
607:       assertFalse(node1.isCast());
608:       assertFalse(node1.isRegExp());
609:       assertFalse(node1.isNE());
610:       assertFalse(node1.isIf());
611:       assertFalse(node1.isInstanceOf());
612:       assertFalse(node1.isSetterDef());
613:       assertEquals((-1), node1.getLineno());
614:       assertFalse(node1.isIn());
615:       assertFalse(node1.equals((Object)node0));
616:       assertFalse(boolean3 == boolean1);
617:       assertTrue(boolean3 == boolean0);
618:       assertTrue(boolean3 == boolean2);
619:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
620:       assertEquals(54, Node.SLASH_V);
621:       assertEquals(15, Node.NO_SIDE_EFFECTS);
622:       assertEquals(52, Node.LENGTH);
623:       assertEquals(40, Node.ORIGINALNAME_PROP);
624:       assertEquals(49, Node.DIRECT_EVAL);
625:       assertEquals(50, Node.FREE_CALL);
626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
627:       assertEquals(57, Node.REFLECTED_OBJECT);
628:       assertEquals(46, Node.IS_NAMESPACE);
629:       assertEquals(39, Node.EMPTY_BLOCK);
630:       assertEquals(2, Node.POST_FLAG);
631:       assertEquals(55, Node.INFERRED_FUNCTION);
632:       assertEquals(8, Node.FLAG_NO_THROWS);
633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
634:       assertEquals(29, Node.JSDOC_INFO_PROP);
635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
636:       assertEquals(30, Node.VAR_ARGS_NAME);
637:       assertEquals(57, Node.LAST_PROP);
638:       assertEquals(47, Node.IS_DISPATCHER);
639:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(36, Node.QUOTED_PROP);
642:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
643:       assertEquals(43, Node.IS_CONSTANT_NAME);
644:       assertEquals(56, Node.CHANGE_TIME);
645:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
646:       assertEquals(48, Node.DIRECTIVES);
647:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
648:       assertEquals(37, Node.OPT_ARG_NAME);
649:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
650:       assertEquals(4095, Node.COLUMN_MASK);
651:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
652:       assertEquals(1, Node.DECR_FLAG);
653:       assertEquals(12, Node.COLUMN_BITS);
654:       assertEquals(32, Node.INCRDECR_PROP);
655:       
656:       boolean boolean4 = node1.isThrow();
657:       assertFalse(boolean4);
658:       assertTrue(node1.isString());
659:       assertFalse(node1.isAdd());
660:       assertFalse(node1.isBlock());
661:       assertFalse(node1.isDo());
662:       assertFalse(node1.isNew());
663:       assertFalse(node1.isCall());
664:       assertFalse(node1.hasMoreThanOneChild());
665:       assertFalse(node1.isWhile());
666:       assertFalse(node1.isContinue());
667:       assertFalse(node1.isVar());
668:       assertFalse(node1.isReturn());
669:       assertFalse(node1.isLabel());
670:       assertFalse(node1.isParamList());
671:       assertFalse(node1.isLabelName());
672:       assertFalse(node1.isStringKey());
673:       assertFalse(node1.isNumber());
674:       assertEquals((-1), node1.getSourcePosition());
675:       assertFalse(node1.isDebugger());
676:       assertFalse(node1.isTrue());
677:       assertFalse(node1.isVoid());
678:       assertFalse(node1.isExprResult());
679:       assertFalse(node1.isDefaultCase());
680:       assertFalse(node1.isArrayLit());
681:       assertFalse(node1.isGetElem());
682:       assertEquals(0, node1.getChildCount());
683:       assertFalse(node1.isDec());
684:       assertFalse(node1.hasChildren());
685:       assertFalse(node1.isTypeOf());
686:       assertFalse(node1.isAssign());
687:       assertFalse(node1.isAssignAdd());
688:       assertFalse(node1.isBreak());
689:       assertFalse(node1.isDelProp());
690:       assertFalse(node1.isName());
691:       assertFalse(node1.isEmpty());
692:       assertFalse(node1.isNull());
693:       assertFalse(node1.isOr());
694:       assertFalse(node1.isInc());
695:       assertFalse(node1.isSwitch());
696:       assertFalse(node1.isCase());
697:       assertFalse(node1.isThrow());
698:       assertFalse(node1.isFalse());
699:       assertFalse(node1.isHook());
700:       assertFalse(node1.isThis());
701:       assertFalse(node1.isComma());
702:       assertFalse(node1.isGetProp());
703:       assertFalse(node1.isObjectLit());
704:       assertFalse(node1.isAnd());
705:       assertFalse(node1.isGetterDef());
706:       assertFalse(node1.isNot());
707:       assertEquals((-1), node1.getCharno());
708:       assertFalse(node1.isFunction());
709:       assertFalse(node1.isTry());
710:       assertFalse(node1.hasOneChild());
711:       assertFalse(node1.isScript());
712:       assertFalse(node1.isFor());
713:       assertEquals(40, node1.getType());
714:       assertFalse(node1.isWith());
715:       assertFalse(node1.isCatch());
716:       assertFalse(node1.isCast());
717:       assertFalse(node1.isRegExp());
718:       assertFalse(node1.isNE());
719:       assertFalse(node1.isIf());
720:       assertFalse(node1.isInstanceOf());
721:       assertFalse(node1.isSetterDef());
722:       assertEquals((-1), node1.getLineno());
723:       assertFalse(node1.isIn());
724:       assertFalse(node1.equals((Object)node0));
725:       assertFalse(boolean4 == boolean1);
726:       assertTrue(boolean4 == boolean0);
727:       assertTrue(boolean4 == boolean2);
728:       assertTrue(boolean4 == boolean3);
729:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
730:       assertEquals(54, Node.SLASH_V);
731:       assertEquals(15, Node.NO_SIDE_EFFECTS);
732:       assertEquals(52, Node.LENGTH);
733:       assertEquals(40, Node.ORIGINALNAME_PROP);
734:       assertEquals(49, Node.DIRECT_EVAL);
735:       assertEquals(50, Node.FREE_CALL);
736:       assertEquals(51, Node.STATIC_SOURCE_FILE);
737:       assertEquals(57, Node.REFLECTED_OBJECT);
738:       assertEquals(46, Node.IS_NAMESPACE);
739:       assertEquals(39, Node.EMPTY_BLOCK);
740:       assertEquals(2, Node.POST_FLAG);
741:       assertEquals(55, Node.INFERRED_FUNCTION);
742:       assertEquals(8, Node.FLAG_NO_THROWS);
743:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
744:       assertEquals(29, Node.JSDOC_INFO_PROP);
745:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
746:       assertEquals(30, Node.VAR_ARGS_NAME);
747:       assertEquals(57, Node.LAST_PROP);
748:       assertEquals(47, Node.IS_DISPATCHER);
749:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
750:       assertEquals(53, Node.INPUT_ID);
751:       assertEquals(36, Node.QUOTED_PROP);
752:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
753:       assertEquals(43, Node.IS_CONSTANT_NAME);
754:       assertEquals(56, Node.CHANGE_TIME);
755:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
756:       assertEquals(48, Node.DIRECTIVES);
757:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
758:       assertEquals(37, Node.OPT_ARG_NAME);
759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
760:       assertEquals(4095, Node.COLUMN_MASK);
761:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
762:       assertEquals(1, Node.DECR_FLAG);
763:       assertEquals(12, Node.COLUMN_BITS);
764:       assertEquals(32, Node.INCRDECR_PROP);
765:       
766:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
767:       assertTrue(node1.isString());
768:       assertFalse(node1.isAdd());
769:       assertFalse(node1.isBlock());
770:       assertFalse(node1.isDo());
771:       assertFalse(node1.isNew());
772:       assertFalse(node1.isCall());
773:       assertFalse(node1.hasMoreThanOneChild());
774:       assertFalse(node1.isWhile());
775:       assertFalse(node1.isContinue());
776:       assertFalse(node1.isVar());
777:       assertFalse(node1.isReturn());
778:       assertFalse(node1.isLabel());
779:       assertFalse(node1.isParamList());
780:       assertFalse(node1.isLabelName());
781:       assertFalse(node1.isStringKey());
782:       assertFalse(node1.isNumber());
783:       assertEquals((-1), node1.getSourcePosition());
784:       assertFalse(node1.isDebugger());
785:       assertFalse(node1.isTrue());
786:       assertFalse(node1.isVoid());
787:       assertFalse(node1.isExprResult());
788:       assertFalse(node1.isDefaultCase());
789:       assertFalse(node1.isArrayLit());
790:       assertFalse(node1.isGetElem());
791:       assertEquals(0, node1.getChildCount());
792:       assertFalse(node1.isDec());
793:       assertFalse(node1.hasChildren());
794:       assertFalse(node1.isTypeOf());
795:       assertFalse(node1.isAssign());
796:       assertFalse(node1.isAssignAdd());
797:       assertFalse(node1.isBreak());
798:       assertFalse(node1.isDelProp());
799:       assertFalse(node1.isName());
800:       assertFalse(node1.isEmpty());
801:       assertFalse(node1.isNull());
802:       assertFalse(node1.isOr());
803:       assertFalse(node1.isInc());
804:       assertFalse(node1.isSwitch());
805:       assertFalse(node1.isCase());
806:       assertFalse(node1.isThrow());
807:       assertFalse(node1.isFalse());
808:       assertFalse(node1.isHook());
809:       assertFalse(node1.isThis());
810:       assertFalse(node1.isComma());
811:       assertFalse(node1.isGetProp());
812:       assertFalse(node1.isObjectLit());
813:       assertFalse(node1.isAnd());
814:       assertFalse(node1.isGetterDef());
815:       assertFalse(node1.isNot());
816:       assertEquals((-1), node1.getCharno());
817:       assertFalse(node1.isFunction());
818:       assertFalse(node1.isTry());
819:       assertFalse(node1.hasOneChild());
820:       assertFalse(node1.isScript());
821:       assertFalse(node1.isFor());
822:       assertEquals(40, node1.getType());
823:       assertFalse(node1.isWith());
824:       assertFalse(node1.isCatch());
825:       assertFalse(node1.isCast());
826:       assertFalse(node1.isRegExp());
827:       assertFalse(node1.isNE());
828:       assertFalse(node1.isIf());
829:       assertFalse(node1.isInstanceOf());
830:       assertFalse(node1.isSetterDef());
831:       assertEquals((-1), node1.getLineno());
832:       assertFalse(node1.isIn());
833:       assertFalse(node1.equals((Object)node0));
834:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
835:       assertEquals(54, Node.SLASH_V);
836:       assertEquals(15, Node.NO_SIDE_EFFECTS);
837:       assertEquals(52, Node.LENGTH);
838:       assertEquals(40, Node.ORIGINALNAME_PROP);
839:       assertEquals(49, Node.DIRECT_EVAL);
840:       assertEquals(50, Node.FREE_CALL);
841:       assertEquals(51, Node.STATIC_SOURCE_FILE);
842:       assertEquals(57, Node.REFLECTED_OBJECT);
843:       assertEquals(46, Node.IS_NAMESPACE);
844:       assertEquals(39, Node.EMPTY_BLOCK);
845:       assertEquals(2, Node.POST_FLAG);
846:       assertEquals(55, Node.INFERRED_FUNCTION);
847:       assertEquals(8, Node.FLAG_NO_THROWS);
848:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
849:       assertEquals(29, Node.JSDOC_INFO_PROP);
850:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
851:       assertEquals(30, Node.VAR_ARGS_NAME);
852:       assertEquals(57, Node.LAST_PROP);
853:       assertEquals(47, Node.IS_DISPATCHER);
854:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
855:       assertEquals(53, Node.INPUT_ID);
856:       assertEquals(36, Node.QUOTED_PROP);
857:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
858:       assertEquals(43, Node.IS_CONSTANT_NAME);
859:       assertEquals(56, Node.CHANGE_TIME);
860:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
861:       assertEquals(48, Node.DIRECTIVES);
862:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
863:       assertEquals(37, Node.OPT_ARG_NAME);
864:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
865:       assertEquals(4095, Node.COLUMN_MASK);
866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
867:       assertEquals(1, Node.DECR_FLAG);
868:       assertEquals(12, Node.COLUMN_BITS);
869:       assertEquals(32, Node.INCRDECR_PROP);
870:       
871:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
872:       assertTrue(node1.isString());
873:       assertFalse(node1.isAdd());
874:       assertFalse(node1.isBlock());
875:       assertFalse(node1.isDo());
876:       assertFalse(node1.isNew());
877:       assertFalse(node1.isCall());
878:       assertFalse(node1.hasMoreThanOneChild());
879:       assertFalse(node1.isWhile());
880:       assertFalse(node1.isContinue());
881:       assertFalse(node1.isVar());
882:       assertFalse(node1.isReturn());
883:       assertFalse(node1.isLabel());
884:       assertFalse(node1.isParamList());
885:       assertFalse(node1.isLabelName());
886:       assertFalse(node1.isStringKey());
887:       assertFalse(node1.isNumber());
888:       assertEquals((-1), node1.getSourcePosition());
889:       assertFalse(node1.isDebugger());
890:       assertFalse(node1.isTrue());
891:       assertFalse(node1.isVoid());
892:       assertFalse(node1.isExprResult());
893:       assertFalse(node1.isDefaultCase());
894:       assertFalse(node1.isArrayLit());
895:       assertFalse(node1.isGetElem());
896:       assertEquals(0, node1.getChildCount());
897:       assertFalse(node1.isDec());
898:       assertFalse(node1.hasChildren());
899:       assertFalse(node1.isTypeOf());
900:       assertFalse(node1.isAssign());
901:       assertFalse(node1.isAssignAdd());
902:       assertFalse(node1.isBreak());
903:       assertFalse(node1.isDelProp());
904:       assertFalse(node1.isName());
905:       assertFalse(node1.isEmpty());
906:       assertFalse(node1.isNull());
907:       assertFalse(node1.isOr());
908:       assertFalse(node1.isInc());
909:       assertFalse(node1.isSwitch());
910:       assertFalse(node1.isCase());
911:       assertFalse(node1.isThrow());
912:       assertFalse(node1.isFalse());
913:       assertFalse(node1.isHook());
914:       assertFalse(node1.isThis());
915:       assertFalse(node1.isComma());
916:       assertFalse(node1.isGetProp());
917:       assertFalse(node1.isObjectLit());
918:       assertFalse(node1.isAnd());
919:       assertFalse(node1.isGetterDef());
920:       assertFalse(node1.isNot());
921:       assertEquals((-1), node1.getCharno());
922:       assertFalse(node1.isFunction());
923:       assertFalse(node1.isTry());
924:       assertFalse(node1.hasOneChild());
925:       assertFalse(node1.isScript());
926:       assertFalse(node1.isFor());
927:       assertEquals(40, node1.getType());
928:       assertFalse(node1.isWith());
929:       assertFalse(node1.isCatch());
930:       assertFalse(node1.isCast());
931:       assertFalse(node1.isRegExp());
932:       assertFalse(node1.isNE());
933:       assertFalse(node1.isIf());
934:       assertFalse(node1.isInstanceOf());
935:       assertFalse(node1.isSetterDef());
936:       assertEquals((-1), node1.getLineno());
937:       assertFalse(node1.isIn());
938:       assertFalse(node1.equals((Object)node0));
939:       assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
940:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
941:       assertEquals(54, Node.SLASH_V);
942:       assertEquals(15, Node.NO_SIDE_EFFECTS);
943:       assertEquals(52, Node.LENGTH);
944:       assertEquals(40, Node.ORIGINALNAME_PROP);
945:       assertEquals(49, Node.DIRECT_EVAL);
946:       assertEquals(50, Node.FREE_CALL);
947:       assertEquals(51, Node.STATIC_SOURCE_FILE);
948:       assertEquals(57, Node.REFLECTED_OBJECT);
949:       assertEquals(46, Node.IS_NAMESPACE);
950:       assertEquals(39, Node.EMPTY_BLOCK);
951:       assertEquals(2, Node.POST_FLAG);
952:       assertEquals(55, Node.INFERRED_FUNCTION);
953:       assertEquals(8, Node.FLAG_NO_THROWS);
954:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
955:       assertEquals(29, Node.JSDOC_INFO_PROP);
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(30, Node.VAR_ARGS_NAME);
958:       assertEquals(57, Node.LAST_PROP);
959:       assertEquals(47, Node.IS_DISPATCHER);
960:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
961:       assertEquals(53, Node.INPUT_ID);
962:       assertEquals(36, Node.QUOTED_PROP);
963:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
964:       assertEquals(43, Node.IS_CONSTANT_NAME);
965:       assertEquals(56, Node.CHANGE_TIME);
966:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
967:       assertEquals(48, Node.DIRECTIVES);
968:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
969:       assertEquals(37, Node.OPT_ARG_NAME);
970:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
971:       assertEquals(4095, Node.COLUMN_MASK);
972:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
973:       assertEquals(1, Node.DECR_FLAG);
974:       assertEquals(12, Node.COLUMN_BITS);
975:       assertEquals(32, Node.INCRDECR_PROP);
976:       
977:       node1.getStaticSourceFile();
978:       assertTrue(node1.isString());
979:       assertFalse(node1.isAdd());
980:       assertFalse(node1.isBlock());
981:       assertFalse(node1.isDo());
982:       assertFalse(node1.isNew());
983:       assertFalse(node1.isCall());
984:       assertFalse(node1.hasMoreThanOneChild());
985:       assertFalse(node1.isWhile());
986:       assertFalse(node1.isContinue());
987:       assertFalse(node1.isVar());
988:       assertFalse(node1.isReturn());
989:       assertFalse(node1.isLabel());
990:       assertFalse(node1.isParamList());
991:       assertFalse(node1.isLabelName());
992:       assertFalse(node1.isStringKey());
993:       assertFalse(node1.isNumber());
994:       assertEquals((-1), node1.getSourcePosition());
995:       assertFalse(node1.isDebugger());
996:       assertFalse(node1.isTrue());
997:       assertFalse(node1.isVoid());
998:       assertFalse(node1.isExprResult());
999:       assertFalse(node1.isDefaultCase());
1000:       assertFalse(node1.isArrayLit());
1001:       assertFalse(node1.isGetElem());
1002:       assertEquals(0, node1.getChildCount());
1003:       assertFalse(node1.isDec());
1004:       assertFalse(node1.hasChildren());
1005:       assertFalse(node1.isTypeOf());
1006:       assertFalse(node1.isAssign());
1007:       assertFalse(node1.isAssignAdd());
1008:       assertFalse(node1.isBreak());
1009:       assertFalse(node1.isDelProp());
1010:       assertFalse(node1.isName());
1011:       assertFalse(node1.isEmpty());
1012:       assertFalse(node1.isNull());
1013:       assertFalse(node1.isOr());
1014:       assertFalse(node1.isInc());
1015:       assertFalse(node1.isSwitch());
1016:       assertFalse(node1.isCase());
1017:       assertFalse(node1.isThrow());
1018:       assertFalse(node1.isFalse());
1019:       assertFalse(node1.isHook());
1020:       assertFalse(node1.isThis());
1021:       assertFalse(node1.isComma());
1022:       assertFalse(node1.isGetProp());
1023:       assertFalse(node1.isObjectLit());
1024:       assertFalse(node1.isAnd());
1025:       assertFalse(node1.isGetterDef());
1026:       assertFalse(node1.isNot());
1027:       assertEquals((-1), node1.getCharno());
1028:       assertFalse(node1.isFunction());
1029:       assertFalse(node1.isTry());
1030:       assertFalse(node1.hasOneChild());
1031:       assertFalse(node1.isScript());
1032:       assertFalse(node1.isFor());
1033:       assertEquals(40, node1.getType());
1034:       assertFalse(node1.isWith());
1035:       assertFalse(node1.isCatch());
1036:       assertFalse(node1.isCast());
1037:       assertFalse(node1.isRegExp());
1038:       assertFalse(node1.isNE());
1039:       assertFalse(node1.isIf());
1040:       assertFalse(node1.isInstanceOf());
1041:       assertFalse(node1.isSetterDef());
1042:       assertEquals((-1), node1.getLineno());
1043:       assertFalse(node1.isIn());
1044:       assertFalse(node1.equals((Object)node0));
1045:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1046:       assertEquals(54, Node.SLASH_V);
1047:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1048:       assertEquals(52, Node.LENGTH);
1049:       assertEquals(40, Node.ORIGINALNAME_PROP);
1050:       assertEquals(49, Node.DIRECT_EVAL);
1051:       assertEquals(50, Node.FREE_CALL);
1052:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1053:       assertEquals(57, Node.REFLECTED_OBJECT);
1054:       assertEquals(46, Node.IS_NAMESPACE);
1055:       assertEquals(39, Node.EMPTY_BLOCK);
1056:       assertEquals(2, Node.POST_FLAG);
1057:       assertEquals(55, Node.INFERRED_FUNCTION);
1058:       assertEquals(8, Node.FLAG_NO_THROWS);
1059:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1060:       assertEquals(29, Node.JSDOC_INFO_PROP);
1061:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1062:       assertEquals(30, Node.VAR_ARGS_NAME);
1063:       assertEquals(57, Node.LAST_PROP);
1064:       assertEquals(47, Node.IS_DISPATCHER);
1065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1066:       assertEquals(53, Node.INPUT_ID);
1067:       assertEquals(36, Node.QUOTED_PROP);
1068:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1069:       assertEquals(43, Node.IS_CONSTANT_NAME);
1070:       assertEquals(56, Node.CHANGE_TIME);
1071:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1072:       assertEquals(48, Node.DIRECTIVES);
1073:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1074:       assertEquals(37, Node.OPT_ARG_NAME);
1075:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1076:       assertEquals(4095, Node.COLUMN_MASK);
1077:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1078:       assertEquals(1, Node.DECR_FLAG);
1079:       assertEquals(12, Node.COLUMN_BITS);
1080:       assertEquals(32, Node.INCRDECR_PROP);
1081:       
1082:       node_FileLevelJsDocBuilder1.append("Use SerializedForm");
1083:       assertTrue(node1.isString());
1084:       assertFalse(node1.isAdd());
1085:       assertFalse(node1.isBlock());
1086:       assertFalse(node1.isDo());
1087:       assertFalse(node1.isNew());
1088:       assertFalse(node1.isCall());
1089:       assertFalse(node1.hasMoreThanOneChild());
1090:       assertFalse(node1.isWhile());
1091:       assertFalse(node1.isContinue());
1092:       assertFalse(node1.isVar());
1093:       assertFalse(node1.isReturn());
1094:       assertFalse(node1.isLabel());
1095:       assertFalse(node1.isParamList());
1096:       assertFalse(node1.isLabelName());
1097:       assertFalse(node1.isStringKey());
1098:       assertFalse(node1.isNumber());
1099:       assertEquals((-1), node1.getSourcePosition());
1100:       assertFalse(node1.isDebugger());
1101:       assertFalse(node1.isTrue());
1102:       assertFalse(node1.isVoid());
1103:       assertFalse(node1.isExprResult());
1104:       assertFalse(node1.isDefaultCase());
1105:       assertFalse(node1.isArrayLit());
1106:       assertFalse(node1.isGetElem());
1107:       assertEquals(0, node1.getChildCount());
1108:       assertFalse(node1.isDec());
1109:       assertFalse(node1.hasChildren());
1110:       assertFalse(node1.isTypeOf());
1111:       assertFalse(node1.isAssign());
1112:       assertFalse(node1.isAssignAdd());
1113:       assertFalse(node1.isBreak());
1114:       assertFalse(node1.isDelProp());
1115:       assertFalse(node1.isName());
1116:       assertFalse(node1.isEmpty());
1117:       assertFalse(node1.isNull());
1118:       assertFalse(node1.isOr());
1119:       assertFalse(node1.isInc());
1120:       assertFalse(node1.isSwitch());
1121:       assertFalse(node1.isCase());
1122:       assertFalse(node1.isThrow());
1123:       assertFalse(node1.isFalse());
1124:       assertFalse(node1.isHook());
1125:       assertFalse(node1.isThis());
1126:       assertFalse(node1.isComma());
1127:       assertFalse(node1.isGetProp());
1128:       assertFalse(node1.isObjectLit());
1129:       assertFalse(node1.isAnd());
1130:       assertFalse(node1.isGetterDef());
1131:       assertFalse(node1.isNot());
1132:       assertEquals((-1), node1.getCharno());
1133:       assertFalse(node1.isFunction());
1134:       assertFalse(node1.isTry());
1135:       assertFalse(node1.hasOneChild());
1136:       assertFalse(node1.isScript());
1137:       assertFalse(node1.isFor());
1138:       assertEquals(40, node1.getType());
1139:       assertFalse(node1.isWith());
1140:       assertFalse(node1.isCatch());
1141:       assertFalse(node1.isCast());
1142:       assertFalse(node1.isRegExp());
1143:       assertFalse(node1.isNE());
1144:       assertFalse(node1.isIf());
1145:       assertFalse(node1.isInstanceOf());
1146:       assertFalse(node1.isSetterDef());
1147:       assertEquals((-1), node1.getLineno());
1148:       assertFalse(node1.isIn());
1149:       assertFalse(node1.equals((Object)node0));
1150:       assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
1151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1152:       assertEquals(54, Node.SLASH_V);
1153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1154:       assertEquals(52, Node.LENGTH);
1155:       assertEquals(40, Node.ORIGINALNAME_PROP);
1156:       assertEquals(49, Node.DIRECT_EVAL);
1157:       assertEquals(50, Node.FREE_CALL);
1158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1159:       assertEquals(57, Node.REFLECTED_OBJECT);
1160:       assertEquals(46, Node.IS_NAMESPACE);
1161:       assertEquals(39, Node.EMPTY_BLOCK);
1162:       assertEquals(2, Node.POST_FLAG);
1163:       assertEquals(55, Node.INFERRED_FUNCTION);
1164:       assertEquals(8, Node.FLAG_NO_THROWS);
1165:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1166:       assertEquals(29, Node.JSDOC_INFO_PROP);
1167:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1168:       assertEquals(30, Node.VAR_ARGS_NAME);
1169:       assertEquals(57, Node.LAST_PROP);
1170:       assertEquals(47, Node.IS_DISPATCHER);
1171:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1172:       assertEquals(53, Node.INPUT_ID);
1173:       assertEquals(36, Node.QUOTED_PROP);
1174:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1175:       assertEquals(43, Node.IS_CONSTANT_NAME);
1176:       assertEquals(56, Node.CHANGE_TIME);
1177:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1178:       assertEquals(48, Node.DIRECTIVES);
1179:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1180:       assertEquals(37, Node.OPT_ARG_NAME);
1181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1182:       assertEquals(4095, Node.COLUMN_MASK);
1183:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1184:       assertEquals(1, Node.DECR_FLAG);
1185:       assertEquals(12, Node.COLUMN_BITS);
1186:       assertEquals(32, Node.INCRDECR_PROP);
1187:       
1188:       node_FileLevelJsDocBuilder0.append("B;pQF7`wa(?K+pW");
1189:       assertTrue(node1.isString());
1190:       assertFalse(node1.isAdd());
1191:       assertFalse(node1.isBlock());
1192:       assertFalse(node1.isDo());
1193:       assertFalse(node1.isNew());
1194:       assertFalse(node1.isCall());
1195:       assertFalse(node1.hasMoreThanOneChild());
1196:       assertFalse(node1.isWhile());
1197:       assertFalse(node1.isContinue());
1198:       assertFalse(node1.isVar());
1199:       assertFalse(node1.isReturn());
1200:       assertFalse(node1.isLabel());
1201:       assertFalse(node1.isParamList());
1202:       assertFalse(node1.isLabelName());
1203:       assertFalse(node1.isStringKey());
1204:       assertFalse(node1.isNumber());
1205:       assertEquals((-1), node1.getSourcePosition());
1206:       assertFalse(node1.isDebugger());
1207:       assertFalse(node1.isTrue());
1208:       assertFalse(node1.isVoid());
1209:       assertFalse(node1.isExprResult());
1210:       assertFalse(node1.isDefaultCase());
1211:       assertFalse(node1.isArrayLit());
1212:       assertFalse(node1.isGetElem());
1213:       assertEquals(0, node1.getChildCount());
1214:       assertFalse(node1.isDec());
1215:       assertFalse(node1.hasChildren());
1216:       assertFalse(node1.isTypeOf());
1217:       assertFalse(node1.isAssign());
1218:       assertFalse(node1.isAssignAdd());
1219:       assertFalse(node1.isBreak());
1220:       assertFalse(node1.isDelProp());
1221:       assertFalse(node1.isName());
1222:       assertFalse(node1.isEmpty());
1223:       assertFalse(node1.isNull());
1224:       assertFalse(node1.isOr());
1225:       assertFalse(node1.isInc());
1226:       assertFalse(node1.isSwitch());
1227:       assertFalse(node1.isCase());
1228:       assertFalse(node1.isThrow());
1229:       assertFalse(node1.isFalse());
1230:       assertFalse(node1.isHook());
1231:       assertFalse(node1.isThis());
1232:       assertFalse(node1.isComma());
1233:       assertFalse(node1.isGetProp());
1234:       assertFalse(node1.isObjectLit());
1235:       assertFalse(node1.isAnd());
1236:       assertFalse(node1.isGetterDef());
1237:       assertFalse(node1.isNot());
1238:       assertEquals((-1), node1.getCharno());
1239:       assertFalse(node1.isFunction());
1240:       assertFalse(node1.isTry());
1241:       assertFalse(node1.hasOneChild());
1242:       assertFalse(node1.isScript());
1243:       assertFalse(node1.isFor());
1244:       assertEquals(40, node1.getType());
1245:       assertFalse(node1.isWith());
1246:       assertFalse(node1.isCatch());
1247:       assertFalse(node1.isCast());
1248:       assertFalse(node1.isRegExp());
1249:       assertFalse(node1.isNE());
1250:       assertFalse(node1.isIf());
1251:       assertFalse(node1.isInstanceOf());
1252:       assertFalse(node1.isSetterDef());
1253:       assertEquals((-1), node1.getLineno());
1254:       assertFalse(node1.isIn());
1255:       assertFalse(node1.equals((Object)node0));
1256:       assertFalse(node_FileLevelJsDocBuilder0.equals((Object)node_FileLevelJsDocBuilder1));
1257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1258:       assertEquals(54, Node.SLASH_V);
1259:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1260:       assertEquals(52, Node.LENGTH);
1261:       assertEquals(40, Node.ORIGINALNAME_PROP);
1262:       assertEquals(49, Node.DIRECT_EVAL);
1263:       assertEquals(50, Node.FREE_CALL);
1264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1265:       assertEquals(57, Node.REFLECTED_OBJECT);
1266:       assertEquals(46, Node.IS_NAMESPACE);
1267:       assertEquals(39, Node.EMPTY_BLOCK);
1268:       assertEquals(2, Node.POST_FLAG);
1269:       assertEquals(55, Node.INFERRED_FUNCTION);
1270:       assertEquals(8, Node.FLAG_NO_THROWS);
1271:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1272:       assertEquals(29, Node.JSDOC_INFO_PROP);
1273:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1274:       assertEquals(30, Node.VAR_ARGS_NAME);
1275:       assertEquals(57, Node.LAST_PROP);
1276:       assertEquals(47, Node.IS_DISPATCHER);
1277:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1278:       assertEquals(53, Node.INPUT_ID);
1279:       assertEquals(36, Node.QUOTED_PROP);
1280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1281:       assertEquals(43, Node.IS_CONSTANT_NAME);
1282:       assertEquals(56, Node.CHANGE_TIME);
1283:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1284:       assertEquals(48, Node.DIRECTIVES);
1285:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1286:       assertEquals(37, Node.OPT_ARG_NAME);
1287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1288:       assertEquals(4095, Node.COLUMN_MASK);
1289:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1290:       assertEquals(1, Node.DECR_FLAG);
1291:       assertEquals(12, Node.COLUMN_BITS);
1292:       assertEquals(32, Node.INCRDECR_PROP);
1293:       
1294:       node_FileLevelJsDocBuilder0.append("empty_block");
1295:       assertTrue(node1.isString());
1296:       assertFalse(node1.isAdd());
1297:       assertFalse(node1.isBlock());
1298:       assertFalse(node1.isDo());
1299:       assertFalse(node1.isNew());
1300:       assertFalse(node1.isCall());
1301:       assertFalse(node1.hasMoreThanOneChild());
1302:       assertFalse(node1.isWhile());
1303:       assertFalse(node1.isContinue());
1304:       assertFalse(node1.isVar());
1305:       assertFalse(node1.isReturn());
1306:       assertFalse(node1.isLabel());
1307:       assertFalse(node1.isParamList());
1308:       assertFalse(node1.isLabelName());
1309:       assertFalse(node1.isStringKey());
1310:       assertFalse(node1.isNumber());
1311:       assertEquals((-1), node1.getSourcePosition());
1312:       assertFalse(node1.isDebugger());
1313:       assertFalse(node1.isTrue());
1314:       assertFalse(node1.isVoid());
1315:       assertFalse(node1.isExprResult());
1316:       assertFalse(node1.isDefaultCase());
1317:       assertFalse(node1.isArrayLit());
1318:       assertFalse(node1.isGetElem());
1319:       assertEquals(0, node1.getChildCount());
1320:       assertFalse(node1.isDec());
1321:       assertFalse(node1.hasChildren());
1322:       assertFalse(node1.isTypeOf());
1323:       assertFalse(node1.isAssign());
1324:       assertFalse(node1.isAssignAdd());
1325:       assertFalse(node1.isBreak());
1326:       assertFalse(node1.isDelProp());
1327:       assertFalse(node1.isName());
1328:       assertFalse(node1.isEmpty());
1329:       assertFalse(node1.isNull());
1330:       assertFalse(node1.isOr());
1331:       assertFalse(node1.isInc());
1332:       assertFalse(node1.isSwitch());
1333:       assertFalse(node1.isCase());
1334:       assertFalse(node1.isThrow());
1335:       assertFalse(node1.isFalse());
1336:       assertFalse(node1.isHook());
1337:       assertFalse(node1.isThis());
1338:       assertFalse(node1.isComma());
1339:       assertFalse(node1.isGetProp());
1340:       assertFalse(node1.isObjectLit());
1341:       assertFalse(node1.isAnd());
1342:       assertFalse(node1.isGetterDef());
1343:       assertFalse(node1.isNot());
1344:       assertEquals((-1), node1.getCharno());
1345:       assertFalse(node1.isFunction());
1346:       assertFalse(node1.isTry());
1347:       assertFalse(node1.hasOneChild());
1348:       assertFalse(node1.isScript());
1349:       assertFalse(node1.isFor());
1350:       assertEquals(40, node1.getType());
1351:       assertFalse(node1.isWith());
1352:       assertFalse(node1.isCatch());
1353:       assertFalse(node1.isCast());
1354:       assertFalse(node1.isRegExp());
1355:       assertFalse(node1.isNE());
1356:       assertFalse(node1.isIf());
1357:       assertFalse(node1.isInstanceOf());
1358:       assertFalse(node1.isSetterDef());
1359:       assertEquals((-1), node1.getLineno());
1360:       assertFalse(node1.isIn());
1361:       assertFalse(node1.equals((Object)node0));
1362:       assertFalse(node_FileLevelJsDocBuilder0.equals((Object)node_FileLevelJsDocBuilder1));
1363:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1364:       assertEquals(54, Node.SLASH_V);
1365:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1366:       assertEquals(52, Node.LENGTH);
1367:       assertEquals(40, Node.ORIGINALNAME_PROP);
1368:       assertEquals(49, Node.DIRECT_EVAL);
1369:       assertEquals(50, Node.FREE_CALL);
1370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1371:       assertEquals(57, Node.REFLECTED_OBJECT);
1372:       assertEquals(46, Node.IS_NAMESPACE);
1373:       assertEquals(39, Node.EMPTY_BLOCK);
1374:       assertEquals(2, Node.POST_FLAG);
1375:       assertEquals(55, Node.INFERRED_FUNCTION);
1376:       assertEquals(8, Node.FLAG_NO_THROWS);
1377:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1378:       assertEquals(29, Node.JSDOC_INFO_PROP);
1379:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1380:       assertEquals(30, Node.VAR_ARGS_NAME);
1381:       assertEquals(57, Node.LAST_PROP);
1382:       assertEquals(47, Node.IS_DISPATCHER);
1383:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1384:       assertEquals(53, Node.INPUT_ID);
1385:       assertEquals(36, Node.QUOTED_PROP);
1386:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1387:       assertEquals(43, Node.IS_CONSTANT_NAME);
1388:       assertEquals(56, Node.CHANGE_TIME);
1389:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1390:       assertEquals(48, Node.DIRECTIVES);
1391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1392:       assertEquals(37, Node.OPT_ARG_NAME);
1393:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1394:       assertEquals(4095, Node.COLUMN_MASK);
1395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1396:       assertEquals(1, Node.DECR_FLAG);
1397:       assertEquals(12, Node.COLUMN_BITS);
1398:       assertEquals(32, Node.INCRDECR_PROP);
1399:       
1400:       node_FileLevelJsDocBuilder1.append("Use SerializedForm");
1401:       assertTrue(node1.isString());
1402:       assertFalse(node1.isAdd());
1403:       assertFalse(node1.isBlock());
1404:       assertFalse(node1.isDo());
1405:       assertFalse(node1.isNew());
1406:       assertFalse(node1.isCall());
1407:       assertFalse(node1.hasMoreThanOneChild());
1408:       assertFalse(node1.isWhile());
1409:       assertFalse(node1.isContinue());
1410:       assertFalse(node1.isVar());
1411:       assertFalse(node1.isReturn());
1412:       assertFalse(node1.isLabel());
1413:       assertFalse(node1.isParamList());
1414:       assertFalse(node1.isLabelName());
1415:       assertFalse(node1.isStringKey());
1416:       assertFalse(node1.isNumber());
1417:       assertEquals((-1), node1.getSourcePosition());
1418:       assertFalse(node1.isDebugger());
1419:       assertFalse(node1.isTrue());
1420:       assertFalse(node1.isVoid());
1421:       assertFalse(node1.isExprResult());
1422:       assertFalse(node1.isDefaultCase());
1423:       assertFalse(node1.isArrayLit());
1424:       assertFalse(node1.isGetElem());
1425:       assertEquals(0, node1.getChildCount());
1426:       assertFalse(node1.isDec());
1427:       assertFalse(node1.hasChildren());
1428:       assertFalse(node1.isTypeOf());
1429:       assertFalse(node1.isAssign());
1430:       assertFalse(node1.isAssignAdd());
1431:       assertFalse(node1.isBreak());
1432:       assertFalse(node1.isDelProp());
1433:       assertFalse(node1.isName());
1434:       assertFalse(node1.isEmpty());
1435:       assertFalse(node1.isNull());
1436:       assertFalse(node1.isOr());
1437:       assertFalse(node1.isInc());
1438:       assertFalse(node1.isSwitch());
1439:       assertFalse(node1.isCase());
1440:       assertFalse(node1.isThrow());
1441:       assertFalse(node1.isFalse());
1442:       assertFalse(node1.isHook());
1443:       assertFalse(node1.isThis());
1444:       assertFalse(node1.isComma());
1445:       assertFalse(node1.isGetProp());
1446:       assertFalse(node1.isObjectLit());
1447:       assertFalse(node1.isAnd());
1448:       assertFalse(node1.isGetterDef());
1449:       assertFalse(node1.isNot());
1450:       assertEquals((-1), node1.getCharno());
1451:       assertFalse(node1.isFunction());
1452:       assertFalse(node1.isTry());
1453:       assertFalse(node1.hasOneChild());
1454:       assertFalse(node1.isScript());
1455:       assertFalse(node1.isFor());
1456:       assertEquals(40, node1.getType());
1457:       assertFalse(node1.isWith());
1458:       assertFalse(node1.isCatch());
1459:       assertFalse(node1.isCast());
1460:       assertFalse(node1.isRegExp());
1461:       assertFalse(node1.isNE());
1462:       assertFalse(node1.isIf());
1463:       assertFalse(node1.isInstanceOf());
1464:       assertFalse(node1.isSetterDef());
1465:       assertEquals((-1), node1.getLineno());
1466:       assertFalse(node1.isIn());
1467:       assertFalse(node1.equals((Object)node0));
1468:       assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
1469:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1470:       assertEquals(54, Node.SLASH_V);
1471:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1472:       assertEquals(52, Node.LENGTH);
1473:       assertEquals(40, Node.ORIGINALNAME_PROP);
1474:       assertEquals(49, Node.DIRECT_EVAL);
1475:       assertEquals(50, Node.FREE_CALL);
1476:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1477:       assertEquals(57, Node.REFLECTED_OBJECT);
1478:       assertEquals(46, Node.IS_NAMESPACE);
1479:       assertEquals(39, Node.EMPTY_BLOCK);
1480:       assertEquals(2, Node.POST_FLAG);
1481:       assertEquals(55, Node.INFERRED_FUNCTION);
1482:       assertEquals(8, Node.FLAG_NO_THROWS);
1483:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1484:       assertEquals(29, Node.JSDOC_INFO_PROP);
1485:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1486:       assertEquals(30, Node.VAR_ARGS_NAME);
1487:       assertEquals(57, Node.LAST_PROP);
1488:       assertEquals(47, Node.IS_DISPATCHER);
1489:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1490:       assertEquals(53, Node.INPUT_ID);
1491:       assertEquals(36, Node.QUOTED_PROP);
1492:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1493:       assertEquals(43, Node.IS_CONSTANT_NAME);
1494:       assertEquals(56, Node.CHANGE_TIME);
1495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1496:       assertEquals(48, Node.DIRECTIVES);
1497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1498:       assertEquals(37, Node.OPT_ARG_NAME);
1499:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1500:       assertEquals(4095, Node.COLUMN_MASK);
1501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1502:       assertEquals(1, Node.DECR_FLAG);
1503:       assertEquals(12, Node.COLUMN_BITS);
1504:       assertEquals(32, Node.INCRDECR_PROP);
1505:       
1506:       node_FileLevelJsDocBuilder0.append("B;pQF7`wa(?K+pW");
1507:       assertTrue(node1.isString());
1508:       assertFalse(node1.isAdd());
1509:       assertFalse(node1.isBlock());
1510:       assertFalse(node1.isDo());
1511:       assertFalse(node1.isNew());
1512:       assertFalse(node1.isCall());
1513:       assertFalse(node1.hasMoreThanOneChild());
1514:       assertFalse(node1.isWhile());
1515:       assertFalse(node1.isContinue());
1516:       assertFalse(node1.isVar());
1517:       assertFalse(node1.isReturn());
1518:       assertFalse(node1.isLabel());
1519:       assertFalse(node1.isParamList());
1520:       assertFalse(node1.isLabelName());
1521:       assertFalse(node1.isStringKey());
1522:       assertFalse(node1.isNumber());
1523:       assertEquals((-1), node1.getSourcePosition());
1524:       assertFalse(node1.isDebugger());
1525:       assertFalse(node1.isTrue());
1526:       assertFalse(node1.isVoid());
1527:       assertFalse(node1.isExprResult());
1528:       assertFalse(node1.isDefaultCase());
1529:       assertFalse(node1.isArrayLit());
1530:       assertFalse(node1.isGetElem());
1531:       assertEquals(0, node1.getChildCount());
1532:       assertFalse(node1.isDec());
1533:       assertFalse(node1.hasChildren());
1534:       assertFalse(node1.isTypeOf());
1535:       assertFalse(node1.isAssign());
1536:       assertFalse(node1.isAssignAdd());
1537:       assertFalse(node1.isBreak());
1538:       assertFalse(node1.isDelProp());
1539:       assertFalse(node1.isName());
1540:       assertFalse(node1.isEmpty());
1541:       assertFalse(node1.isNull());
1542:       assertFalse(node1.isOr());
1543:       assertFalse(node1.isInc());
1544:       assertFalse(node1.isSwitch());
1545:       assertFalse(node1.isCase());
1546:       assertFalse(node1.isThrow());
1547:       assertFalse(node1.isFalse());
1548:       assertFalse(node1.isHook());
1549:       assertFalse(node1.isThis());
1550:       assertFalse(node1.isComma());
1551:       assertFalse(node1.isGetProp());
1552:       assertFalse(node1.isObjectLit());
1553:       assertFalse(node1.isAnd());
1554:       assertFalse(node1.isGetterDef());
1555:       assertFalse(node1.isNot());
1556:       assertEquals((-1), node1.getCharno());
1557:       assertFalse(node1.isFunction());
1558:       assertFalse(node1.isTry());
1559:       assertFalse(node1.hasOneChild());
1560:       assertFalse(node1.isScript());
1561:       assertFalse(node1.isFor());
1562:       assertEquals(40, node1.getType());
1563:       assertFalse(node1.isWith());
1564:       assertFalse(node1.isCatch());
1565:       assertFalse(node1.isCast());
1566:       assertFalse(node1.isRegExp());
1567:       assertFalse(node1.isNE());
1568:       assertFalse(node1.isIf());
1569:       assertFalse(node1.isInstanceOf());
1570:       assertFalse(node1.isSetterDef());
1571:       assertEquals((-1), node1.getLineno());
1572:       assertFalse(node1.isIn());
1573:       assertFalse(node1.equals((Object)node0));
1574:       assertFalse(node_FileLevelJsDocBuilder0.equals((Object)node_FileLevelJsDocBuilder1));
1575:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1576:       assertEquals(54, Node.SLASH_V);
1577:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1578:       assertEquals(52, Node.LENGTH);
1579:       assertEquals(40, Node.ORIGINALNAME_PROP);
1580:       assertEquals(49, Node.DIRECT_EVAL);
1581:       assertEquals(50, Node.FREE_CALL);
1582:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1583:       assertEquals(57, Node.REFLECTED_OBJECT);
1584:       assertEquals(46, Node.IS_NAMESPACE);
1585:       assertEquals(39, Node.EMPTY_BLOCK);
1586:       assertEquals(2, Node.POST_FLAG);
1587:       assertEquals(55, Node.INFERRED_FUNCTION);
1588:       assertEquals(8, Node.FLAG_NO_THROWS);
1589:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1590:       assertEquals(29, Node.JSDOC_INFO_PROP);
1591:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1592:       assertEquals(30, Node.VAR_ARGS_NAME);
1593:       assertEquals(57, Node.LAST_PROP);
1594:       assertEquals(47, Node.IS_DISPATCHER);
1595:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1596:       assertEquals(53, Node.INPUT_ID);
1597:       assertEquals(36, Node.QUOTED_PROP);
1598:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1599:       assertEquals(43, Node.IS_CONSTANT_NAME);
1600:       assertEquals(56, Node.CHANGE_TIME);
1601:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1602:       assertEquals(48, Node.DIRECTIVES);
1603:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1604:       assertEquals(37, Node.OPT_ARG_NAME);
1605:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1606:       assertEquals(4095, Node.COLUMN_MASK);
1607:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1608:       assertEquals(1, Node.DECR_FLAG);
1609:       assertEquals(12, Node.COLUMN_BITS);
1610:       assertEquals(32, Node.INCRDECR_PROP);
1611:       
1612:       Node node2 = new Node(2227, node0, node1, node0, node0, 125, 2);
1613:       assertFalse(node0.isWith());
1614:       assertFalse(node0.isNot());
1615:       assertFalse(node0.isObjectLit());
1616:       assertFalse(node0.isExprResult());
1617:       assertFalse(node0.isScript());
1618:       assertFalse(node0.isInstanceOf());
1619:       assertFalse(node0.hasOneChild());
1620:       assertFalse(node0.isThis());
1621:       assertFalse(node0.hasChildren());
1622:       assertFalse(node0.isBreak());
1623:       assertFalse(node0.isTypeOf());
1624:       assertFalse(node0.isAssign());
1625:       assertFalse(node0.isDec());
1626:       assertFalse(node0.isComma());
1627:       assertFalse(node0.isGetElem());
1628:       assertFalse(node0.isOr());
1629:       assertEquals(0, node0.getCharno());
1630:       assertFalse(node0.isCase());
1631:       assertFalse(node0.isDo());
1632:       assertFalse(node0.hasMoreThanOneChild());
1633:       assertFalse(node0.isAdd());
1634:       assertFalse(node0.isHook());
1635:       assertFalse(node0.isAssignAdd());
1636:       assertFalse(node0.isLabel());
1637:       assertFalse(node0.isNew());
1638:       assertFalse(node0.isBlock());
1639:       assertFalse(node0.isVar());
1640:       assertFalse(node0.isGetterDef());
1641:       assertFalse(node0.isNumber());
1642:       assertFalse(node0.isLabelName());
1643:       assertFalse(node0.isArrayLit());
1644:       assertFalse(node0.isParamList());
1645:       assertFalse(node0.isSwitch());
1646:       assertFalse(node0.isStringKey());
1647:       assertFalse(node0.isDefaultCase());
1648:       assertFalse(node0.isRegExp());
1649:       assertFalse(node0.isFunction());
1650:       assertFalse(node0.isCatch());
1651:       assertFalse(node0.isTry());
1652:       assertEquals(0, node0.getChildCount());
1653:       assertFalse(node0.isFor());
1654:       assertFalse(node0.isDelProp());
1655:       assertEquals(0, node0.getSourcePosition());
1656:       assertFalse(node0.isIf());
1657:       assertFalse(node0.isName());
1658:       assertFalse(node0.isCall());
1659:       assertFalse(node0.isSetterDef());
1660:       assertFalse(node0.isEmpty());
1661:       assertFalse(node0.isIn());
1662:       assertFalse(node0.isTrue());
1663:       assertFalse(node0.isVoid());
1664:       assertFalse(node0.isNull());
1665:       assertFalse(node0.isNE());
1666:       assertFalse(node0.isString());
1667:       assertFalse(node0.isWhile());
1668:       assertFalse(node0.isContinue());
1669:       assertFalse(node0.isInc());
1670:       assertEquals(0, node0.getType());
1671:       assertFalse(node0.isReturn());
1672:       assertFalse(node0.isThrow());
1673:       assertFalse(node0.isFalse());
1674:       assertFalse(node0.isGetProp());
1675:       assertFalse(node0.isCast());
1676:       assertEquals(0, node0.getLineno());
1677:       assertFalse(node0.isAnd());
1678:       assertFalse(node0.isDebugger());
1679:       assertTrue(node1.isString());
1680:       assertFalse(node1.isAdd());
1681:       assertFalse(node1.isBlock());
1682:       assertFalse(node1.isDo());
1683:       assertFalse(node1.isNew());
1684:       assertFalse(node1.isCall());
1685:       assertFalse(node1.hasMoreThanOneChild());
1686:       assertFalse(node1.isWhile());
1687:       assertFalse(node1.isContinue());
1688:       assertFalse(node1.isVar());
1689:       assertFalse(node1.isReturn());
1690:       assertFalse(node1.isLabel());
1691:       assertFalse(node1.isParamList());
1692:       assertFalse(node1.isLabelName());
1693:       assertFalse(node1.isStringKey());
1694:       assertFalse(node1.isNumber());
1695:       assertEquals((-1), node1.getSourcePosition());
1696:       assertFalse(node1.isDebugger());
1697:       assertFalse(node1.isTrue());
1698:       assertFalse(node1.isVoid());
1699:       assertFalse(node1.isExprResult());
1700:       assertFalse(node1.isDefaultCase());
1701:       assertFalse(node1.isArrayLit());
1702:       assertFalse(node1.isGetElem());
1703:       assertEquals(0, node1.getChildCount());
1704:       assertFalse(node1.isDec());
1705:       assertFalse(node1.hasChildren());
1706:       assertFalse(node1.isTypeOf());
1707:       assertFalse(node1.isAssign());
1708:       assertFalse(node1.isAssignAdd());
1709:       assertFalse(node1.isBreak());
1710:       assertFalse(node1.isDelProp());
1711:       assertFalse(node1.isName());
1712:       assertFalse(node1.isEmpty());
1713:       assertFalse(node1.isNull());
1714:       assertFalse(node1.isOr());
1715:       assertFalse(node1.isInc());
1716:       assertFalse(node1.isSwitch());
1717:       assertFalse(node1.isCase());
1718:       assertFalse(node1.isThrow());
1719:       assertFalse(node1.isFalse());
1720:       assertFalse(node1.isHook());
1721:       assertFalse(node1.isThis());
1722:       assertFalse(node1.isComma());
1723:       assertFalse(node1.isGetProp());
1724:       assertFalse(node1.isObjectLit());
1725:       assertFalse(node1.isAnd());
1726:       assertFalse(node1.isGetterDef());
1727:       assertFalse(node1.isNot());
1728:       assertEquals((-1), node1.getCharno());
1729:       assertFalse(node1.isFunction());
1730:       assertFalse(node1.isTry());
1731:       assertFalse(node1.hasOneChild());
1732:       assertFalse(node1.isScript());
1733:       assertFalse(node1.isFor());
1734:       assertEquals(40, node1.getType());
1735:       assertFalse(node1.isWith());
1736:       assertFalse(node1.isCatch());
1737:       assertFalse(node1.isCast());
1738:       assertFalse(node1.isRegExp());
1739:       assertFalse(node1.isNE());
1740:       assertFalse(node1.isIf());
1741:       assertFalse(node1.isInstanceOf());
1742:       assertFalse(node1.isSetterDef());
1743:       assertEquals((-1), node1.getLineno());
1744:       assertFalse(node1.isIn());
1745:       assertEquals(2, node2.getCharno());
1746:       assertFalse(node2.isDefaultCase());
1747:       assertFalse(node2.isTrue());
1748:       assertFalse(node2.isTry());
1749:       assertFalse(node2.isVoid());
1750:       assertFalse(node2.isDebugger());
1751:       assertFalse(node2.isGetterDef());
1752:       assertFalse(node2.isIf());
1753:       assertTrue(node2.hasOneChild());
1754:       assertFalse(node2.isFor());
1755:       assertFalse(node2.isNE());
1756:       assertFalse(node2.isNull());
1757:       assertFalse(node2.isName());
1758:       assertFalse(node2.isDelProp());
1759:       assertEquals(1, node2.getChildCount());
1760:       assertFalse(node2.isCatch());
1761:       assertTrue(node2.hasChildren());
1762:       assertFalse(node2.isCall());
1763:       assertFalse(node2.isBlock());
1764:       assertFalse(node2.isRegExp());
1765:       assertFalse(node2.isNew());
1766:       assertFalse(node2.isCase());
1767:       assertFalse(node2.isSwitch());
1768:       assertFalse(node2.isDo());
1769:       assertEquals(125, node2.getLineno());
1770:       assertFalse(node2.isAdd());
1771:       assertFalse(node2.isOr());
1772:       assertFalse(node2.isParamList());
1773:       assertFalse(node2.isEmpty());
1774:       assertFalse(node2.isStringKey());
1775:       assertFalse(node2.isAssignAdd());
1776:       assertFalse(node2.isLabelName());
1777:       assertFalse(node2.isArrayLit());
1778:       assertFalse(node2.isVar());
1779:       assertFalse(node2.isLabel());
1780:       assertFalse(node2.isScript());
1781:       assertFalse(node2.isExprResult());
1782:       assertFalse(node2.isAnd());
1783:       assertFalse(node2.isNot());
1784:       assertFalse(node2.isObjectLit());
1785:       assertEquals(2227, node2.getType());
1786:       assertFalse(node2.isNumber());
1787:       assertFalse(node2.isDec());
1788:       assertFalse(node2.isBreak());
1789:       assertFalse(node2.isThis());
1790:       assertFalse(node2.isGetProp());
1791:       assertFalse(node2.isGetElem());
1792:       assertFalse(node2.isHook());
1793:       assertFalse(node2.isInstanceOf());
1794:       assertFalse(node2.isReturn());
1795:       assertEquals(512002, node2.getSourcePosition());
1796:       assertFalse(node2.isWith());
1797:       assertFalse(node2.hasMoreThanOneChild());
1798:       assertFalse(node2.isComma());
1799:       assertFalse(node2.isAssign());
1800:       assertFalse(node2.isTypeOf());
1801:       assertFalse(node2.isString());
1802:       assertFalse(node2.isInc());
1803:       assertFalse(node2.isWhile());
1804:       assertFalse(node2.isIn());
1805:       assertFalse(node2.isSetterDef());
1806:       assertFalse(node2.isThrow());
1807:       assertFalse(node2.isCast());
1808:       assertFalse(node2.isFalse());
1809:       assertFalse(node2.isContinue());
1810:       assertFalse(node2.isFunction());
1811:       assertFalse(node0.equals((Object)node1));
1812:       assertFalse(node1.equals((Object)node0));
1813:       assertFalse(node2.equals((Object)node1));
1814:       assertFalse(node2.equals((Object)node0));
1815:       assertEquals(43, Node.IS_CONSTANT_NAME);
1816:       assertEquals(36, Node.QUOTED_PROP);
1817:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1818:       assertEquals(4095, Node.COLUMN_MASK);
1819:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1820:       assertEquals(48, Node.DIRECTIVES);
1821:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1822:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1823:       assertEquals(50, Node.FREE_CALL);
1824:       assertEquals(32, Node.INCRDECR_PROP);
1825:       assertEquals(12, Node.COLUMN_BITS);
1826:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1827:       assertEquals(1, Node.DECR_FLAG);
1828:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1829:       assertEquals(57, Node.LAST_PROP);
1830:       assertEquals(54, Node.SLASH_V);
1831:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1832:       assertEquals(30, Node.VAR_ARGS_NAME);
1833:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1834:       assertEquals(46, Node.IS_NAMESPACE);
1835:       assertEquals(57, Node.REFLECTED_OBJECT);
1836:       assertEquals(40, Node.ORIGINALNAME_PROP);
1837:       assertEquals(37, Node.OPT_ARG_NAME);
1838:       assertEquals(49, Node.DIRECT_EVAL);
1839:       assertEquals(47, Node.IS_DISPATCHER);
1840:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1841:       assertEquals(29, Node.JSDOC_INFO_PROP);
1842:       assertEquals(56, Node.CHANGE_TIME);
1843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1844:       assertEquals(8, Node.FLAG_NO_THROWS);
1845:       assertEquals(2, Node.POST_FLAG);
1846:       assertEquals(52, Node.LENGTH);
1847:       assertEquals(53, Node.INPUT_ID);
1848:       assertEquals(55, Node.INFERRED_FUNCTION);
1849:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1850:       assertEquals(39, Node.EMPTY_BLOCK);
1851:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1852:       assertEquals(54, Node.SLASH_V);
1853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1854:       assertEquals(52, Node.LENGTH);
1855:       assertEquals(40, Node.ORIGINALNAME_PROP);
1856:       assertEquals(49, Node.DIRECT_EVAL);
1857:       assertEquals(50, Node.FREE_CALL);
1858:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1859:       assertEquals(57, Node.REFLECTED_OBJECT);
1860:       assertEquals(46, Node.IS_NAMESPACE);
1861:       assertEquals(39, Node.EMPTY_BLOCK);
1862:       assertEquals(2, Node.POST_FLAG);
1863:       assertEquals(55, Node.INFERRED_FUNCTION);
1864:       assertEquals(8, Node.FLAG_NO_THROWS);
1865:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1866:       assertEquals(29, Node.JSDOC_INFO_PROP);
1867:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1868:       assertEquals(30, Node.VAR_ARGS_NAME);
1869:       assertEquals(57, Node.LAST_PROP);
1870:       assertEquals(47, Node.IS_DISPATCHER);
1871:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1872:       assertEquals(53, Node.INPUT_ID);
1873:       assertEquals(36, Node.QUOTED_PROP);
1874:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1875:       assertEquals(43, Node.IS_CONSTANT_NAME);
1876:       assertEquals(56, Node.CHANGE_TIME);
1877:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1878:       assertEquals(48, Node.DIRECTIVES);
1879:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1880:       assertEquals(37, Node.OPT_ARG_NAME);
1881:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1882:       assertEquals(4095, Node.COLUMN_MASK);
1883:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1884:       assertEquals(1, Node.DECR_FLAG);
1885:       assertEquals(12, Node.COLUMN_BITS);
1886:       assertEquals(32, Node.INCRDECR_PROP);
1887:       assertEquals(43, Node.IS_CONSTANT_NAME);
1888:       assertEquals(36, Node.QUOTED_PROP);
1889:       assertEquals(53, Node.INPUT_ID);
1890:       assertEquals(55, Node.INFERRED_FUNCTION);
1891:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1892:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1893:       assertEquals(4095, Node.COLUMN_MASK);
1894:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1895:       assertEquals(47, Node.IS_DISPATCHER);
1896:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1897:       assertEquals(2, Node.POST_FLAG);
1898:       assertEquals(50, Node.FREE_CALL);
1899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1900:       assertEquals(40, Node.ORIGINALNAME_PROP);
1901:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1902:       assertEquals(46, Node.IS_NAMESPACE);
1903:       assertEquals(54, Node.SLASH_V);
1904:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1905:       assertEquals(57, Node.LAST_PROP);
1906:       assertEquals(30, Node.VAR_ARGS_NAME);
1907:       assertEquals(49, Node.DIRECT_EVAL);
1908:       assertEquals(1, Node.DECR_FLAG);
1909:       assertEquals(32, Node.INCRDECR_PROP);
1910:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1911:       assertEquals(12, Node.COLUMN_BITS);
1912:       assertEquals(56, Node.CHANGE_TIME);
1913:       assertEquals(8, Node.FLAG_NO_THROWS);
1914:       assertEquals(48, Node.DIRECTIVES);
1915:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1916:       assertEquals(37, Node.OPT_ARG_NAME);
1917:       assertEquals(39, Node.EMPTY_BLOCK);
1918:       assertEquals(29, Node.JSDOC_INFO_PROP);
1919:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1920:       assertEquals(57, Node.REFLECTED_OBJECT);
1921:       assertEquals(52, Node.LENGTH);
1922:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1923:       
1924:       boolean boolean5 = node2.isAssign();
1925:       assertFalse(boolean5);
1926:       assertFalse(node0.isWith());
1927:       assertFalse(node0.isNot());
1928:       assertFalse(node0.isObjectLit());
1929:       assertFalse(node0.isExprResult());
1930:       assertFalse(node0.isScript());
1931:       assertFalse(node0.isInstanceOf());
1932:       assertFalse(node0.hasOneChild());
1933:       assertFalse(node0.isThis());
1934:       assertFalse(node0.hasChildren());
1935:       assertFalse(node0.isBreak());
1936:       assertFalse(node0.isTypeOf());
1937:       assertFalse(node0.isAssign());
1938:       assertFalse(node0.isDec());
1939:       assertFalse(node0.isComma());
1940:       assertFalse(node0.isGetElem());
1941:       assertFalse(node0.isOr());
1942:       assertEquals(0, node0.getCharno());
1943:       assertFalse(node0.isCase());
1944:       assertFalse(node0.isDo());
1945:       assertFalse(node0.hasMoreThanOneChild());
1946:       assertFalse(node0.isAdd());
1947:       assertFalse(node0.isHook());
1948:       assertFalse(node0.isAssignAdd());
1949:       assertFalse(node0.isLabel());
1950:       assertFalse(node0.isNew());
1951:       assertFalse(node0.isBlock());
1952:       assertFalse(node0.isVar());
1953:       assertFalse(node0.isGetterDef());
1954:       assertFalse(node0.isNumber());
1955:       assertFalse(node0.isLabelName());
1956:       assertFalse(node0.isArrayLit());
1957:       assertFalse(node0.isParamList());
1958:       assertFalse(node0.isSwitch());
1959:       assertFalse(node0.isStringKey());
1960:       assertFalse(node0.isDefaultCase());
1961:       assertFalse(node0.isRegExp());
1962:       assertFalse(node0.isFunction());
1963:       assertFalse(node0.isCatch());
1964:       assertFalse(node0.isTry());
1965:       assertEquals(0, node0.getChildCount());
1966:       assertFalse(node0.isFor());
1967:       assertFalse(node0.isDelProp());
1968:       assertEquals(0, node0.getSourcePosition());
1969:       assertFalse(node0.isIf());
1970:       assertFalse(node0.isName());
1971:       assertFalse(node0.isCall());
1972:       assertFalse(node0.isSetterDef());
1973:       assertFalse(node0.isEmpty());
1974:       assertFalse(node0.isIn());
1975:       assertFalse(node0.isTrue());
1976:       assertFalse(node0.isVoid());
1977:       assertFalse(node0.isNull());
1978:       assertFalse(node0.isNE());
1979:       assertFalse(node0.isString());
1980:       assertFalse(node0.isWhile());
1981:       assertFalse(node0.isContinue());
1982:       assertFalse(node0.isInc());
1983:       assertEquals(0, node0.getType());
1984:       assertFalse(node0.isReturn());
1985:       assertFalse(node0.isThrow());
1986:       assertFalse(node0.isFalse());
1987:       assertFalse(node0.isGetProp());
1988:       assertFalse(node0.isCast());
1989:       assertEquals(0, node0.getLineno());
1990:       assertFalse(node0.isAnd());
1991:       assertFalse(node0.isDebugger());
1992:       assertTrue(node1.isString());
1993:       assertFalse(node1.isAdd());
1994:       assertFalse(node1.isBlock());
1995:       assertFalse(node1.isDo());
1996:       assertFalse(node1.isNew());
1997:       assertFalse(node1.isCall());
1998:       assertFalse(node1.hasMoreThanOneChild());
1999:       assertFalse(node1.isWhile());
2000:       assertFalse(node1.isContinue());
2001:       assertFalse(node1.isVar());
2002:       assertFalse(node1.isReturn());
2003:       assertFalse(node1.isLabel());
2004:       assertFalse(node1.isParamList());
2005:       assertFalse(node1.isLabelName());
2006:       assertFalse(node1.isStringKey());
2007:       assertFalse(node1.isNumber());
2008:       assertEquals((-1), node1.getSourcePosition());
2009:       assertFalse(node1.isDebugger());
2010:       assertFalse(node1.isTrue());
2011:       assertFalse(node1.isVoid());
2012:       assertFalse(node1.isExprResult());
2013:       assertFalse(node1.isDefaultCase());
2014:       assertFalse(node1.isArrayLit());
2015:       assertFalse(node1.isGetElem());
2016:       assertEquals(0, node1.getChildCount());
2017:       assertFalse(node1.isDec());
2018:       assertFalse(node1.hasChildren());
2019:       assertFalse(node1.isTypeOf());
2020:       assertFalse(node1.isAssign());
2021:       assertFalse(node1.isAssignAdd());
2022:       assertFalse(node1.isBreak());
2023:       assertFalse(node1.isDelProp());
2024:       assertFalse(node1.isName());
2025:       assertFalse(node1.isEmpty());
2026:       assertFalse(node1.isNull());
2027:       assertFalse(node1.isOr());
2028:       assertFalse(node1.isInc());
2029:       assertFalse(node1.isSwitch());
2030:       assertFalse(node1.isCase());
2031:       assertFalse(node1.isThrow());
2032:       assertFalse(node1.isFalse());
2033:       assertFalse(node1.isHook());
2034:       assertFalse(node1.isThis());
2035:       assertFalse(node1.isComma());
2036:       assertFalse(node1.isGetProp());
2037:       assertFalse(node1.isObjectLit());
2038:       assertFalse(node1.isAnd());
2039:       assertFalse(node1.isGetterDef());
2040:       assertFalse(node1.isNot());
2041:       assertEquals((-1), node1.getCharno());
2042:       assertFalse(node1.isFunction());
2043:       assertFalse(node1.isTry());
2044:       assertFalse(node1.hasOneChild());
2045:       assertFalse(node1.isScript());
2046:       assertFalse(node1.isFor());
2047:       assertEquals(40, node1.getType());
2048:       assertFalse(node1.isWith());
2049:       assertFalse(node1.isCatch());
2050:       assertFalse(node1.isCast());
2051:       assertFalse(node1.isRegExp());
2052:       assertFalse(node1.isNE());
2053:       assertFalse(node1.isIf());
2054:       assertFalse(node1.isInstanceOf());
2055:       assertFalse(node1.isSetterDef());
2056:       assertEquals((-1), node1.getLineno());
2057:       assertFalse(node1.isIn());
2058:       assertEquals(2, node2.getCharno());
2059:       assertFalse(node2.isDefaultCase());
2060:       assertFalse(node2.isTrue());
2061:       assertFalse(node2.isTry());
2062:       assertFalse(node2.isVoid());
2063:       assertFalse(node2.isDebugger());
2064:       assertFalse(node2.isGetterDef());
2065:       assertFalse(node2.isIf());
2066:       assertTrue(node2.hasOneChild());
2067:       assertFalse(node2.isFor());
2068:       assertFalse(node2.isNE());
2069:       assertFalse(node2.isNull());
2070:       assertFalse(node2.isName());
2071:       assertFalse(node2.isDelProp());
2072:       assertEquals(1, node2.getChildCount());
2073:       assertFalse(node2.isCatch());
2074:       assertTrue(node2.hasChildren());
2075:       assertFalse(node2.isCall());
2076:       assertFalse(node2.isBlock());
2077:       assertFalse(node2.isRegExp());
2078:       assertFalse(node2.isNew());
2079:       assertFalse(node2.isCase());
2080:       assertFalse(node2.isSwitch());
2081:       assertFalse(node2.isDo());
2082:       assertEquals(125, node2.getLineno());
2083:       assertFalse(node2.isAdd());
2084:       assertFalse(node2.isOr());
2085:       assertFalse(node2.isParamList());
2086:       assertFalse(node2.isEmpty());
2087:       assertFalse(node2.isStringKey());
2088:       assertFalse(node2.isAssignAdd());
2089:       assertFalse(node2.isLabelName());
2090:       assertFalse(node2.isArrayLit());
2091:       assertFalse(node2.isVar());
2092:       assertFalse(node2.isLabel());
2093:       assertFalse(node2.isScript());
2094:       assertFalse(node2.isExprResult());
2095:       assertFalse(node2.isAnd());
2096:       assertFalse(node2.isNot());
2097:       assertFalse(node2.isObjectLit());
2098:       assertEquals(2227, node2.getType());
2099:       assertFalse(node2.isNumber());
2100:       assertFalse(node2.isDec());
2101:       assertFalse(node2.isBreak());
2102:       assertFalse(node2.isThis());
2103:       assertFalse(node2.isGetProp());
2104:       assertFalse(node2.isGetElem());
2105:       assertFalse(node2.isHook());
2106:       assertFalse(node2.isInstanceOf());
2107:       assertFalse(node2.isReturn());
2108:       assertEquals(512002, node2.getSourcePosition());
2109:       assertFalse(node2.isWith());
2110:       assertFalse(node2.hasMoreThanOneChild());
2111:       assertFalse(node2.isComma());
2112:       assertFalse(node2.isAssign());
2113:       assertFalse(node2.isTypeOf());
2114:       assertFalse(node2.isString());
2115:       assertFalse(node2.isInc());
2116:       assertFalse(node2.isWhile());
2117:       assertFalse(node2.isIn());
2118:       assertFalse(node2.isSetterDef());
2119:       assertFalse(node2.isThrow());
2120:       assertFalse(node2.isCast());
2121:       assertFalse(node2.isFalse());
2122:       assertFalse(node2.isContinue());
2123:       assertFalse(node2.isFunction());
2124:       assertTrue(boolean5 == boolean3);
2125:       assertFalse(boolean5 == boolean1);
2126:       assertTrue(boolean5 == boolean2);
2127:       assertTrue(boolean5 == boolean4);
2128:       assertTrue(boolean5 == boolean0);
2129:       assertFalse(node0.equals((Object)node2));
2130:       assertFalse(node0.equals((Object)node1));
2131:       assertFalse(node1.equals((Object)node0));
2132:       assertFalse(node1.equals((Object)node2));
2133:       assertFalse(node2.equals((Object)node1));
2134:       assertFalse(node2.equals((Object)node0));
2135:       assertEquals(43, Node.IS_CONSTANT_NAME);
2136:       assertEquals(36, Node.QUOTED_PROP);
2137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2138:       assertEquals(4095, Node.COLUMN_MASK);
2139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2140:       assertEquals(48, Node.DIRECTIVES);
2141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2142:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2143:       assertEquals(50, Node.FREE_CALL);
2144:       assertEquals(32, Node.INCRDECR_PROP);
2145:       assertEquals(12, Node.COLUMN_BITS);
2146:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2147:       assertEquals(1, Node.DECR_FLAG);
2148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2149:       assertEquals(57, Node.LAST_PROP);
2150:       assertEquals(54, Node.SLASH_V);
2151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2152:       assertEquals(30, Node.VAR_ARGS_NAME);
2153:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2154:       assertEquals(46, Node.IS_NAMESPACE);
2155:       assertEquals(57, Node.REFLECTED_OBJECT);
2156:       assertEquals(40, Node.ORIGINALNAME_PROP);
2157:       assertEquals(37, Node.OPT_ARG_NAME);
2158:       assertEquals(49, Node.DIRECT_EVAL);
2159:       assertEquals(47, Node.IS_DISPATCHER);
2160:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2161:       assertEquals(29, Node.JSDOC_INFO_PROP);
2162:       assertEquals(56, Node.CHANGE_TIME);
2163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2164:       assertEquals(8, Node.FLAG_NO_THROWS);
2165:       
2166:       boolean boolean6 = node1.isDelProp();
2167:       assertFalse(boolean6);
2168:       assertTrue(node1.isString());
2169:       assertFalse(node1.isAdd());
2170:       assertFalse(node1.isBlock());
2171:       assertFalse(node1.isDo());
2172:       assertFalse(node1.isNew());
2173:       assertFalse(node1.isCall());
2174:       assertFalse(node1.hasMoreThanOneChild());
2175:       assertFalse(node1.isWhile());
2176:       assertFalse(node1.isContinue());
2177:       assertFalse(node1.isVar());
2178:       assertFalse(node1.isReturn());
2179:       assertFalse(node1.isLabel());
2180:       assertFalse(node1.isParamList());
2181:       assertFalse(node1.isLabelName());
2182:       assertFalse(node1.isStringKey());
2183:       assertFalse(node1.isNumber());
2184:       assertEquals((-1), node1.getSourcePosition());
2185:       assertFalse(node1.isDebugger());
2186:       assertFalse(node1.isTrue());
2187:       assertFalse(node1.isVoid());
2188:       assertFalse(node1.isExprResult());
2189:       assertFalse(node1.isDefaultCase());
2190:       assertFalse(node1.isArrayLit());
2191:       assertFalse(node1.isGetElem());
2192:       assertEquals(0, node1.getChildCount());
2193:       assertFalse(node1.isDec());
2194:       assertFalse(node1.hasChildren());
2195:       assertFalse(node1.isTypeOf());
2196:       assertFalse(node1.isAssign());
2197:       assertFalse(node1.isAssignAdd());
2198:       assertFalse(node1.isBreak());
2199:       assertFalse(node1.isDelProp());
2200:       assertFalse(node1.isName());
2201:       assertFalse(node1.isEmpty());
2202:       assertFalse(node1.isNull());
2203:       assertFalse(node1.isOr());
2204:       assertFalse(node1.isInc());
2205:       assertFalse(node1.isSwitch());
2206:       assertFalse(node1.isCase());
2207:       assertFalse(node1.isThrow());
2208:       assertFalse(node1.isFalse());
2209:       assertFalse(node1.isHook());
2210:       assertFalse(node1.isThis());
2211:       assertFalse(node1.isComma());
2212:       assertFalse(node1.isGetProp());
2213:       assertFalse(node1.isObjectLit());
2214:       assertFalse(node1.isAnd());
2215:       assertFalse(node1.isGetterDef());
2216:       assertFalse(node1.isNot());
2217:       assertEquals((-1), node1.getCharno());
2218:       assertFalse(node1.isFunction());
2219:       assertFalse(node1.isTry());
2220:       assertFalse(node1.hasOneChild());
2221:       assertFalse(node1.isScript());
2222:       assertFalse(node1.isFor());
2223:       assertEquals(40, node1.getType());
2224:       assertFalse(node1.isWith());
2225:       assertFalse(node1.isCatch());
2226:       assertFalse(node1.isCast());
2227:       assertFalse(node1.isRegExp());
2228:       assertFalse(node1.isNE());
2229:       assertFalse(node1.isIf());
2230:       assertFalse(node1.isInstanceOf());
2231:       assertFalse(node1.isSetterDef());
2232:       assertEquals((-1), node1.getLineno());
2233:       assertFalse(node1.isIn());
2234:       assertTrue(boolean6 == boolean4);
2235:       assertTrue(boolean6 == boolean2);
2236:       assertTrue(boolean6 == boolean0);
2237:       assertTrue(boolean6 == boolean5);
2238:       assertTrue(boolean6 == boolean3);
2239:       assertFalse(boolean6 == boolean1);
2240:       assertFalse(node1.equals((Object)node0));
2241:       assertFalse(node1.equals((Object)node2));
2242:       
2243:       Iterable<Node> iterable0 = node0.children();
2244:       assertFalse(node0.isWith());
2245:       assertFalse(node0.isNot());
2246:       assertFalse(node0.isObjectLit());
2247:       assertFalse(node0.isExprResult());
2248:       assertFalse(node0.isScript());
2249:       assertFalse(node0.isInstanceOf());
2250:       assertFalse(node0.hasOneChild());
2251:       assertFalse(node0.isThis());
2252:       assertFalse(node0.hasChildren());
2253:       assertFalse(node0.isBreak());
2254:       assertFalse(node0.isTypeOf());
2255:       assertFalse(node0.isAssign());
2256:       assertFalse(node0.isDec());
2257:       assertFalse(node0.isComma());
2258:       assertFalse(node0.isGetElem());
2259:       assertFalse(node0.isOr());
2260:       assertEquals(0, node0.getCharno());
2261:       assertFalse(node0.isCase());
2262:       assertFalse(node0.isDo());
2263:       assertFalse(node0.hasMoreThanOneChild());
2264:       assertFalse(node0.isAdd());
2265:       assertFalse(node0.isHook());
2266:       assertFalse(node0.isAssignAdd());
2267:       assertFalse(node0.isLabel());
2268:       assertFalse(node0.isNew());
2269:       assertFalse(node0.isBlock());
2270:       assertFalse(node0.isVar());
2271:       assertFalse(node0.isGetterDef());
2272:       assertFalse(node0.isNumber());
2273:       assertFalse(node0.isLabelName());
2274:       assertFalse(node0.isArrayLit());
2275:       assertFalse(node0.isParamList());
2276:       assertFalse(node0.isSwitch());
2277:       assertFalse(node0.isStringKey());
2278:       assertFalse(node0.isDefaultCase());
2279:       assertFalse(node0.isRegExp());
2280:       assertFalse(node0.isFunction());
2281:       assertFalse(node0.isCatch());
2282:       assertFalse(node0.isTry());
2283:       assertEquals(0, node0.getChildCount());
2284:       assertFalse(node0.isFor());
2285:       assertFalse(node0.isDelProp());
2286:       assertEquals(0, node0.getSourcePosition());
2287:       assertFalse(node0.isIf());
2288:       assertFalse(node0.isName());
2289:       assertFalse(node0.isCall());
2290:       assertFalse(node0.isSetterDef());
2291:       assertFalse(node0.isEmpty());
2292:       assertFalse(node0.isIn());
2293:       assertFalse(node0.isTrue());
2294:       assertFalse(node0.isVoid());
2295:       assertFalse(node0.isNull());
2296:       assertFalse(node0.isNE());
2297:       assertFalse(node0.isString());
2298:       assertFalse(node0.isWhile());
2299:       assertFalse(node0.isContinue());
2300:       assertFalse(node0.isInc());
2301:       assertEquals(0, node0.getType());
2302:       assertFalse(node0.isReturn());
2303:       assertFalse(node0.isThrow());
2304:       assertFalse(node0.isFalse());
2305:       assertFalse(node0.isGetProp());
2306:       assertFalse(node0.isCast());
2307:       assertEquals(0, node0.getLineno());
2308:       assertFalse(node0.isAnd());
2309:       assertFalse(node0.isDebugger());
2310:       assertFalse(iterable0.contains(node0));
2311:       assertFalse(node0.equals((Object)node2));
2312:       assertFalse(node0.equals((Object)node1));
2313:       
2314:       boolean boolean7 = node1.isGetElem();
2315:       assertFalse(boolean7);
2316:       assertTrue(node1.isString());
2317:       assertFalse(node1.isAdd());
2318:       assertFalse(node1.isBlock());
2319:       assertFalse(node1.isDo());
2320:       assertFalse(node1.isNew());
2321:       assertFalse(node1.isCall());
2322:       assertFalse(node1.hasMoreThanOneChild());
2323:       assertFalse(node1.isWhile());
2324:       assertFalse(node1.isContinue());
2325:       assertFalse(node1.isVar());
2326:       assertFalse(node1.isReturn());
2327:       assertFalse(node1.isLabel());
2328:       assertFalse(node1.isParamList());
2329:       assertFalse(node1.isLabelName());
2330:       assertFalse(node1.isStringKey());
2331:       assertFalse(node1.isNumber());
2332:       assertEquals((-1), node1.getSourcePosition());
2333:       assertFalse(node1.isDebugger());
2334:       assertFalse(node1.isTrue());
2335:       assertFalse(node1.isVoid());
2336:       assertFalse(node1.isExprResult());
2337:       assertFalse(node1.isDefaultCase());
2338:       assertFalse(node1.isArrayLit());
2339:       assertFalse(node1.isGetElem());
2340:       assertEquals(0, node1.getChildCount());
2341:       assertFalse(node1.isDec());
2342:       assertFalse(node1.hasChildren());
2343:       assertFalse(node1.isTypeOf());
2344:       assertFalse(node1.isAssign());
2345:       assertFalse(node1.isAssignAdd());
2346:       assertFalse(node1.isBreak());
2347:       assertFalse(node1.isDelProp());
2348:       assertFalse(node1.isName());
2349:       assertFalse(node1.isEmpty());
2350:       assertFalse(node1.isNull());
2351:       assertFalse(node1.isOr());
2352:       assertFalse(node1.isInc());
2353:       assertFalse(node1.isSwitch());
2354:       assertFalse(node1.isCase());
2355:       assertFalse(node1.isThrow());
2356:       assertFalse(node1.isFalse());
2357:       assertFalse(node1.isHook());
2358:       assertFalse(node1.isThis());
2359:       assertFalse(node1.isComma());
2360:       assertFalse(node1.isGetProp());
2361:       assertFalse(node1.isObjectLit());
2362:       assertFalse(node1.isAnd());
2363:       assertFalse(node1.isGetterDef());
2364:       assertFalse(node1.isNot());
2365:       assertEquals((-1), node1.getCharno());
2366:       assertFalse(node1.isFunction());
2367:       assertFalse(node1.isTry());
2368:       assertFalse(node1.hasOneChild());
2369:       assertFalse(node1.isScript());
2370:       assertFalse(node1.isFor());
2371:       assertEquals(40, node1.getType());
2372:       assertFalse(node1.isWith());
2373:       assertFalse(node1.isCatch());
2374:       assertFalse(node1.isCast());
2375:       assertFalse(node1.isRegExp());
2376:       assertFalse(node1.isNE());
2377:       assertFalse(node1.isIf());
2378:       assertFalse(node1.isInstanceOf());
2379:       assertFalse(node1.isSetterDef());
2380:       assertEquals((-1), node1.getLineno());
2381:       assertFalse(node1.isIn());
2382:       assertFalse(boolean7 == boolean1);
2383:       assertTrue(boolean7 == boolean2);
2384:       assertTrue(boolean7 == boolean3);
2385:       assertTrue(boolean7 == boolean6);
2386:       assertTrue(boolean7 == boolean5);
2387:       assertTrue(boolean7 == boolean4);
2388:       assertTrue(boolean7 == boolean0);
2389:       assertFalse(node1.equals((Object)node0));
2390:       assertFalse(node1.equals((Object)node2));
2391:       
2392:       boolean boolean8 = node1.isNew();
2393:       assertFalse(boolean8);
2394:       assertTrue(node1.isString());
2395:       assertFalse(node1.isAdd());
2396:       assertFalse(node1.isBlock());
2397:       assertFalse(node1.isDo());
2398:       assertFalse(node1.isNew());
2399:       assertFalse(node1.isCall());
2400:       assertFalse(node1.hasMoreThanOneChild());
2401:       assertFalse(node1.isWhile());
2402:       assertFalse(node1.isContinue());
2403:       assertFalse(node1.isVar());
2404:       assertFalse(node1.isReturn());
2405:       assertFalse(node1.isLabel());
2406:       assertFalse(node1.isParamList());
2407:       assertFalse(node1.isLabelName());
2408:       assertFalse(node1.isStringKey());
2409:       assertFalse(node1.isNumber());
2410:       assertEquals((-1), node1.getSourcePosition());
2411:       assertFalse(node1.isDebugger());
2412:       assertFalse(node1.isTrue());
2413:       assertFalse(node1.isVoid());
2414:       assertFalse(node1.isExprResult());
2415:       assertFalse(node1.isDefaultCase());
2416:       assertFalse(node1.isArrayLit());
2417:       assertFalse(node1.isGetElem());
2418:       assertEquals(0, node1.getChildCount());
2419:       assertFalse(node1.isDec());
2420:       assertFalse(node1.hasChildren());
2421:       assertFalse(node1.isTypeOf());
2422:       assertFalse(node1.isAssign());
2423:       assertFalse(node1.isAssignAdd());
2424:       assertFalse(node1.isBreak());
2425:       assertFalse(node1.isDelProp());
2426:       assertFalse(node1.isName());
2427:       assertFalse(node1.isEmpty());
2428:       assertFalse(node1.isNull());
2429:       assertFalse(node1.isOr());
2430:       assertFalse(node1.isInc());
2431:       assertFalse(node1.isSwitch());
2432:       assertFalse(node1.isCase());
2433:       assertFalse(node1.isThrow());
2434:       assertFalse(node1.isFalse());
2435:       assertFalse(node1.isHook());
2436:       assertFalse(node1.isThis());
2437:       assertFalse(node1.isComma());
2438:       assertFalse(node1.isGetProp());
2439:       assertFalse(node1.isObjectLit());
2440:       assertFalse(node1.isAnd());
2441:       assertFalse(node1.isGetterDef());
2442:       assertFalse(node1.isNot());
2443:       assertEquals((-1), node1.getCharno());
2444:       assertFalse(node1.isFunction());
2445:       assertFalse(node1.isTry());
2446:       assertFalse(node1.hasOneChild());
2447:       assertFalse(node1.isScript());
2448:       assertFalse(node1.isFor());
2449:       assertEquals(40, node1.getType());
2450:       assertFalse(node1.isWith());
2451:       assertFalse(node1.isCatch());
2452:       assertFalse(node1.isCast());
2453:       assertFalse(node1.isRegExp());
2454:       assertFalse(node1.isNE());
2455:       assertFalse(node1.isIf());
2456:       assertFalse(node1.isInstanceOf());
2457:       assertFalse(node1.isSetterDef());
2458:       assertEquals((-1), node1.getLineno());
2459:       assertFalse(node1.isIn());
2460:       assertTrue(boolean8 == boolean5);
2461:       assertTrue(boolean8 == boolean4);
2462:       assertTrue(boolean8 == boolean0);
2463:       assertTrue(boolean8 == boolean2);
2464:       assertFalse(boolean8 == boolean1);
2465:       assertTrue(boolean8 == boolean7);
2466:       assertTrue(boolean8 == boolean6);
2467:       assertTrue(boolean8 == boolean3);
2468:       assertFalse(node1.equals((Object)node0));
2469:       assertFalse(node1.equals((Object)node2));
2470:       
2471:       Node node3 = Node.newNumber(3522.04892294503);
2472:       assertFalse(node3.isWith());
2473:       assertFalse(node3.isNot());
2474:       assertFalse(node3.isObjectLit());
2475:       assertFalse(node3.isExprResult());
2476:       assertFalse(node3.isScript());
2477:       assertFalse(node3.isInstanceOf());
2478:       assertFalse(node3.hasOneChild());
2479:       assertFalse(node3.isThis());
2480:       assertFalse(node3.hasChildren());
2481:       assertFalse(node3.isBreak());
2482:       assertFalse(node3.isTypeOf());
2483:       assertFalse(node3.isAssign());
2484:       assertFalse(node3.isDec());
2485:       assertFalse(node3.isComma());
2486:       assertFalse(node3.isGetElem());
2487:       assertEquals((-1), node3.getLineno());
2488:       assertFalse(node3.isOr());
2489:       assertFalse(node3.isString());
2490:       assertFalse(node3.isWhile());
2491:       assertFalse(node3.isInc());
2492:       assertFalse(node3.isContinue());
2493:       assertFalse(node3.isReturn());
2494:       assertTrue(node3.isNumber());
2495:       assertFalse(node3.isThrow());
2496:       assertEquals((-1), node3.getSourcePosition());
2497:       assertFalse(node3.isFalse());
2498:       assertFalse(node3.isGetProp());
2499:       assertFalse(node3.isCast());
2500:       assertFalse(node3.isAnd());
2501:       assertFalse(node3.isDebugger());
2502:       assertFalse(node3.isDefaultCase());
2503:       assertFalse(node3.isRegExp());
2504:       assertFalse(node3.isFunction());
2505:       assertFalse(node3.isCatch());
2506:       assertFalse(node3.isTry());
2507:       assertEquals(0, node3.getChildCount());
2508:       assertFalse(node3.isFor());
2509:       assertFalse(node3.isDelProp());
2510:       assertFalse(node3.isIf());
2511:       assertFalse(node3.isName());
2512:       assertFalse(node3.isCall());
2513:       assertFalse(node3.isSetterDef());
2514:       assertFalse(node3.isEmpty());
2515:       assertFalse(node3.isIn());
2516:       assertFalse(node3.isTrue());
2517:       assertFalse(node3.isVoid());
2518:       assertFalse(node3.isNull());
2519:       assertFalse(node3.isNE());
2520:       assertEquals(39, node3.getType());
2521:       assertFalse(node3.isCase());
2522:       assertFalse(node3.isDo());
2523:       assertFalse(node3.hasMoreThanOneChild());
2524:       assertFalse(node3.isAdd());
2525:       assertFalse(node3.isHook());
2526:       assertFalse(node3.isAssignAdd());
2527:       assertFalse(node3.isLabel());
2528:       assertFalse(node3.isNew());
2529:       assertFalse(node3.isBlock());
2530:       assertFalse(node3.isVar());
2531:       assertFalse(node3.isGetterDef());
2532:       assertFalse(node3.isLabelName());
2533:       assertFalse(node3.isArrayLit());
2534:       assertEquals((-1), node3.getCharno());
2535:       assertFalse(node3.isParamList());
2536:       assertFalse(node3.isSwitch());
2537:       assertFalse(node3.isStringKey());
2538:       assertFalse(node3.equals((Object)node2));
2539:       assertFalse(node3.equals((Object)node0));
2540:       assertFalse(node3.equals((Object)node1));
2541:   }
2542: }
RegularFileObject[/tmp/EvoSuite_373_1628161388811/com/google/javascript/rhino/Node_373_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:09 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_373_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_373_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_373_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:03:09.445 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0, 0, 0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean0 = node0.getBooleanProp(0);
assertFalse(boolean0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node0.mayMutateGlobalStateOrThrow();
assertTrue(boolean1);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(boolean1 == boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean2 = node0.isVarArgs();
assertFalse(boolean2);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

Node node1 = Node.newString("empty_block");
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean3 = node1.isQuotedString();
assertFalse(boolean3);
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean4 = node1.isThrow();
assertFalse(boolean4);
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node1.getStaticSourceFile();
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node_FileLevelJsDocBuilder1.append("Use SerializedForm");
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node_FileLevelJsDocBuilder0.append("B;pQF7`wa(?K+pW");
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(node_FileLevelJsDocBuilder0.equals((Object)node_FileLevelJsDocBuilder1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node_FileLevelJsDocBuilder0.append("empty_block");
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(node_FileLevelJsDocBuilder0.equals((Object)node_FileLevelJsDocBuilder1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node_FileLevelJsDocBuilder1.append("Use SerializedForm");
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node_FileLevelJsDocBuilder0.append("B;pQF7`wa(?K+pW");
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(node_FileLevelJsDocBuilder0.equals((Object)node_FileLevelJsDocBuilder1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

Node node2 = new Node(2227, node0, node1, node0, node0, 125, 2);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(2, node2.getCharno());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertEquals(125, node2.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isParamList());
assertFalse(node2.isEmpty());
assertFalse(node2.isStringKey());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(2227, node2.getType());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertEquals(512002, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean5 = node2.isAssign();
assertFalse(boolean5);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(2, node2.getCharno());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertEquals(125, node2.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isParamList());
assertFalse(node2.isEmpty());
assertFalse(node2.isStringKey());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(2227, node2.getType());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertEquals(512002, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertTrue(boolean5 == boolean3);
assertFalse(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);

boolean boolean6 = node1.isDelProp();
assertFalse(boolean6);
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean3);
assertFalse(boolean6 == boolean1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));

boolean boolean7 = node1.isGetElem();
assertFalse(boolean7);
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(boolean7 == boolean1);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

boolean boolean8 = node1.isNew();
assertFalse(boolean8);
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean2);
assertFalse(boolean8 == boolean1);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

Node node3 = Node.newNumber(3522.04892294503);
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasOneChild());
assertFalse(node3.isThis());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertTrue(node3.isNumber());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isCatch());
assertFalse(node3.isTry());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFor());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isSetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertEquals(39, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAdd());
assertFalse(node3.isHook());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isNew());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));


[MASTER] 11:03:12.709 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_403_1628161392191/com/google/javascript/rhino/Node_403_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_403_1628161392191/com/google/javascript/rhino/Node_403_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:12.709 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:12.709 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:12.709 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1202
[MASTER] 11:03:12.710 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_403_1628161392191/com/google/javascript/rhino/Node_403_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:12 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_403_tmp__ESTest extends Node_403_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(48, "3f");
23:       assertFalse(node0.isScript());
24:       assertFalse(node0.isExprResult());
25:       assertFalse(node0.hasOneChild());
26:       assertFalse(node0.isCast());
27:       assertFalse(node0.isInstanceOf());
28:       assertFalse(node0.isGetElem());
29:       assertFalse(node0.isWith());
30:       assertFalse(node0.isAssign());
31:       assertFalse(node0.isDec());
32:       assertFalse(node0.isTypeOf());
33:       assertFalse(node0.isThis());
34:       assertFalse(node0.isComma());
35:       assertEquals((-1), node0.getSourcePosition());
36:       assertFalse(node0.isGetProp());
37:       assertFalse(node0.hasChildren());
38:       assertFalse(node0.isLabelName());
39:       assertFalse(node0.isAnd());
40:       assertFalse(node0.isNot());
41:       assertFalse(node0.isNumber());
42:       assertFalse(node0.isObjectLit());
43:       assertFalse(node0.isInc());
44:       assertFalse(node0.isBlock());
45:       assertFalse(node0.isCase());
46:       assertFalse(node0.hasMoreThanOneChild());
47:       assertFalse(node0.isContinue());
48:       assertFalse(node0.isThrow());
49:       assertFalse(node0.isHook());
50:       assertFalse(node0.isFalse());
51:       assertFalse(node0.isSetterDef());
52:       assertFalse(node0.isNE());
53:       assertEquals(48, node0.getType());
54:       assertEquals((-1), node0.getLineno());
55:       assertFalse(node0.isIf());
56:       assertFalse(node0.isIn());
57:       assertFalse(node0.isDebugger());
58:       assertFalse(node0.isTrue());
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isCatch());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isFor());
65:       assertEquals(0, node0.getChildCount());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isRegExp());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isStringKey());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isSwitch());
73:       assertEquals((-1), node0.getCharno());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isDo());
76:       assertFalse(node0.isWhile());
77:       assertFalse(node0.isNew());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isLabel());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isNull());
84:       assertFalse(node0.isAssignAdd());
85:       assertFalse(node0.isName());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isEmpty());
88:       assertFalse(node0.isOr());
89:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(55, Node.INFERRED_FUNCTION);
95:       assertEquals(56, Node.CHANGE_TIME);
96:       assertEquals(2, Node.POST_FLAG);
97:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
98:       assertEquals(8, Node.FLAG_NO_THROWS);
99:       assertEquals(39, Node.EMPTY_BLOCK);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(40, Node.ORIGINALNAME_PROP);
102:       assertEquals(29, Node.JSDOC_INFO_PROP);
103:       assertEquals(30, Node.VAR_ARGS_NAME);
104:       assertEquals(47, Node.IS_DISPATCHER);
105:       assertEquals(57, Node.LAST_PROP);
106:       assertEquals(52, Node.LENGTH);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(50, Node.FREE_CALL);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(46, Node.IS_NAMESPACE);
113:       assertEquals(54, Node.SLASH_V);
114:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
115:       assertEquals(37, Node.OPT_ARG_NAME);
116:       assertEquals(48, Node.DIRECTIVES);
117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
118:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(4095, Node.COLUMN_MASK);
121:       assertEquals(1, Node.DECR_FLAG);
122:       assertEquals(32, Node.INCRDECR_PROP);
123:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
124:       assertEquals(12, Node.COLUMN_BITS);
125:       
126:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
127:       assertFalse(node0.isScript());
128:       assertFalse(node0.isExprResult());
129:       assertFalse(node0.hasOneChild());
130:       assertFalse(node0.isCast());
131:       assertFalse(node0.isInstanceOf());
132:       assertFalse(node0.isGetElem());
133:       assertFalse(node0.isWith());
134:       assertFalse(node0.isAssign());
135:       assertFalse(node0.isDec());
136:       assertFalse(node0.isTypeOf());
137:       assertFalse(node0.isThis());
138:       assertFalse(node0.isComma());
139:       assertEquals((-1), node0.getSourcePosition());
140:       assertFalse(node0.isGetProp());
141:       assertFalse(node0.hasChildren());
142:       assertFalse(node0.isLabelName());
143:       assertFalse(node0.isAnd());
144:       assertFalse(node0.isNot());
145:       assertFalse(node0.isNumber());
146:       assertFalse(node0.isObjectLit());
147:       assertFalse(node0.isInc());
148:       assertFalse(node0.isBlock());
149:       assertFalse(node0.isCase());
150:       assertFalse(node0.hasMoreThanOneChild());
151:       assertFalse(node0.isContinue());
152:       assertFalse(node0.isThrow());
153:       assertFalse(node0.isHook());
154:       assertFalse(node0.isFalse());
155:       assertFalse(node0.isSetterDef());
156:       assertFalse(node0.isNE());
157:       assertEquals(48, node0.getType());
158:       assertEquals((-1), node0.getLineno());
159:       assertFalse(node0.isIf());
160:       assertFalse(node0.isIn());
161:       assertFalse(node0.isDebugger());
162:       assertFalse(node0.isTrue());
163:       assertFalse(node0.isTry());
164:       assertFalse(node0.isDefaultCase());
165:       assertFalse(node0.isVoid());
166:       assertFalse(node0.isCatch());
167:       assertFalse(node0.isArrayLit());
168:       assertFalse(node0.isFor());
169:       assertEquals(0, node0.getChildCount());
170:       assertFalse(node0.isFunction());
171:       assertFalse(node0.isRegExp());
172:       assertFalse(node0.isParamList());
173:       assertFalse(node0.isStringKey());
174:       assertFalse(node0.isString());
175:       assertFalse(node0.isGetterDef());
176:       assertFalse(node0.isSwitch());
177:       assertEquals((-1), node0.getCharno());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isDo());
180:       assertFalse(node0.isWhile());
181:       assertFalse(node0.isNew());
182:       assertFalse(node0.isVar());
183:       assertFalse(node0.isCall());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isLabel());
186:       assertFalse(node0.isBreak());
187:       assertFalse(node0.isNull());
188:       assertFalse(node0.isAssignAdd());
189:       assertFalse(node0.isName());
190:       assertFalse(node0.isDelProp());
191:       assertFalse(node0.isEmpty());
192:       assertFalse(node0.isOr());
193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
194:       assertEquals(43, Node.IS_CONSTANT_NAME);
195:       assertEquals(36, Node.QUOTED_PROP);
196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
197:       assertEquals(53, Node.INPUT_ID);
198:       assertEquals(55, Node.INFERRED_FUNCTION);
199:       assertEquals(56, Node.CHANGE_TIME);
200:       assertEquals(2, Node.POST_FLAG);
201:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
202:       assertEquals(8, Node.FLAG_NO_THROWS);
203:       assertEquals(39, Node.EMPTY_BLOCK);
204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
205:       assertEquals(40, Node.ORIGINALNAME_PROP);
206:       assertEquals(29, Node.JSDOC_INFO_PROP);
207:       assertEquals(30, Node.VAR_ARGS_NAME);
208:       assertEquals(47, Node.IS_DISPATCHER);
209:       assertEquals(57, Node.LAST_PROP);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(50, Node.FREE_CALL);
215:       assertEquals(57, Node.REFLECTED_OBJECT);
216:       assertEquals(46, Node.IS_NAMESPACE);
217:       assertEquals(54, Node.SLASH_V);
218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
219:       assertEquals(37, Node.OPT_ARG_NAME);
220:       assertEquals(48, Node.DIRECTIVES);
221:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(4095, Node.COLUMN_MASK);
225:       assertEquals(1, Node.DECR_FLAG);
226:       assertEquals(32, Node.INCRDECR_PROP);
227:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
228:       assertEquals(12, Node.COLUMN_BITS);
229:       
230:       int int0 = node0.getLength();
231:       assertEquals(0, int0);
232:       assertFalse(node0.isScript());
233:       assertFalse(node0.isExprResult());
234:       assertFalse(node0.hasOneChild());
235:       assertFalse(node0.isCast());
236:       assertFalse(node0.isInstanceOf());
237:       assertFalse(node0.isGetElem());
238:       assertFalse(node0.isWith());
239:       assertFalse(node0.isAssign());
240:       assertFalse(node0.isDec());
241:       assertFalse(node0.isTypeOf());
242:       assertFalse(node0.isThis());
243:       assertFalse(node0.isComma());
244:       assertEquals((-1), node0.getSourcePosition());
245:       assertFalse(node0.isGetProp());
246:       assertFalse(node0.hasChildren());
247:       assertFalse(node0.isLabelName());
248:       assertFalse(node0.isAnd());
249:       assertFalse(node0.isNot());
250:       assertFalse(node0.isNumber());
251:       assertFalse(node0.isObjectLit());
252:       assertFalse(node0.isInc());
253:       assertFalse(node0.isBlock());
254:       assertFalse(node0.isCase());
255:       assertFalse(node0.hasMoreThanOneChild());
256:       assertFalse(node0.isContinue());
257:       assertFalse(node0.isThrow());
258:       assertFalse(node0.isHook());
259:       assertFalse(node0.isFalse());
260:       assertFalse(node0.isSetterDef());
261:       assertFalse(node0.isNE());
262:       assertEquals(48, node0.getType());
263:       assertEquals((-1), node0.getLineno());
264:       assertFalse(node0.isIf());
265:       assertFalse(node0.isIn());
266:       assertFalse(node0.isDebugger());
267:       assertFalse(node0.isTrue());
268:       assertFalse(node0.isTry());
269:       assertFalse(node0.isDefaultCase());
270:       assertFalse(node0.isVoid());
271:       assertFalse(node0.isCatch());
272:       assertFalse(node0.isArrayLit());
273:       assertFalse(node0.isFor());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isFunction());
276:       assertFalse(node0.isRegExp());
277:       assertFalse(node0.isParamList());
278:       assertFalse(node0.isStringKey());
279:       assertFalse(node0.isString());
280:       assertFalse(node0.isGetterDef());
281:       assertFalse(node0.isSwitch());
282:       assertEquals((-1), node0.getCharno());
283:       assertFalse(node0.isAdd());
284:       assertFalse(node0.isDo());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isNew());
287:       assertFalse(node0.isVar());
288:       assertFalse(node0.isCall());
289:       assertFalse(node0.isReturn());
290:       assertFalse(node0.isLabel());
291:       assertFalse(node0.isBreak());
292:       assertFalse(node0.isNull());
293:       assertFalse(node0.isAssignAdd());
294:       assertFalse(node0.isName());
295:       assertFalse(node0.isDelProp());
296:       assertFalse(node0.isEmpty());
297:       assertFalse(node0.isOr());
298:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
299:       assertEquals(43, Node.IS_CONSTANT_NAME);
300:       assertEquals(36, Node.QUOTED_PROP);
301:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
302:       assertEquals(53, Node.INPUT_ID);
303:       assertEquals(55, Node.INFERRED_FUNCTION);
304:       assertEquals(56, Node.CHANGE_TIME);
305:       assertEquals(2, Node.POST_FLAG);
306:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(39, Node.EMPTY_BLOCK);
309:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
310:       assertEquals(40, Node.ORIGINALNAME_PROP);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(30, Node.VAR_ARGS_NAME);
313:       assertEquals(47, Node.IS_DISPATCHER);
314:       assertEquals(57, Node.LAST_PROP);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
318:       assertEquals(49, Node.DIRECT_EVAL);
319:       assertEquals(50, Node.FREE_CALL);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(46, Node.IS_NAMESPACE);
322:       assertEquals(54, Node.SLASH_V);
323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
324:       assertEquals(37, Node.OPT_ARG_NAME);
325:       assertEquals(48, Node.DIRECTIVES);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
328:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
329:       assertEquals(4095, Node.COLUMN_MASK);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertEquals(32, Node.INCRDECR_PROP);
332:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
333:       assertEquals(12, Node.COLUMN_BITS);
334:       
335:       boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ") ");
336:       assertFalse(boolean0);
337:       
338:       node0.removeProp(48);
339:       assertFalse(node0.isScript());
340:       assertFalse(node0.isExprResult());
341:       assertFalse(node0.hasOneChild());
342:       assertFalse(node0.isCast());
343:       assertFalse(node0.isInstanceOf());
344:       assertFalse(node0.isGetElem());
345:       assertFalse(node0.isWith());
346:       assertFalse(node0.isAssign());
347:       assertFalse(node0.isDec());
348:       assertFalse(node0.isTypeOf());
349:       assertFalse(node0.isThis());
350:       assertFalse(node0.isComma());
351:       assertEquals((-1), node0.getSourcePosition());
352:       assertFalse(node0.isGetProp());
353:       assertFalse(node0.hasChildren());
354:       assertFalse(node0.isLabelName());
355:       assertFalse(node0.isAnd());
356:       assertFalse(node0.isNot());
357:       assertFalse(node0.isNumber());
358:       assertFalse(node0.isObjectLit());
359:       assertFalse(node0.isInc());
360:       assertFalse(node0.isBlock());
361:       assertFalse(node0.isCase());
362:       assertFalse(node0.hasMoreThanOneChild());
363:       assertFalse(node0.isContinue());
364:       assertFalse(node0.isThrow());
365:       assertFalse(node0.isHook());
366:       assertFalse(node0.isFalse());
367:       assertFalse(node0.isSetterDef());
368:       assertFalse(node0.isNE());
369:       assertEquals(48, node0.getType());
370:       assertEquals((-1), node0.getLineno());
371:       assertFalse(node0.isIf());
372:       assertFalse(node0.isIn());
373:       assertFalse(node0.isDebugger());
374:       assertFalse(node0.isTrue());
375:       assertFalse(node0.isTry());
376:       assertFalse(node0.isDefaultCase());
377:       assertFalse(node0.isVoid());
378:       assertFalse(node0.isCatch());
379:       assertFalse(node0.isArrayLit());
380:       assertFalse(node0.isFor());
381:       assertEquals(0, node0.getChildCount());
382:       assertFalse(node0.isFunction());
383:       assertFalse(node0.isRegExp());
384:       assertFalse(node0.isParamList());
385:       assertFalse(node0.isStringKey());
386:       assertFalse(node0.isString());
387:       assertFalse(node0.isGetterDef());
388:       assertFalse(node0.isSwitch());
389:       assertEquals((-1), node0.getCharno());
390:       assertFalse(node0.isAdd());
391:       assertFalse(node0.isDo());
392:       assertFalse(node0.isWhile());
393:       assertFalse(node0.isNew());
394:       assertFalse(node0.isVar());
395:       assertFalse(node0.isCall());
396:       assertFalse(node0.isReturn());
397:       assertFalse(node0.isLabel());
398:       assertFalse(node0.isBreak());
399:       assertFalse(node0.isNull());
400:       assertFalse(node0.isAssignAdd());
401:       assertFalse(node0.isName());
402:       assertFalse(node0.isDelProp());
403:       assertFalse(node0.isEmpty());
404:       assertFalse(node0.isOr());
405:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
406:       assertEquals(43, Node.IS_CONSTANT_NAME);
407:       assertEquals(36, Node.QUOTED_PROP);
408:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
409:       assertEquals(53, Node.INPUT_ID);
410:       assertEquals(55, Node.INFERRED_FUNCTION);
411:       assertEquals(56, Node.CHANGE_TIME);
412:       assertEquals(2, Node.POST_FLAG);
413:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
414:       assertEquals(8, Node.FLAG_NO_THROWS);
415:       assertEquals(39, Node.EMPTY_BLOCK);
416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(29, Node.JSDOC_INFO_PROP);
419:       assertEquals(30, Node.VAR_ARGS_NAME);
420:       assertEquals(47, Node.IS_DISPATCHER);
421:       assertEquals(57, Node.LAST_PROP);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
424:       assertEquals(51, Node.STATIC_SOURCE_FILE);
425:       assertEquals(49, Node.DIRECT_EVAL);
426:       assertEquals(50, Node.FREE_CALL);
427:       assertEquals(57, Node.REFLECTED_OBJECT);
428:       assertEquals(46, Node.IS_NAMESPACE);
429:       assertEquals(54, Node.SLASH_V);
430:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
431:       assertEquals(37, Node.OPT_ARG_NAME);
432:       assertEquals(48, Node.DIRECTIVES);
433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
436:       assertEquals(4095, Node.COLUMN_MASK);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(32, Node.INCRDECR_PROP);
439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
440:       assertEquals(12, Node.COLUMN_BITS);
441:       
442:       node0.setLength((-885));
443:       assertFalse(node0.isScript());
444:       assertFalse(node0.isExprResult());
445:       assertFalse(node0.hasOneChild());
446:       assertFalse(node0.isCast());
447:       assertFalse(node0.isInstanceOf());
448:       assertFalse(node0.isGetElem());
449:       assertFalse(node0.isWith());
450:       assertFalse(node0.isAssign());
451:       assertFalse(node0.isDec());
452:       assertFalse(node0.isTypeOf());
453:       assertFalse(node0.isThis());
454:       assertFalse(node0.isComma());
455:       assertEquals((-1), node0.getSourcePosition());
456:       assertFalse(node0.isGetProp());
457:       assertFalse(node0.hasChildren());
458:       assertFalse(node0.isLabelName());
459:       assertFalse(node0.isAnd());
460:       assertFalse(node0.isNot());
461:       assertFalse(node0.isNumber());
462:       assertFalse(node0.isObjectLit());
463:       assertFalse(node0.isInc());
464:       assertFalse(node0.isBlock());
465:       assertFalse(node0.isCase());
466:       assertFalse(node0.hasMoreThanOneChild());
467:       assertFalse(node0.isContinue());
468:       assertFalse(node0.isThrow());
469:       assertFalse(node0.isHook());
470:       assertFalse(node0.isFalse());
471:       assertFalse(node0.isSetterDef());
472:       assertFalse(node0.isNE());
473:       assertEquals(48, node0.getType());
474:       assertEquals((-1), node0.getLineno());
475:       assertFalse(node0.isIf());
476:       assertFalse(node0.isIn());
477:       assertFalse(node0.isDebugger());
478:       assertFalse(node0.isTrue());
479:       assertFalse(node0.isTry());
480:       assertFalse(node0.isDefaultCase());
481:       assertFalse(node0.isVoid());
482:       assertFalse(node0.isCatch());
483:       assertFalse(node0.isArrayLit());
484:       assertFalse(node0.isFor());
485:       assertEquals(0, node0.getChildCount());
486:       assertFalse(node0.isFunction());
487:       assertFalse(node0.isRegExp());
488:       assertFalse(node0.isParamList());
489:       assertFalse(node0.isStringKey());
490:       assertFalse(node0.isString());
491:       assertFalse(node0.isGetterDef());
492:       assertFalse(node0.isSwitch());
493:       assertEquals((-1), node0.getCharno());
494:       assertFalse(node0.isAdd());
495:       assertFalse(node0.isDo());
496:       assertFalse(node0.isWhile());
497:       assertFalse(node0.isNew());
498:       assertFalse(node0.isVar());
499:       assertFalse(node0.isCall());
500:       assertFalse(node0.isReturn());
501:       assertFalse(node0.isLabel());
502:       assertFalse(node0.isBreak());
503:       assertFalse(node0.isNull());
504:       assertFalse(node0.isAssignAdd());
505:       assertFalse(node0.isName());
506:       assertFalse(node0.isDelProp());
507:       assertFalse(node0.isEmpty());
508:       assertFalse(node0.isOr());
509:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
510:       assertEquals(43, Node.IS_CONSTANT_NAME);
511:       assertEquals(36, Node.QUOTED_PROP);
512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
513:       assertEquals(53, Node.INPUT_ID);
514:       assertEquals(55, Node.INFERRED_FUNCTION);
515:       assertEquals(56, Node.CHANGE_TIME);
516:       assertEquals(2, Node.POST_FLAG);
517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
518:       assertEquals(8, Node.FLAG_NO_THROWS);
519:       assertEquals(39, Node.EMPTY_BLOCK);
520:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
521:       assertEquals(40, Node.ORIGINALNAME_PROP);
522:       assertEquals(29, Node.JSDOC_INFO_PROP);
523:       assertEquals(30, Node.VAR_ARGS_NAME);
524:       assertEquals(47, Node.IS_DISPATCHER);
525:       assertEquals(57, Node.LAST_PROP);
526:       assertEquals(52, Node.LENGTH);
527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
528:       assertEquals(51, Node.STATIC_SOURCE_FILE);
529:       assertEquals(49, Node.DIRECT_EVAL);
530:       assertEquals(50, Node.FREE_CALL);
531:       assertEquals(57, Node.REFLECTED_OBJECT);
532:       assertEquals(46, Node.IS_NAMESPACE);
533:       assertEquals(54, Node.SLASH_V);
534:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
535:       assertEquals(37, Node.OPT_ARG_NAME);
536:       assertEquals(48, Node.DIRECTIVES);
537:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
538:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(1, Node.DECR_FLAG);
542:       assertEquals(32, Node.INCRDECR_PROP);
543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
544:       assertEquals(12, Node.COLUMN_BITS);
545:       
546:       Node node1 = node0.cloneNode();
547:       assertFalse(node0.isScript());
548:       assertFalse(node0.isExprResult());
549:       assertFalse(node0.hasOneChild());
550:       assertFalse(node0.isCast());
551:       assertFalse(node0.isInstanceOf());
552:       assertFalse(node0.isGetElem());
553:       assertFalse(node0.isWith());
554:       assertFalse(node0.isAssign());
555:       assertFalse(node0.isDec());
556:       assertFalse(node0.isTypeOf());
557:       assertFalse(node0.isThis());
558:       assertFalse(node0.isComma());
559:       assertEquals((-1), node0.getSourcePosition());
560:       assertFalse(node0.isGetProp());
561:       assertFalse(node0.hasChildren());
562:       assertFalse(node0.isLabelName());
563:       assertFalse(node0.isAnd());
564:       assertFalse(node0.isNot());
565:       assertFalse(node0.isNumber());
566:       assertFalse(node0.isObjectLit());
567:       assertFalse(node0.isInc());
568:       assertFalse(node0.isBlock());
569:       assertFalse(node0.isCase());
570:       assertFalse(node0.hasMoreThanOneChild());
571:       assertFalse(node0.isContinue());
572:       assertFalse(node0.isThrow());
573:       assertFalse(node0.isHook());
574:       assertFalse(node0.isFalse());
575:       assertFalse(node0.isSetterDef());
576:       assertFalse(node0.isNE());
577:       assertEquals(48, node0.getType());
578:       assertEquals((-1), node0.getLineno());
579:       assertFalse(node0.isIf());
580:       assertFalse(node0.isIn());
581:       assertFalse(node0.isDebugger());
582:       assertFalse(node0.isTrue());
583:       assertFalse(node0.isTry());
584:       assertFalse(node0.isDefaultCase());
585:       assertFalse(node0.isVoid());
586:       assertFalse(node0.isCatch());
587:       assertFalse(node0.isArrayLit());
588:       assertFalse(node0.isFor());
589:       assertEquals(0, node0.getChildCount());
590:       assertFalse(node0.isFunction());
591:       assertFalse(node0.isRegExp());
592:       assertFalse(node0.isParamList());
593:       assertFalse(node0.isStringKey());
594:       assertFalse(node0.isString());
595:       assertFalse(node0.isGetterDef());
596:       assertFalse(node0.isSwitch());
597:       assertEquals((-1), node0.getCharno());
598:       assertFalse(node0.isAdd());
599:       assertFalse(node0.isDo());
600:       assertFalse(node0.isWhile());
601:       assertFalse(node0.isNew());
602:       assertFalse(node0.isVar());
603:       assertFalse(node0.isCall());
604:       assertFalse(node0.isReturn());
605:       assertFalse(node0.isLabel());
606:       assertFalse(node0.isBreak());
607:       assertFalse(node0.isNull());
608:       assertFalse(node0.isAssignAdd());
609:       assertFalse(node0.isName());
610:       assertFalse(node0.isDelProp());
611:       assertFalse(node0.isEmpty());
612:       assertFalse(node0.isOr());
613:       assertFalse(node1.hasMoreThanOneChild());
614:       assertFalse(node1.isContinue());
615:       assertFalse(node1.isAssignAdd());
616:       assertEquals((-1), node1.getLineno());
617:       assertFalse(node1.isDo());
618:       assertEquals((-1), node1.getSourcePosition());
619:       assertFalse(node1.isNumber());
620:       assertFalse(node1.isOr());
621:       assertFalse(node1.isCall());
622:       assertFalse(node1.isName());
623:       assertFalse(node1.isGetElem());
624:       assertFalse(node1.hasOneChild());
625:       assertFalse(node1.isTypeOf());
626:       assertFalse(node1.hasChildren());
627:       assertFalse(node1.isWhile());
628:       assertFalse(node1.isExprResult());
629:       assertFalse(node1.isBlock());
630:       assertFalse(node1.isWith());
631:       assertFalse(node1.isReturn());
632:       assertFalse(node1.isAssign());
633:       assertFalse(node1.isDec());
634:       assertFalse(node1.isScript());
635:       assertFalse(node1.isNull());
636:       assertFalse(node1.isParamList());
637:       assertFalse(node1.isTrue());
638:       assertFalse(node1.isArrayLit());
639:       assertFalse(node1.isVar());
640:       assertFalse(node1.isStringKey());
641:       assertFalse(node1.isAdd());
642:       assertFalse(node1.isNew());
643:       assertFalse(node1.isEmpty());
644:       assertFalse(node1.isLabelName());
645:       assertFalse(node1.isDefaultCase());
646:       assertFalse(node1.isLabel());
647:       assertEquals(0, node1.getChildCount());
648:       assertFalse(node1.isIn());
649:       assertFalse(node1.isCase());
650:       assertFalse(node1.isInc());
651:       assertFalse(node1.isSwitch());
652:       assertFalse(node1.isIf());
653:       assertFalse(node1.isString());
654:       assertFalse(node1.isNE());
655:       assertEquals((-1), node1.getCharno());
656:       assertFalse(node1.isGetterDef());
657:       assertFalse(node1.isHook());
658:       assertFalse(node1.isTry());
659:       assertFalse(node1.isDelProp());
660:       assertFalse(node1.isVoid());
661:       assertFalse(node1.isBreak());
662:       assertFalse(node1.isRegExp());
663:       assertFalse(node1.isThis());
664:       assertFalse(node1.isFor());
665:       assertFalse(node1.isComma());
666:       assertFalse(node1.isAnd());
667:       assertFalse(node1.isInstanceOf());
668:       assertFalse(node1.isCatch());
669:       assertEquals(48, node1.getType());
670:       assertFalse(node1.isGetProp());
671:       assertFalse(node1.isSetterDef());
672:       assertFalse(node1.isObjectLit());
673:       assertFalse(node1.isDebugger());
674:       assertFalse(node1.isNot());
675:       assertFalse(node1.isThrow());
676:       assertFalse(node1.isCast());
677:       assertFalse(node1.isFalse());
678:       assertFalse(node1.isFunction());
679:       assertFalse(node1.equals((Object)node0));
680:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
681:       assertEquals(43, Node.IS_CONSTANT_NAME);
682:       assertEquals(36, Node.QUOTED_PROP);
683:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
684:       assertEquals(53, Node.INPUT_ID);
685:       assertEquals(55, Node.INFERRED_FUNCTION);
686:       assertEquals(56, Node.CHANGE_TIME);
687:       assertEquals(2, Node.POST_FLAG);
688:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
689:       assertEquals(8, Node.FLAG_NO_THROWS);
690:       assertEquals(39, Node.EMPTY_BLOCK);
691:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
692:       assertEquals(40, Node.ORIGINALNAME_PROP);
693:       assertEquals(29, Node.JSDOC_INFO_PROP);
694:       assertEquals(30, Node.VAR_ARGS_NAME);
695:       assertEquals(47, Node.IS_DISPATCHER);
696:       assertEquals(57, Node.LAST_PROP);
697:       assertEquals(52, Node.LENGTH);
698:       assertEquals(15, Node.NO_SIDE_EFFECTS);
699:       assertEquals(51, Node.STATIC_SOURCE_FILE);
700:       assertEquals(49, Node.DIRECT_EVAL);
701:       assertEquals(50, Node.FREE_CALL);
702:       assertEquals(57, Node.REFLECTED_OBJECT);
703:       assertEquals(46, Node.IS_NAMESPACE);
704:       assertEquals(54, Node.SLASH_V);
705:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
706:       assertEquals(37, Node.OPT_ARG_NAME);
707:       assertEquals(48, Node.DIRECTIVES);
708:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
709:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
710:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
711:       assertEquals(4095, Node.COLUMN_MASK);
712:       assertEquals(1, Node.DECR_FLAG);
713:       assertEquals(32, Node.INCRDECR_PROP);
714:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
715:       assertEquals(12, Node.COLUMN_BITS);
716:       assertEquals(12, Node.COLUMN_BITS);
717:       assertEquals(32, Node.INCRDECR_PROP);
718:       assertEquals(51, Node.STATIC_SOURCE_FILE);
719:       assertEquals(1, Node.DECR_FLAG);
720:       assertEquals(2, Node.POST_FLAG);
721:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
722:       assertEquals(15, Node.NO_SIDE_EFFECTS);
723:       assertEquals(57, Node.LAST_PROP);
724:       assertEquals(47, Node.IS_DISPATCHER);
725:       assertEquals(30, Node.VAR_ARGS_NAME);
726:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
727:       assertEquals(50, Node.FREE_CALL);
728:       assertEquals(40, Node.ORIGINALNAME_PROP);
729:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
730:       assertEquals(46, Node.IS_NAMESPACE);
731:       assertEquals(54, Node.SLASH_V);
732:       assertEquals(43, Node.IS_CONSTANT_NAME);
733:       assertEquals(4095, Node.COLUMN_MASK);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(55, Node.INFERRED_FUNCTION);
736:       assertEquals(39, Node.EMPTY_BLOCK);
737:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
738:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
739:       assertEquals(57, Node.REFLECTED_OBJECT);
740:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
741:       assertEquals(29, Node.JSDOC_INFO_PROP);
742:       assertEquals(53, Node.INPUT_ID);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
745:       assertEquals(36, Node.QUOTED_PROP);
746:       assertEquals(8, Node.FLAG_NO_THROWS);
747:       assertEquals(37, Node.OPT_ARG_NAME);
748:       assertEquals(48, Node.DIRECTIVES);
749:       assertEquals(49, Node.DIRECT_EVAL);
750:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
751:       assertEquals(56, Node.CHANGE_TIME);
752:       
753:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
754:       assertFalse(node0.isScript());
755:       assertFalse(node0.isExprResult());
756:       assertFalse(node0.hasOneChild());
757:       assertFalse(node0.isCast());
758:       assertFalse(node0.isInstanceOf());
759:       assertFalse(node0.isGetElem());
760:       assertFalse(node0.isWith());
761:       assertFalse(node0.isAssign());
762:       assertFalse(node0.isDec());
763:       assertFalse(node0.isTypeOf());
764:       assertFalse(node0.isThis());
765:       assertFalse(node0.isComma());
766:       assertEquals((-1), node0.getSourcePosition());
767:       assertFalse(node0.isGetProp());
768:       assertFalse(node0.hasChildren());
769:       assertFalse(node0.isLabelName());
770:       assertFalse(node0.isAnd());
771:       assertFalse(node0.isNot());
772:       assertFalse(node0.isNumber());
773:       assertFalse(node0.isObjectLit());
774:       assertFalse(node0.isInc());
775:       assertFalse(node0.isBlock());
776:       assertFalse(node0.isCase());
777:       assertFalse(node0.hasMoreThanOneChild());
778:       assertFalse(node0.isContinue());
779:       assertFalse(node0.isThrow());
780:       assertFalse(node0.isHook());
781:       assertFalse(node0.isFalse());
782:       assertFalse(node0.isSetterDef());
783:       assertFalse(node0.isNE());
784:       assertEquals(48, node0.getType());
785:       assertEquals((-1), node0.getLineno());
786:       assertFalse(node0.isIf());
787:       assertFalse(node0.isIn());
788:       assertFalse(node0.isDebugger());
789:       assertFalse(node0.isTrue());
790:       assertFalse(node0.isTry());
791:       assertFalse(node0.isDefaultCase());
792:       assertFalse(node0.isVoid());
793:       assertFalse(node0.isCatch());
794:       assertFalse(node0.isArrayLit());
795:       assertFalse(node0.isFor());
796:       assertEquals(0, node0.getChildCount());
797:       assertFalse(node0.isFunction());
798:       assertFalse(node0.isRegExp());
799:       assertFalse(node0.isParamList());
800:       assertFalse(node0.isStringKey());
801:       assertFalse(node0.isString());
802:       assertFalse(node0.isGetterDef());
803:       assertFalse(node0.isSwitch());
804:       assertEquals((-1), node0.getCharno());
805:       assertFalse(node0.isAdd());
806:       assertFalse(node0.isDo());
807:       assertFalse(node0.isWhile());
808:       assertFalse(node0.isNew());
809:       assertFalse(node0.isVar());
810:       assertFalse(node0.isCall());
811:       assertFalse(node0.isReturn());
812:       assertFalse(node0.isLabel());
813:       assertFalse(node0.isBreak());
814:       assertFalse(node0.isNull());
815:       assertFalse(node0.isAssignAdd());
816:       assertFalse(node0.isName());
817:       assertFalse(node0.isDelProp());
818:       assertFalse(node0.isEmpty());
819:       assertFalse(node0.isOr());
820:       assertFalse(node0.equals((Object)node1));
821:       assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
822:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
823:       assertEquals(43, Node.IS_CONSTANT_NAME);
824:       assertEquals(36, Node.QUOTED_PROP);
825:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
826:       assertEquals(53, Node.INPUT_ID);
827:       assertEquals(55, Node.INFERRED_FUNCTION);
828:       assertEquals(56, Node.CHANGE_TIME);
829:       assertEquals(2, Node.POST_FLAG);
830:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
831:       assertEquals(8, Node.FLAG_NO_THROWS);
832:       assertEquals(39, Node.EMPTY_BLOCK);
833:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
834:       assertEquals(40, Node.ORIGINALNAME_PROP);
835:       assertEquals(29, Node.JSDOC_INFO_PROP);
836:       assertEquals(30, Node.VAR_ARGS_NAME);
837:       assertEquals(47, Node.IS_DISPATCHER);
838:       assertEquals(57, Node.LAST_PROP);
839:       assertEquals(52, Node.LENGTH);
840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
841:       assertEquals(51, Node.STATIC_SOURCE_FILE);
842:       assertEquals(49, Node.DIRECT_EVAL);
843:       assertEquals(50, Node.FREE_CALL);
844:       assertEquals(57, Node.REFLECTED_OBJECT);
845:       assertEquals(46, Node.IS_NAMESPACE);
846:       assertEquals(54, Node.SLASH_V);
847:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
848:       assertEquals(37, Node.OPT_ARG_NAME);
849:       assertEquals(48, Node.DIRECTIVES);
850:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
851:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
852:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
853:       assertEquals(4095, Node.COLUMN_MASK);
854:       assertEquals(1, Node.DECR_FLAG);
855:       assertEquals(32, Node.INCRDECR_PROP);
856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
857:       assertEquals(12, Node.COLUMN_BITS);
858:       
859:       boolean boolean1 = node1.isThrow();
860:       assertFalse(boolean1);
861:       assertFalse(node0.isScript());
862:       assertFalse(node0.isExprResult());
863:       assertFalse(node0.hasOneChild());
864:       assertFalse(node0.isCast());
865:       assertFalse(node0.isInstanceOf());
866:       assertFalse(node0.isGetElem());
867:       assertFalse(node0.isWith());
868:       assertFalse(node0.isAssign());
869:       assertFalse(node0.isDec());
870:       assertFalse(node0.isTypeOf());
871:       assertFalse(node0.isThis());
872:       assertFalse(node0.isComma());
873:       assertEquals((-1), node0.getSourcePosition());
874:       assertFalse(node0.isGetProp());
875:       assertFalse(node0.hasChildren());
876:       assertFalse(node0.isLabelName());
877:       assertFalse(node0.isAnd());
878:       assertFalse(node0.isNot());
879:       assertFalse(node0.isNumber());
880:       assertFalse(node0.isObjectLit());
881:       assertFalse(node0.isInc());
882:       assertFalse(node0.isBlock());
883:       assertFalse(node0.isCase());
884:       assertFalse(node0.hasMoreThanOneChild());
885:       assertFalse(node0.isContinue());
886:       assertFalse(node0.isThrow());
887:       assertFalse(node0.isHook());
888:       assertFalse(node0.isFalse());
889:       assertFalse(node0.isSetterDef());
890:       assertFalse(node0.isNE());
891:       assertEquals(48, node0.getType());
892:       assertEquals((-1), node0.getLineno());
893:       assertFalse(node0.isIf());
894:       assertFalse(node0.isIn());
895:       assertFalse(node0.isDebugger());
896:       assertFalse(node0.isTrue());
897:       assertFalse(node0.isTry());
898:       assertFalse(node0.isDefaultCase());
899:       assertFalse(node0.isVoid());
900:       assertFalse(node0.isCatch());
901:       assertFalse(node0.isArrayLit());
902:       assertFalse(node0.isFor());
903:       assertEquals(0, node0.getChildCount());
904:       assertFalse(node0.isFunction());
905:       assertFalse(node0.isRegExp());
906:       assertFalse(node0.isParamList());
907:       assertFalse(node0.isStringKey());
908:       assertFalse(node0.isString());
909:       assertFalse(node0.isGetterDef());
910:       assertFalse(node0.isSwitch());
911:       assertEquals((-1), node0.getCharno());
912:       assertFalse(node0.isAdd());
913:       assertFalse(node0.isDo());
914:       assertFalse(node0.isWhile());
915:       assertFalse(node0.isNew());
916:       assertFalse(node0.isVar());
917:       assertFalse(node0.isCall());
918:       assertFalse(node0.isReturn());
919:       assertFalse(node0.isLabel());
920:       assertFalse(node0.isBreak());
921:       assertFalse(node0.isNull());
922:       assertFalse(node0.isAssignAdd());
923:       assertFalse(node0.isName());
924:       assertFalse(node0.isDelProp());
925:       assertFalse(node0.isEmpty());
926:       assertFalse(node0.isOr());
927:       assertFalse(node1.hasMoreThanOneChild());
928:       assertFalse(node1.isContinue());
929:       assertFalse(node1.isAssignAdd());
930:       assertEquals((-1), node1.getLineno());
931:       assertFalse(node1.isDo());
932:       assertEquals((-1), node1.getSourcePosition());
933:       assertFalse(node1.isNumber());
934:       assertFalse(node1.isOr());
935:       assertFalse(node1.isCall());
936:       assertFalse(node1.isName());
937:       assertFalse(node1.isGetElem());
938:       assertFalse(node1.hasOneChild());
939:       assertFalse(node1.isTypeOf());
940:       assertFalse(node1.hasChildren());
941:       assertFalse(node1.isWhile());
942:       assertFalse(node1.isExprResult());
943:       assertFalse(node1.isBlock());
944:       assertFalse(node1.isWith());
945:       assertFalse(node1.isReturn());
946:       assertFalse(node1.isAssign());
947:       assertFalse(node1.isDec());
948:       assertFalse(node1.isScript());
949:       assertFalse(node1.isNull());
950:       assertFalse(node1.isParamList());
951:       assertFalse(node1.isTrue());
952:       assertFalse(node1.isArrayLit());
953:       assertFalse(node1.isVar());
954:       assertFalse(node1.isStringKey());
955:       assertFalse(node1.isAdd());
956:       assertFalse(node1.isNew());
957:       assertFalse(node1.isEmpty());
958:       assertFalse(node1.isLabelName());
959:       assertFalse(node1.isDefaultCase());
960:       assertFalse(node1.isLabel());
961:       assertEquals(0, node1.getChildCount());
962:       assertFalse(node1.isIn());
963:       assertFalse(node1.isCase());
964:       assertFalse(node1.isInc());
965:       assertFalse(node1.isSwitch());
966:       assertFalse(node1.isIf());
967:       assertFalse(node1.isString());
968:       assertFalse(node1.isNE());
969:       assertEquals((-1), node1.getCharno());
970:       assertFalse(node1.isGetterDef());
971:       assertFalse(node1.isHook());
972:       assertFalse(node1.isTry());
973:       assertFalse(node1.isDelProp());
974:       assertFalse(node1.isVoid());
975:       assertFalse(node1.isBreak());
976:       assertFalse(node1.isRegExp());
977:       assertFalse(node1.isThis());
978:       assertFalse(node1.isFor());
979:       assertFalse(node1.isComma());
980:       assertFalse(node1.isAnd());
981:       assertFalse(node1.isInstanceOf());
982:       assertFalse(node1.isCatch());
983:       assertEquals(48, node1.getType());
984:       assertFalse(node1.isGetProp());
985:       assertFalse(node1.isSetterDef());
986:       assertFalse(node1.isObjectLit());
987:       assertFalse(node1.isDebugger());
988:       assertFalse(node1.isNot());
989:       assertFalse(node1.isThrow());
990:       assertFalse(node1.isCast());
991:       assertFalse(node1.isFalse());
992:       assertFalse(node1.isFunction());
993:       assertFalse(node0.equals((Object)node1));
994:       assertFalse(node1.equals((Object)node0));
995:       assertTrue(boolean1 == boolean0);
996:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
997:       assertEquals(43, Node.IS_CONSTANT_NAME);
998:       assertEquals(36, Node.QUOTED_PROP);
999:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertEquals(55, Node.INFERRED_FUNCTION);
1002:       assertEquals(56, Node.CHANGE_TIME);
1003:       assertEquals(2, Node.POST_FLAG);
1004:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1005:       assertEquals(8, Node.FLAG_NO_THROWS);
1006:       assertEquals(39, Node.EMPTY_BLOCK);
1007:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1008:       assertEquals(40, Node.ORIGINALNAME_PROP);
1009:       assertEquals(29, Node.JSDOC_INFO_PROP);
1010:       assertEquals(30, Node.VAR_ARGS_NAME);
1011:       assertEquals(47, Node.IS_DISPATCHER);
1012:       assertEquals(57, Node.LAST_PROP);
1013:       assertEquals(52, Node.LENGTH);
1014:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1015:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1016:       assertEquals(49, Node.DIRECT_EVAL);
1017:       assertEquals(50, Node.FREE_CALL);
1018:       assertEquals(57, Node.REFLECTED_OBJECT);
1019:       assertEquals(46, Node.IS_NAMESPACE);
1020:       assertEquals(54, Node.SLASH_V);
1021:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1022:       assertEquals(37, Node.OPT_ARG_NAME);
1023:       assertEquals(48, Node.DIRECTIVES);
1024:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1025:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1026:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1027:       assertEquals(4095, Node.COLUMN_MASK);
1028:       assertEquals(1, Node.DECR_FLAG);
1029:       assertEquals(32, Node.INCRDECR_PROP);
1030:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1031:       assertEquals(12, Node.COLUMN_BITS);
1032:       assertEquals(12, Node.COLUMN_BITS);
1033:       assertEquals(32, Node.INCRDECR_PROP);
1034:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1035:       assertEquals(1, Node.DECR_FLAG);
1036:       assertEquals(2, Node.POST_FLAG);
1037:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1038:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1039:       assertEquals(57, Node.LAST_PROP);
1040:       assertEquals(47, Node.IS_DISPATCHER);
1041:       assertEquals(30, Node.VAR_ARGS_NAME);
1042:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1043:       assertEquals(50, Node.FREE_CALL);
1044:       assertEquals(40, Node.ORIGINALNAME_PROP);
1045:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1046:       assertEquals(46, Node.IS_NAMESPACE);
1047:       assertEquals(54, Node.SLASH_V);
1048:       assertEquals(43, Node.IS_CONSTANT_NAME);
1049:       assertEquals(4095, Node.COLUMN_MASK);
1050:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1051:       assertEquals(55, Node.INFERRED_FUNCTION);
1052:       assertEquals(39, Node.EMPTY_BLOCK);
1053:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1054:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1055:       assertEquals(57, Node.REFLECTED_OBJECT);
1056:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1057:       assertEquals(29, Node.JSDOC_INFO_PROP);
1058:       assertEquals(53, Node.INPUT_ID);
1059:       assertEquals(52, Node.LENGTH);
1060:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1061:       assertEquals(36, Node.QUOTED_PROP);
1062:       assertEquals(8, Node.FLAG_NO_THROWS);
1063:       assertEquals(37, Node.OPT_ARG_NAME);
1064:       assertEquals(48, Node.DIRECTIVES);
1065:       assertEquals(49, Node.DIRECT_EVAL);
1066:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1067:       assertEquals(56, Node.CHANGE_TIME);
1068:       
1069:       Iterable<Node> iterable0 = node1.children();
1070:       assertFalse(node0.isScript());
1071:       assertFalse(node0.isExprResult());
1072:       assertFalse(node0.hasOneChild());
1073:       assertFalse(node0.isCast());
1074:       assertFalse(node0.isInstanceOf());
1075:       assertFalse(node0.isGetElem());
1076:       assertFalse(node0.isWith());
1077:       assertFalse(node0.isAssign());
1078:       assertFalse(node0.isDec());
1079:       assertFalse(node0.isTypeOf());
1080:       assertFalse(node0.isThis());
1081:       assertFalse(node0.isComma());
1082:       assertEquals((-1), node0.getSourcePosition());
1083:       assertFalse(node0.isGetProp());
1084:       assertFalse(node0.hasChildren());
1085:       assertFalse(node0.isLabelName());
1086:       assertFalse(node0.isAnd());
1087:       assertFalse(node0.isNot());
1088:       assertFalse(node0.isNumber());
1089:       assertFalse(node0.isObjectLit());
1090:       assertFalse(node0.isInc());
1091:       assertFalse(node0.isBlock());
1092:       assertFalse(node0.isCase());
1093:       assertFalse(node0.hasMoreThanOneChild());
1094:       assertFalse(node0.isContinue());
1095:       assertFalse(node0.isThrow());
1096:       assertFalse(node0.isHook());
1097:       assertFalse(node0.isFalse());
1098:       assertFalse(node0.isSetterDef());
1099:       assertFalse(node0.isNE());
1100:       assertEquals(48, node0.getType());
1101:       assertEquals((-1), node0.getLineno());
1102:       assertFalse(node0.isIf());
1103:       assertFalse(node0.isIn());
1104:       assertFalse(node0.isDebugger());
1105:       assertFalse(node0.isTrue());
1106:       assertFalse(node0.isTry());
1107:       assertFalse(node0.isDefaultCase());
1108:       assertFalse(node0.isVoid());
1109:       assertFalse(node0.isCatch());
1110:       assertFalse(node0.isArrayLit());
1111:       assertFalse(node0.isFor());
1112:       assertEquals(0, node0.getChildCount());
1113:       assertFalse(node0.isFunction());
1114:       assertFalse(node0.isRegExp());
1115:       assertFalse(node0.isParamList());
1116:       assertFalse(node0.isStringKey());
1117:       assertFalse(node0.isString());
1118:       assertFalse(node0.isGetterDef());
1119:       assertFalse(node0.isSwitch());
1120:       assertEquals((-1), node0.getCharno());
1121:       assertFalse(node0.isAdd());
1122:       assertFalse(node0.isDo());
1123:       assertFalse(node0.isWhile());
1124:       assertFalse(node0.isNew());
1125:       assertFalse(node0.isVar());
1126:       assertFalse(node0.isCall());
1127:       assertFalse(node0.isReturn());
1128:       assertFalse(node0.isLabel());
1129:       assertFalse(node0.isBreak());
1130:       assertFalse(node0.isNull());
1131:       assertFalse(node0.isAssignAdd());
1132:       assertFalse(node0.isName());
1133:       assertFalse(node0.isDelProp());
1134:       assertFalse(node0.isEmpty());
1135:       assertFalse(node0.isOr());
1136:       assertFalse(node1.hasMoreThanOneChild());
1137:       assertFalse(node1.isContinue());
1138:       assertFalse(node1.isAssignAdd());
1139:       assertEquals((-1), node1.getLineno());
1140:       assertFalse(node1.isDo());
1141:       assertEquals((-1), node1.getSourcePosition());
1142:       assertFalse(node1.isNumber());
1143:       assertFalse(node1.isOr());
1144:       assertFalse(node1.isCall());
1145:       assertFalse(node1.isName());
1146:       assertFalse(node1.isGetElem());
1147:       assertFalse(node1.hasOneChild());
1148:       assertFalse(node1.isTypeOf());
1149:       assertFalse(node1.hasChildren());
1150:       assertFalse(node1.isWhile());
1151:       assertFalse(node1.isExprResult());
1152:       assertFalse(node1.isBlock());
1153:       assertFalse(node1.isWith());
1154:       assertFalse(node1.isReturn());
1155:       assertFalse(node1.isAssign());
1156:       assertFalse(node1.isDec());
1157:       assertFalse(node1.isScript());
1158:       assertFalse(node1.isNull());
1159:       assertFalse(node1.isParamList());
1160:       assertFalse(node1.isTrue());
1161:       assertFalse(node1.isArrayLit());
1162:       assertFalse(node1.isVar());
1163:       assertFalse(node1.isStringKey());
1164:       assertFalse(node1.isAdd());
1165:       assertFalse(node1.isNew());
1166:       assertFalse(node1.isEmpty());
1167:       assertFalse(node1.isLabelName());
1168:       assertFalse(node1.isDefaultCase());
1169:       assertFalse(node1.isLabel());
1170:       assertEquals(0, node1.getChildCount());
1171:       assertFalse(node1.isIn());
1172:       assertFalse(node1.isCase());
1173:       assertFalse(node1.isInc());
1174:       assertFalse(node1.isSwitch());
1175:       assertFalse(node1.isIf());
1176:       assertFalse(node1.isString());
1177:       assertFalse(node1.isNE());
1178:       assertEquals((-1), node1.getCharno());
1179:       assertFalse(node1.isGetterDef());
1180:       assertFalse(node1.isHook());
1181:       assertFalse(node1.isTry());
1182:       assertFalse(node1.isDelProp());
1183:       assertFalse(node1.isVoid());
1184:       assertFalse(node1.isBreak());
1185:       assertFalse(node1.isRegExp());
1186:       assertFalse(node1.isThis());
1187:       assertFalse(node1.isFor());
1188:       assertFalse(node1.isComma());
1189:       assertFalse(node1.isAnd());
1190:       assertFalse(node1.isInstanceOf());
1191:       assertFalse(node1.isCatch());
1192:       assertEquals(48, node1.getType());
1193:       assertFalse(node1.isGetProp());
1194:       assertFalse(node1.isSetterDef());
1195:       assertFalse(node1.isObjectLit());
1196:       assertFalse(node1.isDebugger());
1197:       assertFalse(node1.isNot());
1198:       assertFalse(node1.isThrow());
1199:       assertFalse(node1.isCast());
1200:       assertFalse(node1.isFalse());
1201:       assertFalse(node1.isFunction());
1202:       assertFalse(iterable0.contains(node1));
1203:       assertFalse(node0.equals((Object)node1));
1204:       assertFalse(node1.equals((Object)node0));
1205:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1206:       assertEquals(43, Node.IS_CONSTANT_NAME);
1207:       assertEquals(36, Node.QUOTED_PROP);
1208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1209:       assertEquals(53, Node.INPUT_ID);
1210:       assertEquals(55, Node.INFERRED_FUNCTION);
1211:       assertEquals(56, Node.CHANGE_TIME);
1212:       assertEquals(2, Node.POST_FLAG);
1213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1214:       assertEquals(8, Node.FLAG_NO_THROWS);
1215:       assertEquals(39, Node.EMPTY_BLOCK);
1216:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1217:       assertEquals(40, Node.ORIGINALNAME_PROP);
1218:       assertEquals(29, Node.JSDOC_INFO_PROP);
1219:       assertEquals(30, Node.VAR_ARGS_NAME);
1220:       assertEquals(47, Node.IS_DISPATCHER);
1221:       assertEquals(57, Node.LAST_PROP);
1222:       assertEquals(52, Node.LENGTH);
1223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1224:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1225:       assertEquals(49, Node.DIRECT_EVAL);
1226:       assertEquals(50, Node.FREE_CALL);
1227:       assertEquals(57, Node.REFLECTED_OBJECT);
1228:       assertEquals(46, Node.IS_NAMESPACE);
1229:       assertEquals(54, Node.SLASH_V);
1230:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1231:       assertEquals(37, Node.OPT_ARG_NAME);
1232:       assertEquals(48, Node.DIRECTIVES);
1233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1235:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1236:       assertEquals(4095, Node.COLUMN_MASK);
1237:       assertEquals(1, Node.DECR_FLAG);
1238:       assertEquals(32, Node.INCRDECR_PROP);
1239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1240:       assertEquals(12, Node.COLUMN_BITS);
1241:       assertEquals(12, Node.COLUMN_BITS);
1242:       assertEquals(32, Node.INCRDECR_PROP);
1243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1244:       assertEquals(1, Node.DECR_FLAG);
1245:       assertEquals(2, Node.POST_FLAG);
1246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1247:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1248:       assertEquals(57, Node.LAST_PROP);
1249:       assertEquals(47, Node.IS_DISPATCHER);
1250:       assertEquals(30, Node.VAR_ARGS_NAME);
1251:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1252:       assertEquals(50, Node.FREE_CALL);
1253:       assertEquals(40, Node.ORIGINALNAME_PROP);
1254:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1255:       assertEquals(46, Node.IS_NAMESPACE);
1256:       assertEquals(54, Node.SLASH_V);
1257:       assertEquals(43, Node.IS_CONSTANT_NAME);
1258:       assertEquals(4095, Node.COLUMN_MASK);
1259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1260:       assertEquals(55, Node.INFERRED_FUNCTION);
1261:       assertEquals(39, Node.EMPTY_BLOCK);
1262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1263:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1264:       assertEquals(57, Node.REFLECTED_OBJECT);
1265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1266:       assertEquals(29, Node.JSDOC_INFO_PROP);
1267:       assertEquals(53, Node.INPUT_ID);
1268:       assertEquals(52, Node.LENGTH);
1269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1270:       assertEquals(36, Node.QUOTED_PROP);
1271:       assertEquals(8, Node.FLAG_NO_THROWS);
1272:       assertEquals(37, Node.OPT_ARG_NAME);
1273:       assertEquals(48, Node.DIRECTIVES);
1274:       assertEquals(49, Node.DIRECT_EVAL);
1275:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1276:       assertEquals(56, Node.CHANGE_TIME);
1277:       
1278:       node1.setLength((-1618));
1279:       assertFalse(node0.isScript());
1280:       assertFalse(node0.isExprResult());
1281:       assertFalse(node0.hasOneChild());
1282:       assertFalse(node0.isCast());
1283:       assertFalse(node0.isInstanceOf());
1284:       assertFalse(node0.isGetElem());
1285:       assertFalse(node0.isWith());
1286:       assertFalse(node0.isAssign());
1287:       assertFalse(node0.isDec());
1288:       assertFalse(node0.isTypeOf());
1289:       assertFalse(node0.isThis());
1290:       assertFalse(node0.isComma());
1291:       assertEquals((-1), node0.getSourcePosition());
1292:       assertFalse(node0.isGetProp());
1293:       assertFalse(node0.hasChildren());
1294:       assertFalse(node0.isLabelName());
1295:       assertFalse(node0.isAnd());
1296:       assertFalse(node0.isNot());
1297:       assertFalse(node0.isNumber());
1298:       assertFalse(node0.isObjectLit());
1299:       assertFalse(node0.isInc());
1300:       assertFalse(node0.isBlock());
1301:       assertFalse(node0.isCase());
1302:       assertFalse(node0.hasMoreThanOneChild());
1303:       assertFalse(node0.isContinue());
1304:       assertFalse(node0.isThrow());
1305:       assertFalse(node0.isHook());
1306:       assertFalse(node0.isFalse());
1307:       assertFalse(node0.isSetterDef());
1308:       assertFalse(node0.isNE());
1309:       assertEquals(48, node0.getType());
1310:       assertEquals((-1), node0.getLineno());
1311:       assertFalse(node0.isIf());
1312:       assertFalse(node0.isIn());
1313:       assertFalse(node0.isDebugger());
1314:       assertFalse(node0.isTrue());
1315:       assertFalse(node0.isTry());
1316:       assertFalse(node0.isDefaultCase());
1317:       assertFalse(node0.isVoid());
1318:       assertFalse(node0.isCatch());
1319:       assertFalse(node0.isArrayLit());
1320:       assertFalse(node0.isFor());
1321:       assertEquals(0, node0.getChildCount());
1322:       assertFalse(node0.isFunction());
1323:       assertFalse(node0.isRegExp());
1324:       assertFalse(node0.isParamList());
1325:       assertFalse(node0.isStringKey());
1326:       assertFalse(node0.isString());
1327:       assertFalse(node0.isGetterDef());
1328:       assertFalse(node0.isSwitch());
1329:       assertEquals((-1), node0.getCharno());
1330:       assertFalse(node0.isAdd());
1331:       assertFalse(node0.isDo());
1332:       assertFalse(node0.isWhile());
1333:       assertFalse(node0.isNew());
1334:       assertFalse(node0.isVar());
1335:       assertFalse(node0.isCall());
1336:       assertFalse(node0.isReturn());
1337:       assertFalse(node0.isLabel());
1338:       assertFalse(node0.isBreak());
1339:       assertFalse(node0.isNull());
1340:       assertFalse(node0.isAssignAdd());
1341:       assertFalse(node0.isName());
1342:       assertFalse(node0.isDelProp());
1343:       assertFalse(node0.isEmpty());
1344:       assertFalse(node0.isOr());
1345:       assertFalse(node1.hasMoreThanOneChild());
1346:       assertFalse(node1.isContinue());
1347:       assertFalse(node1.isAssignAdd());
1348:       assertEquals((-1), node1.getLineno());
1349:       assertFalse(node1.isDo());
1350:       assertEquals((-1), node1.getSourcePosition());
1351:       assertFalse(node1.isNumber());
1352:       assertFalse(node1.isOr());
1353:       assertFalse(node1.isCall());
1354:       assertFalse(node1.isName());
1355:       assertFalse(node1.isGetElem());
1356:       assertFalse(node1.hasOneChild());
1357:       assertFalse(node1.isTypeOf());
1358:       assertFalse(node1.hasChildren());
1359:       assertFalse(node1.isWhile());
1360:       assertFalse(node1.isExprResult());
1361:       assertFalse(node1.isBlock());
1362:       assertFalse(node1.isWith());
1363:       assertFalse(node1.isReturn());
1364:       assertFalse(node1.isAssign());
1365:       assertFalse(node1.isDec());
1366:       assertFalse(node1.isScript());
1367:       assertFalse(node1.isNull());
1368:       assertFalse(node1.isParamList());
1369:       assertFalse(node1.isTrue());
1370:       assertFalse(node1.isArrayLit());
1371:       assertFalse(node1.isVar());
1372:       assertFalse(node1.isStringKey());
1373:       assertFalse(node1.isAdd());
1374:       assertFalse(node1.isNew());
1375:       assertFalse(node1.isEmpty());
1376:       assertFalse(node1.isLabelName());
1377:       assertFalse(node1.isDefaultCase());
1378:       assertFalse(node1.isLabel());
1379:       assertEquals(0, node1.getChildCount());
1380:       assertFalse(node1.isIn());
1381:       assertFalse(node1.isCase());
1382:       assertFalse(node1.isInc());
1383:       assertFalse(node1.isSwitch());
1384:       assertFalse(node1.isIf());
1385:       assertFalse(node1.isString());
1386:       assertFalse(node1.isNE());
1387:       assertEquals((-1), node1.getCharno());
1388:       assertFalse(node1.isGetterDef());
1389:       assertFalse(node1.isHook());
1390:       assertFalse(node1.isTry());
1391:       assertFalse(node1.isDelProp());
1392:       assertFalse(node1.isVoid());
1393:       assertFalse(node1.isBreak());
1394:       assertFalse(node1.isRegExp());
1395:       assertFalse(node1.isThis());
1396:       assertFalse(node1.isFor());
1397:       assertFalse(node1.isComma());
1398:       assertFalse(node1.isAnd());
1399:       assertFalse(node1.isInstanceOf());
1400:       assertFalse(node1.isCatch());
1401:       assertEquals(48, node1.getType());
1402:       assertFalse(node1.isGetProp());
1403:       assertFalse(node1.isSetterDef());
1404:       assertFalse(node1.isObjectLit());
1405:       assertFalse(node1.isDebugger());
1406:       assertFalse(node1.isNot());
1407:       assertFalse(node1.isThrow());
1408:       assertFalse(node1.isCast());
1409:       assertFalse(node1.isFalse());
1410:       assertFalse(node1.isFunction());
1411:       assertFalse(node0.equals((Object)node1));
1412:       assertFalse(node1.equals((Object)node0));
1413:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1414:       assertEquals(43, Node.IS_CONSTANT_NAME);
1415:       assertEquals(36, Node.QUOTED_PROP);
1416:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1417:       assertEquals(53, Node.INPUT_ID);
1418:       assertEquals(55, Node.INFERRED_FUNCTION);
1419:       assertEquals(56, Node.CHANGE_TIME);
1420:       assertEquals(2, Node.POST_FLAG);
1421:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1422:       assertEquals(8, Node.FLAG_NO_THROWS);
1423:       assertEquals(39, Node.EMPTY_BLOCK);
1424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1425:       assertEquals(40, Node.ORIGINALNAME_PROP);
1426:       assertEquals(29, Node.JSDOC_INFO_PROP);
1427:       assertEquals(30, Node.VAR_ARGS_NAME);
1428:       assertEquals(47, Node.IS_DISPATCHER);
1429:       assertEquals(57, Node.LAST_PROP);
1430:       assertEquals(52, Node.LENGTH);
1431:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1433:       assertEquals(49, Node.DIRECT_EVAL);
1434:       assertEquals(50, Node.FREE_CALL);
1435:       assertEquals(57, Node.REFLECTED_OBJECT);
1436:       assertEquals(46, Node.IS_NAMESPACE);
1437:       assertEquals(54, Node.SLASH_V);
1438:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1439:       assertEquals(37, Node.OPT_ARG_NAME);
1440:       assertEquals(48, Node.DIRECTIVES);
1441:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1443:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1444:       assertEquals(4095, Node.COLUMN_MASK);
1445:       assertEquals(1, Node.DECR_FLAG);
1446:       assertEquals(32, Node.INCRDECR_PROP);
1447:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1448:       assertEquals(12, Node.COLUMN_BITS);
1449:       assertEquals(12, Node.COLUMN_BITS);
1450:       assertEquals(32, Node.INCRDECR_PROP);
1451:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1452:       assertEquals(1, Node.DECR_FLAG);
1453:       assertEquals(2, Node.POST_FLAG);
1454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1455:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1456:       assertEquals(57, Node.LAST_PROP);
1457:       assertEquals(47, Node.IS_DISPATCHER);
1458:       assertEquals(30, Node.VAR_ARGS_NAME);
1459:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1460:       assertEquals(50, Node.FREE_CALL);
1461:       assertEquals(40, Node.ORIGINALNAME_PROP);
1462:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1463:       assertEquals(46, Node.IS_NAMESPACE);
1464:       assertEquals(54, Node.SLASH_V);
1465:       assertEquals(43, Node.IS_CONSTANT_NAME);
1466:       assertEquals(4095, Node.COLUMN_MASK);
1467:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1468:       assertEquals(55, Node.INFERRED_FUNCTION);
1469:       assertEquals(39, Node.EMPTY_BLOCK);
1470:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1472:       assertEquals(57, Node.REFLECTED_OBJECT);
1473:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1474:       assertEquals(29, Node.JSDOC_INFO_PROP);
1475:       assertEquals(53, Node.INPUT_ID);
1476:       assertEquals(52, Node.LENGTH);
1477:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1478:       assertEquals(36, Node.QUOTED_PROP);
1479:       assertEquals(8, Node.FLAG_NO_THROWS);
1480:       assertEquals(37, Node.OPT_ARG_NAME);
1481:       assertEquals(48, Node.DIRECTIVES);
1482:       assertEquals(49, Node.DIRECT_EVAL);
1483:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1484:       assertEquals(56, Node.CHANGE_TIME);
1485:       
1486:       node0.removeProp(51);
1487:       assertFalse(node0.isScript());
1488:       assertFalse(node0.isExprResult());
1489:       assertFalse(node0.hasOneChild());
1490:       assertFalse(node0.isCast());
1491:       assertFalse(node0.isInstanceOf());
1492:       assertFalse(node0.isGetElem());
1493:       assertFalse(node0.isWith());
1494:       assertFalse(node0.isAssign());
1495:       assertFalse(node0.isDec());
1496:       assertFalse(node0.isTypeOf());
1497:       assertFalse(node0.isThis());
1498:       assertFalse(node0.isComma());
1499:       assertEquals((-1), node0.getSourcePosition());
1500:       assertFalse(node0.isGetProp());
1501:       assertFalse(node0.hasChildren());
1502:       assertFalse(node0.isLabelName());
1503:       assertFalse(node0.isAnd());
1504:       assertFalse(node0.isNot());
1505:       assertFalse(node0.isNumber());
1506:       assertFalse(node0.isObjectLit());
1507:       assertFalse(node0.isInc());
1508:       assertFalse(node0.isBlock());
1509:       assertFalse(node0.isCase());
1510:       assertFalse(node0.hasMoreThanOneChild());
1511:       assertFalse(node0.isContinue());
1512:       assertFalse(node0.isThrow());
1513:       assertFalse(node0.isHook());
1514:       assertFalse(node0.isFalse());
1515:       assertFalse(node0.isSetterDef());
1516:       assertFalse(node0.isNE());
1517:       assertEquals(48, node0.getType());
1518:       assertEquals((-1), node0.getLineno());
1519:       assertFalse(node0.isIf());
1520:       assertFalse(node0.isIn());
1521:       assertFalse(node0.isDebugger());
1522:       assertFalse(node0.isTrue());
1523:       assertFalse(node0.isTry());
1524:       assertFalse(node0.isDefaultCase());
1525:       assertFalse(node0.isVoid());
1526:       assertFalse(node0.isCatch());
1527:       assertFalse(node0.isArrayLit());
1528:       assertFalse(node0.isFor());
1529:       assertEquals(0, node0.getChildCount());
1530:       assertFalse(node0.isFunction());
1531:       assertFalse(node0.isRegExp());
1532:       assertFalse(node0.isParamList());
1533:       assertFalse(node0.isStringKey());
1534:       assertFalse(node0.isString());
1535:       assertFalse(node0.isGetterDef());
1536:       assertFalse(node0.isSwitch());
1537:       assertEquals((-1), node0.getCharno());
1538:       assertFalse(node0.isAdd());
1539:       assertFalse(node0.isDo());
1540:       assertFalse(node0.isWhile());
1541:       assertFalse(node0.isNew());
1542:       assertFalse(node0.isVar());
1543:       assertFalse(node0.isCall());
1544:       assertFalse(node0.isReturn());
1545:       assertFalse(node0.isLabel());
1546:       assertFalse(node0.isBreak());
1547:       assertFalse(node0.isNull());
1548:       assertFalse(node0.isAssignAdd());
1549:       assertFalse(node0.isName());
1550:       assertFalse(node0.isDelProp());
1551:       assertFalse(node0.isEmpty());
1552:       assertFalse(node0.isOr());
1553:       assertFalse(node0.equals((Object)node1));
1554:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1555:       assertEquals(43, Node.IS_CONSTANT_NAME);
1556:       assertEquals(36, Node.QUOTED_PROP);
1557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1558:       assertEquals(53, Node.INPUT_ID);
1559:       assertEquals(55, Node.INFERRED_FUNCTION);
1560:       assertEquals(56, Node.CHANGE_TIME);
1561:       assertEquals(2, Node.POST_FLAG);
1562:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1563:       assertEquals(8, Node.FLAG_NO_THROWS);
1564:       assertEquals(39, Node.EMPTY_BLOCK);
1565:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1566:       assertEquals(40, Node.ORIGINALNAME_PROP);
1567:       assertEquals(29, Node.JSDOC_INFO_PROP);
1568:       assertEquals(30, Node.VAR_ARGS_NAME);
1569:       assertEquals(47, Node.IS_DISPATCHER);
1570:       assertEquals(57, Node.LAST_PROP);
1571:       assertEquals(52, Node.LENGTH);
1572:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1573:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1574:       assertEquals(49, Node.DIRECT_EVAL);
1575:       assertEquals(50, Node.FREE_CALL);
1576:       assertEquals(57, Node.REFLECTED_OBJECT);
1577:       assertEquals(46, Node.IS_NAMESPACE);
1578:       assertEquals(54, Node.SLASH_V);
1579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1580:       assertEquals(37, Node.OPT_ARG_NAME);
1581:       assertEquals(48, Node.DIRECTIVES);
1582:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1583:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1584:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1585:       assertEquals(4095, Node.COLUMN_MASK);
1586:       assertEquals(1, Node.DECR_FLAG);
1587:       assertEquals(32, Node.INCRDECR_PROP);
1588:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1589:       assertEquals(12, Node.COLUMN_BITS);
1590:       
1591:       boolean boolean2 = node0.isNull();
1592:       assertFalse(boolean2);
1593:       assertFalse(node0.isScript());
1594:       assertFalse(node0.isExprResult());
1595:       assertFalse(node0.hasOneChild());
1596:       assertFalse(node0.isCast());
1597:       assertFalse(node0.isInstanceOf());
1598:       assertFalse(node0.isGetElem());
1599:       assertFalse(node0.isWith());
1600:       assertFalse(node0.isAssign());
1601:       assertFalse(node0.isDec());
1602:       assertFalse(node0.isTypeOf());
1603:       assertFalse(node0.isThis());
1604:       assertFalse(node0.isComma());
1605:       assertEquals((-1), node0.getSourcePosition());
1606:       assertFalse(node0.isGetProp());
1607:       assertFalse(node0.hasChildren());
1608:       assertFalse(node0.isLabelName());
1609:       assertFalse(node0.isAnd());
1610:       assertFalse(node0.isNot());
1611:       assertFalse(node0.isNumber());
1612:       assertFalse(node0.isObjectLit());
1613:       assertFalse(node0.isInc());
1614:       assertFalse(node0.isBlock());
1615:       assertFalse(node0.isCase());
1616:       assertFalse(node0.hasMoreThanOneChild());
1617:       assertFalse(node0.isContinue());
1618:       assertFalse(node0.isThrow());
1619:       assertFalse(node0.isHook());
1620:       assertFalse(node0.isFalse());
1621:       assertFalse(node0.isSetterDef());
1622:       assertFalse(node0.isNE());
1623:       assertEquals(48, node0.getType());
1624:       assertEquals((-1), node0.getLineno());
1625:       assertFalse(node0.isIf());
1626:       assertFalse(node0.isIn());
1627:       assertFalse(node0.isDebugger());
1628:       assertFalse(node0.isTrue());
1629:       assertFalse(node0.isTry());
1630:       assertFalse(node0.isDefaultCase());
1631:       assertFalse(node0.isVoid());
1632:       assertFalse(node0.isCatch());
1633:       assertFalse(node0.isArrayLit());
1634:       assertFalse(node0.isFor());
1635:       assertEquals(0, node0.getChildCount());
1636:       assertFalse(node0.isFunction());
1637:       assertFalse(node0.isRegExp());
1638:       assertFalse(node0.isParamList());
1639:       assertFalse(node0.isStringKey());
1640:       assertFalse(node0.isString());
1641:       assertFalse(node0.isGetterDef());
1642:       assertFalse(node0.isSwitch());
1643:       assertEquals((-1), node0.getCharno());
1644:       assertFalse(node0.isAdd());
1645:       assertFalse(node0.isDo());
1646:       assertFalse(node0.isWhile());
1647:       assertFalse(node0.isNew());
1648:       assertFalse(node0.isVar());
1649:       assertFalse(node0.isCall());
1650:       assertFalse(node0.isReturn());
1651:       assertFalse(node0.isLabel());
1652:       assertFalse(node0.isBreak());
1653:       assertFalse(node0.isNull());
1654:       assertFalse(node0.isAssignAdd());
1655:       assertFalse(node0.isName());
1656:       assertFalse(node0.isDelProp());
1657:       assertFalse(node0.isEmpty());
1658:       assertFalse(node0.isOr());
1659:       assertFalse(node0.equals((Object)node1));
1660:       assertTrue(boolean2 == boolean0);
1661:       assertTrue(boolean2 == boolean1);
1662:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1663:       assertEquals(43, Node.IS_CONSTANT_NAME);
1664:       assertEquals(36, Node.QUOTED_PROP);
1665:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1666:       assertEquals(53, Node.INPUT_ID);
1667:       assertEquals(55, Node.INFERRED_FUNCTION);
1668:       assertEquals(56, Node.CHANGE_TIME);
1669:       assertEquals(2, Node.POST_FLAG);
1670:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1671:       assertEquals(8, Node.FLAG_NO_THROWS);
1672:       assertEquals(39, Node.EMPTY_BLOCK);
1673:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1674:       assertEquals(40, Node.ORIGINALNAME_PROP);
1675:       assertEquals(29, Node.JSDOC_INFO_PROP);
1676:       assertEquals(30, Node.VAR_ARGS_NAME);
1677:       assertEquals(47, Node.IS_DISPATCHER);
1678:       assertEquals(57, Node.LAST_PROP);
1679:       assertEquals(52, Node.LENGTH);
1680:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1681:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1682:       assertEquals(49, Node.DIRECT_EVAL);
1683:       assertEquals(50, Node.FREE_CALL);
1684:       assertEquals(57, Node.REFLECTED_OBJECT);
1685:       assertEquals(46, Node.IS_NAMESPACE);
1686:       assertEquals(54, Node.SLASH_V);
1687:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1688:       assertEquals(37, Node.OPT_ARG_NAME);
1689:       assertEquals(48, Node.DIRECTIVES);
1690:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1691:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1692:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1693:       assertEquals(4095, Node.COLUMN_MASK);
1694:       assertEquals(1, Node.DECR_FLAG);
1695:       assertEquals(32, Node.INCRDECR_PROP);
1696:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1697:       assertEquals(12, Node.COLUMN_BITS);
1698:       
1699:       boolean boolean3 = node1.isDo();
1700:       assertFalse(boolean3);
1701:       assertFalse(node0.isScript());
1702:       assertFalse(node0.isExprResult());
1703:       assertFalse(node0.hasOneChild());
1704:       assertFalse(node0.isCast());
1705:       assertFalse(node0.isInstanceOf());
1706:       assertFalse(node0.isGetElem());
1707:       assertFalse(node0.isWith());
1708:       assertFalse(node0.isAssign());
1709:       assertFalse(node0.isDec());
1710:       assertFalse(node0.isTypeOf());
1711:       assertFalse(node0.isThis());
1712:       assertFalse(node0.isComma());
1713:       assertEquals((-1), node0.getSourcePosition());
1714:       assertFalse(node0.isGetProp());
1715:       assertFalse(node0.hasChildren());
1716:       assertFalse(node0.isLabelName());
1717:       assertFalse(node0.isAnd());
1718:       assertFalse(node0.isNot());
1719:       assertFalse(node0.isNumber());
1720:       assertFalse(node0.isObjectLit());
1721:       assertFalse(node0.isInc());
1722:       assertFalse(node0.isBlock());
1723:       assertFalse(node0.isCase());
1724:       assertFalse(node0.hasMoreThanOneChild());
1725:       assertFalse(node0.isContinue());
1726:       assertFalse(node0.isThrow());
1727:       assertFalse(node0.isHook());
1728:       assertFalse(node0.isFalse());
1729:       assertFalse(node0.isSetterDef());
1730:       assertFalse(node0.isNE());
1731:       assertEquals(48, node0.getType());
1732:       assertEquals((-1), node0.getLineno());
1733:       assertFalse(node0.isIf());
1734:       assertFalse(node0.isIn());
1735:       assertFalse(node0.isDebugger());
1736:       assertFalse(node0.isTrue());
1737:       assertFalse(node0.isTry());
1738:       assertFalse(node0.isDefaultCase());
1739:       assertFalse(node0.isVoid());
1740:       assertFalse(node0.isCatch());
1741:       assertFalse(node0.isArrayLit());
1742:       assertFalse(node0.isFor());
1743:       assertEquals(0, node0.getChildCount());
1744:       assertFalse(node0.isFunction());
1745:       assertFalse(node0.isRegExp());
1746:       assertFalse(node0.isParamList());
1747:       assertFalse(node0.isStringKey());
1748:       assertFalse(node0.isString());
1749:       assertFalse(node0.isGetterDef());
1750:       assertFalse(node0.isSwitch());
1751:       assertEquals((-1), node0.getCharno());
1752:       assertFalse(node0.isAdd());
1753:       assertFalse(node0.isDo());
1754:       assertFalse(node0.isWhile());
1755:       assertFalse(node0.isNew());
1756:       assertFalse(node0.isVar());
1757:       assertFalse(node0.isCall());
1758:       assertFalse(node0.isReturn());
1759:       assertFalse(node0.isLabel());
1760:       assertFalse(node0.isBreak());
1761:       assertFalse(node0.isNull());
1762:       assertFalse(node0.isAssignAdd());
1763:       assertFalse(node0.isName());
1764:       assertFalse(node0.isDelProp());
1765:       assertFalse(node0.isEmpty());
1766:       assertFalse(node0.isOr());
1767:       assertFalse(node1.hasMoreThanOneChild());
1768:       assertFalse(node1.isContinue());
1769:       assertFalse(node1.isAssignAdd());
1770:       assertEquals((-1), node1.getLineno());
1771:       assertFalse(node1.isDo());
1772:       assertEquals((-1), node1.getSourcePosition());
1773:       assertFalse(node1.isNumber());
1774:       assertFalse(node1.isOr());
1775:       assertFalse(node1.isCall());
1776:       assertFalse(node1.isName());
1777:       assertFalse(node1.isGetElem());
1778:       assertFalse(node1.hasOneChild());
1779:       assertFalse(node1.isTypeOf());
1780:       assertFalse(node1.hasChildren());
1781:       assertFalse(node1.isWhile());
1782:       assertFalse(node1.isExprResult());
1783:       assertFalse(node1.isBlock());
1784:       assertFalse(node1.isWith());
1785:       assertFalse(node1.isReturn());
1786:       assertFalse(node1.isAssign());
1787:       assertFalse(node1.isDec());
1788:       assertFalse(node1.isScript());
1789:       assertFalse(node1.isNull());
1790:       assertFalse(node1.isParamList());
1791:       assertFalse(node1.isTrue());
1792:       assertFalse(node1.isArrayLit());
1793:       assertFalse(node1.isVar());
1794:       assertFalse(node1.isStringKey());
1795:       assertFalse(node1.isAdd());
1796:       assertFalse(node1.isNew());
1797:       assertFalse(node1.isEmpty());
1798:       assertFalse(node1.isLabelName());
1799:       assertFalse(node1.isDefaultCase());
1800:       assertFalse(node1.isLabel());
1801:       assertEquals(0, node1.getChildCount());
1802:       assertFalse(node1.isIn());
1803:       assertFalse(node1.isCase());
1804:       assertFalse(node1.isInc());
1805:       assertFalse(node1.isSwitch());
1806:       assertFalse(node1.isIf());
1807:       assertFalse(node1.isString());
1808:       assertFalse(node1.isNE());
1809:       assertEquals((-1), node1.getCharno());
1810:       assertFalse(node1.isGetterDef());
1811:       assertFalse(node1.isHook());
1812:       assertFalse(node1.isTry());
1813:       assertFalse(node1.isDelProp());
1814:       assertFalse(node1.isVoid());
1815:       assertFalse(node1.isBreak());
1816:       assertFalse(node1.isRegExp());
1817:       assertFalse(node1.isThis());
1818:       assertFalse(node1.isFor());
1819:       assertFalse(node1.isComma());
1820:       assertFalse(node1.isAnd());
1821:       assertFalse(node1.isInstanceOf());
1822:       assertFalse(node1.isCatch());
1823:       assertEquals(48, node1.getType());
1824:       assertFalse(node1.isGetProp());
1825:       assertFalse(node1.isSetterDef());
1826:       assertFalse(node1.isObjectLit());
1827:       assertFalse(node1.isDebugger());
1828:       assertFalse(node1.isNot());
1829:       assertFalse(node1.isThrow());
1830:       assertFalse(node1.isCast());
1831:       assertFalse(node1.isFalse());
1832:       assertFalse(node1.isFunction());
1833:       assertFalse(node0.equals((Object)node1));
1834:       assertFalse(node1.equals((Object)node0));
1835:       assertTrue(boolean3 == boolean2);
1836:       assertTrue(boolean3 == boolean0);
1837:       assertTrue(boolean3 == boolean1);
1838:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1839:       assertEquals(43, Node.IS_CONSTANT_NAME);
1840:       assertEquals(36, Node.QUOTED_PROP);
1841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1842:       assertEquals(53, Node.INPUT_ID);
1843:       assertEquals(55, Node.INFERRED_FUNCTION);
1844:       assertEquals(56, Node.CHANGE_TIME);
1845:       assertEquals(2, Node.POST_FLAG);
1846:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1847:       assertEquals(8, Node.FLAG_NO_THROWS);
1848:       assertEquals(39, Node.EMPTY_BLOCK);
1849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1850:       assertEquals(40, Node.ORIGINALNAME_PROP);
1851:       assertEquals(29, Node.JSDOC_INFO_PROP);
1852:       assertEquals(30, Node.VAR_ARGS_NAME);
1853:       assertEquals(47, Node.IS_DISPATCHER);
1854:       assertEquals(57, Node.LAST_PROP);
1855:       assertEquals(52, Node.LENGTH);
1856:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1857:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1858:       assertEquals(49, Node.DIRECT_EVAL);
1859:       assertEquals(50, Node.FREE_CALL);
1860:       assertEquals(57, Node.REFLECTED_OBJECT);
1861:       assertEquals(46, Node.IS_NAMESPACE);
1862:       assertEquals(54, Node.SLASH_V);
1863:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1864:       assertEquals(37, Node.OPT_ARG_NAME);
1865:       assertEquals(48, Node.DIRECTIVES);
1866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1867:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1868:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1869:       assertEquals(4095, Node.COLUMN_MASK);
1870:       assertEquals(1, Node.DECR_FLAG);
1871:       assertEquals(32, Node.INCRDECR_PROP);
1872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1873:       assertEquals(12, Node.COLUMN_BITS);
1874:       assertEquals(12, Node.COLUMN_BITS);
1875:       assertEquals(32, Node.INCRDECR_PROP);
1876:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1877:       assertEquals(1, Node.DECR_FLAG);
1878:       assertEquals(2, Node.POST_FLAG);
1879:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1880:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1881:       assertEquals(57, Node.LAST_PROP);
1882:       assertEquals(47, Node.IS_DISPATCHER);
1883:       assertEquals(30, Node.VAR_ARGS_NAME);
1884:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1885:       assertEquals(50, Node.FREE_CALL);
1886:       assertEquals(40, Node.ORIGINALNAME_PROP);
1887:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1888:       assertEquals(46, Node.IS_NAMESPACE);
1889:       assertEquals(54, Node.SLASH_V);
1890:       assertEquals(43, Node.IS_CONSTANT_NAME);
1891:       assertEquals(4095, Node.COLUMN_MASK);
1892:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1893:       assertEquals(55, Node.INFERRED_FUNCTION);
1894:       assertEquals(39, Node.EMPTY_BLOCK);
1895:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1896:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1897:       assertEquals(57, Node.REFLECTED_OBJECT);
1898:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1899:       assertEquals(29, Node.JSDOC_INFO_PROP);
1900:       assertEquals(53, Node.INPUT_ID);
1901:       assertEquals(52, Node.LENGTH);
1902:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1903:       assertEquals(36, Node.QUOTED_PROP);
1904:       assertEquals(8, Node.FLAG_NO_THROWS);
1905:       assertEquals(37, Node.OPT_ARG_NAME);
1906:       assertEquals(48, Node.DIRECTIVES);
1907:       assertEquals(49, Node.DIRECT_EVAL);
1908:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1909:       assertEquals(56, Node.CHANGE_TIME);
1910:       
1911:       node0.addChildrenToBack(node1);
1912:       assertFalse(node0.isScript());
1913:       assertFalse(node0.isExprResult());
1914:       assertFalse(node0.isCast());
1915:       assertFalse(node0.isInstanceOf());
1916:       assertFalse(node0.isGetElem());
1917:       assertFalse(node0.isWith());
1918:       assertFalse(node0.isAssign());
1919:       assertFalse(node0.isDec());
1920:       assertFalse(node0.isTypeOf());
1921:       assertFalse(node0.isThis());
1922:       assertFalse(node0.isComma());
1923:       assertEquals((-1), node0.getSourcePosition());
1924:       assertFalse(node0.isGetProp());
1925:       assertFalse(node0.isLabelName());
1926:       assertFalse(node0.isAnd());
1927:       assertFalse(node0.isNot());
1928:       assertFalse(node0.isNumber());
1929:       assertFalse(node0.isObjectLit());
1930:       assertFalse(node0.isInc());
1931:       assertFalse(node0.isBlock());
1932:       assertFalse(node0.isCase());
1933:       assertFalse(node0.hasMoreThanOneChild());
1934:       assertFalse(node0.isContinue());
1935:       assertFalse(node0.isThrow());
1936:       assertFalse(node0.isHook());
1937:       assertTrue(node0.hasChildren());
1938:       assertEquals(1, node0.getChildCount());
1939:       assertFalse(node0.isFalse());
1940:       assertFalse(node0.isSetterDef());
1941:       assertFalse(node0.isNE());
1942:       assertEquals(48, node0.getType());
1943:       assertEquals((-1), node0.getLineno());
1944:       assertFalse(node0.isIf());
1945:       assertFalse(node0.isIn());
1946:       assertFalse(node0.isDebugger());
1947:       assertFalse(node0.isTrue());
1948:       assertFalse(node0.isTry());
1949:       assertFalse(node0.isDefaultCase());
1950:       assertFalse(node0.isVoid());
1951:       assertFalse(node0.isCatch());
1952:       assertFalse(node0.isArrayLit());
1953:       assertFalse(node0.isFor());
1954:       assertTrue(node0.hasOneChild());
1955:       assertFalse(node0.isFunction());
1956:       assertFalse(node0.isRegExp());
1957:       assertFalse(node0.isParamList());
1958:       assertFalse(node0.isStringKey());
1959:       assertFalse(node0.isString());
1960:       assertFalse(node0.isGetterDef());
1961:       assertFalse(node0.isSwitch());
1962:       assertEquals((-1), node0.getCharno());
1963:       assertFalse(node0.isAdd());
1964:       assertFalse(node0.isDo());
1965:       assertFalse(node0.isWhile());
1966:       assertFalse(node0.isNew());
1967:       assertFalse(node0.isVar());
1968:       assertFalse(node0.isCall());
1969:       assertFalse(node0.isReturn());
1970:       assertFalse(node0.isLabel());
1971:       assertFalse(node0.isBreak());
1972:       assertFalse(node0.isNull());
1973:       assertFalse(node0.isAssignAdd());
1974:       assertFalse(node0.isName());
1975:       assertFalse(node0.isDelProp());
1976:       assertFalse(node0.isEmpty());
1977:       assertFalse(node0.isOr());
1978:       assertFalse(node1.hasMoreThanOneChild());
1979:       assertFalse(node1.isContinue());
1980:       assertFalse(node1.isAssignAdd());
1981:       assertEquals((-1), node1.getLineno());
1982:       assertFalse(node1.isDo());
1983:       assertEquals((-1), node1.getSourcePosition());
1984:       assertFalse(node1.isNumber());
1985:       assertFalse(node1.isOr());
1986:       assertFalse(node1.isCall());
1987:       assertFalse(node1.isName());
1988:       assertFalse(node1.isGetElem());
1989:       assertFalse(node1.hasOneChild());
1990:       assertFalse(node1.isTypeOf());
1991:       assertFalse(node1.hasChildren());
1992:       assertFalse(node1.isWhile());
1993:       assertFalse(node1.isExprResult());
1994:       assertFalse(node1.isBlock());
1995:       assertFalse(node1.isWith());
1996:       assertFalse(node1.isReturn());
1997:       assertFalse(node1.isAssign());
1998:       assertFalse(node1.isDec());
1999:       assertFalse(node1.isScript());
2000:       assertFalse(node1.isNull());
2001:       assertFalse(node1.isParamList());
2002:       assertFalse(node1.isTrue());
2003:       assertFalse(node1.isArrayLit());
2004:       assertFalse(node1.isVar());
2005:       assertFalse(node1.isStringKey());
2006:       assertFalse(node1.isAdd());
2007:       assertFalse(node1.isNew());
2008:       assertFalse(node1.isEmpty());
2009:       assertFalse(node1.isLabelName());
2010:       assertFalse(node1.isDefaultCase());
2011:       assertFalse(node1.isLabel());
2012:       assertEquals(0, node1.getChildCount());
2013:       assertFalse(node1.isIn());
2014:       assertFalse(node1.isCase());
2015:       assertFalse(node1.isInc());
2016:       assertFalse(node1.isSwitch());
2017:       assertFalse(node1.isIf());
2018:       assertFalse(node1.isString());
2019:       assertFalse(node1.isNE());
2020:       assertEquals((-1), node1.getCharno());
2021:       assertFalse(node1.isGetterDef());
2022:       assertFalse(node1.isHook());
2023:       assertFalse(node1.isTry());
2024:       assertFalse(node1.isDelProp());
2025:       assertFalse(node1.isVoid());
2026:       assertFalse(node1.isBreak());
2027:       assertFalse(node1.isRegExp());
2028:       assertFalse(node1.isThis());
2029:       assertFalse(node1.isFor());
2030:       assertFalse(node1.isComma());
2031:       assertFalse(node1.isAnd());
2032:       assertFalse(node1.isInstanceOf());
2033:       assertFalse(node1.isCatch());
2034:       assertEquals(48, node1.getType());
2035:       assertFalse(node1.isGetProp());
2036:       assertFalse(node1.isSetterDef());
2037:       assertFalse(node1.isObjectLit());
2038:       assertFalse(node1.isDebugger());
2039:       assertFalse(node1.isNot());
2040:       assertFalse(node1.isThrow());
2041:       assertFalse(node1.isCast());
2042:       assertFalse(node1.isFalse());
2043:       assertFalse(node1.isFunction());
2044:       assertFalse(node0.equals((Object)node1));
2045:       assertFalse(node1.equals((Object)node0));
2046:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2047:       assertEquals(43, Node.IS_CONSTANT_NAME);
2048:       assertEquals(36, Node.QUOTED_PROP);
2049:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2050:       assertEquals(53, Node.INPUT_ID);
2051:       assertEquals(55, Node.INFERRED_FUNCTION);
2052:       assertEquals(56, Node.CHANGE_TIME);
2053:       assertEquals(2, Node.POST_FLAG);
2054:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2055:       assertEquals(8, Node.FLAG_NO_THROWS);
2056:       assertEquals(39, Node.EMPTY_BLOCK);
2057:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2058:       assertEquals(40, Node.ORIGINALNAME_PROP);
2059:       assertEquals(29, Node.JSDOC_INFO_PROP);
2060:       assertEquals(30, Node.VAR_ARGS_NAME);
2061:       assertEquals(47, Node.IS_DISPATCHER);
2062:       assertEquals(57, Node.LAST_PROP);
2063:       assertEquals(52, Node.LENGTH);
2064:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2065:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2066:       assertEquals(49, Node.DIRECT_EVAL);
2067:       assertEquals(50, Node.FREE_CALL);
2068:       assertEquals(57, Node.REFLECTED_OBJECT);
2069:       assertEquals(46, Node.IS_NAMESPACE);
2070:       assertEquals(54, Node.SLASH_V);
2071:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2072:       assertEquals(37, Node.OPT_ARG_NAME);
2073:       assertEquals(48, Node.DIRECTIVES);
2074:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2075:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2076:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2077:       assertEquals(4095, Node.COLUMN_MASK);
2078:       assertEquals(1, Node.DECR_FLAG);
2079:       assertEquals(32, Node.INCRDECR_PROP);
2080:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2081:       assertEquals(12, Node.COLUMN_BITS);
2082:       assertEquals(12, Node.COLUMN_BITS);
2083:       assertEquals(32, Node.INCRDECR_PROP);
2084:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2085:       assertEquals(1, Node.DECR_FLAG);
2086:       assertEquals(2, Node.POST_FLAG);
2087:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2088:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2089:       assertEquals(57, Node.LAST_PROP);
2090:       assertEquals(47, Node.IS_DISPATCHER);
2091:       assertEquals(30, Node.VAR_ARGS_NAME);
2092:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2093:       assertEquals(50, Node.FREE_CALL);
2094:       assertEquals(40, Node.ORIGINALNAME_PROP);
2095:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2096:       assertEquals(46, Node.IS_NAMESPACE);
2097:       assertEquals(54, Node.SLASH_V);
2098:       assertEquals(43, Node.IS_CONSTANT_NAME);
2099:       assertEquals(4095, Node.COLUMN_MASK);
2100:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2101:       assertEquals(55, Node.INFERRED_FUNCTION);
2102:       assertEquals(39, Node.EMPTY_BLOCK);
2103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2105:       assertEquals(57, Node.REFLECTED_OBJECT);
2106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2107:       assertEquals(29, Node.JSDOC_INFO_PROP);
2108:       assertEquals(53, Node.INPUT_ID);
2109:       assertEquals(52, Node.LENGTH);
2110:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2111:       assertEquals(36, Node.QUOTED_PROP);
2112:       assertEquals(8, Node.FLAG_NO_THROWS);
2113:       assertEquals(37, Node.OPT_ARG_NAME);
2114:       assertEquals(48, Node.DIRECTIVES);
2115:       assertEquals(49, Node.DIRECT_EVAL);
2116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2117:       assertEquals(56, Node.CHANGE_TIME);
2118:       
2119:       node0.setChangeTime(47);
2120:       assertFalse(node0.isScript());
2121:       assertFalse(node0.isExprResult());
2122:       assertFalse(node0.isCast());
2123:       assertFalse(node0.isInstanceOf());
2124:       assertFalse(node0.isGetElem());
2125:       assertFalse(node0.isWith());
2126:       assertFalse(node0.isAssign());
2127:       assertFalse(node0.isDec());
2128:       assertFalse(node0.isTypeOf());
2129:       assertFalse(node0.isThis());
2130:       assertFalse(node0.isComma());
2131:       assertEquals((-1), node0.getSourcePosition());
2132:       assertFalse(node0.isGetProp());
2133:       assertFalse(node0.isLabelName());
2134:       assertFalse(node0.isAnd());
2135:       assertFalse(node0.isNot());
2136:       assertFalse(node0.isNumber());
2137:       assertFalse(node0.isObjectLit());
2138:       assertFalse(node0.isInc());
2139:       assertFalse(node0.isBlock());
2140:       assertFalse(node0.isCase());
2141:       assertFalse(node0.hasMoreThanOneChild());
2142:       assertFalse(node0.isContinue());
2143:       assertFalse(node0.isThrow());
2144:       assertFalse(node0.isHook());
2145:       assertTrue(node0.hasChildren());
2146:       assertEquals(1, node0.getChildCount());
2147:       assertFalse(node0.isFalse());
2148:       assertFalse(node0.isSetterDef());
2149:       assertFalse(node0.isNE());
2150:       assertEquals(48, node0.getType());
2151:       assertEquals((-1), node0.getLineno());
2152:       assertFalse(node0.isIf());
2153:       assertFalse(node0.isIn());
2154:       assertFalse(node0.isDebugger());
2155:       assertFalse(node0.isTrue());
2156:       assertFalse(node0.isTry());
2157:       assertFalse(node0.isDefaultCase());
2158:       assertFalse(node0.isVoid());
2159:       assertFalse(node0.isCatch());
2160:       assertFalse(node0.isArrayLit());
2161:       assertFalse(node0.isFor());
2162:       assertTrue(node0.hasOneChild());
2163:       assertFalse(node0.isFunction());
2164:       assertFalse(node0.isRegExp());
2165:       assertFalse(node0.isParamList());
2166:       assertFalse(node0.isStringKey());
2167:       assertFalse(node0.isString());
2168:       assertFalse(node0.isGetterDef());
2169:       assertFalse(node0.isSwitch());
2170:       assertEquals((-1), node0.getCharno());
2171:       assertFalse(node0.isAdd());
2172:       assertFalse(node0.isDo());
2173:       assertFalse(node0.isWhile());
2174:       assertFalse(node0.isNew());
2175:       assertFalse(node0.isVar());
2176:       assertFalse(node0.isCall());
2177:       assertFalse(node0.isReturn());
2178:       assertFalse(node0.isLabel());
2179:       assertFalse(node0.isBreak());
2180:       assertFalse(node0.isNull());
2181:       assertFalse(node0.isAssignAdd());
2182:       assertFalse(node0.isName());
2183:       assertFalse(node0.isDelProp());
2184:       assertFalse(node0.isEmpty());
2185:       assertFalse(node0.isOr());
2186:       assertFalse(node0.equals((Object)node1));
2187:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2188:       assertEquals(43, Node.IS_CONSTANT_NAME);
2189:       assertEquals(36, Node.QUOTED_PROP);
2190:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2191:       assertEquals(53, Node.INPUT_ID);
2192:       assertEquals(55, Node.INFERRED_FUNCTION);
2193:       assertEquals(56, Node.CHANGE_TIME);
2194:       assertEquals(2, Node.POST_FLAG);
2195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2196:       assertEquals(8, Node.FLAG_NO_THROWS);
2197:       assertEquals(39, Node.EMPTY_BLOCK);
2198:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2199:       assertEquals(40, Node.ORIGINALNAME_PROP);
2200:       assertEquals(29, Node.JSDOC_INFO_PROP);
2201:       assertEquals(30, Node.VAR_ARGS_NAME);
2202:       assertEquals(47, Node.IS_DISPATCHER);
2203:       assertEquals(57, Node.LAST_PROP);
2204:       assertEquals(52, Node.LENGTH);
2205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2206:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2207:       assertEquals(49, Node.DIRECT_EVAL);
2208:       assertEquals(50, Node.FREE_CALL);
2209:       assertEquals(57, Node.REFLECTED_OBJECT);
2210:       assertEquals(46, Node.IS_NAMESPACE);
2211:       assertEquals(54, Node.SLASH_V);
2212:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2213:       assertEquals(37, Node.OPT_ARG_NAME);
2214:       assertEquals(48, Node.DIRECTIVES);
2215:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2217:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2218:       assertEquals(4095, Node.COLUMN_MASK);
2219:       assertEquals(1, Node.DECR_FLAG);
2220:       assertEquals(32, Node.INCRDECR_PROP);
2221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2222:       assertEquals(12, Node.COLUMN_BITS);
2223:       
2224:       boolean boolean4 = node1.isDefaultCase();
2225:       assertFalse(boolean4);
2226:       assertFalse(node0.isScript());
2227:       assertFalse(node0.isExprResult());
2228:       assertFalse(node0.isCast());
2229:       assertFalse(node0.isInstanceOf());
2230:       assertFalse(node0.isGetElem());
2231:       assertFalse(node0.isWith());
2232:       assertFalse(node0.isAssign());
2233:       assertFalse(node0.isDec());
2234:       assertFalse(node0.isTypeOf());
2235:       assertFalse(node0.isThis());
2236:       assertFalse(node0.isComma());
2237:       assertEquals((-1), node0.getSourcePosition());
2238:       assertFalse(node0.isGetProp());
2239:       assertFalse(node0.isLabelName());
2240:       assertFalse(node0.isAnd());
2241:       assertFalse(node0.isNot());
2242:       assertFalse(node0.isNumber());
2243:       assertFalse(node0.isObjectLit());
2244:       assertFalse(node0.isInc());
2245:       assertFalse(node0.isBlock());
2246:       assertFalse(node0.isCase());
2247:       assertFalse(node0.hasMoreThanOneChild());
2248:       assertFalse(node0.isContinue());
2249:       assertFalse(node0.isThrow());
2250:       assertFalse(node0.isHook());
2251:       assertTrue(node0.hasChildren());
2252:       assertEquals(1, node0.getChildCount());
2253:       assertFalse(node0.isFalse());
2254:       assertFalse(node0.isSetterDef());
2255:       assertFalse(node0.isNE());
2256:       assertEquals(48, node0.getType());
2257:       assertEquals((-1), node0.getLineno());
2258:       assertFalse(node0.isIf());
2259:       assertFalse(node0.isIn());
2260:       assertFalse(node0.isDebugger());
2261:       assertFalse(node0.isTrue());
2262:       assertFalse(node0.isTry());
2263:       assertFalse(node0.isDefaultCase());
2264:       assertFalse(node0.isVoid());
2265:       assertFalse(node0.isCatch());
2266:       assertFalse(node0.isArrayLit());
2267:       assertFalse(node0.isFor());
2268:       assertTrue(node0.hasOneChild());
2269:       assertFalse(node0.isFunction());
2270:       assertFalse(node0.isRegExp());
2271:       assertFalse(node0.isParamList());
2272:       assertFalse(node0.isStringKey());
2273:       assertFalse(node0.isString());
2274:       assertFalse(node0.isGetterDef());
2275:       assertFalse(node0.isSwitch());
2276:       assertEquals((-1), node0.getCharno());
2277:       assertFalse(node0.isAdd());
2278:       assertFalse(node0.isDo());
2279:       assertFalse(node0.isWhile());
2280:       assertFalse(node0.isNew());
2281:       assertFalse(node0.isVar());
2282:       assertFalse(node0.isCall());
2283:       assertFalse(node0.isReturn());
2284:       assertFalse(node0.isLabel());
2285:       assertFalse(node0.isBreak());
2286:       assertFalse(node0.isNull());
2287:       assertFalse(node0.isAssignAdd());
2288:       assertFalse(node0.isName());
2289:       assertFalse(node0.isDelProp());
2290:       assertFalse(node0.isEmpty());
2291:       assertFalse(node0.isOr());
2292:       assertFalse(node1.hasMoreThanOneChild());
2293:       assertFalse(node1.isContinue());
2294:       assertFalse(node1.isAssignAdd());
2295:       assertEquals((-1), node1.getLineno());
2296:       assertFalse(node1.isDo());
2297:       assertEquals((-1), node1.getSourcePosition());
2298:       assertFalse(node1.isNumber());
2299:       assertFalse(node1.isOr());
2300:       assertFalse(node1.isCall());
2301:       assertFalse(node1.isName());
2302:       assertFalse(node1.isGetElem());
2303:       assertFalse(node1.hasOneChild());
2304:       assertFalse(node1.isTypeOf());
2305:       assertFalse(node1.hasChildren());
2306:       assertFalse(node1.isWhile());
2307:       assertFalse(node1.isExprResult());
2308:       assertFalse(node1.isBlock());
2309:       assertFalse(node1.isWith());
2310:       assertFalse(node1.isReturn());
2311:       assertFalse(node1.isAssign());
2312:       assertFalse(node1.isDec());
2313:       assertFalse(node1.isScript());
2314:       assertFalse(node1.isNull());
2315:       assertFalse(node1.isParamList());
2316:       assertFalse(node1.isTrue());
2317:       assertFalse(node1.isArrayLit());
2318:       assertFalse(node1.isVar());
2319:       assertFalse(node1.isStringKey());
2320:       assertFalse(node1.isAdd());
2321:       assertFalse(node1.isNew());
2322:       assertFalse(node1.isEmpty());
2323:       assertFalse(node1.isLabelName());
2324:       assertFalse(node1.isDefaultCase());
2325:       assertFalse(node1.isLabel());
2326:       assertEquals(0, node1.getChildCount());
2327:       assertFalse(node1.isIn());
2328:       assertFalse(node1.isCase());
2329:       assertFalse(node1.isInc());
2330:       assertFalse(node1.isSwitch());
2331:       assertFalse(node1.isIf());
2332:       assertFalse(node1.isString());
2333:       assertFalse(node1.isNE());
2334:       assertEquals((-1), node1.getCharno());
2335:       assertFalse(node1.isGetterDef());
2336:       assertFalse(node1.isHook());
2337:       assertFalse(node1.isTry());
2338:       assertFalse(node1.isDelProp());
2339:       assertFalse(node1.isVoid());
2340:       assertFalse(node1.isBreak());
2341:       assertFalse(node1.isRegExp());
2342:       assertFalse(node1.isThis());
2343:       assertFalse(node1.isFor());
2344:       assertFalse(node1.isComma());
2345:       assertFalse(node1.isAnd());
2346:       assertFalse(node1.isInstanceOf());
2347:       assertFalse(node1.isCatch());
2348:       assertEquals(48, node1.getType());
2349:       assertFalse(node1.isGetProp());
2350:       assertFalse(node1.isSetterDef());
2351:       assertFalse(node1.isObjectLit());
2352:       assertFalse(node1.isDebugger());
2353:       assertFalse(node1.isNot());
2354:       assertFalse(node1.isThrow());
2355:       assertFalse(node1.isCast());
2356:       assertFalse(node1.isFalse());
2357:       assertFalse(node1.isFunction());
2358:       assertTrue(boolean4 == boolean1);
2359:       assertTrue(boolean4 == boolean0);
2360:       assertTrue(boolean4 == boolean3);
2361:       assertTrue(boolean4 == boolean2);
2362:       assertFalse(node0.equals((Object)node1));
2363:       assertFalse(node1.equals((Object)node0));
2364:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2365:       assertEquals(43, Node.IS_CONSTANT_NAME);
2366:       assertEquals(36, Node.QUOTED_PROP);
2367:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2368:       assertEquals(53, Node.INPUT_ID);
2369:       assertEquals(55, Node.INFERRED_FUNCTION);
2370:       assertEquals(56, Node.CHANGE_TIME);
2371:       assertEquals(2, Node.POST_FLAG);
2372:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2373:       assertEquals(8, Node.FLAG_NO_THROWS);
2374:       assertEquals(39, Node.EMPTY_BLOCK);
2375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2376:       assertEquals(40, Node.ORIGINALNAME_PROP);
2377:       assertEquals(29, Node.JSDOC_INFO_PROP);
2378:       assertEquals(30, Node.VAR_ARGS_NAME);
2379:       assertEquals(47, Node.IS_DISPATCHER);
2380:       assertEquals(57, Node.LAST_PROP);
2381:       assertEquals(52, Node.LENGTH);
2382:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2383:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2384:       assertEquals(49, Node.DIRECT_EVAL);
2385:       assertEquals(50, Node.FREE_CALL);
2386:       assertEquals(57, Node.REFLECTED_OBJECT);
2387:       assertEquals(46, Node.IS_NAMESPACE);
2388:       assertEquals(54, Node.SLASH_V);
2389:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2390:       assertEquals(37, Node.OPT_ARG_NAME);
2391:       assertEquals(48, Node.DIRECTIVES);
2392:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2393:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2395:       assertEquals(4095, Node.COLUMN_MASK);
2396:       assertEquals(1, Node.DECR_FLAG);
2397:       assertEquals(32, Node.INCRDECR_PROP);
2398:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2399:       assertEquals(12, Node.COLUMN_BITS);
2400:       assertEquals(12, Node.COLUMN_BITS);
2401:       assertEquals(32, Node.INCRDECR_PROP);
2402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2403:       assertEquals(1, Node.DECR_FLAG);
2404:       assertEquals(2, Node.POST_FLAG);
2405:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2407:       assertEquals(57, Node.LAST_PROP);
2408:       assertEquals(47, Node.IS_DISPATCHER);
2409:       assertEquals(30, Node.VAR_ARGS_NAME);
2410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2411:       assertEquals(50, Node.FREE_CALL);
2412:       assertEquals(40, Node.ORIGINALNAME_PROP);
2413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2414:       assertEquals(46, Node.IS_NAMESPACE);
2415:       assertEquals(54, Node.SLASH_V);
2416:       assertEquals(43, Node.IS_CONSTANT_NAME);
2417:       assertEquals(4095, Node.COLUMN_MASK);
2418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2419:       assertEquals(55, Node.INFERRED_FUNCTION);
2420:       assertEquals(39, Node.EMPTY_BLOCK);
2421:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2422:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2423:       assertEquals(57, Node.REFLECTED_OBJECT);
2424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2425:       assertEquals(29, Node.JSDOC_INFO_PROP);
2426:       assertEquals(53, Node.INPUT_ID);
2427:       assertEquals(52, Node.LENGTH);
2428:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2429:       assertEquals(36, Node.QUOTED_PROP);
2430:       assertEquals(8, Node.FLAG_NO_THROWS);
2431:       assertEquals(37, Node.OPT_ARG_NAME);
2432:       assertEquals(48, Node.DIRECTIVES);
2433:       assertEquals(49, Node.DIRECT_EVAL);
2434:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2435:       assertEquals(56, Node.CHANGE_TIME);
2436:       
2437:       boolean boolean5 = node0.isContinue();
2438:       assertFalse(boolean5);
2439:       assertFalse(node0.isScript());
2440:       assertFalse(node0.isExprResult());
2441:       assertFalse(node0.isCast());
2442:       assertFalse(node0.isInstanceOf());
2443:       assertFalse(node0.isGetElem());
2444:       assertFalse(node0.isWith());
2445:       assertFalse(node0.isAssign());
2446:       assertFalse(node0.isDec());
2447:       assertFalse(node0.isTypeOf());
2448:       assertFalse(node0.isThis());
2449:       assertFalse(node0.isComma());
2450:       assertEquals((-1), node0.getSourcePosition());
2451:       assertFalse(node0.isGetProp());
2452:       assertFalse(node0.isLabelName());
2453:       assertFalse(node0.isAnd());
2454:       assertFalse(node0.isNot());
2455:       assertFalse(node0.isNumber());
2456:       assertFalse(node0.isObjectLit());
2457:       assertFalse(node0.isInc());
2458:       assertFalse(node0.isBlock());
2459:       assertFalse(node0.isCase());
2460:       assertFalse(node0.hasMoreThanOneChild());
2461:       assertFalse(node0.isContinue());
2462:       assertFalse(node0.isThrow());
2463:       assertFalse(node0.isHook());
2464:       assertTrue(node0.hasChildren());
2465:       assertEquals(1, node0.getChildCount());
2466:       assertFalse(node0.isFalse());
2467:       assertFalse(node0.isSetterDef());
2468:       assertFalse(node0.isNE());
2469:       assertEquals(48, node0.getType());
2470:       assertEquals((-1), node0.getLineno());
2471:       assertFalse(node0.isIf());
2472:       assertFalse(node0.isIn());
2473:       assertFalse(node0.isDebugger());
2474:       assertFalse(node0.isTrue());
2475:       assertFalse(node0.isTry());
2476:       assertFalse(node0.isDefaultCase());
2477:       assertFalse(node0.isVoid());
2478:       assertFalse(node0.isCatch());
2479:       assertFalse(node0.isArrayLit());
2480:       assertFalse(node0.isFor());
2481:       assertTrue(node0.hasOneChild());
2482:       assertFalse(node0.isFunction());
2483:       assertFalse(node0.isRegExp());
2484:       assertFalse(node0.isParamList());
2485:       assertFalse(node0.isStringKey());
2486:       assertFalse(node0.isString());
2487:       assertFalse(node0.isGetterDef());
2488:       assertFalse(node0.isSwitch());
2489:       assertEquals((-1), node0.getCharno());
2490:       assertFalse(node0.isAdd());
2491:       assertFalse(node0.isDo());
2492:       assertFalse(node0.isWhile());
2493:       assertFalse(node0.isNew());
2494:       assertFalse(node0.isVar());
2495:       assertFalse(node0.isCall());
2496:       assertFalse(node0.isReturn());
2497:       assertFalse(node0.isLabel());
2498:       assertFalse(node0.isBreak());
2499:       assertFalse(node0.isNull());
2500:       assertFalse(node0.isAssignAdd());
2501:       assertFalse(node0.isName());
2502:       assertFalse(node0.isDelProp());
2503:       assertFalse(node0.isEmpty());
2504:       assertFalse(node0.isOr());
2505:       assertFalse(node0.equals((Object)node1));
2506:       assertTrue(boolean5 == boolean2);
2507:       assertTrue(boolean5 == boolean3);
2508:       assertTrue(boolean5 == boolean4);
2509:       assertTrue(boolean5 == boolean1);
2510:       assertTrue(boolean5 == boolean0);
2511:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2512:       assertEquals(43, Node.IS_CONSTANT_NAME);
2513:       assertEquals(36, Node.QUOTED_PROP);
2514:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2515:       assertEquals(53, Node.INPUT_ID);
2516:       assertEquals(55, Node.INFERRED_FUNCTION);
2517:       assertEquals(56, Node.CHANGE_TIME);
2518:       assertEquals(2, Node.POST_FLAG);
2519:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2520:       assertEquals(8, Node.FLAG_NO_THROWS);
2521:       assertEquals(39, Node.EMPTY_BLOCK);
2522:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2523:       assertEquals(40, Node.ORIGINALNAME_PROP);
2524:       assertEquals(29, Node.JSDOC_INFO_PROP);
2525:       assertEquals(30, Node.VAR_ARGS_NAME);
2526:       assertEquals(47, Node.IS_DISPATCHER);
2527:       assertEquals(57, Node.LAST_PROP);
2528:       assertEquals(52, Node.LENGTH);
2529:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2530:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2531:       assertEquals(49, Node.DIRECT_EVAL);
2532:       assertEquals(50, Node.FREE_CALL);
2533:       assertEquals(57, Node.REFLECTED_OBJECT);
2534:       assertEquals(46, Node.IS_NAMESPACE);
2535:       assertEquals(54, Node.SLASH_V);
2536:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2537:       assertEquals(37, Node.OPT_ARG_NAME);
2538:       assertEquals(48, Node.DIRECTIVES);
2539:   }
2540: }
RegularFileObject[/tmp/EvoSuite_403_1628161392191/com/google/javascript/rhino/Node_403_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:12 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_403_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_403_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_403_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:03:12.889 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(48, "3f");
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

int int0 = node0.getLength();
assertEquals(0, int0);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ") ");
assertFalse(boolean0);

node0.removeProp(48);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

node0.setLength((-885));
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node node1 = node0.cloneNode();
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(48, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.equals((Object)node1));
assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean1 = node1.isThrow();
assertFalse(boolean1);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(48, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

Iterable<Node> iterable0 = node1.children();
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(48, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(iterable0.contains(node1));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

node1.setLength((-1618));
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(48, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

node0.removeProp(51);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean2 = node0.isNull();
assertFalse(boolean2);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean3 = node1.isDo();
assertFalse(boolean3);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(48, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

node0.addChildrenToBack(node1);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.hasChildren());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertTrue(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(48, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

node0.setChangeTime(47);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.hasChildren());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertTrue(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean4 = node1.isDefaultCase();
assertFalse(boolean4);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.hasChildren());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertTrue(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(48, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

boolean boolean5 = node0.isContinue();
assertFalse(boolean5);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.hasChildren());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(48, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertTrue(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);


[MASTER] 11:03:17.852 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_435_1628161397677/com/google/javascript/rhino/Node_435_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_435_1628161397677/com/google/javascript/rhino/Node_435_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:17.853 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:17.853 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:17.853 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 826
[MASTER] 11:03:17.854 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_435_1628161397677/com/google/javascript/rhino/Node_435_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:17 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_435_tmp__ESTest extends Node_435_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("(3h*Sv :OIK");
21:       assertFalse(node0.isCase());
22:       assertFalse(node0.isThrow());
23:       assertFalse(node0.isDelProp());
24:       assertFalse(node0.isVoid());
25:       assertFalse(node0.isIf());
26:       assertFalse(node0.isNE());
27:       assertFalse(node0.isTrue());
28:       assertFalse(node0.isInc());
29:       assertFalse(node0.isEmpty());
30:       assertFalse(node0.isIn());
31:       assertFalse(node0.isInstanceOf());
32:       assertFalse(node0.isCatch());
33:       assertEquals(0, node0.getChildCount());
34:       assertFalse(node0.isParamList());
35:       assertFalse(node0.isDefaultCase());
36:       assertFalse(node0.isRegExp());
37:       assertFalse(node0.isThis());
38:       assertFalse(node0.isWith());
39:       assertFalse(node0.isArrayLit());
40:       assertFalse(node0.hasOneChild());
41:       assertFalse(node0.isHook());
42:       assertTrue(node0.isString());
43:       assertFalse(node0.isTry());
44:       assertFalse(node0.isFor());
45:       assertFalse(node0.isBlock());
46:       assertFalse(node0.isLabelName());
47:       assertFalse(node0.isStringKey());
48:       assertFalse(node0.isSwitch());
49:       assertFalse(node0.isScript());
50:       assertEquals((-1), node0.getCharno());
51:       assertFalse(node0.isGetterDef());
52:       assertFalse(node0.isNumber());
53:       assertFalse(node0.isReturn());
54:       assertEquals((-1), node0.getLineno());
55:       assertFalse(node0.isDo());
56:       assertFalse(node0.isWhile());
57:       assertFalse(node0.isAssignAdd());
58:       assertFalse(node0.isTypeOf());
59:       assertFalse(node0.isDec());
60:       assertFalse(node0.hasChildren());
61:       assertFalse(node0.isLabel());
62:       assertFalse(node0.isAssign());
63:       assertFalse(node0.isContinue());
64:       assertFalse(node0.hasMoreThanOneChild());
65:       assertFalse(node0.isVar());
66:       assertFalse(node0.isCall());
67:       assertFalse(node0.isGetElem());
68:       assertFalse(node0.isNew());
69:       assertFalse(node0.isName());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isSetterDef());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isOr());
74:       assertEquals(40, node0.getType());
75:       assertFalse(node0.isAnd());
76:       assertFalse(node0.isComma());
77:       assertFalse(node0.isExprResult());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isFunction());
80:       assertFalse(node0.isFalse());
81:       assertFalse(node0.isCast());
82:       assertEquals((-1), node0.getSourcePosition());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isGetProp());
85:       assertFalse(node0.isNot());
86:       assertFalse(node0.isObjectLit());
87:       assertEquals(12, Node.COLUMN_BITS);
88:       assertEquals(51, Node.STATIC_SOURCE_FILE);
89:       assertEquals(32, Node.INCRDECR_PROP);
90:       assertEquals(49, Node.DIRECT_EVAL);
91:       assertEquals(1, Node.DECR_FLAG);
92:       assertEquals(37, Node.OPT_ARG_NAME);
93:       assertEquals(15, Node.NO_SIDE_EFFECTS);
94:       assertEquals(56, Node.CHANGE_TIME);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(54, Node.SLASH_V);
97:       assertEquals(57, Node.REFLECTED_OBJECT);
98:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
99:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(4095, Node.COLUMN_MASK);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(48, Node.DIRECTIVES);
106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(43, Node.IS_CONSTANT_NAME);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(8, Node.FLAG_NO_THROWS);
112:       assertEquals(50, Node.FREE_CALL);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(2, Node.POST_FLAG);
119:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertNotNull(node0);
124:       
125:       String string0 = node0.toStringTree();
126:       assertEquals("STRING (3h*Sv :OIK\n", string0);
127:       assertFalse(node0.isCase());
128:       assertFalse(node0.isThrow());
129:       assertFalse(node0.isDelProp());
130:       assertFalse(node0.isVoid());
131:       assertFalse(node0.isIf());
132:       assertFalse(node0.isNE());
133:       assertFalse(node0.isTrue());
134:       assertFalse(node0.isInc());
135:       assertFalse(node0.isEmpty());
136:       assertFalse(node0.isIn());
137:       assertFalse(node0.isInstanceOf());
138:       assertFalse(node0.isCatch());
139:       assertEquals(0, node0.getChildCount());
140:       assertFalse(node0.isParamList());
141:       assertFalse(node0.isDefaultCase());
142:       assertFalse(node0.isRegExp());
143:       assertFalse(node0.isThis());
144:       assertFalse(node0.isWith());
145:       assertFalse(node0.isArrayLit());
146:       assertFalse(node0.hasOneChild());
147:       assertFalse(node0.isHook());
148:       assertTrue(node0.isString());
149:       assertFalse(node0.isTry());
150:       assertFalse(node0.isFor());
151:       assertFalse(node0.isBlock());
152:       assertFalse(node0.isLabelName());
153:       assertFalse(node0.isStringKey());
154:       assertFalse(node0.isSwitch());
155:       assertFalse(node0.isScript());
156:       assertEquals((-1), node0.getCharno());
157:       assertFalse(node0.isGetterDef());
158:       assertFalse(node0.isNumber());
159:       assertFalse(node0.isReturn());
160:       assertEquals((-1), node0.getLineno());
161:       assertFalse(node0.isDo());
162:       assertFalse(node0.isWhile());
163:       assertFalse(node0.isAssignAdd());
164:       assertFalse(node0.isTypeOf());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.hasChildren());
167:       assertFalse(node0.isLabel());
168:       assertFalse(node0.isAssign());
169:       assertFalse(node0.isContinue());
170:       assertFalse(node0.hasMoreThanOneChild());
171:       assertFalse(node0.isVar());
172:       assertFalse(node0.isCall());
173:       assertFalse(node0.isGetElem());
174:       assertFalse(node0.isNew());
175:       assertFalse(node0.isName());
176:       assertFalse(node0.isNull());
177:       assertFalse(node0.isSetterDef());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isOr());
180:       assertEquals(40, node0.getType());
181:       assertFalse(node0.isAnd());
182:       assertFalse(node0.isComma());
183:       assertFalse(node0.isExprResult());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isFunction());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isCast());
188:       assertEquals((-1), node0.getSourcePosition());
189:       assertFalse(node0.isDebugger());
190:       assertFalse(node0.isGetProp());
191:       assertFalse(node0.isNot());
192:       assertFalse(node0.isObjectLit());
193:       assertEquals(12, Node.COLUMN_BITS);
194:       assertEquals(51, Node.STATIC_SOURCE_FILE);
195:       assertEquals(32, Node.INCRDECR_PROP);
196:       assertEquals(49, Node.DIRECT_EVAL);
197:       assertEquals(1, Node.DECR_FLAG);
198:       assertEquals(37, Node.OPT_ARG_NAME);
199:       assertEquals(15, Node.NO_SIDE_EFFECTS);
200:       assertEquals(56, Node.CHANGE_TIME);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(57, Node.REFLECTED_OBJECT);
204:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
206:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(4095, Node.COLUMN_MASK);
210:       assertEquals(55, Node.INFERRED_FUNCTION);
211:       assertEquals(48, Node.DIRECTIVES);
212:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(43, Node.IS_CONSTANT_NAME);
216:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
217:       assertEquals(8, Node.FLAG_NO_THROWS);
218:       assertEquals(50, Node.FREE_CALL);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(29, Node.JSDOC_INFO_PROP);
222:       assertEquals(53, Node.INPUT_ID);
223:       assertEquals(40, Node.ORIGINALNAME_PROP);
224:       assertEquals(2, Node.POST_FLAG);
225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
226:       assertEquals(57, Node.LAST_PROP);
227:       assertEquals(30, Node.VAR_ARGS_NAME);
228:       assertEquals(47, Node.IS_DISPATCHER);
229:       assertNotNull(string0);
230:       
231:       boolean boolean0 = node0.isIn();
232:       assertFalse(boolean0);
233:       assertFalse(node0.isCase());
234:       assertFalse(node0.isThrow());
235:       assertFalse(node0.isDelProp());
236:       assertFalse(node0.isVoid());
237:       assertFalse(node0.isIf());
238:       assertFalse(node0.isNE());
239:       assertFalse(node0.isTrue());
240:       assertFalse(node0.isInc());
241:       assertFalse(node0.isEmpty());
242:       assertFalse(node0.isIn());
243:       assertFalse(node0.isInstanceOf());
244:       assertFalse(node0.isCatch());
245:       assertEquals(0, node0.getChildCount());
246:       assertFalse(node0.isParamList());
247:       assertFalse(node0.isDefaultCase());
248:       assertFalse(node0.isRegExp());
249:       assertFalse(node0.isThis());
250:       assertFalse(node0.isWith());
251:       assertFalse(node0.isArrayLit());
252:       assertFalse(node0.hasOneChild());
253:       assertFalse(node0.isHook());
254:       assertTrue(node0.isString());
255:       assertFalse(node0.isTry());
256:       assertFalse(node0.isFor());
257:       assertFalse(node0.isBlock());
258:       assertFalse(node0.isLabelName());
259:       assertFalse(node0.isStringKey());
260:       assertFalse(node0.isSwitch());
261:       assertFalse(node0.isScript());
262:       assertEquals((-1), node0.getCharno());
263:       assertFalse(node0.isGetterDef());
264:       assertFalse(node0.isNumber());
265:       assertFalse(node0.isReturn());
266:       assertEquals((-1), node0.getLineno());
267:       assertFalse(node0.isDo());
268:       assertFalse(node0.isWhile());
269:       assertFalse(node0.isAssignAdd());
270:       assertFalse(node0.isTypeOf());
271:       assertFalse(node0.isDec());
272:       assertFalse(node0.hasChildren());
273:       assertFalse(node0.isLabel());
274:       assertFalse(node0.isAssign());
275:       assertFalse(node0.isContinue());
276:       assertFalse(node0.hasMoreThanOneChild());
277:       assertFalse(node0.isVar());
278:       assertFalse(node0.isCall());
279:       assertFalse(node0.isGetElem());
280:       assertFalse(node0.isNew());
281:       assertFalse(node0.isName());
282:       assertFalse(node0.isNull());
283:       assertFalse(node0.isSetterDef());
284:       assertFalse(node0.isAdd());
285:       assertFalse(node0.isOr());
286:       assertEquals(40, node0.getType());
287:       assertFalse(node0.isAnd());
288:       assertFalse(node0.isComma());
289:       assertFalse(node0.isExprResult());
290:       assertFalse(node0.isBreak());
291:       assertFalse(node0.isFunction());
292:       assertFalse(node0.isFalse());
293:       assertFalse(node0.isCast());
294:       assertEquals((-1), node0.getSourcePosition());
295:       assertFalse(node0.isDebugger());
296:       assertFalse(node0.isGetProp());
297:       assertFalse(node0.isNot());
298:       assertFalse(node0.isObjectLit());
299:       assertEquals(12, Node.COLUMN_BITS);
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(32, Node.INCRDECR_PROP);
302:       assertEquals(49, Node.DIRECT_EVAL);
303:       assertEquals(1, Node.DECR_FLAG);
304:       assertEquals(37, Node.OPT_ARG_NAME);
305:       assertEquals(15, Node.NO_SIDE_EFFECTS);
306:       assertEquals(56, Node.CHANGE_TIME);
307:       assertEquals(46, Node.IS_NAMESPACE);
308:       assertEquals(54, Node.SLASH_V);
309:       assertEquals(57, Node.REFLECTED_OBJECT);
310:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
312:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
313:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(4095, Node.COLUMN_MASK);
316:       assertEquals(55, Node.INFERRED_FUNCTION);
317:       assertEquals(48, Node.DIRECTIVES);
318:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
319:       assertEquals(39, Node.EMPTY_BLOCK);
320:       assertEquals(36, Node.QUOTED_PROP);
321:       assertEquals(43, Node.IS_CONSTANT_NAME);
322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
323:       assertEquals(8, Node.FLAG_NO_THROWS);
324:       assertEquals(50, Node.FREE_CALL);
325:       assertEquals(52, Node.LENGTH);
326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
327:       assertEquals(29, Node.JSDOC_INFO_PROP);
328:       assertEquals(53, Node.INPUT_ID);
329:       assertEquals(40, Node.ORIGINALNAME_PROP);
330:       assertEquals(2, Node.POST_FLAG);
331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertEquals(30, Node.VAR_ARGS_NAME);
334:       assertEquals(47, Node.IS_DISPATCHER);
335:       
336:       node0.setType(125);
337:       assertFalse(node0.isCase());
338:       assertFalse(node0.isThrow());
339:       assertFalse(node0.isDelProp());
340:       assertFalse(node0.isVoid());
341:       assertFalse(node0.isIf());
342:       assertFalse(node0.isNE());
343:       assertFalse(node0.isTrue());
344:       assertFalse(node0.isInc());
345:       assertFalse(node0.isEmpty());
346:       assertFalse(node0.isIn());
347:       assertFalse(node0.isInstanceOf());
348:       assertFalse(node0.isCatch());
349:       assertEquals(0, node0.getChildCount());
350:       assertFalse(node0.isParamList());
351:       assertFalse(node0.isDefaultCase());
352:       assertFalse(node0.isRegExp());
353:       assertFalse(node0.isThis());
354:       assertFalse(node0.isWith());
355:       assertFalse(node0.isArrayLit());
356:       assertFalse(node0.hasOneChild());
357:       assertEquals(125, node0.getType());
358:       assertFalse(node0.isHook());
359:       assertFalse(node0.isTry());
360:       assertFalse(node0.isFor());
361:       assertFalse(node0.isLabelName());
362:       assertFalse(node0.isStringKey());
363:       assertFalse(node0.isSwitch());
364:       assertFalse(node0.isScript());
365:       assertEquals((-1), node0.getCharno());
366:       assertFalse(node0.isGetterDef());
367:       assertFalse(node0.isNumber());
368:       assertFalse(node0.isReturn());
369:       assertEquals((-1), node0.getLineno());
370:       assertFalse(node0.isDo());
371:       assertFalse(node0.isWhile());
372:       assertFalse(node0.isAssignAdd());
373:       assertFalse(node0.isTypeOf());
374:       assertFalse(node0.isDec());
375:       assertFalse(node0.hasChildren());
376:       assertFalse(node0.isLabel());
377:       assertFalse(node0.isAssign());
378:       assertFalse(node0.isContinue());
379:       assertFalse(node0.hasMoreThanOneChild());
380:       assertFalse(node0.isVar());
381:       assertFalse(node0.isCall());
382:       assertFalse(node0.isGetElem());
383:       assertFalse(node0.isNew());
384:       assertFalse(node0.isName());
385:       assertFalse(node0.isNull());
386:       assertFalse(node0.isSetterDef());
387:       assertFalse(node0.isAdd());
388:       assertFalse(node0.isOr());
389:       assertFalse(node0.isAnd());
390:       assertFalse(node0.isComma());
391:       assertFalse(node0.isExprResult());
392:       assertFalse(node0.isBreak());
393:       assertFalse(node0.isFunction());
394:       assertTrue(node0.isBlock());
395:       assertFalse(node0.isFalse());
396:       assertFalse(node0.isCast());
397:       assertEquals((-1), node0.getSourcePosition());
398:       assertFalse(node0.isDebugger());
399:       assertFalse(node0.isGetProp());
400:       assertFalse(node0.isNot());
401:       assertFalse(node0.isString());
402:       assertFalse(node0.isObjectLit());
403:       assertEquals(12, Node.COLUMN_BITS);
404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
405:       assertEquals(32, Node.INCRDECR_PROP);
406:       assertEquals(49, Node.DIRECT_EVAL);
407:       assertEquals(1, Node.DECR_FLAG);
408:       assertEquals(37, Node.OPT_ARG_NAME);
409:       assertEquals(15, Node.NO_SIDE_EFFECTS);
410:       assertEquals(56, Node.CHANGE_TIME);
411:       assertEquals(46, Node.IS_NAMESPACE);
412:       assertEquals(54, Node.SLASH_V);
413:       assertEquals(57, Node.REFLECTED_OBJECT);
414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
417:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
418:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
419:       assertEquals(4095, Node.COLUMN_MASK);
420:       assertEquals(55, Node.INFERRED_FUNCTION);
421:       assertEquals(48, Node.DIRECTIVES);
422:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
423:       assertEquals(39, Node.EMPTY_BLOCK);
424:       assertEquals(36, Node.QUOTED_PROP);
425:       assertEquals(43, Node.IS_CONSTANT_NAME);
426:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(50, Node.FREE_CALL);
429:       assertEquals(52, Node.LENGTH);
430:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
431:       assertEquals(29, Node.JSDOC_INFO_PROP);
432:       assertEquals(53, Node.INPUT_ID);
433:       assertEquals(40, Node.ORIGINALNAME_PROP);
434:       assertEquals(2, Node.POST_FLAG);
435:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
436:       assertEquals(57, Node.LAST_PROP);
437:       assertEquals(30, Node.VAR_ARGS_NAME);
438:       assertEquals(47, Node.IS_DISPATCHER);
439:       
440:       boolean boolean1 = node0.isOnlyModifiesThisCall();
441:       assertFalse(boolean1);
442:       assertFalse(node0.isCase());
443:       assertFalse(node0.isThrow());
444:       assertFalse(node0.isDelProp());
445:       assertFalse(node0.isVoid());
446:       assertFalse(node0.isIf());
447:       assertFalse(node0.isNE());
448:       assertFalse(node0.isTrue());
449:       assertFalse(node0.isInc());
450:       assertFalse(node0.isEmpty());
451:       assertFalse(node0.isIn());
452:       assertFalse(node0.isInstanceOf());
453:       assertFalse(node0.isCatch());
454:       assertEquals(0, node0.getChildCount());
455:       assertFalse(node0.isParamList());
456:       assertFalse(node0.isDefaultCase());
457:       assertFalse(node0.isRegExp());
458:       assertFalse(node0.isThis());
459:       assertFalse(node0.isWith());
460:       assertFalse(node0.isArrayLit());
461:       assertFalse(node0.hasOneChild());
462:       assertEquals(125, node0.getType());
463:       assertFalse(node0.isHook());
464:       assertFalse(node0.isTry());
465:       assertFalse(node0.isFor());
466:       assertFalse(node0.isLabelName());
467:       assertFalse(node0.isStringKey());
468:       assertFalse(node0.isSwitch());
469:       assertFalse(node0.isScript());
470:       assertEquals((-1), node0.getCharno());
471:       assertFalse(node0.isGetterDef());
472:       assertFalse(node0.isNumber());
473:       assertFalse(node0.isReturn());
474:       assertEquals((-1), node0.getLineno());
475:       assertFalse(node0.isDo());
476:       assertFalse(node0.isWhile());
477:       assertFalse(node0.isAssignAdd());
478:       assertFalse(node0.isTypeOf());
479:       assertFalse(node0.isDec());
480:       assertFalse(node0.hasChildren());
481:       assertFalse(node0.isLabel());
482:       assertFalse(node0.isAssign());
483:       assertFalse(node0.isContinue());
484:       assertFalse(node0.hasMoreThanOneChild());
485:       assertFalse(node0.isVar());
486:       assertFalse(node0.isCall());
487:       assertFalse(node0.isGetElem());
488:       assertFalse(node0.isNew());
489:       assertFalse(node0.isName());
490:       assertFalse(node0.isNull());
491:       assertFalse(node0.isSetterDef());
492:       assertFalse(node0.isAdd());
493:       assertFalse(node0.isOr());
494:       assertFalse(node0.isAnd());
495:       assertFalse(node0.isComma());
496:       assertFalse(node0.isExprResult());
497:       assertFalse(node0.isBreak());
498:       assertFalse(node0.isFunction());
499:       assertTrue(node0.isBlock());
500:       assertFalse(node0.isFalse());
501:       assertFalse(node0.isCast());
502:       assertEquals((-1), node0.getSourcePosition());
503:       assertFalse(node0.isDebugger());
504:       assertFalse(node0.isGetProp());
505:       assertFalse(node0.isNot());
506:       assertFalse(node0.isString());
507:       assertFalse(node0.isObjectLit());
508:       assertTrue(boolean1 == boolean0);
509:       assertEquals(12, Node.COLUMN_BITS);
510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
511:       assertEquals(32, Node.INCRDECR_PROP);
512:       assertEquals(49, Node.DIRECT_EVAL);
513:       assertEquals(1, Node.DECR_FLAG);
514:       assertEquals(37, Node.OPT_ARG_NAME);
515:       assertEquals(15, Node.NO_SIDE_EFFECTS);
516:       assertEquals(56, Node.CHANGE_TIME);
517:       assertEquals(46, Node.IS_NAMESPACE);
518:       assertEquals(54, Node.SLASH_V);
519:       assertEquals(57, Node.REFLECTED_OBJECT);
520:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
521:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
522:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
525:       assertEquals(4095, Node.COLUMN_MASK);
526:       assertEquals(55, Node.INFERRED_FUNCTION);
527:       assertEquals(48, Node.DIRECTIVES);
528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
529:       assertEquals(39, Node.EMPTY_BLOCK);
530:       assertEquals(36, Node.QUOTED_PROP);
531:       assertEquals(43, Node.IS_CONSTANT_NAME);
532:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
533:       assertEquals(8, Node.FLAG_NO_THROWS);
534:       assertEquals(50, Node.FREE_CALL);
535:       assertEquals(52, Node.LENGTH);
536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
537:       assertEquals(29, Node.JSDOC_INFO_PROP);
538:       assertEquals(53, Node.INPUT_ID);
539:       assertEquals(40, Node.ORIGINALNAME_PROP);
540:       assertEquals(2, Node.POST_FLAG);
541:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
542:       assertEquals(57, Node.LAST_PROP);
543:       assertEquals(30, Node.VAR_ARGS_NAME);
544:       assertEquals(47, Node.IS_DISPATCHER);
545:       
546:       boolean boolean2 = node0.isRegExp();
547:       assertFalse(boolean2);
548:       assertFalse(node0.isCase());
549:       assertFalse(node0.isThrow());
550:       assertFalse(node0.isDelProp());
551:       assertFalse(node0.isVoid());
552:       assertFalse(node0.isIf());
553:       assertFalse(node0.isNE());
554:       assertFalse(node0.isTrue());
555:       assertFalse(node0.isInc());
556:       assertFalse(node0.isEmpty());
557:       assertFalse(node0.isIn());
558:       assertFalse(node0.isInstanceOf());
559:       assertFalse(node0.isCatch());
560:       assertEquals(0, node0.getChildCount());
561:       assertFalse(node0.isParamList());
562:       assertFalse(node0.isDefaultCase());
563:       assertFalse(node0.isRegExp());
564:       assertFalse(node0.isThis());
565:       assertFalse(node0.isWith());
566:       assertFalse(node0.isArrayLit());
567:       assertFalse(node0.hasOneChild());
568:       assertEquals(125, node0.getType());
569:       assertFalse(node0.isHook());
570:       assertFalse(node0.isTry());
571:       assertFalse(node0.isFor());
572:       assertFalse(node0.isLabelName());
573:       assertFalse(node0.isStringKey());
574:       assertFalse(node0.isSwitch());
575:       assertFalse(node0.isScript());
576:       assertEquals((-1), node0.getCharno());
577:       assertFalse(node0.isGetterDef());
578:       assertFalse(node0.isNumber());
579:       assertFalse(node0.isReturn());
580:       assertEquals((-1), node0.getLineno());
581:       assertFalse(node0.isDo());
582:       assertFalse(node0.isWhile());
583:       assertFalse(node0.isAssignAdd());
584:       assertFalse(node0.isTypeOf());
585:       assertFalse(node0.isDec());
586:       assertFalse(node0.hasChildren());
587:       assertFalse(node0.isLabel());
588:       assertFalse(node0.isAssign());
589:       assertFalse(node0.isContinue());
590:       assertFalse(node0.hasMoreThanOneChild());
591:       assertFalse(node0.isVar());
592:       assertFalse(node0.isCall());
593:       assertFalse(node0.isGetElem());
594:       assertFalse(node0.isNew());
595:       assertFalse(node0.isName());
596:       assertFalse(node0.isNull());
597:       assertFalse(node0.isSetterDef());
598:       assertFalse(node0.isAdd());
599:       assertFalse(node0.isOr());
600:       assertFalse(node0.isAnd());
601:       assertFalse(node0.isComma());
602:       assertFalse(node0.isExprResult());
603:       assertFalse(node0.isBreak());
604:       assertFalse(node0.isFunction());
605:       assertTrue(node0.isBlock());
606:       assertFalse(node0.isFalse());
607:       assertFalse(node0.isCast());
608:       assertEquals((-1), node0.getSourcePosition());
609:       assertFalse(node0.isDebugger());
610:       assertFalse(node0.isGetProp());
611:       assertFalse(node0.isNot());
612:       assertFalse(node0.isString());
613:       assertFalse(node0.isObjectLit());
614:       assertTrue(boolean2 == boolean0);
615:       assertTrue(boolean2 == boolean1);
616:       assertEquals(12, Node.COLUMN_BITS);
617:       assertEquals(51, Node.STATIC_SOURCE_FILE);
618:       assertEquals(32, Node.INCRDECR_PROP);
619:       assertEquals(49, Node.DIRECT_EVAL);
620:       assertEquals(1, Node.DECR_FLAG);
621:       assertEquals(37, Node.OPT_ARG_NAME);
622:       assertEquals(15, Node.NO_SIDE_EFFECTS);
623:       assertEquals(56, Node.CHANGE_TIME);
624:       assertEquals(46, Node.IS_NAMESPACE);
625:       assertEquals(54, Node.SLASH_V);
626:       assertEquals(57, Node.REFLECTED_OBJECT);
627:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
628:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
629:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
630:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
631:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
632:       assertEquals(4095, Node.COLUMN_MASK);
633:       assertEquals(55, Node.INFERRED_FUNCTION);
634:       assertEquals(48, Node.DIRECTIVES);
635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
636:       assertEquals(39, Node.EMPTY_BLOCK);
637:       assertEquals(36, Node.QUOTED_PROP);
638:       assertEquals(43, Node.IS_CONSTANT_NAME);
639:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
640:       assertEquals(8, Node.FLAG_NO_THROWS);
641:       assertEquals(50, Node.FREE_CALL);
642:       assertEquals(52, Node.LENGTH);
643:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
644:       assertEquals(29, Node.JSDOC_INFO_PROP);
645:       assertEquals(53, Node.INPUT_ID);
646:       assertEquals(40, Node.ORIGINALNAME_PROP);
647:       assertEquals(2, Node.POST_FLAG);
648:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
649:       assertEquals(57, Node.LAST_PROP);
650:       assertEquals(30, Node.VAR_ARGS_NAME);
651:       assertEquals(47, Node.IS_DISPATCHER);
652:       
653:       Node node1 = new Node(132);
654:       assertFalse(node1.isInc());
655:       assertFalse(node1.isSwitch());
656:       assertEquals((-1), node1.getCharno());
657:       assertFalse(node1.isThrow());
658:       assertFalse(node1.isHook());
659:       assertFalse(node1.isFalse());
660:       assertEquals(132, node1.getType());
661:       assertFalse(node1.isNE());
662:       assertFalse(node1.isBreak());
663:       assertFalse(node1.isDelProp());
664:       assertFalse(node1.isIf());
665:       assertFalse(node1.isEmpty());
666:       assertFalse(node1.isIn());
667:       assertFalse(node1.isRegExp());
668:       assertFalse(node1.isTry());
669:       assertFalse(node1.isDefaultCase());
670:       assertFalse(node1.isCatch());
671:       assertFalse(node1.isArrayLit());
672:       assertFalse(node1.isWith());
673:       assertEquals(0, node1.getChildCount());
674:       assertFalse(node1.isInstanceOf());
675:       assertFalse(node1.isThis());
676:       assertFalse(node1.isParamList());
677:       assertFalse(node1.isFor());
678:       assertFalse(node1.isLabelName());
679:       assertFalse(node1.isStringKey());
680:       assertFalse(node1.isCase());
681:       assertFalse(node1.hasOneChild());
682:       assertFalse(node1.isGetterDef());
683:       assertFalse(node1.isNumber());
684:       assertFalse(node1.isBlock());
685:       assertFalse(node1.isNew());
686:       assertFalse(node1.isWhile());
687:       assertFalse(node1.isDo());
688:       assertFalse(node1.hasMoreThanOneChild());
689:       assertFalse(node1.isCall());
690:       assertFalse(node1.isVar());
691:       assertFalse(node1.isContinue());
692:       assertFalse(node1.isSetterDef());
693:       assertFalse(node1.isNull());
694:       assertFalse(node1.isLabel());
695:       assertEquals((-1), node1.getLineno());
696:       assertFalse(node1.isName());
697:       assertFalse(node1.isAssignAdd());
698:       assertFalse(node1.isAdd());
699:       assertFalse(node1.isOr());
700:       assertFalse(node1.isFunction());
701:       assertFalse(node1.isTrue());
702:       assertFalse(node1.isExprResult());
703:       assertFalse(node1.isVoid());
704:       assertFalse(node1.isDebugger());
705:       assertTrue(node1.isScript());
706:       assertFalse(node1.isAnd());
707:       assertFalse(node1.isCast());
708:       assertFalse(node1.isGetElem());
709:       assertFalse(node1.isAssign());
710:       assertFalse(node1.isTypeOf());
711:       assertFalse(node1.isComma());
712:       assertEquals((-1), node1.getSourcePosition());
713:       assertFalse(node1.isDec());
714:       assertFalse(node1.isGetProp());
715:       assertFalse(node1.hasChildren());
716:       assertFalse(node1.isReturn());
717:       assertFalse(node1.isObjectLit());
718:       assertFalse(node1.isString());
719:       assertFalse(node1.isNot());
720:       assertFalse(node1.equals((Object)node0));
721:       assertEquals(54, Node.SLASH_V);
722:       assertEquals(52, Node.LENGTH);
723:       assertEquals(57, Node.LAST_PROP);
724:       assertEquals(49, Node.DIRECT_EVAL);
725:       assertEquals(15, Node.NO_SIDE_EFFECTS);
726:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
727:       assertEquals(46, Node.IS_NAMESPACE);
728:       assertEquals(50, Node.FREE_CALL);
729:       assertEquals(51, Node.STATIC_SOURCE_FILE);
730:       assertEquals(57, Node.REFLECTED_OBJECT);
731:       assertEquals(37, Node.OPT_ARG_NAME);
732:       assertEquals(48, Node.DIRECTIVES);
733:       assertEquals(56, Node.CHANGE_TIME);
734:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
735:       assertEquals(32, Node.INCRDECR_PROP);
736:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
737:       assertEquals(12, Node.COLUMN_BITS);
738:       assertEquals(1, Node.DECR_FLAG);
739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
740:       assertEquals(4095, Node.COLUMN_MASK);
741:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
742:       assertEquals(43, Node.IS_CONSTANT_NAME);
743:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
744:       assertEquals(53, Node.INPUT_ID);
745:       assertEquals(55, Node.INFERRED_FUNCTION);
746:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
747:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
748:       assertEquals(36, Node.QUOTED_PROP);
749:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
750:       assertEquals(8, Node.FLAG_NO_THROWS);
751:       assertEquals(39, Node.EMPTY_BLOCK);
752:       assertEquals(2, Node.POST_FLAG);
753:       assertEquals(29, Node.JSDOC_INFO_PROP);
754:       assertEquals(40, Node.ORIGINALNAME_PROP);
755:       assertEquals(30, Node.VAR_ARGS_NAME);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertNotNull(node1);
758:       
759:       Iterable<Node> iterable0 = node1.children();
760:       assertFalse(node1.isInc());
761:       assertFalse(node1.isSwitch());
762:       assertEquals((-1), node1.getCharno());
763:       assertFalse(node1.isThrow());
764:       assertFalse(node1.isHook());
765:       assertFalse(node1.isFalse());
766:       assertEquals(132, node1.getType());
767:       assertFalse(node1.isNE());
768:       assertFalse(node1.isBreak());
769:       assertFalse(node1.isDelProp());
770:       assertFalse(node1.isIf());
771:       assertFalse(node1.isEmpty());
772:       assertFalse(node1.isIn());
773:       assertFalse(node1.isRegExp());
774:       assertFalse(node1.isTry());
775:       assertFalse(node1.isDefaultCase());
776:       assertFalse(node1.isCatch());
777:       assertFalse(node1.isArrayLit());
778:       assertFalse(node1.isWith());
779:       assertEquals(0, node1.getChildCount());
780:       assertFalse(node1.isInstanceOf());
781:       assertFalse(node1.isThis());
782:       assertFalse(node1.isParamList());
783:       assertFalse(node1.isFor());
784:       assertFalse(node1.isLabelName());
785:       assertFalse(node1.isStringKey());
786:       assertFalse(node1.isCase());
787:       assertFalse(node1.hasOneChild());
788:       assertFalse(node1.isGetterDef());
789:       assertFalse(node1.isNumber());
790:       assertFalse(node1.isBlock());
791:       assertFalse(node1.isNew());
792:       assertFalse(node1.isWhile());
793:       assertFalse(node1.isDo());
794:       assertFalse(node1.hasMoreThanOneChild());
795:       assertFalse(node1.isCall());
796:       assertFalse(node1.isVar());
797:       assertFalse(node1.isContinue());
798:       assertFalse(node1.isSetterDef());
799:       assertFalse(node1.isNull());
800:       assertFalse(node1.isLabel());
801:       assertEquals((-1), node1.getLineno());
802:       assertFalse(node1.isName());
803:       assertFalse(node1.isAssignAdd());
804:       assertFalse(node1.isAdd());
805:       assertFalse(node1.isOr());
806:       assertFalse(node1.isFunction());
807:       assertFalse(node1.isTrue());
808:       assertFalse(node1.isExprResult());
809:       assertFalse(node1.isVoid());
810:       assertFalse(node1.isDebugger());
811:       assertTrue(node1.isScript());
812:       assertFalse(node1.isAnd());
813:       assertFalse(node1.isCast());
814:       assertFalse(node1.isGetElem());
815:       assertFalse(node1.isAssign());
816:       assertFalse(node1.isTypeOf());
817:       assertFalse(node1.isComma());
818:       assertEquals((-1), node1.getSourcePosition());
819:       assertFalse(node1.isDec());
820:       assertFalse(node1.isGetProp());
821:       assertFalse(node1.hasChildren());
822:       assertFalse(node1.isReturn());
823:       assertFalse(node1.isObjectLit());
824:       assertFalse(node1.isString());
825:       assertFalse(node1.isNot());
826:       assertFalse(iterable0.contains(node1));
827:       assertFalse(node1.equals((Object)node0));
828:       assertEquals(54, Node.SLASH_V);
829:       assertEquals(52, Node.LENGTH);
830:       assertEquals(57, Node.LAST_PROP);
831:       assertEquals(49, Node.DIRECT_EVAL);
832:       assertEquals(15, Node.NO_SIDE_EFFECTS);
833:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
834:       assertEquals(46, Node.IS_NAMESPACE);
835:       assertEquals(50, Node.FREE_CALL);
836:       assertEquals(51, Node.STATIC_SOURCE_FILE);
837:       assertEquals(57, Node.REFLECTED_OBJECT);
838:       assertEquals(37, Node.OPT_ARG_NAME);
839:       assertEquals(48, Node.DIRECTIVES);
840:       assertEquals(56, Node.CHANGE_TIME);
841:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
842:       assertEquals(32, Node.INCRDECR_PROP);
843:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
844:       assertEquals(12, Node.COLUMN_BITS);
845:       assertEquals(1, Node.DECR_FLAG);
846:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
847:       assertEquals(4095, Node.COLUMN_MASK);
848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
849:       assertEquals(43, Node.IS_CONSTANT_NAME);
850:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
851:       assertEquals(53, Node.INPUT_ID);
852:       assertEquals(55, Node.INFERRED_FUNCTION);
853:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
855:       assertEquals(36, Node.QUOTED_PROP);
856:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
857:       assertEquals(8, Node.FLAG_NO_THROWS);
858:       assertEquals(39, Node.EMPTY_BLOCK);
859:       assertEquals(2, Node.POST_FLAG);
860:       assertEquals(29, Node.JSDOC_INFO_PROP);
861:       assertEquals(40, Node.ORIGINALNAME_PROP);
862:       assertEquals(30, Node.VAR_ARGS_NAME);
863:       assertEquals(47, Node.IS_DISPATCHER);
864:       assertNotNull(iterable0);
865:       
866:       Node node2 = Node.newString("xv_f(e?g\"~FN*./;A.`!", 57, (-396));
867:       assertFalse(node2.isSetterDef());
868:       assertFalse(node2.isParamList());
869:       assertFalse(node2.isNull());
870:       assertEquals(0, node2.getChildCount());
871:       assertFalse(node2.isAdd());
872:       assertFalse(node2.isVar());
873:       assertFalse(node2.isNew());
874:       assertTrue(node2.isString());
875:       assertFalse(node2.isWhile());
876:       assertFalse(node2.isTrue());
877:       assertFalse(node2.isBlock());
878:       assertFalse(node2.hasMoreThanOneChild());
879:       assertFalse(node2.isRegExp());
880:       assertFalse(node2.isCatch());
881:       assertFalse(node2.isCall());
882:       assertEquals((-1), node2.getLineno());
883:       assertFalse(node2.isName());
884:       assertFalse(node2.isDelProp());
885:       assertFalse(node2.isVoid());
886:       assertFalse(node2.isNumber());
887:       assertFalse(node2.isFor());
888:       assertFalse(node2.isEmpty());
889:       assertFalse(node2.isLabel());
890:       assertFalse(node2.isGetterDef());
891:       assertFalse(node2.isOr());
892:       assertFalse(node2.hasOneChild());
893:       assertFalse(node2.isCase());
894:       assertFalse(node2.isAssignAdd());
895:       assertFalse(node2.isTry());
896:       assertFalse(node2.isDo());
897:       assertFalse(node2.isDefaultCase());
898:       assertFalse(node2.isScript());
899:       assertEquals((-1), node2.getCharno());
900:       assertFalse(node2.isArrayLit());
901:       assertFalse(node2.isStringKey());
902:       assertFalse(node2.isSwitch());
903:       assertFalse(node2.isLabelName());
904:       assertFalse(node2.isBreak());
905:       assertFalse(node2.isThis());
906:       assertFalse(node2.isFalse());
907:       assertFalse(node2.isComma());
908:       assertFalse(node2.isHook());
909:       assertFalse(node2.isThrow());
910:       assertFalse(node2.isGetProp());
911:       assertFalse(node2.isInc());
912:       assertFalse(node2.isExprResult());
913:       assertFalse(node2.isWith());
914:       assertFalse(node2.isInstanceOf());
915:       assertFalse(node2.isGetElem());
916:       assertEquals((-1), node2.getSourcePosition());
917:       assertFalse(node2.isDec());
918:       assertFalse(node2.isIf());
919:       assertFalse(node2.hasChildren());
920:       assertFalse(node2.isNE());
921:       assertFalse(node2.isAssign());
922:       assertFalse(node2.isTypeOf());
923:       assertFalse(node2.isIn());
924:       assertFalse(node2.isReturn());
925:       assertEquals(40, node2.getType());
926:       assertFalse(node2.isContinue());
927:       assertFalse(node2.isDebugger());
928:       assertFalse(node2.isFunction());
929:       assertFalse(node2.isNot());
930:       assertFalse(node2.isObjectLit());
931:       assertFalse(node2.isCast());
932:       assertFalse(node2.isAnd());
933:       assertFalse(node2.equals((Object)node0));
934:       assertFalse(node2.equals((Object)node1));
935:       assertEquals(8, Node.FLAG_NO_THROWS);
936:       assertEquals(48, Node.DIRECTIVES);
937:       assertEquals(50, Node.FREE_CALL);
938:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
939:       assertEquals(4095, Node.COLUMN_MASK);
940:       assertEquals(40, Node.ORIGINALNAME_PROP);
941:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
942:       assertEquals(43, Node.IS_CONSTANT_NAME);
943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
944:       assertEquals(12, Node.COLUMN_BITS);
945:       assertEquals(54, Node.SLASH_V);
946:       assertEquals(51, Node.STATIC_SOURCE_FILE);
947:       assertEquals(32, Node.INCRDECR_PROP);
948:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
949:       assertEquals(1, Node.DECR_FLAG);
950:       assertEquals(56, Node.CHANGE_TIME);
951:       assertEquals(47, Node.IS_DISPATCHER);
952:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
953:       assertEquals(37, Node.OPT_ARG_NAME);
954:       assertEquals(2, Node.POST_FLAG);
955:       assertEquals(46, Node.IS_NAMESPACE);
956:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
957:       assertEquals(15, Node.NO_SIDE_EFFECTS);
958:       assertEquals(36, Node.QUOTED_PROP);
959:       assertEquals(57, Node.LAST_PROP);
960:       assertEquals(30, Node.VAR_ARGS_NAME);
961:       assertEquals(49, Node.DIRECT_EVAL);
962:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
963:       assertEquals(57, Node.REFLECTED_OBJECT);
964:       assertEquals(52, Node.LENGTH);
965:       assertEquals(53, Node.INPUT_ID);
966:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
967:       assertEquals(55, Node.INFERRED_FUNCTION);
968:       assertEquals(39, Node.EMPTY_BLOCK);
969:       assertEquals(29, Node.JSDOC_INFO_PROP);
970:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
971:       assertNotSame(node2, node0);
972:       assertNotNull(node2);
973:       
974:       node2.putIntProp(55, (-180));
975:       assertFalse(node2.isSetterDef());
976:       assertFalse(node2.isParamList());
977:       assertFalse(node2.isNull());
978:       assertEquals(0, node2.getChildCount());
979:       assertFalse(node2.isAdd());
980:       assertFalse(node2.isVar());
981:       assertFalse(node2.isNew());
982:       assertTrue(node2.isString());
983:       assertFalse(node2.isWhile());
984:       assertFalse(node2.isTrue());
985:       assertFalse(node2.isBlock());
986:       assertFalse(node2.hasMoreThanOneChild());
987:       assertFalse(node2.isRegExp());
988:       assertFalse(node2.isCatch());
989:       assertFalse(node2.isCall());
990:       assertEquals((-1), node2.getLineno());
991:       assertFalse(node2.isName());
992:       assertFalse(node2.isDelProp());
993:       assertFalse(node2.isVoid());
994:       assertFalse(node2.isNumber());
995:       assertFalse(node2.isFor());
996:       assertFalse(node2.isEmpty());
997:       assertFalse(node2.isLabel());
998:       assertFalse(node2.isGetterDef());
999:       assertFalse(node2.isOr());
1000:       assertFalse(node2.hasOneChild());
1001:       assertFalse(node2.isCase());
1002:       assertFalse(node2.isAssignAdd());
1003:       assertFalse(node2.isTry());
1004:       assertFalse(node2.isDo());
1005:       assertFalse(node2.isDefaultCase());
1006:       assertFalse(node2.isScript());
1007:       assertEquals((-1), node2.getCharno());
1008:       assertFalse(node2.isArrayLit());
1009:       assertFalse(node2.isStringKey());
1010:       assertFalse(node2.isSwitch());
1011:       assertFalse(node2.isLabelName());
1012:       assertFalse(node2.isBreak());
1013:       assertFalse(node2.isThis());
1014:       assertFalse(node2.isFalse());
1015:       assertFalse(node2.isComma());
1016:       assertFalse(node2.isHook());
1017:       assertFalse(node2.isThrow());
1018:       assertFalse(node2.isGetProp());
1019:       assertFalse(node2.isInc());
1020:       assertFalse(node2.isExprResult());
1021:       assertFalse(node2.isWith());
1022:       assertFalse(node2.isInstanceOf());
1023:       assertFalse(node2.isGetElem());
1024:       assertEquals((-1), node2.getSourcePosition());
1025:       assertFalse(node2.isDec());
1026:       assertFalse(node2.isIf());
1027:       assertFalse(node2.hasChildren());
1028:       assertFalse(node2.isNE());
1029:       assertFalse(node2.isAssign());
1030:       assertFalse(node2.isTypeOf());
1031:       assertFalse(node2.isIn());
1032:       assertFalse(node2.isReturn());
1033:       assertEquals(40, node2.getType());
1034:       assertFalse(node2.isContinue());
1035:       assertFalse(node2.isDebugger());
1036:       assertFalse(node2.isFunction());
1037:       assertFalse(node2.isNot());
1038:       assertFalse(node2.isObjectLit());
1039:       assertFalse(node2.isCast());
1040:       assertFalse(node2.isAnd());
1041:       assertFalse(node2.equals((Object)node0));
1042:       assertFalse(node2.equals((Object)node1));
1043:       assertEquals(8, Node.FLAG_NO_THROWS);
1044:       assertEquals(48, Node.DIRECTIVES);
1045:       assertEquals(50, Node.FREE_CALL);
1046:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1047:       assertEquals(4095, Node.COLUMN_MASK);
1048:       assertEquals(40, Node.ORIGINALNAME_PROP);
1049:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1050:       assertEquals(43, Node.IS_CONSTANT_NAME);
1051:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1052:       assertEquals(12, Node.COLUMN_BITS);
1053:       assertEquals(54, Node.SLASH_V);
1054:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1055:       assertEquals(32, Node.INCRDECR_PROP);
1056:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1057:       assertEquals(1, Node.DECR_FLAG);
1058:       assertEquals(56, Node.CHANGE_TIME);
1059:       assertEquals(47, Node.IS_DISPATCHER);
1060:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1061:       assertEquals(37, Node.OPT_ARG_NAME);
1062:       assertEquals(2, Node.POST_FLAG);
1063:       assertEquals(46, Node.IS_NAMESPACE);
1064:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1066:       assertEquals(36, Node.QUOTED_PROP);
1067:       assertEquals(57, Node.LAST_PROP);
1068:       assertEquals(30, Node.VAR_ARGS_NAME);
1069:       assertEquals(49, Node.DIRECT_EVAL);
1070:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1071:       assertEquals(57, Node.REFLECTED_OBJECT);
1072:       assertEquals(52, Node.LENGTH);
1073:       assertEquals(53, Node.INPUT_ID);
1074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1075:       assertEquals(55, Node.INFERRED_FUNCTION);
1076:       assertEquals(39, Node.EMPTY_BLOCK);
1077:       assertEquals(29, Node.JSDOC_INFO_PROP);
1078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1079:       assertNotSame(node2, node0);
1080:       
1081:       node1.removeProp(50);
1082:       assertFalse(node1.isInc());
1083:       assertFalse(node1.isSwitch());
1084:       assertEquals((-1), node1.getCharno());
1085:       assertFalse(node1.isThrow());
1086:       assertFalse(node1.isHook());
1087:       assertFalse(node1.isFalse());
1088:       assertEquals(132, node1.getType());
1089:       assertFalse(node1.isNE());
1090:       assertFalse(node1.isBreak());
1091:       assertFalse(node1.isDelProp());
1092:       assertFalse(node1.isIf());
1093:       assertFalse(node1.isEmpty());
1094:       assertFalse(node1.isIn());
1095:       assertFalse(node1.isRegExp());
1096:       assertFalse(node1.isTry());
1097:       assertFalse(node1.isDefaultCase());
1098:       assertFalse(node1.isCatch());
1099:       assertFalse(node1.isArrayLit());
1100:       assertFalse(node1.isWith());
1101:       assertEquals(0, node1.getChildCount());
1102:       assertFalse(node1.isInstanceOf());
1103:       assertFalse(node1.isThis());
1104:       assertFalse(node1.isParamList());
1105:       assertFalse(node1.isFor());
1106:       assertFalse(node1.isLabelName());
1107:       assertFalse(node1.isStringKey());
1108:       assertFalse(node1.isCase());
1109:       assertFalse(node1.hasOneChild());
1110:       assertFalse(node1.isGetterDef());
1111:       assertFalse(node1.isNumber());
1112:       assertFalse(node1.isBlock());
1113:       assertFalse(node1.isNew());
1114:       assertFalse(node1.isWhile());
1115:       assertFalse(node1.isDo());
1116:       assertFalse(node1.hasMoreThanOneChild());
1117:       assertFalse(node1.isCall());
1118:       assertFalse(node1.isVar());
1119:       assertFalse(node1.isContinue());
1120:       assertFalse(node1.isSetterDef());
1121:       assertFalse(node1.isNull());
1122:       assertFalse(node1.isLabel());
1123:       assertEquals((-1), node1.getLineno());
1124:       assertFalse(node1.isName());
1125:       assertFalse(node1.isAssignAdd());
1126:       assertFalse(node1.isAdd());
1127:       assertFalse(node1.isOr());
1128:       assertFalse(node1.isFunction());
1129:       assertFalse(node1.isTrue());
1130:       assertFalse(node1.isExprResult());
1131:       assertFalse(node1.isVoid());
1132:       assertFalse(node1.isDebugger());
1133:       assertTrue(node1.isScript());
1134:       assertFalse(node1.isAnd());
1135:       assertFalse(node1.isCast());
1136:       assertFalse(node1.isGetElem());
1137:       assertFalse(node1.isAssign());
1138:       assertFalse(node1.isTypeOf());
1139:       assertFalse(node1.isComma());
1140:       assertEquals((-1), node1.getSourcePosition());
1141:       assertFalse(node1.isDec());
1142:       assertFalse(node1.isGetProp());
1143:       assertFalse(node1.hasChildren());
1144:       assertFalse(node1.isReturn());
1145:       assertFalse(node1.isObjectLit());
1146:       assertFalse(node1.isString());
1147:       assertFalse(node1.isNot());
1148:       assertFalse(node1.equals((Object)node2));
1149:       assertFalse(node1.equals((Object)node0));
1150:       assertEquals(54, Node.SLASH_V);
1151:       assertEquals(52, Node.LENGTH);
1152:       assertEquals(57, Node.LAST_PROP);
1153:       assertEquals(49, Node.DIRECT_EVAL);
1154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1156:       assertEquals(46, Node.IS_NAMESPACE);
1157:       assertEquals(50, Node.FREE_CALL);
1158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1159:       assertEquals(57, Node.REFLECTED_OBJECT);
1160:       assertEquals(37, Node.OPT_ARG_NAME);
1161:       assertEquals(48, Node.DIRECTIVES);
1162:       assertEquals(56, Node.CHANGE_TIME);
1163:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1164:       assertEquals(32, Node.INCRDECR_PROP);
1165:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1166:       assertEquals(12, Node.COLUMN_BITS);
1167:       assertEquals(1, Node.DECR_FLAG);
1168:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1169:       assertEquals(4095, Node.COLUMN_MASK);
1170:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1173:       assertEquals(53, Node.INPUT_ID);
1174:       assertEquals(55, Node.INFERRED_FUNCTION);
1175:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1176:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1177:       assertEquals(36, Node.QUOTED_PROP);
1178:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1179:       assertEquals(8, Node.FLAG_NO_THROWS);
1180:       assertEquals(39, Node.EMPTY_BLOCK);
1181:       assertEquals(2, Node.POST_FLAG);
1182:       assertEquals(29, Node.JSDOC_INFO_PROP);
1183:       assertEquals(40, Node.ORIGINALNAME_PROP);
1184:       assertEquals(30, Node.VAR_ARGS_NAME);
1185:       assertEquals(47, Node.IS_DISPATCHER);
1186:       
1187:       Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
1188:       assertFalse(node2.isSetterDef());
1189:       assertFalse(node2.isParamList());
1190:       assertFalse(node2.isNull());
1191:       assertEquals(0, node2.getChildCount());
1192:       assertFalse(node2.isAdd());
1193:       assertFalse(node2.isVar());
1194:       assertFalse(node2.isNew());
1195:       assertTrue(node2.isString());
1196:       assertFalse(node2.isWhile());
1197:       assertFalse(node2.isTrue());
1198:       assertFalse(node2.isBlock());
1199:       assertFalse(node2.hasMoreThanOneChild());
1200:       assertFalse(node2.isRegExp());
1201:       assertFalse(node2.isCatch());
1202:       assertFalse(node2.isCall());
1203:       assertEquals((-1), node2.getLineno());
1204:       assertFalse(node2.isName());
1205:       assertFalse(node2.isDelProp());
1206:       assertFalse(node2.isVoid());
1207:       assertFalse(node2.isNumber());
1208:       assertFalse(node2.isFor());
1209:       assertFalse(node2.isEmpty());
1210:       assertFalse(node2.isLabel());
1211:       assertFalse(node2.isGetterDef());
1212:       assertFalse(node2.isOr());
1213:       assertFalse(node2.hasOneChild());
1214:       assertFalse(node2.isCase());
1215:       assertFalse(node2.isAssignAdd());
1216:       assertFalse(node2.isTry());
1217:       assertFalse(node2.isDo());
1218:       assertFalse(node2.isDefaultCase());
1219:       assertFalse(node2.isScript());
1220:       assertEquals((-1), node2.getCharno());
1221:       assertFalse(node2.isArrayLit());
1222:       assertFalse(node2.isStringKey());
1223:       assertFalse(node2.isSwitch());
1224:       assertFalse(node2.isLabelName());
1225:       assertFalse(node2.isBreak());
1226:       assertFalse(node2.isThis());
1227:       assertFalse(node2.isFalse());
1228:       assertFalse(node2.isComma());
1229:       assertFalse(node2.isHook());
1230:       assertFalse(node2.isThrow());
1231:       assertFalse(node2.isGetProp());
1232:       assertFalse(node2.isInc());
1233:       assertFalse(node2.isExprResult());
1234:       assertFalse(node2.isWith());
1235:       assertFalse(node2.isInstanceOf());
1236:       assertFalse(node2.isGetElem());
1237:       assertEquals((-1), node2.getSourcePosition());
1238:       assertFalse(node2.isDec());
1239:       assertFalse(node2.isIf());
1240:       assertFalse(node2.hasChildren());
1241:       assertFalse(node2.isNE());
1242:       assertFalse(node2.isAssign());
1243:       assertFalse(node2.isTypeOf());
1244:       assertFalse(node2.isIn());
1245:       assertFalse(node2.isReturn());
1246:       assertEquals(40, node2.getType());
1247:       assertFalse(node2.isContinue());
1248:       assertFalse(node2.isDebugger());
1249:       assertFalse(node2.isFunction());
1250:       assertFalse(node2.isNot());
1251:       assertFalse(node2.isObjectLit());
1252:       assertFalse(node2.isCast());
1253:       assertFalse(node2.isAnd());
1254:       assertFalse(node2.equals((Object)node0));
1255:       assertFalse(node2.equals((Object)node1));
1256:       assertEquals(8, Node.FLAG_NO_THROWS);
1257:       assertEquals(48, Node.DIRECTIVES);
1258:       assertEquals(50, Node.FREE_CALL);
1259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1260:       assertEquals(4095, Node.COLUMN_MASK);
1261:       assertEquals(40, Node.ORIGINALNAME_PROP);
1262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1263:       assertEquals(43, Node.IS_CONSTANT_NAME);
1264:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1265:       assertEquals(12, Node.COLUMN_BITS);
1266:       assertEquals(54, Node.SLASH_V);
1267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1268:       assertEquals(32, Node.INCRDECR_PROP);
1269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1270:       assertEquals(1, Node.DECR_FLAG);
1271:       assertEquals(56, Node.CHANGE_TIME);
1272:       assertEquals(47, Node.IS_DISPATCHER);
1273:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1274:       assertEquals(37, Node.OPT_ARG_NAME);
1275:       assertEquals(2, Node.POST_FLAG);
1276:       assertEquals(46, Node.IS_NAMESPACE);
1277:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1279:       assertEquals(36, Node.QUOTED_PROP);
1280:       assertEquals(57, Node.LAST_PROP);
1281:       assertEquals(30, Node.VAR_ARGS_NAME);
1282:       assertEquals(49, Node.DIRECT_EVAL);
1283:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1284:       assertEquals(57, Node.REFLECTED_OBJECT);
1285:       assertEquals(52, Node.LENGTH);
1286:       assertEquals(53, Node.INPUT_ID);
1287:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1288:       assertEquals(55, Node.INFERRED_FUNCTION);
1289:       assertEquals(39, Node.EMPTY_BLOCK);
1290:       assertEquals(29, Node.JSDOC_INFO_PROP);
1291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1292:       assertNotNull(node_NodeMismatch0);
1293:       
1294:       boolean boolean3 = node0.isArrayLit();
1295:       assertFalse(boolean3);
1296:       assertFalse(node0.isCase());
1297:       assertFalse(node0.isThrow());
1298:       assertFalse(node0.isDelProp());
1299:       assertFalse(node0.isVoid());
1300:       assertFalse(node0.isIf());
1301:       assertFalse(node0.isNE());
1302:       assertFalse(node0.isTrue());
1303:       assertFalse(node0.isInc());
1304:       assertFalse(node0.isEmpty());
1305:       assertFalse(node0.isIn());
1306:       assertFalse(node0.isInstanceOf());
1307:       assertFalse(node0.isCatch());
1308:       assertEquals(0, node0.getChildCount());
1309:       assertFalse(node0.isParamList());
1310:       assertFalse(node0.isDefaultCase());
1311:       assertFalse(node0.isRegExp());
1312:       assertFalse(node0.isThis());
1313:       assertFalse(node0.isWith());
1314:       assertFalse(node0.isArrayLit());
1315:       assertFalse(node0.hasOneChild());
1316:       assertEquals(125, node0.getType());
1317:       assertFalse(node0.isHook());
1318:       assertFalse(node0.isTry());
1319:       assertFalse(node0.isFor());
1320:       assertFalse(node0.isLabelName());
1321:       assertFalse(node0.isStringKey());
1322:       assertFalse(node0.isSwitch());
1323:       assertFalse(node0.isScript());
1324:       assertEquals((-1), node0.getCharno());
1325:       assertFalse(node0.isGetterDef());
1326:       assertFalse(node0.isNumber());
1327:       assertFalse(node0.isReturn());
1328:       assertEquals((-1), node0.getLineno());
1329:       assertFalse(node0.isDo());
1330:       assertFalse(node0.isWhile());
1331:       assertFalse(node0.isAssignAdd());
1332:       assertFalse(node0.isTypeOf());
1333:       assertFalse(node0.isDec());
1334:       assertFalse(node0.hasChildren());
1335:       assertFalse(node0.isLabel());
1336:       assertFalse(node0.isAssign());
1337:       assertFalse(node0.isContinue());
1338:       assertFalse(node0.hasMoreThanOneChild());
1339:       assertFalse(node0.isVar());
1340:       assertFalse(node0.isCall());
1341:       assertFalse(node0.isGetElem());
1342:       assertFalse(node0.isNew());
1343:       assertFalse(node0.isName());
1344:       assertFalse(node0.isNull());
1345:       assertFalse(node0.isSetterDef());
1346:       assertFalse(node0.isAdd());
1347:       assertFalse(node0.isOr());
1348:       assertFalse(node0.isAnd());
1349:       assertFalse(node0.isComma());
1350:       assertFalse(node0.isExprResult());
1351:       assertFalse(node0.isBreak());
1352:       assertFalse(node0.isFunction());
1353:       assertTrue(node0.isBlock());
1354:       assertFalse(node0.isFalse());
1355:       assertFalse(node0.isCast());
1356:       assertEquals((-1), node0.getSourcePosition());
1357:       assertFalse(node0.isDebugger());
1358:       assertFalse(node0.isGetProp());
1359:       assertFalse(node0.isNot());
1360:       assertFalse(node0.isString());
1361:       assertFalse(node0.isObjectLit());
1362:       assertFalse(node0.equals((Object)node2));
1363:       assertFalse(node0.equals((Object)node1));
1364:       assertTrue(boolean3 == boolean1);
1365:       assertTrue(boolean3 == boolean2);
1366:       assertTrue(boolean3 == boolean0);
1367:       assertEquals(12, Node.COLUMN_BITS);
1368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1369:       assertEquals(32, Node.INCRDECR_PROP);
1370:       assertEquals(49, Node.DIRECT_EVAL);
1371:       assertEquals(1, Node.DECR_FLAG);
1372:       assertEquals(37, Node.OPT_ARG_NAME);
1373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1374:       assertEquals(56, Node.CHANGE_TIME);
1375:       assertEquals(46, Node.IS_NAMESPACE);
1376:       assertEquals(54, Node.SLASH_V);
1377:       assertEquals(57, Node.REFLECTED_OBJECT);
1378:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1379:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1380:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1381:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1382:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1383:       assertEquals(4095, Node.COLUMN_MASK);
1384:       assertEquals(55, Node.INFERRED_FUNCTION);
1385:       assertEquals(48, Node.DIRECTIVES);
1386:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1387:       assertEquals(39, Node.EMPTY_BLOCK);
1388:       assertEquals(36, Node.QUOTED_PROP);
1389:       assertEquals(43, Node.IS_CONSTANT_NAME);
1390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1391:       assertEquals(8, Node.FLAG_NO_THROWS);
1392:       assertEquals(50, Node.FREE_CALL);
1393:       assertEquals(52, Node.LENGTH);
1394:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1395:       assertEquals(29, Node.JSDOC_INFO_PROP);
1396:       assertEquals(53, Node.INPUT_ID);
1397:       assertEquals(40, Node.ORIGINALNAME_PROP);
1398:       assertEquals(2, Node.POST_FLAG);
1399:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1400:       assertEquals(57, Node.LAST_PROP);
1401:       assertEquals(30, Node.VAR_ARGS_NAME);
1402:       assertEquals(47, Node.IS_DISPATCHER);
1403:       assertNotSame(node0, node2);
1404:       
1405:       boolean boolean4 = node1.isScript();
1406:       assertTrue(boolean4);
1407:       assertFalse(node1.isInc());
1408:       assertFalse(node1.isSwitch());
1409:       assertEquals((-1), node1.getCharno());
1410:       assertFalse(node1.isThrow());
1411:       assertFalse(node1.isHook());
1412:       assertFalse(node1.isFalse());
1413:       assertEquals(132, node1.getType());
1414:       assertFalse(node1.isNE());
1415:       assertFalse(node1.isBreak());
1416:       assertFalse(node1.isDelProp());
1417:       assertFalse(node1.isIf());
1418:       assertFalse(node1.isEmpty());
1419:       assertFalse(node1.isIn());
1420:       assertFalse(node1.isRegExp());
1421:       assertFalse(node1.isTry());
1422:       assertFalse(node1.isDefaultCase());
1423:       assertFalse(node1.isCatch());
1424:       assertFalse(node1.isArrayLit());
1425:       assertFalse(node1.isWith());
1426:       assertEquals(0, node1.getChildCount());
1427:       assertFalse(node1.isInstanceOf());
1428:       assertFalse(node1.isThis());
1429:       assertFalse(node1.isParamList());
1430:       assertFalse(node1.isFor());
1431:       assertFalse(node1.isLabelName());
1432:       assertFalse(node1.isStringKey());
1433:       assertFalse(node1.isCase());
1434:       assertFalse(node1.hasOneChild());
1435:       assertFalse(node1.isGetterDef());
1436:       assertFalse(node1.isNumber());
1437:       assertFalse(node1.isBlock());
1438:       assertFalse(node1.isNew());
1439:       assertFalse(node1.isWhile());
1440:       assertFalse(node1.isDo());
1441:       assertFalse(node1.hasMoreThanOneChild());
1442:       assertFalse(node1.isCall());
1443:       assertFalse(node1.isVar());
1444:       assertFalse(node1.isContinue());
1445:       assertFalse(node1.isSetterDef());
1446:       assertFalse(node1.isNull());
1447:       assertFalse(node1.isLabel());
1448:       assertEquals((-1), node1.getLineno());
1449:       assertFalse(node1.isName());
1450:       assertFalse(node1.isAssignAdd());
1451:       assertFalse(node1.isAdd());
1452:       assertFalse(node1.isOr());
1453:       assertFalse(node1.isFunction());
1454:       assertFalse(node1.isTrue());
1455:       assertFalse(node1.isExprResult());
1456:       assertFalse(node1.isVoid());
1457:       assertFalse(node1.isDebugger());
1458:       assertTrue(node1.isScript());
1459:       assertFalse(node1.isAnd());
1460:       assertFalse(node1.isCast());
1461:       assertFalse(node1.isGetElem());
1462:       assertFalse(node1.isAssign());
1463:       assertFalse(node1.isTypeOf());
1464:       assertFalse(node1.isComma());
1465:       assertEquals((-1), node1.getSourcePosition());
1466:       assertFalse(node1.isDec());
1467:       assertFalse(node1.isGetProp());
1468:       assertFalse(node1.hasChildren());
1469:       assertFalse(node1.isReturn());
1470:       assertFalse(node1.isObjectLit());
1471:       assertFalse(node1.isString());
1472:       assertFalse(node1.isNot());
1473:       assertFalse(node1.equals((Object)node2));
1474:       assertFalse(node1.equals((Object)node0));
1475:       assertFalse(boolean4 == boolean0);
1476:       assertFalse(boolean4 == boolean2);
1477:       assertFalse(boolean4 == boolean3);
1478:       assertFalse(boolean4 == boolean1);
1479:       assertEquals(54, Node.SLASH_V);
1480:       assertEquals(52, Node.LENGTH);
1481:       assertEquals(57, Node.LAST_PROP);
1482:       assertEquals(49, Node.DIRECT_EVAL);
1483:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1484:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1485:       assertEquals(46, Node.IS_NAMESPACE);
1486:       assertEquals(50, Node.FREE_CALL);
1487:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1488:       assertEquals(57, Node.REFLECTED_OBJECT);
1489:       assertEquals(37, Node.OPT_ARG_NAME);
1490:       assertEquals(48, Node.DIRECTIVES);
1491:       assertEquals(56, Node.CHANGE_TIME);
1492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1493:       assertEquals(32, Node.INCRDECR_PROP);
1494:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1495:       assertEquals(12, Node.COLUMN_BITS);
1496:       assertEquals(1, Node.DECR_FLAG);
1497:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1498:       assertEquals(4095, Node.COLUMN_MASK);
1499:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1500:       assertEquals(43, Node.IS_CONSTANT_NAME);
1501:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1502:       assertEquals(53, Node.INPUT_ID);
1503:       assertEquals(55, Node.INFERRED_FUNCTION);
1504:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1505:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1506:       assertEquals(36, Node.QUOTED_PROP);
1507:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1508:       assertEquals(8, Node.FLAG_NO_THROWS);
1509:       assertEquals(39, Node.EMPTY_BLOCK);
1510:       assertEquals(2, Node.POST_FLAG);
1511:       assertEquals(29, Node.JSDOC_INFO_PROP);
1512:       assertEquals(40, Node.ORIGINALNAME_PROP);
1513:       assertEquals(30, Node.VAR_ARGS_NAME);
1514:       assertEquals(47, Node.IS_DISPATCHER);
1515:   }
1516: }
RegularFileObject[/tmp/EvoSuite_435_1628161397677/com/google/javascript/rhino/Node_435_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:17 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_435_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_435_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_435_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:03:17.933 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("(3h*Sv :OIK");
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node0);

String string0 = node0.toStringTree();
assertEquals("STRING (3h*Sv :OIK\n", string0);
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(string0);

boolean boolean0 = node0.isIn();
assertFalse(boolean0);
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

node0.setType(125);
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals(125, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFunction());
assertTrue(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean1 = node0.isOnlyModifiesThisCall();
assertFalse(boolean1);
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals(125, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFunction());
assertTrue(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertTrue(boolean1 == boolean0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean2 = node0.isRegExp();
assertFalse(boolean2);
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals(125, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFunction());
assertTrue(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Node node1 = new Node(132);
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertEquals(132, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertTrue(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.equals((Object)node0));
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node1);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertEquals(132, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertTrue(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(iterable0.contains(node1));
assertFalse(node1.equals((Object)node0));
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(iterable0);

Node node2 = Node.newString("xv_f(e?g\"~FN*./;A.`!", 57, (-396));
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertTrue(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTry());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isIf());
assertFalse(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals(40, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node2, node0);
assertNotNull(node2);

node2.putIntProp(55, (-180));
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertTrue(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTry());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isIf());
assertFalse(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals(40, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node2, node0);

node1.removeProp(50);
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertEquals(132, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertTrue(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertTrue(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTry());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isIf());
assertFalse(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals(40, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node_NodeMismatch0);

boolean boolean3 = node0.isArrayLit();
assertFalse(boolean3);
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals(125, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFunction());
assertTrue(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotSame(node0, node2);

boolean boolean4 = node1.isScript();
assertTrue(boolean4);
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertEquals(132, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertTrue(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4 == boolean0);
assertFalse(boolean4 == boolean2);
assertFalse(boolean4 == boolean3);
assertFalse(boolean4 == boolean1);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);


[MASTER] 11:03:18.432 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_438_1628161398402/com/google/javascript/rhino/Node_438_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_438_1628161398402/com/google/javascript/rhino/Node_438_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:18.432 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:18.432 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:18.432 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 297
[MASTER] 11:03:18.433 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_438_1628161398402/com/google/javascript/rhino/Node_438_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:18 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_438_tmp__ESTest extends Node_438_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(71, 71, 71);
22:       assertFalse(node0.isCall());
23:       assertFalse(node0.isStringKey());
24:       assertFalse(node0.isVar());
25:       assertFalse(node0.isName());
26:       assertFalse(node0.isBlock());
27:       assertFalse(node0.isNull());
28:       assertFalse(node0.isParamList());
29:       assertFalse(node0.isContinue());
30:       assertFalse(node0.isOr());
31:       assertEquals(0, node0.getChildCount());
32:       assertFalse(node0.isLabel());
33:       assertFalse(node0.isAssignAdd());
34:       assertFalse(node0.isDefaultCase());
35:       assertFalse(node0.isDo());
36:       assertFalse(node0.isAdd());
37:       assertFalse(node0.isNew());
38:       assertFalse(node0.isSetterDef());
39:       assertFalse(node0.isGetterDef());
40:       assertFalse(node0.isFor());
41:       assertFalse(node0.isNE());
42:       assertFalse(node0.isRegExp());
43:       assertFalse(node0.isIf());
44:       assertFalse(node0.isLabelName());
45:       assertFalse(node0.isArrayLit());
46:       assertFalse(node0.isCatch());
47:       assertFalse(node0.isWith());
48:       assertFalse(node0.hasMoreThanOneChild());
49:       assertEquals(290887, node0.getSourcePosition());
50:       assertFalse(node0.isThis());
51:       assertFalse(node0.isNumber());
52:       assertFalse(node0.isTry());
53:       assertFalse(node0.isCase());
54:       assertFalse(node0.hasOneChild());
55:       assertFalse(node0.isScript());
56:       assertFalse(node0.isThrow());
57:       assertFalse(node0.isFalse());
58:       assertFalse(node0.isHook());
59:       assertFalse(node0.isComma());
60:       assertFalse(node0.isSwitch());
61:       assertFalse(node0.isInstanceOf());
62:       assertFalse(node0.isBreak());
63:       assertFalse(node0.isIn());
64:       assertEquals(71, node0.getType());
65:       assertFalse(node0.isInc());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isCast());
68:       assertEquals(71, node0.getLineno());
69:       assertFalse(node0.isAssign());
70:       assertFalse(node0.isDec());
71:       assertFalse(node0.hasChildren());
72:       assertFalse(node0.isFunction());
73:       assertFalse(node0.isTrue());
74:       assertFalse(node0.isExprResult());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isTypeOf());
77:       assertFalse(node0.isDelProp());
78:       assertFalse(node0.isGetElem());
79:       assertEquals(71, node0.getCharno());
80:       assertFalse(node0.isAnd());
81:       assertFalse(node0.isObjectLit());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isReturn());
84:       assertFalse(node0.isNot());
85:       assertFalse(node0.isDebugger());
86:       assertFalse(node0.isString());
87:       assertFalse(node0.isGetProp());
88:       assertEquals(40, Node.ORIGINALNAME_PROP);
89:       assertEquals(57, Node.REFLECTED_OBJECT);
90:       assertEquals(54, Node.SLASH_V);
91:       assertEquals(15, Node.NO_SIDE_EFFECTS);
92:       assertEquals(39, Node.EMPTY_BLOCK);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(52, Node.LENGTH);
96:       assertEquals(8, Node.FLAG_NO_THROWS);
97:       assertEquals(1, Node.DECR_FLAG);
98:       assertEquals(12, Node.COLUMN_BITS);
99:       assertEquals(32, Node.INCRDECR_PROP);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(48, Node.DIRECTIVES);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
106:       assertEquals(4095, Node.COLUMN_MASK);
107:       assertEquals(29, Node.JSDOC_INFO_PROP);
108:       assertEquals(56, Node.CHANGE_TIME);
109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
110:       assertEquals(36, Node.QUOTED_PROP);
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(55, Node.INFERRED_FUNCTION);
116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
117:       assertEquals(46, Node.IS_NAMESPACE);
118:       assertEquals(43, Node.IS_CONSTANT_NAME);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(2, Node.POST_FLAG);
121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertEquals(30, Node.VAR_ARGS_NAME);
124:       assertNotNull(node0);
125:       
126:       node0.setStaticSourceFile((StaticSourceFile) null);
127:       assertFalse(node0.isCall());
128:       assertFalse(node0.isStringKey());
129:       assertFalse(node0.isVar());
130:       assertFalse(node0.isName());
131:       assertFalse(node0.isBlock());
132:       assertFalse(node0.isNull());
133:       assertFalse(node0.isParamList());
134:       assertFalse(node0.isContinue());
135:       assertFalse(node0.isOr());
136:       assertEquals(0, node0.getChildCount());
137:       assertFalse(node0.isLabel());
138:       assertFalse(node0.isAssignAdd());
139:       assertFalse(node0.isDefaultCase());
140:       assertFalse(node0.isDo());
141:       assertFalse(node0.isAdd());
142:       assertFalse(node0.isNew());
143:       assertFalse(node0.isSetterDef());
144:       assertFalse(node0.isGetterDef());
145:       assertFalse(node0.isFor());
146:       assertFalse(node0.isNE());
147:       assertFalse(node0.isRegExp());
148:       assertFalse(node0.isIf());
149:       assertFalse(node0.isLabelName());
150:       assertFalse(node0.isArrayLit());
151:       assertFalse(node0.isCatch());
152:       assertFalse(node0.isWith());
153:       assertFalse(node0.hasMoreThanOneChild());
154:       assertEquals(290887, node0.getSourcePosition());
155:       assertFalse(node0.isThis());
156:       assertFalse(node0.isNumber());
157:       assertFalse(node0.isTry());
158:       assertFalse(node0.isCase());
159:       assertFalse(node0.hasOneChild());
160:       assertFalse(node0.isScript());
161:       assertFalse(node0.isThrow());
162:       assertFalse(node0.isFalse());
163:       assertFalse(node0.isHook());
164:       assertFalse(node0.isComma());
165:       assertFalse(node0.isSwitch());
166:       assertFalse(node0.isInstanceOf());
167:       assertFalse(node0.isBreak());
168:       assertFalse(node0.isIn());
169:       assertEquals(71, node0.getType());
170:       assertFalse(node0.isInc());
171:       assertFalse(node0.isEmpty());
172:       assertFalse(node0.isCast());
173:       assertEquals(71, node0.getLineno());
174:       assertFalse(node0.isAssign());
175:       assertFalse(node0.isDec());
176:       assertFalse(node0.hasChildren());
177:       assertFalse(node0.isFunction());
178:       assertFalse(node0.isTrue());
179:       assertFalse(node0.isExprResult());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isTypeOf());
182:       assertFalse(node0.isDelProp());
183:       assertFalse(node0.isGetElem());
184:       assertEquals(71, node0.getCharno());
185:       assertFalse(node0.isAnd());
186:       assertFalse(node0.isObjectLit());
187:       assertFalse(node0.isWhile());
188:       assertFalse(node0.isReturn());
189:       assertFalse(node0.isNot());
190:       assertFalse(node0.isDebugger());
191:       assertFalse(node0.isString());
192:       assertFalse(node0.isGetProp());
193:       assertEquals(40, Node.ORIGINALNAME_PROP);
194:       assertEquals(57, Node.REFLECTED_OBJECT);
195:       assertEquals(54, Node.SLASH_V);
196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
197:       assertEquals(39, Node.EMPTY_BLOCK);
198:       assertEquals(50, Node.FREE_CALL);
199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
200:       assertEquals(52, Node.LENGTH);
201:       assertEquals(8, Node.FLAG_NO_THROWS);
202:       assertEquals(1, Node.DECR_FLAG);
203:       assertEquals(12, Node.COLUMN_BITS);
204:       assertEquals(32, Node.INCRDECR_PROP);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(37, Node.OPT_ARG_NAME);
207:       assertEquals(48, Node.DIRECTIVES);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
211:       assertEquals(4095, Node.COLUMN_MASK);
212:       assertEquals(29, Node.JSDOC_INFO_PROP);
213:       assertEquals(56, Node.CHANGE_TIME);
214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
215:       assertEquals(36, Node.QUOTED_PROP);
216:       assertEquals(53, Node.INPUT_ID);
217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(55, Node.INFERRED_FUNCTION);
221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
222:       assertEquals(46, Node.IS_NAMESPACE);
223:       assertEquals(43, Node.IS_CONSTANT_NAME);
224:       assertEquals(57, Node.LAST_PROP);
225:       assertEquals(2, Node.POST_FLAG);
226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
227:       assertEquals(47, Node.IS_DISPATCHER);
228:       assertEquals(30, Node.VAR_ARGS_NAME);
229:       
230:       Iterable<Node> iterable0 = node0.children();
231:       assertFalse(node0.isCall());
232:       assertFalse(node0.isStringKey());
233:       assertFalse(node0.isVar());
234:       assertFalse(node0.isName());
235:       assertFalse(node0.isBlock());
236:       assertFalse(node0.isNull());
237:       assertFalse(node0.isParamList());
238:       assertFalse(node0.isContinue());
239:       assertFalse(node0.isOr());
240:       assertEquals(0, node0.getChildCount());
241:       assertFalse(node0.isLabel());
242:       assertFalse(node0.isAssignAdd());
243:       assertFalse(node0.isDefaultCase());
244:       assertFalse(node0.isDo());
245:       assertFalse(node0.isAdd());
246:       assertFalse(node0.isNew());
247:       assertFalse(node0.isSetterDef());
248:       assertFalse(node0.isGetterDef());
249:       assertFalse(node0.isFor());
250:       assertFalse(node0.isNE());
251:       assertFalse(node0.isRegExp());
252:       assertFalse(node0.isIf());
253:       assertFalse(node0.isLabelName());
254:       assertFalse(node0.isArrayLit());
255:       assertFalse(node0.isCatch());
256:       assertFalse(node0.isWith());
257:       assertFalse(node0.hasMoreThanOneChild());
258:       assertEquals(290887, node0.getSourcePosition());
259:       assertFalse(node0.isThis());
260:       assertFalse(node0.isNumber());
261:       assertFalse(node0.isTry());
262:       assertFalse(node0.isCase());
263:       assertFalse(node0.hasOneChild());
264:       assertFalse(node0.isScript());
265:       assertFalse(node0.isThrow());
266:       assertFalse(node0.isFalse());
267:       assertFalse(node0.isHook());
268:       assertFalse(node0.isComma());
269:       assertFalse(node0.isSwitch());
270:       assertFalse(node0.isInstanceOf());
271:       assertFalse(node0.isBreak());
272:       assertFalse(node0.isIn());
273:       assertEquals(71, node0.getType());
274:       assertFalse(node0.isInc());
275:       assertFalse(node0.isEmpty());
276:       assertFalse(node0.isCast());
277:       assertEquals(71, node0.getLineno());
278:       assertFalse(node0.isAssign());
279:       assertFalse(node0.isDec());
280:       assertFalse(node0.hasChildren());
281:       assertFalse(node0.isFunction());
282:       assertFalse(node0.isTrue());
283:       assertFalse(node0.isExprResult());
284:       assertFalse(node0.isVoid());
285:       assertFalse(node0.isTypeOf());
286:       assertFalse(node0.isDelProp());
287:       assertFalse(node0.isGetElem());
288:       assertEquals(71, node0.getCharno());
289:       assertFalse(node0.isAnd());
290:       assertFalse(node0.isObjectLit());
291:       assertFalse(node0.isWhile());
292:       assertFalse(node0.isReturn());
293:       assertFalse(node0.isNot());
294:       assertFalse(node0.isDebugger());
295:       assertFalse(node0.isString());
296:       assertFalse(node0.isGetProp());
297:       assertFalse(iterable0.contains(node0));
298:       assertEquals(40, Node.ORIGINALNAME_PROP);
299:       assertEquals(57, Node.REFLECTED_OBJECT);
300:       assertEquals(54, Node.SLASH_V);
301:       assertEquals(15, Node.NO_SIDE_EFFECTS);
302:       assertEquals(39, Node.EMPTY_BLOCK);
303:       assertEquals(50, Node.FREE_CALL);
304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
305:       assertEquals(52, Node.LENGTH);
306:       assertEquals(8, Node.FLAG_NO_THROWS);
307:       assertEquals(1, Node.DECR_FLAG);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(32, Node.INCRDECR_PROP);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(37, Node.OPT_ARG_NAME);
312:       assertEquals(48, Node.DIRECTIVES);
313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
314:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
315:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
316:       assertEquals(4095, Node.COLUMN_MASK);
317:       assertEquals(29, Node.JSDOC_INFO_PROP);
318:       assertEquals(56, Node.CHANGE_TIME);
319:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
320:       assertEquals(36, Node.QUOTED_PROP);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
323:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(46, Node.IS_NAMESPACE);
328:       assertEquals(43, Node.IS_CONSTANT_NAME);
329:       assertEquals(57, Node.LAST_PROP);
330:       assertEquals(2, Node.POST_FLAG);
331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
332:       assertEquals(47, Node.IS_DISPATCHER);
333:       assertEquals(30, Node.VAR_ARGS_NAME);
334:       assertNotNull(iterable0);
335:       
336:       boolean boolean0 = node0.isCast();
337:       assertFalse(boolean0);
338:       assertFalse(node0.isCall());
339:       assertFalse(node0.isStringKey());
340:       assertFalse(node0.isVar());
341:       assertFalse(node0.isName());
342:       assertFalse(node0.isBlock());
343:       assertFalse(node0.isNull());
344:       assertFalse(node0.isParamList());
345:       assertFalse(node0.isContinue());
346:       assertFalse(node0.isOr());
347:       assertEquals(0, node0.getChildCount());
348:       assertFalse(node0.isLabel());
349:       assertFalse(node0.isAssignAdd());
350:       assertFalse(node0.isDefaultCase());
351:       assertFalse(node0.isDo());
352:       assertFalse(node0.isAdd());
353:       assertFalse(node0.isNew());
354:       assertFalse(node0.isSetterDef());
355:       assertFalse(node0.isGetterDef());
356:       assertFalse(node0.isFor());
357:       assertFalse(node0.isNE());
358:       assertFalse(node0.isRegExp());
359:       assertFalse(node0.isIf());
360:       assertFalse(node0.isLabelName());
361:       assertFalse(node0.isArrayLit());
362:       assertFalse(node0.isCatch());
363:       assertFalse(node0.isWith());
364:       assertFalse(node0.hasMoreThanOneChild());
365:       assertEquals(290887, node0.getSourcePosition());
366:       assertFalse(node0.isThis());
367:       assertFalse(node0.isNumber());
368:       assertFalse(node0.isTry());
369:       assertFalse(node0.isCase());
370:       assertFalse(node0.hasOneChild());
371:       assertFalse(node0.isScript());
372:       assertFalse(node0.isThrow());
373:       assertFalse(node0.isFalse());
374:       assertFalse(node0.isHook());
375:       assertFalse(node0.isComma());
376:       assertFalse(node0.isSwitch());
377:       assertFalse(node0.isInstanceOf());
378:       assertFalse(node0.isBreak());
379:       assertFalse(node0.isIn());
380:       assertEquals(71, node0.getType());
381:       assertFalse(node0.isInc());
382:       assertFalse(node0.isEmpty());
383:       assertFalse(node0.isCast());
384:       assertEquals(71, node0.getLineno());
385:       assertFalse(node0.isAssign());
386:       assertFalse(node0.isDec());
387:       assertFalse(node0.hasChildren());
388:       assertFalse(node0.isFunction());
389:       assertFalse(node0.isTrue());
390:       assertFalse(node0.isExprResult());
391:       assertFalse(node0.isVoid());
392:       assertFalse(node0.isTypeOf());
393:       assertFalse(node0.isDelProp());
394:       assertFalse(node0.isGetElem());
395:       assertEquals(71, node0.getCharno());
396:       assertFalse(node0.isAnd());
397:       assertFalse(node0.isObjectLit());
398:       assertFalse(node0.isWhile());
399:       assertFalse(node0.isReturn());
400:       assertFalse(node0.isNot());
401:       assertFalse(node0.isDebugger());
402:       assertFalse(node0.isString());
403:       assertFalse(node0.isGetProp());
404:       assertEquals(40, Node.ORIGINALNAME_PROP);
405:       assertEquals(57, Node.REFLECTED_OBJECT);
406:       assertEquals(54, Node.SLASH_V);
407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
408:       assertEquals(39, Node.EMPTY_BLOCK);
409:       assertEquals(50, Node.FREE_CALL);
410:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
411:       assertEquals(52, Node.LENGTH);
412:       assertEquals(8, Node.FLAG_NO_THROWS);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(12, Node.COLUMN_BITS);
415:       assertEquals(32, Node.INCRDECR_PROP);
416:       assertEquals(49, Node.DIRECT_EVAL);
417:       assertEquals(37, Node.OPT_ARG_NAME);
418:       assertEquals(48, Node.DIRECTIVES);
419:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
420:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
422:       assertEquals(4095, Node.COLUMN_MASK);
423:       assertEquals(29, Node.JSDOC_INFO_PROP);
424:       assertEquals(56, Node.CHANGE_TIME);
425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
426:       assertEquals(36, Node.QUOTED_PROP);
427:       assertEquals(53, Node.INPUT_ID);
428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
429:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
433:       assertEquals(46, Node.IS_NAMESPACE);
434:       assertEquals(43, Node.IS_CONSTANT_NAME);
435:       assertEquals(57, Node.LAST_PROP);
436:       assertEquals(2, Node.POST_FLAG);
437:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
438:       assertEquals(47, Node.IS_DISPATCHER);
439:       assertEquals(30, Node.VAR_ARGS_NAME);
440:   }
441: }
RegularFileObject[/tmp/EvoSuite_438_1628161398402/com/google/javascript/rhino/Node_438_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:18 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_438_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_438_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_438_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.JSDocInfo",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.Platform",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.NamespaceType",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
368:     );
369:   }
370: }

[MASTER] 11:03:18.439 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(71, 71, 71);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(290887, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertEquals(71, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isCast());
assertEquals(71, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals(71, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);

node0.setStaticSourceFile((StaticSourceFile) null);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(290887, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertEquals(71, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isCast());
assertEquals(71, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals(71, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(290887, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertEquals(71, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isCast());
assertEquals(71, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals(71, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(iterable0.contains(node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(iterable0);

boolean boolean0 = node0.isCast();
assertFalse(boolean0);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(290887, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertEquals(71, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isCast());
assertEquals(71, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals(71, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/26
* Done!

* Computation finished
