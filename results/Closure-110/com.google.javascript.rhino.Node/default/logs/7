* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 3668
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3859334452
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:53:40.913 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:54:05.307 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 774 generations, 296155 statements, best individual has fitness: 2647.0
* Minimizing test suite
[MASTER] 10:05:09.610 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 811
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 637
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 530
* Number of covered goals: 482
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2345
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 595
* Generated 1226 tests with total length 11240
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:06:33.580 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8197166666666666% of time used, but only 51/1226 tests minimized), falling back to using all assertions
[MASTER] 10:06:44.396 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 10:06:59.219 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 14 seconds more than allowed.
[MASTER] 10:07:13.804 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_216_1628158033727/com/google/javascript/rhino/Node_216_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_216_1628158033727/com/google/javascript/rhino/Node_216_tmp__ESTest_scaffolding.java]]
[MASTER] 10:07:13.804 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:07:13.804 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:07:13.808 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 549
[MASTER] 10:07:13.810 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_216_1628158033727/com/google/javascript/rhino/Node_216_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:07:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_216_tmp__ESTest extends Node_216_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(147, 147, 147);
21:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
22:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
23:       assertEquals(39, Node.EMPTY_BLOCK);
24:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
25:       assertEquals(50, Node.FREE_CALL);
26:       assertEquals(8, Node.FLAG_NO_THROWS);
27:       assertEquals(55, Node.INFERRED_FUNCTION);
28:       assertEquals(15, Node.NO_SIDE_EFFECTS);
29:       assertEquals(36, Node.QUOTED_PROP);
30:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
31:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
32:       assertEquals(52, Node.LENGTH);
33:       assertEquals(4095, Node.COLUMN_MASK);
34:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
35:       assertEquals(57, Node.REFLECTED_OBJECT);
36:       assertEquals(48, Node.DIRECTIVES);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(37, Node.OPT_ARG_NAME);
39:       assertEquals(49, Node.DIRECT_EVAL);
40:       assertEquals(47, Node.IS_DISPATCHER);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
43:       assertEquals(29, Node.JSDOC_INFO_PROP);
44:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
45:       assertEquals(2, Node.POST_FLAG);
46:       assertEquals(12, Node.COLUMN_BITS);
47:       assertEquals(53, Node.INPUT_ID);
48:       assertEquals(1, Node.DECR_FLAG);
49:       assertEquals(32, Node.INCRDECR_PROP);
50:       assertEquals(57, Node.LAST_PROP);
51:       assertEquals(43, Node.IS_CONSTANT_NAME);
52:       assertEquals(30, Node.VAR_ARGS_NAME);
53:       assertEquals(46, Node.IS_NAMESPACE);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(40, Node.ORIGINALNAME_PROP);
56:       assertEquals(54, Node.SLASH_V);
57:       assertNotNull(node0);
58:       assertEquals(147, node0.getLineno());
59:       assertFalse(node0.hasOneChild());
60:       assertFalse(node0.isScript());
61:       assertFalse(node0.isCast());
62:       assertFalse(node0.isExprResult());
63:       assertFalse(node0.isLabelName());
64:       assertFalse(node0.isNot());
65:       assertFalse(node0.isObjectLit());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isNumber());
68:       assertFalse(node0.isInstanceOf());
69:       assertFalse(node0.isGetProp());
70:       assertFalse(node0.isBreak());
71:       assertTrue(node0.isGetterDef());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.isAssign());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.isWith());
76:       assertFalse(node0.hasMoreThanOneChild());
77:       assertFalse(node0.isHook());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.isComma());
81:       assertFalse(node0.isThis());
82:       assertFalse(node0.isReturn());
83:       assertFalse(node0.hasChildren());
84:       assertEquals(602259, node0.getSourcePosition());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isString());
87:       assertEquals(147, node0.getType());
88:       assertFalse(node0.isIn());
89:       assertFalse(node0.isSetterDef());
90:       assertFalse(node0.isFalse());
91:       assertFalse(node0.isThrow());
92:       assertFalse(node0.isContinue());
93:       assertFalse(node0.isTry());
94:       assertFalse(node0.isVoid());
95:       assertFalse(node0.isFunction());
96:       assertFalse(node0.isArrayLit());
97:       assertFalse(node0.isEmpty());
98:       assertFalse(node0.isDelProp());
99:       assertFalse(node0.isIf());
100:       assertFalse(node0.isNE());
101:       assertFalse(node0.isTrue());
102:       assertFalse(node0.isDebugger());
103:       assertFalse(node0.isCatch());
104:       assertFalse(node0.isFor());
105:       assertFalse(node0.isCase());
106:       assertFalse(node0.isRegExp());
107:       assertFalse(node0.isAdd());
108:       assertFalse(node0.isNew());
109:       assertFalse(node0.isBlock());
110:       assertFalse(node0.isSwitch());
111:       assertFalse(node0.isCall());
112:       assertFalse(node0.isStringKey());
113:       assertFalse(node0.isName());
114:       assertFalse(node0.isNull());
115:       assertFalse(node0.isOr());
116:       assertFalse(node0.isParamList());
117:       assertFalse(node0.isAssignAdd());
118:       assertFalse(node0.isDo());
119:       assertEquals(147, node0.getCharno());
120:       assertFalse(node0.isDefaultCase());
121:       assertFalse(node0.isVar());
122:       assertEquals(0, node0.getChildCount());
123:       assertFalse(node0.isLabel());
124:       
125:       boolean boolean0 = node0.isVoid();
126:       assertFalse(boolean0);
127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
128:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
129:       assertEquals(39, Node.EMPTY_BLOCK);
130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
131:       assertEquals(50, Node.FREE_CALL);
132:       assertEquals(8, Node.FLAG_NO_THROWS);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(15, Node.NO_SIDE_EFFECTS);
135:       assertEquals(36, Node.QUOTED_PROP);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
138:       assertEquals(52, Node.LENGTH);
139:       assertEquals(4095, Node.COLUMN_MASK);
140:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(48, Node.DIRECTIVES);
143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
144:       assertEquals(37, Node.OPT_ARG_NAME);
145:       assertEquals(49, Node.DIRECT_EVAL);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(56, Node.CHANGE_TIME);
148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
149:       assertEquals(29, Node.JSDOC_INFO_PROP);
150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
151:       assertEquals(2, Node.POST_FLAG);
152:       assertEquals(12, Node.COLUMN_BITS);
153:       assertEquals(53, Node.INPUT_ID);
154:       assertEquals(1, Node.DECR_FLAG);
155:       assertEquals(32, Node.INCRDECR_PROP);
156:       assertEquals(57, Node.LAST_PROP);
157:       assertEquals(43, Node.IS_CONSTANT_NAME);
158:       assertEquals(30, Node.VAR_ARGS_NAME);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertEquals(54, Node.SLASH_V);
163:       assertEquals(147, node0.getLineno());
164:       assertFalse(node0.hasOneChild());
165:       assertFalse(node0.isScript());
166:       assertFalse(node0.isCast());
167:       assertFalse(node0.isExprResult());
168:       assertFalse(node0.isLabelName());
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isObjectLit());
171:       assertFalse(node0.isAnd());
172:       assertFalse(node0.isNumber());
173:       assertFalse(node0.isInstanceOf());
174:       assertFalse(node0.isGetProp());
175:       assertFalse(node0.isBreak());
176:       assertTrue(node0.isGetterDef());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isAssign());
179:       assertFalse(node0.isWhile());
180:       assertFalse(node0.isWith());
181:       assertFalse(node0.hasMoreThanOneChild());
182:       assertFalse(node0.isHook());
183:       assertFalse(node0.isTypeOf());
184:       assertFalse(node0.isDec());
185:       assertFalse(node0.isComma());
186:       assertFalse(node0.isThis());
187:       assertFalse(node0.isReturn());
188:       assertFalse(node0.hasChildren());
189:       assertEquals(602259, node0.getSourcePosition());
190:       assertFalse(node0.isInc());
191:       assertFalse(node0.isString());
192:       assertEquals(147, node0.getType());
193:       assertFalse(node0.isIn());
194:       assertFalse(node0.isSetterDef());
195:       assertFalse(node0.isFalse());
196:       assertFalse(node0.isThrow());
197:       assertFalse(node0.isContinue());
198:       assertFalse(node0.isTry());
199:       assertFalse(node0.isVoid());
200:       assertFalse(node0.isFunction());
201:       assertFalse(node0.isArrayLit());
202:       assertFalse(node0.isEmpty());
203:       assertFalse(node0.isDelProp());
204:       assertFalse(node0.isIf());
205:       assertFalse(node0.isNE());
206:       assertFalse(node0.isTrue());
207:       assertFalse(node0.isDebugger());
208:       assertFalse(node0.isCatch());
209:       assertFalse(node0.isFor());
210:       assertFalse(node0.isCase());
211:       assertFalse(node0.isRegExp());
212:       assertFalse(node0.isAdd());
213:       assertFalse(node0.isNew());
214:       assertFalse(node0.isBlock());
215:       assertFalse(node0.isSwitch());
216:       assertFalse(node0.isCall());
217:       assertFalse(node0.isStringKey());
218:       assertFalse(node0.isName());
219:       assertFalse(node0.isNull());
220:       assertFalse(node0.isOr());
221:       assertFalse(node0.isParamList());
222:       assertFalse(node0.isAssignAdd());
223:       assertFalse(node0.isDo());
224:       assertEquals(147, node0.getCharno());
225:       assertFalse(node0.isDefaultCase());
226:       assertFalse(node0.isVar());
227:       assertEquals(0, node0.getChildCount());
228:       assertFalse(node0.isLabel());
229:       
230:       boolean boolean1 = node0.isGetterDef();
231:       assertTrue(boolean1);
232:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
233:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
234:       assertEquals(39, Node.EMPTY_BLOCK);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(8, Node.FLAG_NO_THROWS);
238:       assertEquals(55, Node.INFERRED_FUNCTION);
239:       assertEquals(15, Node.NO_SIDE_EFFECTS);
240:       assertEquals(36, Node.QUOTED_PROP);
241:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
243:       assertEquals(52, Node.LENGTH);
244:       assertEquals(4095, Node.COLUMN_MASK);
245:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
246:       assertEquals(57, Node.REFLECTED_OBJECT);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
249:       assertEquals(37, Node.OPT_ARG_NAME);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(56, Node.CHANGE_TIME);
253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
254:       assertEquals(29, Node.JSDOC_INFO_PROP);
255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
256:       assertEquals(2, Node.POST_FLAG);
257:       assertEquals(12, Node.COLUMN_BITS);
258:       assertEquals(53, Node.INPUT_ID);
259:       assertEquals(1, Node.DECR_FLAG);
260:       assertEquals(32, Node.INCRDECR_PROP);
261:       assertEquals(57, Node.LAST_PROP);
262:       assertEquals(43, Node.IS_CONSTANT_NAME);
263:       assertEquals(30, Node.VAR_ARGS_NAME);
264:       assertEquals(46, Node.IS_NAMESPACE);
265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
266:       assertEquals(40, Node.ORIGINALNAME_PROP);
267:       assertEquals(54, Node.SLASH_V);
268:       assertFalse(boolean1 == boolean0);
269:       assertEquals(147, node0.getLineno());
270:       assertFalse(node0.hasOneChild());
271:       assertFalse(node0.isScript());
272:       assertFalse(node0.isCast());
273:       assertFalse(node0.isExprResult());
274:       assertFalse(node0.isLabelName());
275:       assertFalse(node0.isNot());
276:       assertFalse(node0.isObjectLit());
277:       assertFalse(node0.isAnd());
278:       assertFalse(node0.isNumber());
279:       assertFalse(node0.isInstanceOf());
280:       assertFalse(node0.isGetProp());
281:       assertFalse(node0.isBreak());
282:       assertTrue(node0.isGetterDef());
283:       assertFalse(node0.isGetElem());
284:       assertFalse(node0.isAssign());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isWith());
287:       assertFalse(node0.hasMoreThanOneChild());
288:       assertFalse(node0.isHook());
289:       assertFalse(node0.isTypeOf());
290:       assertFalse(node0.isDec());
291:       assertFalse(node0.isComma());
292:       assertFalse(node0.isThis());
293:       assertFalse(node0.isReturn());
294:       assertFalse(node0.hasChildren());
295:       assertEquals(602259, node0.getSourcePosition());
296:       assertFalse(node0.isInc());
297:       assertFalse(node0.isString());
298:       assertEquals(147, node0.getType());
299:       assertFalse(node0.isIn());
300:       assertFalse(node0.isSetterDef());
301:       assertFalse(node0.isFalse());
302:       assertFalse(node0.isThrow());
303:       assertFalse(node0.isContinue());
304:       assertFalse(node0.isTry());
305:       assertFalse(node0.isVoid());
306:       assertFalse(node0.isFunction());
307:       assertFalse(node0.isArrayLit());
308:       assertFalse(node0.isEmpty());
309:       assertFalse(node0.isDelProp());
310:       assertFalse(node0.isIf());
311:       assertFalse(node0.isNE());
312:       assertFalse(node0.isTrue());
313:       assertFalse(node0.isDebugger());
314:       assertFalse(node0.isCatch());
315:       assertFalse(node0.isFor());
316:       assertFalse(node0.isCase());
317:       assertFalse(node0.isRegExp());
318:       assertFalse(node0.isAdd());
319:       assertFalse(node0.isNew());
320:       assertFalse(node0.isBlock());
321:       assertFalse(node0.isSwitch());
322:       assertFalse(node0.isCall());
323:       assertFalse(node0.isStringKey());
324:       assertFalse(node0.isName());
325:       assertFalse(node0.isNull());
326:       assertFalse(node0.isOr());
327:       assertFalse(node0.isParamList());
328:       assertFalse(node0.isAssignAdd());
329:       assertFalse(node0.isDo());
330:       assertEquals(147, node0.getCharno());
331:       assertFalse(node0.isDefaultCase());
332:       assertFalse(node0.isVar());
333:       assertEquals(0, node0.getChildCount());
334:       assertFalse(node0.isLabel());
335:       
336:       boolean boolean2 = node0.isReturn();
337:       assertFalse(boolean2);
338:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
340:       assertEquals(39, Node.EMPTY_BLOCK);
341:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
342:       assertEquals(50, Node.FREE_CALL);
343:       assertEquals(8, Node.FLAG_NO_THROWS);
344:       assertEquals(55, Node.INFERRED_FUNCTION);
345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
346:       assertEquals(36, Node.QUOTED_PROP);
347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
348:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
349:       assertEquals(52, Node.LENGTH);
350:       assertEquals(4095, Node.COLUMN_MASK);
351:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
352:       assertEquals(57, Node.REFLECTED_OBJECT);
353:       assertEquals(48, Node.DIRECTIVES);
354:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
355:       assertEquals(37, Node.OPT_ARG_NAME);
356:       assertEquals(49, Node.DIRECT_EVAL);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(56, Node.CHANGE_TIME);
359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
360:       assertEquals(29, Node.JSDOC_INFO_PROP);
361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
362:       assertEquals(2, Node.POST_FLAG);
363:       assertEquals(12, Node.COLUMN_BITS);
364:       assertEquals(53, Node.INPUT_ID);
365:       assertEquals(1, Node.DECR_FLAG);
366:       assertEquals(32, Node.INCRDECR_PROP);
367:       assertEquals(57, Node.LAST_PROP);
368:       assertEquals(43, Node.IS_CONSTANT_NAME);
369:       assertEquals(30, Node.VAR_ARGS_NAME);
370:       assertEquals(46, Node.IS_NAMESPACE);
371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
372:       assertEquals(40, Node.ORIGINALNAME_PROP);
373:       assertEquals(54, Node.SLASH_V);
374:       assertTrue(boolean2 == boolean0);
375:       assertFalse(boolean2 == boolean1);
376:       assertEquals(147, node0.getLineno());
377:       assertFalse(node0.hasOneChild());
378:       assertFalse(node0.isScript());
379:       assertFalse(node0.isCast());
380:       assertFalse(node0.isExprResult());
381:       assertFalse(node0.isLabelName());
382:       assertFalse(node0.isNot());
383:       assertFalse(node0.isObjectLit());
384:       assertFalse(node0.isAnd());
385:       assertFalse(node0.isNumber());
386:       assertFalse(node0.isInstanceOf());
387:       assertFalse(node0.isGetProp());
388:       assertFalse(node0.isBreak());
389:       assertTrue(node0.isGetterDef());
390:       assertFalse(node0.isGetElem());
391:       assertFalse(node0.isAssign());
392:       assertFalse(node0.isWhile());
393:       assertFalse(node0.isWith());
394:       assertFalse(node0.hasMoreThanOneChild());
395:       assertFalse(node0.isHook());
396:       assertFalse(node0.isTypeOf());
397:       assertFalse(node0.isDec());
398:       assertFalse(node0.isComma());
399:       assertFalse(node0.isThis());
400:       assertFalse(node0.isReturn());
401:       assertFalse(node0.hasChildren());
402:       assertEquals(602259, node0.getSourcePosition());
403:       assertFalse(node0.isInc());
404:       assertFalse(node0.isString());
405:       assertEquals(147, node0.getType());
406:       assertFalse(node0.isIn());
407:       assertFalse(node0.isSetterDef());
408:       assertFalse(node0.isFalse());
409:       assertFalse(node0.isThrow());
410:       assertFalse(node0.isContinue());
411:       assertFalse(node0.isTry());
412:       assertFalse(node0.isVoid());
413:       assertFalse(node0.isFunction());
414:       assertFalse(node0.isArrayLit());
415:       assertFalse(node0.isEmpty());
416:       assertFalse(node0.isDelProp());
417:       assertFalse(node0.isIf());
418:       assertFalse(node0.isNE());
419:       assertFalse(node0.isTrue());
420:       assertFalse(node0.isDebugger());
421:       assertFalse(node0.isCatch());
422:       assertFalse(node0.isFor());
423:       assertFalse(node0.isCase());
424:       assertFalse(node0.isRegExp());
425:       assertFalse(node0.isAdd());
426:       assertFalse(node0.isNew());
427:       assertFalse(node0.isBlock());
428:       assertFalse(node0.isSwitch());
429:       assertFalse(node0.isCall());
430:       assertFalse(node0.isStringKey());
431:       assertFalse(node0.isName());
432:       assertFalse(node0.isNull());
433:       assertFalse(node0.isOr());
434:       assertFalse(node0.isParamList());
435:       assertFalse(node0.isAssignAdd());
436:       assertFalse(node0.isDo());
437:       assertEquals(147, node0.getCharno());
438:       assertFalse(node0.isDefaultCase());
439:       assertFalse(node0.isVar());
440:       assertEquals(0, node0.getChildCount());
441:       assertFalse(node0.isLabel());
442:       
443:       Iterable<Node> iterable0 = node0.siblings();
444:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
445:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
446:       assertEquals(39, Node.EMPTY_BLOCK);
447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
448:       assertEquals(50, Node.FREE_CALL);
449:       assertEquals(8, Node.FLAG_NO_THROWS);
450:       assertEquals(55, Node.INFERRED_FUNCTION);
451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
452:       assertEquals(36, Node.QUOTED_PROP);
453:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
454:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
455:       assertEquals(52, Node.LENGTH);
456:       assertEquals(4095, Node.COLUMN_MASK);
457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(48, Node.DIRECTIVES);
460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
461:       assertEquals(37, Node.OPT_ARG_NAME);
462:       assertEquals(49, Node.DIRECT_EVAL);
463:       assertEquals(47, Node.IS_DISPATCHER);
464:       assertEquals(56, Node.CHANGE_TIME);
465:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
466:       assertEquals(29, Node.JSDOC_INFO_PROP);
467:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
468:       assertEquals(2, Node.POST_FLAG);
469:       assertEquals(12, Node.COLUMN_BITS);
470:       assertEquals(53, Node.INPUT_ID);
471:       assertEquals(1, Node.DECR_FLAG);
472:       assertEquals(32, Node.INCRDECR_PROP);
473:       assertEquals(57, Node.LAST_PROP);
474:       assertEquals(43, Node.IS_CONSTANT_NAME);
475:       assertEquals(30, Node.VAR_ARGS_NAME);
476:       assertEquals(46, Node.IS_NAMESPACE);
477:       assertEquals(51, Node.STATIC_SOURCE_FILE);
478:       assertEquals(40, Node.ORIGINALNAME_PROP);
479:       assertEquals(54, Node.SLASH_V);
480:       assertNotNull(iterable0);
481:       assertEquals(147, node0.getLineno());
482:       assertFalse(node0.hasOneChild());
483:       assertFalse(node0.isScript());
484:       assertFalse(node0.isCast());
485:       assertFalse(node0.isExprResult());
486:       assertFalse(node0.isLabelName());
487:       assertFalse(node0.isNot());
488:       assertFalse(node0.isObjectLit());
489:       assertFalse(node0.isAnd());
490:       assertFalse(node0.isNumber());
491:       assertFalse(node0.isInstanceOf());
492:       assertFalse(node0.isGetProp());
493:       assertFalse(node0.isBreak());
494:       assertTrue(node0.isGetterDef());
495:       assertFalse(node0.isGetElem());
496:       assertFalse(node0.isAssign());
497:       assertFalse(node0.isWhile());
498:       assertFalse(node0.isWith());
499:       assertFalse(node0.hasMoreThanOneChild());
500:       assertFalse(node0.isHook());
501:       assertFalse(node0.isTypeOf());
502:       assertFalse(node0.isDec());
503:       assertFalse(node0.isComma());
504:       assertFalse(node0.isThis());
505:       assertFalse(node0.isReturn());
506:       assertFalse(node0.hasChildren());
507:       assertEquals(602259, node0.getSourcePosition());
508:       assertFalse(node0.isInc());
509:       assertFalse(node0.isString());
510:       assertEquals(147, node0.getType());
511:       assertFalse(node0.isIn());
512:       assertFalse(node0.isSetterDef());
513:       assertFalse(node0.isFalse());
514:       assertFalse(node0.isThrow());
515:       assertFalse(node0.isContinue());
516:       assertFalse(node0.isTry());
517:       assertFalse(node0.isVoid());
518:       assertFalse(node0.isFunction());
519:       assertFalse(node0.isArrayLit());
520:       assertFalse(node0.isEmpty());
521:       assertFalse(node0.isDelProp());
522:       assertFalse(node0.isIf());
523:       assertFalse(node0.isNE());
524:       assertFalse(node0.isTrue());
525:       assertFalse(node0.isDebugger());
526:       assertFalse(node0.isCatch());
527:       assertFalse(node0.isFor());
528:       assertFalse(node0.isCase());
529:       assertFalse(node0.isRegExp());
530:       assertFalse(node0.isAdd());
531:       assertFalse(node0.isNew());
532:       assertFalse(node0.isBlock());
533:       assertFalse(node0.isSwitch());
534:       assertFalse(node0.isCall());
535:       assertFalse(node0.isStringKey());
536:       assertFalse(node0.isName());
537:       assertFalse(node0.isNull());
538:       assertFalse(node0.isOr());
539:       assertFalse(node0.isParamList());
540:       assertFalse(node0.isAssignAdd());
541:       assertFalse(node0.isDo());
542:       assertEquals(147, node0.getCharno());
543:       assertFalse(node0.isDefaultCase());
544:       assertFalse(node0.isVar());
545:       assertEquals(0, node0.getChildCount());
546:       assertFalse(node0.isLabel());
547:       
548:       Iterable<Node> iterable1 = node0.children();
549:       assertFalse(iterable1.contains(node0));
550:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
551:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
552:       assertEquals(39, Node.EMPTY_BLOCK);
553:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
554:       assertEquals(50, Node.FREE_CALL);
555:       assertEquals(8, Node.FLAG_NO_THROWS);
556:       assertEquals(55, Node.INFERRED_FUNCTION);
557:       assertEquals(15, Node.NO_SIDE_EFFECTS);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
561:       assertEquals(52, Node.LENGTH);
562:       assertEquals(4095, Node.COLUMN_MASK);
563:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
564:       assertEquals(57, Node.REFLECTED_OBJECT);
565:       assertEquals(48, Node.DIRECTIVES);
566:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
567:       assertEquals(37, Node.OPT_ARG_NAME);
568:       assertEquals(49, Node.DIRECT_EVAL);
569:       assertEquals(47, Node.IS_DISPATCHER);
570:       assertEquals(56, Node.CHANGE_TIME);
571:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
572:       assertEquals(29, Node.JSDOC_INFO_PROP);
573:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
574:       assertEquals(2, Node.POST_FLAG);
575:       assertEquals(12, Node.COLUMN_BITS);
576:       assertEquals(53, Node.INPUT_ID);
577:       assertEquals(1, Node.DECR_FLAG);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(57, Node.LAST_PROP);
580:       assertEquals(43, Node.IS_CONSTANT_NAME);
581:       assertEquals(30, Node.VAR_ARGS_NAME);
582:       assertEquals(46, Node.IS_NAMESPACE);
583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
584:       assertEquals(40, Node.ORIGINALNAME_PROP);
585:       assertEquals(54, Node.SLASH_V);
586:       assertNotNull(iterable1);
587:       assertFalse(iterable1.equals((Object)iterable0));
588:       assertEquals(147, node0.getLineno());
589:       assertFalse(node0.hasOneChild());
590:       assertFalse(node0.isScript());
591:       assertFalse(node0.isCast());
592:       assertFalse(node0.isExprResult());
593:       assertFalse(node0.isLabelName());
594:       assertFalse(node0.isNot());
595:       assertFalse(node0.isObjectLit());
596:       assertFalse(node0.isAnd());
597:       assertFalse(node0.isNumber());
598:       assertFalse(node0.isInstanceOf());
599:       assertFalse(node0.isGetProp());
600:       assertFalse(node0.isBreak());
601:       assertTrue(node0.isGetterDef());
602:       assertFalse(node0.isGetElem());
603:       assertFalse(node0.isAssign());
604:       assertFalse(node0.isWhile());
605:       assertFalse(node0.isWith());
606:       assertFalse(node0.hasMoreThanOneChild());
607:       assertFalse(node0.isHook());
608:       assertFalse(node0.isTypeOf());
609:       assertFalse(node0.isDec());
610:       assertFalse(node0.isComma());
611:       assertFalse(node0.isThis());
612:       assertFalse(node0.isReturn());
613:       assertFalse(node0.hasChildren());
614:       assertEquals(602259, node0.getSourcePosition());
615:       assertFalse(node0.isInc());
616:       assertFalse(node0.isString());
617:       assertEquals(147, node0.getType());
618:       assertFalse(node0.isIn());
619:       assertFalse(node0.isSetterDef());
620:       assertFalse(node0.isFalse());
621:       assertFalse(node0.isThrow());
622:       assertFalse(node0.isContinue());
623:       assertFalse(node0.isTry());
624:       assertFalse(node0.isVoid());
625:       assertFalse(node0.isFunction());
626:       assertFalse(node0.isArrayLit());
627:       assertFalse(node0.isEmpty());
628:       assertFalse(node0.isDelProp());
629:       assertFalse(node0.isIf());
630:       assertFalse(node0.isNE());
631:       assertFalse(node0.isTrue());
632:       assertFalse(node0.isDebugger());
633:       assertFalse(node0.isCatch());
634:       assertFalse(node0.isFor());
635:       assertFalse(node0.isCase());
636:       assertFalse(node0.isRegExp());
637:       assertFalse(node0.isAdd());
638:       assertFalse(node0.isNew());
639:       assertFalse(node0.isBlock());
640:       assertFalse(node0.isSwitch());
641:       assertFalse(node0.isCall());
642:       assertFalse(node0.isStringKey());
643:       assertFalse(node0.isName());
644:       assertFalse(node0.isNull());
645:       assertFalse(node0.isOr());
646:       assertFalse(node0.isParamList());
647:       assertFalse(node0.isAssignAdd());
648:       assertFalse(node0.isDo());
649:       assertEquals(147, node0.getCharno());
650:       assertFalse(node0.isDefaultCase());
651:       assertFalse(node0.isVar());
652:       assertEquals(0, node0.getChildCount());
653:       assertFalse(node0.isLabel());
654:   }
655: }
RegularFileObject[/tmp/EvoSuite_216_1628158033727/com/google/javascript/rhino/Node_216_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:07:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_216_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_216_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_216_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Iterables",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.JSTypeExpression",
349:       "com.google.javascript.rhino.jstype.NamedType",
350:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.Platform",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator"
364:     );
365:   }
366: }

[MASTER] 10:07:13.821 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(147, 147, 147);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertNotNull(node0);
assertEquals(147, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(147, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());

boolean boolean0 = node0.isVoid();
assertFalse(boolean0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(147, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(147, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());

boolean boolean1 = node0.isGetterDef();
assertTrue(boolean1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean1 == boolean0);
assertEquals(147, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(147, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());

boolean boolean2 = node0.isReturn();
assertFalse(boolean2);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertEquals(147, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(147, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());

Iterable<Node> iterable0 = node0.siblings();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertNotNull(iterable0);
assertEquals(147, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(147, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());

Iterable<Node> iterable1 = node0.children();
assertFalse(iterable1.contains(node0));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertNotNull(iterable1);
assertFalse(iterable1.equals((Object)iterable0));
assertEquals(147, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(147, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());


[MASTER] 10:07:21.303 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_280_1628158040908/com/google/javascript/rhino/Node_280_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_280_1628158040908/com/google/javascript/rhino/Node_280_tmp__ESTest_scaffolding.java]]
[MASTER] 10:07:21.303 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:07:21.303 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:07:21.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1948
[MASTER] 10:07:21.308 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_280_1628158040908/com/google/javascript/rhino/Node_280_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:07:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_280_tmp__ESTest extends Node_280_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(32);
21:       assertEquals(57, Node.REFLECTED_OBJECT);
22:       assertEquals(52, Node.LENGTH);
23:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
24:       assertEquals(54, Node.SLASH_V);
25:       assertEquals(50, Node.FREE_CALL);
26:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
27:       assertEquals(48, Node.DIRECTIVES);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(49, Node.DIRECT_EVAL);
30:       assertEquals(55, Node.INFERRED_FUNCTION);
31:       assertEquals(2, Node.POST_FLAG);
32:       assertEquals(30, Node.VAR_ARGS_NAME);
33:       assertEquals(15, Node.NO_SIDE_EFFECTS);
34:       assertEquals(57, Node.LAST_PROP);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
39:       assertEquals(8, Node.FLAG_NO_THROWS);
40:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
41:       assertEquals(53, Node.INPUT_ID);
42:       assertEquals(39, Node.EMPTY_BLOCK);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(36, Node.QUOTED_PROP);
45:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(37, Node.OPT_ARG_NAME);
49:       assertEquals(46, Node.IS_NAMESPACE);
50:       assertEquals(12, Node.COLUMN_BITS);
51:       assertEquals(32, Node.INCRDECR_PROP);
52:       assertEquals(4095, Node.COLUMN_MASK);
53:       assertEquals(51, Node.STATIC_SOURCE_FILE);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertNotNull(node0);
58:       assertFalse(node0.isWith());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isNot());
61:       assertFalse(node0.isScript());
62:       assertFalse(node0.isExprResult());
63:       assertFalse(node0.isInstanceOf());
64:       assertFalse(node0.isGetProp());
65:       assertFalse(node0.isComma());
66:       assertFalse(node0.hasOneChild());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isGetElem());
69:       assertFalse(node0.isAssign());
70:       assertFalse(node0.isDec());
71:       assertFalse(node0.isBreak());
72:       assertEquals((-1), node0.getLineno());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isCase());
75:       assertFalse(node0.isDo());
76:       assertFalse(node0.hasMoreThanOneChild());
77:       assertFalse(node0.isAdd());
78:       assertFalse(node0.isNew());
79:       assertFalse(node0.isBlock());
80:       assertFalse(node0.isLabel());
81:       assertFalse(node0.isAssignAdd());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isVar());
84:       assertFalse(node0.isGetterDef());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isArrayLit());
87:       assertFalse(node0.isNumber());
88:       assertEquals((-1), node0.getCharno());
89:       assertFalse(node0.isSwitch());
90:       assertFalse(node0.isParamList());
91:       assertFalse(node0.isStringKey());
92:       assertFalse(node0.isRegExp());
93:       assertFalse(node0.isCatch());
94:       assertFalse(node0.isFunction());
95:       assertFalse(node0.isTry());
96:       assertEquals(0, node0.getChildCount());
97:       assertFalse(node0.isDefaultCase());
98:       assertFalse(node0.isFor());
99:       assertFalse(node0.isName());
100:       assertFalse(node0.isDelProp());
101:       assertFalse(node0.isSetterDef());
102:       assertFalse(node0.isCall());
103:       assertFalse(node0.isEmpty());
104:       assertTrue(node0.isTypeOf());
105:       assertFalse(node0.isVoid());
106:       assertFalse(node0.isNull());
107:       assertFalse(node0.isIf());
108:       assertFalse(node0.isTrue());
109:       assertFalse(node0.isNE());
110:       assertFalse(node0.isIn());
111:       assertFalse(node0.isInc());
112:       assertFalse(node0.isString());
113:       assertFalse(node0.isContinue());
114:       assertFalse(node0.hasChildren());
115:       assertFalse(node0.isWhile());
116:       assertFalse(node0.isReturn());
117:       assertFalse(node0.isThrow());
118:       assertFalse(node0.isFalse());
119:       assertFalse(node0.isCast());
120:       assertEquals(32, node0.getType());
121:       assertFalse(node0.isDebugger());
122:       assertEquals((-1), node0.getSourcePosition());
123:       assertFalse(node0.isAnd());
124:       
125:       Node node1 = Node.newString("(U#U(ml`@EOBDzfM]");
126:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(29, Node.JSDOC_INFO_PROP);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
131:       assertEquals(43, Node.IS_CONSTANT_NAME);
132:       assertEquals(53, Node.INPUT_ID);
133:       assertEquals(56, Node.CHANGE_TIME);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(51, Node.STATIC_SOURCE_FILE);
136:       assertEquals(36, Node.QUOTED_PROP);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(4095, Node.COLUMN_MASK);
139:       assertEquals(32, Node.INCRDECR_PROP);
140:       assertEquals(48, Node.DIRECTIVES);
141:       assertEquals(49, Node.DIRECT_EVAL);
142:       assertEquals(1, Node.DECR_FLAG);
143:       assertEquals(37, Node.OPT_ARG_NAME);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(40, Node.ORIGINALNAME_PROP);
147:       assertEquals(57, Node.REFLECTED_OBJECT);
148:       assertEquals(8, Node.FLAG_NO_THROWS);
149:       assertEquals(39, Node.EMPTY_BLOCK);
150:       assertEquals(54, Node.SLASH_V);
151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
152:       assertEquals(52, Node.LENGTH);
153:       assertEquals(50, Node.FREE_CALL);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(55, Node.INFERRED_FUNCTION);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(57, Node.LAST_PROP);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(2, Node.POST_FLAG);
161:       assertEquals(30, Node.VAR_ARGS_NAME);
162:       assertNotNull(node1);
163:       assertFalse(node1.equals((Object)node0));
164:       assertFalse(node1.isWhile());
165:       assertFalse(node1.isDo());
166:       assertFalse(node1.isBlock());
167:       assertEquals((-1), node1.getLineno());
168:       assertFalse(node1.hasMoreThanOneChild());
169:       assertFalse(node1.isContinue());
170:       assertFalse(node1.isCall());
171:       assertFalse(node1.isNumber());
172:       assertFalse(node1.isDec());
173:       assertFalse(node1.hasChildren());
174:       assertEquals((-1), node1.getSourcePosition());
175:       assertFalse(node1.isLabelName());
176:       assertFalse(node1.isAssign());
177:       assertFalse(node1.isTypeOf());
178:       assertFalse(node1.isStringKey());
179:       assertFalse(node1.isParamList());
180:       assertFalse(node1.isReturn());
181:       assertFalse(node1.hasOneChild());
182:       assertTrue(node1.isString());
183:       assertFalse(node1.isScript());
184:       assertFalse(node1.isWith());
185:       assertFalse(node1.isNot());
186:       assertFalse(node1.isRegExp());
187:       assertFalse(node1.isFunction());
188:       assertFalse(node1.isDebugger());
189:       assertFalse(node1.isAnd());
190:       assertEquals(40, node1.getType());
191:       assertFalse(node1.isInstanceOf());
192:       assertFalse(node1.isCatch());
193:       assertFalse(node1.isCast());
194:       assertFalse(node1.isIf());
195:       assertFalse(node1.isThrow());
196:       assertFalse(node1.isNE());
197:       assertFalse(node1.isIn());
198:       assertFalse(node1.isSetterDef());
199:       assertFalse(node1.isInc());
200:       assertFalse(node1.isSwitch());
201:       assertEquals((-1), node1.getCharno());
202:       assertFalse(node1.isHook());
203:       assertFalse(node1.isFalse());
204:       assertFalse(node1.isComma());
205:       assertFalse(node1.isGetterDef());
206:       assertFalse(node1.isThis());
207:       assertFalse(node1.isFor());
208:       assertFalse(node1.isTry());
209:       assertFalse(node1.isObjectLit());
210:       assertFalse(node1.isGetProp());
211:       assertFalse(node1.isCase());
212:       assertFalse(node1.isDefaultCase());
213:       assertFalse(node1.isVoid());
214:       assertFalse(node1.isTrue());
215:       assertEquals(0, node1.getChildCount());
216:       assertFalse(node1.isArrayLit());
217:       assertFalse(node1.isExprResult());
218:       assertFalse(node1.isGetElem());
219:       assertFalse(node1.isBreak());
220:       assertFalse(node1.isDelProp());
221:       assertFalse(node1.isName());
222:       assertFalse(node1.isLabel());
223:       assertFalse(node1.isVar());
224:       assertFalse(node1.isNull());
225:       assertFalse(node1.isOr());
226:       assertFalse(node1.isAssignAdd());
227:       assertFalse(node1.isNew());
228:       assertFalse(node1.isEmpty());
229:       assertFalse(node1.isAdd());
230:       
231:       Node node2 = node0.useSourceInfoFromForTree(node1);
232:       assertEquals(57, Node.REFLECTED_OBJECT);
233:       assertEquals(52, Node.LENGTH);
234:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
235:       assertEquals(54, Node.SLASH_V);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
238:       assertEquals(48, Node.DIRECTIVES);
239:       assertEquals(40, Node.ORIGINALNAME_PROP);
240:       assertEquals(49, Node.DIRECT_EVAL);
241:       assertEquals(55, Node.INFERRED_FUNCTION);
242:       assertEquals(2, Node.POST_FLAG);
243:       assertEquals(30, Node.VAR_ARGS_NAME);
244:       assertEquals(15, Node.NO_SIDE_EFFECTS);
245:       assertEquals(57, Node.LAST_PROP);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
248:       assertEquals(29, Node.JSDOC_INFO_PROP);
249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
250:       assertEquals(8, Node.FLAG_NO_THROWS);
251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(39, Node.EMPTY_BLOCK);
254:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
257:       assertEquals(43, Node.IS_CONSTANT_NAME);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(37, Node.OPT_ARG_NAME);
260:       assertEquals(46, Node.IS_NAMESPACE);
261:       assertEquals(12, Node.COLUMN_BITS);
262:       assertEquals(32, Node.INCRDECR_PROP);
263:       assertEquals(4095, Node.COLUMN_MASK);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
268:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
269:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
270:       assertEquals(29, Node.JSDOC_INFO_PROP);
271:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
273:       assertEquals(43, Node.IS_CONSTANT_NAME);
274:       assertEquals(53, Node.INPUT_ID);
275:       assertEquals(56, Node.CHANGE_TIME);
276:       assertEquals(46, Node.IS_NAMESPACE);
277:       assertEquals(51, Node.STATIC_SOURCE_FILE);
278:       assertEquals(36, Node.QUOTED_PROP);
279:       assertEquals(12, Node.COLUMN_BITS);
280:       assertEquals(4095, Node.COLUMN_MASK);
281:       assertEquals(32, Node.INCRDECR_PROP);
282:       assertEquals(48, Node.DIRECTIVES);
283:       assertEquals(49, Node.DIRECT_EVAL);
284:       assertEquals(1, Node.DECR_FLAG);
285:       assertEquals(37, Node.OPT_ARG_NAME);
286:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
288:       assertEquals(40, Node.ORIGINALNAME_PROP);
289:       assertEquals(57, Node.REFLECTED_OBJECT);
290:       assertEquals(8, Node.FLAG_NO_THROWS);
291:       assertEquals(39, Node.EMPTY_BLOCK);
292:       assertEquals(54, Node.SLASH_V);
293:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
294:       assertEquals(52, Node.LENGTH);
295:       assertEquals(50, Node.FREE_CALL);
296:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
297:       assertEquals(55, Node.INFERRED_FUNCTION);
298:       assertEquals(15, Node.NO_SIDE_EFFECTS);
299:       assertEquals(57, Node.LAST_PROP);
300:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
301:       assertEquals(47, Node.IS_DISPATCHER);
302:       assertEquals(2, Node.POST_FLAG);
303:       assertEquals(30, Node.VAR_ARGS_NAME);
304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
305:       assertEquals(47, Node.IS_DISPATCHER);
306:       assertEquals(43, Node.IS_CONSTANT_NAME);
307:       assertEquals(56, Node.CHANGE_TIME);
308:       assertEquals(2, Node.POST_FLAG);
309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
310:       assertEquals(37, Node.OPT_ARG_NAME);
311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
312:       assertEquals(12, Node.COLUMN_BITS);
313:       assertEquals(46, Node.IS_NAMESPACE);
314:       assertEquals(32, Node.INCRDECR_PROP);
315:       assertEquals(4095, Node.COLUMN_MASK);
316:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
317:       assertEquals(1, Node.DECR_FLAG);
318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
319:       assertEquals(57, Node.REFLECTED_OBJECT);
320:       assertEquals(52, Node.LENGTH);
321:       assertEquals(50, Node.FREE_CALL);
322:       assertEquals(54, Node.SLASH_V);
323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
325:       assertEquals(48, Node.DIRECTIVES);
326:       assertEquals(49, Node.DIRECT_EVAL);
327:       assertEquals(40, Node.ORIGINALNAME_PROP);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(30, Node.VAR_ARGS_NAME);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
332:       assertEquals(8, Node.FLAG_NO_THROWS);
333:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
334:       assertEquals(57, Node.LAST_PROP);
335:       assertEquals(53, Node.INPUT_ID);
336:       assertEquals(29, Node.JSDOC_INFO_PROP);
337:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
338:       assertEquals(39, Node.EMPTY_BLOCK);
339:       assertEquals(15, Node.NO_SIDE_EFFECTS);
340:       assertNotNull(node2);
341:       assertFalse(node0.equals((Object)node1));
342:       assertFalse(node1.equals((Object)node0));
343:       assertFalse(node2.equals((Object)node1));
344:       assertFalse(node0.isWith());
345:       assertFalse(node0.isObjectLit());
346:       assertFalse(node0.isNot());
347:       assertFalse(node0.isScript());
348:       assertFalse(node0.isExprResult());
349:       assertFalse(node0.isInstanceOf());
350:       assertFalse(node0.isGetProp());
351:       assertFalse(node0.isComma());
352:       assertFalse(node0.hasOneChild());
353:       assertFalse(node0.isThis());
354:       assertFalse(node0.isGetElem());
355:       assertFalse(node0.isAssign());
356:       assertFalse(node0.isDec());
357:       assertFalse(node0.isBreak());
358:       assertEquals((-1), node0.getLineno());
359:       assertFalse(node0.isOr());
360:       assertFalse(node0.isCase());
361:       assertFalse(node0.isDo());
362:       assertFalse(node0.hasMoreThanOneChild());
363:       assertFalse(node0.isAdd());
364:       assertFalse(node0.isNew());
365:       assertFalse(node0.isBlock());
366:       assertFalse(node0.isLabel());
367:       assertFalse(node0.isAssignAdd());
368:       assertFalse(node0.isHook());
369:       assertFalse(node0.isVar());
370:       assertFalse(node0.isGetterDef());
371:       assertFalse(node0.isLabelName());
372:       assertFalse(node0.isArrayLit());
373:       assertFalse(node0.isNumber());
374:       assertEquals((-1), node0.getCharno());
375:       assertFalse(node0.isSwitch());
376:       assertFalse(node0.isParamList());
377:       assertFalse(node0.isStringKey());
378:       assertFalse(node0.isRegExp());
379:       assertFalse(node0.isCatch());
380:       assertFalse(node0.isFunction());
381:       assertFalse(node0.isTry());
382:       assertEquals(0, node0.getChildCount());
383:       assertFalse(node0.isDefaultCase());
384:       assertFalse(node0.isFor());
385:       assertFalse(node0.isName());
386:       assertFalse(node0.isDelProp());
387:       assertFalse(node0.isSetterDef());
388:       assertFalse(node0.isCall());
389:       assertFalse(node0.isEmpty());
390:       assertTrue(node0.isTypeOf());
391:       assertFalse(node0.isVoid());
392:       assertFalse(node0.isNull());
393:       assertFalse(node0.isIf());
394:       assertFalse(node0.isTrue());
395:       assertFalse(node0.isNE());
396:       assertFalse(node0.isIn());
397:       assertFalse(node0.isInc());
398:       assertFalse(node0.isString());
399:       assertFalse(node0.isContinue());
400:       assertFalse(node0.hasChildren());
401:       assertFalse(node0.isWhile());
402:       assertFalse(node0.isReturn());
403:       assertFalse(node0.isThrow());
404:       assertFalse(node0.isFalse());
405:       assertFalse(node0.isCast());
406:       assertEquals(32, node0.getType());
407:       assertFalse(node0.isDebugger());
408:       assertEquals((-1), node0.getSourcePosition());
409:       assertFalse(node0.isAnd());
410:       assertFalse(node1.isWhile());
411:       assertFalse(node1.isDo());
412:       assertFalse(node1.isBlock());
413:       assertEquals((-1), node1.getLineno());
414:       assertFalse(node1.hasMoreThanOneChild());
415:       assertFalse(node1.isContinue());
416:       assertFalse(node1.isCall());
417:       assertFalse(node1.isNumber());
418:       assertFalse(node1.isDec());
419:       assertFalse(node1.hasChildren());
420:       assertEquals((-1), node1.getSourcePosition());
421:       assertFalse(node1.isLabelName());
422:       assertFalse(node1.isAssign());
423:       assertFalse(node1.isTypeOf());
424:       assertFalse(node1.isStringKey());
425:       assertFalse(node1.isParamList());
426:       assertFalse(node1.isReturn());
427:       assertFalse(node1.hasOneChild());
428:       assertTrue(node1.isString());
429:       assertFalse(node1.isScript());
430:       assertFalse(node1.isWith());
431:       assertFalse(node1.isNot());
432:       assertFalse(node1.isRegExp());
433:       assertFalse(node1.isFunction());
434:       assertFalse(node1.isDebugger());
435:       assertFalse(node1.isAnd());
436:       assertEquals(40, node1.getType());
437:       assertFalse(node1.isInstanceOf());
438:       assertFalse(node1.isCatch());
439:       assertFalse(node1.isCast());
440:       assertFalse(node1.isIf());
441:       assertFalse(node1.isThrow());
442:       assertFalse(node1.isNE());
443:       assertFalse(node1.isIn());
444:       assertFalse(node1.isSetterDef());
445:       assertFalse(node1.isInc());
446:       assertFalse(node1.isSwitch());
447:       assertEquals((-1), node1.getCharno());
448:       assertFalse(node1.isHook());
449:       assertFalse(node1.isFalse());
450:       assertFalse(node1.isComma());
451:       assertFalse(node1.isGetterDef());
452:       assertFalse(node1.isThis());
453:       assertFalse(node1.isFor());
454:       assertFalse(node1.isTry());
455:       assertFalse(node1.isObjectLit());
456:       assertFalse(node1.isGetProp());
457:       assertFalse(node1.isCase());
458:       assertFalse(node1.isDefaultCase());
459:       assertFalse(node1.isVoid());
460:       assertFalse(node1.isTrue());
461:       assertEquals(0, node1.getChildCount());
462:       assertFalse(node1.isArrayLit());
463:       assertFalse(node1.isExprResult());
464:       assertFalse(node1.isGetElem());
465:       assertFalse(node1.isBreak());
466:       assertFalse(node1.isDelProp());
467:       assertFalse(node1.isName());
468:       assertFalse(node1.isLabel());
469:       assertFalse(node1.isVar());
470:       assertFalse(node1.isNull());
471:       assertFalse(node1.isOr());
472:       assertFalse(node1.isAssignAdd());
473:       assertFalse(node1.isNew());
474:       assertFalse(node1.isEmpty());
475:       assertFalse(node1.isAdd());
476:       assertFalse(node2.isCase());
477:       assertFalse(node2.isInc());
478:       assertFalse(node2.isIn());
479:       assertFalse(node2.isString());
480:       assertFalse(node2.isHook());
481:       assertFalse(node2.isThrow());
482:       assertFalse(node2.isFalse());
483:       assertFalse(node2.isGetterDef());
484:       assertEquals(32, node2.getType());
485:       assertEquals((-1), node2.getCharno());
486:       assertFalse(node2.isArrayLit());
487:       assertFalse(node2.isDebugger());
488:       assertFalse(node2.isSwitch());
489:       assertFalse(node2.isAnd());
490:       assertFalse(node2.isNot());
491:       assertFalse(node2.isObjectLit());
492:       assertFalse(node2.isExprResult());
493:       assertFalse(node2.isGetProp());
494:       assertEquals(0, node2.getChildCount());
495:       assertFalse(node2.isComma());
496:       assertFalse(node2.isDefaultCase());
497:       assertFalse(node2.isEmpty());
498:       assertFalse(node2.isAssign());
499:       assertFalse(node2.isGetElem());
500:       assertFalse(node2.isDelProp());
501:       assertFalse(node2.isName());
502:       assertFalse(node2.isBreak());
503:       assertFalse(node2.isDec());
504:       assertFalse(node2.hasChildren());
505:       assertFalse(node2.isCall());
506:       assertFalse(node2.isOr());
507:       assertFalse(node2.isVoid());
508:       assertFalse(node2.isNull());
509:       assertFalse(node2.isTrue());
510:       assertFalse(node2.isDo());
511:       assertFalse(node2.hasMoreThanOneChild());
512:       assertFalse(node2.isContinue());
513:       assertFalse(node2.isLabel());
514:       assertFalse(node2.isAssignAdd());
515:       assertFalse(node2.isAdd());
516:       assertFalse(node2.isBlock());
517:       assertFalse(node2.isReturn());
518:       assertFalse(node2.isNew());
519:       assertFalse(node2.isVar());
520:       assertFalse(node2.isWhile());
521:       assertFalse(node2.isLabelName());
522:       assertEquals((-1), node2.getSourcePosition());
523:       assertFalse(node2.isCast());
524:       assertFalse(node2.isNumber());
525:       assertFalse(node2.isStringKey());
526:       assertFalse(node2.isParamList());
527:       assertFalse(node2.isWith());
528:       assertFalse(node2.isScript());
529:       assertFalse(node2.isCatch());
530:       assertFalse(node2.isRegExp());
531:       assertFalse(node2.isFunction());
532:       assertFalse(node2.isInstanceOf());
533:       assertFalse(node2.isTry());
534:       assertFalse(node2.hasOneChild());
535:       assertFalse(node2.isThis());
536:       assertFalse(node2.isFor());
537:       assertFalse(node2.isSetterDef());
538:       assertEquals((-1), node2.getLineno());
539:       assertTrue(node2.isTypeOf());
540:       assertFalse(node2.isNE());
541:       assertFalse(node2.isIf());
542:       assertSame(node0, node2);
543:       assertSame(node2, node0);
544:       
545:       node0.setSourceFileForTesting("=");
546:       assertEquals(57, Node.REFLECTED_OBJECT);
547:       assertEquals(52, Node.LENGTH);
548:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
549:       assertEquals(54, Node.SLASH_V);
550:       assertEquals(50, Node.FREE_CALL);
551:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
552:       assertEquals(48, Node.DIRECTIVES);
553:       assertEquals(40, Node.ORIGINALNAME_PROP);
554:       assertEquals(49, Node.DIRECT_EVAL);
555:       assertEquals(55, Node.INFERRED_FUNCTION);
556:       assertEquals(2, Node.POST_FLAG);
557:       assertEquals(30, Node.VAR_ARGS_NAME);
558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
559:       assertEquals(57, Node.LAST_PROP);
560:       assertEquals(47, Node.IS_DISPATCHER);
561:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
562:       assertEquals(29, Node.JSDOC_INFO_PROP);
563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
564:       assertEquals(8, Node.FLAG_NO_THROWS);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(53, Node.INPUT_ID);
567:       assertEquals(39, Node.EMPTY_BLOCK);
568:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
569:       assertEquals(36, Node.QUOTED_PROP);
570:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
571:       assertEquals(43, Node.IS_CONSTANT_NAME);
572:       assertEquals(56, Node.CHANGE_TIME);
573:       assertEquals(37, Node.OPT_ARG_NAME);
574:       assertEquals(46, Node.IS_NAMESPACE);
575:       assertEquals(12, Node.COLUMN_BITS);
576:       assertEquals(32, Node.INCRDECR_PROP);
577:       assertEquals(4095, Node.COLUMN_MASK);
578:       assertEquals(51, Node.STATIC_SOURCE_FILE);
579:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
580:       assertEquals(1, Node.DECR_FLAG);
581:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
582:       assertFalse(node0.equals((Object)node1));
583:       assertFalse(node0.isWith());
584:       assertFalse(node0.isObjectLit());
585:       assertFalse(node0.isNot());
586:       assertFalse(node0.isScript());
587:       assertFalse(node0.isExprResult());
588:       assertFalse(node0.isInstanceOf());
589:       assertFalse(node0.isGetProp());
590:       assertFalse(node0.isComma());
591:       assertFalse(node0.hasOneChild());
592:       assertFalse(node0.isThis());
593:       assertFalse(node0.isGetElem());
594:       assertFalse(node0.isAssign());
595:       assertFalse(node0.isDec());
596:       assertFalse(node0.isBreak());
597:       assertEquals((-1), node0.getLineno());
598:       assertFalse(node0.isOr());
599:       assertFalse(node0.isCase());
600:       assertFalse(node0.isDo());
601:       assertFalse(node0.hasMoreThanOneChild());
602:       assertFalse(node0.isAdd());
603:       assertFalse(node0.isNew());
604:       assertFalse(node0.isBlock());
605:       assertFalse(node0.isLabel());
606:       assertFalse(node0.isAssignAdd());
607:       assertFalse(node0.isHook());
608:       assertFalse(node0.isVar());
609:       assertFalse(node0.isGetterDef());
610:       assertFalse(node0.isLabelName());
611:       assertFalse(node0.isArrayLit());
612:       assertFalse(node0.isNumber());
613:       assertEquals((-1), node0.getCharno());
614:       assertFalse(node0.isSwitch());
615:       assertFalse(node0.isParamList());
616:       assertFalse(node0.isStringKey());
617:       assertFalse(node0.isRegExp());
618:       assertFalse(node0.isCatch());
619:       assertFalse(node0.isFunction());
620:       assertFalse(node0.isTry());
621:       assertEquals(0, node0.getChildCount());
622:       assertFalse(node0.isDefaultCase());
623:       assertFalse(node0.isFor());
624:       assertFalse(node0.isName());
625:       assertFalse(node0.isDelProp());
626:       assertFalse(node0.isSetterDef());
627:       assertFalse(node0.isCall());
628:       assertFalse(node0.isEmpty());
629:       assertTrue(node0.isTypeOf());
630:       assertFalse(node0.isVoid());
631:       assertFalse(node0.isNull());
632:       assertFalse(node0.isIf());
633:       assertFalse(node0.isTrue());
634:       assertFalse(node0.isNE());
635:       assertFalse(node0.isIn());
636:       assertFalse(node0.isInc());
637:       assertFalse(node0.isString());
638:       assertFalse(node0.isContinue());
639:       assertFalse(node0.hasChildren());
640:       assertFalse(node0.isWhile());
641:       assertFalse(node0.isReturn());
642:       assertFalse(node0.isThrow());
643:       assertFalse(node0.isFalse());
644:       assertFalse(node0.isCast());
645:       assertEquals(32, node0.getType());
646:       assertFalse(node0.isDebugger());
647:       assertEquals((-1), node0.getSourcePosition());
648:       assertFalse(node0.isAnd());
649:       assertSame(node0, node2);
650:       
651:       Node node3 = Node.newString(57, "CharMatcher.JAVA_LETTER_OR_DIGIT");
652:       assertEquals(53, Node.INPUT_ID);
653:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
654:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
655:       assertEquals(56, Node.CHANGE_TIME);
656:       assertEquals(36, Node.QUOTED_PROP);
657:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
658:       assertEquals(37, Node.OPT_ARG_NAME);
659:       assertEquals(43, Node.IS_CONSTANT_NAME);
660:       assertEquals(32, Node.INCRDECR_PROP);
661:       assertEquals(46, Node.IS_NAMESPACE);
662:       assertEquals(51, Node.STATIC_SOURCE_FILE);
663:       assertEquals(12, Node.COLUMN_BITS);
664:       assertEquals(4095, Node.COLUMN_MASK);
665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
666:       assertEquals(1, Node.DECR_FLAG);
667:       assertEquals(57, Node.REFLECTED_OBJECT);
668:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
669:       assertEquals(40, Node.ORIGINALNAME_PROP);
670:       assertEquals(50, Node.FREE_CALL);
671:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
672:       assertEquals(52, Node.LENGTH);
673:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
674:       assertEquals(54, Node.SLASH_V);
675:       assertEquals(48, Node.DIRECTIVES);
676:       assertEquals(49, Node.DIRECT_EVAL);
677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
678:       assertEquals(55, Node.INFERRED_FUNCTION);
679:       assertEquals(2, Node.POST_FLAG);
680:       assertEquals(8, Node.FLAG_NO_THROWS);
681:       assertEquals(30, Node.VAR_ARGS_NAME);
682:       assertEquals(29, Node.JSDOC_INFO_PROP);
683:       assertEquals(15, Node.NO_SIDE_EFFECTS);
684:       assertEquals(39, Node.EMPTY_BLOCK);
685:       assertEquals(47, Node.IS_DISPATCHER);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(57, Node.LAST_PROP);
688:       assertNotNull(node3);
689:       assertFalse(node3.equals((Object)node2));
690:       assertFalse(node3.equals((Object)node1));
691:       assertFalse(node3.equals((Object)node0));
692:       assertFalse(node3.hasMoreThanOneChild());
693:       assertFalse(node3.isWhile());
694:       assertFalse(node3.isContinue());
695:       assertFalse(node3.isDo());
696:       assertEquals((-1), node3.getLineno());
697:       assertFalse(node3.isBlock());
698:       assertFalse(node3.isAssignAdd());
699:       assertFalse(node3.isDec());
700:       assertFalse(node3.hasChildren());
701:       assertFalse(node3.isVar());
702:       assertFalse(node3.isTypeOf());
703:       assertFalse(node3.isReturn());
704:       assertFalse(node3.isAssign());
705:       assertFalse(node3.isLabel());
706:       assertFalse(node3.isStringKey());
707:       assertFalse(node3.isCast());
708:       assertFalse(node3.hasOneChild());
709:       assertFalse(node3.isLabelName());
710:       assertFalse(node3.isParamList());
711:       assertFalse(node3.isNumber());
712:       assertFalse(node3.isNot());
713:       assertEquals((-1), node3.getSourcePosition());
714:       assertFalse(node3.isWith());
715:       assertFalse(node3.isCatch());
716:       assertFalse(node3.isAnd());
717:       assertFalse(node3.isInstanceOf());
718:       assertFalse(node3.isScript());
719:       assertFalse(node3.isTry());
720:       assertFalse(node3.isFunction());
721:       assertFalse(node3.isRegExp());
722:       assertFalse(node3.isThis());
723:       assertFalse(node3.isThrow());
724:       assertFalse(node3.isIf());
725:       assertFalse(node3.isSetterDef());
726:       assertFalse(node3.isInc());
727:       assertFalse(node3.isNE());
728:       assertFalse(node3.isIn());
729:       assertFalse(node3.isString());
730:       assertFalse(node3.isCase());
731:       assertFalse(node3.isHook());
732:       assertEquals(57, node3.getType());
733:       assertFalse(node3.isFalse());
734:       assertFalse(node3.isFor());
735:       assertFalse(node3.isArrayLit());
736:       assertFalse(node3.isGetProp());
737:       assertFalse(node3.isSwitch());
738:       assertFalse(node3.isGetterDef());
739:       assertEquals((-1), node3.getCharno());
740:       assertFalse(node3.isDebugger());
741:       assertFalse(node3.isObjectLit());
742:       assertFalse(node3.isDefaultCase());
743:       assertFalse(node3.isExprResult());
744:       assertEquals(0, node3.getChildCount());
745:       assertFalse(node3.isComma());
746:       assertFalse(node3.isGetElem());
747:       assertFalse(node3.isEmpty());
748:       assertFalse(node3.isCall());
749:       assertFalse(node3.isName());
750:       assertFalse(node3.isBreak());
751:       assertFalse(node3.isDelProp());
752:       assertFalse(node3.isNew());
753:       assertFalse(node3.isAdd());
754:       assertFalse(node3.isTrue());
755:       assertFalse(node3.isVoid());
756:       assertFalse(node3.isNull());
757:       assertFalse(node3.isOr());
758:       assertNotSame(node3, node1);
759:       
760:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
761:       assertEquals(57, Node.REFLECTED_OBJECT);
762:       assertEquals(52, Node.LENGTH);
763:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
764:       assertEquals(54, Node.SLASH_V);
765:       assertEquals(50, Node.FREE_CALL);
766:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
767:       assertEquals(48, Node.DIRECTIVES);
768:       assertEquals(40, Node.ORIGINALNAME_PROP);
769:       assertEquals(49, Node.DIRECT_EVAL);
770:       assertEquals(55, Node.INFERRED_FUNCTION);
771:       assertEquals(2, Node.POST_FLAG);
772:       assertEquals(30, Node.VAR_ARGS_NAME);
773:       assertEquals(15, Node.NO_SIDE_EFFECTS);
774:       assertEquals(57, Node.LAST_PROP);
775:       assertEquals(47, Node.IS_DISPATCHER);
776:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
777:       assertEquals(29, Node.JSDOC_INFO_PROP);
778:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
779:       assertEquals(8, Node.FLAG_NO_THROWS);
780:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
781:       assertEquals(53, Node.INPUT_ID);
782:       assertEquals(39, Node.EMPTY_BLOCK);
783:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
784:       assertEquals(36, Node.QUOTED_PROP);
785:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
786:       assertEquals(43, Node.IS_CONSTANT_NAME);
787:       assertEquals(56, Node.CHANGE_TIME);
788:       assertEquals(37, Node.OPT_ARG_NAME);
789:       assertEquals(46, Node.IS_NAMESPACE);
790:       assertEquals(12, Node.COLUMN_BITS);
791:       assertEquals(32, Node.INCRDECR_PROP);
792:       assertEquals(4095, Node.COLUMN_MASK);
793:       assertEquals(51, Node.STATIC_SOURCE_FILE);
794:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
795:       assertEquals(1, Node.DECR_FLAG);
796:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
797:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
798:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
799:       assertEquals(29, Node.JSDOC_INFO_PROP);
800:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
801:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
802:       assertEquals(43, Node.IS_CONSTANT_NAME);
803:       assertEquals(53, Node.INPUT_ID);
804:       assertEquals(56, Node.CHANGE_TIME);
805:       assertEquals(46, Node.IS_NAMESPACE);
806:       assertEquals(51, Node.STATIC_SOURCE_FILE);
807:       assertEquals(36, Node.QUOTED_PROP);
808:       assertEquals(12, Node.COLUMN_BITS);
809:       assertEquals(4095, Node.COLUMN_MASK);
810:       assertEquals(32, Node.INCRDECR_PROP);
811:       assertEquals(48, Node.DIRECTIVES);
812:       assertEquals(49, Node.DIRECT_EVAL);
813:       assertEquals(1, Node.DECR_FLAG);
814:       assertEquals(37, Node.OPT_ARG_NAME);
815:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
816:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
817:       assertEquals(40, Node.ORIGINALNAME_PROP);
818:       assertEquals(57, Node.REFLECTED_OBJECT);
819:       assertEquals(8, Node.FLAG_NO_THROWS);
820:       assertEquals(39, Node.EMPTY_BLOCK);
821:       assertEquals(54, Node.SLASH_V);
822:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
823:       assertEquals(52, Node.LENGTH);
824:       assertEquals(50, Node.FREE_CALL);
825:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
826:       assertEquals(55, Node.INFERRED_FUNCTION);
827:       assertEquals(15, Node.NO_SIDE_EFFECTS);
828:       assertEquals(57, Node.LAST_PROP);
829:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
830:       assertEquals(47, Node.IS_DISPATCHER);
831:       assertEquals(2, Node.POST_FLAG);
832:       assertEquals(30, Node.VAR_ARGS_NAME);
833:       assertNotNull(node_NodeMismatch0);
834:       assertFalse(node0.equals((Object)node3));
835:       assertFalse(node0.equals((Object)node1));
836:       assertFalse(node1.equals((Object)node3));
837:       assertFalse(node1.equals((Object)node2));
838:       assertFalse(node1.equals((Object)node0));
839:       assertFalse(node0.isWith());
840:       assertFalse(node0.isObjectLit());
841:       assertFalse(node0.isNot());
842:       assertFalse(node0.isScript());
843:       assertFalse(node0.isExprResult());
844:       assertFalse(node0.isInstanceOf());
845:       assertFalse(node0.isGetProp());
846:       assertFalse(node0.isComma());
847:       assertFalse(node0.hasOneChild());
848:       assertFalse(node0.isThis());
849:       assertFalse(node0.isGetElem());
850:       assertFalse(node0.isAssign());
851:       assertFalse(node0.isDec());
852:       assertFalse(node0.isBreak());
853:       assertEquals((-1), node0.getLineno());
854:       assertFalse(node0.isOr());
855:       assertFalse(node0.isCase());
856:       assertFalse(node0.isDo());
857:       assertFalse(node0.hasMoreThanOneChild());
858:       assertFalse(node0.isAdd());
859:       assertFalse(node0.isNew());
860:       assertFalse(node0.isBlock());
861:       assertFalse(node0.isLabel());
862:       assertFalse(node0.isAssignAdd());
863:       assertFalse(node0.isHook());
864:       assertFalse(node0.isVar());
865:       assertFalse(node0.isGetterDef());
866:       assertFalse(node0.isLabelName());
867:       assertFalse(node0.isArrayLit());
868:       assertFalse(node0.isNumber());
869:       assertEquals((-1), node0.getCharno());
870:       assertFalse(node0.isSwitch());
871:       assertFalse(node0.isParamList());
872:       assertFalse(node0.isStringKey());
873:       assertFalse(node0.isRegExp());
874:       assertFalse(node0.isCatch());
875:       assertFalse(node0.isFunction());
876:       assertFalse(node0.isTry());
877:       assertEquals(0, node0.getChildCount());
878:       assertFalse(node0.isDefaultCase());
879:       assertFalse(node0.isFor());
880:       assertFalse(node0.isName());
881:       assertFalse(node0.isDelProp());
882:       assertFalse(node0.isSetterDef());
883:       assertFalse(node0.isCall());
884:       assertFalse(node0.isEmpty());
885:       assertTrue(node0.isTypeOf());
886:       assertFalse(node0.isVoid());
887:       assertFalse(node0.isNull());
888:       assertFalse(node0.isIf());
889:       assertFalse(node0.isTrue());
890:       assertFalse(node0.isNE());
891:       assertFalse(node0.isIn());
892:       assertFalse(node0.isInc());
893:       assertFalse(node0.isString());
894:       assertFalse(node0.isContinue());
895:       assertFalse(node0.hasChildren());
896:       assertFalse(node0.isWhile());
897:       assertFalse(node0.isReturn());
898:       assertFalse(node0.isThrow());
899:       assertFalse(node0.isFalse());
900:       assertFalse(node0.isCast());
901:       assertEquals(32, node0.getType());
902:       assertFalse(node0.isDebugger());
903:       assertEquals((-1), node0.getSourcePosition());
904:       assertFalse(node0.isAnd());
905:       assertFalse(node1.isWhile());
906:       assertFalse(node1.isDo());
907:       assertFalse(node1.isBlock());
908:       assertEquals((-1), node1.getLineno());
909:       assertFalse(node1.hasMoreThanOneChild());
910:       assertFalse(node1.isContinue());
911:       assertFalse(node1.isCall());
912:       assertFalse(node1.isNumber());
913:       assertFalse(node1.isDec());
914:       assertFalse(node1.hasChildren());
915:       assertEquals((-1), node1.getSourcePosition());
916:       assertFalse(node1.isLabelName());
917:       assertFalse(node1.isAssign());
918:       assertFalse(node1.isTypeOf());
919:       assertFalse(node1.isStringKey());
920:       assertFalse(node1.isParamList());
921:       assertFalse(node1.isReturn());
922:       assertFalse(node1.hasOneChild());
923:       assertTrue(node1.isString());
924:       assertFalse(node1.isScript());
925:       assertFalse(node1.isWith());
926:       assertFalse(node1.isNot());
927:       assertFalse(node1.isRegExp());
928:       assertFalse(node1.isFunction());
929:       assertFalse(node1.isDebugger());
930:       assertFalse(node1.isAnd());
931:       assertEquals(40, node1.getType());
932:       assertFalse(node1.isInstanceOf());
933:       assertFalse(node1.isCatch());
934:       assertFalse(node1.isCast());
935:       assertFalse(node1.isIf());
936:       assertFalse(node1.isThrow());
937:       assertFalse(node1.isNE());
938:       assertFalse(node1.isIn());
939:       assertFalse(node1.isSetterDef());
940:       assertFalse(node1.isInc());
941:       assertFalse(node1.isSwitch());
942:       assertEquals((-1), node1.getCharno());
943:       assertFalse(node1.isHook());
944:       assertFalse(node1.isFalse());
945:       assertFalse(node1.isComma());
946:       assertFalse(node1.isGetterDef());
947:       assertFalse(node1.isThis());
948:       assertFalse(node1.isFor());
949:       assertFalse(node1.isTry());
950:       assertFalse(node1.isObjectLit());
951:       assertFalse(node1.isGetProp());
952:       assertFalse(node1.isCase());
953:       assertFalse(node1.isDefaultCase());
954:       assertFalse(node1.isVoid());
955:       assertFalse(node1.isTrue());
956:       assertEquals(0, node1.getChildCount());
957:       assertFalse(node1.isArrayLit());
958:       assertFalse(node1.isExprResult());
959:       assertFalse(node1.isGetElem());
960:       assertFalse(node1.isBreak());
961:       assertFalse(node1.isDelProp());
962:       assertFalse(node1.isName());
963:       assertFalse(node1.isLabel());
964:       assertFalse(node1.isVar());
965:       assertFalse(node1.isNull());
966:       assertFalse(node1.isOr());
967:       assertFalse(node1.isAssignAdd());
968:       assertFalse(node1.isNew());
969:       assertFalse(node1.isEmpty());
970:       assertFalse(node1.isAdd());
971:       assertSame(node0, node2);
972:       assertNotSame(node1, node3);
973:       
974:       boolean boolean0 = node3.isSyntheticBlock();
975:       assertFalse(boolean0);
976:       assertEquals(53, Node.INPUT_ID);
977:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
978:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
979:       assertEquals(56, Node.CHANGE_TIME);
980:       assertEquals(36, Node.QUOTED_PROP);
981:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
982:       assertEquals(37, Node.OPT_ARG_NAME);
983:       assertEquals(43, Node.IS_CONSTANT_NAME);
984:       assertEquals(32, Node.INCRDECR_PROP);
985:       assertEquals(46, Node.IS_NAMESPACE);
986:       assertEquals(51, Node.STATIC_SOURCE_FILE);
987:       assertEquals(12, Node.COLUMN_BITS);
988:       assertEquals(4095, Node.COLUMN_MASK);
989:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
990:       assertEquals(1, Node.DECR_FLAG);
991:       assertEquals(57, Node.REFLECTED_OBJECT);
992:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
993:       assertEquals(40, Node.ORIGINALNAME_PROP);
994:       assertEquals(50, Node.FREE_CALL);
995:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
996:       assertEquals(52, Node.LENGTH);
997:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
998:       assertEquals(54, Node.SLASH_V);
999:       assertEquals(48, Node.DIRECTIVES);
1000:       assertEquals(49, Node.DIRECT_EVAL);
1001:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1002:       assertEquals(55, Node.INFERRED_FUNCTION);
1003:       assertEquals(2, Node.POST_FLAG);
1004:       assertEquals(8, Node.FLAG_NO_THROWS);
1005:       assertEquals(30, Node.VAR_ARGS_NAME);
1006:       assertEquals(29, Node.JSDOC_INFO_PROP);
1007:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1008:       assertEquals(39, Node.EMPTY_BLOCK);
1009:       assertEquals(47, Node.IS_DISPATCHER);
1010:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1011:       assertEquals(57, Node.LAST_PROP);
1012:       assertFalse(node3.equals((Object)node2));
1013:       assertFalse(node3.equals((Object)node1));
1014:       assertFalse(node3.equals((Object)node0));
1015:       assertFalse(node3.hasMoreThanOneChild());
1016:       assertFalse(node3.isWhile());
1017:       assertFalse(node3.isContinue());
1018:       assertFalse(node3.isDo());
1019:       assertEquals((-1), node3.getLineno());
1020:       assertFalse(node3.isBlock());
1021:       assertFalse(node3.isAssignAdd());
1022:       assertFalse(node3.isDec());
1023:       assertFalse(node3.hasChildren());
1024:       assertFalse(node3.isVar());
1025:       assertFalse(node3.isTypeOf());
1026:       assertFalse(node3.isReturn());
1027:       assertFalse(node3.isAssign());
1028:       assertFalse(node3.isLabel());
1029:       assertFalse(node3.isStringKey());
1030:       assertFalse(node3.isCast());
1031:       assertFalse(node3.hasOneChild());
1032:       assertFalse(node3.isLabelName());
1033:       assertFalse(node3.isParamList());
1034:       assertFalse(node3.isNumber());
1035:       assertFalse(node3.isNot());
1036:       assertEquals((-1), node3.getSourcePosition());
1037:       assertFalse(node3.isWith());
1038:       assertFalse(node3.isCatch());
1039:       assertFalse(node3.isAnd());
1040:       assertFalse(node3.isInstanceOf());
1041:       assertFalse(node3.isScript());
1042:       assertFalse(node3.isTry());
1043:       assertFalse(node3.isFunction());
1044:       assertFalse(node3.isRegExp());
1045:       assertFalse(node3.isThis());
1046:       assertFalse(node3.isThrow());
1047:       assertFalse(node3.isIf());
1048:       assertFalse(node3.isSetterDef());
1049:       assertFalse(node3.isInc());
1050:       assertFalse(node3.isNE());
1051:       assertFalse(node3.isIn());
1052:       assertFalse(node3.isString());
1053:       assertFalse(node3.isCase());
1054:       assertFalse(node3.isHook());
1055:       assertEquals(57, node3.getType());
1056:       assertFalse(node3.isFalse());
1057:       assertFalse(node3.isFor());
1058:       assertFalse(node3.isArrayLit());
1059:       assertFalse(node3.isGetProp());
1060:       assertFalse(node3.isSwitch());
1061:       assertFalse(node3.isGetterDef());
1062:       assertEquals((-1), node3.getCharno());
1063:       assertFalse(node3.isDebugger());
1064:       assertFalse(node3.isObjectLit());
1065:       assertFalse(node3.isDefaultCase());
1066:       assertFalse(node3.isExprResult());
1067:       assertEquals(0, node3.getChildCount());
1068:       assertFalse(node3.isComma());
1069:       assertFalse(node3.isGetElem());
1070:       assertFalse(node3.isEmpty());
1071:       assertFalse(node3.isCall());
1072:       assertFalse(node3.isName());
1073:       assertFalse(node3.isBreak());
1074:       assertFalse(node3.isDelProp());
1075:       assertFalse(node3.isNew());
1076:       assertFalse(node3.isAdd());
1077:       assertFalse(node3.isTrue());
1078:       assertFalse(node3.isVoid());
1079:       assertFalse(node3.isNull());
1080:       assertFalse(node3.isOr());
1081:       assertNotSame(node3, node1);
1082:       
1083:       boolean boolean1 = node_NodeMismatch0.equals((Object) null);
1084:       assertFalse(boolean1);
1085:       assertEquals(57, Node.REFLECTED_OBJECT);
1086:       assertEquals(52, Node.LENGTH);
1087:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1088:       assertEquals(54, Node.SLASH_V);
1089:       assertEquals(50, Node.FREE_CALL);
1090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1091:       assertEquals(48, Node.DIRECTIVES);
1092:       assertEquals(40, Node.ORIGINALNAME_PROP);
1093:       assertEquals(49, Node.DIRECT_EVAL);
1094:       assertEquals(55, Node.INFERRED_FUNCTION);
1095:       assertEquals(2, Node.POST_FLAG);
1096:       assertEquals(30, Node.VAR_ARGS_NAME);
1097:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1098:       assertEquals(57, Node.LAST_PROP);
1099:       assertEquals(47, Node.IS_DISPATCHER);
1100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1101:       assertEquals(29, Node.JSDOC_INFO_PROP);
1102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1103:       assertEquals(8, Node.FLAG_NO_THROWS);
1104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1105:       assertEquals(53, Node.INPUT_ID);
1106:       assertEquals(39, Node.EMPTY_BLOCK);
1107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1108:       assertEquals(36, Node.QUOTED_PROP);
1109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1110:       assertEquals(43, Node.IS_CONSTANT_NAME);
1111:       assertEquals(56, Node.CHANGE_TIME);
1112:       assertEquals(37, Node.OPT_ARG_NAME);
1113:       assertEquals(46, Node.IS_NAMESPACE);
1114:       assertEquals(12, Node.COLUMN_BITS);
1115:       assertEquals(32, Node.INCRDECR_PROP);
1116:       assertEquals(4095, Node.COLUMN_MASK);
1117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1119:       assertEquals(1, Node.DECR_FLAG);
1120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1122:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1123:       assertEquals(29, Node.JSDOC_INFO_PROP);
1124:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1126:       assertEquals(43, Node.IS_CONSTANT_NAME);
1127:       assertEquals(53, Node.INPUT_ID);
1128:       assertEquals(56, Node.CHANGE_TIME);
1129:       assertEquals(46, Node.IS_NAMESPACE);
1130:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1131:       assertEquals(36, Node.QUOTED_PROP);
1132:       assertEquals(12, Node.COLUMN_BITS);
1133:       assertEquals(4095, Node.COLUMN_MASK);
1134:       assertEquals(32, Node.INCRDECR_PROP);
1135:       assertEquals(48, Node.DIRECTIVES);
1136:       assertEquals(49, Node.DIRECT_EVAL);
1137:       assertEquals(1, Node.DECR_FLAG);
1138:       assertEquals(37, Node.OPT_ARG_NAME);
1139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1140:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1141:       assertEquals(40, Node.ORIGINALNAME_PROP);
1142:       assertEquals(57, Node.REFLECTED_OBJECT);
1143:       assertEquals(8, Node.FLAG_NO_THROWS);
1144:       assertEquals(39, Node.EMPTY_BLOCK);
1145:       assertEquals(54, Node.SLASH_V);
1146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1147:       assertEquals(52, Node.LENGTH);
1148:       assertEquals(50, Node.FREE_CALL);
1149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1150:       assertEquals(55, Node.INFERRED_FUNCTION);
1151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1152:       assertEquals(57, Node.LAST_PROP);
1153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1154:       assertEquals(47, Node.IS_DISPATCHER);
1155:       assertEquals(2, Node.POST_FLAG);
1156:       assertEquals(30, Node.VAR_ARGS_NAME);
1157:       assertFalse(node0.equals((Object)node3));
1158:       assertFalse(node0.equals((Object)node1));
1159:       assertFalse(node1.equals((Object)node3));
1160:       assertFalse(node1.equals((Object)node2));
1161:       assertFalse(node1.equals((Object)node0));
1162:       assertTrue(boolean1 == boolean0);
1163:       assertFalse(node0.isWith());
1164:       assertFalse(node0.isObjectLit());
1165:       assertFalse(node0.isNot());
1166:       assertFalse(node0.isScript());
1167:       assertFalse(node0.isExprResult());
1168:       assertFalse(node0.isInstanceOf());
1169:       assertFalse(node0.isGetProp());
1170:       assertFalse(node0.isComma());
1171:       assertFalse(node0.hasOneChild());
1172:       assertFalse(node0.isThis());
1173:       assertFalse(node0.isGetElem());
1174:       assertFalse(node0.isAssign());
1175:       assertFalse(node0.isDec());
1176:       assertFalse(node0.isBreak());
1177:       assertEquals((-1), node0.getLineno());
1178:       assertFalse(node0.isOr());
1179:       assertFalse(node0.isCase());
1180:       assertFalse(node0.isDo());
1181:       assertFalse(node0.hasMoreThanOneChild());
1182:       assertFalse(node0.isAdd());
1183:       assertFalse(node0.isNew());
1184:       assertFalse(node0.isBlock());
1185:       assertFalse(node0.isLabel());
1186:       assertFalse(node0.isAssignAdd());
1187:       assertFalse(node0.isHook());
1188:       assertFalse(node0.isVar());
1189:       assertFalse(node0.isGetterDef());
1190:       assertFalse(node0.isLabelName());
1191:       assertFalse(node0.isArrayLit());
1192:       assertFalse(node0.isNumber());
1193:       assertEquals((-1), node0.getCharno());
1194:       assertFalse(node0.isSwitch());
1195:       assertFalse(node0.isParamList());
1196:       assertFalse(node0.isStringKey());
1197:       assertFalse(node0.isRegExp());
1198:       assertFalse(node0.isCatch());
1199:       assertFalse(node0.isFunction());
1200:       assertFalse(node0.isTry());
1201:       assertEquals(0, node0.getChildCount());
1202:       assertFalse(node0.isDefaultCase());
1203:       assertFalse(node0.isFor());
1204:       assertFalse(node0.isName());
1205:       assertFalse(node0.isDelProp());
1206:       assertFalse(node0.isSetterDef());
1207:       assertFalse(node0.isCall());
1208:       assertFalse(node0.isEmpty());
1209:       assertTrue(node0.isTypeOf());
1210:       assertFalse(node0.isVoid());
1211:       assertFalse(node0.isNull());
1212:       assertFalse(node0.isIf());
1213:       assertFalse(node0.isTrue());
1214:       assertFalse(node0.isNE());
1215:       assertFalse(node0.isIn());
1216:       assertFalse(node0.isInc());
1217:       assertFalse(node0.isString());
1218:       assertFalse(node0.isContinue());
1219:       assertFalse(node0.hasChildren());
1220:       assertFalse(node0.isWhile());
1221:       assertFalse(node0.isReturn());
1222:       assertFalse(node0.isThrow());
1223:       assertFalse(node0.isFalse());
1224:       assertFalse(node0.isCast());
1225:       assertEquals(32, node0.getType());
1226:       assertFalse(node0.isDebugger());
1227:       assertEquals((-1), node0.getSourcePosition());
1228:       assertFalse(node0.isAnd());
1229:       assertFalse(node1.isWhile());
1230:       assertFalse(node1.isDo());
1231:       assertFalse(node1.isBlock());
1232:       assertEquals((-1), node1.getLineno());
1233:       assertFalse(node1.hasMoreThanOneChild());
1234:       assertFalse(node1.isContinue());
1235:       assertFalse(node1.isCall());
1236:       assertFalse(node1.isNumber());
1237:       assertFalse(node1.isDec());
1238:       assertFalse(node1.hasChildren());
1239:       assertEquals((-1), node1.getSourcePosition());
1240:       assertFalse(node1.isLabelName());
1241:       assertFalse(node1.isAssign());
1242:       assertFalse(node1.isTypeOf());
1243:       assertFalse(node1.isStringKey());
1244:       assertFalse(node1.isParamList());
1245:       assertFalse(node1.isReturn());
1246:       assertFalse(node1.hasOneChild());
1247:       assertTrue(node1.isString());
1248:       assertFalse(node1.isScript());
1249:       assertFalse(node1.isWith());
1250:       assertFalse(node1.isNot());
1251:       assertFalse(node1.isRegExp());
1252:       assertFalse(node1.isFunction());
1253:       assertFalse(node1.isDebugger());
1254:       assertFalse(node1.isAnd());
1255:       assertEquals(40, node1.getType());
1256:       assertFalse(node1.isInstanceOf());
1257:       assertFalse(node1.isCatch());
1258:       assertFalse(node1.isCast());
1259:       assertFalse(node1.isIf());
1260:       assertFalse(node1.isThrow());
1261:       assertFalse(node1.isNE());
1262:       assertFalse(node1.isIn());
1263:       assertFalse(node1.isSetterDef());
1264:       assertFalse(node1.isInc());
1265:       assertFalse(node1.isSwitch());
1266:       assertEquals((-1), node1.getCharno());
1267:       assertFalse(node1.isHook());
1268:       assertFalse(node1.isFalse());
1269:       assertFalse(node1.isComma());
1270:       assertFalse(node1.isGetterDef());
1271:       assertFalse(node1.isThis());
1272:       assertFalse(node1.isFor());
1273:       assertFalse(node1.isTry());
1274:       assertFalse(node1.isObjectLit());
1275:       assertFalse(node1.isGetProp());
1276:       assertFalse(node1.isCase());
1277:       assertFalse(node1.isDefaultCase());
1278:       assertFalse(node1.isVoid());
1279:       assertFalse(node1.isTrue());
1280:       assertEquals(0, node1.getChildCount());
1281:       assertFalse(node1.isArrayLit());
1282:       assertFalse(node1.isExprResult());
1283:       assertFalse(node1.isGetElem());
1284:       assertFalse(node1.isBreak());
1285:       assertFalse(node1.isDelProp());
1286:       assertFalse(node1.isName());
1287:       assertFalse(node1.isLabel());
1288:       assertFalse(node1.isVar());
1289:       assertFalse(node1.isNull());
1290:       assertFalse(node1.isOr());
1291:       assertFalse(node1.isAssignAdd());
1292:       assertFalse(node1.isNew());
1293:       assertFalse(node1.isEmpty());
1294:       assertFalse(node1.isAdd());
1295:       assertSame(node0, node2);
1296:       assertNotSame(node1, node3);
1297:       
1298:       Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
1299:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1301:       assertEquals(29, Node.JSDOC_INFO_PROP);
1302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1303:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1304:       assertEquals(43, Node.IS_CONSTANT_NAME);
1305:       assertEquals(53, Node.INPUT_ID);
1306:       assertEquals(56, Node.CHANGE_TIME);
1307:       assertEquals(46, Node.IS_NAMESPACE);
1308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1309:       assertEquals(36, Node.QUOTED_PROP);
1310:       assertEquals(12, Node.COLUMN_BITS);
1311:       assertEquals(4095, Node.COLUMN_MASK);
1312:       assertEquals(32, Node.INCRDECR_PROP);
1313:       assertEquals(48, Node.DIRECTIVES);
1314:       assertEquals(49, Node.DIRECT_EVAL);
1315:       assertEquals(1, Node.DECR_FLAG);
1316:       assertEquals(37, Node.OPT_ARG_NAME);
1317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1319:       assertEquals(40, Node.ORIGINALNAME_PROP);
1320:       assertEquals(57, Node.REFLECTED_OBJECT);
1321:       assertEquals(8, Node.FLAG_NO_THROWS);
1322:       assertEquals(39, Node.EMPTY_BLOCK);
1323:       assertEquals(54, Node.SLASH_V);
1324:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1325:       assertEquals(52, Node.LENGTH);
1326:       assertEquals(50, Node.FREE_CALL);
1327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1328:       assertEquals(55, Node.INFERRED_FUNCTION);
1329:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1330:       assertEquals(57, Node.LAST_PROP);
1331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1332:       assertEquals(47, Node.IS_DISPATCHER);
1333:       assertEquals(2, Node.POST_FLAG);
1334:       assertEquals(30, Node.VAR_ARGS_NAME);
1335:       assertEquals(53, Node.INPUT_ID);
1336:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1337:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1338:       assertEquals(56, Node.CHANGE_TIME);
1339:       assertEquals(36, Node.QUOTED_PROP);
1340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1341:       assertEquals(37, Node.OPT_ARG_NAME);
1342:       assertEquals(43, Node.IS_CONSTANT_NAME);
1343:       assertEquals(32, Node.INCRDECR_PROP);
1344:       assertEquals(46, Node.IS_NAMESPACE);
1345:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1346:       assertEquals(12, Node.COLUMN_BITS);
1347:       assertEquals(4095, Node.COLUMN_MASK);
1348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1349:       assertEquals(1, Node.DECR_FLAG);
1350:       assertEquals(57, Node.REFLECTED_OBJECT);
1351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1352:       assertEquals(40, Node.ORIGINALNAME_PROP);
1353:       assertEquals(50, Node.FREE_CALL);
1354:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1355:       assertEquals(52, Node.LENGTH);
1356:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1357:       assertEquals(54, Node.SLASH_V);
1358:       assertEquals(48, Node.DIRECTIVES);
1359:       assertEquals(49, Node.DIRECT_EVAL);
1360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1361:       assertEquals(55, Node.INFERRED_FUNCTION);
1362:       assertEquals(2, Node.POST_FLAG);
1363:       assertEquals(8, Node.FLAG_NO_THROWS);
1364:       assertEquals(30, Node.VAR_ARGS_NAME);
1365:       assertEquals(29, Node.JSDOC_INFO_PROP);
1366:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1367:       assertEquals(39, Node.EMPTY_BLOCK);
1368:       assertEquals(47, Node.IS_DISPATCHER);
1369:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1370:       assertEquals(57, Node.LAST_PROP);
1371:       assertEquals(12, Node.COLUMN_BITS);
1372:       assertEquals(46, Node.IS_NAMESPACE);
1373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1374:       assertEquals(57, Node.LAST_PROP);
1375:       assertEquals(49, Node.DIRECT_EVAL);
1376:       assertEquals(32, Node.INCRDECR_PROP);
1377:       assertEquals(1, Node.DECR_FLAG);
1378:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1379:       assertEquals(56, Node.CHANGE_TIME);
1380:       assertEquals(54, Node.SLASH_V);
1381:       assertEquals(52, Node.LENGTH);
1382:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1383:       assertEquals(40, Node.ORIGINALNAME_PROP);
1384:       assertEquals(29, Node.JSDOC_INFO_PROP);
1385:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1386:       assertEquals(47, Node.IS_DISPATCHER);
1387:       assertEquals(2, Node.POST_FLAG);
1388:       assertEquals(30, Node.VAR_ARGS_NAME);
1389:       assertEquals(4095, Node.COLUMN_MASK);
1390:       assertEquals(55, Node.INFERRED_FUNCTION);
1391:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1392:       assertEquals(48, Node.DIRECTIVES);
1393:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1394:       assertEquals(8, Node.FLAG_NO_THROWS);
1395:       assertEquals(39, Node.EMPTY_BLOCK);
1396:       assertEquals(43, Node.IS_CONSTANT_NAME);
1397:       assertEquals(53, Node.INPUT_ID);
1398:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1399:       assertEquals(36, Node.QUOTED_PROP);
1400:       assertEquals(50, Node.FREE_CALL);
1401:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1402:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1403:       assertEquals(57, Node.REFLECTED_OBJECT);
1404:       assertEquals(37, Node.OPT_ARG_NAME);
1405:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1407:       assertNotNull(node4);
1408:       assertFalse(node1.equals((Object)node3));
1409:       assertFalse(node1.equals((Object)node2));
1410:       assertFalse(node1.equals((Object)node0));
1411:       assertFalse(node3.equals((Object)node2));
1412:       assertFalse(node3.equals((Object)node1));
1413:       assertFalse(node3.equals((Object)node0));
1414:       assertFalse(node4.equals((Object)node3));
1415:       assertFalse(node4.equals((Object)node2));
1416:       assertFalse(node4.equals((Object)node0));
1417:       assertFalse(node1.isWhile());
1418:       assertFalse(node1.isDo());
1419:       assertFalse(node1.isBlock());
1420:       assertEquals((-1), node1.getLineno());
1421:       assertFalse(node1.hasMoreThanOneChild());
1422:       assertFalse(node1.isContinue());
1423:       assertFalse(node1.isCall());
1424:       assertFalse(node1.isNumber());
1425:       assertFalse(node1.isDec());
1426:       assertFalse(node1.hasChildren());
1427:       assertEquals((-1), node1.getSourcePosition());
1428:       assertFalse(node1.isLabelName());
1429:       assertFalse(node1.isAssign());
1430:       assertFalse(node1.isTypeOf());
1431:       assertFalse(node1.isStringKey());
1432:       assertFalse(node1.isParamList());
1433:       assertFalse(node1.isReturn());
1434:       assertFalse(node1.hasOneChild());
1435:       assertTrue(node1.isString());
1436:       assertFalse(node1.isScript());
1437:       assertFalse(node1.isWith());
1438:       assertFalse(node1.isNot());
1439:       assertFalse(node1.isRegExp());
1440:       assertFalse(node1.isFunction());
1441:       assertFalse(node1.isDebugger());
1442:       assertFalse(node1.isAnd());
1443:       assertEquals(40, node1.getType());
1444:       assertFalse(node1.isInstanceOf());
1445:       assertFalse(node1.isCatch());
1446:       assertFalse(node1.isCast());
1447:       assertFalse(node1.isIf());
1448:       assertFalse(node1.isThrow());
1449:       assertFalse(node1.isNE());
1450:       assertFalse(node1.isIn());
1451:       assertFalse(node1.isSetterDef());
1452:       assertFalse(node1.isInc());
1453:       assertFalse(node1.isSwitch());
1454:       assertEquals((-1), node1.getCharno());
1455:       assertFalse(node1.isHook());
1456:       assertFalse(node1.isFalse());
1457:       assertFalse(node1.isComma());
1458:       assertFalse(node1.isGetterDef());
1459:       assertFalse(node1.isThis());
1460:       assertFalse(node1.isFor());
1461:       assertFalse(node1.isTry());
1462:       assertFalse(node1.isObjectLit());
1463:       assertFalse(node1.isGetProp());
1464:       assertFalse(node1.isCase());
1465:       assertFalse(node1.isDefaultCase());
1466:       assertFalse(node1.isVoid());
1467:       assertFalse(node1.isTrue());
1468:       assertEquals(0, node1.getChildCount());
1469:       assertFalse(node1.isArrayLit());
1470:       assertFalse(node1.isExprResult());
1471:       assertFalse(node1.isGetElem());
1472:       assertFalse(node1.isBreak());
1473:       assertFalse(node1.isDelProp());
1474:       assertFalse(node1.isName());
1475:       assertFalse(node1.isLabel());
1476:       assertFalse(node1.isVar());
1477:       assertFalse(node1.isNull());
1478:       assertFalse(node1.isOr());
1479:       assertFalse(node1.isAssignAdd());
1480:       assertFalse(node1.isNew());
1481:       assertFalse(node1.isEmpty());
1482:       assertFalse(node1.isAdd());
1483:       assertFalse(node3.hasMoreThanOneChild());
1484:       assertFalse(node3.isWhile());
1485:       assertFalse(node3.isContinue());
1486:       assertFalse(node3.isDo());
1487:       assertEquals((-1), node3.getLineno());
1488:       assertFalse(node3.isBlock());
1489:       assertFalse(node3.isAssignAdd());
1490:       assertFalse(node3.isDec());
1491:       assertFalse(node3.hasChildren());
1492:       assertFalse(node3.isVar());
1493:       assertFalse(node3.isTypeOf());
1494:       assertFalse(node3.isReturn());
1495:       assertFalse(node3.isAssign());
1496:       assertFalse(node3.isLabel());
1497:       assertFalse(node3.isStringKey());
1498:       assertFalse(node3.isCast());
1499:       assertFalse(node3.hasOneChild());
1500:       assertFalse(node3.isLabelName());
1501:       assertFalse(node3.isParamList());
1502:       assertFalse(node3.isNumber());
1503:       assertFalse(node3.isNot());
1504:       assertEquals((-1), node3.getSourcePosition());
1505:       assertFalse(node3.isWith());
1506:       assertFalse(node3.isCatch());
1507:       assertFalse(node3.isAnd());
1508:       assertFalse(node3.isInstanceOf());
1509:       assertFalse(node3.isScript());
1510:       assertFalse(node3.isTry());
1511:       assertFalse(node3.isFunction());
1512:       assertFalse(node3.isRegExp());
1513:       assertFalse(node3.isThis());
1514:       assertFalse(node3.isThrow());
1515:       assertFalse(node3.isIf());
1516:       assertFalse(node3.isSetterDef());
1517:       assertFalse(node3.isInc());
1518:       assertFalse(node3.isNE());
1519:       assertFalse(node3.isIn());
1520:       assertFalse(node3.isString());
1521:       assertFalse(node3.isCase());
1522:       assertFalse(node3.isHook());
1523:       assertEquals(57, node3.getType());
1524:       assertFalse(node3.isFalse());
1525:       assertFalse(node3.isFor());
1526:       assertFalse(node3.isArrayLit());
1527:       assertFalse(node3.isGetProp());
1528:       assertFalse(node3.isSwitch());
1529:       assertFalse(node3.isGetterDef());
1530:       assertEquals((-1), node3.getCharno());
1531:       assertFalse(node3.isDebugger());
1532:       assertFalse(node3.isObjectLit());
1533:       assertFalse(node3.isDefaultCase());
1534:       assertFalse(node3.isExprResult());
1535:       assertEquals(0, node3.getChildCount());
1536:       assertFalse(node3.isComma());
1537:       assertFalse(node3.isGetElem());
1538:       assertFalse(node3.isEmpty());
1539:       assertFalse(node3.isCall());
1540:       assertFalse(node3.isName());
1541:       assertFalse(node3.isBreak());
1542:       assertFalse(node3.isDelProp());
1543:       assertFalse(node3.isNew());
1544:       assertFalse(node3.isAdd());
1545:       assertFalse(node3.isTrue());
1546:       assertFalse(node3.isVoid());
1547:       assertFalse(node3.isNull());
1548:       assertFalse(node3.isOr());
1549:       assertFalse(node4.isName());
1550:       assertFalse(node4.isStringKey());
1551:       assertFalse(node4.isParamList());
1552:       assertFalse(node4.isVar());
1553:       assertFalse(node4.isNull());
1554:       assertEquals(0, node4.getChildCount());
1555:       assertFalse(node4.isCatch());
1556:       assertFalse(node4.isCall());
1557:       assertFalse(node4.isDefaultCase());
1558:       assertFalse(node4.isDo());
1559:       assertFalse(node4.isFunction());
1560:       assertEquals(40, node4.getType());
1561:       assertFalse(node4.isTrue());
1562:       assertFalse(node4.isOr());
1563:       assertFalse(node4.isAssignAdd());
1564:       assertFalse(node4.isNew());
1565:       assertFalse(node4.isEmpty());
1566:       assertFalse(node4.isSetterDef());
1567:       assertFalse(node4.isAdd());
1568:       assertFalse(node4.isGetterDef());
1569:       assertFalse(node4.isIf());
1570:       assertFalse(node4.isLabelName());
1571:       assertFalse(node4.isNumber());
1572:       assertFalse(node4.isFor());
1573:       assertFalse(node4.isLabel());
1574:       assertFalse(node4.isNE());
1575:       assertEquals((-1), node4.getLineno());
1576:       assertFalse(node4.isArrayLit());
1577:       assertFalse(node4.hasMoreThanOneChild());
1578:       assertFalse(node4.isWith());
1579:       assertFalse(node4.isSwitch());
1580:       assertFalse(node4.isRegExp());
1581:       assertEquals((-1), node4.getCharno());
1582:       assertFalse(node4.isBlock());
1583:       assertFalse(node4.hasOneChild());
1584:       assertFalse(node4.isTry());
1585:       assertTrue(node4.isString());
1586:       assertFalse(node4.isCase());
1587:       assertFalse(node4.isScript());
1588:       assertFalse(node4.isBreak());
1589:       assertFalse(node4.isFalse());
1590:       assertFalse(node4.isThrow());
1591:       assertFalse(node4.isComma());
1592:       assertFalse(node4.isThis());
1593:       assertFalse(node4.isHook());
1594:       assertFalse(node4.isInstanceOf());
1595:       assertFalse(node4.isIn());
1596:       assertFalse(node4.isInc());
1597:       assertFalse(node4.hasChildren());
1598:       assertEquals((-1), node4.getSourcePosition());
1599:       assertFalse(node4.isDec());
1600:       assertFalse(node4.isAssign());
1601:       assertFalse(node4.isDelProp());
1602:       assertFalse(node4.isTypeOf());
1603:       assertFalse(node4.isReturn());
1604:       assertFalse(node4.isVoid());
1605:       assertFalse(node4.isContinue());
1606:       assertFalse(node4.isCast());
1607:       assertFalse(node4.isExprResult());
1608:       assertFalse(node4.isGetElem());
1609:       assertFalse(node4.isWhile());
1610:       assertFalse(node4.isNot());
1611:       assertFalse(node4.isAnd());
1612:       assertFalse(node4.isDebugger());
1613:       assertFalse(node4.isObjectLit());
1614:       assertFalse(node4.isGetProp());
1615:       assertNotSame(node1, node3);
1616:       assertSame(node1, node4);
1617:       assertNotSame(node3, node1);
1618:       assertNotSame(node3, node4);
1619:       assertNotSame(node4, node3);
1620:       assertSame(node4, node1);
1621:       
1622:       Node node5 = node4.getAncestor(1);
1623:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1624:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1625:       assertEquals(29, Node.JSDOC_INFO_PROP);
1626:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1627:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1628:       assertEquals(43, Node.IS_CONSTANT_NAME);
1629:       assertEquals(53, Node.INPUT_ID);
1630:       assertEquals(56, Node.CHANGE_TIME);
1631:       assertEquals(46, Node.IS_NAMESPACE);
1632:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1633:       assertEquals(36, Node.QUOTED_PROP);
1634:       assertEquals(12, Node.COLUMN_BITS);
1635:       assertEquals(4095, Node.COLUMN_MASK);
1636:       assertEquals(32, Node.INCRDECR_PROP);
1637:       assertEquals(48, Node.DIRECTIVES);
1638:       assertEquals(49, Node.DIRECT_EVAL);
1639:       assertEquals(1, Node.DECR_FLAG);
1640:       assertEquals(37, Node.OPT_ARG_NAME);
1641:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1643:       assertEquals(40, Node.ORIGINALNAME_PROP);
1644:       assertEquals(57, Node.REFLECTED_OBJECT);
1645:       assertEquals(8, Node.FLAG_NO_THROWS);
1646:       assertEquals(39, Node.EMPTY_BLOCK);
1647:       assertEquals(54, Node.SLASH_V);
1648:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1649:       assertEquals(52, Node.LENGTH);
1650:       assertEquals(50, Node.FREE_CALL);
1651:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1652:       assertEquals(55, Node.INFERRED_FUNCTION);
1653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1654:       assertEquals(57, Node.LAST_PROP);
1655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1656:       assertEquals(47, Node.IS_DISPATCHER);
1657:       assertEquals(2, Node.POST_FLAG);
1658:       assertEquals(30, Node.VAR_ARGS_NAME);
1659:       assertEquals(53, Node.INPUT_ID);
1660:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1661:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1662:       assertEquals(56, Node.CHANGE_TIME);
1663:       assertEquals(36, Node.QUOTED_PROP);
1664:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1665:       assertEquals(37, Node.OPT_ARG_NAME);
1666:       assertEquals(43, Node.IS_CONSTANT_NAME);
1667:       assertEquals(32, Node.INCRDECR_PROP);
1668:       assertEquals(46, Node.IS_NAMESPACE);
1669:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1670:       assertEquals(12, Node.COLUMN_BITS);
1671:       assertEquals(4095, Node.COLUMN_MASK);
1672:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1673:       assertEquals(1, Node.DECR_FLAG);
1674:       assertEquals(57, Node.REFLECTED_OBJECT);
1675:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1676:       assertEquals(40, Node.ORIGINALNAME_PROP);
1677:       assertEquals(50, Node.FREE_CALL);
1678:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1679:       assertEquals(52, Node.LENGTH);
1680:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1681:       assertEquals(54, Node.SLASH_V);
1682:       assertEquals(48, Node.DIRECTIVES);
1683:       assertEquals(49, Node.DIRECT_EVAL);
1684:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1685:       assertEquals(55, Node.INFERRED_FUNCTION);
1686:       assertEquals(2, Node.POST_FLAG);
1687:       assertEquals(8, Node.FLAG_NO_THROWS);
1688:       assertEquals(30, Node.VAR_ARGS_NAME);
1689:       assertEquals(29, Node.JSDOC_INFO_PROP);
1690:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1691:       assertEquals(39, Node.EMPTY_BLOCK);
1692:       assertEquals(47, Node.IS_DISPATCHER);
1693:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1694:       assertEquals(57, Node.LAST_PROP);
1695:       assertEquals(12, Node.COLUMN_BITS);
1696:       assertEquals(46, Node.IS_NAMESPACE);
1697:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1698:       assertEquals(57, Node.LAST_PROP);
1699:       assertEquals(49, Node.DIRECT_EVAL);
1700:       assertEquals(32, Node.INCRDECR_PROP);
1701:       assertEquals(1, Node.DECR_FLAG);
1702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1703:       assertEquals(56, Node.CHANGE_TIME);
1704:       assertEquals(54, Node.SLASH_V);
1705:       assertEquals(52, Node.LENGTH);
1706:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1707:       assertEquals(40, Node.ORIGINALNAME_PROP);
1708:       assertEquals(29, Node.JSDOC_INFO_PROP);
1709:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1710:       assertEquals(47, Node.IS_DISPATCHER);
1711:       assertEquals(2, Node.POST_FLAG);
1712:       assertEquals(30, Node.VAR_ARGS_NAME);
1713:       assertEquals(4095, Node.COLUMN_MASK);
1714:       assertEquals(55, Node.INFERRED_FUNCTION);
1715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1716:       assertEquals(48, Node.DIRECTIVES);
1717:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1718:       assertEquals(8, Node.FLAG_NO_THROWS);
1719:       assertEquals(39, Node.EMPTY_BLOCK);
1720:       assertEquals(43, Node.IS_CONSTANT_NAME);
1721:       assertEquals(53, Node.INPUT_ID);
1722:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1723:       assertEquals(36, Node.QUOTED_PROP);
1724:       assertEquals(50, Node.FREE_CALL);
1725:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1726:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1727:       assertEquals(57, Node.REFLECTED_OBJECT);
1728:       assertEquals(37, Node.OPT_ARG_NAME);
1729:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1730:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1731:       assertNull(node5);
1732:       assertFalse(node1.equals((Object)node3));
1733:       assertFalse(node1.equals((Object)node2));
1734:       assertFalse(node1.equals((Object)node0));
1735:       assertFalse(node3.equals((Object)node2));
1736:       assertFalse(node3.equals((Object)node1));
1737:       assertFalse(node3.equals((Object)node0));
1738:       assertFalse(node3.equals((Object)node4));
1739:       assertFalse(node4.equals((Object)node3));
1740:       assertFalse(node4.equals((Object)node2));
1741:       assertFalse(node4.equals((Object)node0));
1742:       assertFalse(node1.isWhile());
1743:       assertFalse(node1.isDo());
1744:       assertFalse(node1.isBlock());
1745:       assertEquals((-1), node1.getLineno());
1746:       assertFalse(node1.hasMoreThanOneChild());
1747:       assertFalse(node1.isContinue());
1748:       assertFalse(node1.isCall());
1749:       assertFalse(node1.isNumber());
1750:       assertFalse(node1.isDec());
1751:       assertFalse(node1.hasChildren());
1752:       assertEquals((-1), node1.getSourcePosition());
1753:       assertFalse(node1.isLabelName());
1754:       assertFalse(node1.isAssign());
1755:       assertFalse(node1.isTypeOf());
1756:       assertFalse(node1.isStringKey());
1757:       assertFalse(node1.isParamList());
1758:       assertFalse(node1.isReturn());
1759:       assertFalse(node1.hasOneChild());
1760:       assertTrue(node1.isString());
1761:       assertFalse(node1.isScript());
1762:       assertFalse(node1.isWith());
1763:       assertFalse(node1.isNot());
1764:       assertFalse(node1.isRegExp());
1765:       assertFalse(node1.isFunction());
1766:       assertFalse(node1.isDebugger());
1767:       assertFalse(node1.isAnd());
1768:       assertEquals(40, node1.getType());
1769:       assertFalse(node1.isInstanceOf());
1770:       assertFalse(node1.isCatch());
1771:       assertFalse(node1.isCast());
1772:       assertFalse(node1.isIf());
1773:       assertFalse(node1.isThrow());
1774:       assertFalse(node1.isNE());
1775:       assertFalse(node1.isIn());
1776:       assertFalse(node1.isSetterDef());
1777:       assertFalse(node1.isInc());
1778:       assertFalse(node1.isSwitch());
1779:       assertEquals((-1), node1.getCharno());
1780:       assertFalse(node1.isHook());
1781:       assertFalse(node1.isFalse());
1782:       assertFalse(node1.isComma());
1783:       assertFalse(node1.isGetterDef());
1784:       assertFalse(node1.isThis());
1785:       assertFalse(node1.isFor());
1786:       assertFalse(node1.isTry());
1787:       assertFalse(node1.isObjectLit());
1788:       assertFalse(node1.isGetProp());
1789:       assertFalse(node1.isCase());
1790:       assertFalse(node1.isDefaultCase());
1791:       assertFalse(node1.isVoid());
1792:       assertFalse(node1.isTrue());
1793:       assertEquals(0, node1.getChildCount());
1794:       assertFalse(node1.isArrayLit());
1795:       assertFalse(node1.isExprResult());
1796:       assertFalse(node1.isGetElem());
1797:       assertFalse(node1.isBreak());
1798:       assertFalse(node1.isDelProp());
1799:       assertFalse(node1.isName());
1800:       assertFalse(node1.isLabel());
1801:       assertFalse(node1.isVar());
1802:       assertFalse(node1.isNull());
1803:       assertFalse(node1.isOr());
1804:       assertFalse(node1.isAssignAdd());
1805:       assertFalse(node1.isNew());
1806:       assertFalse(node1.isEmpty());
1807:       assertFalse(node1.isAdd());
1808:       assertFalse(node3.hasMoreThanOneChild());
1809:       assertFalse(node3.isWhile());
1810:       assertFalse(node3.isContinue());
1811:       assertFalse(node3.isDo());
1812:       assertEquals((-1), node3.getLineno());
1813:       assertFalse(node3.isBlock());
1814:       assertFalse(node3.isAssignAdd());
1815:       assertFalse(node3.isDec());
1816:       assertFalse(node3.hasChildren());
1817:       assertFalse(node3.isVar());
1818:       assertFalse(node3.isTypeOf());
1819:       assertFalse(node3.isReturn());
1820:       assertFalse(node3.isAssign());
1821:       assertFalse(node3.isLabel());
1822:       assertFalse(node3.isStringKey());
1823:       assertFalse(node3.isCast());
1824:       assertFalse(node3.hasOneChild());
1825:       assertFalse(node3.isLabelName());
1826:       assertFalse(node3.isParamList());
1827:       assertFalse(node3.isNumber());
1828:       assertFalse(node3.isNot());
1829:       assertEquals((-1), node3.getSourcePosition());
1830:       assertFalse(node3.isWith());
1831:       assertFalse(node3.isCatch());
1832:       assertFalse(node3.isAnd());
1833:       assertFalse(node3.isInstanceOf());
1834:       assertFalse(node3.isScript());
1835:       assertFalse(node3.isTry());
1836:       assertFalse(node3.isFunction());
1837:       assertFalse(node3.isRegExp());
1838:       assertFalse(node3.isThis());
1839:       assertFalse(node3.isThrow());
1840:       assertFalse(node3.isIf());
1841:       assertFalse(node3.isSetterDef());
1842:       assertFalse(node3.isInc());
1843:       assertFalse(node3.isNE());
1844:       assertFalse(node3.isIn());
1845:       assertFalse(node3.isString());
1846:       assertFalse(node3.isCase());
1847:       assertFalse(node3.isHook());
1848:       assertEquals(57, node3.getType());
1849:       assertFalse(node3.isFalse());
1850:       assertFalse(node3.isFor());
1851:       assertFalse(node3.isArrayLit());
1852:       assertFalse(node3.isGetProp());
1853:       assertFalse(node3.isSwitch());
1854:       assertFalse(node3.isGetterDef());
1855:       assertEquals((-1), node3.getCharno());
1856:       assertFalse(node3.isDebugger());
1857:       assertFalse(node3.isObjectLit());
1858:       assertFalse(node3.isDefaultCase());
1859:       assertFalse(node3.isExprResult());
1860:       assertEquals(0, node3.getChildCount());
1861:       assertFalse(node3.isComma());
1862:       assertFalse(node3.isGetElem());
1863:       assertFalse(node3.isEmpty());
1864:       assertFalse(node3.isCall());
1865:       assertFalse(node3.isName());
1866:       assertFalse(node3.isBreak());
1867:       assertFalse(node3.isDelProp());
1868:       assertFalse(node3.isNew());
1869:       assertFalse(node3.isAdd());
1870:       assertFalse(node3.isTrue());
1871:       assertFalse(node3.isVoid());
1872:       assertFalse(node3.isNull());
1873:       assertFalse(node3.isOr());
1874:       assertFalse(node4.isName());
1875:       assertFalse(node4.isStringKey());
1876:       assertFalse(node4.isParamList());
1877:       assertFalse(node4.isVar());
1878:       assertFalse(node4.isNull());
1879:       assertEquals(0, node4.getChildCount());
1880:       assertFalse(node4.isCatch());
1881:       assertFalse(node4.isCall());
1882:       assertFalse(node4.isDefaultCase());
1883:       assertFalse(node4.isDo());
1884:       assertFalse(node4.isFunction());
1885:       assertEquals(40, node4.getType());
1886:       assertFalse(node4.isTrue());
1887:       assertFalse(node4.isOr());
1888:       assertFalse(node4.isAssignAdd());
1889:       assertFalse(node4.isNew());
1890:       assertFalse(node4.isEmpty());
1891:       assertFalse(node4.isSetterDef());
1892:       assertFalse(node4.isAdd());
1893:       assertFalse(node4.isGetterDef());
1894:       assertFalse(node4.isIf());
1895:       assertFalse(node4.isLabelName());
1896:       assertFalse(node4.isNumber());
1897:       assertFalse(node4.isFor());
1898:       assertFalse(node4.isLabel());
1899:       assertFalse(node4.isNE());
1900:       assertEquals((-1), node4.getLineno());
1901:       assertFalse(node4.isArrayLit());
1902:       assertFalse(node4.hasMoreThanOneChild());
1903:       assertFalse(node4.isWith());
1904:       assertFalse(node4.isSwitch());
1905:       assertFalse(node4.isRegExp());
1906:       assertEquals((-1), node4.getCharno());
1907:       assertFalse(node4.isBlock());
1908:       assertFalse(node4.hasOneChild());
1909:       assertFalse(node4.isTry());
1910:       assertTrue(node4.isString());
1911:       assertFalse(node4.isCase());
1912:       assertFalse(node4.isScript());
1913:       assertFalse(node4.isBreak());
1914:       assertFalse(node4.isFalse());
1915:       assertFalse(node4.isThrow());
1916:       assertFalse(node4.isComma());
1917:       assertFalse(node4.isThis());
1918:       assertFalse(node4.isHook());
1919:       assertFalse(node4.isInstanceOf());
1920:       assertFalse(node4.isIn());
1921:       assertFalse(node4.isInc());
1922:       assertFalse(node4.hasChildren());
1923:       assertEquals((-1), node4.getSourcePosition());
1924:       assertFalse(node4.isDec());
1925:       assertFalse(node4.isAssign());
1926:       assertFalse(node4.isDelProp());
1927:       assertFalse(node4.isTypeOf());
1928:       assertFalse(node4.isReturn());
1929:       assertFalse(node4.isVoid());
1930:       assertFalse(node4.isContinue());
1931:       assertFalse(node4.isCast());
1932:       assertFalse(node4.isExprResult());
1933:       assertFalse(node4.isGetElem());
1934:       assertFalse(node4.isWhile());
1935:       assertFalse(node4.isNot());
1936:       assertFalse(node4.isAnd());
1937:       assertFalse(node4.isDebugger());
1938:       assertFalse(node4.isObjectLit());
1939:       assertFalse(node4.isGetProp());
1940:       assertNotSame(node1, node3);
1941:       assertSame(node1, node4);
1942:       assertNotSame(node3, node1);
1943:       assertNotSame(node3, node4);
1944:       assertNotSame(node4, node3);
1945:       assertSame(node4, node1);
1946:       
1947:       Iterable<Node> iterable0 = node3.children();
1948:       assertFalse(iterable0.contains(node2));
1949:       assertEquals(53, Node.INPUT_ID);
1950:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1951:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1952:       assertEquals(56, Node.CHANGE_TIME);
1953:       assertEquals(36, Node.QUOTED_PROP);
1954:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1955:       assertEquals(37, Node.OPT_ARG_NAME);
1956:       assertEquals(43, Node.IS_CONSTANT_NAME);
1957:       assertEquals(32, Node.INCRDECR_PROP);
1958:       assertEquals(46, Node.IS_NAMESPACE);
1959:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1960:       assertEquals(12, Node.COLUMN_BITS);
1961:       assertEquals(4095, Node.COLUMN_MASK);
1962:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1963:       assertEquals(1, Node.DECR_FLAG);
1964:       assertEquals(57, Node.REFLECTED_OBJECT);
1965:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1966:       assertEquals(40, Node.ORIGINALNAME_PROP);
1967:       assertEquals(50, Node.FREE_CALL);
1968:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1969:       assertEquals(52, Node.LENGTH);
1970:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1971:       assertEquals(54, Node.SLASH_V);
1972:       assertEquals(48, Node.DIRECTIVES);
1973:       assertEquals(49, Node.DIRECT_EVAL);
1974:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1975:       assertEquals(55, Node.INFERRED_FUNCTION);
1976:       assertEquals(2, Node.POST_FLAG);
1977:       assertEquals(8, Node.FLAG_NO_THROWS);
1978:       assertEquals(30, Node.VAR_ARGS_NAME);
1979:       assertEquals(29, Node.JSDOC_INFO_PROP);
1980:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1981:       assertEquals(39, Node.EMPTY_BLOCK);
1982:       assertEquals(47, Node.IS_DISPATCHER);
1983:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1984:       assertEquals(57, Node.LAST_PROP);
1985:       assertNotNull(iterable0);
1986:       assertFalse(node3.equals((Object)node2));
1987:       assertFalse(node3.equals((Object)node1));
1988:       assertFalse(node3.equals((Object)node0));
1989:       assertFalse(node3.equals((Object)node4));
1990:       assertFalse(node3.hasMoreThanOneChild());
1991:       assertFalse(node3.isWhile());
1992:       assertFalse(node3.isContinue());
1993:       assertFalse(node3.isDo());
1994:       assertEquals((-1), node3.getLineno());
1995:       assertFalse(node3.isBlock());
1996:       assertFalse(node3.isAssignAdd());
1997:       assertFalse(node3.isDec());
1998:       assertFalse(node3.hasChildren());
1999:       assertFalse(node3.isVar());
2000:       assertFalse(node3.isTypeOf());
2001:       assertFalse(node3.isReturn());
2002:       assertFalse(node3.isAssign());
2003:       assertFalse(node3.isLabel());
2004:       assertFalse(node3.isStringKey());
2005:       assertFalse(node3.isCast());
2006:       assertFalse(node3.hasOneChild());
2007:       assertFalse(node3.isLabelName());
2008:       assertFalse(node3.isParamList());
2009:       assertFalse(node3.isNumber());
2010:       assertFalse(node3.isNot());
2011:       assertEquals((-1), node3.getSourcePosition());
2012:       assertFalse(node3.isWith());
2013:       assertFalse(node3.isCatch());
2014:       assertFalse(node3.isAnd());
2015:       assertFalse(node3.isInstanceOf());
2016:       assertFalse(node3.isScript());
2017:       assertFalse(node3.isTry());
2018:       assertFalse(node3.isFunction());
2019:       assertFalse(node3.isRegExp());
2020:       assertFalse(node3.isThis());
2021:       assertFalse(node3.isThrow());
2022:       assertFalse(node3.isIf());
2023:       assertFalse(node3.isSetterDef());
2024:       assertFalse(node3.isInc());
2025:       assertFalse(node3.isNE());
2026:       assertFalse(node3.isIn());
2027:       assertFalse(node3.isString());
2028:       assertFalse(node3.isCase());
2029:       assertFalse(node3.isHook());
2030:       assertEquals(57, node3.getType());
2031:       assertFalse(node3.isFalse());
2032:       assertFalse(node3.isFor());
2033:       assertFalse(node3.isArrayLit());
2034:       assertFalse(node3.isGetProp());
2035:       assertFalse(node3.isSwitch());
2036:       assertFalse(node3.isGetterDef());
2037:       assertEquals((-1), node3.getCharno());
2038:       assertFalse(node3.isDebugger());
2039:       assertFalse(node3.isObjectLit());
2040:       assertFalse(node3.isDefaultCase());
2041:       assertFalse(node3.isExprResult());
2042:       assertEquals(0, node3.getChildCount());
2043:       assertFalse(node3.isComma());
2044:       assertFalse(node3.isGetElem());
2045:       assertFalse(node3.isEmpty());
2046:       assertFalse(node3.isCall());
2047:       assertFalse(node3.isName());
2048:       assertFalse(node3.isBreak());
2049:       assertFalse(node3.isDelProp());
2050:       assertFalse(node3.isNew());
2051:       assertFalse(node3.isAdd());
2052:       assertFalse(node3.isTrue());
2053:       assertFalse(node3.isVoid());
2054:       assertFalse(node3.isNull());
2055:       assertFalse(node3.isOr());
2056:       assertNotSame(node3, node1);
2057:       assertNotSame(node3, node4);
2058:       
2059:       boolean boolean2 = node2.isVoid();
2060:       assertFalse(boolean2);
2061:       assertEquals(57, Node.REFLECTED_OBJECT);
2062:       assertEquals(52, Node.LENGTH);
2063:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2064:       assertEquals(54, Node.SLASH_V);
2065:       assertEquals(50, Node.FREE_CALL);
2066:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2067:       assertEquals(48, Node.DIRECTIVES);
2068:       assertEquals(40, Node.ORIGINALNAME_PROP);
2069:       assertEquals(49, Node.DIRECT_EVAL);
2070:       assertEquals(55, Node.INFERRED_FUNCTION);
2071:       assertEquals(2, Node.POST_FLAG);
2072:       assertEquals(30, Node.VAR_ARGS_NAME);
2073:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2074:       assertEquals(57, Node.LAST_PROP);
2075:       assertEquals(47, Node.IS_DISPATCHER);
2076:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2077:       assertEquals(29, Node.JSDOC_INFO_PROP);
2078:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2079:       assertEquals(8, Node.FLAG_NO_THROWS);
2080:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2081:       assertEquals(53, Node.INPUT_ID);
2082:       assertEquals(39, Node.EMPTY_BLOCK);
2083:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2084:       assertEquals(36, Node.QUOTED_PROP);
2085:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2086:       assertEquals(43, Node.IS_CONSTANT_NAME);
2087:       assertEquals(56, Node.CHANGE_TIME);
2088:       assertEquals(37, Node.OPT_ARG_NAME);
2089:       assertEquals(46, Node.IS_NAMESPACE);
2090:       assertEquals(12, Node.COLUMN_BITS);
2091:       assertEquals(32, Node.INCRDECR_PROP);
2092:       assertEquals(4095, Node.COLUMN_MASK);
2093:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2094:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2095:       assertEquals(1, Node.DECR_FLAG);
2096:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2097:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2098:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2099:       assertEquals(29, Node.JSDOC_INFO_PROP);
2100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2102:       assertEquals(43, Node.IS_CONSTANT_NAME);
2103:       assertEquals(53, Node.INPUT_ID);
2104:       assertEquals(56, Node.CHANGE_TIME);
2105:       assertEquals(46, Node.IS_NAMESPACE);
2106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2107:       assertEquals(36, Node.QUOTED_PROP);
2108:       assertEquals(12, Node.COLUMN_BITS);
2109:       assertEquals(4095, Node.COLUMN_MASK);
2110:       assertEquals(32, Node.INCRDECR_PROP);
2111:       assertEquals(48, Node.DIRECTIVES);
2112:       assertEquals(49, Node.DIRECT_EVAL);
2113:       assertEquals(1, Node.DECR_FLAG);
2114:       assertEquals(37, Node.OPT_ARG_NAME);
2115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2117:       assertEquals(40, Node.ORIGINALNAME_PROP);
2118:       assertEquals(57, Node.REFLECTED_OBJECT);
2119:       assertEquals(8, Node.FLAG_NO_THROWS);
2120:       assertEquals(39, Node.EMPTY_BLOCK);
2121:       assertEquals(54, Node.SLASH_V);
2122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2123:       assertEquals(52, Node.LENGTH);
2124:       assertEquals(50, Node.FREE_CALL);
2125:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2126:       assertEquals(55, Node.INFERRED_FUNCTION);
2127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2128:       assertEquals(57, Node.LAST_PROP);
2129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2130:       assertEquals(47, Node.IS_DISPATCHER);
2131:       assertEquals(2, Node.POST_FLAG);
2132:       assertEquals(30, Node.VAR_ARGS_NAME);
2133:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2134:       assertEquals(47, Node.IS_DISPATCHER);
2135:       assertEquals(43, Node.IS_CONSTANT_NAME);
2136:       assertEquals(56, Node.CHANGE_TIME);
2137:       assertEquals(2, Node.POST_FLAG);
2138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2139:       assertEquals(37, Node.OPT_ARG_NAME);
2140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2141:       assertEquals(12, Node.COLUMN_BITS);
2142:       assertEquals(46, Node.IS_NAMESPACE);
2143:       assertEquals(32, Node.INCRDECR_PROP);
2144:       assertEquals(4095, Node.COLUMN_MASK);
2145:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2146:       assertEquals(1, Node.DECR_FLAG);
2147:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2148:       assertEquals(57, Node.REFLECTED_OBJECT);
2149:       assertEquals(52, Node.LENGTH);
2150:       assertEquals(50, Node.FREE_CALL);
2151:       assertEquals(54, Node.SLASH_V);
2152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2153:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2154:       assertEquals(48, Node.DIRECTIVES);
2155:       assertEquals(49, Node.DIRECT_EVAL);
2156:       assertEquals(40, Node.ORIGINALNAME_PROP);
2157:       assertEquals(55, Node.INFERRED_FUNCTION);
2158:       assertEquals(30, Node.VAR_ARGS_NAME);
2159:       assertEquals(36, Node.QUOTED_PROP);
2160:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2161:       assertEquals(8, Node.FLAG_NO_THROWS);
2162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2163:       assertEquals(57, Node.LAST_PROP);
2164:       assertEquals(53, Node.INPUT_ID);
2165:       assertEquals(29, Node.JSDOC_INFO_PROP);
2166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2167:       assertEquals(39, Node.EMPTY_BLOCK);
2168:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2169:       assertFalse(node0.equals((Object)node4));
2170:       assertFalse(node0.equals((Object)node3));
2171:       assertFalse(node0.equals((Object)node1));
2172:       assertFalse(node1.equals((Object)node3));
2173:       assertFalse(node1.equals((Object)node2));
2174:       assertFalse(node1.equals((Object)node0));
2175:       assertFalse(node2.equals((Object)node1));
2176:       assertFalse(node2.equals((Object)node4));
2177:       assertFalse(node2.equals((Object)node3));
2178:       assertTrue(boolean2 == boolean1);
2179:       assertTrue(boolean2 == boolean0);
2180:       assertFalse(node0.isWith());
2181:       assertFalse(node0.isObjectLit());
2182:       assertFalse(node0.isNot());
2183:       assertFalse(node0.isScript());
2184:       assertFalse(node0.isExprResult());
2185:       assertFalse(node0.isInstanceOf());
2186:       assertFalse(node0.isGetProp());
2187:       assertFalse(node0.isComma());
2188:       assertFalse(node0.hasOneChild());
2189:       assertFalse(node0.isThis());
2190:       assertFalse(node0.isGetElem());
2191:       assertFalse(node0.isAssign());
2192:       assertFalse(node0.isDec());
2193:       assertFalse(node0.isBreak());
2194:       assertEquals((-1), node0.getLineno());
2195:       assertFalse(node0.isOr());
2196:       assertFalse(node0.isCase());
2197:       assertFalse(node0.isDo());
2198:       assertFalse(node0.hasMoreThanOneChild());
2199:       assertFalse(node0.isAdd());
2200:       assertFalse(node0.isNew());
2201:       assertFalse(node0.isBlock());
2202:       assertFalse(node0.isLabel());
2203:       assertFalse(node0.isAssignAdd());
2204:       assertFalse(node0.isHook());
2205:       assertFalse(node0.isVar());
2206:       assertFalse(node0.isGetterDef());
2207:       assertFalse(node0.isLabelName());
2208:       assertFalse(node0.isArrayLit());
2209:       assertFalse(node0.isNumber());
2210:       assertEquals((-1), node0.getCharno());
2211:       assertFalse(node0.isSwitch());
2212:       assertFalse(node0.isParamList());
2213:       assertFalse(node0.isStringKey());
2214:       assertFalse(node0.isRegExp());
2215:       assertFalse(node0.isCatch());
2216:       assertFalse(node0.isFunction());
2217:       assertFalse(node0.isTry());
2218:       assertEquals(0, node0.getChildCount());
2219:       assertFalse(node0.isDefaultCase());
2220:       assertFalse(node0.isFor());
2221:       assertFalse(node0.isName());
2222:       assertFalse(node0.isDelProp());
2223:       assertFalse(node0.isSetterDef());
2224:       assertFalse(node0.isCall());
2225:       assertFalse(node0.isEmpty());
2226:       assertTrue(node0.isTypeOf());
2227:       assertFalse(node0.isVoid());
2228:       assertFalse(node0.isNull());
2229:       assertFalse(node0.isIf());
2230:       assertFalse(node0.isTrue());
2231:       assertFalse(node0.isNE());
2232:       assertFalse(node0.isIn());
2233:       assertFalse(node0.isInc());
2234:       assertFalse(node0.isString());
2235:       assertFalse(node0.isContinue());
2236:       assertFalse(node0.hasChildren());
2237:       assertFalse(node0.isWhile());
2238:       assertFalse(node0.isReturn());
2239:       assertFalse(node0.isThrow());
2240:       assertFalse(node0.isFalse());
2241:       assertFalse(node0.isCast());
2242:       assertEquals(32, node0.getType());
2243:       assertFalse(node0.isDebugger());
2244:       assertEquals((-1), node0.getSourcePosition());
2245:       assertFalse(node0.isAnd());
2246:       assertFalse(node1.isWhile());
2247:       assertFalse(node1.isDo());
2248:       assertFalse(node1.isBlock());
2249:       assertEquals((-1), node1.getLineno());
2250:       assertFalse(node1.hasMoreThanOneChild());
2251:       assertFalse(node1.isContinue());
2252:       assertFalse(node1.isCall());
2253:       assertFalse(node1.isNumber());
2254:       assertFalse(node1.isDec());
2255:       assertFalse(node1.hasChildren());
2256:       assertEquals((-1), node1.getSourcePosition());
2257:       assertFalse(node1.isLabelName());
2258:       assertFalse(node1.isAssign());
2259:       assertFalse(node1.isTypeOf());
2260:       assertFalse(node1.isStringKey());
2261:       assertFalse(node1.isParamList());
2262:       assertFalse(node1.isReturn());
2263:       assertFalse(node1.hasOneChild());
2264:       assertTrue(node1.isString());
2265:       assertFalse(node1.isScript());
2266:       assertFalse(node1.isWith());
2267:       assertFalse(node1.isNot());
2268:       assertFalse(node1.isRegExp());
2269:       assertFalse(node1.isFunction());
2270:       assertFalse(node1.isDebugger());
2271:       assertFalse(node1.isAnd());
2272:       assertEquals(40, node1.getType());
2273:       assertFalse(node1.isInstanceOf());
2274:       assertFalse(node1.isCatch());
2275:       assertFalse(node1.isCast());
2276:       assertFalse(node1.isIf());
2277:       assertFalse(node1.isThrow());
2278:       assertFalse(node1.isNE());
2279:       assertFalse(node1.isIn());
2280:       assertFalse(node1.isSetterDef());
2281:       assertFalse(node1.isInc());
2282:       assertFalse(node1.isSwitch());
2283:       assertEquals((-1), node1.getCharno());
2284:       assertFalse(node1.isHook());
2285:       assertFalse(node1.isFalse());
2286:       assertFalse(node1.isComma());
2287:       assertFalse(node1.isGetterDef());
2288:       assertFalse(node1.isThis());
2289:       assertFalse(node1.isFor());
2290:       assertFalse(node1.isTry());
2291:       assertFalse(node1.isObjectLit());
2292:       assertFalse(node1.isGetProp());
2293:       assertFalse(node1.isCase());
2294:       assertFalse(node1.isDefaultCase());
2295:       assertFalse(node1.isVoid());
2296:       assertFalse(node1.isTrue());
2297:       assertEquals(0, node1.getChildCount());
2298:       assertFalse(node1.isArrayLit());
2299:       assertFalse(node1.isExprResult());
2300:       assertFalse(node1.isGetElem());
2301:       assertFalse(node1.isBreak());
2302:       assertFalse(node1.isDelProp());
2303:       assertFalse(node1.isName());
2304:       assertFalse(node1.isLabel());
2305:       assertFalse(node1.isVar());
2306:       assertFalse(node1.isNull());
2307:       assertFalse(node1.isOr());
2308:       assertFalse(node1.isAssignAdd());
2309:       assertFalse(node1.isNew());
2310:       assertFalse(node1.isEmpty());
2311:       assertFalse(node1.isAdd());
2312:       assertFalse(node2.isCase());
2313:       assertFalse(node2.isInc());
2314:       assertFalse(node2.isIn());
2315:       assertFalse(node2.isString());
2316:       assertFalse(node2.isHook());
2317:       assertFalse(node2.isThrow());
2318:       assertFalse(node2.isFalse());
2319:       assertFalse(node2.isGetterDef());
2320:       assertEquals(32, node2.getType());
2321:       assertEquals((-1), node2.getCharno());
2322:       assertFalse(node2.isArrayLit());
2323:       assertFalse(node2.isDebugger());
2324:       assertFalse(node2.isSwitch());
2325:       assertFalse(node2.isAnd());
2326:       assertFalse(node2.isNot());
2327:       assertFalse(node2.isObjectLit());
2328:       assertFalse(node2.isExprResult());
2329:       assertFalse(node2.isGetProp());
2330:       assertEquals(0, node2.getChildCount());
2331:       assertFalse(node2.isComma());
2332:       assertFalse(node2.isDefaultCase());
2333:       assertFalse(node2.isEmpty());
2334:       assertFalse(node2.isAssign());
2335:       assertFalse(node2.isGetElem());
2336:       assertFalse(node2.isDelProp());
2337:       assertFalse(node2.isName());
2338:       assertFalse(node2.isBreak());
2339:       assertFalse(node2.isDec());
2340:       assertFalse(node2.hasChildren());
2341:       assertFalse(node2.isCall());
2342:       assertFalse(node2.isOr());
2343:       assertFalse(node2.isVoid());
2344:       assertFalse(node2.isNull());
2345:       assertFalse(node2.isTrue());
2346:       assertFalse(node2.isDo());
2347:       assertFalse(node2.hasMoreThanOneChild());
2348:       assertFalse(node2.isContinue());
2349:       assertFalse(node2.isLabel());
2350:       assertFalse(node2.isAssignAdd());
2351:       assertFalse(node2.isAdd());
2352:       assertFalse(node2.isBlock());
2353:       assertFalse(node2.isReturn());
2354:       assertFalse(node2.isNew());
2355:       assertFalse(node2.isVar());
2356:       assertFalse(node2.isWhile());
2357:       assertFalse(node2.isLabelName());
2358:       assertEquals((-1), node2.getSourcePosition());
2359:       assertFalse(node2.isCast());
2360:       assertFalse(node2.isNumber());
2361:       assertFalse(node2.isStringKey());
2362:       assertFalse(node2.isParamList());
2363:       assertFalse(node2.isWith());
2364:       assertFalse(node2.isScript());
2365:       assertFalse(node2.isCatch());
2366:       assertFalse(node2.isRegExp());
2367:       assertFalse(node2.isFunction());
2368:       assertFalse(node2.isInstanceOf());
2369:       assertFalse(node2.isTry());
2370:       assertFalse(node2.hasOneChild());
2371:       assertFalse(node2.isThis());
2372:       assertFalse(node2.isFor());
2373:       assertFalse(node2.isSetterDef());
2374:       assertEquals((-1), node2.getLineno());
2375:       assertTrue(node2.isTypeOf());
2376:       assertFalse(node2.isNE());
2377:       assertFalse(node2.isIf());
2378:       assertSame(node0, node2);
2379:       assertNotSame(node1, node3);
2380:       assertSame(node1, node4);
2381:       assertSame(node2, node0);
2382:   }
2383: }
RegularFileObject[/tmp/EvoSuite_280_1628158040908/com/google/javascript/rhino/Node_280_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:07:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_280_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_280_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_280_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Iterables",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.JSTypeExpression",
349:       "com.google.javascript.rhino.jstype.NamedType",
350:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.Platform",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator"
364:     );
365:   }
366: }

[MASTER] 10:07:21.579 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(32);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertTrue(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals(32, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());

Node node1 = Node.newString("(U#U(ml`@EOBDzfM]");
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());

Node node2 = node0.useSourceInfoFromForTree(node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertTrue(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals(32, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertEquals(32, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetProp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertTrue(node2.isTypeOf());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertSame(node0, node2);
assertSame(node2, node0);

node0.setSourceFileForTesting("=");
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertTrue(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals(32, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertSame(node0, node2);

Node node3 = Node.newString(57, "CharMatcher.JAVA_LETTER_OR_DIGIT");
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node3);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isVar());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.isStringKey());
assertFalse(node3.isCast());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertEquals(57, node3.getType());
assertFalse(node3.isFalse());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isExprResult());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertNotSame(node3, node1);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertTrue(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals(32, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertSame(node0, node2);
assertNotSame(node1, node3);

boolean boolean0 = node3.isSyntheticBlock();
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isVar());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.isStringKey());
assertFalse(node3.isCast());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertEquals(57, node3.getType());
assertFalse(node3.isFalse());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isExprResult());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertNotSame(node3, node1);

boolean boolean1 = node_NodeMismatch0.equals((Object) null);
assertFalse(boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertTrue(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals(32, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertSame(node0, node2);
assertNotSame(node1, node3);

Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node4);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isVar());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.isStringKey());
assertFalse(node3.isCast());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertEquals(57, node3.getType());
assertFalse(node3.isFalse());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isExprResult());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isVar());
assertFalse(node4.isNull());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isFunction());
assertEquals(40, node4.getType());
assertFalse(node4.isTrue());
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNew());
assertFalse(node4.isEmpty());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAdd());
assertFalse(node4.isGetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isLabelName());
assertFalse(node4.isNumber());
assertFalse(node4.isFor());
assertFalse(node4.isLabel());
assertFalse(node4.isNE());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isArrayLit());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isWith());
assertFalse(node4.isSwitch());
assertFalse(node4.isRegExp());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isBlock());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertTrue(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isScript());
assertFalse(node4.isBreak());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertFalse(node4.hasChildren());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isDelProp());
assertFalse(node4.isTypeOf());
assertFalse(node4.isReturn());
assertFalse(node4.isVoid());
assertFalse(node4.isContinue());
assertFalse(node4.isCast());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isWhile());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertNotSame(node1, node3);
assertSame(node1, node4);
assertNotSame(node3, node1);
assertNotSame(node3, node4);
assertNotSame(node4, node3);
assertSame(node4, node1);

Node node5 = node4.getAncestor(1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNull(node5);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isVar());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.isStringKey());
assertFalse(node3.isCast());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertEquals(57, node3.getType());
assertFalse(node3.isFalse());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isExprResult());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isVar());
assertFalse(node4.isNull());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isFunction());
assertEquals(40, node4.getType());
assertFalse(node4.isTrue());
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNew());
assertFalse(node4.isEmpty());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAdd());
assertFalse(node4.isGetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isLabelName());
assertFalse(node4.isNumber());
assertFalse(node4.isFor());
assertFalse(node4.isLabel());
assertFalse(node4.isNE());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isArrayLit());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isWith());
assertFalse(node4.isSwitch());
assertFalse(node4.isRegExp());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isBlock());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertTrue(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isScript());
assertFalse(node4.isBreak());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertFalse(node4.hasChildren());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isDelProp());
assertFalse(node4.isTypeOf());
assertFalse(node4.isReturn());
assertFalse(node4.isVoid());
assertFalse(node4.isContinue());
assertFalse(node4.isCast());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isWhile());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertNotSame(node1, node3);
assertSame(node1, node4);
assertNotSame(node3, node1);
assertNotSame(node3, node4);
assertNotSame(node4, node3);
assertSame(node4, node1);

Iterable<Node> iterable0 = node3.children();
assertFalse(iterable0.contains(node2));
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(iterable0);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isVar());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.isStringKey());
assertFalse(node3.isCast());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertEquals(57, node3.getType());
assertFalse(node3.isFalse());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isExprResult());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertNotSame(node3, node1);
assertNotSame(node3, node4);

boolean boolean2 = node2.isVoid();
assertFalse(boolean2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertTrue(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals(32, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertEquals(32, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetProp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertTrue(node2.isTypeOf());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertSame(node0, node2);
assertNotSame(node1, node3);
assertSame(node1, node4);
assertSame(node2, node0);


[MASTER] 10:07:23.635 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_296_1628158043618/com/google/javascript/rhino/Node_296_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_296_1628158043618/com/google/javascript/rhino/Node_296_tmp__ESTest_scaffolding.java]]
[MASTER] 10:07:23.635 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:07:23.635 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:07:23.636 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 10:07:23.636 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_296_1628158043618/com/google/javascript/rhino/Node_296_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:07:23 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_296_tmp__ESTest extends Node_296_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("808xL$U`$tklTA@");
21:       assertEquals(32, Node.INCRDECR_PROP);
22:       assertEquals(12, Node.COLUMN_BITS);
23:       assertEquals(46, Node.IS_NAMESPACE);
24:       assertEquals(51, Node.STATIC_SOURCE_FILE);
25:       assertEquals(2, Node.POST_FLAG);
26:       assertEquals(30, Node.VAR_ARGS_NAME);
27:       assertEquals(56, Node.CHANGE_TIME);
28:       assertEquals(37, Node.OPT_ARG_NAME);
29:       assertEquals(49, Node.DIRECT_EVAL);
30:       assertEquals(52, Node.LENGTH);
31:       assertEquals(53, Node.INPUT_ID);
32:       assertEquals(57, Node.REFLECTED_OBJECT);
33:       assertEquals(36, Node.QUOTED_PROP);
34:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(57, Node.LAST_PROP);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(29, Node.JSDOC_INFO_PROP);
39:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(55, Node.INFERRED_FUNCTION);
43:       assertEquals(8, Node.FLAG_NO_THROWS);
44:       assertEquals(4095, Node.COLUMN_MASK);
45:       assertEquals(43, Node.IS_CONSTANT_NAME);
46:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
47:       assertEquals(40, Node.ORIGINALNAME_PROP);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(54, Node.SLASH_V);
52:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertNotNull(node0);
58:       assertFalse(node0.isStringKey());
59:       assertFalse(node0.isName());
60:       assertFalse(node0.isSetterDef());
61:       assertFalse(node0.isAdd());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isNew());
64:       assertTrue(node0.isString());
65:       assertEquals(0, node0.getChildCount());
66:       assertFalse(node0.isWhile());
67:       assertFalse(node0.isVar());
68:       assertFalse(node0.isBlock());
69:       assertFalse(node0.isDo());
70:       assertFalse(node0.hasMoreThanOneChild());
71:       assertEquals((-1), node0.getLineno());
72:       assertFalse(node0.isCatch());
73:       assertFalse(node0.isVoid());
74:       assertFalse(node0.isOr());
75:       assertFalse(node0.isNull());
76:       assertFalse(node0.isTrue());
77:       assertFalse(node0.isAssign());
78:       assertFalse(node0.isDelProp());
79:       assertFalse(node0.isCast());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.isTypeOf());
82:       assertFalse(node0.isFunction());
83:       assertFalse(node0.hasChildren());
84:       assertFalse(node0.isDec());
85:       assertEquals(40, node0.getType());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isContinue());
88:       assertFalse(node0.isAnd());
89:       assertFalse(node0.isNot());
90:       assertFalse(node0.isObjectLit());
91:       assertFalse(node0.isDebugger());
92:       assertEquals((-1), node0.getSourcePosition());
93:       assertFalse(node0.isThrow());
94:       assertFalse(node0.isFalse());
95:       assertFalse(node0.isBreak());
96:       assertFalse(node0.isGetProp());
97:       assertFalse(node0.isComma());
98:       assertFalse(node0.isThis());
99:       assertFalse(node0.isHook());
100:       assertFalse(node0.isWith());
101:       assertFalse(node0.isIn());
102:       assertFalse(node0.isInstanceOf());
103:       assertFalse(node0.isExprResult());
104:       assertFalse(node0.isInc());
105:       assertFalse(node0.isIf());
106:       assertFalse(node0.isNE());
107:       assertFalse(node0.isLabelName());
108:       assertFalse(node0.hasOneChild());
109:       assertFalse(node0.isArrayLit());
110:       assertFalse(node0.isEmpty());
111:       assertFalse(node0.isAssignAdd());
112:       assertFalse(node0.isTry());
113:       assertFalse(node0.isRegExp());
114:       assertFalse(node0.isDefaultCase());
115:       assertFalse(node0.isFor());
116:       assertFalse(node0.isLabel());
117:       assertFalse(node0.isCase());
118:       assertFalse(node0.isScript());
119:       assertEquals((-1), node0.getCharno());
120:       assertFalse(node0.isParamList());
121:       assertFalse(node0.isSwitch());
122:       assertFalse(node0.isNumber());
123:       assertFalse(node0.isGetterDef());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(32, Node.INCRDECR_PROP);
128:       assertEquals(12, Node.COLUMN_BITS);
129:       assertEquals(46, Node.IS_NAMESPACE);
130:       assertEquals(51, Node.STATIC_SOURCE_FILE);
131:       assertEquals(2, Node.POST_FLAG);
132:       assertEquals(30, Node.VAR_ARGS_NAME);
133:       assertEquals(56, Node.CHANGE_TIME);
134:       assertEquals(37, Node.OPT_ARG_NAME);
135:       assertEquals(49, Node.DIRECT_EVAL);
136:       assertEquals(52, Node.LENGTH);
137:       assertEquals(53, Node.INPUT_ID);
138:       assertEquals(57, Node.REFLECTED_OBJECT);
139:       assertEquals(36, Node.QUOTED_PROP);
140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
142:       assertEquals(57, Node.LAST_PROP);
143:       assertEquals(47, Node.IS_DISPATCHER);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(55, Node.INFERRED_FUNCTION);
149:       assertEquals(8, Node.FLAG_NO_THROWS);
150:       assertEquals(4095, Node.COLUMN_MASK);
151:       assertEquals(43, Node.IS_CONSTANT_NAME);
152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
153:       assertEquals(40, Node.ORIGINALNAME_PROP);
154:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
157:       assertEquals(54, Node.SLASH_V);
158:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertNotNull(iterable0);
164:       assertFalse(node0.isStringKey());
165:       assertFalse(node0.isName());
166:       assertFalse(node0.isSetterDef());
167:       assertFalse(node0.isAdd());
168:       assertFalse(node0.isCall());
169:       assertFalse(node0.isNew());
170:       assertTrue(node0.isString());
171:       assertEquals(0, node0.getChildCount());
172:       assertFalse(node0.isWhile());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isBlock());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertEquals((-1), node0.getLineno());
178:       assertFalse(node0.isCatch());
179:       assertFalse(node0.isVoid());
180:       assertFalse(node0.isOr());
181:       assertFalse(node0.isNull());
182:       assertFalse(node0.isTrue());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isDelProp());
185:       assertFalse(node0.isCast());
186:       assertFalse(node0.isGetElem());
187:       assertFalse(node0.isTypeOf());
188:       assertFalse(node0.isFunction());
189:       assertFalse(node0.hasChildren());
190:       assertFalse(node0.isDec());
191:       assertEquals(40, node0.getType());
192:       assertFalse(node0.isReturn());
193:       assertFalse(node0.isContinue());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isNot());
196:       assertFalse(node0.isObjectLit());
197:       assertFalse(node0.isDebugger());
198:       assertEquals((-1), node0.getSourcePosition());
199:       assertFalse(node0.isThrow());
200:       assertFalse(node0.isFalse());
201:       assertFalse(node0.isBreak());
202:       assertFalse(node0.isGetProp());
203:       assertFalse(node0.isComma());
204:       assertFalse(node0.isThis());
205:       assertFalse(node0.isHook());
206:       assertFalse(node0.isWith());
207:       assertFalse(node0.isIn());
208:       assertFalse(node0.isInstanceOf());
209:       assertFalse(node0.isExprResult());
210:       assertFalse(node0.isInc());
211:       assertFalse(node0.isIf());
212:       assertFalse(node0.isNE());
213:       assertFalse(node0.isLabelName());
214:       assertFalse(node0.hasOneChild());
215:       assertFalse(node0.isArrayLit());
216:       assertFalse(node0.isEmpty());
217:       assertFalse(node0.isAssignAdd());
218:       assertFalse(node0.isTry());
219:       assertFalse(node0.isRegExp());
220:       assertFalse(node0.isDefaultCase());
221:       assertFalse(node0.isFor());
222:       assertFalse(node0.isLabel());
223:       assertFalse(node0.isCase());
224:       assertFalse(node0.isScript());
225:       assertEquals((-1), node0.getCharno());
226:       assertFalse(node0.isParamList());
227:       assertFalse(node0.isSwitch());
228:       assertFalse(node0.isNumber());
229:       assertFalse(node0.isGetterDef());
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_296_1628158043618/com/google/javascript/rhino/Node_296_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:07:23 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_296_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_296_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_296_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Iterables",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.JSTypeExpression",
349:       "com.google.javascript.rhino.jstype.NamedType",
350:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.Platform",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator"
364:     );
365:   }
366: }

[MASTER] 10:07:23.638 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("808xL$U`$tklTA@");
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node0);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals(40, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(iterable0);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals(40, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());


[MASTER] 10:07:48.238 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:48.503 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:48.743 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:49.003 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:49.393 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:50.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:50.354 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:50.593 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:50.920 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:51.134 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:51.316 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:51.509 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:51.829 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:52.027 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:52.208 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:52.413 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:52.587 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:52.776 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:52.998 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:53.211 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:53.398 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:53.620 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:53.843 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:54.110 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:54.298 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:54.509 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:54.747 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:55.026 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:55.267 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:55.476 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:55.641 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:07:57.176 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/7
* Done!

* Computation finished
