* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 5352
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2921956927
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:00:21.165 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:00:23.663 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2526: com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;:800 - ReplaceComparisonOperator != -> >
[MASTER] 10:00:27.809 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:00:51.861 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:05:19.227 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 606s and 651 generations, 268666 statements, best individual has fitness: 2736.0
* Minimizing test suite
[MASTER] 10:11:53.438 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 810
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 633
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 111
* Number of covered goals: 111
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 474
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 4536
* Number of covered goals: 2266
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 595
* Generated 1178 tests with total length 10123
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:13:24.379 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6982666666666667% of time used, but only 121/1178 tests minimized), falling back to using all assertions
[MASTER] 10:13:42.484 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 10:13:55.257 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 10:14:01.251 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_176_1628158441162/com/google/javascript/rhino/Node_176_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_176_1628158441162/com/google/javascript/rhino/Node_176_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:01.251 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:01.251 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:01.255 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 548
[MASTER] 10:14:01.256 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_176_1628158441162/com/google/javascript/rhino/Node_176_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:01 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_176_tmp__ESTest extends Node_176_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("", 216, 0);
21:       assertFalse(node0.isIn());
22:       assertEquals(216, node0.getLineno());
23:       assertFalse(node0.isGetterDef());
24:       assertFalse(node0.isEmpty());
25:       assertFalse(node0.isCase());
26:       assertFalse(node0.isInc());
27:       assertFalse(node0.isArrayLit());
28:       assertFalse(node0.isFalse());
29:       assertFalse(node0.isThrow());
30:       assertFalse(node0.isSwitch());
31:       assertFalse(node0.isFunction());
32:       assertFalse(node0.isCatch());
33:       assertFalse(node0.isInstanceOf());
34:       assertFalse(node0.isThis());
35:       assertEquals(40, node0.getType());
36:       assertFalse(node0.isSetterDef());
37:       assertFalse(node0.isTry());
38:       assertFalse(node0.isScript());
39:       assertFalse(node0.hasOneChild());
40:       assertFalse(node0.isHook());
41:       assertEquals(0, node0.getCharno());
42:       assertFalse(node0.isBlock());
43:       assertFalse(node0.isFor());
44:       assertFalse(node0.isNE());
45:       assertFalse(node0.isIf());
46:       assertFalse(node0.isRegExp());
47:       assertFalse(node0.isWith());
48:       assertFalse(node0.hasMoreThanOneChild());
49:       assertFalse(node0.isContinue());
50:       assertFalse(node0.isLabel());
51:       assertFalse(node0.isOr());
52:       assertFalse(node0.isAssignAdd());
53:       assertFalse(node0.isWhile());
54:       assertFalse(node0.isReturn());
55:       assertTrue(node0.isString());
56:       assertFalse(node0.isNumber());
57:       assertFalse(node0.isDo());
58:       assertFalse(node0.isNew());
59:       assertFalse(node0.isAdd());
60:       assertFalse(node0.isVar());
61:       assertFalse(node0.isCast());
62:       assertEquals(884736, node0.getSourcePosition());
63:       assertFalse(node0.isStringKey());
64:       assertFalse(node0.isParamList());
65:       assertFalse(node0.isLabelName());
66:       assertFalse(node0.isAnd());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isObjectLit());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isGetProp());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.isTrue());
77:       assertFalse(node0.isNull());
78:       assertFalse(node0.isComma());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.isVoid());
81:       assertFalse(node0.isDelProp());
82:       assertFalse(node0.isTypeOf());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isCall());
87:       assertNotNull(node0);
88:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
89:       assertEquals(53, Node.INPUT_ID);
90:       assertEquals(29, Node.JSDOC_INFO_PROP);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(56, Node.CHANGE_TIME);
95:       assertEquals(36, Node.QUOTED_PROP);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(12, Node.COLUMN_BITS);
98:       assertEquals(4095, Node.COLUMN_MASK);
99:       assertEquals(48, Node.DIRECTIVES);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
102:       assertEquals(49, Node.DIRECT_EVAL);
103:       assertEquals(37, Node.OPT_ARG_NAME);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(52, Node.LENGTH);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(50, Node.FREE_CALL);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(46, Node.IS_NAMESPACE);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
118:       assertEquals(39, Node.EMPTY_BLOCK);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(47, Node.IS_DISPATCHER);
121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
122:       assertEquals(2, Node.POST_FLAG);
123:       assertEquals(30, Node.VAR_ARGS_NAME);
124:       
125:       boolean boolean0 = node0.isNoSideEffectsCall();
126:       assertFalse(node0.isIn());
127:       assertEquals(216, node0.getLineno());
128:       assertFalse(node0.isGetterDef());
129:       assertFalse(node0.isEmpty());
130:       assertFalse(node0.isCase());
131:       assertFalse(node0.isInc());
132:       assertFalse(node0.isArrayLit());
133:       assertFalse(node0.isFalse());
134:       assertFalse(node0.isThrow());
135:       assertFalse(node0.isSwitch());
136:       assertFalse(node0.isFunction());
137:       assertFalse(node0.isCatch());
138:       assertFalse(node0.isInstanceOf());
139:       assertFalse(node0.isThis());
140:       assertEquals(40, node0.getType());
141:       assertFalse(node0.isSetterDef());
142:       assertFalse(node0.isTry());
143:       assertFalse(node0.isScript());
144:       assertFalse(node0.hasOneChild());
145:       assertFalse(node0.isHook());
146:       assertEquals(0, node0.getCharno());
147:       assertFalse(node0.isBlock());
148:       assertFalse(node0.isFor());
149:       assertFalse(node0.isNE());
150:       assertFalse(node0.isIf());
151:       assertFalse(node0.isRegExp());
152:       assertFalse(node0.isWith());
153:       assertFalse(node0.hasMoreThanOneChild());
154:       assertFalse(node0.isContinue());
155:       assertFalse(node0.isLabel());
156:       assertFalse(node0.isOr());
157:       assertFalse(node0.isAssignAdd());
158:       assertFalse(node0.isWhile());
159:       assertFalse(node0.isReturn());
160:       assertTrue(node0.isString());
161:       assertFalse(node0.isNumber());
162:       assertFalse(node0.isDo());
163:       assertFalse(node0.isNew());
164:       assertFalse(node0.isAdd());
165:       assertFalse(node0.isVar());
166:       assertFalse(node0.isCast());
167:       assertEquals(884736, node0.getSourcePosition());
168:       assertFalse(node0.isStringKey());
169:       assertFalse(node0.isParamList());
170:       assertFalse(node0.isLabelName());
171:       assertFalse(node0.isAnd());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isObjectLit());
174:       assertFalse(node0.isNot());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isDefaultCase());
177:       assertFalse(node0.isGetProp());
178:       assertFalse(node0.isName());
179:       assertFalse(node0.isAssign());
180:       assertFalse(node0.hasChildren());
181:       assertFalse(node0.isTrue());
182:       assertFalse(node0.isNull());
183:       assertFalse(node0.isComma());
184:       assertFalse(node0.isDec());
185:       assertFalse(node0.isVoid());
186:       assertFalse(node0.isDelProp());
187:       assertFalse(node0.isTypeOf());
188:       assertFalse(node0.isBreak());
189:       assertFalse(node0.isExprResult());
190:       assertFalse(node0.isGetElem());
191:       assertFalse(node0.isCall());
192:       assertFalse(boolean0);
193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
194:       assertEquals(53, Node.INPUT_ID);
195:       assertEquals(29, Node.JSDOC_INFO_PROP);
196:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
198:       assertEquals(43, Node.IS_CONSTANT_NAME);
199:       assertEquals(56, Node.CHANGE_TIME);
200:       assertEquals(36, Node.QUOTED_PROP);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(12, Node.COLUMN_BITS);
203:       assertEquals(4095, Node.COLUMN_MASK);
204:       assertEquals(48, Node.DIRECTIVES);
205:       assertEquals(1, Node.DECR_FLAG);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(49, Node.DIRECT_EVAL);
208:       assertEquals(37, Node.OPT_ARG_NAME);
209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
211:       assertEquals(57, Node.REFLECTED_OBJECT);
212:       assertEquals(52, Node.LENGTH);
213:       assertEquals(40, Node.ORIGINALNAME_PROP);
214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
216:       assertEquals(54, Node.SLASH_V);
217:       assertEquals(8, Node.FLAG_NO_THROWS);
218:       assertEquals(50, Node.FREE_CALL);
219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
223:       assertEquals(39, Node.EMPTY_BLOCK);
224:       assertEquals(57, Node.LAST_PROP);
225:       assertEquals(47, Node.IS_DISPATCHER);
226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(30, Node.VAR_ARGS_NAME);
229:       
230:       node0.removeProp(0);
231:       assertFalse(node0.isIn());
232:       assertEquals(216, node0.getLineno());
233:       assertFalse(node0.isGetterDef());
234:       assertFalse(node0.isEmpty());
235:       assertFalse(node0.isCase());
236:       assertFalse(node0.isInc());
237:       assertFalse(node0.isArrayLit());
238:       assertFalse(node0.isFalse());
239:       assertFalse(node0.isThrow());
240:       assertFalse(node0.isSwitch());
241:       assertFalse(node0.isFunction());
242:       assertFalse(node0.isCatch());
243:       assertFalse(node0.isInstanceOf());
244:       assertFalse(node0.isThis());
245:       assertEquals(40, node0.getType());
246:       assertFalse(node0.isSetterDef());
247:       assertFalse(node0.isTry());
248:       assertFalse(node0.isScript());
249:       assertFalse(node0.hasOneChild());
250:       assertFalse(node0.isHook());
251:       assertEquals(0, node0.getCharno());
252:       assertFalse(node0.isBlock());
253:       assertFalse(node0.isFor());
254:       assertFalse(node0.isNE());
255:       assertFalse(node0.isIf());
256:       assertFalse(node0.isRegExp());
257:       assertFalse(node0.isWith());
258:       assertFalse(node0.hasMoreThanOneChild());
259:       assertFalse(node0.isContinue());
260:       assertFalse(node0.isLabel());
261:       assertFalse(node0.isOr());
262:       assertFalse(node0.isAssignAdd());
263:       assertFalse(node0.isWhile());
264:       assertFalse(node0.isReturn());
265:       assertTrue(node0.isString());
266:       assertFalse(node0.isNumber());
267:       assertFalse(node0.isDo());
268:       assertFalse(node0.isNew());
269:       assertFalse(node0.isAdd());
270:       assertFalse(node0.isVar());
271:       assertFalse(node0.isCast());
272:       assertEquals(884736, node0.getSourcePosition());
273:       assertFalse(node0.isStringKey());
274:       assertFalse(node0.isParamList());
275:       assertFalse(node0.isLabelName());
276:       assertFalse(node0.isAnd());
277:       assertEquals(0, node0.getChildCount());
278:       assertFalse(node0.isObjectLit());
279:       assertFalse(node0.isNot());
280:       assertFalse(node0.isDebugger());
281:       assertFalse(node0.isDefaultCase());
282:       assertFalse(node0.isGetProp());
283:       assertFalse(node0.isName());
284:       assertFalse(node0.isAssign());
285:       assertFalse(node0.hasChildren());
286:       assertFalse(node0.isTrue());
287:       assertFalse(node0.isNull());
288:       assertFalse(node0.isComma());
289:       assertFalse(node0.isDec());
290:       assertFalse(node0.isVoid());
291:       assertFalse(node0.isDelProp());
292:       assertFalse(node0.isTypeOf());
293:       assertFalse(node0.isBreak());
294:       assertFalse(node0.isExprResult());
295:       assertFalse(node0.isGetElem());
296:       assertFalse(node0.isCall());
297:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
298:       assertEquals(53, Node.INPUT_ID);
299:       assertEquals(29, Node.JSDOC_INFO_PROP);
300:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
302:       assertEquals(43, Node.IS_CONSTANT_NAME);
303:       assertEquals(56, Node.CHANGE_TIME);
304:       assertEquals(36, Node.QUOTED_PROP);
305:       assertEquals(32, Node.INCRDECR_PROP);
306:       assertEquals(12, Node.COLUMN_BITS);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(48, Node.DIRECTIVES);
309:       assertEquals(1, Node.DECR_FLAG);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(37, Node.OPT_ARG_NAME);
313:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(57, Node.REFLECTED_OBJECT);
316:       assertEquals(52, Node.LENGTH);
317:       assertEquals(40, Node.ORIGINALNAME_PROP);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
320:       assertEquals(54, Node.SLASH_V);
321:       assertEquals(8, Node.FLAG_NO_THROWS);
322:       assertEquals(50, Node.FREE_CALL);
323:       assertEquals(51, Node.STATIC_SOURCE_FILE);
324:       assertEquals(46, Node.IS_NAMESPACE);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(57, Node.LAST_PROP);
329:       assertEquals(47, Node.IS_DISPATCHER);
330:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
331:       assertEquals(2, Node.POST_FLAG);
332:       assertEquals(30, Node.VAR_ARGS_NAME);
333:       
334:       boolean boolean1 = node0.isQuotedString();
335:       assertTrue(boolean1 == boolean0);
336:       assertFalse(node0.isIn());
337:       assertEquals(216, node0.getLineno());
338:       assertFalse(node0.isGetterDef());
339:       assertFalse(node0.isEmpty());
340:       assertFalse(node0.isCase());
341:       assertFalse(node0.isInc());
342:       assertFalse(node0.isArrayLit());
343:       assertFalse(node0.isFalse());
344:       assertFalse(node0.isThrow());
345:       assertFalse(node0.isSwitch());
346:       assertFalse(node0.isFunction());
347:       assertFalse(node0.isCatch());
348:       assertFalse(node0.isInstanceOf());
349:       assertFalse(node0.isThis());
350:       assertEquals(40, node0.getType());
351:       assertFalse(node0.isSetterDef());
352:       assertFalse(node0.isTry());
353:       assertFalse(node0.isScript());
354:       assertFalse(node0.hasOneChild());
355:       assertFalse(node0.isHook());
356:       assertEquals(0, node0.getCharno());
357:       assertFalse(node0.isBlock());
358:       assertFalse(node0.isFor());
359:       assertFalse(node0.isNE());
360:       assertFalse(node0.isIf());
361:       assertFalse(node0.isRegExp());
362:       assertFalse(node0.isWith());
363:       assertFalse(node0.hasMoreThanOneChild());
364:       assertFalse(node0.isContinue());
365:       assertFalse(node0.isLabel());
366:       assertFalse(node0.isOr());
367:       assertFalse(node0.isAssignAdd());
368:       assertFalse(node0.isWhile());
369:       assertFalse(node0.isReturn());
370:       assertTrue(node0.isString());
371:       assertFalse(node0.isNumber());
372:       assertFalse(node0.isDo());
373:       assertFalse(node0.isNew());
374:       assertFalse(node0.isAdd());
375:       assertFalse(node0.isVar());
376:       assertFalse(node0.isCast());
377:       assertEquals(884736, node0.getSourcePosition());
378:       assertFalse(node0.isStringKey());
379:       assertFalse(node0.isParamList());
380:       assertFalse(node0.isLabelName());
381:       assertFalse(node0.isAnd());
382:       assertEquals(0, node0.getChildCount());
383:       assertFalse(node0.isObjectLit());
384:       assertFalse(node0.isNot());
385:       assertFalse(node0.isDebugger());
386:       assertFalse(node0.isDefaultCase());
387:       assertFalse(node0.isGetProp());
388:       assertFalse(node0.isName());
389:       assertFalse(node0.isAssign());
390:       assertFalse(node0.hasChildren());
391:       assertFalse(node0.isTrue());
392:       assertFalse(node0.isNull());
393:       assertFalse(node0.isComma());
394:       assertFalse(node0.isDec());
395:       assertFalse(node0.isVoid());
396:       assertFalse(node0.isDelProp());
397:       assertFalse(node0.isTypeOf());
398:       assertFalse(node0.isBreak());
399:       assertFalse(node0.isExprResult());
400:       assertFalse(node0.isGetElem());
401:       assertFalse(node0.isCall());
402:       assertFalse(boolean1);
403:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
404:       assertEquals(53, Node.INPUT_ID);
405:       assertEquals(29, Node.JSDOC_INFO_PROP);
406:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
407:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
408:       assertEquals(43, Node.IS_CONSTANT_NAME);
409:       assertEquals(56, Node.CHANGE_TIME);
410:       assertEquals(36, Node.QUOTED_PROP);
411:       assertEquals(32, Node.INCRDECR_PROP);
412:       assertEquals(12, Node.COLUMN_BITS);
413:       assertEquals(4095, Node.COLUMN_MASK);
414:       assertEquals(48, Node.DIRECTIVES);
415:       assertEquals(1, Node.DECR_FLAG);
416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
417:       assertEquals(49, Node.DIRECT_EVAL);
418:       assertEquals(37, Node.OPT_ARG_NAME);
419:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
420:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
421:       assertEquals(57, Node.REFLECTED_OBJECT);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(40, Node.ORIGINALNAME_PROP);
424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
425:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
426:       assertEquals(54, Node.SLASH_V);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(50, Node.FREE_CALL);
429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
430:       assertEquals(46, Node.IS_NAMESPACE);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(57, Node.LAST_PROP);
435:       assertEquals(47, Node.IS_DISPATCHER);
436:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
437:       assertEquals(2, Node.POST_FLAG);
438:       assertEquals(30, Node.VAR_ARGS_NAME);
439:       
440:       boolean boolean2 = node0.isOr();
441:       assertTrue(boolean2 == boolean1);
442:       assertTrue(boolean2 == boolean0);
443:       assertFalse(node0.isIn());
444:       assertEquals(216, node0.getLineno());
445:       assertFalse(node0.isGetterDef());
446:       assertFalse(node0.isEmpty());
447:       assertFalse(node0.isCase());
448:       assertFalse(node0.isInc());
449:       assertFalse(node0.isArrayLit());
450:       assertFalse(node0.isFalse());
451:       assertFalse(node0.isThrow());
452:       assertFalse(node0.isSwitch());
453:       assertFalse(node0.isFunction());
454:       assertFalse(node0.isCatch());
455:       assertFalse(node0.isInstanceOf());
456:       assertFalse(node0.isThis());
457:       assertEquals(40, node0.getType());
458:       assertFalse(node0.isSetterDef());
459:       assertFalse(node0.isTry());
460:       assertFalse(node0.isScript());
461:       assertFalse(node0.hasOneChild());
462:       assertFalse(node0.isHook());
463:       assertEquals(0, node0.getCharno());
464:       assertFalse(node0.isBlock());
465:       assertFalse(node0.isFor());
466:       assertFalse(node0.isNE());
467:       assertFalse(node0.isIf());
468:       assertFalse(node0.isRegExp());
469:       assertFalse(node0.isWith());
470:       assertFalse(node0.hasMoreThanOneChild());
471:       assertFalse(node0.isContinue());
472:       assertFalse(node0.isLabel());
473:       assertFalse(node0.isOr());
474:       assertFalse(node0.isAssignAdd());
475:       assertFalse(node0.isWhile());
476:       assertFalse(node0.isReturn());
477:       assertTrue(node0.isString());
478:       assertFalse(node0.isNumber());
479:       assertFalse(node0.isDo());
480:       assertFalse(node0.isNew());
481:       assertFalse(node0.isAdd());
482:       assertFalse(node0.isVar());
483:       assertFalse(node0.isCast());
484:       assertEquals(884736, node0.getSourcePosition());
485:       assertFalse(node0.isStringKey());
486:       assertFalse(node0.isParamList());
487:       assertFalse(node0.isLabelName());
488:       assertFalse(node0.isAnd());
489:       assertEquals(0, node0.getChildCount());
490:       assertFalse(node0.isObjectLit());
491:       assertFalse(node0.isNot());
492:       assertFalse(node0.isDebugger());
493:       assertFalse(node0.isDefaultCase());
494:       assertFalse(node0.isGetProp());
495:       assertFalse(node0.isName());
496:       assertFalse(node0.isAssign());
497:       assertFalse(node0.hasChildren());
498:       assertFalse(node0.isTrue());
499:       assertFalse(node0.isNull());
500:       assertFalse(node0.isComma());
501:       assertFalse(node0.isDec());
502:       assertFalse(node0.isVoid());
503:       assertFalse(node0.isDelProp());
504:       assertFalse(node0.isTypeOf());
505:       assertFalse(node0.isBreak());
506:       assertFalse(node0.isExprResult());
507:       assertFalse(node0.isGetElem());
508:       assertFalse(node0.isCall());
509:       assertFalse(boolean2);
510:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
511:       assertEquals(53, Node.INPUT_ID);
512:       assertEquals(29, Node.JSDOC_INFO_PROP);
513:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
514:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
515:       assertEquals(43, Node.IS_CONSTANT_NAME);
516:       assertEquals(56, Node.CHANGE_TIME);
517:       assertEquals(36, Node.QUOTED_PROP);
518:       assertEquals(32, Node.INCRDECR_PROP);
519:       assertEquals(12, Node.COLUMN_BITS);
520:       assertEquals(4095, Node.COLUMN_MASK);
521:       assertEquals(48, Node.DIRECTIVES);
522:       assertEquals(1, Node.DECR_FLAG);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(49, Node.DIRECT_EVAL);
525:       assertEquals(37, Node.OPT_ARG_NAME);
526:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
528:       assertEquals(57, Node.REFLECTED_OBJECT);
529:       assertEquals(52, Node.LENGTH);
530:       assertEquals(40, Node.ORIGINALNAME_PROP);
531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
532:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
533:       assertEquals(54, Node.SLASH_V);
534:       assertEquals(8, Node.FLAG_NO_THROWS);
535:       assertEquals(50, Node.FREE_CALL);
536:       assertEquals(51, Node.STATIC_SOURCE_FILE);
537:       assertEquals(46, Node.IS_NAMESPACE);
538:       assertEquals(55, Node.INFERRED_FUNCTION);
539:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
540:       assertEquals(39, Node.EMPTY_BLOCK);
541:       assertEquals(57, Node.LAST_PROP);
542:       assertEquals(47, Node.IS_DISPATCHER);
543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
544:       assertEquals(2, Node.POST_FLAG);
545:       assertEquals(30, Node.VAR_ARGS_NAME);
546:       
547:       Iterable<Node> iterable0 = node0.children();
548:       assertFalse(iterable0.contains(node0));
549:       assertFalse(node0.isIn());
550:       assertEquals(216, node0.getLineno());
551:       assertFalse(node0.isGetterDef());
552:       assertFalse(node0.isEmpty());
553:       assertFalse(node0.isCase());
554:       assertFalse(node0.isInc());
555:       assertFalse(node0.isArrayLit());
556:       assertFalse(node0.isFalse());
557:       assertFalse(node0.isThrow());
558:       assertFalse(node0.isSwitch());
559:       assertFalse(node0.isFunction());
560:       assertFalse(node0.isCatch());
561:       assertFalse(node0.isInstanceOf());
562:       assertFalse(node0.isThis());
563:       assertEquals(40, node0.getType());
564:       assertFalse(node0.isSetterDef());
565:       assertFalse(node0.isTry());
566:       assertFalse(node0.isScript());
567:       assertFalse(node0.hasOneChild());
568:       assertFalse(node0.isHook());
569:       assertEquals(0, node0.getCharno());
570:       assertFalse(node0.isBlock());
571:       assertFalse(node0.isFor());
572:       assertFalse(node0.isNE());
573:       assertFalse(node0.isIf());
574:       assertFalse(node0.isRegExp());
575:       assertFalse(node0.isWith());
576:       assertFalse(node0.hasMoreThanOneChild());
577:       assertFalse(node0.isContinue());
578:       assertFalse(node0.isLabel());
579:       assertFalse(node0.isOr());
580:       assertFalse(node0.isAssignAdd());
581:       assertFalse(node0.isWhile());
582:       assertFalse(node0.isReturn());
583:       assertTrue(node0.isString());
584:       assertFalse(node0.isNumber());
585:       assertFalse(node0.isDo());
586:       assertFalse(node0.isNew());
587:       assertFalse(node0.isAdd());
588:       assertFalse(node0.isVar());
589:       assertFalse(node0.isCast());
590:       assertEquals(884736, node0.getSourcePosition());
591:       assertFalse(node0.isStringKey());
592:       assertFalse(node0.isParamList());
593:       assertFalse(node0.isLabelName());
594:       assertFalse(node0.isAnd());
595:       assertEquals(0, node0.getChildCount());
596:       assertFalse(node0.isObjectLit());
597:       assertFalse(node0.isNot());
598:       assertFalse(node0.isDebugger());
599:       assertFalse(node0.isDefaultCase());
600:       assertFalse(node0.isGetProp());
601:       assertFalse(node0.isName());
602:       assertFalse(node0.isAssign());
603:       assertFalse(node0.hasChildren());
604:       assertFalse(node0.isTrue());
605:       assertFalse(node0.isNull());
606:       assertFalse(node0.isComma());
607:       assertFalse(node0.isDec());
608:       assertFalse(node0.isVoid());
609:       assertFalse(node0.isDelProp());
610:       assertFalse(node0.isTypeOf());
611:       assertFalse(node0.isBreak());
612:       assertFalse(node0.isExprResult());
613:       assertFalse(node0.isGetElem());
614:       assertFalse(node0.isCall());
615:       assertNotNull(iterable0);
616:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
617:       assertEquals(53, Node.INPUT_ID);
618:       assertEquals(29, Node.JSDOC_INFO_PROP);
619:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
620:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
621:       assertEquals(43, Node.IS_CONSTANT_NAME);
622:       assertEquals(56, Node.CHANGE_TIME);
623:       assertEquals(36, Node.QUOTED_PROP);
624:       assertEquals(32, Node.INCRDECR_PROP);
625:       assertEquals(12, Node.COLUMN_BITS);
626:       assertEquals(4095, Node.COLUMN_MASK);
627:       assertEquals(48, Node.DIRECTIVES);
628:       assertEquals(1, Node.DECR_FLAG);
629:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
630:       assertEquals(49, Node.DIRECT_EVAL);
631:       assertEquals(37, Node.OPT_ARG_NAME);
632:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(57, Node.REFLECTED_OBJECT);
635:       assertEquals(52, Node.LENGTH);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(15, Node.NO_SIDE_EFFECTS);
638:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
639:       assertEquals(54, Node.SLASH_V);
640:       assertEquals(8, Node.FLAG_NO_THROWS);
641:       assertEquals(50, Node.FREE_CALL);
642:       assertEquals(51, Node.STATIC_SOURCE_FILE);
643:       assertEquals(46, Node.IS_NAMESPACE);
644:       assertEquals(55, Node.INFERRED_FUNCTION);
645:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
646:       assertEquals(39, Node.EMPTY_BLOCK);
647:       assertEquals(57, Node.LAST_PROP);
648:       assertEquals(47, Node.IS_DISPATCHER);
649:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
650:       assertEquals(2, Node.POST_FLAG);
651:       assertEquals(30, Node.VAR_ARGS_NAME);
652:       
653:       node0.putProp(0, (Object) null);
654:       assertFalse(node0.isIn());
655:       assertEquals(216, node0.getLineno());
656:       assertFalse(node0.isGetterDef());
657:       assertFalse(node0.isEmpty());
658:       assertFalse(node0.isCase());
659:       assertFalse(node0.isInc());
660:       assertFalse(node0.isArrayLit());
661:       assertFalse(node0.isFalse());
662:       assertFalse(node0.isThrow());
663:       assertFalse(node0.isSwitch());
664:       assertFalse(node0.isFunction());
665:       assertFalse(node0.isCatch());
666:       assertFalse(node0.isInstanceOf());
667:       assertFalse(node0.isThis());
668:       assertEquals(40, node0.getType());
669:       assertFalse(node0.isSetterDef());
670:       assertFalse(node0.isTry());
671:       assertFalse(node0.isScript());
672:       assertFalse(node0.hasOneChild());
673:       assertFalse(node0.isHook());
674:       assertEquals(0, node0.getCharno());
675:       assertFalse(node0.isBlock());
676:       assertFalse(node0.isFor());
677:       assertFalse(node0.isNE());
678:       assertFalse(node0.isIf());
679:       assertFalse(node0.isRegExp());
680:       assertFalse(node0.isWith());
681:       assertFalse(node0.hasMoreThanOneChild());
682:       assertFalse(node0.isContinue());
683:       assertFalse(node0.isLabel());
684:       assertFalse(node0.isOr());
685:       assertFalse(node0.isAssignAdd());
686:       assertFalse(node0.isWhile());
687:       assertFalse(node0.isReturn());
688:       assertTrue(node0.isString());
689:       assertFalse(node0.isNumber());
690:       assertFalse(node0.isDo());
691:       assertFalse(node0.isNew());
692:       assertFalse(node0.isAdd());
693:       assertFalse(node0.isVar());
694:       assertFalse(node0.isCast());
695:       assertEquals(884736, node0.getSourcePosition());
696:       assertFalse(node0.isStringKey());
697:       assertFalse(node0.isParamList());
698:       assertFalse(node0.isLabelName());
699:       assertFalse(node0.isAnd());
700:       assertEquals(0, node0.getChildCount());
701:       assertFalse(node0.isObjectLit());
702:       assertFalse(node0.isNot());
703:       assertFalse(node0.isDebugger());
704:       assertFalse(node0.isDefaultCase());
705:       assertFalse(node0.isGetProp());
706:       assertFalse(node0.isName());
707:       assertFalse(node0.isAssign());
708:       assertFalse(node0.hasChildren());
709:       assertFalse(node0.isTrue());
710:       assertFalse(node0.isNull());
711:       assertFalse(node0.isComma());
712:       assertFalse(node0.isDec());
713:       assertFalse(node0.isVoid());
714:       assertFalse(node0.isDelProp());
715:       assertFalse(node0.isTypeOf());
716:       assertFalse(node0.isBreak());
717:       assertFalse(node0.isExprResult());
718:       assertFalse(node0.isGetElem());
719:       assertFalse(node0.isCall());
720:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
721:       assertEquals(53, Node.INPUT_ID);
722:       assertEquals(29, Node.JSDOC_INFO_PROP);
723:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
725:       assertEquals(43, Node.IS_CONSTANT_NAME);
726:       assertEquals(56, Node.CHANGE_TIME);
727:       assertEquals(36, Node.QUOTED_PROP);
728:       assertEquals(32, Node.INCRDECR_PROP);
729:       assertEquals(12, Node.COLUMN_BITS);
730:       assertEquals(4095, Node.COLUMN_MASK);
731:       assertEquals(48, Node.DIRECTIVES);
732:       assertEquals(1, Node.DECR_FLAG);
733:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
734:       assertEquals(49, Node.DIRECT_EVAL);
735:       assertEquals(37, Node.OPT_ARG_NAME);
736:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
737:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
738:       assertEquals(57, Node.REFLECTED_OBJECT);
739:       assertEquals(52, Node.LENGTH);
740:       assertEquals(40, Node.ORIGINALNAME_PROP);
741:       assertEquals(15, Node.NO_SIDE_EFFECTS);
742:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
743:       assertEquals(54, Node.SLASH_V);
744:       assertEquals(8, Node.FLAG_NO_THROWS);
745:       assertEquals(50, Node.FREE_CALL);
746:       assertEquals(51, Node.STATIC_SOURCE_FILE);
747:       assertEquals(46, Node.IS_NAMESPACE);
748:       assertEquals(55, Node.INFERRED_FUNCTION);
749:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
750:       assertEquals(39, Node.EMPTY_BLOCK);
751:       assertEquals(57, Node.LAST_PROP);
752:       assertEquals(47, Node.IS_DISPATCHER);
753:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
754:       assertEquals(2, Node.POST_FLAG);
755:       assertEquals(30, Node.VAR_ARGS_NAME);
756:   }
757: }
RegularFileObject[/tmp/EvoSuite_176_1628158441162/com/google/javascript/rhino/Node_176_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:01 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_176_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_176_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_176_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:01.316 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 216, 0);
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean0 = node0.isNoSideEffectsCall();
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node0.removeProp(0);
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean1 = node0.isQuotedString();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean2 = node0.isOr();
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(boolean2);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertNotNull(iterable0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node0.putProp(0, (Object) null);
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);


[MASTER] 10:14:04.204 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_219_1628158444072/com/google/javascript/rhino/Node_219_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_219_1628158444072/com/google/javascript/rhino/Node_219_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:04.204 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:04.204 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:04.205 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 548
[MASTER] 10:14:04.206 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_219_1628158444072/com/google/javascript/rhino/Node_219_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_219_tmp__ESTest extends Node_219_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("", 216, 0);
21:       assertFalse(node0.isLabel());
22:       assertFalse(node0.isReturn());
23:       assertFalse(node0.hasChildren());
24:       assertFalse(node0.isAssign());
25:       assertFalse(node0.isDec());
26:       assertFalse(node0.isOr());
27:       assertFalse(node0.isTypeOf());
28:       assertEquals(884736, node0.getSourcePosition());
29:       assertFalse(node0.isNumber());
30:       assertFalse(node0.hasMoreThanOneChild());
31:       assertFalse(node0.isContinue());
32:       assertFalse(node0.isCast());
33:       assertFalse(node0.isGetElem());
34:       assertFalse(node0.isLabelName());
35:       assertFalse(node0.isExprResult());
36:       assertFalse(node0.isScript());
37:       assertFalse(node0.isBlock());
38:       assertFalse(node0.isNot());
39:       assertFalse(node0.isWith());
40:       assertFalse(node0.isWhile());
41:       assertFalse(node0.hasOneChild());
42:       assertTrue(node0.isString());
43:       assertFalse(node0.isParamList());
44:       assertFalse(node0.isComma());
45:       assertFalse(node0.isNull());
46:       assertEquals(0, node0.getChildCount());
47:       assertFalse(node0.isCall());
48:       assertFalse(node0.isStringKey());
49:       assertFalse(node0.isBreak());
50:       assertFalse(node0.isName());
51:       assertFalse(node0.isTrue());
52:       assertFalse(node0.isAdd());
53:       assertFalse(node0.isNew());
54:       assertFalse(node0.isEmpty());
55:       assertFalse(node0.isVar());
56:       assertFalse(node0.isDo());
57:       assertFalse(node0.isDefaultCase());
58:       assertFalse(node0.isAssignAdd());
59:       assertFalse(node0.isNE());
60:       assertFalse(node0.isGetterDef());
61:       assertFalse(node0.isIn());
62:       assertEquals(216, node0.getLineno());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isDelProp());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isIf());
67:       assertFalse(node0.isVoid());
68:       assertFalse(node0.isDebugger());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.isFor());
72:       assertFalse(node0.isHook());
73:       assertFalse(node0.isTry());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.isSetterDef());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isFalse());
79:       assertFalse(node0.isAnd());
80:       assertFalse(node0.isObjectLit());
81:       assertFalse(node0.isCatch());
82:       assertEquals(0, node0.getCharno());
83:       assertFalse(node0.isInc());
84:       assertFalse(node0.isFunction());
85:       assertFalse(node0.isThrow());
86:       assertEquals(40, node0.getType());
87:       assertNotNull(node0);
88:       assertEquals(43, Node.IS_CONSTANT_NAME);
89:       assertEquals(36, Node.QUOTED_PROP);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
92:       assertEquals(4095, Node.COLUMN_MASK);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(39, Node.EMPTY_BLOCK);
95:       assertEquals(47, Node.IS_DISPATCHER);
96:       assertEquals(37, Node.OPT_ARG_NAME);
97:       assertEquals(2, Node.POST_FLAG);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(56, Node.CHANGE_TIME);
100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
101:       assertEquals(57, Node.REFLECTED_OBJECT);
102:       assertEquals(29, Node.JSDOC_INFO_PROP);
103:       assertEquals(53, Node.INPUT_ID);
104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
107:       assertEquals(55, Node.INFERRED_FUNCTION);
108:       assertEquals(15, Node.NO_SIDE_EFFECTS);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(30, Node.VAR_ARGS_NAME);
111:       assertEquals(49, Node.DIRECT_EVAL);
112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
113:       assertEquals(54, Node.SLASH_V);
114:       assertEquals(12, Node.COLUMN_BITS);
115:       assertEquals(40, Node.ORIGINALNAME_PROP);
116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
118:       assertEquals(46, Node.IS_NAMESPACE);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(32, Node.INCRDECR_PROP);
121:       assertEquals(1, Node.DECR_FLAG);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertEquals(50, Node.FREE_CALL);
124:       
125:       boolean boolean0 = node0.isNoSideEffectsCall();
126:       assertFalse(node0.isLabel());
127:       assertFalse(node0.isReturn());
128:       assertFalse(node0.hasChildren());
129:       assertFalse(node0.isAssign());
130:       assertFalse(node0.isDec());
131:       assertFalse(node0.isOr());
132:       assertFalse(node0.isTypeOf());
133:       assertEquals(884736, node0.getSourcePosition());
134:       assertFalse(node0.isNumber());
135:       assertFalse(node0.hasMoreThanOneChild());
136:       assertFalse(node0.isContinue());
137:       assertFalse(node0.isCast());
138:       assertFalse(node0.isGetElem());
139:       assertFalse(node0.isLabelName());
140:       assertFalse(node0.isExprResult());
141:       assertFalse(node0.isScript());
142:       assertFalse(node0.isBlock());
143:       assertFalse(node0.isNot());
144:       assertFalse(node0.isWith());
145:       assertFalse(node0.isWhile());
146:       assertFalse(node0.hasOneChild());
147:       assertTrue(node0.isString());
148:       assertFalse(node0.isParamList());
149:       assertFalse(node0.isComma());
150:       assertFalse(node0.isNull());
151:       assertEquals(0, node0.getChildCount());
152:       assertFalse(node0.isCall());
153:       assertFalse(node0.isStringKey());
154:       assertFalse(node0.isBreak());
155:       assertFalse(node0.isName());
156:       assertFalse(node0.isTrue());
157:       assertFalse(node0.isAdd());
158:       assertFalse(node0.isNew());
159:       assertFalse(node0.isEmpty());
160:       assertFalse(node0.isVar());
161:       assertFalse(node0.isDo());
162:       assertFalse(node0.isDefaultCase());
163:       assertFalse(node0.isAssignAdd());
164:       assertFalse(node0.isNE());
165:       assertFalse(node0.isGetterDef());
166:       assertFalse(node0.isIn());
167:       assertEquals(216, node0.getLineno());
168:       assertFalse(node0.isArrayLit());
169:       assertFalse(node0.isDelProp());
170:       assertFalse(node0.isSwitch());
171:       assertFalse(node0.isIf());
172:       assertFalse(node0.isVoid());
173:       assertFalse(node0.isDebugger());
174:       assertFalse(node0.isRegExp());
175:       assertFalse(node0.isCase());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isHook());
178:       assertFalse(node0.isTry());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isGetProp());
181:       assertFalse(node0.isSetterDef());
182:       assertFalse(node0.isInstanceOf());
183:       assertFalse(node0.isFalse());
184:       assertFalse(node0.isAnd());
185:       assertFalse(node0.isObjectLit());
186:       assertFalse(node0.isCatch());
187:       assertEquals(0, node0.getCharno());
188:       assertFalse(node0.isInc());
189:       assertFalse(node0.isFunction());
190:       assertFalse(node0.isThrow());
191:       assertEquals(40, node0.getType());
192:       assertFalse(boolean0);
193:       assertEquals(43, Node.IS_CONSTANT_NAME);
194:       assertEquals(36, Node.QUOTED_PROP);
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
197:       assertEquals(4095, Node.COLUMN_MASK);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(47, Node.IS_DISPATCHER);
201:       assertEquals(37, Node.OPT_ARG_NAME);
202:       assertEquals(2, Node.POST_FLAG);
203:       assertEquals(48, Node.DIRECTIVES);
204:       assertEquals(56, Node.CHANGE_TIME);
205:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
206:       assertEquals(57, Node.REFLECTED_OBJECT);
207:       assertEquals(29, Node.JSDOC_INFO_PROP);
208:       assertEquals(53, Node.INPUT_ID);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
214:       assertEquals(57, Node.LAST_PROP);
215:       assertEquals(30, Node.VAR_ARGS_NAME);
216:       assertEquals(49, Node.DIRECT_EVAL);
217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
218:       assertEquals(54, Node.SLASH_V);
219:       assertEquals(12, Node.COLUMN_BITS);
220:       assertEquals(40, Node.ORIGINALNAME_PROP);
221:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
222:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
223:       assertEquals(46, Node.IS_NAMESPACE);
224:       assertEquals(51, Node.STATIC_SOURCE_FILE);
225:       assertEquals(32, Node.INCRDECR_PROP);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
228:       assertEquals(50, Node.FREE_CALL);
229:       
230:       node0.removeProp(0);
231:       assertFalse(node0.isLabel());
232:       assertFalse(node0.isReturn());
233:       assertFalse(node0.hasChildren());
234:       assertFalse(node0.isAssign());
235:       assertFalse(node0.isDec());
236:       assertFalse(node0.isOr());
237:       assertFalse(node0.isTypeOf());
238:       assertEquals(884736, node0.getSourcePosition());
239:       assertFalse(node0.isNumber());
240:       assertFalse(node0.hasMoreThanOneChild());
241:       assertFalse(node0.isContinue());
242:       assertFalse(node0.isCast());
243:       assertFalse(node0.isGetElem());
244:       assertFalse(node0.isLabelName());
245:       assertFalse(node0.isExprResult());
246:       assertFalse(node0.isScript());
247:       assertFalse(node0.isBlock());
248:       assertFalse(node0.isNot());
249:       assertFalse(node0.isWith());
250:       assertFalse(node0.isWhile());
251:       assertFalse(node0.hasOneChild());
252:       assertTrue(node0.isString());
253:       assertFalse(node0.isParamList());
254:       assertFalse(node0.isComma());
255:       assertFalse(node0.isNull());
256:       assertEquals(0, node0.getChildCount());
257:       assertFalse(node0.isCall());
258:       assertFalse(node0.isStringKey());
259:       assertFalse(node0.isBreak());
260:       assertFalse(node0.isName());
261:       assertFalse(node0.isTrue());
262:       assertFalse(node0.isAdd());
263:       assertFalse(node0.isNew());
264:       assertFalse(node0.isEmpty());
265:       assertFalse(node0.isVar());
266:       assertFalse(node0.isDo());
267:       assertFalse(node0.isDefaultCase());
268:       assertFalse(node0.isAssignAdd());
269:       assertFalse(node0.isNE());
270:       assertFalse(node0.isGetterDef());
271:       assertFalse(node0.isIn());
272:       assertEquals(216, node0.getLineno());
273:       assertFalse(node0.isArrayLit());
274:       assertFalse(node0.isDelProp());
275:       assertFalse(node0.isSwitch());
276:       assertFalse(node0.isIf());
277:       assertFalse(node0.isVoid());
278:       assertFalse(node0.isDebugger());
279:       assertFalse(node0.isRegExp());
280:       assertFalse(node0.isCase());
281:       assertFalse(node0.isFor());
282:       assertFalse(node0.isHook());
283:       assertFalse(node0.isTry());
284:       assertFalse(node0.isThis());
285:       assertFalse(node0.isGetProp());
286:       assertFalse(node0.isSetterDef());
287:       assertFalse(node0.isInstanceOf());
288:       assertFalse(node0.isFalse());
289:       assertFalse(node0.isAnd());
290:       assertFalse(node0.isObjectLit());
291:       assertFalse(node0.isCatch());
292:       assertEquals(0, node0.getCharno());
293:       assertFalse(node0.isInc());
294:       assertFalse(node0.isFunction());
295:       assertFalse(node0.isThrow());
296:       assertEquals(40, node0.getType());
297:       assertEquals(43, Node.IS_CONSTANT_NAME);
298:       assertEquals(36, Node.QUOTED_PROP);
299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(8, Node.FLAG_NO_THROWS);
303:       assertEquals(39, Node.EMPTY_BLOCK);
304:       assertEquals(47, Node.IS_DISPATCHER);
305:       assertEquals(37, Node.OPT_ARG_NAME);
306:       assertEquals(2, Node.POST_FLAG);
307:       assertEquals(48, Node.DIRECTIVES);
308:       assertEquals(56, Node.CHANGE_TIME);
309:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
310:       assertEquals(57, Node.REFLECTED_OBJECT);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(53, Node.INPUT_ID);
313:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(55, Node.INFERRED_FUNCTION);
317:       assertEquals(15, Node.NO_SIDE_EFFECTS);
318:       assertEquals(57, Node.LAST_PROP);
319:       assertEquals(30, Node.VAR_ARGS_NAME);
320:       assertEquals(49, Node.DIRECT_EVAL);
321:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
322:       assertEquals(54, Node.SLASH_V);
323:       assertEquals(12, Node.COLUMN_BITS);
324:       assertEquals(40, Node.ORIGINALNAME_PROP);
325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
326:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
327:       assertEquals(46, Node.IS_NAMESPACE);
328:       assertEquals(51, Node.STATIC_SOURCE_FILE);
329:       assertEquals(32, Node.INCRDECR_PROP);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
332:       assertEquals(50, Node.FREE_CALL);
333:       
334:       boolean boolean1 = node0.isQuotedString();
335:       assertTrue(boolean1 == boolean0);
336:       assertFalse(node0.isLabel());
337:       assertFalse(node0.isReturn());
338:       assertFalse(node0.hasChildren());
339:       assertFalse(node0.isAssign());
340:       assertFalse(node0.isDec());
341:       assertFalse(node0.isOr());
342:       assertFalse(node0.isTypeOf());
343:       assertEquals(884736, node0.getSourcePosition());
344:       assertFalse(node0.isNumber());
345:       assertFalse(node0.hasMoreThanOneChild());
346:       assertFalse(node0.isContinue());
347:       assertFalse(node0.isCast());
348:       assertFalse(node0.isGetElem());
349:       assertFalse(node0.isLabelName());
350:       assertFalse(node0.isExprResult());
351:       assertFalse(node0.isScript());
352:       assertFalse(node0.isBlock());
353:       assertFalse(node0.isNot());
354:       assertFalse(node0.isWith());
355:       assertFalse(node0.isWhile());
356:       assertFalse(node0.hasOneChild());
357:       assertTrue(node0.isString());
358:       assertFalse(node0.isParamList());
359:       assertFalse(node0.isComma());
360:       assertFalse(node0.isNull());
361:       assertEquals(0, node0.getChildCount());
362:       assertFalse(node0.isCall());
363:       assertFalse(node0.isStringKey());
364:       assertFalse(node0.isBreak());
365:       assertFalse(node0.isName());
366:       assertFalse(node0.isTrue());
367:       assertFalse(node0.isAdd());
368:       assertFalse(node0.isNew());
369:       assertFalse(node0.isEmpty());
370:       assertFalse(node0.isVar());
371:       assertFalse(node0.isDo());
372:       assertFalse(node0.isDefaultCase());
373:       assertFalse(node0.isAssignAdd());
374:       assertFalse(node0.isNE());
375:       assertFalse(node0.isGetterDef());
376:       assertFalse(node0.isIn());
377:       assertEquals(216, node0.getLineno());
378:       assertFalse(node0.isArrayLit());
379:       assertFalse(node0.isDelProp());
380:       assertFalse(node0.isSwitch());
381:       assertFalse(node0.isIf());
382:       assertFalse(node0.isVoid());
383:       assertFalse(node0.isDebugger());
384:       assertFalse(node0.isRegExp());
385:       assertFalse(node0.isCase());
386:       assertFalse(node0.isFor());
387:       assertFalse(node0.isHook());
388:       assertFalse(node0.isTry());
389:       assertFalse(node0.isThis());
390:       assertFalse(node0.isGetProp());
391:       assertFalse(node0.isSetterDef());
392:       assertFalse(node0.isInstanceOf());
393:       assertFalse(node0.isFalse());
394:       assertFalse(node0.isAnd());
395:       assertFalse(node0.isObjectLit());
396:       assertFalse(node0.isCatch());
397:       assertEquals(0, node0.getCharno());
398:       assertFalse(node0.isInc());
399:       assertFalse(node0.isFunction());
400:       assertFalse(node0.isThrow());
401:       assertEquals(40, node0.getType());
402:       assertFalse(boolean1);
403:       assertEquals(43, Node.IS_CONSTANT_NAME);
404:       assertEquals(36, Node.QUOTED_PROP);
405:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
406:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
407:       assertEquals(4095, Node.COLUMN_MASK);
408:       assertEquals(8, Node.FLAG_NO_THROWS);
409:       assertEquals(39, Node.EMPTY_BLOCK);
410:       assertEquals(47, Node.IS_DISPATCHER);
411:       assertEquals(37, Node.OPT_ARG_NAME);
412:       assertEquals(2, Node.POST_FLAG);
413:       assertEquals(48, Node.DIRECTIVES);
414:       assertEquals(56, Node.CHANGE_TIME);
415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
416:       assertEquals(57, Node.REFLECTED_OBJECT);
417:       assertEquals(29, Node.JSDOC_INFO_PROP);
418:       assertEquals(53, Node.INPUT_ID);
419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
420:       assertEquals(52, Node.LENGTH);
421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
422:       assertEquals(55, Node.INFERRED_FUNCTION);
423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(30, Node.VAR_ARGS_NAME);
426:       assertEquals(49, Node.DIRECT_EVAL);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(54, Node.SLASH_V);
429:       assertEquals(12, Node.COLUMN_BITS);
430:       assertEquals(40, Node.ORIGINALNAME_PROP);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
433:       assertEquals(46, Node.IS_NAMESPACE);
434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
435:       assertEquals(32, Node.INCRDECR_PROP);
436:       assertEquals(1, Node.DECR_FLAG);
437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
438:       assertEquals(50, Node.FREE_CALL);
439:       
440:       boolean boolean2 = node0.isOr();
441:       assertTrue(boolean2 == boolean0);
442:       assertTrue(boolean2 == boolean1);
443:       assertFalse(node0.isLabel());
444:       assertFalse(node0.isReturn());
445:       assertFalse(node0.hasChildren());
446:       assertFalse(node0.isAssign());
447:       assertFalse(node0.isDec());
448:       assertFalse(node0.isOr());
449:       assertFalse(node0.isTypeOf());
450:       assertEquals(884736, node0.getSourcePosition());
451:       assertFalse(node0.isNumber());
452:       assertFalse(node0.hasMoreThanOneChild());
453:       assertFalse(node0.isContinue());
454:       assertFalse(node0.isCast());
455:       assertFalse(node0.isGetElem());
456:       assertFalse(node0.isLabelName());
457:       assertFalse(node0.isExprResult());
458:       assertFalse(node0.isScript());
459:       assertFalse(node0.isBlock());
460:       assertFalse(node0.isNot());
461:       assertFalse(node0.isWith());
462:       assertFalse(node0.isWhile());
463:       assertFalse(node0.hasOneChild());
464:       assertTrue(node0.isString());
465:       assertFalse(node0.isParamList());
466:       assertFalse(node0.isComma());
467:       assertFalse(node0.isNull());
468:       assertEquals(0, node0.getChildCount());
469:       assertFalse(node0.isCall());
470:       assertFalse(node0.isStringKey());
471:       assertFalse(node0.isBreak());
472:       assertFalse(node0.isName());
473:       assertFalse(node0.isTrue());
474:       assertFalse(node0.isAdd());
475:       assertFalse(node0.isNew());
476:       assertFalse(node0.isEmpty());
477:       assertFalse(node0.isVar());
478:       assertFalse(node0.isDo());
479:       assertFalse(node0.isDefaultCase());
480:       assertFalse(node0.isAssignAdd());
481:       assertFalse(node0.isNE());
482:       assertFalse(node0.isGetterDef());
483:       assertFalse(node0.isIn());
484:       assertEquals(216, node0.getLineno());
485:       assertFalse(node0.isArrayLit());
486:       assertFalse(node0.isDelProp());
487:       assertFalse(node0.isSwitch());
488:       assertFalse(node0.isIf());
489:       assertFalse(node0.isVoid());
490:       assertFalse(node0.isDebugger());
491:       assertFalse(node0.isRegExp());
492:       assertFalse(node0.isCase());
493:       assertFalse(node0.isFor());
494:       assertFalse(node0.isHook());
495:       assertFalse(node0.isTry());
496:       assertFalse(node0.isThis());
497:       assertFalse(node0.isGetProp());
498:       assertFalse(node0.isSetterDef());
499:       assertFalse(node0.isInstanceOf());
500:       assertFalse(node0.isFalse());
501:       assertFalse(node0.isAnd());
502:       assertFalse(node0.isObjectLit());
503:       assertFalse(node0.isCatch());
504:       assertEquals(0, node0.getCharno());
505:       assertFalse(node0.isInc());
506:       assertFalse(node0.isFunction());
507:       assertFalse(node0.isThrow());
508:       assertEquals(40, node0.getType());
509:       assertFalse(boolean2);
510:       assertEquals(43, Node.IS_CONSTANT_NAME);
511:       assertEquals(36, Node.QUOTED_PROP);
512:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
514:       assertEquals(4095, Node.COLUMN_MASK);
515:       assertEquals(8, Node.FLAG_NO_THROWS);
516:       assertEquals(39, Node.EMPTY_BLOCK);
517:       assertEquals(47, Node.IS_DISPATCHER);
518:       assertEquals(37, Node.OPT_ARG_NAME);
519:       assertEquals(2, Node.POST_FLAG);
520:       assertEquals(48, Node.DIRECTIVES);
521:       assertEquals(56, Node.CHANGE_TIME);
522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
523:       assertEquals(57, Node.REFLECTED_OBJECT);
524:       assertEquals(29, Node.JSDOC_INFO_PROP);
525:       assertEquals(53, Node.INPUT_ID);
526:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
527:       assertEquals(52, Node.LENGTH);
528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(15, Node.NO_SIDE_EFFECTS);
531:       assertEquals(57, Node.LAST_PROP);
532:       assertEquals(30, Node.VAR_ARGS_NAME);
533:       assertEquals(49, Node.DIRECT_EVAL);
534:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
535:       assertEquals(54, Node.SLASH_V);
536:       assertEquals(12, Node.COLUMN_BITS);
537:       assertEquals(40, Node.ORIGINALNAME_PROP);
538:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
539:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
540:       assertEquals(46, Node.IS_NAMESPACE);
541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
542:       assertEquals(32, Node.INCRDECR_PROP);
543:       assertEquals(1, Node.DECR_FLAG);
544:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
545:       assertEquals(50, Node.FREE_CALL);
546:       
547:       Iterable<Node> iterable0 = node0.children();
548:       assertFalse(iterable0.contains(node0));
549:       assertFalse(node0.isLabel());
550:       assertFalse(node0.isReturn());
551:       assertFalse(node0.hasChildren());
552:       assertFalse(node0.isAssign());
553:       assertFalse(node0.isDec());
554:       assertFalse(node0.isOr());
555:       assertFalse(node0.isTypeOf());
556:       assertEquals(884736, node0.getSourcePosition());
557:       assertFalse(node0.isNumber());
558:       assertFalse(node0.hasMoreThanOneChild());
559:       assertFalse(node0.isContinue());
560:       assertFalse(node0.isCast());
561:       assertFalse(node0.isGetElem());
562:       assertFalse(node0.isLabelName());
563:       assertFalse(node0.isExprResult());
564:       assertFalse(node0.isScript());
565:       assertFalse(node0.isBlock());
566:       assertFalse(node0.isNot());
567:       assertFalse(node0.isWith());
568:       assertFalse(node0.isWhile());
569:       assertFalse(node0.hasOneChild());
570:       assertTrue(node0.isString());
571:       assertFalse(node0.isParamList());
572:       assertFalse(node0.isComma());
573:       assertFalse(node0.isNull());
574:       assertEquals(0, node0.getChildCount());
575:       assertFalse(node0.isCall());
576:       assertFalse(node0.isStringKey());
577:       assertFalse(node0.isBreak());
578:       assertFalse(node0.isName());
579:       assertFalse(node0.isTrue());
580:       assertFalse(node0.isAdd());
581:       assertFalse(node0.isNew());
582:       assertFalse(node0.isEmpty());
583:       assertFalse(node0.isVar());
584:       assertFalse(node0.isDo());
585:       assertFalse(node0.isDefaultCase());
586:       assertFalse(node0.isAssignAdd());
587:       assertFalse(node0.isNE());
588:       assertFalse(node0.isGetterDef());
589:       assertFalse(node0.isIn());
590:       assertEquals(216, node0.getLineno());
591:       assertFalse(node0.isArrayLit());
592:       assertFalse(node0.isDelProp());
593:       assertFalse(node0.isSwitch());
594:       assertFalse(node0.isIf());
595:       assertFalse(node0.isVoid());
596:       assertFalse(node0.isDebugger());
597:       assertFalse(node0.isRegExp());
598:       assertFalse(node0.isCase());
599:       assertFalse(node0.isFor());
600:       assertFalse(node0.isHook());
601:       assertFalse(node0.isTry());
602:       assertFalse(node0.isThis());
603:       assertFalse(node0.isGetProp());
604:       assertFalse(node0.isSetterDef());
605:       assertFalse(node0.isInstanceOf());
606:       assertFalse(node0.isFalse());
607:       assertFalse(node0.isAnd());
608:       assertFalse(node0.isObjectLit());
609:       assertFalse(node0.isCatch());
610:       assertEquals(0, node0.getCharno());
611:       assertFalse(node0.isInc());
612:       assertFalse(node0.isFunction());
613:       assertFalse(node0.isThrow());
614:       assertEquals(40, node0.getType());
615:       assertNotNull(iterable0);
616:       assertEquals(43, Node.IS_CONSTANT_NAME);
617:       assertEquals(36, Node.QUOTED_PROP);
618:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
619:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
620:       assertEquals(4095, Node.COLUMN_MASK);
621:       assertEquals(8, Node.FLAG_NO_THROWS);
622:       assertEquals(39, Node.EMPTY_BLOCK);
623:       assertEquals(47, Node.IS_DISPATCHER);
624:       assertEquals(37, Node.OPT_ARG_NAME);
625:       assertEquals(2, Node.POST_FLAG);
626:       assertEquals(48, Node.DIRECTIVES);
627:       assertEquals(56, Node.CHANGE_TIME);
628:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
629:       assertEquals(57, Node.REFLECTED_OBJECT);
630:       assertEquals(29, Node.JSDOC_INFO_PROP);
631:       assertEquals(53, Node.INPUT_ID);
632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
633:       assertEquals(52, Node.LENGTH);
634:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
635:       assertEquals(55, Node.INFERRED_FUNCTION);
636:       assertEquals(15, Node.NO_SIDE_EFFECTS);
637:       assertEquals(57, Node.LAST_PROP);
638:       assertEquals(30, Node.VAR_ARGS_NAME);
639:       assertEquals(49, Node.DIRECT_EVAL);
640:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
641:       assertEquals(54, Node.SLASH_V);
642:       assertEquals(12, Node.COLUMN_BITS);
643:       assertEquals(40, Node.ORIGINALNAME_PROP);
644:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
645:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
646:       assertEquals(46, Node.IS_NAMESPACE);
647:       assertEquals(51, Node.STATIC_SOURCE_FILE);
648:       assertEquals(32, Node.INCRDECR_PROP);
649:       assertEquals(1, Node.DECR_FLAG);
650:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
651:       assertEquals(50, Node.FREE_CALL);
652:       
653:       Node node1 = node0.getLastChild();
654:       assertFalse(node0.isLabel());
655:       assertFalse(node0.isReturn());
656:       assertFalse(node0.hasChildren());
657:       assertFalse(node0.isAssign());
658:       assertFalse(node0.isDec());
659:       assertFalse(node0.isOr());
660:       assertFalse(node0.isTypeOf());
661:       assertEquals(884736, node0.getSourcePosition());
662:       assertFalse(node0.isNumber());
663:       assertFalse(node0.hasMoreThanOneChild());
664:       assertFalse(node0.isContinue());
665:       assertFalse(node0.isCast());
666:       assertFalse(node0.isGetElem());
667:       assertFalse(node0.isLabelName());
668:       assertFalse(node0.isExprResult());
669:       assertFalse(node0.isScript());
670:       assertFalse(node0.isBlock());
671:       assertFalse(node0.isNot());
672:       assertFalse(node0.isWith());
673:       assertFalse(node0.isWhile());
674:       assertFalse(node0.hasOneChild());
675:       assertTrue(node0.isString());
676:       assertFalse(node0.isParamList());
677:       assertFalse(node0.isComma());
678:       assertFalse(node0.isNull());
679:       assertEquals(0, node0.getChildCount());
680:       assertFalse(node0.isCall());
681:       assertFalse(node0.isStringKey());
682:       assertFalse(node0.isBreak());
683:       assertFalse(node0.isName());
684:       assertFalse(node0.isTrue());
685:       assertFalse(node0.isAdd());
686:       assertFalse(node0.isNew());
687:       assertFalse(node0.isEmpty());
688:       assertFalse(node0.isVar());
689:       assertFalse(node0.isDo());
690:       assertFalse(node0.isDefaultCase());
691:       assertFalse(node0.isAssignAdd());
692:       assertFalse(node0.isNE());
693:       assertFalse(node0.isGetterDef());
694:       assertFalse(node0.isIn());
695:       assertEquals(216, node0.getLineno());
696:       assertFalse(node0.isArrayLit());
697:       assertFalse(node0.isDelProp());
698:       assertFalse(node0.isSwitch());
699:       assertFalse(node0.isIf());
700:       assertFalse(node0.isVoid());
701:       assertFalse(node0.isDebugger());
702:       assertFalse(node0.isRegExp());
703:       assertFalse(node0.isCase());
704:       assertFalse(node0.isFor());
705:       assertFalse(node0.isHook());
706:       assertFalse(node0.isTry());
707:       assertFalse(node0.isThis());
708:       assertFalse(node0.isGetProp());
709:       assertFalse(node0.isSetterDef());
710:       assertFalse(node0.isInstanceOf());
711:       assertFalse(node0.isFalse());
712:       assertFalse(node0.isAnd());
713:       assertFalse(node0.isObjectLit());
714:       assertFalse(node0.isCatch());
715:       assertEquals(0, node0.getCharno());
716:       assertFalse(node0.isInc());
717:       assertFalse(node0.isFunction());
718:       assertFalse(node0.isThrow());
719:       assertEquals(40, node0.getType());
720:       assertNull(node1);
721:       assertEquals(43, Node.IS_CONSTANT_NAME);
722:       assertEquals(36, Node.QUOTED_PROP);
723:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
724:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
725:       assertEquals(4095, Node.COLUMN_MASK);
726:       assertEquals(8, Node.FLAG_NO_THROWS);
727:       assertEquals(39, Node.EMPTY_BLOCK);
728:       assertEquals(47, Node.IS_DISPATCHER);
729:       assertEquals(37, Node.OPT_ARG_NAME);
730:       assertEquals(2, Node.POST_FLAG);
731:       assertEquals(48, Node.DIRECTIVES);
732:       assertEquals(56, Node.CHANGE_TIME);
733:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
734:       assertEquals(57, Node.REFLECTED_OBJECT);
735:       assertEquals(29, Node.JSDOC_INFO_PROP);
736:       assertEquals(53, Node.INPUT_ID);
737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(55, Node.INFERRED_FUNCTION);
741:       assertEquals(15, Node.NO_SIDE_EFFECTS);
742:       assertEquals(57, Node.LAST_PROP);
743:       assertEquals(30, Node.VAR_ARGS_NAME);
744:       assertEquals(49, Node.DIRECT_EVAL);
745:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
746:       assertEquals(54, Node.SLASH_V);
747:       assertEquals(12, Node.COLUMN_BITS);
748:       assertEquals(40, Node.ORIGINALNAME_PROP);
749:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
751:       assertEquals(46, Node.IS_NAMESPACE);
752:       assertEquals(51, Node.STATIC_SOURCE_FILE);
753:       assertEquals(32, Node.INCRDECR_PROP);
754:       assertEquals(1, Node.DECR_FLAG);
755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
756:       assertEquals(50, Node.FREE_CALL);
757:   }
758: }
RegularFileObject[/tmp/EvoSuite_219_1628158444072/com/google/javascript/rhino/Node_219_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_219_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_219_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_219_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:04.219 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 216, 0);
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertNotNull(node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

boolean boolean0 = node0.isNoSideEffectsCall();
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

node0.removeProp(0);
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

boolean boolean1 = node0.isQuotedString();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(boolean1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

boolean boolean2 = node0.isOr();
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(boolean2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertNotNull(iterable0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Node node1 = node0.getLastChild();
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(884736, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(216, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertNull(node1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);


[MASTER] 10:14:07.180 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_251_1628158447138/com/google/javascript/rhino/Node_251_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_251_1628158447138/com/google/javascript/rhino/Node_251_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:07.180 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:07.180 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:07.180 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 237
[MASTER] 10:14:07.181 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_251_1628158447138/com/google/javascript/rhino/Node_251_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_251_tmp__ESTest extends Node_251_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f6,j$O");
23:       assertFalse(boolean0);
24:       
25:       Node node0 = Node.newString(682, "<invalid>");
26:       assertEquals(0, node0.getChildCount());
27:       assertFalse(node0.isParamList());
28:       assertFalse(node0.isNull());
29:       assertFalse(node0.isDefaultCase());
30:       assertFalse(node0.isSetterDef());
31:       assertFalse(node0.isNew());
32:       assertFalse(node0.isFunction());
33:       assertFalse(node0.isDebugger());
34:       assertFalse(node0.isStringKey());
35:       assertFalse(node0.isVar());
36:       assertFalse(node0.isArrayLit());
37:       assertFalse(node0.isContinue());
38:       assertEquals((-1), node0.getLineno());
39:       assertFalse(node0.isIn());
40:       assertFalse(node0.isNE());
41:       assertFalse(node0.isCase());
42:       assertFalse(node0.isNumber());
43:       assertFalse(node0.isGetterDef());
44:       assertFalse(node0.isInc());
45:       assertFalse(node0.hasOneChild());
46:       assertFalse(node0.isTry());
47:       assertFalse(node0.isHook());
48:       assertFalse(node0.isBlock());
49:       assertFalse(node0.isFor());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isIf());
52:       assertFalse(node0.isRegExp());
53:       assertFalse(node0.isCatch());
54:       assertFalse(node0.hasMoreThanOneChild());
55:       assertFalse(node0.isInstanceOf());
56:       assertFalse(node0.isThis());
57:       assertFalse(node0.isComma());
58:       assertEquals(682, node0.getType());
59:       assertFalse(node0.isAnd());
60:       assertFalse(node0.isNot());
61:       assertFalse(node0.isObjectLit());
62:       assertFalse(node0.isGetProp());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.isSwitch());
65:       assertEquals((-1), node0.getCharno());
66:       assertFalse(node0.isThrow());
67:       assertFalse(node0.isLabelName());
68:       assertFalse(node0.isFalse());
69:       assertFalse(node0.isCast());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.isLabel());
74:       assertEquals((-1), node0.getSourcePosition());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.isDo());
77:       assertFalse(node0.isString());
78:       assertFalse(node0.isWhile());
79:       assertFalse(node0.isEmpty());
80:       assertFalse(node0.isAdd());
81:       assertFalse(node0.isVoid());
82:       assertFalse(node0.isTrue());
83:       assertFalse(node0.isAssign());
84:       assertFalse(node0.isBreak());
85:       assertFalse(node0.isDec());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isTypeOf());
88:       assertFalse(node0.isName());
89:       assertFalse(node0.isGetElem());
90:       assertFalse(node0.isExprResult());
91:       assertFalse(node0.isCall());
92:       assertNotNull(node0);
93:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
94:       assertEquals(54, Node.SLASH_V);
95:       assertEquals(52, Node.LENGTH);
96:       assertEquals(15, Node.NO_SIDE_EFFECTS);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(49, Node.DIRECT_EVAL);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
106:       assertEquals(32, Node.INCRDECR_PROP);
107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(1, Node.DECR_FLAG);
110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
111:       assertEquals(4095, Node.COLUMN_MASK);
112:       assertEquals(12, Node.COLUMN_BITS);
113:       assertEquals(53, Node.INPUT_ID);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(43, Node.IS_CONSTANT_NAME);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
120:       assertEquals(56, Node.CHANGE_TIME);
121:       assertEquals(36, Node.QUOTED_PROP);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(8, Node.FLAG_NO_THROWS);
124:       assertEquals(39, Node.EMPTY_BLOCK);
125:       assertEquals(40, Node.ORIGINALNAME_PROP);
126:       assertEquals(47, Node.IS_DISPATCHER);
127:       assertEquals(2, Node.POST_FLAG);
128:       assertEquals(30, Node.VAR_ARGS_NAME);
129:       
130:       boolean boolean1 = node0.isCast();
131:       assertTrue(boolean1 == boolean0);
132:       assertEquals(0, node0.getChildCount());
133:       assertFalse(node0.isParamList());
134:       assertFalse(node0.isNull());
135:       assertFalse(node0.isDefaultCase());
136:       assertFalse(node0.isSetterDef());
137:       assertFalse(node0.isNew());
138:       assertFalse(node0.isFunction());
139:       assertFalse(node0.isDebugger());
140:       assertFalse(node0.isStringKey());
141:       assertFalse(node0.isVar());
142:       assertFalse(node0.isArrayLit());
143:       assertFalse(node0.isContinue());
144:       assertEquals((-1), node0.getLineno());
145:       assertFalse(node0.isIn());
146:       assertFalse(node0.isNE());
147:       assertFalse(node0.isCase());
148:       assertFalse(node0.isNumber());
149:       assertFalse(node0.isGetterDef());
150:       assertFalse(node0.isInc());
151:       assertFalse(node0.hasOneChild());
152:       assertFalse(node0.isTry());
153:       assertFalse(node0.isHook());
154:       assertFalse(node0.isBlock());
155:       assertFalse(node0.isFor());
156:       assertFalse(node0.isWith());
157:       assertFalse(node0.isIf());
158:       assertFalse(node0.isRegExp());
159:       assertFalse(node0.isCatch());
160:       assertFalse(node0.hasMoreThanOneChild());
161:       assertFalse(node0.isInstanceOf());
162:       assertFalse(node0.isThis());
163:       assertFalse(node0.isComma());
164:       assertEquals(682, node0.getType());
165:       assertFalse(node0.isAnd());
166:       assertFalse(node0.isNot());
167:       assertFalse(node0.isObjectLit());
168:       assertFalse(node0.isGetProp());
169:       assertFalse(node0.isScript());
170:       assertFalse(node0.isSwitch());
171:       assertEquals((-1), node0.getCharno());
172:       assertFalse(node0.isThrow());
173:       assertFalse(node0.isLabelName());
174:       assertFalse(node0.isFalse());
175:       assertFalse(node0.isCast());
176:       assertFalse(node0.isOr());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isReturn());
179:       assertFalse(node0.isLabel());
180:       assertEquals((-1), node0.getSourcePosition());
181:       assertFalse(node0.hasChildren());
182:       assertFalse(node0.isDo());
183:       assertFalse(node0.isString());
184:       assertFalse(node0.isWhile());
185:       assertFalse(node0.isEmpty());
186:       assertFalse(node0.isAdd());
187:       assertFalse(node0.isVoid());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isAssign());
190:       assertFalse(node0.isBreak());
191:       assertFalse(node0.isDec());
192:       assertFalse(node0.isDelProp());
193:       assertFalse(node0.isTypeOf());
194:       assertFalse(node0.isName());
195:       assertFalse(node0.isGetElem());
196:       assertFalse(node0.isExprResult());
197:       assertFalse(node0.isCall());
198:       assertFalse(boolean1);
199:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
200:       assertEquals(54, Node.SLASH_V);
201:       assertEquals(52, Node.LENGTH);
202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
203:       assertEquals(57, Node.LAST_PROP);
204:       assertEquals(49, Node.DIRECT_EVAL);
205:       assertEquals(50, Node.FREE_CALL);
206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(57, Node.REFLECTED_OBJECT);
209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
210:       assertEquals(48, Node.DIRECTIVES);
211:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
212:       assertEquals(32, Node.INCRDECR_PROP);
213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
214:       assertEquals(37, Node.OPT_ARG_NAME);
215:       assertEquals(1, Node.DECR_FLAG);
216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
217:       assertEquals(4095, Node.COLUMN_MASK);
218:       assertEquals(12, Node.COLUMN_BITS);
219:       assertEquals(53, Node.INPUT_ID);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(43, Node.IS_CONSTANT_NAME);
222:       assertEquals(29, Node.JSDOC_INFO_PROP);
223:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
224:       assertEquals(55, Node.INFERRED_FUNCTION);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(56, Node.CHANGE_TIME);
227:       assertEquals(36, Node.QUOTED_PROP);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       assertEquals(39, Node.EMPTY_BLOCK);
231:       assertEquals(40, Node.ORIGINALNAME_PROP);
232:       assertEquals(47, Node.IS_DISPATCHER);
233:       assertEquals(2, Node.POST_FLAG);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       
236:       Iterable<Node> iterable0 = node0.children();
237:       assertFalse(iterable0.contains(node0));
238:       assertEquals(0, node0.getChildCount());
239:       assertFalse(node0.isParamList());
240:       assertFalse(node0.isNull());
241:       assertFalse(node0.isDefaultCase());
242:       assertFalse(node0.isSetterDef());
243:       assertFalse(node0.isNew());
244:       assertFalse(node0.isFunction());
245:       assertFalse(node0.isDebugger());
246:       assertFalse(node0.isStringKey());
247:       assertFalse(node0.isVar());
248:       assertFalse(node0.isArrayLit());
249:       assertFalse(node0.isContinue());
250:       assertEquals((-1), node0.getLineno());
251:       assertFalse(node0.isIn());
252:       assertFalse(node0.isNE());
253:       assertFalse(node0.isCase());
254:       assertFalse(node0.isNumber());
255:       assertFalse(node0.isGetterDef());
256:       assertFalse(node0.isInc());
257:       assertFalse(node0.hasOneChild());
258:       assertFalse(node0.isTry());
259:       assertFalse(node0.isHook());
260:       assertFalse(node0.isBlock());
261:       assertFalse(node0.isFor());
262:       assertFalse(node0.isWith());
263:       assertFalse(node0.isIf());
264:       assertFalse(node0.isRegExp());
265:       assertFalse(node0.isCatch());
266:       assertFalse(node0.hasMoreThanOneChild());
267:       assertFalse(node0.isInstanceOf());
268:       assertFalse(node0.isThis());
269:       assertFalse(node0.isComma());
270:       assertEquals(682, node0.getType());
271:       assertFalse(node0.isAnd());
272:       assertFalse(node0.isNot());
273:       assertFalse(node0.isObjectLit());
274:       assertFalse(node0.isGetProp());
275:       assertFalse(node0.isScript());
276:       assertFalse(node0.isSwitch());
277:       assertEquals((-1), node0.getCharno());
278:       assertFalse(node0.isThrow());
279:       assertFalse(node0.isLabelName());
280:       assertFalse(node0.isFalse());
281:       assertFalse(node0.isCast());
282:       assertFalse(node0.isOr());
283:       assertFalse(node0.isAssignAdd());
284:       assertFalse(node0.isReturn());
285:       assertFalse(node0.isLabel());
286:       assertEquals((-1), node0.getSourcePosition());
287:       assertFalse(node0.hasChildren());
288:       assertFalse(node0.isDo());
289:       assertFalse(node0.isString());
290:       assertFalse(node0.isWhile());
291:       assertFalse(node0.isEmpty());
292:       assertFalse(node0.isAdd());
293:       assertFalse(node0.isVoid());
294:       assertFalse(node0.isTrue());
295:       assertFalse(node0.isAssign());
296:       assertFalse(node0.isBreak());
297:       assertFalse(node0.isDec());
298:       assertFalse(node0.isDelProp());
299:       assertFalse(node0.isTypeOf());
300:       assertFalse(node0.isName());
301:       assertFalse(node0.isGetElem());
302:       assertFalse(node0.isExprResult());
303:       assertFalse(node0.isCall());
304:       assertNotNull(iterable0);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(54, Node.SLASH_V);
307:       assertEquals(52, Node.LENGTH);
308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
309:       assertEquals(57, Node.LAST_PROP);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(50, Node.FREE_CALL);
312:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
313:       assertEquals(46, Node.IS_NAMESPACE);
314:       assertEquals(57, Node.REFLECTED_OBJECT);
315:       assertEquals(51, Node.STATIC_SOURCE_FILE);
316:       assertEquals(48, Node.DIRECTIVES);
317:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
318:       assertEquals(32, Node.INCRDECR_PROP);
319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
320:       assertEquals(37, Node.OPT_ARG_NAME);
321:       assertEquals(1, Node.DECR_FLAG);
322:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
323:       assertEquals(4095, Node.COLUMN_MASK);
324:       assertEquals(12, Node.COLUMN_BITS);
325:       assertEquals(53, Node.INPUT_ID);
326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
327:       assertEquals(43, Node.IS_CONSTANT_NAME);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(55, Node.INFERRED_FUNCTION);
331:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
332:       assertEquals(56, Node.CHANGE_TIME);
333:       assertEquals(36, Node.QUOTED_PROP);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(8, Node.FLAG_NO_THROWS);
336:       assertEquals(39, Node.EMPTY_BLOCK);
337:       assertEquals(40, Node.ORIGINALNAME_PROP);
338:       assertEquals(47, Node.IS_DISPATCHER);
339:       assertEquals(2, Node.POST_FLAG);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       
342:       boolean boolean2 = node0.isOptionalArg();
343:       assertTrue(boolean2 == boolean1);
344:       assertTrue(boolean2 == boolean0);
345:       assertEquals(0, node0.getChildCount());
346:       assertFalse(node0.isParamList());
347:       assertFalse(node0.isNull());
348:       assertFalse(node0.isDefaultCase());
349:       assertFalse(node0.isSetterDef());
350:       assertFalse(node0.isNew());
351:       assertFalse(node0.isFunction());
352:       assertFalse(node0.isDebugger());
353:       assertFalse(node0.isStringKey());
354:       assertFalse(node0.isVar());
355:       assertFalse(node0.isArrayLit());
356:       assertFalse(node0.isContinue());
357:       assertEquals((-1), node0.getLineno());
358:       assertFalse(node0.isIn());
359:       assertFalse(node0.isNE());
360:       assertFalse(node0.isCase());
361:       assertFalse(node0.isNumber());
362:       assertFalse(node0.isGetterDef());
363:       assertFalse(node0.isInc());
364:       assertFalse(node0.hasOneChild());
365:       assertFalse(node0.isTry());
366:       assertFalse(node0.isHook());
367:       assertFalse(node0.isBlock());
368:       assertFalse(node0.isFor());
369:       assertFalse(node0.isWith());
370:       assertFalse(node0.isIf());
371:       assertFalse(node0.isRegExp());
372:       assertFalse(node0.isCatch());
373:       assertFalse(node0.hasMoreThanOneChild());
374:       assertFalse(node0.isInstanceOf());
375:       assertFalse(node0.isThis());
376:       assertFalse(node0.isComma());
377:       assertEquals(682, node0.getType());
378:       assertFalse(node0.isAnd());
379:       assertFalse(node0.isNot());
380:       assertFalse(node0.isObjectLit());
381:       assertFalse(node0.isGetProp());
382:       assertFalse(node0.isScript());
383:       assertFalse(node0.isSwitch());
384:       assertEquals((-1), node0.getCharno());
385:       assertFalse(node0.isThrow());
386:       assertFalse(node0.isLabelName());
387:       assertFalse(node0.isFalse());
388:       assertFalse(node0.isCast());
389:       assertFalse(node0.isOr());
390:       assertFalse(node0.isAssignAdd());
391:       assertFalse(node0.isReturn());
392:       assertFalse(node0.isLabel());
393:       assertEquals((-1), node0.getSourcePosition());
394:       assertFalse(node0.hasChildren());
395:       assertFalse(node0.isDo());
396:       assertFalse(node0.isString());
397:       assertFalse(node0.isWhile());
398:       assertFalse(node0.isEmpty());
399:       assertFalse(node0.isAdd());
400:       assertFalse(node0.isVoid());
401:       assertFalse(node0.isTrue());
402:       assertFalse(node0.isAssign());
403:       assertFalse(node0.isBreak());
404:       assertFalse(node0.isDec());
405:       assertFalse(node0.isDelProp());
406:       assertFalse(node0.isTypeOf());
407:       assertFalse(node0.isName());
408:       assertFalse(node0.isGetElem());
409:       assertFalse(node0.isExprResult());
410:       assertFalse(node0.isCall());
411:       assertFalse(boolean2);
412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
413:       assertEquals(54, Node.SLASH_V);
414:       assertEquals(52, Node.LENGTH);
415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
416:       assertEquals(57, Node.LAST_PROP);
417:       assertEquals(49, Node.DIRECT_EVAL);
418:       assertEquals(50, Node.FREE_CALL);
419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
420:       assertEquals(46, Node.IS_NAMESPACE);
421:       assertEquals(57, Node.REFLECTED_OBJECT);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(48, Node.DIRECTIVES);
424:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
425:       assertEquals(32, Node.INCRDECR_PROP);
426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
427:       assertEquals(37, Node.OPT_ARG_NAME);
428:       assertEquals(1, Node.DECR_FLAG);
429:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
430:       assertEquals(4095, Node.COLUMN_MASK);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(53, Node.INPUT_ID);
433:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
434:       assertEquals(43, Node.IS_CONSTANT_NAME);
435:       assertEquals(29, Node.JSDOC_INFO_PROP);
436:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
437:       assertEquals(55, Node.INFERRED_FUNCTION);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertEquals(56, Node.CHANGE_TIME);
440:       assertEquals(36, Node.QUOTED_PROP);
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       assertEquals(8, Node.FLAG_NO_THROWS);
443:       assertEquals(39, Node.EMPTY_BLOCK);
444:       assertEquals(40, Node.ORIGINALNAME_PROP);
445:       assertEquals(47, Node.IS_DISPATCHER);
446:       assertEquals(2, Node.POST_FLAG);
447:       assertEquals(30, Node.VAR_ARGS_NAME);
448:   }
449: }
RegularFileObject[/tmp/EvoSuite_251_1628158447138/com/google/javascript/rhino/Node_251_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_251_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_251_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_251_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:07.185 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f6,j$O");
assertFalse(boolean0);

Node node0 = Node.newString(682, "<invalid>");
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInc());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(682, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(node0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean1 = node0.isCast();
assertTrue(boolean1 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInc());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(682, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(boolean1);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInc());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(682, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(iterable0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean2 = node0.isOptionalArg();
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInc());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(682, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(boolean2);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);


[MASTER] 10:14:08.488 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_264_1628158448440/com/google/javascript/rhino/Node_264_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_264_1628158448440/com/google/javascript/rhino/Node_264_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:08.488 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:08.488 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:08.489 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 607
[MASTER] 10:14:08.490 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_264_1628158448440/com/google/javascript/rhino/Node_264_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:08 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_264_tmp__ESTest extends Node_264_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(0);
22:       assertFalse(node0.isBreak());
23:       assertFalse(node0.isFalse());
24:       assertFalse(node0.isGetProp());
25:       assertFalse(node0.isInstanceOf());
26:       assertFalse(node0.isThrow());
27:       assertFalse(node0.isComma());
28:       assertFalse(node0.isThis());
29:       assertFalse(node0.isHook());
30:       assertFalse(node0.isString());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isNot());
33:       assertFalse(node0.isCase());
34:       assertFalse(node0.isScript());
35:       assertFalse(node0.isAnd());
36:       assertFalse(node0.isObjectLit());
37:       assertEquals((-1), node0.getCharno());
38:       assertFalse(node0.isDelProp());
39:       assertFalse(node0.hasChildren());
40:       assertFalse(node0.isDec());
41:       assertEquals((-1), node0.getSourcePosition());
42:       assertFalse(node0.isAssign());
43:       assertFalse(node0.isLabelName());
44:       assertFalse(node0.isTypeOf());
45:       assertFalse(node0.isEmpty());
46:       assertFalse(node0.isArrayLit());
47:       assertFalse(node0.isGetElem());
48:       assertFalse(node0.isAssignAdd());
49:       assertFalse(node0.isLabel());
50:       assertFalse(node0.isReturn());
51:       assertFalse(node0.isDefaultCase());
52:       assertFalse(node0.isDo());
53:       assertFalse(node0.isVoid());
54:       assertFalse(node0.isNew());
55:       assertFalse(node0.isAdd());
56:       assertFalse(node0.isExprResult());
57:       assertEquals(0, node0.getType());
58:       assertFalse(node0.isOr());
59:       assertFalse(node0.isTrue());
60:       assertFalse(node0.isNull());
61:       assertFalse(node0.isName());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isSetterDef());
64:       assertEquals(0, node0.getChildCount());
65:       assertFalse(node0.isVar());
66:       assertFalse(node0.isBlock());
67:       assertFalse(node0.isWhile());
68:       assertFalse(node0.isFunction());
69:       assertFalse(node0.isContinue());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isStringKey());
72:       assertFalse(node0.isParamList());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isIf());
75:       assertFalse(node0.isNumber());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isTry());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isRegExp());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isCatch());
84:       assertFalse(node0.isInc());
85:       assertFalse(node0.isIn());
86:       assertEquals((-1), node0.getLineno());
87:       assertFalse(node0.isNE());
88:       assertNotNull(node0);
89:       assertEquals(49, Node.DIRECT_EVAL);
90:       assertEquals(57, Node.LAST_PROP);
91:       assertEquals(12, Node.COLUMN_BITS);
92:       assertEquals(30, Node.VAR_ARGS_NAME);
93:       assertEquals(51, Node.STATIC_SOURCE_FILE);
94:       assertEquals(52, Node.LENGTH);
95:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(32, Node.INCRDECR_PROP);
99:       assertEquals(1, Node.DECR_FLAG);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(29, Node.JSDOC_INFO_PROP);
102:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
105:       assertEquals(8, Node.FLAG_NO_THROWS);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(48, Node.DIRECTIVES);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(4095, Node.COLUMN_MASK);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(50, Node.FREE_CALL);
119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
120:       assertEquals(2, Node.POST_FLAG);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(54, Node.SLASH_V);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       
126:       JSDocInfo jSDocInfo0 = new JSDocInfo();
127:       assertFalse(jSDocInfo0.isExterns());
128:       assertNull(jSDocInfo0.getDeprecationReason());
129:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
130:       assertFalse(jSDocInfo0.isNoShadow());
131:       assertFalse(jSDocInfo0.isDeprecated());
132:       assertFalse(jSDocInfo0.makesStructs());
133:       assertFalse(jSDocInfo0.isWizaction());
134:       assertFalse(jSDocInfo0.isJavaDispatch());
135:       assertFalse(jSDocInfo0.isOverride());
136:       assertEquals("JSDocInfo", jSDocInfo0.toString());
137:       assertFalse(jSDocInfo0.makesDicts());
138:       assertFalse(jSDocInfo0.isNgInject());
139:       assertFalse(jSDocInfo0.isNoSideEffects());
140:       assertNull(jSDocInfo0.getMeaning());
141:       assertNull(jSDocInfo0.getVersion());
142:       assertFalse(jSDocInfo0.isJaggerModule());
143:       assertFalse(jSDocInfo0.isJaggerProvide());
144:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
145:       assertFalse(jSDocInfo0.isDisposes());
146:       assertNull(jSDocInfo0.getOriginalCommentString());
147:       assertFalse(jSDocInfo0.isMappedIdGenerator());
148:       assertNull(jSDocInfo0.getLendsName());
149:       assertNull(jSDocInfo0.getLicense());
150:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
151:       assertFalse(jSDocInfo0.isStableIdGenerator());
152:       assertNull(jSDocInfo0.getReturnDescription());
153:       assertFalse(jSDocInfo0.hasModifies());
154:       assertFalse(jSDocInfo0.isExpose());
155:       assertFalse(jSDocInfo0.hasType());
156:       assertFalse(jSDocInfo0.hasTypedefType());
157:       assertFalse(jSDocInfo0.isHidden());
158:       assertFalse(jSDocInfo0.isExport());
159:       assertFalse(jSDocInfo0.hasReturnType());
160:       assertEquals(0, jSDocInfo0.getParameterCount());
161:       assertFalse(jSDocInfo0.isNoAlias());
162:       assertFalse(jSDocInfo0.hasBaseType());
163:       assertFalse(jSDocInfo0.shouldPreserveTry());
164:       assertFalse(jSDocInfo0.isNoTypeCheck());
165:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
166:       assertFalse(jSDocInfo0.containsDeclaration());
167:       assertFalse(jSDocInfo0.isConstant());
168:       assertNull(jSDocInfo0.getFileOverview());
169:       assertNull(jSDocInfo0.getVisibility());
170:       assertFalse(jSDocInfo0.isImplicitCast());
171:       assertFalse(jSDocInfo0.isConstructor());
172:       assertNull(jSDocInfo0.getDescription());
173:       assertFalse(jSDocInfo0.isJaggerInject());
174:       assertFalse(jSDocInfo0.isDefine());
175:       assertNull(jSDocInfo0.getBlockDescription());
176:       assertFalse(jSDocInfo0.hasFileOverview());
177:       assertFalse(jSDocInfo0.isInterface());
178:       assertFalse(jSDocInfo0.hasEnumParameterType());
179:       assertFalse(jSDocInfo0.isNoCompile());
180:       assertFalse(jSDocInfo0.isIdGenerator());
181:       assertFalse(jSDocInfo0.hasThisType());
182:       assertNotNull(jSDocInfo0);
183:       
184:       boolean boolean0 = node0.isNoSideEffectsCall();
185:       assertFalse(node0.isBreak());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isGetProp());
188:       assertFalse(node0.isInstanceOf());
189:       assertFalse(node0.isThrow());
190:       assertFalse(node0.isComma());
191:       assertFalse(node0.isThis());
192:       assertFalse(node0.isHook());
193:       assertFalse(node0.isString());
194:       assertFalse(node0.isSwitch());
195:       assertFalse(node0.isNot());
196:       assertFalse(node0.isCase());
197:       assertFalse(node0.isScript());
198:       assertFalse(node0.isAnd());
199:       assertFalse(node0.isObjectLit());
200:       assertEquals((-1), node0.getCharno());
201:       assertFalse(node0.isDelProp());
202:       assertFalse(node0.hasChildren());
203:       assertFalse(node0.isDec());
204:       assertEquals((-1), node0.getSourcePosition());
205:       assertFalse(node0.isAssign());
206:       assertFalse(node0.isLabelName());
207:       assertFalse(node0.isTypeOf());
208:       assertFalse(node0.isEmpty());
209:       assertFalse(node0.isArrayLit());
210:       assertFalse(node0.isGetElem());
211:       assertFalse(node0.isAssignAdd());
212:       assertFalse(node0.isLabel());
213:       assertFalse(node0.isReturn());
214:       assertFalse(node0.isDefaultCase());
215:       assertFalse(node0.isDo());
216:       assertFalse(node0.isVoid());
217:       assertFalse(node0.isNew());
218:       assertFalse(node0.isAdd());
219:       assertFalse(node0.isExprResult());
220:       assertEquals(0, node0.getType());
221:       assertFalse(node0.isOr());
222:       assertFalse(node0.isTrue());
223:       assertFalse(node0.isNull());
224:       assertFalse(node0.isName());
225:       assertFalse(node0.isCall());
226:       assertFalse(node0.isSetterDef());
227:       assertEquals(0, node0.getChildCount());
228:       assertFalse(node0.isVar());
229:       assertFalse(node0.isBlock());
230:       assertFalse(node0.isWhile());
231:       assertFalse(node0.isFunction());
232:       assertFalse(node0.isContinue());
233:       assertFalse(node0.isDebugger());
234:       assertFalse(node0.isStringKey());
235:       assertFalse(node0.isParamList());
236:       assertFalse(node0.isGetterDef());
237:       assertFalse(node0.isIf());
238:       assertFalse(node0.isNumber());
239:       assertFalse(node0.isCast());
240:       assertFalse(node0.hasOneChild());
241:       assertFalse(node0.hasMoreThanOneChild());
242:       assertFalse(node0.isTry());
243:       assertFalse(node0.isFor());
244:       assertFalse(node0.isRegExp());
245:       assertFalse(node0.isWith());
246:       assertFalse(node0.isCatch());
247:       assertFalse(node0.isInc());
248:       assertFalse(node0.isIn());
249:       assertEquals((-1), node0.getLineno());
250:       assertFalse(node0.isNE());
251:       assertFalse(boolean0);
252:       assertEquals(49, Node.DIRECT_EVAL);
253:       assertEquals(57, Node.LAST_PROP);
254:       assertEquals(12, Node.COLUMN_BITS);
255:       assertEquals(30, Node.VAR_ARGS_NAME);
256:       assertEquals(51, Node.STATIC_SOURCE_FILE);
257:       assertEquals(52, Node.LENGTH);
258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
261:       assertEquals(32, Node.INCRDECR_PROP);
262:       assertEquals(1, Node.DECR_FLAG);
263:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
264:       assertEquals(29, Node.JSDOC_INFO_PROP);
265:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
266:       assertEquals(56, Node.CHANGE_TIME);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertEquals(57, Node.REFLECTED_OBJECT);
270:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
271:       assertEquals(37, Node.OPT_ARG_NAME);
272:       assertEquals(48, Node.DIRECTIVES);
273:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
274:       assertEquals(55, Node.INFERRED_FUNCTION);
275:       assertEquals(43, Node.IS_CONSTANT_NAME);
276:       assertEquals(4095, Node.COLUMN_MASK);
277:       assertEquals(36, Node.QUOTED_PROP);
278:       assertEquals(53, Node.INPUT_ID);
279:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
280:       assertEquals(39, Node.EMPTY_BLOCK);
281:       assertEquals(50, Node.FREE_CALL);
282:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
283:       assertEquals(2, Node.POST_FLAG);
284:       assertEquals(47, Node.IS_DISPATCHER);
285:       assertEquals(46, Node.IS_NAMESPACE);
286:       assertEquals(54, Node.SLASH_V);
287:       assertEquals(40, Node.ORIGINALNAME_PROP);
288:       
289:       node0.removeProp(0);
290:       assertFalse(node0.isBreak());
291:       assertFalse(node0.isFalse());
292:       assertFalse(node0.isGetProp());
293:       assertFalse(node0.isInstanceOf());
294:       assertFalse(node0.isThrow());
295:       assertFalse(node0.isComma());
296:       assertFalse(node0.isThis());
297:       assertFalse(node0.isHook());
298:       assertFalse(node0.isString());
299:       assertFalse(node0.isSwitch());
300:       assertFalse(node0.isNot());
301:       assertFalse(node0.isCase());
302:       assertFalse(node0.isScript());
303:       assertFalse(node0.isAnd());
304:       assertFalse(node0.isObjectLit());
305:       assertEquals((-1), node0.getCharno());
306:       assertFalse(node0.isDelProp());
307:       assertFalse(node0.hasChildren());
308:       assertFalse(node0.isDec());
309:       assertEquals((-1), node0.getSourcePosition());
310:       assertFalse(node0.isAssign());
311:       assertFalse(node0.isLabelName());
312:       assertFalse(node0.isTypeOf());
313:       assertFalse(node0.isEmpty());
314:       assertFalse(node0.isArrayLit());
315:       assertFalse(node0.isGetElem());
316:       assertFalse(node0.isAssignAdd());
317:       assertFalse(node0.isLabel());
318:       assertFalse(node0.isReturn());
319:       assertFalse(node0.isDefaultCase());
320:       assertFalse(node0.isDo());
321:       assertFalse(node0.isVoid());
322:       assertFalse(node0.isNew());
323:       assertFalse(node0.isAdd());
324:       assertFalse(node0.isExprResult());
325:       assertEquals(0, node0.getType());
326:       assertFalse(node0.isOr());
327:       assertFalse(node0.isTrue());
328:       assertFalse(node0.isNull());
329:       assertFalse(node0.isName());
330:       assertFalse(node0.isCall());
331:       assertFalse(node0.isSetterDef());
332:       assertEquals(0, node0.getChildCount());
333:       assertFalse(node0.isVar());
334:       assertFalse(node0.isBlock());
335:       assertFalse(node0.isWhile());
336:       assertFalse(node0.isFunction());
337:       assertFalse(node0.isContinue());
338:       assertFalse(node0.isDebugger());
339:       assertFalse(node0.isStringKey());
340:       assertFalse(node0.isParamList());
341:       assertFalse(node0.isGetterDef());
342:       assertFalse(node0.isIf());
343:       assertFalse(node0.isNumber());
344:       assertFalse(node0.isCast());
345:       assertFalse(node0.hasOneChild());
346:       assertFalse(node0.hasMoreThanOneChild());
347:       assertFalse(node0.isTry());
348:       assertFalse(node0.isFor());
349:       assertFalse(node0.isRegExp());
350:       assertFalse(node0.isWith());
351:       assertFalse(node0.isCatch());
352:       assertFalse(node0.isInc());
353:       assertFalse(node0.isIn());
354:       assertEquals((-1), node0.getLineno());
355:       assertFalse(node0.isNE());
356:       assertEquals(49, Node.DIRECT_EVAL);
357:       assertEquals(57, Node.LAST_PROP);
358:       assertEquals(12, Node.COLUMN_BITS);
359:       assertEquals(30, Node.VAR_ARGS_NAME);
360:       assertEquals(51, Node.STATIC_SOURCE_FILE);
361:       assertEquals(52, Node.LENGTH);
362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
364:       assertEquals(15, Node.NO_SIDE_EFFECTS);
365:       assertEquals(32, Node.INCRDECR_PROP);
366:       assertEquals(1, Node.DECR_FLAG);
367:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
368:       assertEquals(29, Node.JSDOC_INFO_PROP);
369:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
370:       assertEquals(56, Node.CHANGE_TIME);
371:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
372:       assertEquals(8, Node.FLAG_NO_THROWS);
373:       assertEquals(57, Node.REFLECTED_OBJECT);
374:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
375:       assertEquals(37, Node.OPT_ARG_NAME);
376:       assertEquals(48, Node.DIRECTIVES);
377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
378:       assertEquals(55, Node.INFERRED_FUNCTION);
379:       assertEquals(43, Node.IS_CONSTANT_NAME);
380:       assertEquals(4095, Node.COLUMN_MASK);
381:       assertEquals(36, Node.QUOTED_PROP);
382:       assertEquals(53, Node.INPUT_ID);
383:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
384:       assertEquals(39, Node.EMPTY_BLOCK);
385:       assertEquals(50, Node.FREE_CALL);
386:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
387:       assertEquals(2, Node.POST_FLAG);
388:       assertEquals(47, Node.IS_DISPATCHER);
389:       assertEquals(46, Node.IS_NAMESPACE);
390:       assertEquals(54, Node.SLASH_V);
391:       assertEquals(40, Node.ORIGINALNAME_PROP);
392:       
393:       boolean boolean1 = node0.isQuotedString();
394:       assertTrue(boolean1 == boolean0);
395:       assertFalse(node0.isBreak());
396:       assertFalse(node0.isFalse());
397:       assertFalse(node0.isGetProp());
398:       assertFalse(node0.isInstanceOf());
399:       assertFalse(node0.isThrow());
400:       assertFalse(node0.isComma());
401:       assertFalse(node0.isThis());
402:       assertFalse(node0.isHook());
403:       assertFalse(node0.isString());
404:       assertFalse(node0.isSwitch());
405:       assertFalse(node0.isNot());
406:       assertFalse(node0.isCase());
407:       assertFalse(node0.isScript());
408:       assertFalse(node0.isAnd());
409:       assertFalse(node0.isObjectLit());
410:       assertEquals((-1), node0.getCharno());
411:       assertFalse(node0.isDelProp());
412:       assertFalse(node0.hasChildren());
413:       assertFalse(node0.isDec());
414:       assertEquals((-1), node0.getSourcePosition());
415:       assertFalse(node0.isAssign());
416:       assertFalse(node0.isLabelName());
417:       assertFalse(node0.isTypeOf());
418:       assertFalse(node0.isEmpty());
419:       assertFalse(node0.isArrayLit());
420:       assertFalse(node0.isGetElem());
421:       assertFalse(node0.isAssignAdd());
422:       assertFalse(node0.isLabel());
423:       assertFalse(node0.isReturn());
424:       assertFalse(node0.isDefaultCase());
425:       assertFalse(node0.isDo());
426:       assertFalse(node0.isVoid());
427:       assertFalse(node0.isNew());
428:       assertFalse(node0.isAdd());
429:       assertFalse(node0.isExprResult());
430:       assertEquals(0, node0.getType());
431:       assertFalse(node0.isOr());
432:       assertFalse(node0.isTrue());
433:       assertFalse(node0.isNull());
434:       assertFalse(node0.isName());
435:       assertFalse(node0.isCall());
436:       assertFalse(node0.isSetterDef());
437:       assertEquals(0, node0.getChildCount());
438:       assertFalse(node0.isVar());
439:       assertFalse(node0.isBlock());
440:       assertFalse(node0.isWhile());
441:       assertFalse(node0.isFunction());
442:       assertFalse(node0.isContinue());
443:       assertFalse(node0.isDebugger());
444:       assertFalse(node0.isStringKey());
445:       assertFalse(node0.isParamList());
446:       assertFalse(node0.isGetterDef());
447:       assertFalse(node0.isIf());
448:       assertFalse(node0.isNumber());
449:       assertFalse(node0.isCast());
450:       assertFalse(node0.hasOneChild());
451:       assertFalse(node0.hasMoreThanOneChild());
452:       assertFalse(node0.isTry());
453:       assertFalse(node0.isFor());
454:       assertFalse(node0.isRegExp());
455:       assertFalse(node0.isWith());
456:       assertFalse(node0.isCatch());
457:       assertFalse(node0.isInc());
458:       assertFalse(node0.isIn());
459:       assertEquals((-1), node0.getLineno());
460:       assertFalse(node0.isNE());
461:       assertFalse(boolean1);
462:       assertEquals(49, Node.DIRECT_EVAL);
463:       assertEquals(57, Node.LAST_PROP);
464:       assertEquals(12, Node.COLUMN_BITS);
465:       assertEquals(30, Node.VAR_ARGS_NAME);
466:       assertEquals(51, Node.STATIC_SOURCE_FILE);
467:       assertEquals(52, Node.LENGTH);
468:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
469:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
470:       assertEquals(15, Node.NO_SIDE_EFFECTS);
471:       assertEquals(32, Node.INCRDECR_PROP);
472:       assertEquals(1, Node.DECR_FLAG);
473:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
474:       assertEquals(29, Node.JSDOC_INFO_PROP);
475:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
476:       assertEquals(56, Node.CHANGE_TIME);
477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
478:       assertEquals(8, Node.FLAG_NO_THROWS);
479:       assertEquals(57, Node.REFLECTED_OBJECT);
480:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
481:       assertEquals(37, Node.OPT_ARG_NAME);
482:       assertEquals(48, Node.DIRECTIVES);
483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
484:       assertEquals(55, Node.INFERRED_FUNCTION);
485:       assertEquals(43, Node.IS_CONSTANT_NAME);
486:       assertEquals(4095, Node.COLUMN_MASK);
487:       assertEquals(36, Node.QUOTED_PROP);
488:       assertEquals(53, Node.INPUT_ID);
489:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
490:       assertEquals(39, Node.EMPTY_BLOCK);
491:       assertEquals(50, Node.FREE_CALL);
492:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
493:       assertEquals(2, Node.POST_FLAG);
494:       assertEquals(47, Node.IS_DISPATCHER);
495:       assertEquals(46, Node.IS_NAMESPACE);
496:       assertEquals(54, Node.SLASH_V);
497:       assertEquals(40, Node.ORIGINALNAME_PROP);
498:       
499:       boolean boolean2 = node0.isOr();
500:       assertTrue(boolean2 == boolean0);
501:       assertTrue(boolean2 == boolean1);
502:       assertFalse(node0.isBreak());
503:       assertFalse(node0.isFalse());
504:       assertFalse(node0.isGetProp());
505:       assertFalse(node0.isInstanceOf());
506:       assertFalse(node0.isThrow());
507:       assertFalse(node0.isComma());
508:       assertFalse(node0.isThis());
509:       assertFalse(node0.isHook());
510:       assertFalse(node0.isString());
511:       assertFalse(node0.isSwitch());
512:       assertFalse(node0.isNot());
513:       assertFalse(node0.isCase());
514:       assertFalse(node0.isScript());
515:       assertFalse(node0.isAnd());
516:       assertFalse(node0.isObjectLit());
517:       assertEquals((-1), node0.getCharno());
518:       assertFalse(node0.isDelProp());
519:       assertFalse(node0.hasChildren());
520:       assertFalse(node0.isDec());
521:       assertEquals((-1), node0.getSourcePosition());
522:       assertFalse(node0.isAssign());
523:       assertFalse(node0.isLabelName());
524:       assertFalse(node0.isTypeOf());
525:       assertFalse(node0.isEmpty());
526:       assertFalse(node0.isArrayLit());
527:       assertFalse(node0.isGetElem());
528:       assertFalse(node0.isAssignAdd());
529:       assertFalse(node0.isLabel());
530:       assertFalse(node0.isReturn());
531:       assertFalse(node0.isDefaultCase());
532:       assertFalse(node0.isDo());
533:       assertFalse(node0.isVoid());
534:       assertFalse(node0.isNew());
535:       assertFalse(node0.isAdd());
536:       assertFalse(node0.isExprResult());
537:       assertEquals(0, node0.getType());
538:       assertFalse(node0.isOr());
539:       assertFalse(node0.isTrue());
540:       assertFalse(node0.isNull());
541:       assertFalse(node0.isName());
542:       assertFalse(node0.isCall());
543:       assertFalse(node0.isSetterDef());
544:       assertEquals(0, node0.getChildCount());
545:       assertFalse(node0.isVar());
546:       assertFalse(node0.isBlock());
547:       assertFalse(node0.isWhile());
548:       assertFalse(node0.isFunction());
549:       assertFalse(node0.isContinue());
550:       assertFalse(node0.isDebugger());
551:       assertFalse(node0.isStringKey());
552:       assertFalse(node0.isParamList());
553:       assertFalse(node0.isGetterDef());
554:       assertFalse(node0.isIf());
555:       assertFalse(node0.isNumber());
556:       assertFalse(node0.isCast());
557:       assertFalse(node0.hasOneChild());
558:       assertFalse(node0.hasMoreThanOneChild());
559:       assertFalse(node0.isTry());
560:       assertFalse(node0.isFor());
561:       assertFalse(node0.isRegExp());
562:       assertFalse(node0.isWith());
563:       assertFalse(node0.isCatch());
564:       assertFalse(node0.isInc());
565:       assertFalse(node0.isIn());
566:       assertEquals((-1), node0.getLineno());
567:       assertFalse(node0.isNE());
568:       assertFalse(boolean2);
569:       assertEquals(49, Node.DIRECT_EVAL);
570:       assertEquals(57, Node.LAST_PROP);
571:       assertEquals(12, Node.COLUMN_BITS);
572:       assertEquals(30, Node.VAR_ARGS_NAME);
573:       assertEquals(51, Node.STATIC_SOURCE_FILE);
574:       assertEquals(52, Node.LENGTH);
575:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
576:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
577:       assertEquals(15, Node.NO_SIDE_EFFECTS);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(1, Node.DECR_FLAG);
580:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
581:       assertEquals(29, Node.JSDOC_INFO_PROP);
582:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
583:       assertEquals(56, Node.CHANGE_TIME);
584:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
585:       assertEquals(8, Node.FLAG_NO_THROWS);
586:       assertEquals(57, Node.REFLECTED_OBJECT);
587:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
588:       assertEquals(37, Node.OPT_ARG_NAME);
589:       assertEquals(48, Node.DIRECTIVES);
590:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
591:       assertEquals(55, Node.INFERRED_FUNCTION);
592:       assertEquals(43, Node.IS_CONSTANT_NAME);
593:       assertEquals(4095, Node.COLUMN_MASK);
594:       assertEquals(36, Node.QUOTED_PROP);
595:       assertEquals(53, Node.INPUT_ID);
596:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
597:       assertEquals(39, Node.EMPTY_BLOCK);
598:       assertEquals(50, Node.FREE_CALL);
599:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
600:       assertEquals(2, Node.POST_FLAG);
601:       assertEquals(47, Node.IS_DISPATCHER);
602:       assertEquals(46, Node.IS_NAMESPACE);
603:       assertEquals(54, Node.SLASH_V);
604:       assertEquals(40, Node.ORIGINALNAME_PROP);
605:       
606:       Iterable<Node> iterable0 = node0.children();
607:       assertFalse(iterable0.contains(node0));
608:       assertFalse(node0.isBreak());
609:       assertFalse(node0.isFalse());
610:       assertFalse(node0.isGetProp());
611:       assertFalse(node0.isInstanceOf());
612:       assertFalse(node0.isThrow());
613:       assertFalse(node0.isComma());
614:       assertFalse(node0.isThis());
615:       assertFalse(node0.isHook());
616:       assertFalse(node0.isString());
617:       assertFalse(node0.isSwitch());
618:       assertFalse(node0.isNot());
619:       assertFalse(node0.isCase());
620:       assertFalse(node0.isScript());
621:       assertFalse(node0.isAnd());
622:       assertFalse(node0.isObjectLit());
623:       assertEquals((-1), node0.getCharno());
624:       assertFalse(node0.isDelProp());
625:       assertFalse(node0.hasChildren());
626:       assertFalse(node0.isDec());
627:       assertEquals((-1), node0.getSourcePosition());
628:       assertFalse(node0.isAssign());
629:       assertFalse(node0.isLabelName());
630:       assertFalse(node0.isTypeOf());
631:       assertFalse(node0.isEmpty());
632:       assertFalse(node0.isArrayLit());
633:       assertFalse(node0.isGetElem());
634:       assertFalse(node0.isAssignAdd());
635:       assertFalse(node0.isLabel());
636:       assertFalse(node0.isReturn());
637:       assertFalse(node0.isDefaultCase());
638:       assertFalse(node0.isDo());
639:       assertFalse(node0.isVoid());
640:       assertFalse(node0.isNew());
641:       assertFalse(node0.isAdd());
642:       assertFalse(node0.isExprResult());
643:       assertEquals(0, node0.getType());
644:       assertFalse(node0.isOr());
645:       assertFalse(node0.isTrue());
646:       assertFalse(node0.isNull());
647:       assertFalse(node0.isName());
648:       assertFalse(node0.isCall());
649:       assertFalse(node0.isSetterDef());
650:       assertEquals(0, node0.getChildCount());
651:       assertFalse(node0.isVar());
652:       assertFalse(node0.isBlock());
653:       assertFalse(node0.isWhile());
654:       assertFalse(node0.isFunction());
655:       assertFalse(node0.isContinue());
656:       assertFalse(node0.isDebugger());
657:       assertFalse(node0.isStringKey());
658:       assertFalse(node0.isParamList());
659:       assertFalse(node0.isGetterDef());
660:       assertFalse(node0.isIf());
661:       assertFalse(node0.isNumber());
662:       assertFalse(node0.isCast());
663:       assertFalse(node0.hasOneChild());
664:       assertFalse(node0.hasMoreThanOneChild());
665:       assertFalse(node0.isTry());
666:       assertFalse(node0.isFor());
667:       assertFalse(node0.isRegExp());
668:       assertFalse(node0.isWith());
669:       assertFalse(node0.isCatch());
670:       assertFalse(node0.isInc());
671:       assertFalse(node0.isIn());
672:       assertEquals((-1), node0.getLineno());
673:       assertFalse(node0.isNE());
674:       assertNotNull(iterable0);
675:       assertEquals(49, Node.DIRECT_EVAL);
676:       assertEquals(57, Node.LAST_PROP);
677:       assertEquals(12, Node.COLUMN_BITS);
678:       assertEquals(30, Node.VAR_ARGS_NAME);
679:       assertEquals(51, Node.STATIC_SOURCE_FILE);
680:       assertEquals(52, Node.LENGTH);
681:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
682:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
683:       assertEquals(15, Node.NO_SIDE_EFFECTS);
684:       assertEquals(32, Node.INCRDECR_PROP);
685:       assertEquals(1, Node.DECR_FLAG);
686:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
687:       assertEquals(29, Node.JSDOC_INFO_PROP);
688:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
689:       assertEquals(56, Node.CHANGE_TIME);
690:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
691:       assertEquals(8, Node.FLAG_NO_THROWS);
692:       assertEquals(57, Node.REFLECTED_OBJECT);
693:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
694:       assertEquals(37, Node.OPT_ARG_NAME);
695:       assertEquals(48, Node.DIRECTIVES);
696:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
697:       assertEquals(55, Node.INFERRED_FUNCTION);
698:       assertEquals(43, Node.IS_CONSTANT_NAME);
699:       assertEquals(4095, Node.COLUMN_MASK);
700:       assertEquals(36, Node.QUOTED_PROP);
701:       assertEquals(53, Node.INPUT_ID);
702:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
703:       assertEquals(39, Node.EMPTY_BLOCK);
704:       assertEquals(50, Node.FREE_CALL);
705:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
706:       assertEquals(2, Node.POST_FLAG);
707:       assertEquals(47, Node.IS_DISPATCHER);
708:       assertEquals(46, Node.IS_NAMESPACE);
709:       assertEquals(54, Node.SLASH_V);
710:       assertEquals(40, Node.ORIGINALNAME_PROP);
711:   }
712: }
RegularFileObject[/tmp/EvoSuite_264_1628158448440/com/google/javascript/rhino/Node_264_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:08 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_264_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_264_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_264_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:08.500 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertNotNull(node0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getDeprecationReason());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isOverride());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isJaggerProvide());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.hasReturnType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.hasThisType());
assertNotNull(jSDocInfo0);

boolean boolean0 = node0.isNoSideEffectsCall();
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(boolean0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.removeProp(0);
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean1 = node0.isQuotedString();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(boolean1);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean2 = node0.isOr();
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(boolean2);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertNotNull(iterable0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);


[MASTER] 10:14:16.366 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_366_1628158455877/com/google/javascript/rhino/Node_366_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_366_1628158455877/com/google/javascript/rhino/Node_366_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:16.366 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:16.366 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:16.367 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1709
[MASTER] 10:14:16.368 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_366_1628158455877/com/google/javascript/rhino/Node_366_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:15 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_366_tmp__ESTest extends Node_366_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((double) 54, 54, 103);
21:       assertEquals(0, node0.getChildCount());
22:       assertFalse(node0.isParamList());
23:       assertFalse(node0.isNull());
24:       assertFalse(node0.isDefaultCase());
25:       assertFalse(node0.isSetterDef());
26:       assertEquals(54, node0.getLineno());
27:       assertFalse(node0.isDebugger());
28:       assertEquals(221287, node0.getSourcePosition());
29:       assertFalse(node0.isArrayLit());
30:       assertFalse(node0.isVar());
31:       assertFalse(node0.isStringKey());
32:       assertFalse(node0.isFunction());
33:       assertFalse(node0.isContinue());
34:       assertFalse(node0.hasMoreThanOneChild());
35:       assertFalse(node0.isIn());
36:       assertEquals(39, node0.getType());
37:       assertFalse(node0.isNE());
38:       assertFalse(node0.isInc());
39:       assertFalse(node0.isGetterDef());
40:       assertFalse(node0.isCase());
41:       assertFalse(node0.isHook());
42:       assertFalse(node0.hasOneChild());
43:       assertFalse(node0.isBlock());
44:       assertFalse(node0.isTry());
45:       assertFalse(node0.isFor());
46:       assertFalse(node0.isRegExp());
47:       assertFalse(node0.isThis());
48:       assertFalse(node0.isIf());
49:       assertFalse(node0.isWith());
50:       assertFalse(node0.isInstanceOf());
51:       assertFalse(node0.isCatch());
52:       assertFalse(node0.isObjectLit());
53:       assertEquals(103, node0.getCharno());
54:       assertFalse(node0.isAnd());
55:       assertFalse(node0.isScript());
56:       assertFalse(node0.isNot());
57:       assertFalse(node0.isGetProp());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.isThrow());
60:       assertFalse(node0.isSwitch());
61:       assertFalse(node0.isFalse());
62:       assertFalse(node0.isCast());
63:       assertTrue(node0.isNumber());
64:       assertFalse(node0.isOr());
65:       assertFalse(node0.isLabel());
66:       assertFalse(node0.isAssignAdd());
67:       assertFalse(node0.isReturn());
68:       assertFalse(node0.isWhile());
69:       assertFalse(node0.isNew());
70:       assertFalse(node0.isDo());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isString());
74:       assertFalse(node0.isName());
75:       assertFalse(node0.isTrue());
76:       assertFalse(node0.isTypeOf());
77:       assertFalse(node0.isBreak());
78:       assertFalse(node0.isDelProp());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isVoid());
81:       assertFalse(node0.isComma());
82:       assertFalse(node0.isAssign());
83:       assertFalse(node0.isDec());
84:       assertFalse(node0.isGetElem());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isCall());
87:       assertNotNull(node0);
88:       assertEquals(52, Node.LENGTH);
89:       assertEquals(40, Node.ORIGINALNAME_PROP);
90:       assertEquals(15, Node.NO_SIDE_EFFECTS);
91:       assertEquals(49, Node.DIRECT_EVAL);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
94:       assertEquals(8, Node.FLAG_NO_THROWS);
95:       assertEquals(54, Node.SLASH_V);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(57, Node.REFLECTED_OBJECT);
98:       assertEquals(32, Node.INCRDECR_PROP);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(37, Node.OPT_ARG_NAME);
101:       assertEquals(48, Node.DIRECTIVES);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(12, Node.COLUMN_BITS);
106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(53, Node.INPUT_ID);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(46, Node.IS_NAMESPACE);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(39, Node.EMPTY_BLOCK);
119:       assertEquals(30, Node.VAR_ARGS_NAME);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(2, Node.POST_FLAG);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       
125:       Node node1 = new Node((-930), node0, node0, node0, 461845907, 46);
126:       assertFalse(node1.equals((Object)node0));
127:       assertEquals(0, node0.getChildCount());
128:       assertFalse(node0.isParamList());
129:       assertFalse(node0.isNull());
130:       assertFalse(node0.isDefaultCase());
131:       assertFalse(node0.isSetterDef());
132:       assertEquals(54, node0.getLineno());
133:       assertFalse(node0.isDebugger());
134:       assertEquals(221287, node0.getSourcePosition());
135:       assertFalse(node0.isArrayLit());
136:       assertFalse(node0.isVar());
137:       assertFalse(node0.isStringKey());
138:       assertFalse(node0.isFunction());
139:       assertFalse(node0.isContinue());
140:       assertFalse(node0.hasMoreThanOneChild());
141:       assertFalse(node0.isIn());
142:       assertEquals(39, node0.getType());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isInc());
145:       assertFalse(node0.isGetterDef());
146:       assertFalse(node0.isCase());
147:       assertFalse(node0.isHook());
148:       assertFalse(node0.hasOneChild());
149:       assertFalse(node0.isBlock());
150:       assertFalse(node0.isTry());
151:       assertFalse(node0.isFor());
152:       assertFalse(node0.isRegExp());
153:       assertFalse(node0.isThis());
154:       assertFalse(node0.isIf());
155:       assertFalse(node0.isWith());
156:       assertFalse(node0.isInstanceOf());
157:       assertFalse(node0.isCatch());
158:       assertFalse(node0.isObjectLit());
159:       assertEquals(103, node0.getCharno());
160:       assertFalse(node0.isAnd());
161:       assertFalse(node0.isScript());
162:       assertFalse(node0.isNot());
163:       assertFalse(node0.isGetProp());
164:       assertFalse(node0.isLabelName());
165:       assertFalse(node0.isThrow());
166:       assertFalse(node0.isSwitch());
167:       assertFalse(node0.isFalse());
168:       assertFalse(node0.isCast());
169:       assertTrue(node0.isNumber());
170:       assertFalse(node0.isOr());
171:       assertFalse(node0.isLabel());
172:       assertFalse(node0.isAssignAdd());
173:       assertFalse(node0.isReturn());
174:       assertFalse(node0.isWhile());
175:       assertFalse(node0.isNew());
176:       assertFalse(node0.isDo());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isString());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isTrue());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isBreak());
184:       assertFalse(node0.isDelProp());
185:       assertFalse(node0.hasChildren());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isComma());
188:       assertFalse(node0.isAssign());
189:       assertFalse(node0.isDec());
190:       assertFalse(node0.isGetElem());
191:       assertFalse(node0.isExprResult());
192:       assertFalse(node0.isCall());
193:       assertFalse(node1.isArrayLit());
194:       assertEquals((-930), node1.getType());
195:       assertTrue(node1.hasOneChild());
196:       assertFalse(node1.isDelProp());
197:       assertFalse(node1.isTry());
198:       assertFalse(node1.isFor());
199:       assertFalse(node1.isIf());
200:       assertFalse(node1.isFunction());
201:       assertFalse(node1.isVoid());
202:       assertFalse(node1.isRegExp());
203:       assertTrue(node1.hasChildren());
204:       assertEquals(1, node1.getChildCount());
205:       assertFalse(node1.isCase());
206:       assertFalse(node1.isParamList());
207:       assertFalse(node1.isDebugger());
208:       assertFalse(node1.isGetterDef());
209:       assertFalse(node1.isString());
210:       assertFalse(node1.isHook());
211:       assertFalse(node1.isThrow());
212:       assertFalse(node1.isThis());
213:       assertFalse(node1.isBlock());
214:       assertFalse(node1.isFalse());
215:       assertFalse(node1.isInstanceOf());
216:       assertFalse(node1.isContinue());
217:       assertFalse(node1.isCatch());
218:       assertFalse(node1.isNE());
219:       assertFalse(node1.isSetterDef());
220:       assertFalse(node1.isInc());
221:       assertFalse(node1.isIn());
222:       assertFalse(node1.isCast());
223:       assertFalse(node1.isGetElem());
224:       assertFalse(node1.isLabelName());
225:       assertFalse(node1.isTypeOf());
226:       assertFalse(node1.isExprResult());
227:       assertFalse(node1.isDec());
228:       assertEquals(46, node1.getCharno());
229:       assertFalse(node1.isLabel());
230:       assertFalse(node1.isWith());
231:       assertFalse(node1.isAssign());
232:       assertFalse(node1.hasMoreThanOneChild());
233:       assertFalse(node1.isObjectLit());
234:       assertFalse(node1.isReturn());
235:       assertEquals(1935224878, node1.getSourcePosition());
236:       assertFalse(node1.isAnd());
237:       assertFalse(node1.isWhile());
238:       assertFalse(node1.isScript());
239:       assertFalse(node1.isGetProp());
240:       assertFalse(node1.isNot());
241:       assertFalse(node1.isNumber());
242:       assertFalse(node1.isVar());
243:       assertFalse(node1.isCall());
244:       assertFalse(node1.isName());
245:       assertFalse(node1.isStringKey());
246:       assertFalse(node1.isComma());
247:       assertFalse(node1.isSwitch());
248:       assertFalse(node1.isBreak());
249:       assertFalse(node1.isDo());
250:       assertFalse(node1.isDefaultCase());
251:       assertFalse(node1.isAssignAdd());
252:       assertFalse(node1.isTrue());
253:       assertFalse(node1.isNull());
254:       assertFalse(node1.isNew());
255:       assertFalse(node1.isOr());
256:       assertFalse(node1.isEmpty());
257:       assertFalse(node1.isAdd());
258:       assertEquals(472467, node1.getLineno());
259:       assertNotNull(node1);
260:       assertEquals(52, Node.LENGTH);
261:       assertEquals(40, Node.ORIGINALNAME_PROP);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(49, Node.DIRECT_EVAL);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
266:       assertEquals(8, Node.FLAG_NO_THROWS);
267:       assertEquals(54, Node.SLASH_V);
268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
269:       assertEquals(57, Node.REFLECTED_OBJECT);
270:       assertEquals(32, Node.INCRDECR_PROP);
271:       assertEquals(4095, Node.COLUMN_MASK);
272:       assertEquals(37, Node.OPT_ARG_NAME);
273:       assertEquals(48, Node.DIRECTIVES);
274:       assertEquals(1, Node.DECR_FLAG);
275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
276:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
277:       assertEquals(12, Node.COLUMN_BITS);
278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
279:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
280:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
281:       assertEquals(29, Node.JSDOC_INFO_PROP);
282:       assertEquals(53, Node.INPUT_ID);
283:       assertEquals(56, Node.CHANGE_TIME);
284:       assertEquals(43, Node.IS_CONSTANT_NAME);
285:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
286:       assertEquals(36, Node.QUOTED_PROP);
287:       assertEquals(46, Node.IS_NAMESPACE);
288:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
289:       assertEquals(55, Node.INFERRED_FUNCTION);
290:       assertEquals(39, Node.EMPTY_BLOCK);
291:       assertEquals(30, Node.VAR_ARGS_NAME);
292:       assertEquals(57, Node.LAST_PROP);
293:       assertEquals(2, Node.POST_FLAG);
294:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
295:       assertEquals(47, Node.IS_DISPATCHER);
296:       assertEquals(4095, Node.COLUMN_MASK);
297:       assertEquals(48, Node.DIRECTIVES);
298:       assertEquals(55, Node.INFERRED_FUNCTION);
299:       assertEquals(39, Node.EMPTY_BLOCK);
300:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
302:       assertEquals(57, Node.REFLECTED_OBJECT);
303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
304:       assertEquals(52, Node.LENGTH);
305:       assertEquals(29, Node.JSDOC_INFO_PROP);
306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
307:       assertEquals(53, Node.INPUT_ID);
308:       assertEquals(56, Node.CHANGE_TIME);
309:       assertEquals(36, Node.QUOTED_PROP);
310:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
311:       assertEquals(8, Node.FLAG_NO_THROWS);
312:       assertEquals(49, Node.DIRECT_EVAL);
313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
314:       assertEquals(51, Node.STATIC_SOURCE_FILE);
315:       assertEquals(32, Node.INCRDECR_PROP);
316:       assertEquals(1, Node.DECR_FLAG);
317:       assertEquals(37, Node.OPT_ARG_NAME);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(57, Node.LAST_PROP);
320:       assertEquals(47, Node.IS_DISPATCHER);
321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
322:       assertEquals(2, Node.POST_FLAG);
323:       assertEquals(30, Node.VAR_ARGS_NAME);
324:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
325:       assertEquals(12, Node.COLUMN_BITS);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(40, Node.ORIGINALNAME_PROP);
328:       assertEquals(43, Node.IS_CONSTANT_NAME);
329:       assertEquals(50, Node.FREE_CALL);
330:       assertEquals(46, Node.IS_NAMESPACE);
331:       assertEquals(54, Node.SLASH_V);
332:       
333:       Node node2 = new Node(54, node1, node1, node1);
334:       assertFalse(node0.equals((Object)node1));
335:       assertFalse(node1.equals((Object)node0));
336:       assertFalse(node2.equals((Object)node1));
337:       assertFalse(node2.equals((Object)node0));
338:       assertEquals(0, node0.getChildCount());
339:       assertFalse(node0.isParamList());
340:       assertFalse(node0.isNull());
341:       assertFalse(node0.isDefaultCase());
342:       assertFalse(node0.isSetterDef());
343:       assertEquals(54, node0.getLineno());
344:       assertFalse(node0.isDebugger());
345:       assertEquals(221287, node0.getSourcePosition());
346:       assertFalse(node0.isArrayLit());
347:       assertFalse(node0.isVar());
348:       assertFalse(node0.isStringKey());
349:       assertFalse(node0.isFunction());
350:       assertFalse(node0.isContinue());
351:       assertFalse(node0.hasMoreThanOneChild());
352:       assertFalse(node0.isIn());
353:       assertEquals(39, node0.getType());
354:       assertFalse(node0.isNE());
355:       assertFalse(node0.isInc());
356:       assertFalse(node0.isGetterDef());
357:       assertFalse(node0.isCase());
358:       assertFalse(node0.isHook());
359:       assertFalse(node0.hasOneChild());
360:       assertFalse(node0.isBlock());
361:       assertFalse(node0.isTry());
362:       assertFalse(node0.isFor());
363:       assertFalse(node0.isRegExp());
364:       assertFalse(node0.isThis());
365:       assertFalse(node0.isIf());
366:       assertFalse(node0.isWith());
367:       assertFalse(node0.isInstanceOf());
368:       assertFalse(node0.isCatch());
369:       assertFalse(node0.isObjectLit());
370:       assertEquals(103, node0.getCharno());
371:       assertFalse(node0.isAnd());
372:       assertFalse(node0.isScript());
373:       assertFalse(node0.isNot());
374:       assertFalse(node0.isGetProp());
375:       assertFalse(node0.isLabelName());
376:       assertFalse(node0.isThrow());
377:       assertFalse(node0.isSwitch());
378:       assertFalse(node0.isFalse());
379:       assertFalse(node0.isCast());
380:       assertTrue(node0.isNumber());
381:       assertFalse(node0.isOr());
382:       assertFalse(node0.isLabel());
383:       assertFalse(node0.isAssignAdd());
384:       assertFalse(node0.isReturn());
385:       assertFalse(node0.isWhile());
386:       assertFalse(node0.isNew());
387:       assertFalse(node0.isDo());
388:       assertFalse(node0.isEmpty());
389:       assertFalse(node0.isAdd());
390:       assertFalse(node0.isString());
391:       assertFalse(node0.isName());
392:       assertFalse(node0.isTrue());
393:       assertFalse(node0.isTypeOf());
394:       assertFalse(node0.isBreak());
395:       assertFalse(node0.isDelProp());
396:       assertFalse(node0.hasChildren());
397:       assertFalse(node0.isVoid());
398:       assertFalse(node0.isComma());
399:       assertFalse(node0.isAssign());
400:       assertFalse(node0.isDec());
401:       assertFalse(node0.isGetElem());
402:       assertFalse(node0.isExprResult());
403:       assertFalse(node0.isCall());
404:       assertFalse(node1.isArrayLit());
405:       assertEquals((-930), node1.getType());
406:       assertTrue(node1.hasOneChild());
407:       assertFalse(node1.isDelProp());
408:       assertFalse(node1.isTry());
409:       assertFalse(node1.isFor());
410:       assertFalse(node1.isIf());
411:       assertFalse(node1.isFunction());
412:       assertFalse(node1.isVoid());
413:       assertFalse(node1.isRegExp());
414:       assertTrue(node1.hasChildren());
415:       assertEquals(1, node1.getChildCount());
416:       assertFalse(node1.isCase());
417:       assertFalse(node1.isParamList());
418:       assertFalse(node1.isDebugger());
419:       assertFalse(node1.isGetterDef());
420:       assertFalse(node1.isString());
421:       assertFalse(node1.isHook());
422:       assertFalse(node1.isThrow());
423:       assertFalse(node1.isThis());
424:       assertFalse(node1.isBlock());
425:       assertFalse(node1.isFalse());
426:       assertFalse(node1.isInstanceOf());
427:       assertFalse(node1.isContinue());
428:       assertFalse(node1.isCatch());
429:       assertFalse(node1.isNE());
430:       assertFalse(node1.isSetterDef());
431:       assertFalse(node1.isInc());
432:       assertFalse(node1.isIn());
433:       assertFalse(node1.isCast());
434:       assertFalse(node1.isGetElem());
435:       assertFalse(node1.isLabelName());
436:       assertFalse(node1.isTypeOf());
437:       assertFalse(node1.isExprResult());
438:       assertFalse(node1.isDec());
439:       assertEquals(46, node1.getCharno());
440:       assertFalse(node1.isLabel());
441:       assertFalse(node1.isWith());
442:       assertFalse(node1.isAssign());
443:       assertFalse(node1.hasMoreThanOneChild());
444:       assertFalse(node1.isObjectLit());
445:       assertFalse(node1.isReturn());
446:       assertEquals(1935224878, node1.getSourcePosition());
447:       assertFalse(node1.isAnd());
448:       assertFalse(node1.isWhile());
449:       assertFalse(node1.isScript());
450:       assertFalse(node1.isGetProp());
451:       assertFalse(node1.isNot());
452:       assertFalse(node1.isNumber());
453:       assertFalse(node1.isVar());
454:       assertFalse(node1.isCall());
455:       assertFalse(node1.isName());
456:       assertFalse(node1.isStringKey());
457:       assertFalse(node1.isComma());
458:       assertFalse(node1.isSwitch());
459:       assertFalse(node1.isBreak());
460:       assertFalse(node1.isDo());
461:       assertFalse(node1.isDefaultCase());
462:       assertFalse(node1.isAssignAdd());
463:       assertFalse(node1.isTrue());
464:       assertFalse(node1.isNull());
465:       assertFalse(node1.isNew());
466:       assertFalse(node1.isOr());
467:       assertFalse(node1.isEmpty());
468:       assertFalse(node1.isAdd());
469:       assertEquals(472467, node1.getLineno());
470:       assertFalse(node2.isAdd());
471:       assertFalse(node2.isNew());
472:       assertFalse(node2.isCall());
473:       assertFalse(node2.isNull());
474:       assertFalse(node2.isName());
475:       assertFalse(node2.isParamList());
476:       assertFalse(node2.isStringKey());
477:       assertFalse(node2.isOr());
478:       assertFalse(node2.isContinue());
479:       assertFalse(node2.isDefaultCase());
480:       assertFalse(node2.isSetterDef());
481:       assertFalse(node2.isFunction());
482:       assertFalse(node2.isDo());
483:       assertFalse(node2.isLabel());
484:       assertFalse(node2.isAssignAdd());
485:       assertFalse(node2.isVar());
486:       assertFalse(node2.isGetElem());
487:       assertFalse(node2.isExprResult());
488:       assertFalse(node2.isEmpty());
489:       assertFalse(node2.isCast());
490:       assertEquals((-1), node2.getSourcePosition());
491:       assertFalse(node2.isDelProp());
492:       assertFalse(node2.isDebugger());
493:       assertFalse(node2.isNot());
494:       assertFalse(node2.isVoid());
495:       assertFalse(node2.isAnd());
496:       assertFalse(node2.isTrue());
497:       assertFalse(node2.isObjectLit());
498:       assertFalse(node2.isGetProp());
499:       assertFalse(node2.isString());
500:       assertFalse(node2.isTypeOf());
501:       assertFalse(node2.isComma());
502:       assertFalse(node2.isAssign());
503:       assertFalse(node2.isDec());
504:       assertTrue(node2.hasOneChild());
505:       assertFalse(node2.isWhile());
506:       assertFalse(node2.isReturn());
507:       assertFalse(node2.isHook());
508:       assertFalse(node2.isFalse());
509:       assertFalse(node2.isInc());
510:       assertFalse(node2.isBreak());
511:       assertFalse(node2.isSwitch());
512:       assertEquals(54, node2.getType());
513:       assertEquals((-1), node2.getCharno());
514:       assertFalse(node2.isIn());
515:       assertFalse(node2.isThrow());
516:       assertFalse(node2.isArrayLit());
517:       assertFalse(node2.isTry());
518:       assertFalse(node2.isNumber());
519:       assertFalse(node2.isIf());
520:       assertFalse(node2.isGetterDef());
521:       assertFalse(node2.isLabelName());
522:       assertFalse(node2.isNE());
523:       assertFalse(node2.hasMoreThanOneChild());
524:       assertEquals((-1), node2.getLineno());
525:       assertEquals(1, node2.getChildCount());
526:       assertFalse(node2.isCase());
527:       assertFalse(node2.isWith());
528:       assertFalse(node2.isInstanceOf());
529:       assertTrue(node2.hasChildren());
530:       assertFalse(node2.isCatch());
531:       assertFalse(node2.isScript());
532:       assertFalse(node2.isRegExp());
533:       assertFalse(node2.isBlock());
534:       assertFalse(node2.isFor());
535:       assertFalse(node2.isThis());
536:       assertNotNull(node2);
537:       assertEquals(52, Node.LENGTH);
538:       assertEquals(40, Node.ORIGINALNAME_PROP);
539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
540:       assertEquals(49, Node.DIRECT_EVAL);
541:       assertEquals(50, Node.FREE_CALL);
542:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
543:       assertEquals(8, Node.FLAG_NO_THROWS);
544:       assertEquals(54, Node.SLASH_V);
545:       assertEquals(51, Node.STATIC_SOURCE_FILE);
546:       assertEquals(57, Node.REFLECTED_OBJECT);
547:       assertEquals(32, Node.INCRDECR_PROP);
548:       assertEquals(4095, Node.COLUMN_MASK);
549:       assertEquals(37, Node.OPT_ARG_NAME);
550:       assertEquals(48, Node.DIRECTIVES);
551:       assertEquals(1, Node.DECR_FLAG);
552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
553:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
554:       assertEquals(12, Node.COLUMN_BITS);
555:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
556:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
557:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
558:       assertEquals(29, Node.JSDOC_INFO_PROP);
559:       assertEquals(53, Node.INPUT_ID);
560:       assertEquals(56, Node.CHANGE_TIME);
561:       assertEquals(43, Node.IS_CONSTANT_NAME);
562:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
563:       assertEquals(36, Node.QUOTED_PROP);
564:       assertEquals(46, Node.IS_NAMESPACE);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(55, Node.INFERRED_FUNCTION);
567:       assertEquals(39, Node.EMPTY_BLOCK);
568:       assertEquals(30, Node.VAR_ARGS_NAME);
569:       assertEquals(57, Node.LAST_PROP);
570:       assertEquals(2, Node.POST_FLAG);
571:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
572:       assertEquals(47, Node.IS_DISPATCHER);
573:       assertEquals(4095, Node.COLUMN_MASK);
574:       assertEquals(48, Node.DIRECTIVES);
575:       assertEquals(55, Node.INFERRED_FUNCTION);
576:       assertEquals(39, Node.EMPTY_BLOCK);
577:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
578:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
579:       assertEquals(57, Node.REFLECTED_OBJECT);
580:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
581:       assertEquals(52, Node.LENGTH);
582:       assertEquals(29, Node.JSDOC_INFO_PROP);
583:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
584:       assertEquals(53, Node.INPUT_ID);
585:       assertEquals(56, Node.CHANGE_TIME);
586:       assertEquals(36, Node.QUOTED_PROP);
587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
588:       assertEquals(8, Node.FLAG_NO_THROWS);
589:       assertEquals(49, Node.DIRECT_EVAL);
590:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
591:       assertEquals(51, Node.STATIC_SOURCE_FILE);
592:       assertEquals(32, Node.INCRDECR_PROP);
593:       assertEquals(1, Node.DECR_FLAG);
594:       assertEquals(37, Node.OPT_ARG_NAME);
595:       assertEquals(15, Node.NO_SIDE_EFFECTS);
596:       assertEquals(57, Node.LAST_PROP);
597:       assertEquals(47, Node.IS_DISPATCHER);
598:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
599:       assertEquals(2, Node.POST_FLAG);
600:       assertEquals(30, Node.VAR_ARGS_NAME);
601:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
602:       assertEquals(12, Node.COLUMN_BITS);
603:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
604:       assertEquals(40, Node.ORIGINALNAME_PROP);
605:       assertEquals(43, Node.IS_CONSTANT_NAME);
606:       assertEquals(50, Node.FREE_CALL);
607:       assertEquals(46, Node.IS_NAMESPACE);
608:       assertEquals(54, Node.SLASH_V);
609:       assertEquals(32, Node.INCRDECR_PROP);
610:       assertEquals(46, Node.IS_NAMESPACE);
611:       assertEquals(2, Node.POST_FLAG);
612:       assertEquals(51, Node.STATIC_SOURCE_FILE);
613:       assertEquals(12, Node.COLUMN_BITS);
614:       assertEquals(47, Node.IS_DISPATCHER);
615:       assertEquals(30, Node.VAR_ARGS_NAME);
616:       assertEquals(49, Node.DIRECT_EVAL);
617:       assertEquals(56, Node.CHANGE_TIME);
618:       assertEquals(37, Node.OPT_ARG_NAME);
619:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
620:       assertEquals(54, Node.SLASH_V);
621:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
622:       assertEquals(50, Node.FREE_CALL);
623:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
624:       assertEquals(1, Node.DECR_FLAG);
625:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
626:       assertEquals(4095, Node.COLUMN_MASK);
627:       assertEquals(8, Node.FLAG_NO_THROWS);
628:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
629:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
630:       assertEquals(43, Node.IS_CONSTANT_NAME);
631:       assertEquals(40, Node.ORIGINALNAME_PROP);
632:       assertEquals(48, Node.DIRECTIVES);
633:       assertEquals(52, Node.LENGTH);
634:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
635:       assertEquals(36, Node.QUOTED_PROP);
636:       assertEquals(57, Node.REFLECTED_OBJECT);
637:       assertEquals(29, Node.JSDOC_INFO_PROP);
638:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
639:       assertEquals(57, Node.LAST_PROP);
640:       assertEquals(39, Node.EMPTY_BLOCK);
641:       assertEquals(55, Node.INFERRED_FUNCTION);
642:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
643:       assertEquals(53, Node.INPUT_ID);
644:       assertEquals(15, Node.NO_SIDE_EFFECTS);
645:       
646:       node2.setSourceFileForTesting("\n\nSubtree2: ");
647:       assertFalse(node0.equals((Object)node1));
648:       assertFalse(node0.equals((Object)node2));
649:       assertFalse(node1.equals((Object)node0));
650:       assertFalse(node1.equals((Object)node2));
651:       assertFalse(node2.equals((Object)node1));
652:       assertFalse(node2.equals((Object)node0));
653:       assertEquals(0, node0.getChildCount());
654:       assertFalse(node0.isParamList());
655:       assertFalse(node0.isNull());
656:       assertFalse(node0.isDefaultCase());
657:       assertFalse(node0.isSetterDef());
658:       assertEquals(54, node0.getLineno());
659:       assertFalse(node0.isDebugger());
660:       assertEquals(221287, node0.getSourcePosition());
661:       assertFalse(node0.isArrayLit());
662:       assertFalse(node0.isVar());
663:       assertFalse(node0.isStringKey());
664:       assertFalse(node0.isFunction());
665:       assertFalse(node0.isContinue());
666:       assertFalse(node0.hasMoreThanOneChild());
667:       assertFalse(node0.isIn());
668:       assertEquals(39, node0.getType());
669:       assertFalse(node0.isNE());
670:       assertFalse(node0.isInc());
671:       assertFalse(node0.isGetterDef());
672:       assertFalse(node0.isCase());
673:       assertFalse(node0.isHook());
674:       assertFalse(node0.hasOneChild());
675:       assertFalse(node0.isBlock());
676:       assertFalse(node0.isTry());
677:       assertFalse(node0.isFor());
678:       assertFalse(node0.isRegExp());
679:       assertFalse(node0.isThis());
680:       assertFalse(node0.isIf());
681:       assertFalse(node0.isWith());
682:       assertFalse(node0.isInstanceOf());
683:       assertFalse(node0.isCatch());
684:       assertFalse(node0.isObjectLit());
685:       assertEquals(103, node0.getCharno());
686:       assertFalse(node0.isAnd());
687:       assertFalse(node0.isScript());
688:       assertFalse(node0.isNot());
689:       assertFalse(node0.isGetProp());
690:       assertFalse(node0.isLabelName());
691:       assertFalse(node0.isThrow());
692:       assertFalse(node0.isSwitch());
693:       assertFalse(node0.isFalse());
694:       assertFalse(node0.isCast());
695:       assertTrue(node0.isNumber());
696:       assertFalse(node0.isOr());
697:       assertFalse(node0.isLabel());
698:       assertFalse(node0.isAssignAdd());
699:       assertFalse(node0.isReturn());
700:       assertFalse(node0.isWhile());
701:       assertFalse(node0.isNew());
702:       assertFalse(node0.isDo());
703:       assertFalse(node0.isEmpty());
704:       assertFalse(node0.isAdd());
705:       assertFalse(node0.isString());
706:       assertFalse(node0.isName());
707:       assertFalse(node0.isTrue());
708:       assertFalse(node0.isTypeOf());
709:       assertFalse(node0.isBreak());
710:       assertFalse(node0.isDelProp());
711:       assertFalse(node0.hasChildren());
712:       assertFalse(node0.isVoid());
713:       assertFalse(node0.isComma());
714:       assertFalse(node0.isAssign());
715:       assertFalse(node0.isDec());
716:       assertFalse(node0.isGetElem());
717:       assertFalse(node0.isExprResult());
718:       assertFalse(node0.isCall());
719:       assertFalse(node1.isArrayLit());
720:       assertEquals((-930), node1.getType());
721:       assertTrue(node1.hasOneChild());
722:       assertFalse(node1.isDelProp());
723:       assertFalse(node1.isTry());
724:       assertFalse(node1.isFor());
725:       assertFalse(node1.isIf());
726:       assertFalse(node1.isFunction());
727:       assertFalse(node1.isVoid());
728:       assertFalse(node1.isRegExp());
729:       assertTrue(node1.hasChildren());
730:       assertEquals(1, node1.getChildCount());
731:       assertFalse(node1.isCase());
732:       assertFalse(node1.isParamList());
733:       assertFalse(node1.isDebugger());
734:       assertFalse(node1.isGetterDef());
735:       assertFalse(node1.isString());
736:       assertFalse(node1.isHook());
737:       assertFalse(node1.isThrow());
738:       assertFalse(node1.isThis());
739:       assertFalse(node1.isBlock());
740:       assertFalse(node1.isFalse());
741:       assertFalse(node1.isInstanceOf());
742:       assertFalse(node1.isContinue());
743:       assertFalse(node1.isCatch());
744:       assertFalse(node1.isNE());
745:       assertFalse(node1.isSetterDef());
746:       assertFalse(node1.isInc());
747:       assertFalse(node1.isIn());
748:       assertFalse(node1.isCast());
749:       assertFalse(node1.isGetElem());
750:       assertFalse(node1.isLabelName());
751:       assertFalse(node1.isTypeOf());
752:       assertFalse(node1.isExprResult());
753:       assertFalse(node1.isDec());
754:       assertEquals(46, node1.getCharno());
755:       assertFalse(node1.isLabel());
756:       assertFalse(node1.isWith());
757:       assertFalse(node1.isAssign());
758:       assertFalse(node1.hasMoreThanOneChild());
759:       assertFalse(node1.isObjectLit());
760:       assertFalse(node1.isReturn());
761:       assertEquals(1935224878, node1.getSourcePosition());
762:       assertFalse(node1.isAnd());
763:       assertFalse(node1.isWhile());
764:       assertFalse(node1.isScript());
765:       assertFalse(node1.isGetProp());
766:       assertFalse(node1.isNot());
767:       assertFalse(node1.isNumber());
768:       assertFalse(node1.isVar());
769:       assertFalse(node1.isCall());
770:       assertFalse(node1.isName());
771:       assertFalse(node1.isStringKey());
772:       assertFalse(node1.isComma());
773:       assertFalse(node1.isSwitch());
774:       assertFalse(node1.isBreak());
775:       assertFalse(node1.isDo());
776:       assertFalse(node1.isDefaultCase());
777:       assertFalse(node1.isAssignAdd());
778:       assertFalse(node1.isTrue());
779:       assertFalse(node1.isNull());
780:       assertFalse(node1.isNew());
781:       assertFalse(node1.isOr());
782:       assertFalse(node1.isEmpty());
783:       assertFalse(node1.isAdd());
784:       assertEquals(472467, node1.getLineno());
785:       assertFalse(node2.isAdd());
786:       assertFalse(node2.isNew());
787:       assertFalse(node2.isCall());
788:       assertFalse(node2.isNull());
789:       assertFalse(node2.isName());
790:       assertFalse(node2.isParamList());
791:       assertFalse(node2.isStringKey());
792:       assertFalse(node2.isOr());
793:       assertFalse(node2.isContinue());
794:       assertFalse(node2.isDefaultCase());
795:       assertFalse(node2.isSetterDef());
796:       assertFalse(node2.isFunction());
797:       assertFalse(node2.isDo());
798:       assertFalse(node2.isLabel());
799:       assertFalse(node2.isAssignAdd());
800:       assertFalse(node2.isVar());
801:       assertFalse(node2.isGetElem());
802:       assertFalse(node2.isExprResult());
803:       assertFalse(node2.isEmpty());
804:       assertFalse(node2.isCast());
805:       assertEquals((-1), node2.getSourcePosition());
806:       assertFalse(node2.isDelProp());
807:       assertFalse(node2.isDebugger());
808:       assertFalse(node2.isNot());
809:       assertFalse(node2.isVoid());
810:       assertFalse(node2.isAnd());
811:       assertFalse(node2.isTrue());
812:       assertFalse(node2.isObjectLit());
813:       assertFalse(node2.isGetProp());
814:       assertFalse(node2.isString());
815:       assertFalse(node2.isTypeOf());
816:       assertFalse(node2.isComma());
817:       assertFalse(node2.isAssign());
818:       assertFalse(node2.isDec());
819:       assertTrue(node2.hasOneChild());
820:       assertFalse(node2.isWhile());
821:       assertFalse(node2.isReturn());
822:       assertFalse(node2.isHook());
823:       assertFalse(node2.isFalse());
824:       assertFalse(node2.isInc());
825:       assertFalse(node2.isBreak());
826:       assertFalse(node2.isSwitch());
827:       assertEquals(54, node2.getType());
828:       assertEquals((-1), node2.getCharno());
829:       assertFalse(node2.isIn());
830:       assertFalse(node2.isThrow());
831:       assertFalse(node2.isArrayLit());
832:       assertFalse(node2.isTry());
833:       assertFalse(node2.isNumber());
834:       assertFalse(node2.isIf());
835:       assertFalse(node2.isGetterDef());
836:       assertFalse(node2.isLabelName());
837:       assertFalse(node2.isNE());
838:       assertFalse(node2.hasMoreThanOneChild());
839:       assertEquals((-1), node2.getLineno());
840:       assertEquals(1, node2.getChildCount());
841:       assertFalse(node2.isCase());
842:       assertFalse(node2.isWith());
843:       assertFalse(node2.isInstanceOf());
844:       assertTrue(node2.hasChildren());
845:       assertFalse(node2.isCatch());
846:       assertFalse(node2.isScript());
847:       assertFalse(node2.isRegExp());
848:       assertFalse(node2.isBlock());
849:       assertFalse(node2.isFor());
850:       assertFalse(node2.isThis());
851:       assertEquals(52, Node.LENGTH);
852:       assertEquals(40, Node.ORIGINALNAME_PROP);
853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
854:       assertEquals(49, Node.DIRECT_EVAL);
855:       assertEquals(50, Node.FREE_CALL);
856:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
857:       assertEquals(8, Node.FLAG_NO_THROWS);
858:       assertEquals(54, Node.SLASH_V);
859:       assertEquals(51, Node.STATIC_SOURCE_FILE);
860:       assertEquals(57, Node.REFLECTED_OBJECT);
861:       assertEquals(32, Node.INCRDECR_PROP);
862:       assertEquals(4095, Node.COLUMN_MASK);
863:       assertEquals(37, Node.OPT_ARG_NAME);
864:       assertEquals(48, Node.DIRECTIVES);
865:       assertEquals(1, Node.DECR_FLAG);
866:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
867:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
868:       assertEquals(12, Node.COLUMN_BITS);
869:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
871:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
872:       assertEquals(29, Node.JSDOC_INFO_PROP);
873:       assertEquals(53, Node.INPUT_ID);
874:       assertEquals(56, Node.CHANGE_TIME);
875:       assertEquals(43, Node.IS_CONSTANT_NAME);
876:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
877:       assertEquals(36, Node.QUOTED_PROP);
878:       assertEquals(46, Node.IS_NAMESPACE);
879:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
880:       assertEquals(55, Node.INFERRED_FUNCTION);
881:       assertEquals(39, Node.EMPTY_BLOCK);
882:       assertEquals(30, Node.VAR_ARGS_NAME);
883:       assertEquals(57, Node.LAST_PROP);
884:       assertEquals(2, Node.POST_FLAG);
885:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
886:       assertEquals(47, Node.IS_DISPATCHER);
887:       assertEquals(4095, Node.COLUMN_MASK);
888:       assertEquals(48, Node.DIRECTIVES);
889:       assertEquals(55, Node.INFERRED_FUNCTION);
890:       assertEquals(39, Node.EMPTY_BLOCK);
891:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
892:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
893:       assertEquals(57, Node.REFLECTED_OBJECT);
894:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
895:       assertEquals(52, Node.LENGTH);
896:       assertEquals(29, Node.JSDOC_INFO_PROP);
897:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
898:       assertEquals(53, Node.INPUT_ID);
899:       assertEquals(56, Node.CHANGE_TIME);
900:       assertEquals(36, Node.QUOTED_PROP);
901:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
902:       assertEquals(8, Node.FLAG_NO_THROWS);
903:       assertEquals(49, Node.DIRECT_EVAL);
904:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
905:       assertEquals(51, Node.STATIC_SOURCE_FILE);
906:       assertEquals(32, Node.INCRDECR_PROP);
907:       assertEquals(1, Node.DECR_FLAG);
908:       assertEquals(37, Node.OPT_ARG_NAME);
909:       assertEquals(15, Node.NO_SIDE_EFFECTS);
910:       assertEquals(57, Node.LAST_PROP);
911:       assertEquals(47, Node.IS_DISPATCHER);
912:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
913:       assertEquals(2, Node.POST_FLAG);
914:       assertEquals(30, Node.VAR_ARGS_NAME);
915:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
916:       assertEquals(12, Node.COLUMN_BITS);
917:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
918:       assertEquals(40, Node.ORIGINALNAME_PROP);
919:       assertEquals(43, Node.IS_CONSTANT_NAME);
920:       assertEquals(50, Node.FREE_CALL);
921:       assertEquals(46, Node.IS_NAMESPACE);
922:       assertEquals(54, Node.SLASH_V);
923:       assertEquals(32, Node.INCRDECR_PROP);
924:       assertEquals(46, Node.IS_NAMESPACE);
925:       assertEquals(2, Node.POST_FLAG);
926:       assertEquals(51, Node.STATIC_SOURCE_FILE);
927:       assertEquals(12, Node.COLUMN_BITS);
928:       assertEquals(47, Node.IS_DISPATCHER);
929:       assertEquals(30, Node.VAR_ARGS_NAME);
930:       assertEquals(49, Node.DIRECT_EVAL);
931:       assertEquals(56, Node.CHANGE_TIME);
932:       assertEquals(37, Node.OPT_ARG_NAME);
933:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
934:       assertEquals(54, Node.SLASH_V);
935:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
936:       assertEquals(50, Node.FREE_CALL);
937:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
938:       assertEquals(1, Node.DECR_FLAG);
939:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
940:       assertEquals(4095, Node.COLUMN_MASK);
941:       assertEquals(8, Node.FLAG_NO_THROWS);
942:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
943:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
944:       assertEquals(43, Node.IS_CONSTANT_NAME);
945:       assertEquals(40, Node.ORIGINALNAME_PROP);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(52, Node.LENGTH);
948:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
949:       assertEquals(36, Node.QUOTED_PROP);
950:       assertEquals(57, Node.REFLECTED_OBJECT);
951:       assertEquals(29, Node.JSDOC_INFO_PROP);
952:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
953:       assertEquals(57, Node.LAST_PROP);
954:       assertEquals(39, Node.EMPTY_BLOCK);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(53, Node.INPUT_ID);
958:       assertEquals(15, Node.NO_SIDE_EFFECTS);
959:       assertNotSame(node1, node2);
960:       assertNotSame(node2, node1);
961:       
962:       boolean boolean0 = node2.isQualifiedName();
963:       assertFalse(node0.equals((Object)node1));
964:       assertFalse(node0.equals((Object)node2));
965:       assertFalse(node1.equals((Object)node0));
966:       assertFalse(node1.equals((Object)node2));
967:       assertFalse(node2.equals((Object)node1));
968:       assertFalse(node2.equals((Object)node0));
969:       assertEquals(0, node0.getChildCount());
970:       assertFalse(node0.isParamList());
971:       assertFalse(node0.isNull());
972:       assertFalse(node0.isDefaultCase());
973:       assertFalse(node0.isSetterDef());
974:       assertEquals(54, node0.getLineno());
975:       assertFalse(node0.isDebugger());
976:       assertEquals(221287, node0.getSourcePosition());
977:       assertFalse(node0.isArrayLit());
978:       assertFalse(node0.isVar());
979:       assertFalse(node0.isStringKey());
980:       assertFalse(node0.isFunction());
981:       assertFalse(node0.isContinue());
982:       assertFalse(node0.hasMoreThanOneChild());
983:       assertFalse(node0.isIn());
984:       assertEquals(39, node0.getType());
985:       assertFalse(node0.isNE());
986:       assertFalse(node0.isInc());
987:       assertFalse(node0.isGetterDef());
988:       assertFalse(node0.isCase());
989:       assertFalse(node0.isHook());
990:       assertFalse(node0.hasOneChild());
991:       assertFalse(node0.isBlock());
992:       assertFalse(node0.isTry());
993:       assertFalse(node0.isFor());
994:       assertFalse(node0.isRegExp());
995:       assertFalse(node0.isThis());
996:       assertFalse(node0.isIf());
997:       assertFalse(node0.isWith());
998:       assertFalse(node0.isInstanceOf());
999:       assertFalse(node0.isCatch());
1000:       assertFalse(node0.isObjectLit());
1001:       assertEquals(103, node0.getCharno());
1002:       assertFalse(node0.isAnd());
1003:       assertFalse(node0.isScript());
1004:       assertFalse(node0.isNot());
1005:       assertFalse(node0.isGetProp());
1006:       assertFalse(node0.isLabelName());
1007:       assertFalse(node0.isThrow());
1008:       assertFalse(node0.isSwitch());
1009:       assertFalse(node0.isFalse());
1010:       assertFalse(node0.isCast());
1011:       assertTrue(node0.isNumber());
1012:       assertFalse(node0.isOr());
1013:       assertFalse(node0.isLabel());
1014:       assertFalse(node0.isAssignAdd());
1015:       assertFalse(node0.isReturn());
1016:       assertFalse(node0.isWhile());
1017:       assertFalse(node0.isNew());
1018:       assertFalse(node0.isDo());
1019:       assertFalse(node0.isEmpty());
1020:       assertFalse(node0.isAdd());
1021:       assertFalse(node0.isString());
1022:       assertFalse(node0.isName());
1023:       assertFalse(node0.isTrue());
1024:       assertFalse(node0.isTypeOf());
1025:       assertFalse(node0.isBreak());
1026:       assertFalse(node0.isDelProp());
1027:       assertFalse(node0.hasChildren());
1028:       assertFalse(node0.isVoid());
1029:       assertFalse(node0.isComma());
1030:       assertFalse(node0.isAssign());
1031:       assertFalse(node0.isDec());
1032:       assertFalse(node0.isGetElem());
1033:       assertFalse(node0.isExprResult());
1034:       assertFalse(node0.isCall());
1035:       assertFalse(node1.isArrayLit());
1036:       assertEquals((-930), node1.getType());
1037:       assertTrue(node1.hasOneChild());
1038:       assertFalse(node1.isDelProp());
1039:       assertFalse(node1.isTry());
1040:       assertFalse(node1.isFor());
1041:       assertFalse(node1.isIf());
1042:       assertFalse(node1.isFunction());
1043:       assertFalse(node1.isVoid());
1044:       assertFalse(node1.isRegExp());
1045:       assertTrue(node1.hasChildren());
1046:       assertEquals(1, node1.getChildCount());
1047:       assertFalse(node1.isCase());
1048:       assertFalse(node1.isParamList());
1049:       assertFalse(node1.isDebugger());
1050:       assertFalse(node1.isGetterDef());
1051:       assertFalse(node1.isString());
1052:       assertFalse(node1.isHook());
1053:       assertFalse(node1.isThrow());
1054:       assertFalse(node1.isThis());
1055:       assertFalse(node1.isBlock());
1056:       assertFalse(node1.isFalse());
1057:       assertFalse(node1.isInstanceOf());
1058:       assertFalse(node1.isContinue());
1059:       assertFalse(node1.isCatch());
1060:       assertFalse(node1.isNE());
1061:       assertFalse(node1.isSetterDef());
1062:       assertFalse(node1.isInc());
1063:       assertFalse(node1.isIn());
1064:       assertFalse(node1.isCast());
1065:       assertFalse(node1.isGetElem());
1066:       assertFalse(node1.isLabelName());
1067:       assertFalse(node1.isTypeOf());
1068:       assertFalse(node1.isExprResult());
1069:       assertFalse(node1.isDec());
1070:       assertEquals(46, node1.getCharno());
1071:       assertFalse(node1.isLabel());
1072:       assertFalse(node1.isWith());
1073:       assertFalse(node1.isAssign());
1074:       assertFalse(node1.hasMoreThanOneChild());
1075:       assertFalse(node1.isObjectLit());
1076:       assertFalse(node1.isReturn());
1077:       assertEquals(1935224878, node1.getSourcePosition());
1078:       assertFalse(node1.isAnd());
1079:       assertFalse(node1.isWhile());
1080:       assertFalse(node1.isScript());
1081:       assertFalse(node1.isGetProp());
1082:       assertFalse(node1.isNot());
1083:       assertFalse(node1.isNumber());
1084:       assertFalse(node1.isVar());
1085:       assertFalse(node1.isCall());
1086:       assertFalse(node1.isName());
1087:       assertFalse(node1.isStringKey());
1088:       assertFalse(node1.isComma());
1089:       assertFalse(node1.isSwitch());
1090:       assertFalse(node1.isBreak());
1091:       assertFalse(node1.isDo());
1092:       assertFalse(node1.isDefaultCase());
1093:       assertFalse(node1.isAssignAdd());
1094:       assertFalse(node1.isTrue());
1095:       assertFalse(node1.isNull());
1096:       assertFalse(node1.isNew());
1097:       assertFalse(node1.isOr());
1098:       assertFalse(node1.isEmpty());
1099:       assertFalse(node1.isAdd());
1100:       assertEquals(472467, node1.getLineno());
1101:       assertFalse(node2.isAdd());
1102:       assertFalse(node2.isNew());
1103:       assertFalse(node2.isCall());
1104:       assertFalse(node2.isNull());
1105:       assertFalse(node2.isName());
1106:       assertFalse(node2.isParamList());
1107:       assertFalse(node2.isStringKey());
1108:       assertFalse(node2.isOr());
1109:       assertFalse(node2.isContinue());
1110:       assertFalse(node2.isDefaultCase());
1111:       assertFalse(node2.isSetterDef());
1112:       assertFalse(node2.isFunction());
1113:       assertFalse(node2.isDo());
1114:       assertFalse(node2.isLabel());
1115:       assertFalse(node2.isAssignAdd());
1116:       assertFalse(node2.isVar());
1117:       assertFalse(node2.isGetElem());
1118:       assertFalse(node2.isExprResult());
1119:       assertFalse(node2.isEmpty());
1120:       assertFalse(node2.isCast());
1121:       assertEquals((-1), node2.getSourcePosition());
1122:       assertFalse(node2.isDelProp());
1123:       assertFalse(node2.isDebugger());
1124:       assertFalse(node2.isNot());
1125:       assertFalse(node2.isVoid());
1126:       assertFalse(node2.isAnd());
1127:       assertFalse(node2.isTrue());
1128:       assertFalse(node2.isObjectLit());
1129:       assertFalse(node2.isGetProp());
1130:       assertFalse(node2.isString());
1131:       assertFalse(node2.isTypeOf());
1132:       assertFalse(node2.isComma());
1133:       assertFalse(node2.isAssign());
1134:       assertFalse(node2.isDec());
1135:       assertTrue(node2.hasOneChild());
1136:       assertFalse(node2.isWhile());
1137:       assertFalse(node2.isReturn());
1138:       assertFalse(node2.isHook());
1139:       assertFalse(node2.isFalse());
1140:       assertFalse(node2.isInc());
1141:       assertFalse(node2.isBreak());
1142:       assertFalse(node2.isSwitch());
1143:       assertEquals(54, node2.getType());
1144:       assertEquals((-1), node2.getCharno());
1145:       assertFalse(node2.isIn());
1146:       assertFalse(node2.isThrow());
1147:       assertFalse(node2.isArrayLit());
1148:       assertFalse(node2.isTry());
1149:       assertFalse(node2.isNumber());
1150:       assertFalse(node2.isIf());
1151:       assertFalse(node2.isGetterDef());
1152:       assertFalse(node2.isLabelName());
1153:       assertFalse(node2.isNE());
1154:       assertFalse(node2.hasMoreThanOneChild());
1155:       assertEquals((-1), node2.getLineno());
1156:       assertEquals(1, node2.getChildCount());
1157:       assertFalse(node2.isCase());
1158:       assertFalse(node2.isWith());
1159:       assertFalse(node2.isInstanceOf());
1160:       assertTrue(node2.hasChildren());
1161:       assertFalse(node2.isCatch());
1162:       assertFalse(node2.isScript());
1163:       assertFalse(node2.isRegExp());
1164:       assertFalse(node2.isBlock());
1165:       assertFalse(node2.isFor());
1166:       assertFalse(node2.isThis());
1167:       assertFalse(boolean0);
1168:       assertEquals(52, Node.LENGTH);
1169:       assertEquals(40, Node.ORIGINALNAME_PROP);
1170:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1171:       assertEquals(49, Node.DIRECT_EVAL);
1172:       assertEquals(50, Node.FREE_CALL);
1173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1174:       assertEquals(8, Node.FLAG_NO_THROWS);
1175:       assertEquals(54, Node.SLASH_V);
1176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1177:       assertEquals(57, Node.REFLECTED_OBJECT);
1178:       assertEquals(32, Node.INCRDECR_PROP);
1179:       assertEquals(4095, Node.COLUMN_MASK);
1180:       assertEquals(37, Node.OPT_ARG_NAME);
1181:       assertEquals(48, Node.DIRECTIVES);
1182:       assertEquals(1, Node.DECR_FLAG);
1183:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1184:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1185:       assertEquals(12, Node.COLUMN_BITS);
1186:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1187:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1188:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1189:       assertEquals(29, Node.JSDOC_INFO_PROP);
1190:       assertEquals(53, Node.INPUT_ID);
1191:       assertEquals(56, Node.CHANGE_TIME);
1192:       assertEquals(43, Node.IS_CONSTANT_NAME);
1193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1194:       assertEquals(36, Node.QUOTED_PROP);
1195:       assertEquals(46, Node.IS_NAMESPACE);
1196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1197:       assertEquals(55, Node.INFERRED_FUNCTION);
1198:       assertEquals(39, Node.EMPTY_BLOCK);
1199:       assertEquals(30, Node.VAR_ARGS_NAME);
1200:       assertEquals(57, Node.LAST_PROP);
1201:       assertEquals(2, Node.POST_FLAG);
1202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1203:       assertEquals(47, Node.IS_DISPATCHER);
1204:       assertEquals(4095, Node.COLUMN_MASK);
1205:       assertEquals(48, Node.DIRECTIVES);
1206:       assertEquals(55, Node.INFERRED_FUNCTION);
1207:       assertEquals(39, Node.EMPTY_BLOCK);
1208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1209:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1210:       assertEquals(57, Node.REFLECTED_OBJECT);
1211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1212:       assertEquals(52, Node.LENGTH);
1213:       assertEquals(29, Node.JSDOC_INFO_PROP);
1214:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1215:       assertEquals(53, Node.INPUT_ID);
1216:       assertEquals(56, Node.CHANGE_TIME);
1217:       assertEquals(36, Node.QUOTED_PROP);
1218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1219:       assertEquals(8, Node.FLAG_NO_THROWS);
1220:       assertEquals(49, Node.DIRECT_EVAL);
1221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1223:       assertEquals(32, Node.INCRDECR_PROP);
1224:       assertEquals(1, Node.DECR_FLAG);
1225:       assertEquals(37, Node.OPT_ARG_NAME);
1226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1227:       assertEquals(57, Node.LAST_PROP);
1228:       assertEquals(47, Node.IS_DISPATCHER);
1229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1230:       assertEquals(2, Node.POST_FLAG);
1231:       assertEquals(30, Node.VAR_ARGS_NAME);
1232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1233:       assertEquals(12, Node.COLUMN_BITS);
1234:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1235:       assertEquals(40, Node.ORIGINALNAME_PROP);
1236:       assertEquals(43, Node.IS_CONSTANT_NAME);
1237:       assertEquals(50, Node.FREE_CALL);
1238:       assertEquals(46, Node.IS_NAMESPACE);
1239:       assertEquals(54, Node.SLASH_V);
1240:       assertEquals(32, Node.INCRDECR_PROP);
1241:       assertEquals(46, Node.IS_NAMESPACE);
1242:       assertEquals(2, Node.POST_FLAG);
1243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1244:       assertEquals(12, Node.COLUMN_BITS);
1245:       assertEquals(47, Node.IS_DISPATCHER);
1246:       assertEquals(30, Node.VAR_ARGS_NAME);
1247:       assertEquals(49, Node.DIRECT_EVAL);
1248:       assertEquals(56, Node.CHANGE_TIME);
1249:       assertEquals(37, Node.OPT_ARG_NAME);
1250:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1251:       assertEquals(54, Node.SLASH_V);
1252:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1253:       assertEquals(50, Node.FREE_CALL);
1254:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1255:       assertEquals(1, Node.DECR_FLAG);
1256:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1257:       assertEquals(4095, Node.COLUMN_MASK);
1258:       assertEquals(8, Node.FLAG_NO_THROWS);
1259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1261:       assertEquals(43, Node.IS_CONSTANT_NAME);
1262:       assertEquals(40, Node.ORIGINALNAME_PROP);
1263:       assertEquals(48, Node.DIRECTIVES);
1264:       assertEquals(52, Node.LENGTH);
1265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1266:       assertEquals(36, Node.QUOTED_PROP);
1267:       assertEquals(57, Node.REFLECTED_OBJECT);
1268:       assertEquals(29, Node.JSDOC_INFO_PROP);
1269:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1270:       assertEquals(57, Node.LAST_PROP);
1271:       assertEquals(39, Node.EMPTY_BLOCK);
1272:       assertEquals(55, Node.INFERRED_FUNCTION);
1273:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1274:       assertEquals(53, Node.INPUT_ID);
1275:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1276:       assertNotSame(node1, node2);
1277:       assertNotSame(node2, node1);
1278:       
1279:       boolean boolean1 = node2.isFalse();
1280:       assertFalse(node0.equals((Object)node1));
1281:       assertFalse(node0.equals((Object)node2));
1282:       assertFalse(node1.equals((Object)node0));
1283:       assertFalse(node1.equals((Object)node2));
1284:       assertFalse(node2.equals((Object)node1));
1285:       assertFalse(node2.equals((Object)node0));
1286:       assertTrue(boolean1 == boolean0);
1287:       assertEquals(0, node0.getChildCount());
1288:       assertFalse(node0.isParamList());
1289:       assertFalse(node0.isNull());
1290:       assertFalse(node0.isDefaultCase());
1291:       assertFalse(node0.isSetterDef());
1292:       assertEquals(54, node0.getLineno());
1293:       assertFalse(node0.isDebugger());
1294:       assertEquals(221287, node0.getSourcePosition());
1295:       assertFalse(node0.isArrayLit());
1296:       assertFalse(node0.isVar());
1297:       assertFalse(node0.isStringKey());
1298:       assertFalse(node0.isFunction());
1299:       assertFalse(node0.isContinue());
1300:       assertFalse(node0.hasMoreThanOneChild());
1301:       assertFalse(node0.isIn());
1302:       assertEquals(39, node0.getType());
1303:       assertFalse(node0.isNE());
1304:       assertFalse(node0.isInc());
1305:       assertFalse(node0.isGetterDef());
1306:       assertFalse(node0.isCase());
1307:       assertFalse(node0.isHook());
1308:       assertFalse(node0.hasOneChild());
1309:       assertFalse(node0.isBlock());
1310:       assertFalse(node0.isTry());
1311:       assertFalse(node0.isFor());
1312:       assertFalse(node0.isRegExp());
1313:       assertFalse(node0.isThis());
1314:       assertFalse(node0.isIf());
1315:       assertFalse(node0.isWith());
1316:       assertFalse(node0.isInstanceOf());
1317:       assertFalse(node0.isCatch());
1318:       assertFalse(node0.isObjectLit());
1319:       assertEquals(103, node0.getCharno());
1320:       assertFalse(node0.isAnd());
1321:       assertFalse(node0.isScript());
1322:       assertFalse(node0.isNot());
1323:       assertFalse(node0.isGetProp());
1324:       assertFalse(node0.isLabelName());
1325:       assertFalse(node0.isThrow());
1326:       assertFalse(node0.isSwitch());
1327:       assertFalse(node0.isFalse());
1328:       assertFalse(node0.isCast());
1329:       assertTrue(node0.isNumber());
1330:       assertFalse(node0.isOr());
1331:       assertFalse(node0.isLabel());
1332:       assertFalse(node0.isAssignAdd());
1333:       assertFalse(node0.isReturn());
1334:       assertFalse(node0.isWhile());
1335:       assertFalse(node0.isNew());
1336:       assertFalse(node0.isDo());
1337:       assertFalse(node0.isEmpty());
1338:       assertFalse(node0.isAdd());
1339:       assertFalse(node0.isString());
1340:       assertFalse(node0.isName());
1341:       assertFalse(node0.isTrue());
1342:       assertFalse(node0.isTypeOf());
1343:       assertFalse(node0.isBreak());
1344:       assertFalse(node0.isDelProp());
1345:       assertFalse(node0.hasChildren());
1346:       assertFalse(node0.isVoid());
1347:       assertFalse(node0.isComma());
1348:       assertFalse(node0.isAssign());
1349:       assertFalse(node0.isDec());
1350:       assertFalse(node0.isGetElem());
1351:       assertFalse(node0.isExprResult());
1352:       assertFalse(node0.isCall());
1353:       assertFalse(node1.isArrayLit());
1354:       assertEquals((-930), node1.getType());
1355:       assertTrue(node1.hasOneChild());
1356:       assertFalse(node1.isDelProp());
1357:       assertFalse(node1.isTry());
1358:       assertFalse(node1.isFor());
1359:       assertFalse(node1.isIf());
1360:       assertFalse(node1.isFunction());
1361:       assertFalse(node1.isVoid());
1362:       assertFalse(node1.isRegExp());
1363:       assertTrue(node1.hasChildren());
1364:       assertEquals(1, node1.getChildCount());
1365:       assertFalse(node1.isCase());
1366:       assertFalse(node1.isParamList());
1367:       assertFalse(node1.isDebugger());
1368:       assertFalse(node1.isGetterDef());
1369:       assertFalse(node1.isString());
1370:       assertFalse(node1.isHook());
1371:       assertFalse(node1.isThrow());
1372:       assertFalse(node1.isThis());
1373:       assertFalse(node1.isBlock());
1374:       assertFalse(node1.isFalse());
1375:       assertFalse(node1.isInstanceOf());
1376:       assertFalse(node1.isContinue());
1377:       assertFalse(node1.isCatch());
1378:       assertFalse(node1.isNE());
1379:       assertFalse(node1.isSetterDef());
1380:       assertFalse(node1.isInc());
1381:       assertFalse(node1.isIn());
1382:       assertFalse(node1.isCast());
1383:       assertFalse(node1.isGetElem());
1384:       assertFalse(node1.isLabelName());
1385:       assertFalse(node1.isTypeOf());
1386:       assertFalse(node1.isExprResult());
1387:       assertFalse(node1.isDec());
1388:       assertEquals(46, node1.getCharno());
1389:       assertFalse(node1.isLabel());
1390:       assertFalse(node1.isWith());
1391:       assertFalse(node1.isAssign());
1392:       assertFalse(node1.hasMoreThanOneChild());
1393:       assertFalse(node1.isObjectLit());
1394:       assertFalse(node1.isReturn());
1395:       assertEquals(1935224878, node1.getSourcePosition());
1396:       assertFalse(node1.isAnd());
1397:       assertFalse(node1.isWhile());
1398:       assertFalse(node1.isScript());
1399:       assertFalse(node1.isGetProp());
1400:       assertFalse(node1.isNot());
1401:       assertFalse(node1.isNumber());
1402:       assertFalse(node1.isVar());
1403:       assertFalse(node1.isCall());
1404:       assertFalse(node1.isName());
1405:       assertFalse(node1.isStringKey());
1406:       assertFalse(node1.isComma());
1407:       assertFalse(node1.isSwitch());
1408:       assertFalse(node1.isBreak());
1409:       assertFalse(node1.isDo());
1410:       assertFalse(node1.isDefaultCase());
1411:       assertFalse(node1.isAssignAdd());
1412:       assertFalse(node1.isTrue());
1413:       assertFalse(node1.isNull());
1414:       assertFalse(node1.isNew());
1415:       assertFalse(node1.isOr());
1416:       assertFalse(node1.isEmpty());
1417:       assertFalse(node1.isAdd());
1418:       assertEquals(472467, node1.getLineno());
1419:       assertFalse(node2.isAdd());
1420:       assertFalse(node2.isNew());
1421:       assertFalse(node2.isCall());
1422:       assertFalse(node2.isNull());
1423:       assertFalse(node2.isName());
1424:       assertFalse(node2.isParamList());
1425:       assertFalse(node2.isStringKey());
1426:       assertFalse(node2.isOr());
1427:       assertFalse(node2.isContinue());
1428:       assertFalse(node2.isDefaultCase());
1429:       assertFalse(node2.isSetterDef());
1430:       assertFalse(node2.isFunction());
1431:       assertFalse(node2.isDo());
1432:       assertFalse(node2.isLabel());
1433:       assertFalse(node2.isAssignAdd());
1434:       assertFalse(node2.isVar());
1435:       assertFalse(node2.isGetElem());
1436:       assertFalse(node2.isExprResult());
1437:       assertFalse(node2.isEmpty());
1438:       assertFalse(node2.isCast());
1439:       assertEquals((-1), node2.getSourcePosition());
1440:       assertFalse(node2.isDelProp());
1441:       assertFalse(node2.isDebugger());
1442:       assertFalse(node2.isNot());
1443:       assertFalse(node2.isVoid());
1444:       assertFalse(node2.isAnd());
1445:       assertFalse(node2.isTrue());
1446:       assertFalse(node2.isObjectLit());
1447:       assertFalse(node2.isGetProp());
1448:       assertFalse(node2.isString());
1449:       assertFalse(node2.isTypeOf());
1450:       assertFalse(node2.isComma());
1451:       assertFalse(node2.isAssign());
1452:       assertFalse(node2.isDec());
1453:       assertTrue(node2.hasOneChild());
1454:       assertFalse(node2.isWhile());
1455:       assertFalse(node2.isReturn());
1456:       assertFalse(node2.isHook());
1457:       assertFalse(node2.isFalse());
1458:       assertFalse(node2.isInc());
1459:       assertFalse(node2.isBreak());
1460:       assertFalse(node2.isSwitch());
1461:       assertEquals(54, node2.getType());
1462:       assertEquals((-1), node2.getCharno());
1463:       assertFalse(node2.isIn());
1464:       assertFalse(node2.isThrow());
1465:       assertFalse(node2.isArrayLit());
1466:       assertFalse(node2.isTry());
1467:       assertFalse(node2.isNumber());
1468:       assertFalse(node2.isIf());
1469:       assertFalse(node2.isGetterDef());
1470:       assertFalse(node2.isLabelName());
1471:       assertFalse(node2.isNE());
1472:       assertFalse(node2.hasMoreThanOneChild());
1473:       assertEquals((-1), node2.getLineno());
1474:       assertEquals(1, node2.getChildCount());
1475:       assertFalse(node2.isCase());
1476:       assertFalse(node2.isWith());
1477:       assertFalse(node2.isInstanceOf());
1478:       assertTrue(node2.hasChildren());
1479:       assertFalse(node2.isCatch());
1480:       assertFalse(node2.isScript());
1481:       assertFalse(node2.isRegExp());
1482:       assertFalse(node2.isBlock());
1483:       assertFalse(node2.isFor());
1484:       assertFalse(node2.isThis());
1485:       assertFalse(boolean1);
1486:       assertEquals(52, Node.LENGTH);
1487:       assertEquals(40, Node.ORIGINALNAME_PROP);
1488:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1489:       assertEquals(49, Node.DIRECT_EVAL);
1490:       assertEquals(50, Node.FREE_CALL);
1491:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1492:       assertEquals(8, Node.FLAG_NO_THROWS);
1493:       assertEquals(54, Node.SLASH_V);
1494:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1495:       assertEquals(57, Node.REFLECTED_OBJECT);
1496:       assertEquals(32, Node.INCRDECR_PROP);
1497:       assertEquals(4095, Node.COLUMN_MASK);
1498:       assertEquals(37, Node.OPT_ARG_NAME);
1499:       assertEquals(48, Node.DIRECTIVES);
1500:       assertEquals(1, Node.DECR_FLAG);
1501:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1502:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1503:       assertEquals(12, Node.COLUMN_BITS);
1504:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1505:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1506:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1507:       assertEquals(29, Node.JSDOC_INFO_PROP);
1508:       assertEquals(53, Node.INPUT_ID);
1509:       assertEquals(56, Node.CHANGE_TIME);
1510:       assertEquals(43, Node.IS_CONSTANT_NAME);
1511:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1512:       assertEquals(36, Node.QUOTED_PROP);
1513:       assertEquals(46, Node.IS_NAMESPACE);
1514:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1515:       assertEquals(55, Node.INFERRED_FUNCTION);
1516:       assertEquals(39, Node.EMPTY_BLOCK);
1517:       assertEquals(30, Node.VAR_ARGS_NAME);
1518:       assertEquals(57, Node.LAST_PROP);
1519:       assertEquals(2, Node.POST_FLAG);
1520:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1521:       assertEquals(47, Node.IS_DISPATCHER);
1522:       assertEquals(4095, Node.COLUMN_MASK);
1523:       assertEquals(48, Node.DIRECTIVES);
1524:       assertEquals(55, Node.INFERRED_FUNCTION);
1525:       assertEquals(39, Node.EMPTY_BLOCK);
1526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1527:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1528:       assertEquals(57, Node.REFLECTED_OBJECT);
1529:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1530:       assertEquals(52, Node.LENGTH);
1531:       assertEquals(29, Node.JSDOC_INFO_PROP);
1532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1533:       assertEquals(53, Node.INPUT_ID);
1534:       assertEquals(56, Node.CHANGE_TIME);
1535:       assertEquals(36, Node.QUOTED_PROP);
1536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1537:       assertEquals(8, Node.FLAG_NO_THROWS);
1538:       assertEquals(49, Node.DIRECT_EVAL);
1539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1540:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1541:       assertEquals(32, Node.INCRDECR_PROP);
1542:       assertEquals(1, Node.DECR_FLAG);
1543:       assertEquals(37, Node.OPT_ARG_NAME);
1544:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1545:       assertEquals(57, Node.LAST_PROP);
1546:       assertEquals(47, Node.IS_DISPATCHER);
1547:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1548:       assertEquals(2, Node.POST_FLAG);
1549:       assertEquals(30, Node.VAR_ARGS_NAME);
1550:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1551:       assertEquals(12, Node.COLUMN_BITS);
1552:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1553:       assertEquals(40, Node.ORIGINALNAME_PROP);
1554:       assertEquals(43, Node.IS_CONSTANT_NAME);
1555:       assertEquals(50, Node.FREE_CALL);
1556:       assertEquals(46, Node.IS_NAMESPACE);
1557:       assertEquals(54, Node.SLASH_V);
1558:       assertEquals(32, Node.INCRDECR_PROP);
1559:       assertEquals(46, Node.IS_NAMESPACE);
1560:       assertEquals(2, Node.POST_FLAG);
1561:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1562:       assertEquals(12, Node.COLUMN_BITS);
1563:       assertEquals(47, Node.IS_DISPATCHER);
1564:       assertEquals(30, Node.VAR_ARGS_NAME);
1565:       assertEquals(49, Node.DIRECT_EVAL);
1566:       assertEquals(56, Node.CHANGE_TIME);
1567:       assertEquals(37, Node.OPT_ARG_NAME);
1568:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1569:       assertEquals(54, Node.SLASH_V);
1570:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1571:       assertEquals(50, Node.FREE_CALL);
1572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1573:       assertEquals(1, Node.DECR_FLAG);
1574:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1575:       assertEquals(4095, Node.COLUMN_MASK);
1576:       assertEquals(8, Node.FLAG_NO_THROWS);
1577:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1578:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1579:       assertEquals(43, Node.IS_CONSTANT_NAME);
1580:       assertEquals(40, Node.ORIGINALNAME_PROP);
1581:       assertEquals(48, Node.DIRECTIVES);
1582:       assertEquals(52, Node.LENGTH);
1583:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1584:       assertEquals(36, Node.QUOTED_PROP);
1585:       assertEquals(57, Node.REFLECTED_OBJECT);
1586:       assertEquals(29, Node.JSDOC_INFO_PROP);
1587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1588:       assertEquals(57, Node.LAST_PROP);
1589:       assertEquals(39, Node.EMPTY_BLOCK);
1590:       assertEquals(55, Node.INFERRED_FUNCTION);
1591:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1592:       assertEquals(53, Node.INPUT_ID);
1593:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1594:       assertNotSame(node1, node2);
1595:       assertNotSame(node2, node1);
1596:       
1597:       boolean boolean2 = node0.isWhile();
1598:       assertFalse(node0.equals((Object)node1));
1599:       assertFalse(node0.equals((Object)node2));
1600:       assertTrue(boolean2 == boolean0);
1601:       assertTrue(boolean2 == boolean1);
1602:       assertEquals(0, node0.getChildCount());
1603:       assertFalse(node0.isParamList());
1604:       assertFalse(node0.isNull());
1605:       assertFalse(node0.isDefaultCase());
1606:       assertFalse(node0.isSetterDef());
1607:       assertEquals(54, node0.getLineno());
1608:       assertFalse(node0.isDebugger());
1609:       assertEquals(221287, node0.getSourcePosition());
1610:       assertFalse(node0.isArrayLit());
1611:       assertFalse(node0.isVar());
1612:       assertFalse(node0.isStringKey());
1613:       assertFalse(node0.isFunction());
1614:       assertFalse(node0.isContinue());
1615:       assertFalse(node0.hasMoreThanOneChild());
1616:       assertFalse(node0.isIn());
1617:       assertEquals(39, node0.getType());
1618:       assertFalse(node0.isNE());
1619:       assertFalse(node0.isInc());
1620:       assertFalse(node0.isGetterDef());
1621:       assertFalse(node0.isCase());
1622:       assertFalse(node0.isHook());
1623:       assertFalse(node0.hasOneChild());
1624:       assertFalse(node0.isBlock());
1625:       assertFalse(node0.isTry());
1626:       assertFalse(node0.isFor());
1627:       assertFalse(node0.isRegExp());
1628:       assertFalse(node0.isThis());
1629:       assertFalse(node0.isIf());
1630:       assertFalse(node0.isWith());
1631:       assertFalse(node0.isInstanceOf());
1632:       assertFalse(node0.isCatch());
1633:       assertFalse(node0.isObjectLit());
1634:       assertEquals(103, node0.getCharno());
1635:       assertFalse(node0.isAnd());
1636:       assertFalse(node0.isScript());
1637:       assertFalse(node0.isNot());
1638:       assertFalse(node0.isGetProp());
1639:       assertFalse(node0.isLabelName());
1640:       assertFalse(node0.isThrow());
1641:       assertFalse(node0.isSwitch());
1642:       assertFalse(node0.isFalse());
1643:       assertFalse(node0.isCast());
1644:       assertTrue(node0.isNumber());
1645:       assertFalse(node0.isOr());
1646:       assertFalse(node0.isLabel());
1647:       assertFalse(node0.isAssignAdd());
1648:       assertFalse(node0.isReturn());
1649:       assertFalse(node0.isWhile());
1650:       assertFalse(node0.isNew());
1651:       assertFalse(node0.isDo());
1652:       assertFalse(node0.isEmpty());
1653:       assertFalse(node0.isAdd());
1654:       assertFalse(node0.isString());
1655:       assertFalse(node0.isName());
1656:       assertFalse(node0.isTrue());
1657:       assertFalse(node0.isTypeOf());
1658:       assertFalse(node0.isBreak());
1659:       assertFalse(node0.isDelProp());
1660:       assertFalse(node0.hasChildren());
1661:       assertFalse(node0.isVoid());
1662:       assertFalse(node0.isComma());
1663:       assertFalse(node0.isAssign());
1664:       assertFalse(node0.isDec());
1665:       assertFalse(node0.isGetElem());
1666:       assertFalse(node0.isExprResult());
1667:       assertFalse(node0.isCall());
1668:       assertFalse(boolean2);
1669:       assertEquals(52, Node.LENGTH);
1670:       assertEquals(40, Node.ORIGINALNAME_PROP);
1671:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1672:       assertEquals(49, Node.DIRECT_EVAL);
1673:       assertEquals(50, Node.FREE_CALL);
1674:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1675:       assertEquals(8, Node.FLAG_NO_THROWS);
1676:       assertEquals(54, Node.SLASH_V);
1677:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1678:       assertEquals(57, Node.REFLECTED_OBJECT);
1679:       assertEquals(32, Node.INCRDECR_PROP);
1680:       assertEquals(4095, Node.COLUMN_MASK);
1681:       assertEquals(37, Node.OPT_ARG_NAME);
1682:       assertEquals(48, Node.DIRECTIVES);
1683:       assertEquals(1, Node.DECR_FLAG);
1684:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1686:       assertEquals(12, Node.COLUMN_BITS);
1687:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1688:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1689:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1690:       assertEquals(29, Node.JSDOC_INFO_PROP);
1691:       assertEquals(53, Node.INPUT_ID);
1692:       assertEquals(56, Node.CHANGE_TIME);
1693:       assertEquals(43, Node.IS_CONSTANT_NAME);
1694:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1695:       assertEquals(36, Node.QUOTED_PROP);
1696:       assertEquals(46, Node.IS_NAMESPACE);
1697:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1698:       assertEquals(55, Node.INFERRED_FUNCTION);
1699:       assertEquals(39, Node.EMPTY_BLOCK);
1700:       assertEquals(30, Node.VAR_ARGS_NAME);
1701:       assertEquals(57, Node.LAST_PROP);
1702:       assertEquals(2, Node.POST_FLAG);
1703:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1704:       assertEquals(47, Node.IS_DISPATCHER);
1705:       
1706:       Iterable<Node> iterable0 = node0.children();
1707:       assertFalse(node0.equals((Object)node1));
1708:       assertFalse(node0.equals((Object)node2));
1709:       assertFalse(iterable0.contains(node2));
1710:       assertEquals(0, node0.getChildCount());
1711:       assertFalse(node0.isParamList());
1712:       assertFalse(node0.isNull());
1713:       assertFalse(node0.isDefaultCase());
1714:       assertFalse(node0.isSetterDef());
1715:       assertEquals(54, node0.getLineno());
1716:       assertFalse(node0.isDebugger());
1717:       assertEquals(221287, node0.getSourcePosition());
1718:       assertFalse(node0.isArrayLit());
1719:       assertFalse(node0.isVar());
1720:       assertFalse(node0.isStringKey());
1721:       assertFalse(node0.isFunction());
1722:       assertFalse(node0.isContinue());
1723:       assertFalse(node0.hasMoreThanOneChild());
1724:       assertFalse(node0.isIn());
1725:       assertEquals(39, node0.getType());
1726:       assertFalse(node0.isNE());
1727:       assertFalse(node0.isInc());
1728:       assertFalse(node0.isGetterDef());
1729:       assertFalse(node0.isCase());
1730:       assertFalse(node0.isHook());
1731:       assertFalse(node0.hasOneChild());
1732:       assertFalse(node0.isBlock());
1733:       assertFalse(node0.isTry());
1734:       assertFalse(node0.isFor());
1735:       assertFalse(node0.isRegExp());
1736:       assertFalse(node0.isThis());
1737:       assertFalse(node0.isIf());
1738:       assertFalse(node0.isWith());
1739:       assertFalse(node0.isInstanceOf());
1740:       assertFalse(node0.isCatch());
1741:       assertFalse(node0.isObjectLit());
1742:       assertEquals(103, node0.getCharno());
1743:       assertFalse(node0.isAnd());
1744:       assertFalse(node0.isScript());
1745:       assertFalse(node0.isNot());
1746:       assertFalse(node0.isGetProp());
1747:       assertFalse(node0.isLabelName());
1748:       assertFalse(node0.isThrow());
1749:       assertFalse(node0.isSwitch());
1750:       assertFalse(node0.isFalse());
1751:       assertFalse(node0.isCast());
1752:       assertTrue(node0.isNumber());
1753:       assertFalse(node0.isOr());
1754:       assertFalse(node0.isLabel());
1755:       assertFalse(node0.isAssignAdd());
1756:       assertFalse(node0.isReturn());
1757:       assertFalse(node0.isWhile());
1758:       assertFalse(node0.isNew());
1759:       assertFalse(node0.isDo());
1760:       assertFalse(node0.isEmpty());
1761:       assertFalse(node0.isAdd());
1762:       assertFalse(node0.isString());
1763:       assertFalse(node0.isName());
1764:       assertFalse(node0.isTrue());
1765:       assertFalse(node0.isTypeOf());
1766:       assertFalse(node0.isBreak());
1767:       assertFalse(node0.isDelProp());
1768:       assertFalse(node0.hasChildren());
1769:       assertFalse(node0.isVoid());
1770:       assertFalse(node0.isComma());
1771:       assertFalse(node0.isAssign());
1772:       assertFalse(node0.isDec());
1773:       assertFalse(node0.isGetElem());
1774:       assertFalse(node0.isExprResult());
1775:       assertFalse(node0.isCall());
1776:       assertNotNull(iterable0);
1777:       assertEquals(52, Node.LENGTH);
1778:       assertEquals(40, Node.ORIGINALNAME_PROP);
1779:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1780:       assertEquals(49, Node.DIRECT_EVAL);
1781:       assertEquals(50, Node.FREE_CALL);
1782:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1783:       assertEquals(8, Node.FLAG_NO_THROWS);
1784:       assertEquals(54, Node.SLASH_V);
1785:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1786:       assertEquals(57, Node.REFLECTED_OBJECT);
1787:       assertEquals(32, Node.INCRDECR_PROP);
1788:       assertEquals(4095, Node.COLUMN_MASK);
1789:       assertEquals(37, Node.OPT_ARG_NAME);
1790:       assertEquals(48, Node.DIRECTIVES);
1791:       assertEquals(1, Node.DECR_FLAG);
1792:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1793:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1794:       assertEquals(12, Node.COLUMN_BITS);
1795:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1796:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1797:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1798:       assertEquals(29, Node.JSDOC_INFO_PROP);
1799:       assertEquals(53, Node.INPUT_ID);
1800:       assertEquals(56, Node.CHANGE_TIME);
1801:       assertEquals(43, Node.IS_CONSTANT_NAME);
1802:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1803:       assertEquals(36, Node.QUOTED_PROP);
1804:       assertEquals(46, Node.IS_NAMESPACE);
1805:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1806:       assertEquals(55, Node.INFERRED_FUNCTION);
1807:       assertEquals(39, Node.EMPTY_BLOCK);
1808:       assertEquals(30, Node.VAR_ARGS_NAME);
1809:       assertEquals(57, Node.LAST_PROP);
1810:       assertEquals(2, Node.POST_FLAG);
1811:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1812:       assertEquals(47, Node.IS_DISPATCHER);
1813:       
1814:       int int0 = node1.getIndexOfChild(node2);
1815:       assertFalse(node0.equals((Object)node1));
1816:       assertFalse(node0.equals((Object)node2));
1817:       assertFalse(node1.equals((Object)node0));
1818:       assertFalse(node1.equals((Object)node2));
1819:       assertFalse(node2.equals((Object)node1));
1820:       assertFalse(node2.equals((Object)node0));
1821:       assertEquals(0, node0.getChildCount());
1822:       assertFalse(node0.isParamList());
1823:       assertFalse(node0.isNull());
1824:       assertFalse(node0.isDefaultCase());
1825:       assertFalse(node0.isSetterDef());
1826:       assertEquals(54, node0.getLineno());
1827:       assertFalse(node0.isDebugger());
1828:       assertEquals(221287, node0.getSourcePosition());
1829:       assertFalse(node0.isArrayLit());
1830:       assertFalse(node0.isVar());
1831:       assertFalse(node0.isStringKey());
1832:       assertFalse(node0.isFunction());
1833:       assertFalse(node0.isContinue());
1834:       assertFalse(node0.hasMoreThanOneChild());
1835:       assertFalse(node0.isIn());
1836:       assertEquals(39, node0.getType());
1837:       assertFalse(node0.isNE());
1838:       assertFalse(node0.isInc());
1839:       assertFalse(node0.isGetterDef());
1840:       assertFalse(node0.isCase());
1841:       assertFalse(node0.isHook());
1842:       assertFalse(node0.hasOneChild());
1843:       assertFalse(node0.isBlock());
1844:       assertFalse(node0.isTry());
1845:       assertFalse(node0.isFor());
1846:       assertFalse(node0.isRegExp());
1847:       assertFalse(node0.isThis());
1848:       assertFalse(node0.isIf());
1849:       assertFalse(node0.isWith());
1850:       assertFalse(node0.isInstanceOf());
1851:       assertFalse(node0.isCatch());
1852:       assertFalse(node0.isObjectLit());
1853:       assertEquals(103, node0.getCharno());
1854:       assertFalse(node0.isAnd());
1855:       assertFalse(node0.isScript());
1856:       assertFalse(node0.isNot());
1857:       assertFalse(node0.isGetProp());
1858:       assertFalse(node0.isLabelName());
1859:       assertFalse(node0.isThrow());
1860:       assertFalse(node0.isSwitch());
1861:       assertFalse(node0.isFalse());
1862:       assertFalse(node0.isCast());
1863:       assertTrue(node0.isNumber());
1864:       assertFalse(node0.isOr());
1865:       assertFalse(node0.isLabel());
1866:       assertFalse(node0.isAssignAdd());
1867:       assertFalse(node0.isReturn());
1868:       assertFalse(node0.isWhile());
1869:       assertFalse(node0.isNew());
1870:       assertFalse(node0.isDo());
1871:       assertFalse(node0.isEmpty());
1872:       assertFalse(node0.isAdd());
1873:       assertFalse(node0.isString());
1874:       assertFalse(node0.isName());
1875:       assertFalse(node0.isTrue());
1876:       assertFalse(node0.isTypeOf());
1877:       assertFalse(node0.isBreak());
1878:       assertFalse(node0.isDelProp());
1879:       assertFalse(node0.hasChildren());
1880:       assertFalse(node0.isVoid());
1881:       assertFalse(node0.isComma());
1882:       assertFalse(node0.isAssign());
1883:       assertFalse(node0.isDec());
1884:       assertFalse(node0.isGetElem());
1885:       assertFalse(node0.isExprResult());
1886:       assertFalse(node0.isCall());
1887:       assertFalse(node1.isArrayLit());
1888:       assertEquals((-930), node1.getType());
1889:       assertTrue(node1.hasOneChild());
1890:       assertFalse(node1.isDelProp());
1891:       assertFalse(node1.isTry());
1892:       assertFalse(node1.isFor());
1893:       assertFalse(node1.isIf());
1894:       assertFalse(node1.isFunction());
1895:       assertFalse(node1.isVoid());
1896:       assertFalse(node1.isRegExp());
1897:       assertTrue(node1.hasChildren());
1898:       assertEquals(1, node1.getChildCount());
1899:       assertFalse(node1.isCase());
1900:       assertFalse(node1.isParamList());
1901:       assertFalse(node1.isDebugger());
1902:       assertFalse(node1.isGetterDef());
1903:       assertFalse(node1.isString());
1904:       assertFalse(node1.isHook());
1905:       assertFalse(node1.isThrow());
1906:       assertFalse(node1.isThis());
1907:       assertFalse(node1.isBlock());
1908:       assertFalse(node1.isFalse());
1909:       assertFalse(node1.isInstanceOf());
1910:       assertFalse(node1.isContinue());
1911:       assertFalse(node1.isCatch());
1912:       assertFalse(node1.isNE());
1913:       assertFalse(node1.isSetterDef());
1914:       assertFalse(node1.isInc());
1915:       assertFalse(node1.isIn());
1916:       assertFalse(node1.isCast());
1917:       assertFalse(node1.isGetElem());
1918:       assertFalse(node1.isLabelName());
1919:       assertFalse(node1.isTypeOf());
1920:       assertFalse(node1.isExprResult());
1921:       assertFalse(node1.isDec());
1922:       assertEquals(46, node1.getCharno());
1923:       assertFalse(node1.isLabel());
1924:       assertFalse(node1.isWith());
1925:       assertFalse(node1.isAssign());
1926:       assertFalse(node1.hasMoreThanOneChild());
1927:       assertFalse(node1.isObjectLit());
1928:       assertFalse(node1.isReturn());
1929:       assertEquals(1935224878, node1.getSourcePosition());
1930:       assertFalse(node1.isAnd());
1931:       assertFalse(node1.isWhile());
1932:       assertFalse(node1.isScript());
1933:       assertFalse(node1.isGetProp());
1934:       assertFalse(node1.isNot());
1935:       assertFalse(node1.isNumber());
1936:       assertFalse(node1.isVar());
1937:       assertFalse(node1.isCall());
1938:       assertFalse(node1.isName());
1939:       assertFalse(node1.isStringKey());
1940:       assertFalse(node1.isComma());
1941:       assertFalse(node1.isSwitch());
1942:       assertFalse(node1.isBreak());
1943:       assertFalse(node1.isDo());
1944:       assertFalse(node1.isDefaultCase());
1945:       assertFalse(node1.isAssignAdd());
1946:       assertFalse(node1.isTrue());
1947:       assertFalse(node1.isNull());
1948:       assertFalse(node1.isNew());
1949:       assertFalse(node1.isOr());
1950:       assertFalse(node1.isEmpty());
1951:       assertFalse(node1.isAdd());
1952:       assertEquals(472467, node1.getLineno());
1953:       assertFalse(node2.isAdd());
1954:       assertFalse(node2.isNew());
1955:       assertFalse(node2.isCall());
1956:       assertFalse(node2.isNull());
1957:       assertFalse(node2.isName());
1958:       assertFalse(node2.isParamList());
1959:       assertFalse(node2.isStringKey());
1960:       assertFalse(node2.isOr());
1961:       assertFalse(node2.isContinue());
1962:       assertFalse(node2.isDefaultCase());
1963:       assertFalse(node2.isSetterDef());
1964:       assertFalse(node2.isFunction());
1965:       assertFalse(node2.isDo());
1966:       assertFalse(node2.isLabel());
1967:       assertFalse(node2.isAssignAdd());
1968:       assertFalse(node2.isVar());
1969:       assertFalse(node2.isGetElem());
1970:       assertFalse(node2.isExprResult());
1971:       assertFalse(node2.isEmpty());
1972:       assertFalse(node2.isCast());
1973:       assertEquals((-1), node2.getSourcePosition());
1974:       assertFalse(node2.isDelProp());
1975:       assertFalse(node2.isDebugger());
1976:       assertFalse(node2.isNot());
1977:       assertFalse(node2.isVoid());
1978:       assertFalse(node2.isAnd());
1979:       assertFalse(node2.isTrue());
1980:       assertFalse(node2.isObjectLit());
1981:       assertFalse(node2.isGetProp());
1982:       assertFalse(node2.isString());
1983:       assertFalse(node2.isTypeOf());
1984:       assertFalse(node2.isComma());
1985:       assertFalse(node2.isAssign());
1986:       assertFalse(node2.isDec());
1987:       assertTrue(node2.hasOneChild());
1988:       assertFalse(node2.isWhile());
1989:       assertFalse(node2.isReturn());
1990:       assertFalse(node2.isHook());
1991:       assertFalse(node2.isFalse());
1992:       assertFalse(node2.isInc());
1993:       assertFalse(node2.isBreak());
1994:       assertFalse(node2.isSwitch());
1995:       assertEquals(54, node2.getType());
1996:       assertEquals((-1), node2.getCharno());
1997:       assertFalse(node2.isIn());
1998:       assertFalse(node2.isThrow());
1999:       assertFalse(node2.isArrayLit());
2000:       assertFalse(node2.isTry());
2001:       assertFalse(node2.isNumber());
2002:       assertFalse(node2.isIf());
2003:       assertFalse(node2.isGetterDef());
2004:       assertFalse(node2.isLabelName());
2005:       assertFalse(node2.isNE());
2006:       assertFalse(node2.hasMoreThanOneChild());
2007:       assertEquals((-1), node2.getLineno());
2008:       assertEquals(1, node2.getChildCount());
2009:       assertFalse(node2.isCase());
2010:       assertFalse(node2.isWith());
2011:       assertFalse(node2.isInstanceOf());
2012:       assertTrue(node2.hasChildren());
2013:       assertFalse(node2.isCatch());
2014:       assertFalse(node2.isScript());
2015:       assertFalse(node2.isRegExp());
2016:       assertFalse(node2.isBlock());
2017:       assertFalse(node2.isFor());
2018:       assertFalse(node2.isThis());
2019:       assertEquals((-1), int0);
2020:       assertEquals(52, Node.LENGTH);
2021:       assertEquals(40, Node.ORIGINALNAME_PROP);
2022:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2023:       assertEquals(49, Node.DIRECT_EVAL);
2024:       assertEquals(50, Node.FREE_CALL);
2025:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2026:       assertEquals(8, Node.FLAG_NO_THROWS);
2027:       assertEquals(54, Node.SLASH_V);
2028:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2029:       assertEquals(57, Node.REFLECTED_OBJECT);
2030:       assertEquals(32, Node.INCRDECR_PROP);
2031:       assertEquals(4095, Node.COLUMN_MASK);
2032:       assertEquals(37, Node.OPT_ARG_NAME);
2033:       assertEquals(48, Node.DIRECTIVES);
2034:       assertEquals(1, Node.DECR_FLAG);
2035:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2036:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2037:       assertEquals(12, Node.COLUMN_BITS);
2038:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2039:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2040:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2041:       assertEquals(29, Node.JSDOC_INFO_PROP);
2042:       assertEquals(53, Node.INPUT_ID);
2043:       assertEquals(56, Node.CHANGE_TIME);
2044:       assertEquals(43, Node.IS_CONSTANT_NAME);
2045:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2046:       assertEquals(36, Node.QUOTED_PROP);
2047:       assertEquals(46, Node.IS_NAMESPACE);
2048:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2049:       assertEquals(55, Node.INFERRED_FUNCTION);
2050:       assertEquals(39, Node.EMPTY_BLOCK);
2051:       assertEquals(30, Node.VAR_ARGS_NAME);
2052:       assertEquals(57, Node.LAST_PROP);
2053:       assertEquals(2, Node.POST_FLAG);
2054:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2055:       assertEquals(47, Node.IS_DISPATCHER);
2056:       assertEquals(4095, Node.COLUMN_MASK);
2057:       assertEquals(48, Node.DIRECTIVES);
2058:       assertEquals(55, Node.INFERRED_FUNCTION);
2059:       assertEquals(39, Node.EMPTY_BLOCK);
2060:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2061:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2062:       assertEquals(57, Node.REFLECTED_OBJECT);
2063:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2064:       assertEquals(52, Node.LENGTH);
2065:       assertEquals(29, Node.JSDOC_INFO_PROP);
2066:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2067:       assertEquals(53, Node.INPUT_ID);
2068:       assertEquals(56, Node.CHANGE_TIME);
2069:       assertEquals(36, Node.QUOTED_PROP);
2070:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2071:       assertEquals(8, Node.FLAG_NO_THROWS);
2072:       assertEquals(49, Node.DIRECT_EVAL);
2073:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2074:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2075:       assertEquals(32, Node.INCRDECR_PROP);
2076:       assertEquals(1, Node.DECR_FLAG);
2077:       assertEquals(37, Node.OPT_ARG_NAME);
2078:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2079:       assertEquals(57, Node.LAST_PROP);
2080:       assertEquals(47, Node.IS_DISPATCHER);
2081:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2082:       assertEquals(2, Node.POST_FLAG);
2083:       assertEquals(30, Node.VAR_ARGS_NAME);
2084:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2085:       assertEquals(12, Node.COLUMN_BITS);
2086:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2087:       assertEquals(40, Node.ORIGINALNAME_PROP);
2088:       assertEquals(43, Node.IS_CONSTANT_NAME);
2089:       assertEquals(50, Node.FREE_CALL);
2090:       assertEquals(46, Node.IS_NAMESPACE);
2091:       assertEquals(54, Node.SLASH_V);
2092:       assertEquals(32, Node.INCRDECR_PROP);
2093:       assertEquals(46, Node.IS_NAMESPACE);
2094:       assertEquals(2, Node.POST_FLAG);
2095:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2096:       assertEquals(12, Node.COLUMN_BITS);
2097:       assertEquals(47, Node.IS_DISPATCHER);
2098:       assertEquals(30, Node.VAR_ARGS_NAME);
2099:       assertEquals(49, Node.DIRECT_EVAL);
2100:       assertEquals(56, Node.CHANGE_TIME);
2101:       assertEquals(37, Node.OPT_ARG_NAME);
2102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2103:       assertEquals(54, Node.SLASH_V);
2104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2105:       assertEquals(50, Node.FREE_CALL);
2106:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2107:       assertEquals(1, Node.DECR_FLAG);
2108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2109:       assertEquals(4095, Node.COLUMN_MASK);
2110:       assertEquals(8, Node.FLAG_NO_THROWS);
2111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2112:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2113:       assertEquals(43, Node.IS_CONSTANT_NAME);
2114:       assertEquals(40, Node.ORIGINALNAME_PROP);
2115:       assertEquals(48, Node.DIRECTIVES);
2116:       assertEquals(52, Node.LENGTH);
2117:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2118:       assertEquals(36, Node.QUOTED_PROP);
2119:       assertEquals(57, Node.REFLECTED_OBJECT);
2120:       assertEquals(29, Node.JSDOC_INFO_PROP);
2121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2122:       assertEquals(57, Node.LAST_PROP);
2123:       assertEquals(39, Node.EMPTY_BLOCK);
2124:       assertEquals(55, Node.INFERRED_FUNCTION);
2125:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2126:       assertEquals(53, Node.INPUT_ID);
2127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2128:       assertNotSame(node1, node2);
2129:       assertNotSame(node2, node1);
2130:       
2131:       Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
2132:       assertFalse(node0.equals((Object)node1));
2133:       assertFalse(node0.equals((Object)node2));
2134:       assertFalse(node1.equals((Object)node0));
2135:       assertFalse(node1.equals((Object)node2));
2136:       assertFalse(node2.equals((Object)node1));
2137:       assertFalse(node2.equals((Object)node0));
2138:       assertEquals(0, node0.getChildCount());
2139:       assertFalse(node0.isParamList());
2140:       assertFalse(node0.isNull());
2141:       assertFalse(node0.isDefaultCase());
2142:       assertFalse(node0.isSetterDef());
2143:       assertEquals(54, node0.getLineno());
2144:       assertFalse(node0.isDebugger());
2145:       assertEquals(221287, node0.getSourcePosition());
2146:       assertFalse(node0.isArrayLit());
2147:       assertFalse(node0.isVar());
2148:       assertFalse(node0.isStringKey());
2149:       assertFalse(node0.isFunction());
2150:       assertFalse(node0.isContinue());
2151:       assertFalse(node0.hasMoreThanOneChild());
2152:       assertFalse(node0.isIn());
2153:       assertEquals(39, node0.getType());
2154:       assertFalse(node0.isNE());
2155:       assertFalse(node0.isInc());
2156:       assertFalse(node0.isGetterDef());
2157:       assertFalse(node0.isCase());
2158:       assertFalse(node0.isHook());
2159:       assertFalse(node0.hasOneChild());
2160:       assertFalse(node0.isBlock());
2161:       assertFalse(node0.isTry());
2162:       assertFalse(node0.isFor());
2163:       assertFalse(node0.isRegExp());
2164:       assertFalse(node0.isThis());
2165:       assertFalse(node0.isIf());
2166:       assertFalse(node0.isWith());
2167:       assertFalse(node0.isInstanceOf());
2168:       assertFalse(node0.isCatch());
2169:       assertFalse(node0.isObjectLit());
2170:       assertEquals(103, node0.getCharno());
2171:       assertFalse(node0.isAnd());
2172:       assertFalse(node0.isScript());
2173:       assertFalse(node0.isNot());
2174:       assertFalse(node0.isGetProp());
2175:       assertFalse(node0.isLabelName());
2176:       assertFalse(node0.isThrow());
2177:       assertFalse(node0.isSwitch());
2178:       assertFalse(node0.isFalse());
2179:       assertFalse(node0.isCast());
2180:       assertTrue(node0.isNumber());
2181:       assertFalse(node0.isOr());
2182:       assertFalse(node0.isLabel());
2183:       assertFalse(node0.isAssignAdd());
2184:       assertFalse(node0.isReturn());
2185:       assertFalse(node0.isWhile());
2186:       assertFalse(node0.isNew());
2187:       assertFalse(node0.isDo());
2188:       assertFalse(node0.isEmpty());
2189:       assertFalse(node0.isAdd());
2190:       assertFalse(node0.isString());
2191:       assertFalse(node0.isName());
2192:       assertFalse(node0.isTrue());
2193:       assertFalse(node0.isTypeOf());
2194:       assertFalse(node0.isBreak());
2195:       assertFalse(node0.isDelProp());
2196:       assertFalse(node0.hasChildren());
2197:       assertFalse(node0.isVoid());
2198:       assertFalse(node0.isComma());
2199:       assertFalse(node0.isAssign());
2200:       assertFalse(node0.isDec());
2201:       assertFalse(node0.isGetElem());
2202:       assertFalse(node0.isExprResult());
2203:       assertFalse(node0.isCall());
2204:       assertFalse(node1.isArrayLit());
2205:       assertEquals((-930), node1.getType());
2206:       assertTrue(node1.hasOneChild());
2207:       assertFalse(node1.isDelProp());
2208:       assertFalse(node1.isTry());
2209:       assertFalse(node1.isFor());
2210:       assertFalse(node1.isIf());
2211:       assertFalse(node1.isFunction());
2212:       assertFalse(node1.isVoid());
2213:       assertFalse(node1.isRegExp());
2214:       assertTrue(node1.hasChildren());
2215:       assertEquals(1, node1.getChildCount());
2216:       assertFalse(node1.isCase());
2217:       assertFalse(node1.isParamList());
2218:       assertFalse(node1.isDebugger());
2219:       assertFalse(node1.isGetterDef());
2220:       assertFalse(node1.isString());
2221:       assertFalse(node1.isHook());
2222:       assertFalse(node1.isThrow());
2223:       assertFalse(node1.isThis());
2224:       assertFalse(node1.isBlock());
2225:       assertFalse(node1.isFalse());
2226:       assertFalse(node1.isInstanceOf());
2227:       assertFalse(node1.isContinue());
2228:       assertFalse(node1.isCatch());
2229:       assertFalse(node1.isNE());
2230:       assertFalse(node1.isSetterDef());
2231:       assertFalse(node1.isInc());
2232:       assertFalse(node1.isIn());
2233:       assertFalse(node1.isCast());
2234:       assertFalse(node1.isGetElem());
2235:       assertFalse(node1.isLabelName());
2236:       assertFalse(node1.isTypeOf());
2237:       assertFalse(node1.isExprResult());
2238:       assertFalse(node1.isDec());
2239:       assertEquals(46, node1.getCharno());
2240:       assertFalse(node1.isLabel());
2241:       assertFalse(node1.isWith());
2242:       assertFalse(node1.isAssign());
2243:       assertFalse(node1.hasMoreThanOneChild());
2244:       assertFalse(node1.isObjectLit());
2245:       assertFalse(node1.isReturn());
2246:       assertEquals(1935224878, node1.getSourcePosition());
2247:       assertFalse(node1.isAnd());
2248:       assertFalse(node1.isWhile());
2249:       assertFalse(node1.isScript());
2250:       assertFalse(node1.isGetProp());
2251:       assertFalse(node1.isNot());
2252:       assertFalse(node1.isNumber());
2253:       assertFalse(node1.isVar());
2254:       assertFalse(node1.isCall());
2255:       assertFalse(node1.isName());
2256:       assertFalse(node1.isStringKey());
2257:       assertFalse(node1.isComma());
2258:       assertFalse(node1.isSwitch());
2259:       assertFalse(node1.isBreak());
2260:       assertFalse(node1.isDo());
2261:       assertFalse(node1.isDefaultCase());
2262:       assertFalse(node1.isAssignAdd());
2263:       assertFalse(node1.isTrue());
2264:       assertFalse(node1.isNull());
2265:       assertFalse(node1.isNew());
2266:       assertFalse(node1.isOr());
2267:       assertFalse(node1.isEmpty());
2268:       assertFalse(node1.isAdd());
2269:       assertEquals(472467, node1.getLineno());
2270:       assertFalse(node2.isAdd());
2271:       assertFalse(node2.isNew());
2272:       assertFalse(node2.isCall());
2273:       assertFalse(node2.isNull());
2274:       assertFalse(node2.isName());
2275:       assertFalse(node2.isParamList());
2276:       assertFalse(node2.isStringKey());
2277:       assertFalse(node2.isOr());
2278:       assertFalse(node2.isContinue());
2279:       assertFalse(node2.isDefaultCase());
2280:       assertFalse(node2.isSetterDef());
2281:       assertFalse(node2.isFunction());
2282:       assertFalse(node2.isDo());
2283:       assertFalse(node2.isLabel());
2284:       assertFalse(node2.isAssignAdd());
2285:       assertFalse(node2.isVar());
2286:       assertFalse(node2.isGetElem());
2287:       assertFalse(node2.isExprResult());
2288:       assertFalse(node2.isEmpty());
2289:       assertFalse(node2.isCast());
2290:       assertEquals((-1), node2.getSourcePosition());
2291:       assertFalse(node2.isDelProp());
2292:       assertFalse(node2.isDebugger());
2293:       assertFalse(node2.isNot());
2294:       assertFalse(node2.isVoid());
2295:       assertFalse(node2.isAnd());
2296:       assertFalse(node2.isTrue());
2297:       assertFalse(node2.isObjectLit());
2298:       assertFalse(node2.isGetProp());
2299:       assertFalse(node2.isString());
2300:       assertFalse(node2.isTypeOf());
2301:       assertFalse(node2.isComma());
2302:       assertFalse(node2.isAssign());
2303:       assertFalse(node2.isDec());
2304:       assertTrue(node2.hasOneChild());
2305:       assertFalse(node2.isWhile());
2306:       assertFalse(node2.isReturn());
2307:       assertFalse(node2.isHook());
2308:       assertFalse(node2.isFalse());
2309:       assertFalse(node2.isInc());
2310:       assertFalse(node2.isBreak());
2311:       assertFalse(node2.isSwitch());
2312:       assertEquals(54, node2.getType());
2313:       assertEquals((-1), node2.getCharno());
2314:       assertFalse(node2.isIn());
2315:       assertFalse(node2.isThrow());
2316:       assertFalse(node2.isArrayLit());
2317:       assertFalse(node2.isTry());
2318:       assertFalse(node2.isNumber());
2319:       assertFalse(node2.isIf());
2320:       assertFalse(node2.isGetterDef());
2321:       assertFalse(node2.isLabelName());
2322:       assertFalse(node2.isNE());
2323:       assertFalse(node2.hasMoreThanOneChild());
2324:       assertEquals((-1), node2.getLineno());
2325:       assertEquals(1, node2.getChildCount());
2326:       assertFalse(node2.isCase());
2327:       assertFalse(node2.isWith());
2328:       assertFalse(node2.isInstanceOf());
2329:       assertTrue(node2.hasChildren());
2330:       assertFalse(node2.isCatch());
2331:       assertFalse(node2.isScript());
2332:       assertFalse(node2.isRegExp());
2333:       assertFalse(node2.isBlock());
2334:       assertFalse(node2.isFor());
2335:       assertFalse(node2.isThis());
2336:       assertNotNull(node_AncestorIterable0);
2337:       assertEquals(52, Node.LENGTH);
2338:       assertEquals(40, Node.ORIGINALNAME_PROP);
2339:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2340:       assertEquals(49, Node.DIRECT_EVAL);
2341:       assertEquals(50, Node.FREE_CALL);
2342:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2343:       assertEquals(8, Node.FLAG_NO_THROWS);
2344:       assertEquals(54, Node.SLASH_V);
2345:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2346:       assertEquals(57, Node.REFLECTED_OBJECT);
2347:       assertEquals(32, Node.INCRDECR_PROP);
2348:       assertEquals(4095, Node.COLUMN_MASK);
2349:       assertEquals(37, Node.OPT_ARG_NAME);
2350:       assertEquals(48, Node.DIRECTIVES);
2351:       assertEquals(1, Node.DECR_FLAG);
2352:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2354:       assertEquals(12, Node.COLUMN_BITS);
2355:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2356:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2357:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2358:       assertEquals(29, Node.JSDOC_INFO_PROP);
2359:       assertEquals(53, Node.INPUT_ID);
2360:       assertEquals(56, Node.CHANGE_TIME);
2361:       assertEquals(43, Node.IS_CONSTANT_NAME);
2362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2363:       assertEquals(36, Node.QUOTED_PROP);
2364:       assertEquals(46, Node.IS_NAMESPACE);
2365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2366:       assertEquals(55, Node.INFERRED_FUNCTION);
2367:       assertEquals(39, Node.EMPTY_BLOCK);
2368:       assertEquals(30, Node.VAR_ARGS_NAME);
2369:       assertEquals(57, Node.LAST_PROP);
2370:       assertEquals(2, Node.POST_FLAG);
2371:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2372:       assertEquals(47, Node.IS_DISPATCHER);
2373:       assertEquals(4095, Node.COLUMN_MASK);
2374:       assertEquals(48, Node.DIRECTIVES);
2375:       assertEquals(55, Node.INFERRED_FUNCTION);
2376:       assertEquals(39, Node.EMPTY_BLOCK);
2377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2379:       assertEquals(57, Node.REFLECTED_OBJECT);
2380:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2381:       assertEquals(52, Node.LENGTH);
2382:       assertEquals(29, Node.JSDOC_INFO_PROP);
2383:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2384:       assertEquals(53, Node.INPUT_ID);
2385:       assertEquals(56, Node.CHANGE_TIME);
2386:       assertEquals(36, Node.QUOTED_PROP);
2387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2388:       assertEquals(8, Node.FLAG_NO_THROWS);
2389:       assertEquals(49, Node.DIRECT_EVAL);
2390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2391:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2392:       assertEquals(32, Node.INCRDECR_PROP);
2393:       assertEquals(1, Node.DECR_FLAG);
2394:       assertEquals(37, Node.OPT_ARG_NAME);
2395:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2396:       assertEquals(57, Node.LAST_PROP);
2397:       assertEquals(47, Node.IS_DISPATCHER);
2398:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2399:       assertEquals(2, Node.POST_FLAG);
2400:       assertEquals(30, Node.VAR_ARGS_NAME);
2401:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2402:       assertEquals(12, Node.COLUMN_BITS);
2403:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2404:       assertEquals(40, Node.ORIGINALNAME_PROP);
2405:       assertEquals(43, Node.IS_CONSTANT_NAME);
2406:       assertEquals(50, Node.FREE_CALL);
2407:       assertEquals(46, Node.IS_NAMESPACE);
2408:       assertEquals(54, Node.SLASH_V);
2409:       assertEquals(32, Node.INCRDECR_PROP);
2410:       assertEquals(46, Node.IS_NAMESPACE);
2411:       assertEquals(2, Node.POST_FLAG);
2412:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2413:       assertEquals(12, Node.COLUMN_BITS);
2414:       assertEquals(47, Node.IS_DISPATCHER);
2415:       assertEquals(30, Node.VAR_ARGS_NAME);
2416:       assertEquals(49, Node.DIRECT_EVAL);
2417:       assertEquals(56, Node.CHANGE_TIME);
2418:       assertEquals(37, Node.OPT_ARG_NAME);
2419:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2420:       assertEquals(54, Node.SLASH_V);
2421:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2422:       assertEquals(50, Node.FREE_CALL);
2423:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2424:       assertEquals(1, Node.DECR_FLAG);
2425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2426:       assertEquals(4095, Node.COLUMN_MASK);
2427:       assertEquals(8, Node.FLAG_NO_THROWS);
2428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2429:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2430:       assertEquals(43, Node.IS_CONSTANT_NAME);
2431:       assertEquals(40, Node.ORIGINALNAME_PROP);
2432:       assertEquals(48, Node.DIRECTIVES);
2433:       assertEquals(52, Node.LENGTH);
2434:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2435:       assertEquals(36, Node.QUOTED_PROP);
2436:       assertEquals(57, Node.REFLECTED_OBJECT);
2437:       assertEquals(29, Node.JSDOC_INFO_PROP);
2438:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2439:       assertEquals(57, Node.LAST_PROP);
2440:       assertEquals(39, Node.EMPTY_BLOCK);
2441:       assertEquals(55, Node.INFERRED_FUNCTION);
2442:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2443:       assertEquals(53, Node.INPUT_ID);
2444:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2445:       assertNotSame(node1, node2);
2446:       assertNotSame(node2, node1);
2447:   }
2448: }
RegularFileObject[/tmp/EvoSuite_366_1628158455877/com/google/javascript/rhino/Node_366_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:16 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_366_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_366_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_366_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:16.587 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) 54, 54, 103);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(node0);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

Node node1 = new Node((-930), node0, node0, node0, 461845907, 46);
assertFalse(node1.equals((Object)node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(472467, node1.getLineno());
assertNotNull(node1);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node2 = new Node(54, node1, node1, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(472467, node1.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertEquals(54, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertNotNull(node2);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);

node2.setSourceFileForTesting("\n\nSubtree2: ");
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(472467, node1.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertEquals(54, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node1, node2);
assertNotSame(node2, node1);

boolean boolean0 = node2.isQualifiedName();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(472467, node1.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertEquals(54, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(boolean0);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node1, node2);
assertNotSame(node2, node1);

boolean boolean1 = node2.isFalse();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(472467, node1.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertEquals(54, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(boolean1);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node1, node2);
assertNotSame(node2, node1);

boolean boolean2 = node0.isWhile();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(boolean2);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(iterable0.contains(node2));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(iterable0);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

int int0 = node1.getIndexOfChild(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(472467, node1.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertEquals(54, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertEquals((-1), int0);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node1, node2);
assertNotSame(node2, node1);

Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(221287, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(472467, node1.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertEquals(54, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertNotNull(node_AncestorIterable0);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node1, node2);
assertNotSame(node2, node1);


[MASTER] 10:14:17.712 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_376_1628158457465/com/google/javascript/rhino/Node_376_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_376_1628158457465/com/google/javascript/rhino/Node_376_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:17.713 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:17.713 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:17.713 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 966
[MASTER] 10:14:17.714 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_376_1628158457465/com/google/javascript/rhino/Node_376_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:17 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_376_tmp__ESTest extends Node_376_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber((double) 54, 1215, 103);
22:       assertFalse(node0.isCatch());
23:       assertEquals(0, node0.getChildCount());
24:       assertFalse(node0.isVoid());
25:       assertFalse(node0.isTrue());
26:       assertFalse(node0.isParamList());
27:       assertFalse(node0.isFunction());
28:       assertFalse(node0.isRegExp());
29:       assertFalse(node0.isArrayLit());
30:       assertFalse(node0.isName());
31:       assertFalse(node0.isVar());
32:       assertFalse(node0.isNull());
33:       assertFalse(node0.isDefaultCase());
34:       assertFalse(node0.isDo());
35:       assertFalse(node0.isEmpty());
36:       assertFalse(node0.isAdd());
37:       assertFalse(node0.isNew());
38:       assertFalse(node0.isSetterDef());
39:       assertFalse(node0.isContinue());
40:       assertFalse(node0.isWhile());
41:       assertFalse(node0.isOr());
42:       assertFalse(node0.isReturn());
43:       assertFalse(node0.isTypeOf());
44:       assertFalse(node0.isDelProp());
45:       assertEquals(1215, node0.getLineno());
46:       assertFalse(node0.isGetElem());
47:       assertFalse(node0.isCall());
48:       assertFalse(node0.isAssign());
49:       assertFalse(node0.isDec());
50:       assertFalse(node0.hasChildren());
51:       assertFalse(node0.isDebugger());
52:       assertFalse(node0.isString());
53:       assertTrue(node0.isNumber());
54:       assertFalse(node0.isGetProp());
55:       assertFalse(node0.isAnd());
56:       assertFalse(node0.isObjectLit());
57:       assertEquals(103, node0.getCharno());
58:       assertFalse(node0.isWith());
59:       assertFalse(node0.isNot());
60:       assertFalse(node0.isExprResult());
61:       assertFalse(node0.isComma());
62:       assertFalse(node0.isInstanceOf());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isThrow());
65:       assertFalse(node0.isCast());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isInc());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.hasMoreThanOneChild());
70:       assertFalse(node0.isIn());
71:       assertFalse(node0.isLabel());
72:       assertEquals(39, node0.getType());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.isIf());
76:       assertFalse(node0.isLabelName());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isGetterDef());
79:       assertFalse(node0.isBlock());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isThis());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isTry());
84:       assertEquals(4976743, node0.getSourcePosition());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isScript());
87:       assertFalse(node0.isCase());
88:       assertNotNull(node0);
89:       assertEquals(57, Node.REFLECTED_OBJECT);
90:       assertEquals(40, Node.ORIGINALNAME_PROP);
91:       assertEquals(57, Node.LAST_PROP);
92:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
93:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
94:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
95:       assertEquals(30, Node.VAR_ARGS_NAME);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(12, Node.COLUMN_BITS);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(32, Node.INCRDECR_PROP);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(43, Node.IS_CONSTANT_NAME);
102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
103:       assertEquals(54, Node.SLASH_V);
104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
105:       assertEquals(50, Node.FREE_CALL);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(53, Node.INPUT_ID);
108:       assertEquals(47, Node.IS_DISPATCHER);
109:       assertEquals(2, Node.POST_FLAG);
110:       assertEquals(4095, Node.COLUMN_MASK);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(55, Node.INFERRED_FUNCTION);
113:       assertEquals(37, Node.OPT_ARG_NAME);
114:       assertEquals(48, Node.DIRECTIVES);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(36, Node.QUOTED_PROP);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(39, Node.EMPTY_BLOCK);
121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
122:       assertEquals(29, Node.JSDOC_INFO_PROP);
123:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
124:       assertEquals(52, Node.LENGTH);
125:       
126:       Node node1 = new Node((-930), node0, node0, node0, 461845907, 46);
127:       assertFalse(node1.equals((Object)node0));
128:       assertFalse(node0.isCatch());
129:       assertEquals(0, node0.getChildCount());
130:       assertFalse(node0.isVoid());
131:       assertFalse(node0.isTrue());
132:       assertFalse(node0.isParamList());
133:       assertFalse(node0.isFunction());
134:       assertFalse(node0.isRegExp());
135:       assertFalse(node0.isArrayLit());
136:       assertFalse(node0.isName());
137:       assertFalse(node0.isVar());
138:       assertFalse(node0.isNull());
139:       assertFalse(node0.isDefaultCase());
140:       assertFalse(node0.isDo());
141:       assertFalse(node0.isEmpty());
142:       assertFalse(node0.isAdd());
143:       assertFalse(node0.isNew());
144:       assertFalse(node0.isSetterDef());
145:       assertFalse(node0.isContinue());
146:       assertFalse(node0.isWhile());
147:       assertFalse(node0.isOr());
148:       assertFalse(node0.isReturn());
149:       assertFalse(node0.isTypeOf());
150:       assertFalse(node0.isDelProp());
151:       assertEquals(1215, node0.getLineno());
152:       assertFalse(node0.isGetElem());
153:       assertFalse(node0.isCall());
154:       assertFalse(node0.isAssign());
155:       assertFalse(node0.isDec());
156:       assertFalse(node0.hasChildren());
157:       assertFalse(node0.isDebugger());
158:       assertFalse(node0.isString());
159:       assertTrue(node0.isNumber());
160:       assertFalse(node0.isGetProp());
161:       assertFalse(node0.isAnd());
162:       assertFalse(node0.isObjectLit());
163:       assertEquals(103, node0.getCharno());
164:       assertFalse(node0.isWith());
165:       assertFalse(node0.isNot());
166:       assertFalse(node0.isExprResult());
167:       assertFalse(node0.isComma());
168:       assertFalse(node0.isInstanceOf());
169:       assertFalse(node0.isBreak());
170:       assertFalse(node0.isThrow());
171:       assertFalse(node0.isCast());
172:       assertFalse(node0.isFalse());
173:       assertFalse(node0.isInc());
174:       assertFalse(node0.isAssignAdd());
175:       assertFalse(node0.hasMoreThanOneChild());
176:       assertFalse(node0.isIn());
177:       assertFalse(node0.isLabel());
178:       assertEquals(39, node0.getType());
179:       assertFalse(node0.isNE());
180:       assertFalse(node0.isSwitch());
181:       assertFalse(node0.isIf());
182:       assertFalse(node0.isLabelName());
183:       assertFalse(node0.isStringKey());
184:       assertFalse(node0.isGetterDef());
185:       assertFalse(node0.isBlock());
186:       assertFalse(node0.isFor());
187:       assertFalse(node0.isThis());
188:       assertFalse(node0.isHook());
189:       assertFalse(node0.isTry());
190:       assertEquals(4976743, node0.getSourcePosition());
191:       assertFalse(node0.hasOneChild());
192:       assertFalse(node0.isScript());
193:       assertFalse(node0.isCase());
194:       assertFalse(node1.isParamList());
195:       assertFalse(node1.isNull());
196:       assertFalse(node1.isName());
197:       assertFalse(node1.isRegExp());
198:       assertFalse(node1.isVoid());
199:       assertFalse(node1.isCall());
200:       assertFalse(node1.isCatch());
201:       assertFalse(node1.isTrue());
202:       assertFalse(node1.isFunction());
203:       assertFalse(node1.isVar());
204:       assertFalse(node1.isDo());
205:       assertFalse(node1.isDefaultCase());
206:       assertEquals(472467, node1.getLineno());
207:       assertFalse(node1.isEmpty());
208:       assertFalse(node1.isAdd());
209:       assertFalse(node1.isNew());
210:       assertFalse(node1.isSetterDef());
211:       assertFalse(node1.isOr());
212:       assertEquals(46, node1.getCharno());
213:       assertFalse(node1.isReturn());
214:       assertFalse(node1.isDelProp());
215:       assertFalse(node1.isAssign());
216:       assertFalse(node1.isDec());
217:       assertFalse(node1.isTypeOf());
218:       assertFalse(node1.isContinue());
219:       assertFalse(node1.isCast());
220:       assertFalse(node1.isGetElem());
221:       assertEquals((-930), node1.getType());
222:       assertFalse(node1.isDebugger());
223:       assertTrue(node1.hasOneChild());
224:       assertFalse(node1.isString());
225:       assertFalse(node1.isWhile());
226:       assertFalse(node1.isNot());
227:       assertFalse(node1.isGetProp());
228:       assertFalse(node1.isInstanceOf());
229:       assertFalse(node1.isAnd());
230:       assertFalse(node1.isObjectLit());
231:       assertFalse(node1.isComma());
232:       assertEquals(1935224878, node1.getSourcePosition());
233:       assertFalse(node1.isThis());
234:       assertFalse(node1.isBreak());
235:       assertFalse(node1.isFalse());
236:       assertFalse(node1.isWith());
237:       assertFalse(node1.isExprResult());
238:       assertFalse(node1.isThrow());
239:       assertFalse(node1.isInc());
240:       assertEquals(1, node1.getChildCount());
241:       assertTrue(node1.hasChildren());
242:       assertFalse(node1.isAssignAdd());
243:       assertFalse(node1.hasMoreThanOneChild());
244:       assertFalse(node1.isIn());
245:       assertFalse(node1.isNE());
246:       assertFalse(node1.isLabel());
247:       assertFalse(node1.isLabelName());
248:       assertFalse(node1.isSwitch());
249:       assertFalse(node1.isIf());
250:       assertFalse(node1.isArrayLit());
251:       assertFalse(node1.isTry());
252:       assertFalse(node1.isStringKey());
253:       assertFalse(node1.isBlock());
254:       assertFalse(node1.isFor());
255:       assertFalse(node1.isHook());
256:       assertFalse(node1.isGetterDef());
257:       assertFalse(node1.isNumber());
258:       assertFalse(node1.isScript());
259:       assertFalse(node1.isCase());
260:       assertNotNull(node1);
261:       assertEquals(57, Node.REFLECTED_OBJECT);
262:       assertEquals(40, Node.ORIGINALNAME_PROP);
263:       assertEquals(57, Node.LAST_PROP);
264:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
265:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
267:       assertEquals(30, Node.VAR_ARGS_NAME);
268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
269:       assertEquals(12, Node.COLUMN_BITS);
270:       assertEquals(46, Node.IS_NAMESPACE);
271:       assertEquals(32, Node.INCRDECR_PROP);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(43, Node.IS_CONSTANT_NAME);
274:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
275:       assertEquals(54, Node.SLASH_V);
276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
277:       assertEquals(50, Node.FREE_CALL);
278:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
279:       assertEquals(53, Node.INPUT_ID);
280:       assertEquals(47, Node.IS_DISPATCHER);
281:       assertEquals(2, Node.POST_FLAG);
282:       assertEquals(4095, Node.COLUMN_MASK);
283:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
284:       assertEquals(55, Node.INFERRED_FUNCTION);
285:       assertEquals(37, Node.OPT_ARG_NAME);
286:       assertEquals(48, Node.DIRECTIVES);
287:       assertEquals(49, Node.DIRECT_EVAL);
288:       assertEquals(56, Node.CHANGE_TIME);
289:       assertEquals(36, Node.QUOTED_PROP);
290:       assertEquals(15, Node.NO_SIDE_EFFECTS);
291:       assertEquals(8, Node.FLAG_NO_THROWS);
292:       assertEquals(39, Node.EMPTY_BLOCK);
293:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
294:       assertEquals(29, Node.JSDOC_INFO_PROP);
295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
296:       assertEquals(52, Node.LENGTH);
297:       assertEquals(52, Node.LENGTH);
298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
299:       assertEquals(54, Node.SLASH_V);
300:       assertEquals(15, Node.NO_SIDE_EFFECTS);
301:       assertEquals(57, Node.LAST_PROP);
302:       assertEquals(49, Node.DIRECT_EVAL);
303:       assertEquals(40, Node.ORIGINALNAME_PROP);
304:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
305:       assertEquals(12, Node.COLUMN_BITS);
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertEquals(46, Node.IS_NAMESPACE);
308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
309:       assertEquals(32, Node.INCRDECR_PROP);
310:       assertEquals(1, Node.DECR_FLAG);
311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
312:       assertEquals(50, Node.FREE_CALL);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(53, Node.INPUT_ID);
315:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
316:       assertEquals(43, Node.IS_CONSTANT_NAME);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(4095, Node.COLUMN_MASK);
319:       assertEquals(47, Node.IS_DISPATCHER);
320:       assertEquals(2, Node.POST_FLAG);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(39, Node.EMPTY_BLOCK);
323:       assertEquals(37, Node.OPT_ARG_NAME);
324:       assertEquals(48, Node.DIRECTIVES);
325:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(56, Node.CHANGE_TIME);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(57, Node.REFLECTED_OBJECT);
332:       assertEquals(8, Node.FLAG_NO_THROWS);
333:       
334:       Node node2 = new Node(54, node1, node1, node1);
335:       assertFalse(node0.equals((Object)node1));
336:       assertFalse(node1.equals((Object)node0));
337:       assertFalse(node2.equals((Object)node0));
338:       assertFalse(node2.equals((Object)node1));
339:       assertFalse(node0.isCatch());
340:       assertEquals(0, node0.getChildCount());
341:       assertFalse(node0.isVoid());
342:       assertFalse(node0.isTrue());
343:       assertFalse(node0.isParamList());
344:       assertFalse(node0.isFunction());
345:       assertFalse(node0.isRegExp());
346:       assertFalse(node0.isArrayLit());
347:       assertFalse(node0.isName());
348:       assertFalse(node0.isVar());
349:       assertFalse(node0.isNull());
350:       assertFalse(node0.isDefaultCase());
351:       assertFalse(node0.isDo());
352:       assertFalse(node0.isEmpty());
353:       assertFalse(node0.isAdd());
354:       assertFalse(node0.isNew());
355:       assertFalse(node0.isSetterDef());
356:       assertFalse(node0.isContinue());
357:       assertFalse(node0.isWhile());
358:       assertFalse(node0.isOr());
359:       assertFalse(node0.isReturn());
360:       assertFalse(node0.isTypeOf());
361:       assertFalse(node0.isDelProp());
362:       assertEquals(1215, node0.getLineno());
363:       assertFalse(node0.isGetElem());
364:       assertFalse(node0.isCall());
365:       assertFalse(node0.isAssign());
366:       assertFalse(node0.isDec());
367:       assertFalse(node0.hasChildren());
368:       assertFalse(node0.isDebugger());
369:       assertFalse(node0.isString());
370:       assertTrue(node0.isNumber());
371:       assertFalse(node0.isGetProp());
372:       assertFalse(node0.isAnd());
373:       assertFalse(node0.isObjectLit());
374:       assertEquals(103, node0.getCharno());
375:       assertFalse(node0.isWith());
376:       assertFalse(node0.isNot());
377:       assertFalse(node0.isExprResult());
378:       assertFalse(node0.isComma());
379:       assertFalse(node0.isInstanceOf());
380:       assertFalse(node0.isBreak());
381:       assertFalse(node0.isThrow());
382:       assertFalse(node0.isCast());
383:       assertFalse(node0.isFalse());
384:       assertFalse(node0.isInc());
385:       assertFalse(node0.isAssignAdd());
386:       assertFalse(node0.hasMoreThanOneChild());
387:       assertFalse(node0.isIn());
388:       assertFalse(node0.isLabel());
389:       assertEquals(39, node0.getType());
390:       assertFalse(node0.isNE());
391:       assertFalse(node0.isSwitch());
392:       assertFalse(node0.isIf());
393:       assertFalse(node0.isLabelName());
394:       assertFalse(node0.isStringKey());
395:       assertFalse(node0.isGetterDef());
396:       assertFalse(node0.isBlock());
397:       assertFalse(node0.isFor());
398:       assertFalse(node0.isThis());
399:       assertFalse(node0.isHook());
400:       assertFalse(node0.isTry());
401:       assertEquals(4976743, node0.getSourcePosition());
402:       assertFalse(node0.hasOneChild());
403:       assertFalse(node0.isScript());
404:       assertFalse(node0.isCase());
405:       assertFalse(node1.isParamList());
406:       assertFalse(node1.isNull());
407:       assertFalse(node1.isName());
408:       assertFalse(node1.isRegExp());
409:       assertFalse(node1.isVoid());
410:       assertFalse(node1.isCall());
411:       assertFalse(node1.isCatch());
412:       assertFalse(node1.isTrue());
413:       assertFalse(node1.isFunction());
414:       assertFalse(node1.isVar());
415:       assertFalse(node1.isDo());
416:       assertFalse(node1.isDefaultCase());
417:       assertEquals(472467, node1.getLineno());
418:       assertFalse(node1.isEmpty());
419:       assertFalse(node1.isAdd());
420:       assertFalse(node1.isNew());
421:       assertFalse(node1.isSetterDef());
422:       assertFalse(node1.isOr());
423:       assertEquals(46, node1.getCharno());
424:       assertFalse(node1.isReturn());
425:       assertFalse(node1.isDelProp());
426:       assertFalse(node1.isAssign());
427:       assertFalse(node1.isDec());
428:       assertFalse(node1.isTypeOf());
429:       assertFalse(node1.isContinue());
430:       assertFalse(node1.isCast());
431:       assertFalse(node1.isGetElem());
432:       assertEquals((-930), node1.getType());
433:       assertFalse(node1.isDebugger());
434:       assertTrue(node1.hasOneChild());
435:       assertFalse(node1.isString());
436:       assertFalse(node1.isWhile());
437:       assertFalse(node1.isNot());
438:       assertFalse(node1.isGetProp());
439:       assertFalse(node1.isInstanceOf());
440:       assertFalse(node1.isAnd());
441:       assertFalse(node1.isObjectLit());
442:       assertFalse(node1.isComma());
443:       assertEquals(1935224878, node1.getSourcePosition());
444:       assertFalse(node1.isThis());
445:       assertFalse(node1.isBreak());
446:       assertFalse(node1.isFalse());
447:       assertFalse(node1.isWith());
448:       assertFalse(node1.isExprResult());
449:       assertFalse(node1.isThrow());
450:       assertFalse(node1.isInc());
451:       assertEquals(1, node1.getChildCount());
452:       assertTrue(node1.hasChildren());
453:       assertFalse(node1.isAssignAdd());
454:       assertFalse(node1.hasMoreThanOneChild());
455:       assertFalse(node1.isIn());
456:       assertFalse(node1.isNE());
457:       assertFalse(node1.isLabel());
458:       assertFalse(node1.isLabelName());
459:       assertFalse(node1.isSwitch());
460:       assertFalse(node1.isIf());
461:       assertFalse(node1.isArrayLit());
462:       assertFalse(node1.isTry());
463:       assertFalse(node1.isStringKey());
464:       assertFalse(node1.isBlock());
465:       assertFalse(node1.isFor());
466:       assertFalse(node1.isHook());
467:       assertFalse(node1.isGetterDef());
468:       assertFalse(node1.isNumber());
469:       assertFalse(node1.isScript());
470:       assertFalse(node1.isCase());
471:       assertFalse(node2.isFalse());
472:       assertFalse(node2.isThrow());
473:       assertFalse(node2.isThis());
474:       assertFalse(node2.isHook());
475:       assertFalse(node2.isComma());
476:       assertEquals(54, node2.getType());
477:       assertFalse(node2.isInstanceOf());
478:       assertFalse(node2.isSwitch());
479:       assertFalse(node2.isBreak());
480:       assertFalse(node2.isWith());
481:       assertFalse(node2.isNot());
482:       assertFalse(node2.isAnd());
483:       assertFalse(node2.isString());
484:       assertFalse(node2.isObjectLit());
485:       assertEquals((-1), node2.getCharno());
486:       assertEquals(1, node2.getChildCount());
487:       assertFalse(node2.isScript());
488:       assertFalse(node2.isGetProp());
489:       assertFalse(node2.isCase());
490:       assertFalse(node2.isEmpty());
491:       assertFalse(node2.isAssign());
492:       assertFalse(node2.isLabelName());
493:       assertTrue(node2.hasOneChild());
494:       assertFalse(node2.isDelProp());
495:       assertFalse(node2.isGetElem());
496:       assertFalse(node2.isNumber());
497:       assertFalse(node2.isTypeOf());
498:       assertFalse(node2.isGetterDef());
499:       assertFalse(node2.isDec());
500:       assertFalse(node2.isExprResult());
501:       assertFalse(node2.isVoid());
502:       assertFalse(node2.isArrayLit());
503:       assertFalse(node2.isDo());
504:       assertFalse(node2.isDefaultCase());
505:       assertFalse(node2.isTrue());
506:       assertFalse(node2.isLabel());
507:       assertFalse(node2.isOr());
508:       assertFalse(node2.isAssignAdd());
509:       assertFalse(node2.isAdd());
510:       assertFalse(node2.isNew());
511:       assertFalse(node2.isName());
512:       assertFalse(node2.isStringKey());
513:       assertFalse(node2.isVar());
514:       assertFalse(node2.isNull());
515:       assertFalse(node2.isParamList());
516:       assertFalse(node2.isCatch());
517:       assertFalse(node2.isCall());
518:       assertFalse(node2.isWhile());
519:       assertFalse(node2.hasMoreThanOneChild());
520:       assertFalse(node2.isRegExp());
521:       assertFalse(node2.isDebugger());
522:       assertFalse(node2.isTry());
523:       assertFalse(node2.isReturn());
524:       assertFalse(node2.isBlock());
525:       assertFalse(node2.isFor());
526:       assertFalse(node2.isIf());
527:       assertFalse(node2.isNE());
528:       assertEquals((-1), node2.getSourcePosition());
529:       assertTrue(node2.hasChildren());
530:       assertFalse(node2.isCast());
531:       assertEquals((-1), node2.getLineno());
532:       assertFalse(node2.isContinue());
533:       assertFalse(node2.isFunction());
534:       assertFalse(node2.isIn());
535:       assertFalse(node2.isSetterDef());
536:       assertFalse(node2.isInc());
537:       assertNotNull(node2);
538:       assertEquals(57, Node.REFLECTED_OBJECT);
539:       assertEquals(40, Node.ORIGINALNAME_PROP);
540:       assertEquals(57, Node.LAST_PROP);
541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
542:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
544:       assertEquals(30, Node.VAR_ARGS_NAME);
545:       assertEquals(51, Node.STATIC_SOURCE_FILE);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(46, Node.IS_NAMESPACE);
548:       assertEquals(32, Node.INCRDECR_PROP);
549:       assertEquals(1, Node.DECR_FLAG);
550:       assertEquals(43, Node.IS_CONSTANT_NAME);
551:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
552:       assertEquals(54, Node.SLASH_V);
553:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
554:       assertEquals(50, Node.FREE_CALL);
555:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
556:       assertEquals(53, Node.INPUT_ID);
557:       assertEquals(47, Node.IS_DISPATCHER);
558:       assertEquals(2, Node.POST_FLAG);
559:       assertEquals(4095, Node.COLUMN_MASK);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(55, Node.INFERRED_FUNCTION);
562:       assertEquals(37, Node.OPT_ARG_NAME);
563:       assertEquals(48, Node.DIRECTIVES);
564:       assertEquals(49, Node.DIRECT_EVAL);
565:       assertEquals(56, Node.CHANGE_TIME);
566:       assertEquals(36, Node.QUOTED_PROP);
567:       assertEquals(15, Node.NO_SIDE_EFFECTS);
568:       assertEquals(8, Node.FLAG_NO_THROWS);
569:       assertEquals(39, Node.EMPTY_BLOCK);
570:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
571:       assertEquals(29, Node.JSDOC_INFO_PROP);
572:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
573:       assertEquals(52, Node.LENGTH);
574:       assertEquals(52, Node.LENGTH);
575:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
576:       assertEquals(54, Node.SLASH_V);
577:       assertEquals(15, Node.NO_SIDE_EFFECTS);
578:       assertEquals(57, Node.LAST_PROP);
579:       assertEquals(49, Node.DIRECT_EVAL);
580:       assertEquals(40, Node.ORIGINALNAME_PROP);
581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
582:       assertEquals(12, Node.COLUMN_BITS);
583:       assertEquals(30, Node.VAR_ARGS_NAME);
584:       assertEquals(46, Node.IS_NAMESPACE);
585:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
586:       assertEquals(32, Node.INCRDECR_PROP);
587:       assertEquals(1, Node.DECR_FLAG);
588:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
589:       assertEquals(50, Node.FREE_CALL);
590:       assertEquals(51, Node.STATIC_SOURCE_FILE);
591:       assertEquals(53, Node.INPUT_ID);
592:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
593:       assertEquals(43, Node.IS_CONSTANT_NAME);
594:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
595:       assertEquals(4095, Node.COLUMN_MASK);
596:       assertEquals(47, Node.IS_DISPATCHER);
597:       assertEquals(2, Node.POST_FLAG);
598:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
599:       assertEquals(39, Node.EMPTY_BLOCK);
600:       assertEquals(37, Node.OPT_ARG_NAME);
601:       assertEquals(48, Node.DIRECTIVES);
602:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
603:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
604:       assertEquals(55, Node.INFERRED_FUNCTION);
605:       assertEquals(29, Node.JSDOC_INFO_PROP);
606:       assertEquals(56, Node.CHANGE_TIME);
607:       assertEquals(36, Node.QUOTED_PROP);
608:       assertEquals(57, Node.REFLECTED_OBJECT);
609:       assertEquals(8, Node.FLAG_NO_THROWS);
610:       assertEquals(1, Node.DECR_FLAG);
611:       assertEquals(12, Node.COLUMN_BITS);
612:       assertEquals(57, Node.LAST_PROP);
613:       assertEquals(32, Node.INCRDECR_PROP);
614:       assertEquals(46, Node.IS_NAMESPACE);
615:       assertEquals(49, Node.DIRECT_EVAL);
616:       assertEquals(37, Node.OPT_ARG_NAME);
617:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
618:       assertEquals(47, Node.IS_DISPATCHER);
619:       assertEquals(2, Node.POST_FLAG);
620:       assertEquals(30, Node.VAR_ARGS_NAME);
621:       assertEquals(29, Node.JSDOC_INFO_PROP);
622:       assertEquals(57, Node.REFLECTED_OBJECT);
623:       assertEquals(56, Node.CHANGE_TIME);
624:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
625:       assertEquals(15, Node.NO_SIDE_EFFECTS);
626:       assertEquals(39, Node.EMPTY_BLOCK);
627:       assertEquals(53, Node.INPUT_ID);
628:       assertEquals(36, Node.QUOTED_PROP);
629:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
630:       assertEquals(52, Node.LENGTH);
631:       assertEquals(8, Node.FLAG_NO_THROWS);
632:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
633:       assertEquals(55, Node.INFERRED_FUNCTION);
634:       assertEquals(43, Node.IS_CONSTANT_NAME);
635:       assertEquals(48, Node.DIRECTIVES);
636:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
637:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
639:       assertEquals(4095, Node.COLUMN_MASK);
640:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
641:       assertEquals(40, Node.ORIGINALNAME_PROP);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
644:       assertEquals(51, Node.STATIC_SOURCE_FILE);
645:       assertEquals(50, Node.FREE_CALL);
646:       
647:       node2.setSourceFileForTesting("\n\nSubtree2: ");
648:       assertFalse(node0.equals((Object)node2));
649:       assertFalse(node0.equals((Object)node1));
650:       assertFalse(node1.equals((Object)node2));
651:       assertFalse(node1.equals((Object)node0));
652:       assertFalse(node2.equals((Object)node0));
653:       assertFalse(node2.equals((Object)node1));
654:       assertFalse(node0.isCatch());
655:       assertEquals(0, node0.getChildCount());
656:       assertFalse(node0.isVoid());
657:       assertFalse(node0.isTrue());
658:       assertFalse(node0.isParamList());
659:       assertFalse(node0.isFunction());
660:       assertFalse(node0.isRegExp());
661:       assertFalse(node0.isArrayLit());
662:       assertFalse(node0.isName());
663:       assertFalse(node0.isVar());
664:       assertFalse(node0.isNull());
665:       assertFalse(node0.isDefaultCase());
666:       assertFalse(node0.isDo());
667:       assertFalse(node0.isEmpty());
668:       assertFalse(node0.isAdd());
669:       assertFalse(node0.isNew());
670:       assertFalse(node0.isSetterDef());
671:       assertFalse(node0.isContinue());
672:       assertFalse(node0.isWhile());
673:       assertFalse(node0.isOr());
674:       assertFalse(node0.isReturn());
675:       assertFalse(node0.isTypeOf());
676:       assertFalse(node0.isDelProp());
677:       assertEquals(1215, node0.getLineno());
678:       assertFalse(node0.isGetElem());
679:       assertFalse(node0.isCall());
680:       assertFalse(node0.isAssign());
681:       assertFalse(node0.isDec());
682:       assertFalse(node0.hasChildren());
683:       assertFalse(node0.isDebugger());
684:       assertFalse(node0.isString());
685:       assertTrue(node0.isNumber());
686:       assertFalse(node0.isGetProp());
687:       assertFalse(node0.isAnd());
688:       assertFalse(node0.isObjectLit());
689:       assertEquals(103, node0.getCharno());
690:       assertFalse(node0.isWith());
691:       assertFalse(node0.isNot());
692:       assertFalse(node0.isExprResult());
693:       assertFalse(node0.isComma());
694:       assertFalse(node0.isInstanceOf());
695:       assertFalse(node0.isBreak());
696:       assertFalse(node0.isThrow());
697:       assertFalse(node0.isCast());
698:       assertFalse(node0.isFalse());
699:       assertFalse(node0.isInc());
700:       assertFalse(node0.isAssignAdd());
701:       assertFalse(node0.hasMoreThanOneChild());
702:       assertFalse(node0.isIn());
703:       assertFalse(node0.isLabel());
704:       assertEquals(39, node0.getType());
705:       assertFalse(node0.isNE());
706:       assertFalse(node0.isSwitch());
707:       assertFalse(node0.isIf());
708:       assertFalse(node0.isLabelName());
709:       assertFalse(node0.isStringKey());
710:       assertFalse(node0.isGetterDef());
711:       assertFalse(node0.isBlock());
712:       assertFalse(node0.isFor());
713:       assertFalse(node0.isThis());
714:       assertFalse(node0.isHook());
715:       assertFalse(node0.isTry());
716:       assertEquals(4976743, node0.getSourcePosition());
717:       assertFalse(node0.hasOneChild());
718:       assertFalse(node0.isScript());
719:       assertFalse(node0.isCase());
720:       assertFalse(node1.isParamList());
721:       assertFalse(node1.isNull());
722:       assertFalse(node1.isName());
723:       assertFalse(node1.isRegExp());
724:       assertFalse(node1.isVoid());
725:       assertFalse(node1.isCall());
726:       assertFalse(node1.isCatch());
727:       assertFalse(node1.isTrue());
728:       assertFalse(node1.isFunction());
729:       assertFalse(node1.isVar());
730:       assertFalse(node1.isDo());
731:       assertFalse(node1.isDefaultCase());
732:       assertEquals(472467, node1.getLineno());
733:       assertFalse(node1.isEmpty());
734:       assertFalse(node1.isAdd());
735:       assertFalse(node1.isNew());
736:       assertFalse(node1.isSetterDef());
737:       assertFalse(node1.isOr());
738:       assertEquals(46, node1.getCharno());
739:       assertFalse(node1.isReturn());
740:       assertFalse(node1.isDelProp());
741:       assertFalse(node1.isAssign());
742:       assertFalse(node1.isDec());
743:       assertFalse(node1.isTypeOf());
744:       assertFalse(node1.isContinue());
745:       assertFalse(node1.isCast());
746:       assertFalse(node1.isGetElem());
747:       assertEquals((-930), node1.getType());
748:       assertFalse(node1.isDebugger());
749:       assertTrue(node1.hasOneChild());
750:       assertFalse(node1.isString());
751:       assertFalse(node1.isWhile());
752:       assertFalse(node1.isNot());
753:       assertFalse(node1.isGetProp());
754:       assertFalse(node1.isInstanceOf());
755:       assertFalse(node1.isAnd());
756:       assertFalse(node1.isObjectLit());
757:       assertFalse(node1.isComma());
758:       assertEquals(1935224878, node1.getSourcePosition());
759:       assertFalse(node1.isThis());
760:       assertFalse(node1.isBreak());
761:       assertFalse(node1.isFalse());
762:       assertFalse(node1.isWith());
763:       assertFalse(node1.isExprResult());
764:       assertFalse(node1.isThrow());
765:       assertFalse(node1.isInc());
766:       assertEquals(1, node1.getChildCount());
767:       assertTrue(node1.hasChildren());
768:       assertFalse(node1.isAssignAdd());
769:       assertFalse(node1.hasMoreThanOneChild());
770:       assertFalse(node1.isIn());
771:       assertFalse(node1.isNE());
772:       assertFalse(node1.isLabel());
773:       assertFalse(node1.isLabelName());
774:       assertFalse(node1.isSwitch());
775:       assertFalse(node1.isIf());
776:       assertFalse(node1.isArrayLit());
777:       assertFalse(node1.isTry());
778:       assertFalse(node1.isStringKey());
779:       assertFalse(node1.isBlock());
780:       assertFalse(node1.isFor());
781:       assertFalse(node1.isHook());
782:       assertFalse(node1.isGetterDef());
783:       assertFalse(node1.isNumber());
784:       assertFalse(node1.isScript());
785:       assertFalse(node1.isCase());
786:       assertFalse(node2.isFalse());
787:       assertFalse(node2.isThrow());
788:       assertFalse(node2.isThis());
789:       assertFalse(node2.isHook());
790:       assertFalse(node2.isComma());
791:       assertEquals(54, node2.getType());
792:       assertFalse(node2.isInstanceOf());
793:       assertFalse(node2.isSwitch());
794:       assertFalse(node2.isBreak());
795:       assertFalse(node2.isWith());
796:       assertFalse(node2.isNot());
797:       assertFalse(node2.isAnd());
798:       assertFalse(node2.isString());
799:       assertFalse(node2.isObjectLit());
800:       assertEquals((-1), node2.getCharno());
801:       assertEquals(1, node2.getChildCount());
802:       assertFalse(node2.isScript());
803:       assertFalse(node2.isGetProp());
804:       assertFalse(node2.isCase());
805:       assertFalse(node2.isEmpty());
806:       assertFalse(node2.isAssign());
807:       assertFalse(node2.isLabelName());
808:       assertTrue(node2.hasOneChild());
809:       assertFalse(node2.isDelProp());
810:       assertFalse(node2.isGetElem());
811:       assertFalse(node2.isNumber());
812:       assertFalse(node2.isTypeOf());
813:       assertFalse(node2.isGetterDef());
814:       assertFalse(node2.isDec());
815:       assertFalse(node2.isExprResult());
816:       assertFalse(node2.isVoid());
817:       assertFalse(node2.isArrayLit());
818:       assertFalse(node2.isDo());
819:       assertFalse(node2.isDefaultCase());
820:       assertFalse(node2.isTrue());
821:       assertFalse(node2.isLabel());
822:       assertFalse(node2.isOr());
823:       assertFalse(node2.isAssignAdd());
824:       assertFalse(node2.isAdd());
825:       assertFalse(node2.isNew());
826:       assertFalse(node2.isName());
827:       assertFalse(node2.isStringKey());
828:       assertFalse(node2.isVar());
829:       assertFalse(node2.isNull());
830:       assertFalse(node2.isParamList());
831:       assertFalse(node2.isCatch());
832:       assertFalse(node2.isCall());
833:       assertFalse(node2.isWhile());
834:       assertFalse(node2.hasMoreThanOneChild());
835:       assertFalse(node2.isRegExp());
836:       assertFalse(node2.isDebugger());
837:       assertFalse(node2.isTry());
838:       assertFalse(node2.isReturn());
839:       assertFalse(node2.isBlock());
840:       assertFalse(node2.isFor());
841:       assertFalse(node2.isIf());
842:       assertFalse(node2.isNE());
843:       assertEquals((-1), node2.getSourcePosition());
844:       assertTrue(node2.hasChildren());
845:       assertFalse(node2.isCast());
846:       assertEquals((-1), node2.getLineno());
847:       assertFalse(node2.isContinue());
848:       assertFalse(node2.isFunction());
849:       assertFalse(node2.isIn());
850:       assertFalse(node2.isSetterDef());
851:       assertFalse(node2.isInc());
852:       assertEquals(57, Node.REFLECTED_OBJECT);
853:       assertEquals(40, Node.ORIGINALNAME_PROP);
854:       assertEquals(57, Node.LAST_PROP);
855:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
856:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
857:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
858:       assertEquals(30, Node.VAR_ARGS_NAME);
859:       assertEquals(51, Node.STATIC_SOURCE_FILE);
860:       assertEquals(12, Node.COLUMN_BITS);
861:       assertEquals(46, Node.IS_NAMESPACE);
862:       assertEquals(32, Node.INCRDECR_PROP);
863:       assertEquals(1, Node.DECR_FLAG);
864:       assertEquals(43, Node.IS_CONSTANT_NAME);
865:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
866:       assertEquals(54, Node.SLASH_V);
867:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
868:       assertEquals(50, Node.FREE_CALL);
869:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
870:       assertEquals(53, Node.INPUT_ID);
871:       assertEquals(47, Node.IS_DISPATCHER);
872:       assertEquals(2, Node.POST_FLAG);
873:       assertEquals(4095, Node.COLUMN_MASK);
874:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
875:       assertEquals(55, Node.INFERRED_FUNCTION);
876:       assertEquals(37, Node.OPT_ARG_NAME);
877:       assertEquals(48, Node.DIRECTIVES);
878:       assertEquals(49, Node.DIRECT_EVAL);
879:       assertEquals(56, Node.CHANGE_TIME);
880:       assertEquals(36, Node.QUOTED_PROP);
881:       assertEquals(15, Node.NO_SIDE_EFFECTS);
882:       assertEquals(8, Node.FLAG_NO_THROWS);
883:       assertEquals(39, Node.EMPTY_BLOCK);
884:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
885:       assertEquals(29, Node.JSDOC_INFO_PROP);
886:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
887:       assertEquals(52, Node.LENGTH);
888:       assertEquals(52, Node.LENGTH);
889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
890:       assertEquals(54, Node.SLASH_V);
891:       assertEquals(15, Node.NO_SIDE_EFFECTS);
892:       assertEquals(57, Node.LAST_PROP);
893:       assertEquals(49, Node.DIRECT_EVAL);
894:       assertEquals(40, Node.ORIGINALNAME_PROP);
895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
896:       assertEquals(12, Node.COLUMN_BITS);
897:       assertEquals(30, Node.VAR_ARGS_NAME);
898:       assertEquals(46, Node.IS_NAMESPACE);
899:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
900:       assertEquals(32, Node.INCRDECR_PROP);
901:       assertEquals(1, Node.DECR_FLAG);
902:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
903:       assertEquals(50, Node.FREE_CALL);
904:       assertEquals(51, Node.STATIC_SOURCE_FILE);
905:       assertEquals(53, Node.INPUT_ID);
906:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
907:       assertEquals(43, Node.IS_CONSTANT_NAME);
908:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
909:       assertEquals(4095, Node.COLUMN_MASK);
910:       assertEquals(47, Node.IS_DISPATCHER);
911:       assertEquals(2, Node.POST_FLAG);
912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
913:       assertEquals(39, Node.EMPTY_BLOCK);
914:       assertEquals(37, Node.OPT_ARG_NAME);
915:       assertEquals(48, Node.DIRECTIVES);
916:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
917:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
918:       assertEquals(55, Node.INFERRED_FUNCTION);
919:       assertEquals(29, Node.JSDOC_INFO_PROP);
920:       assertEquals(56, Node.CHANGE_TIME);
921:       assertEquals(36, Node.QUOTED_PROP);
922:       assertEquals(57, Node.REFLECTED_OBJECT);
923:       assertEquals(8, Node.FLAG_NO_THROWS);
924:       assertEquals(1, Node.DECR_FLAG);
925:       assertEquals(12, Node.COLUMN_BITS);
926:       assertEquals(57, Node.LAST_PROP);
927:       assertEquals(32, Node.INCRDECR_PROP);
928:       assertEquals(46, Node.IS_NAMESPACE);
929:       assertEquals(49, Node.DIRECT_EVAL);
930:       assertEquals(37, Node.OPT_ARG_NAME);
931:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
932:       assertEquals(47, Node.IS_DISPATCHER);
933:       assertEquals(2, Node.POST_FLAG);
934:       assertEquals(30, Node.VAR_ARGS_NAME);
935:       assertEquals(29, Node.JSDOC_INFO_PROP);
936:       assertEquals(57, Node.REFLECTED_OBJECT);
937:       assertEquals(56, Node.CHANGE_TIME);
938:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
939:       assertEquals(15, Node.NO_SIDE_EFFECTS);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(53, Node.INPUT_ID);
942:       assertEquals(36, Node.QUOTED_PROP);
943:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
944:       assertEquals(52, Node.LENGTH);
945:       assertEquals(8, Node.FLAG_NO_THROWS);
946:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
947:       assertEquals(55, Node.INFERRED_FUNCTION);
948:       assertEquals(43, Node.IS_CONSTANT_NAME);
949:       assertEquals(48, Node.DIRECTIVES);
950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
951:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
952:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
953:       assertEquals(4095, Node.COLUMN_MASK);
954:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
955:       assertEquals(40, Node.ORIGINALNAME_PROP);
956:       assertEquals(54, Node.SLASH_V);
957:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
958:       assertEquals(51, Node.STATIC_SOURCE_FILE);
959:       assertEquals(50, Node.FREE_CALL);
960:       assertNotSame(node1, node2);
961:       assertNotSame(node2, node1);
962:       
963:       Iterable<Node> iterable0 = node0.children();
964:       assertFalse(node0.equals((Object)node2));
965:       assertFalse(node0.equals((Object)node1));
966:       assertFalse(iterable0.contains(node0));
967:       assertFalse(node0.isCatch());
968:       assertEquals(0, node0.getChildCount());
969:       assertFalse(node0.isVoid());
970:       assertFalse(node0.isTrue());
971:       assertFalse(node0.isParamList());
972:       assertFalse(node0.isFunction());
973:       assertFalse(node0.isRegExp());
974:       assertFalse(node0.isArrayLit());
975:       assertFalse(node0.isName());
976:       assertFalse(node0.isVar());
977:       assertFalse(node0.isNull());
978:       assertFalse(node0.isDefaultCase());
979:       assertFalse(node0.isDo());
980:       assertFalse(node0.isEmpty());
981:       assertFalse(node0.isAdd());
982:       assertFalse(node0.isNew());
983:       assertFalse(node0.isSetterDef());
984:       assertFalse(node0.isContinue());
985:       assertFalse(node0.isWhile());
986:       assertFalse(node0.isOr());
987:       assertFalse(node0.isReturn());
988:       assertFalse(node0.isTypeOf());
989:       assertFalse(node0.isDelProp());
990:       assertEquals(1215, node0.getLineno());
991:       assertFalse(node0.isGetElem());
992:       assertFalse(node0.isCall());
993:       assertFalse(node0.isAssign());
994:       assertFalse(node0.isDec());
995:       assertFalse(node0.hasChildren());
996:       assertFalse(node0.isDebugger());
997:       assertFalse(node0.isString());
998:       assertTrue(node0.isNumber());
999:       assertFalse(node0.isGetProp());
1000:       assertFalse(node0.isAnd());
1001:       assertFalse(node0.isObjectLit());
1002:       assertEquals(103, node0.getCharno());
1003:       assertFalse(node0.isWith());
1004:       assertFalse(node0.isNot());
1005:       assertFalse(node0.isExprResult());
1006:       assertFalse(node0.isComma());
1007:       assertFalse(node0.isInstanceOf());
1008:       assertFalse(node0.isBreak());
1009:       assertFalse(node0.isThrow());
1010:       assertFalse(node0.isCast());
1011:       assertFalse(node0.isFalse());
1012:       assertFalse(node0.isInc());
1013:       assertFalse(node0.isAssignAdd());
1014:       assertFalse(node0.hasMoreThanOneChild());
1015:       assertFalse(node0.isIn());
1016:       assertFalse(node0.isLabel());
1017:       assertEquals(39, node0.getType());
1018:       assertFalse(node0.isNE());
1019:       assertFalse(node0.isSwitch());
1020:       assertFalse(node0.isIf());
1021:       assertFalse(node0.isLabelName());
1022:       assertFalse(node0.isStringKey());
1023:       assertFalse(node0.isGetterDef());
1024:       assertFalse(node0.isBlock());
1025:       assertFalse(node0.isFor());
1026:       assertFalse(node0.isThis());
1027:       assertFalse(node0.isHook());
1028:       assertFalse(node0.isTry());
1029:       assertEquals(4976743, node0.getSourcePosition());
1030:       assertFalse(node0.hasOneChild());
1031:       assertFalse(node0.isScript());
1032:       assertFalse(node0.isCase());
1033:       assertNotNull(iterable0);
1034:       assertEquals(57, Node.REFLECTED_OBJECT);
1035:       assertEquals(40, Node.ORIGINALNAME_PROP);
1036:       assertEquals(57, Node.LAST_PROP);
1037:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1038:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1039:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1040:       assertEquals(30, Node.VAR_ARGS_NAME);
1041:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1042:       assertEquals(12, Node.COLUMN_BITS);
1043:       assertEquals(46, Node.IS_NAMESPACE);
1044:       assertEquals(32, Node.INCRDECR_PROP);
1045:       assertEquals(1, Node.DECR_FLAG);
1046:       assertEquals(43, Node.IS_CONSTANT_NAME);
1047:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1048:       assertEquals(54, Node.SLASH_V);
1049:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1050:       assertEquals(50, Node.FREE_CALL);
1051:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1052:       assertEquals(53, Node.INPUT_ID);
1053:       assertEquals(47, Node.IS_DISPATCHER);
1054:       assertEquals(2, Node.POST_FLAG);
1055:       assertEquals(4095, Node.COLUMN_MASK);
1056:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1057:       assertEquals(55, Node.INFERRED_FUNCTION);
1058:       assertEquals(37, Node.OPT_ARG_NAME);
1059:       assertEquals(48, Node.DIRECTIVES);
1060:       assertEquals(49, Node.DIRECT_EVAL);
1061:       assertEquals(56, Node.CHANGE_TIME);
1062:       assertEquals(36, Node.QUOTED_PROP);
1063:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1064:       assertEquals(8, Node.FLAG_NO_THROWS);
1065:       assertEquals(39, Node.EMPTY_BLOCK);
1066:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1067:       assertEquals(29, Node.JSDOC_INFO_PROP);
1068:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1069:       assertEquals(52, Node.LENGTH);
1070:       
1071:       JSDocInfo jSDocInfo0 = new JSDocInfo();
1072:       assertFalse(jSDocInfo0.hasModifies());
1073:       assertFalse(jSDocInfo0.isJaggerInject());
1074:       assertNull(jSDocInfo0.getDescription());
1075:       assertFalse(jSDocInfo0.isNoTypeCheck());
1076:       assertFalse(jSDocInfo0.isConstructor());
1077:       assertFalse(jSDocInfo0.hasEnumParameterType());
1078:       assertFalse(jSDocInfo0.hasThisType());
1079:       assertFalse(jSDocInfo0.containsDeclaration());
1080:       assertFalse(jSDocInfo0.hasTypedefType());
1081:       assertFalse(jSDocInfo0.isExport());
1082:       assertNull(jSDocInfo0.getLendsName());
1083:       assertFalse(jSDocInfo0.makesStructs());
1084:       assertFalse(jSDocInfo0.hasFileOverview());
1085:       assertFalse(jSDocInfo0.isNgInject());
1086:       assertFalse(jSDocInfo0.isInterface());
1087:       assertEquals(0, jSDocInfo0.getParameterCount());
1088:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1089:       assertFalse(jSDocInfo0.isDefine());
1090:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1091:       assertNull(jSDocInfo0.getFileOverview());
1092:       assertNull(jSDocInfo0.getVisibility());
1093:       assertFalse(jSDocInfo0.isNoAlias());
1094:       assertFalse(jSDocInfo0.hasReturnType());
1095:       assertNull(jSDocInfo0.getMeaning());
1096:       assertFalse(jSDocInfo0.shouldPreserveTry());
1097:       assertFalse(jSDocInfo0.isNoSideEffects());
1098:       assertFalse(jSDocInfo0.hasType());
1099:       assertFalse(jSDocInfo0.isJaggerModule());
1100:       assertFalse(jSDocInfo0.makesDicts());
1101:       assertFalse(jSDocInfo0.isJavaDispatch());
1102:       assertFalse(jSDocInfo0.isNoCompile());
1103:       assertFalse(jSDocInfo0.isExterns());
1104:       assertNull(jSDocInfo0.getDeprecationReason());
1105:       assertFalse(jSDocInfo0.isIdGenerator());
1106:       assertFalse(jSDocInfo0.isHidden());
1107:       assertFalse(jSDocInfo0.isDeprecated());
1108:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1109:       assertNull(jSDocInfo0.getBlockDescription());
1110:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1111:       assertFalse(jSDocInfo0.isExpose());
1112:       assertFalse(jSDocInfo0.isNoShadow());
1113:       assertFalse(jSDocInfo0.isWizaction());
1114:       assertFalse(jSDocInfo0.hasBaseType());
1115:       assertFalse(jSDocInfo0.isImplicitCast());
1116:       assertNull(jSDocInfo0.getReturnDescription());
1117:       assertFalse(jSDocInfo0.isDisposes());
1118:       assertNull(jSDocInfo0.getVersion());
1119:       assertFalse(jSDocInfo0.isOverride());
1120:       assertFalse(jSDocInfo0.isJaggerProvide());
1121:       assertNull(jSDocInfo0.getOriginalCommentString());
1122:       assertFalse(jSDocInfo0.isConstant());
1123:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1124:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1125:       assertFalse(jSDocInfo0.isStableIdGenerator());
1126:       assertNull(jSDocInfo0.getLicense());
1127:       assertNotNull(jSDocInfo0);
1128:       
1129:       Node node3 = node1.setJSDocInfo(jSDocInfo0);
1130:       assertFalse(node0.equals((Object)node2));
1131:       assertFalse(node0.equals((Object)node1));
1132:       assertFalse(node1.equals((Object)node2));
1133:       assertFalse(node1.equals((Object)node0));
1134:       assertFalse(node3.equals((Object)node0));
1135:       assertFalse(node3.equals((Object)node2));
1136:       assertFalse(node0.isCatch());
1137:       assertEquals(0, node0.getChildCount());
1138:       assertFalse(node0.isVoid());
1139:       assertFalse(node0.isTrue());
1140:       assertFalse(node0.isParamList());
1141:       assertFalse(node0.isFunction());
1142:       assertFalse(node0.isRegExp());
1143:       assertFalse(node0.isArrayLit());
1144:       assertFalse(node0.isName());
1145:       assertFalse(node0.isVar());
1146:       assertFalse(node0.isNull());
1147:       assertFalse(node0.isDefaultCase());
1148:       assertFalse(node0.isDo());
1149:       assertFalse(node0.isEmpty());
1150:       assertFalse(node0.isAdd());
1151:       assertFalse(node0.isNew());
1152:       assertFalse(node0.isSetterDef());
1153:       assertFalse(node0.isContinue());
1154:       assertFalse(node0.isWhile());
1155:       assertFalse(node0.isOr());
1156:       assertFalse(node0.isReturn());
1157:       assertFalse(node0.isTypeOf());
1158:       assertFalse(node0.isDelProp());
1159:       assertEquals(1215, node0.getLineno());
1160:       assertFalse(node0.isGetElem());
1161:       assertFalse(node0.isCall());
1162:       assertFalse(node0.isAssign());
1163:       assertFalse(node0.isDec());
1164:       assertFalse(node0.hasChildren());
1165:       assertFalse(node0.isDebugger());
1166:       assertFalse(node0.isString());
1167:       assertTrue(node0.isNumber());
1168:       assertFalse(node0.isGetProp());
1169:       assertFalse(node0.isAnd());
1170:       assertFalse(node0.isObjectLit());
1171:       assertEquals(103, node0.getCharno());
1172:       assertFalse(node0.isWith());
1173:       assertFalse(node0.isNot());
1174:       assertFalse(node0.isExprResult());
1175:       assertFalse(node0.isComma());
1176:       assertFalse(node0.isInstanceOf());
1177:       assertFalse(node0.isBreak());
1178:       assertFalse(node0.isThrow());
1179:       assertFalse(node0.isCast());
1180:       assertFalse(node0.isFalse());
1181:       assertFalse(node0.isInc());
1182:       assertFalse(node0.isAssignAdd());
1183:       assertFalse(node0.hasMoreThanOneChild());
1184:       assertFalse(node0.isIn());
1185:       assertFalse(node0.isLabel());
1186:       assertEquals(39, node0.getType());
1187:       assertFalse(node0.isNE());
1188:       assertFalse(node0.isSwitch());
1189:       assertFalse(node0.isIf());
1190:       assertFalse(node0.isLabelName());
1191:       assertFalse(node0.isStringKey());
1192:       assertFalse(node0.isGetterDef());
1193:       assertFalse(node0.isBlock());
1194:       assertFalse(node0.isFor());
1195:       assertFalse(node0.isThis());
1196:       assertFalse(node0.isHook());
1197:       assertFalse(node0.isTry());
1198:       assertEquals(4976743, node0.getSourcePosition());
1199:       assertFalse(node0.hasOneChild());
1200:       assertFalse(node0.isScript());
1201:       assertFalse(node0.isCase());
1202:       assertFalse(node1.isParamList());
1203:       assertFalse(node1.isNull());
1204:       assertFalse(node1.isName());
1205:       assertFalse(node1.isRegExp());
1206:       assertFalse(node1.isVoid());
1207:       assertFalse(node1.isCall());
1208:       assertFalse(node1.isCatch());
1209:       assertFalse(node1.isTrue());
1210:       assertFalse(node1.isFunction());
1211:       assertFalse(node1.isVar());
1212:       assertFalse(node1.isDo());
1213:       assertFalse(node1.isDefaultCase());
1214:       assertEquals(472467, node1.getLineno());
1215:       assertFalse(node1.isEmpty());
1216:       assertFalse(node1.isAdd());
1217:       assertFalse(node1.isNew());
1218:       assertFalse(node1.isSetterDef());
1219:       assertFalse(node1.isOr());
1220:       assertEquals(46, node1.getCharno());
1221:       assertFalse(node1.isReturn());
1222:       assertFalse(node1.isDelProp());
1223:       assertFalse(node1.isAssign());
1224:       assertFalse(node1.isDec());
1225:       assertFalse(node1.isTypeOf());
1226:       assertFalse(node1.isContinue());
1227:       assertFalse(node1.isCast());
1228:       assertFalse(node1.isGetElem());
1229:       assertEquals((-930), node1.getType());
1230:       assertFalse(node1.isDebugger());
1231:       assertTrue(node1.hasOneChild());
1232:       assertFalse(node1.isString());
1233:       assertFalse(node1.isWhile());
1234:       assertFalse(node1.isNot());
1235:       assertFalse(node1.isGetProp());
1236:       assertFalse(node1.isInstanceOf());
1237:       assertFalse(node1.isAnd());
1238:       assertFalse(node1.isObjectLit());
1239:       assertFalse(node1.isComma());
1240:       assertEquals(1935224878, node1.getSourcePosition());
1241:       assertFalse(node1.isThis());
1242:       assertFalse(node1.isBreak());
1243:       assertFalse(node1.isFalse());
1244:       assertFalse(node1.isWith());
1245:       assertFalse(node1.isExprResult());
1246:       assertFalse(node1.isThrow());
1247:       assertFalse(node1.isInc());
1248:       assertEquals(1, node1.getChildCount());
1249:       assertTrue(node1.hasChildren());
1250:       assertFalse(node1.isAssignAdd());
1251:       assertFalse(node1.hasMoreThanOneChild());
1252:       assertFalse(node1.isIn());
1253:       assertFalse(node1.isNE());
1254:       assertFalse(node1.isLabel());
1255:       assertFalse(node1.isLabelName());
1256:       assertFalse(node1.isSwitch());
1257:       assertFalse(node1.isIf());
1258:       assertFalse(node1.isArrayLit());
1259:       assertFalse(node1.isTry());
1260:       assertFalse(node1.isStringKey());
1261:       assertFalse(node1.isBlock());
1262:       assertFalse(node1.isFor());
1263:       assertFalse(node1.isHook());
1264:       assertFalse(node1.isGetterDef());
1265:       assertFalse(node1.isNumber());
1266:       assertFalse(node1.isScript());
1267:       assertFalse(node1.isCase());
1268:       assertFalse(jSDocInfo0.hasModifies());
1269:       assertFalse(jSDocInfo0.isJaggerInject());
1270:       assertNull(jSDocInfo0.getDescription());
1271:       assertFalse(jSDocInfo0.isNoTypeCheck());
1272:       assertFalse(jSDocInfo0.isConstructor());
1273:       assertFalse(jSDocInfo0.hasEnumParameterType());
1274:       assertFalse(jSDocInfo0.hasThisType());
1275:       assertFalse(jSDocInfo0.containsDeclaration());
1276:       assertFalse(jSDocInfo0.hasTypedefType());
1277:       assertFalse(jSDocInfo0.isExport());
1278:       assertNull(jSDocInfo0.getLendsName());
1279:       assertFalse(jSDocInfo0.makesStructs());
1280:       assertFalse(jSDocInfo0.hasFileOverview());
1281:       assertFalse(jSDocInfo0.isNgInject());
1282:       assertFalse(jSDocInfo0.isInterface());
1283:       assertEquals(0, jSDocInfo0.getParameterCount());
1284:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1285:       assertFalse(jSDocInfo0.isDefine());
1286:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1287:       assertNull(jSDocInfo0.getFileOverview());
1288:       assertNull(jSDocInfo0.getVisibility());
1289:       assertFalse(jSDocInfo0.isNoAlias());
1290:       assertFalse(jSDocInfo0.hasReturnType());
1291:       assertNull(jSDocInfo0.getMeaning());
1292:       assertFalse(jSDocInfo0.shouldPreserveTry());
1293:       assertFalse(jSDocInfo0.isNoSideEffects());
1294:       assertFalse(jSDocInfo0.hasType());
1295:       assertFalse(jSDocInfo0.isJaggerModule());
1296:       assertFalse(jSDocInfo0.makesDicts());
1297:       assertFalse(jSDocInfo0.isJavaDispatch());
1298:       assertFalse(jSDocInfo0.isNoCompile());
1299:       assertFalse(jSDocInfo0.isExterns());
1300:       assertNull(jSDocInfo0.getDeprecationReason());
1301:       assertFalse(jSDocInfo0.isIdGenerator());
1302:       assertFalse(jSDocInfo0.isHidden());
1303:       assertFalse(jSDocInfo0.isDeprecated());
1304:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1305:       assertNull(jSDocInfo0.getBlockDescription());
1306:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1307:       assertFalse(jSDocInfo0.isExpose());
1308:       assertFalse(jSDocInfo0.isNoShadow());
1309:       assertFalse(jSDocInfo0.isWizaction());
1310:       assertFalse(jSDocInfo0.hasBaseType());
1311:       assertFalse(jSDocInfo0.isImplicitCast());
1312:       assertNull(jSDocInfo0.getReturnDescription());
1313:       assertFalse(jSDocInfo0.isDisposes());
1314:       assertNull(jSDocInfo0.getVersion());
1315:       assertFalse(jSDocInfo0.isOverride());
1316:       assertFalse(jSDocInfo0.isJaggerProvide());
1317:       assertNull(jSDocInfo0.getOriginalCommentString());
1318:       assertFalse(jSDocInfo0.isConstant());
1319:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1320:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1321:       assertFalse(jSDocInfo0.isStableIdGenerator());
1322:       assertNull(jSDocInfo0.getLicense());
1323:       assertFalse(node3.isBreak());
1324:       assertFalse(node3.isThis());
1325:       assertFalse(node3.isGetProp());
1326:       assertFalse(node3.isInstanceOf());
1327:       assertFalse(node3.isHook());
1328:       assertFalse(node3.isThrow());
1329:       assertFalse(node3.isFalse());
1330:       assertFalse(node3.isComma());
1331:       assertFalse(node3.isWith());
1332:       assertFalse(node3.isSwitch());
1333:       assertFalse(node3.isString());
1334:       assertFalse(node3.isScript());
1335:       assertFalse(node3.isCase());
1336:       assertFalse(node3.isAnd());
1337:       assertEquals(1935224878, node3.getSourcePosition());
1338:       assertFalse(node3.isObjectLit());
1339:       assertFalse(node3.isNot());
1340:       assertFalse(node3.isTypeOf());
1341:       assertFalse(node3.isDec());
1342:       assertTrue(node3.hasOneChild());
1343:       assertFalse(node3.isEmpty());
1344:       assertFalse(node3.isGetElem());
1345:       assertFalse(node3.isAssignAdd());
1346:       assertFalse(node3.isDelProp());
1347:       assertFalse(node3.isLabelName());
1348:       assertFalse(node3.isArrayLit());
1349:       assertFalse(node3.isReturn());
1350:       assertFalse(node3.isLabel());
1351:       assertFalse(node3.isAssign());
1352:       assertFalse(node3.isDefaultCase());
1353:       assertFalse(node3.isExprResult());
1354:       assertFalse(node3.isTrue());
1355:       assertFalse(node3.isNew());
1356:       assertFalse(node3.isVoid());
1357:       assertFalse(node3.isDo());
1358:       assertFalse(node3.isAdd());
1359:       assertEquals(472467, node3.getLineno());
1360:       assertFalse(node3.isOr());
1361:       assertFalse(node3.isNull());
1362:       assertFalse(node3.isParamList());
1363:       assertFalse(node3.isSetterDef());
1364:       assertFalse(node3.isStringKey());
1365:       assertFalse(node3.isName());
1366:       assertFalse(node3.isCatch());
1367:       assertFalse(node3.isCall());
1368:       assertFalse(node3.isVar());
1369:       assertFalse(node3.isBlock());
1370:       assertFalse(node3.isWhile());
1371:       assertFalse(node3.isTry());
1372:       assertFalse(node3.isDebugger());
1373:       assertFalse(node3.isGetterDef());
1374:       assertFalse(node3.isNumber());
1375:       assertFalse(node3.isIf());
1376:       assertFalse(node3.isFor());
1377:       assertFalse(node3.isNE());
1378:       assertEquals((-930), node3.getType());
1379:       assertFalse(node3.hasMoreThanOneChild());
1380:       assertTrue(node3.hasChildren());
1381:       assertFalse(node3.isCast());
1382:       assertEquals(46, node3.getCharno());
1383:       assertFalse(node3.isContinue());
1384:       assertEquals(1, node3.getChildCount());
1385:       assertFalse(node3.isFunction());
1386:       assertFalse(node3.isRegExp());
1387:       assertFalse(node3.isInc());
1388:       assertFalse(node3.isIn());
1389:       assertNotNull(node3);
1390:       assertEquals(57, Node.REFLECTED_OBJECT);
1391:       assertEquals(40, Node.ORIGINALNAME_PROP);
1392:       assertEquals(57, Node.LAST_PROP);
1393:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1394:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1396:       assertEquals(30, Node.VAR_ARGS_NAME);
1397:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1398:       assertEquals(12, Node.COLUMN_BITS);
1399:       assertEquals(46, Node.IS_NAMESPACE);
1400:       assertEquals(32, Node.INCRDECR_PROP);
1401:       assertEquals(1, Node.DECR_FLAG);
1402:       assertEquals(43, Node.IS_CONSTANT_NAME);
1403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1404:       assertEquals(54, Node.SLASH_V);
1405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1406:       assertEquals(50, Node.FREE_CALL);
1407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1408:       assertEquals(53, Node.INPUT_ID);
1409:       assertEquals(47, Node.IS_DISPATCHER);
1410:       assertEquals(2, Node.POST_FLAG);
1411:       assertEquals(4095, Node.COLUMN_MASK);
1412:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1413:       assertEquals(55, Node.INFERRED_FUNCTION);
1414:       assertEquals(37, Node.OPT_ARG_NAME);
1415:       assertEquals(48, Node.DIRECTIVES);
1416:       assertEquals(49, Node.DIRECT_EVAL);
1417:       assertEquals(56, Node.CHANGE_TIME);
1418:       assertEquals(36, Node.QUOTED_PROP);
1419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1420:       assertEquals(8, Node.FLAG_NO_THROWS);
1421:       assertEquals(39, Node.EMPTY_BLOCK);
1422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1423:       assertEquals(29, Node.JSDOC_INFO_PROP);
1424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1425:       assertEquals(52, Node.LENGTH);
1426:       assertEquals(52, Node.LENGTH);
1427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1428:       assertEquals(54, Node.SLASH_V);
1429:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1430:       assertEquals(57, Node.LAST_PROP);
1431:       assertEquals(49, Node.DIRECT_EVAL);
1432:       assertEquals(40, Node.ORIGINALNAME_PROP);
1433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1434:       assertEquals(12, Node.COLUMN_BITS);
1435:       assertEquals(30, Node.VAR_ARGS_NAME);
1436:       assertEquals(46, Node.IS_NAMESPACE);
1437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(1, Node.DECR_FLAG);
1440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1441:       assertEquals(50, Node.FREE_CALL);
1442:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1443:       assertEquals(53, Node.INPUT_ID);
1444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1445:       assertEquals(43, Node.IS_CONSTANT_NAME);
1446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1447:       assertEquals(4095, Node.COLUMN_MASK);
1448:       assertEquals(47, Node.IS_DISPATCHER);
1449:       assertEquals(2, Node.POST_FLAG);
1450:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1451:       assertEquals(39, Node.EMPTY_BLOCK);
1452:       assertEquals(37, Node.OPT_ARG_NAME);
1453:       assertEquals(48, Node.DIRECTIVES);
1454:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1455:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1456:       assertEquals(55, Node.INFERRED_FUNCTION);
1457:       assertEquals(29, Node.JSDOC_INFO_PROP);
1458:       assertEquals(56, Node.CHANGE_TIME);
1459:       assertEquals(36, Node.QUOTED_PROP);
1460:       assertEquals(57, Node.REFLECTED_OBJECT);
1461:       assertEquals(8, Node.FLAG_NO_THROWS);
1462:       assertEquals(30, Node.VAR_ARGS_NAME);
1463:       assertEquals(49, Node.DIRECT_EVAL);
1464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1465:       assertEquals(1, Node.DECR_FLAG);
1466:       assertEquals(32, Node.INCRDECR_PROP);
1467:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1468:       assertEquals(12, Node.COLUMN_BITS);
1469:       assertEquals(57, Node.LAST_PROP);
1470:       assertEquals(29, Node.JSDOC_INFO_PROP);
1471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1472:       assertEquals(8, Node.FLAG_NO_THROWS);
1473:       assertEquals(39, Node.EMPTY_BLOCK);
1474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1475:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1476:       assertEquals(52, Node.LENGTH);
1477:       assertEquals(57, Node.REFLECTED_OBJECT);
1478:       assertEquals(37, Node.OPT_ARG_NAME);
1479:       assertEquals(48, Node.DIRECTIVES);
1480:       assertEquals(56, Node.CHANGE_TIME);
1481:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1482:       assertEquals(36, Node.QUOTED_PROP);
1483:       assertEquals(55, Node.INFERRED_FUNCTION);
1484:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1485:       assertEquals(4095, Node.COLUMN_MASK);
1486:       assertEquals(53, Node.INPUT_ID);
1487:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1488:       assertEquals(50, Node.FREE_CALL);
1489:       assertEquals(47, Node.IS_DISPATCHER);
1490:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1491:       assertEquals(40, Node.ORIGINALNAME_PROP);
1492:       assertEquals(2, Node.POST_FLAG);
1493:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1494:       assertEquals(46, Node.IS_NAMESPACE);
1495:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1496:       assertEquals(54, Node.SLASH_V);
1497:       assertEquals(43, Node.IS_CONSTANT_NAME);
1498:       assertNotSame(node1, node2);
1499:       assertSame(node1, node3);
1500:       assertNotSame(node3, node2);
1501:       assertSame(node3, node1);
1502:       
1503:       Node node4 = jSDocInfo0.getAssociatedNode();
1504:       assertFalse(jSDocInfo0.hasModifies());
1505:       assertFalse(jSDocInfo0.isJaggerInject());
1506:       assertNull(jSDocInfo0.getDescription());
1507:       assertFalse(jSDocInfo0.isNoTypeCheck());
1508:       assertFalse(jSDocInfo0.isConstructor());
1509:       assertFalse(jSDocInfo0.hasEnumParameterType());
1510:       assertFalse(jSDocInfo0.hasThisType());
1511:       assertFalse(jSDocInfo0.containsDeclaration());
1512:       assertFalse(jSDocInfo0.hasTypedefType());
1513:       assertFalse(jSDocInfo0.isExport());
1514:       assertNull(jSDocInfo0.getLendsName());
1515:       assertFalse(jSDocInfo0.makesStructs());
1516:       assertFalse(jSDocInfo0.hasFileOverview());
1517:       assertFalse(jSDocInfo0.isNgInject());
1518:       assertFalse(jSDocInfo0.isInterface());
1519:       assertEquals(0, jSDocInfo0.getParameterCount());
1520:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1521:       assertFalse(jSDocInfo0.isDefine());
1522:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1523:       assertNull(jSDocInfo0.getFileOverview());
1524:       assertNull(jSDocInfo0.getVisibility());
1525:       assertFalse(jSDocInfo0.isNoAlias());
1526:       assertFalse(jSDocInfo0.hasReturnType());
1527:       assertNull(jSDocInfo0.getMeaning());
1528:       assertFalse(jSDocInfo0.shouldPreserveTry());
1529:       assertFalse(jSDocInfo0.isNoSideEffects());
1530:       assertFalse(jSDocInfo0.hasType());
1531:       assertFalse(jSDocInfo0.isJaggerModule());
1532:       assertFalse(jSDocInfo0.makesDicts());
1533:       assertFalse(jSDocInfo0.isJavaDispatch());
1534:       assertFalse(jSDocInfo0.isNoCompile());
1535:       assertFalse(jSDocInfo0.isExterns());
1536:       assertNull(jSDocInfo0.getDeprecationReason());
1537:       assertFalse(jSDocInfo0.isIdGenerator());
1538:       assertFalse(jSDocInfo0.isHidden());
1539:       assertFalse(jSDocInfo0.isDeprecated());
1540:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1541:       assertNull(jSDocInfo0.getBlockDescription());
1542:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1543:       assertFalse(jSDocInfo0.isExpose());
1544:       assertFalse(jSDocInfo0.isNoShadow());
1545:       assertFalse(jSDocInfo0.isWizaction());
1546:       assertFalse(jSDocInfo0.hasBaseType());
1547:       assertFalse(jSDocInfo0.isImplicitCast());
1548:       assertNull(jSDocInfo0.getReturnDescription());
1549:       assertFalse(jSDocInfo0.isDisposes());
1550:       assertNull(jSDocInfo0.getVersion());
1551:       assertFalse(jSDocInfo0.isOverride());
1552:       assertFalse(jSDocInfo0.isJaggerProvide());
1553:       assertNull(jSDocInfo0.getOriginalCommentString());
1554:       assertFalse(jSDocInfo0.isConstant());
1555:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1556:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1557:       assertFalse(jSDocInfo0.isStableIdGenerator());
1558:       assertNull(jSDocInfo0.getLicense());
1559:       assertNull(node4);
1560:       
1561:       boolean boolean0 = node0.isCase();
1562:       assertFalse(node0.equals((Object)node3));
1563:       assertFalse(node0.equals((Object)node2));
1564:       assertFalse(node0.equals((Object)node1));
1565:       assertFalse(node0.isCatch());
1566:       assertEquals(0, node0.getChildCount());
1567:       assertFalse(node0.isVoid());
1568:       assertFalse(node0.isTrue());
1569:       assertFalse(node0.isParamList());
1570:       assertFalse(node0.isFunction());
1571:       assertFalse(node0.isRegExp());
1572:       assertFalse(node0.isArrayLit());
1573:       assertFalse(node0.isName());
1574:       assertFalse(node0.isVar());
1575:       assertFalse(node0.isNull());
1576:       assertFalse(node0.isDefaultCase());
1577:       assertFalse(node0.isDo());
1578:       assertFalse(node0.isEmpty());
1579:       assertFalse(node0.isAdd());
1580:       assertFalse(node0.isNew());
1581:       assertFalse(node0.isSetterDef());
1582:       assertFalse(node0.isContinue());
1583:       assertFalse(node0.isWhile());
1584:       assertFalse(node0.isOr());
1585:       assertFalse(node0.isReturn());
1586:       assertFalse(node0.isTypeOf());
1587:       assertFalse(node0.isDelProp());
1588:       assertEquals(1215, node0.getLineno());
1589:       assertFalse(node0.isGetElem());
1590:       assertFalse(node0.isCall());
1591:       assertFalse(node0.isAssign());
1592:       assertFalse(node0.isDec());
1593:       assertFalse(node0.hasChildren());
1594:       assertFalse(node0.isDebugger());
1595:       assertFalse(node0.isString());
1596:       assertTrue(node0.isNumber());
1597:       assertFalse(node0.isGetProp());
1598:       assertFalse(node0.isAnd());
1599:       assertFalse(node0.isObjectLit());
1600:       assertEquals(103, node0.getCharno());
1601:       assertFalse(node0.isWith());
1602:       assertFalse(node0.isNot());
1603:       assertFalse(node0.isExprResult());
1604:       assertFalse(node0.isComma());
1605:       assertFalse(node0.isInstanceOf());
1606:       assertFalse(node0.isBreak());
1607:       assertFalse(node0.isThrow());
1608:       assertFalse(node0.isCast());
1609:       assertFalse(node0.isFalse());
1610:       assertFalse(node0.isInc());
1611:       assertFalse(node0.isAssignAdd());
1612:       assertFalse(node0.hasMoreThanOneChild());
1613:       assertFalse(node0.isIn());
1614:       assertFalse(node0.isLabel());
1615:       assertEquals(39, node0.getType());
1616:       assertFalse(node0.isNE());
1617:       assertFalse(node0.isSwitch());
1618:       assertFalse(node0.isIf());
1619:       assertFalse(node0.isLabelName());
1620:       assertFalse(node0.isStringKey());
1621:       assertFalse(node0.isGetterDef());
1622:       assertFalse(node0.isBlock());
1623:       assertFalse(node0.isFor());
1624:       assertFalse(node0.isThis());
1625:       assertFalse(node0.isHook());
1626:       assertFalse(node0.isTry());
1627:       assertEquals(4976743, node0.getSourcePosition());
1628:       assertFalse(node0.hasOneChild());
1629:       assertFalse(node0.isScript());
1630:       assertFalse(node0.isCase());
1631:       assertFalse(boolean0);
1632:       assertEquals(57, Node.REFLECTED_OBJECT);
1633:       assertEquals(40, Node.ORIGINALNAME_PROP);
1634:       assertEquals(57, Node.LAST_PROP);
1635:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1636:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1637:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1638:       assertEquals(30, Node.VAR_ARGS_NAME);
1639:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1640:       assertEquals(12, Node.COLUMN_BITS);
1641:       assertEquals(46, Node.IS_NAMESPACE);
1642:       assertEquals(32, Node.INCRDECR_PROP);
1643:       assertEquals(1, Node.DECR_FLAG);
1644:       assertEquals(43, Node.IS_CONSTANT_NAME);
1645:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1646:       assertEquals(54, Node.SLASH_V);
1647:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1648:       assertEquals(50, Node.FREE_CALL);
1649:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1650:       assertEquals(53, Node.INPUT_ID);
1651:       assertEquals(47, Node.IS_DISPATCHER);
1652:       assertEquals(2, Node.POST_FLAG);
1653:       assertEquals(4095, Node.COLUMN_MASK);
1654:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1655:       assertEquals(55, Node.INFERRED_FUNCTION);
1656:       assertEquals(37, Node.OPT_ARG_NAME);
1657:       assertEquals(48, Node.DIRECTIVES);
1658:       assertEquals(49, Node.DIRECT_EVAL);
1659:       assertEquals(56, Node.CHANGE_TIME);
1660:       assertEquals(36, Node.QUOTED_PROP);
1661:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1662:       assertEquals(8, Node.FLAG_NO_THROWS);
1663:       assertEquals(39, Node.EMPTY_BLOCK);
1664:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1665:       assertEquals(29, Node.JSDOC_INFO_PROP);
1666:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1667:       assertEquals(52, Node.LENGTH);
1668:       
1669:       boolean boolean1 = node3.isScript();
1670:       assertFalse(node0.equals((Object)node3));
1671:       assertFalse(node0.equals((Object)node2));
1672:       assertFalse(node0.equals((Object)node1));
1673:       assertFalse(node1.equals((Object)node2));
1674:       assertFalse(node1.equals((Object)node0));
1675:       assertFalse(node3.equals((Object)node0));
1676:       assertFalse(node3.equals((Object)node2));
1677:       assertTrue(boolean1 == boolean0);
1678:       assertFalse(node0.isCatch());
1679:       assertEquals(0, node0.getChildCount());
1680:       assertFalse(node0.isVoid());
1681:       assertFalse(node0.isTrue());
1682:       assertFalse(node0.isParamList());
1683:       assertFalse(node0.isFunction());
1684:       assertFalse(node0.isRegExp());
1685:       assertFalse(node0.isArrayLit());
1686:       assertFalse(node0.isName());
1687:       assertFalse(node0.isVar());
1688:       assertFalse(node0.isNull());
1689:       assertFalse(node0.isDefaultCase());
1690:       assertFalse(node0.isDo());
1691:       assertFalse(node0.isEmpty());
1692:       assertFalse(node0.isAdd());
1693:       assertFalse(node0.isNew());
1694:       assertFalse(node0.isSetterDef());
1695:       assertFalse(node0.isContinue());
1696:       assertFalse(node0.isWhile());
1697:       assertFalse(node0.isOr());
1698:       assertFalse(node0.isReturn());
1699:       assertFalse(node0.isTypeOf());
1700:       assertFalse(node0.isDelProp());
1701:       assertEquals(1215, node0.getLineno());
1702:       assertFalse(node0.isGetElem());
1703:       assertFalse(node0.isCall());
1704:       assertFalse(node0.isAssign());
1705:       assertFalse(node0.isDec());
1706:       assertFalse(node0.hasChildren());
1707:       assertFalse(node0.isDebugger());
1708:       assertFalse(node0.isString());
1709:       assertTrue(node0.isNumber());
1710:       assertFalse(node0.isGetProp());
1711:       assertFalse(node0.isAnd());
1712:       assertFalse(node0.isObjectLit());
1713:       assertEquals(103, node0.getCharno());
1714:       assertFalse(node0.isWith());
1715:       assertFalse(node0.isNot());
1716:       assertFalse(node0.isExprResult());
1717:       assertFalse(node0.isComma());
1718:       assertFalse(node0.isInstanceOf());
1719:       assertFalse(node0.isBreak());
1720:       assertFalse(node0.isThrow());
1721:       assertFalse(node0.isCast());
1722:       assertFalse(node0.isFalse());
1723:       assertFalse(node0.isInc());
1724:       assertFalse(node0.isAssignAdd());
1725:       assertFalse(node0.hasMoreThanOneChild());
1726:       assertFalse(node0.isIn());
1727:       assertFalse(node0.isLabel());
1728:       assertEquals(39, node0.getType());
1729:       assertFalse(node0.isNE());
1730:       assertFalse(node0.isSwitch());
1731:       assertFalse(node0.isIf());
1732:       assertFalse(node0.isLabelName());
1733:       assertFalse(node0.isStringKey());
1734:       assertFalse(node0.isGetterDef());
1735:       assertFalse(node0.isBlock());
1736:       assertFalse(node0.isFor());
1737:       assertFalse(node0.isThis());
1738:       assertFalse(node0.isHook());
1739:       assertFalse(node0.isTry());
1740:       assertEquals(4976743, node0.getSourcePosition());
1741:       assertFalse(node0.hasOneChild());
1742:       assertFalse(node0.isScript());
1743:       assertFalse(node0.isCase());
1744:       assertFalse(node1.isParamList());
1745:       assertFalse(node1.isNull());
1746:       assertFalse(node1.isName());
1747:       assertFalse(node1.isRegExp());
1748:       assertFalse(node1.isVoid());
1749:       assertFalse(node1.isCall());
1750:       assertFalse(node1.isCatch());
1751:       assertFalse(node1.isTrue());
1752:       assertFalse(node1.isFunction());
1753:       assertFalse(node1.isVar());
1754:       assertFalse(node1.isDo());
1755:       assertFalse(node1.isDefaultCase());
1756:       assertEquals(472467, node1.getLineno());
1757:       assertFalse(node1.isEmpty());
1758:       assertFalse(node1.isAdd());
1759:       assertFalse(node1.isNew());
1760:       assertFalse(node1.isSetterDef());
1761:       assertFalse(node1.isOr());
1762:       assertEquals(46, node1.getCharno());
1763:       assertFalse(node1.isReturn());
1764:       assertFalse(node1.isDelProp());
1765:       assertFalse(node1.isAssign());
1766:       assertFalse(node1.isDec());
1767:       assertFalse(node1.isTypeOf());
1768:       assertFalse(node1.isContinue());
1769:       assertFalse(node1.isCast());
1770:       assertFalse(node1.isGetElem());
1771:       assertEquals((-930), node1.getType());
1772:       assertFalse(node1.isDebugger());
1773:       assertTrue(node1.hasOneChild());
1774:       assertFalse(node1.isString());
1775:       assertFalse(node1.isWhile());
1776:       assertFalse(node1.isNot());
1777:       assertFalse(node1.isGetProp());
1778:       assertFalse(node1.isInstanceOf());
1779:       assertFalse(node1.isAnd());
1780:       assertFalse(node1.isObjectLit());
1781:       assertFalse(node1.isComma());
1782:       assertEquals(1935224878, node1.getSourcePosition());
1783:       assertFalse(node1.isThis());
1784:       assertFalse(node1.isBreak());
1785:       assertFalse(node1.isFalse());
1786:       assertFalse(node1.isWith());
1787:       assertFalse(node1.isExprResult());
1788:       assertFalse(node1.isThrow());
1789:       assertFalse(node1.isInc());
1790:       assertEquals(1, node1.getChildCount());
1791:       assertTrue(node1.hasChildren());
1792:       assertFalse(node1.isAssignAdd());
1793:       assertFalse(node1.hasMoreThanOneChild());
1794:       assertFalse(node1.isIn());
1795:       assertFalse(node1.isNE());
1796:       assertFalse(node1.isLabel());
1797:       assertFalse(node1.isLabelName());
1798:       assertFalse(node1.isSwitch());
1799:       assertFalse(node1.isIf());
1800:       assertFalse(node1.isArrayLit());
1801:       assertFalse(node1.isTry());
1802:       assertFalse(node1.isStringKey());
1803:       assertFalse(node1.isBlock());
1804:       assertFalse(node1.isFor());
1805:       assertFalse(node1.isHook());
1806:       assertFalse(node1.isGetterDef());
1807:       assertFalse(node1.isNumber());
1808:       assertFalse(node1.isScript());
1809:       assertFalse(node1.isCase());
1810:       assertFalse(jSDocInfo0.hasModifies());
1811:       assertFalse(jSDocInfo0.isJaggerInject());
1812:       assertNull(jSDocInfo0.getDescription());
1813:       assertFalse(jSDocInfo0.isNoTypeCheck());
1814:       assertFalse(jSDocInfo0.isConstructor());
1815:       assertFalse(jSDocInfo0.hasEnumParameterType());
1816:       assertFalse(jSDocInfo0.hasThisType());
1817:       assertFalse(jSDocInfo0.containsDeclaration());
1818:       assertFalse(jSDocInfo0.hasTypedefType());
1819:       assertFalse(jSDocInfo0.isExport());
1820:       assertNull(jSDocInfo0.getLendsName());
1821:       assertFalse(jSDocInfo0.makesStructs());
1822:       assertFalse(jSDocInfo0.hasFileOverview());
1823:       assertFalse(jSDocInfo0.isNgInject());
1824:       assertFalse(jSDocInfo0.isInterface());
1825:       assertEquals(0, jSDocInfo0.getParameterCount());
1826:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1827:       assertFalse(jSDocInfo0.isDefine());
1828:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1829:       assertNull(jSDocInfo0.getFileOverview());
1830:       assertNull(jSDocInfo0.getVisibility());
1831:       assertFalse(jSDocInfo0.isNoAlias());
1832:       assertFalse(jSDocInfo0.hasReturnType());
1833:       assertNull(jSDocInfo0.getMeaning());
1834:       assertFalse(jSDocInfo0.shouldPreserveTry());
1835:       assertFalse(jSDocInfo0.isNoSideEffects());
1836:       assertFalse(jSDocInfo0.hasType());
1837:       assertFalse(jSDocInfo0.isJaggerModule());
1838:       assertFalse(jSDocInfo0.makesDicts());
1839:       assertFalse(jSDocInfo0.isJavaDispatch());
1840:       assertFalse(jSDocInfo0.isNoCompile());
1841:       assertFalse(jSDocInfo0.isExterns());
1842:       assertNull(jSDocInfo0.getDeprecationReason());
1843:       assertFalse(jSDocInfo0.isIdGenerator());
1844:       assertFalse(jSDocInfo0.isHidden());
1845:       assertFalse(jSDocInfo0.isDeprecated());
1846:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1847:       assertNull(jSDocInfo0.getBlockDescription());
1848:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1849:       assertFalse(jSDocInfo0.isExpose());
1850:       assertFalse(jSDocInfo0.isNoShadow());
1851:       assertFalse(jSDocInfo0.isWizaction());
1852:       assertFalse(jSDocInfo0.hasBaseType());
1853:       assertFalse(jSDocInfo0.isImplicitCast());
1854:       assertNull(jSDocInfo0.getReturnDescription());
1855:       assertFalse(jSDocInfo0.isDisposes());
1856:       assertNull(jSDocInfo0.getVersion());
1857:       assertFalse(jSDocInfo0.isOverride());
1858:       assertFalse(jSDocInfo0.isJaggerProvide());
1859:       assertNull(jSDocInfo0.getOriginalCommentString());
1860:       assertFalse(jSDocInfo0.isConstant());
1861:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1862:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1863:       assertFalse(jSDocInfo0.isStableIdGenerator());
1864:       assertNull(jSDocInfo0.getLicense());
1865:       assertFalse(node3.isBreak());
1866:       assertFalse(node3.isThis());
1867:       assertFalse(node3.isGetProp());
1868:       assertFalse(node3.isInstanceOf());
1869:       assertFalse(node3.isHook());
1870:       assertFalse(node3.isThrow());
1871:       assertFalse(node3.isFalse());
1872:       assertFalse(node3.isComma());
1873:       assertFalse(node3.isWith());
1874:       assertFalse(node3.isSwitch());
1875:       assertFalse(node3.isString());
1876:       assertFalse(node3.isScript());
1877:       assertFalse(node3.isCase());
1878:       assertFalse(node3.isAnd());
1879:       assertEquals(1935224878, node3.getSourcePosition());
1880:       assertFalse(node3.isObjectLit());
1881:       assertFalse(node3.isNot());
1882:       assertFalse(node3.isTypeOf());
1883:       assertFalse(node3.isDec());
1884:       assertTrue(node3.hasOneChild());
1885:       assertFalse(node3.isEmpty());
1886:       assertFalse(node3.isGetElem());
1887:       assertFalse(node3.isAssignAdd());
1888:       assertFalse(node3.isDelProp());
1889:       assertFalse(node3.isLabelName());
1890:       assertFalse(node3.isArrayLit());
1891:       assertFalse(node3.isReturn());
1892:       assertFalse(node3.isLabel());
1893:       assertFalse(node3.isAssign());
1894:       assertFalse(node3.isDefaultCase());
1895:       assertFalse(node3.isExprResult());
1896:       assertFalse(node3.isTrue());
1897:       assertFalse(node3.isNew());
1898:       assertFalse(node3.isVoid());
1899:       assertFalse(node3.isDo());
1900:       assertFalse(node3.isAdd());
1901:       assertEquals(472467, node3.getLineno());
1902:       assertFalse(node3.isOr());
1903:       assertFalse(node3.isNull());
1904:       assertFalse(node3.isParamList());
1905:       assertFalse(node3.isSetterDef());
1906:       assertFalse(node3.isStringKey());
1907:       assertFalse(node3.isName());
1908:       assertFalse(node3.isCatch());
1909:       assertFalse(node3.isCall());
1910:       assertFalse(node3.isVar());
1911:       assertFalse(node3.isBlock());
1912:       assertFalse(node3.isWhile());
1913:       assertFalse(node3.isTry());
1914:       assertFalse(node3.isDebugger());
1915:       assertFalse(node3.isGetterDef());
1916:       assertFalse(node3.isNumber());
1917:       assertFalse(node3.isIf());
1918:       assertFalse(node3.isFor());
1919:       assertFalse(node3.isNE());
1920:       assertEquals((-930), node3.getType());
1921:       assertFalse(node3.hasMoreThanOneChild());
1922:       assertTrue(node3.hasChildren());
1923:       assertFalse(node3.isCast());
1924:       assertEquals(46, node3.getCharno());
1925:       assertFalse(node3.isContinue());
1926:       assertEquals(1, node3.getChildCount());
1927:       assertFalse(node3.isFunction());
1928:       assertFalse(node3.isRegExp());
1929:       assertFalse(node3.isInc());
1930:       assertFalse(node3.isIn());
1931:       assertFalse(boolean1);
1932:       assertEquals(57, Node.REFLECTED_OBJECT);
1933:       assertEquals(40, Node.ORIGINALNAME_PROP);
1934:       assertEquals(57, Node.LAST_PROP);
1935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1936:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1937:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1938:       assertEquals(30, Node.VAR_ARGS_NAME);
1939:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1940:       assertEquals(12, Node.COLUMN_BITS);
1941:       assertEquals(46, Node.IS_NAMESPACE);
1942:       assertEquals(32, Node.INCRDECR_PROP);
1943:       assertEquals(1, Node.DECR_FLAG);
1944:       assertEquals(43, Node.IS_CONSTANT_NAME);
1945:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1946:       assertEquals(54, Node.SLASH_V);
1947:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1948:       assertEquals(50, Node.FREE_CALL);
1949:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1950:       assertEquals(53, Node.INPUT_ID);
1951:       assertEquals(47, Node.IS_DISPATCHER);
1952:       assertEquals(2, Node.POST_FLAG);
1953:       assertEquals(4095, Node.COLUMN_MASK);
1954:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1955:       assertEquals(55, Node.INFERRED_FUNCTION);
1956:       assertEquals(37, Node.OPT_ARG_NAME);
1957:       assertEquals(48, Node.DIRECTIVES);
1958:       assertEquals(49, Node.DIRECT_EVAL);
1959:       assertEquals(56, Node.CHANGE_TIME);
1960:       assertEquals(36, Node.QUOTED_PROP);
1961:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1962:       assertEquals(8, Node.FLAG_NO_THROWS);
1963:       assertEquals(39, Node.EMPTY_BLOCK);
1964:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1965:       assertEquals(29, Node.JSDOC_INFO_PROP);
1966:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1967:       assertEquals(52, Node.LENGTH);
1968:       assertEquals(52, Node.LENGTH);
1969:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1970:       assertEquals(54, Node.SLASH_V);
1971:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1972:       assertEquals(57, Node.LAST_PROP);
1973:       assertEquals(49, Node.DIRECT_EVAL);
1974:       assertEquals(40, Node.ORIGINALNAME_PROP);
1975:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1976:       assertEquals(12, Node.COLUMN_BITS);
1977:       assertEquals(30, Node.VAR_ARGS_NAME);
1978:       assertEquals(46, Node.IS_NAMESPACE);
1979:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1980:       assertEquals(32, Node.INCRDECR_PROP);
1981:       assertEquals(1, Node.DECR_FLAG);
1982:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1983:       assertEquals(50, Node.FREE_CALL);
1984:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1985:       assertEquals(53, Node.INPUT_ID);
1986:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1987:       assertEquals(43, Node.IS_CONSTANT_NAME);
1988:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1989:       assertEquals(4095, Node.COLUMN_MASK);
1990:       assertEquals(47, Node.IS_DISPATCHER);
1991:       assertEquals(2, Node.POST_FLAG);
1992:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1993:       assertEquals(39, Node.EMPTY_BLOCK);
1994:       assertEquals(37, Node.OPT_ARG_NAME);
1995:       assertEquals(48, Node.DIRECTIVES);
1996:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1997:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1998:       assertEquals(55, Node.INFERRED_FUNCTION);
1999:       assertEquals(29, Node.JSDOC_INFO_PROP);
2000:       assertEquals(56, Node.CHANGE_TIME);
2001:       assertEquals(36, Node.QUOTED_PROP);
2002:       assertEquals(57, Node.REFLECTED_OBJECT);
2003:       assertEquals(8, Node.FLAG_NO_THROWS);
2004:       assertEquals(30, Node.VAR_ARGS_NAME);
2005:       assertEquals(49, Node.DIRECT_EVAL);
2006:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2007:       assertEquals(1, Node.DECR_FLAG);
2008:       assertEquals(32, Node.INCRDECR_PROP);
2009:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2010:       assertEquals(12, Node.COLUMN_BITS);
2011:       assertEquals(57, Node.LAST_PROP);
2012:       assertEquals(29, Node.JSDOC_INFO_PROP);
2013:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2014:       assertEquals(8, Node.FLAG_NO_THROWS);
2015:       assertEquals(39, Node.EMPTY_BLOCK);
2016:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2017:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2018:       assertEquals(52, Node.LENGTH);
2019:       assertEquals(57, Node.REFLECTED_OBJECT);
2020:       assertEquals(37, Node.OPT_ARG_NAME);
2021:       assertEquals(48, Node.DIRECTIVES);
2022:       assertEquals(56, Node.CHANGE_TIME);
2023:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2024:       assertEquals(36, Node.QUOTED_PROP);
2025:       assertEquals(55, Node.INFERRED_FUNCTION);
2026:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2027:       assertEquals(4095, Node.COLUMN_MASK);
2028:       assertEquals(53, Node.INPUT_ID);
2029:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2030:       assertEquals(50, Node.FREE_CALL);
2031:       assertEquals(47, Node.IS_DISPATCHER);
2032:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2033:       assertEquals(40, Node.ORIGINALNAME_PROP);
2034:       assertEquals(2, Node.POST_FLAG);
2035:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2036:       assertEquals(46, Node.IS_NAMESPACE);
2037:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2038:       assertEquals(54, Node.SLASH_V);
2039:       assertEquals(43, Node.IS_CONSTANT_NAME);
2040:       assertNotSame(node1, node2);
2041:       assertSame(node1, node3);
2042:       assertNotSame(node3, node2);
2043:       assertSame(node3, node1);
2044:   }
2045: }
RegularFileObject[/tmp/EvoSuite_376_1628158457465/com/google/javascript/rhino/Node_376_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:17 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_376_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_376_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_376_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:17.863 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) 54, 1215, 103);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals(1215, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(4976743, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertNotNull(node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

Node node1 = new Node((-930), node0, node0, node0, 461845907, 46);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals(1215, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(4976743, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertEquals(46, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertNotNull(node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node2 = new Node(54, node1, node1, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals(1215, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(4976743, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertEquals(46, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals(54, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals((-1), node2.getSourcePosition());
assertTrue(node2.hasChildren());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertNotNull(node2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node2.setSourceFileForTesting("\n\nSubtree2: ");
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals(1215, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(4976743, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertEquals(46, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals(54, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals((-1), node2.getSourcePosition());
assertTrue(node2.hasChildren());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node1, node2);
assertNotSame(node2, node1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals(1215, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(4976743, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertNotNull(iterable0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isInterface());
assertEquals(0, jSDocInfo0.getParameterCount());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isConstant());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertNotNull(jSDocInfo0);

Node node3 = node1.setJSDocInfo(jSDocInfo0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals(1215, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(4976743, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertEquals(46, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isInterface());
assertEquals(0, jSDocInfo0.getParameterCount());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isConstant());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(node3.isBreak());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isSwitch());
assertFalse(node3.isString());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node3.isAnd());
assertEquals(1935224878, node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertTrue(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isAssign());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isNew());
assertFalse(node3.isVoid());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertEquals(472467, node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isWhile());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertEquals((-930), node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertTrue(node3.hasChildren());
assertFalse(node3.isCast());
assertEquals(46, node3.getCharno());
assertFalse(node3.isContinue());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertNotNull(node3);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node2);
assertSame(node1, node3);
assertNotSame(node3, node2);
assertSame(node3, node1);

Node node4 = jSDocInfo0.getAssociatedNode();
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isInterface());
assertEquals(0, jSDocInfo0.getParameterCount());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isConstant());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertNull(node4);

boolean boolean0 = node0.isCase();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals(1215, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(4976743, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(boolean0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

boolean boolean1 = node3.isScript();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals(1215, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(103, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(4976743, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertEquals(46, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isInterface());
assertEquals(0, jSDocInfo0.getParameterCount());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isConstant());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(node3.isBreak());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isSwitch());
assertFalse(node3.isString());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node3.isAnd());
assertEquals(1935224878, node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertTrue(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isAssign());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isNew());
assertFalse(node3.isVoid());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertEquals(472467, node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isWhile());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertEquals((-930), node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertTrue(node3.hasChildren());
assertFalse(node3.isCast());
assertEquals(46, node3.getCharno());
assertFalse(node3.isContinue());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node2);
assertSame(node1, node3);
assertNotSame(node3, node2);
assertSame(node3, node1);


[MASTER] 10:14:24.007 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_436_1628158463555/com/google/javascript/rhino/Node_436_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_436_1628158463555/com/google/javascript/rhino/Node_436_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:24.007 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:24.007 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:24.008 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1703
[MASTER] 10:14:24.010 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_436_1628158463555/com/google/javascript/rhino/Node_436_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:23 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_436_tmp__ESTest extends Node_436_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((double) 54, 54, 103);
21:       assertFalse(node0.isReturn());
22:       assertFalse(node0.isAssignAdd());
23:       assertFalse(node0.isContinue());
24:       assertFalse(node0.hasMoreThanOneChild());
25:       assertFalse(node0.isLabel());
26:       assertFalse(node0.isOr());
27:       assertEquals(39, node0.getType());
28:       assertFalse(node0.isDec());
29:       assertFalse(node0.isTypeOf());
30:       assertFalse(node0.isGetElem());
31:       assertFalse(node0.isLabelName());
32:       assertFalse(node0.isBlock());
33:       assertFalse(node0.isAssign());
34:       assertFalse(node0.hasChildren());
35:       assertFalse(node0.isScript());
36:       assertFalse(node0.isWhile());
37:       assertFalse(node0.hasOneChild());
38:       assertFalse(node0.isInstanceOf());
39:       assertFalse(node0.isCatch());
40:       assertFalse(node0.isObjectLit());
41:       assertFalse(node0.isThis());
42:       assertFalse(node0.isNot());
43:       assertFalse(node0.isWith());
44:       assertFalse(node0.isAnd());
45:       assertEquals(103, node0.getCharno());
46:       assertFalse(node0.isCast());
47:       assertFalse(node0.isThrow());
48:       assertFalse(node0.isFalse());
49:       assertFalse(node0.isFunction());
50:       assertFalse(node0.isSetterDef());
51:       assertFalse(node0.isInc());
52:       assertFalse(node0.isIn());
53:       assertFalse(node0.isDelProp());
54:       assertFalse(node0.isIf());
55:       assertFalse(node0.isNE());
56:       assertFalse(node0.isSwitch());
57:       assertFalse(node0.isArrayLit());
58:       assertFalse(node0.isHook());
59:       assertFalse(node0.isDebugger());
60:       assertFalse(node0.isRegExp());
61:       assertEquals(221287, node0.getSourcePosition());
62:       assertEquals(54, node0.getLineno());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isFor());
65:       assertFalse(node0.isString());
66:       assertFalse(node0.isGetProp());
67:       assertFalse(node0.isTry());
68:       assertFalse(node0.isCase());
69:       assertTrue(node0.isNumber());
70:       assertEquals(0, node0.getChildCount());
71:       assertFalse(node0.isComma());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isNull());
74:       assertFalse(node0.isStringKey());
75:       assertFalse(node0.isParamList());
76:       assertFalse(node0.isVoid());
77:       assertFalse(node0.isExprResult());
78:       assertFalse(node0.isCall());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isAdd());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isTrue());
83:       assertFalse(node0.isDefaultCase());
84:       assertFalse(node0.isEmpty());
85:       assertFalse(node0.isDo());
86:       assertFalse(node0.isNew());
87:       assertNotNull(node0);
88:       assertEquals(53, Node.INPUT_ID);
89:       assertEquals(43, Node.IS_CONSTANT_NAME);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(2, Node.POST_FLAG);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(4095, Node.COLUMN_MASK);
95:       assertEquals(48, Node.DIRECTIVES);
96:       assertEquals(37, Node.OPT_ARG_NAME);
97:       assertEquals(39, Node.EMPTY_BLOCK);
98:       assertEquals(56, Node.CHANGE_TIME);
99:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(29, Node.JSDOC_INFO_PROP);
102:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
104:       assertEquals(36, Node.QUOTED_PROP);
105:       assertEquals(55, Node.INFERRED_FUNCTION);
106:       assertEquals(52, Node.LENGTH);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(54, Node.SLASH_V);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(57, Node.LAST_PROP);
112:       assertEquals(49, Node.DIRECT_EVAL);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(46, Node.IS_NAMESPACE);
117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
118:       assertEquals(12, Node.COLUMN_BITS);
119:       assertEquals(32, Node.INCRDECR_PROP);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(1, Node.DECR_FLAG);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       
125:       Node node1 = new Node((-930), node0, node0, node0, 461845907, 46);
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node0.isReturn());
128:       assertFalse(node0.isAssignAdd());
129:       assertFalse(node0.isContinue());
130:       assertFalse(node0.hasMoreThanOneChild());
131:       assertFalse(node0.isLabel());
132:       assertFalse(node0.isOr());
133:       assertEquals(39, node0.getType());
134:       assertFalse(node0.isDec());
135:       assertFalse(node0.isTypeOf());
136:       assertFalse(node0.isGetElem());
137:       assertFalse(node0.isLabelName());
138:       assertFalse(node0.isBlock());
139:       assertFalse(node0.isAssign());
140:       assertFalse(node0.hasChildren());
141:       assertFalse(node0.isScript());
142:       assertFalse(node0.isWhile());
143:       assertFalse(node0.hasOneChild());
144:       assertFalse(node0.isInstanceOf());
145:       assertFalse(node0.isCatch());
146:       assertFalse(node0.isObjectLit());
147:       assertFalse(node0.isThis());
148:       assertFalse(node0.isNot());
149:       assertFalse(node0.isWith());
150:       assertFalse(node0.isAnd());
151:       assertEquals(103, node0.getCharno());
152:       assertFalse(node0.isCast());
153:       assertFalse(node0.isThrow());
154:       assertFalse(node0.isFalse());
155:       assertFalse(node0.isFunction());
156:       assertFalse(node0.isSetterDef());
157:       assertFalse(node0.isInc());
158:       assertFalse(node0.isIn());
159:       assertFalse(node0.isDelProp());
160:       assertFalse(node0.isIf());
161:       assertFalse(node0.isNE());
162:       assertFalse(node0.isSwitch());
163:       assertFalse(node0.isArrayLit());
164:       assertFalse(node0.isHook());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isRegExp());
167:       assertEquals(221287, node0.getSourcePosition());
168:       assertEquals(54, node0.getLineno());
169:       assertFalse(node0.isGetterDef());
170:       assertFalse(node0.isFor());
171:       assertFalse(node0.isString());
172:       assertFalse(node0.isGetProp());
173:       assertFalse(node0.isTry());
174:       assertFalse(node0.isCase());
175:       assertTrue(node0.isNumber());
176:       assertEquals(0, node0.getChildCount());
177:       assertFalse(node0.isComma());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.isNull());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isParamList());
182:       assertFalse(node0.isVoid());
183:       assertFalse(node0.isExprResult());
184:       assertFalse(node0.isCall());
185:       assertFalse(node0.isName());
186:       assertFalse(node0.isAdd());
187:       assertFalse(node0.isVar());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isDefaultCase());
190:       assertFalse(node0.isEmpty());
191:       assertFalse(node0.isDo());
192:       assertFalse(node0.isNew());
193:       assertFalse(node1.isLabel());
194:       assertFalse(node1.isOr());
195:       assertFalse(node1.isAssignAdd());
196:       assertFalse(node1.isReturn());
197:       assertEquals(46, node1.getCharno());
198:       assertFalse(node1.hasMoreThanOneChild());
199:       assertFalse(node1.isTypeOf());
200:       assertFalse(node1.isNumber());
201:       assertFalse(node1.isContinue());
202:       assertFalse(node1.isAssign());
203:       assertFalse(node1.isDo());
204:       assertFalse(node1.isDec());
205:       assertFalse(node1.isWhile());
206:       assertFalse(node1.isCast());
207:       assertFalse(node1.isScript());
208:       assertFalse(node1.isNot());
209:       assertFalse(node1.isLabelName());
210:       assertFalse(node1.isStringKey());
211:       assertFalse(node1.isAnd());
212:       assertFalse(node1.isParamList());
213:       assertEquals(1935224878, node1.getSourcePosition());
214:       assertFalse(node1.isGetProp());
215:       assertFalse(node1.isComma());
216:       assertFalse(node1.isObjectLit());
217:       assertFalse(node1.isVar());
218:       assertFalse(node1.isDefaultCase());
219:       assertFalse(node1.isAdd());
220:       assertFalse(node1.isVoid());
221:       assertFalse(node1.isNew());
222:       assertFalse(node1.isExprResult());
223:       assertFalse(node1.isCall());
224:       assertEquals(472467, node1.getLineno());
225:       assertFalse(node1.isDelProp());
226:       assertFalse(node1.isGetElem());
227:       assertFalse(node1.isName());
228:       assertFalse(node1.isBreak());
229:       assertFalse(node1.isTrue());
230:       assertFalse(node1.isNull());
231:       assertTrue(node1.hasChildren());
232:       assertEquals(1, node1.getChildCount());
233:       assertFalse(node1.isIn());
234:       assertTrue(node1.hasOneChild());
235:       assertFalse(node1.isEmpty());
236:       assertFalse(node1.isFor());
237:       assertFalse(node1.isCase());
238:       assertFalse(node1.isTry());
239:       assertFalse(node1.isArrayLit());
240:       assertEquals((-930), node1.getType());
241:       assertFalse(node1.isDebugger());
242:       assertFalse(node1.isFunction());
243:       assertFalse(node1.isFalse());
244:       assertFalse(node1.isString());
245:       assertFalse(node1.isGetterDef());
246:       assertFalse(node1.isSwitch());
247:       assertFalse(node1.isCatch());
248:       assertFalse(node1.isSetterDef());
249:       assertFalse(node1.isInstanceOf());
250:       assertFalse(node1.isWith());
251:       assertFalse(node1.isThis());
252:       assertFalse(node1.isThrow());
253:       assertFalse(node1.isBlock());
254:       assertFalse(node1.isHook());
255:       assertFalse(node1.isRegExp());
256:       assertFalse(node1.isInc());
257:       assertFalse(node1.isNE());
258:       assertFalse(node1.isIf());
259:       assertNotNull(node1);
260:       assertEquals(53, Node.INPUT_ID);
261:       assertEquals(43, Node.IS_CONSTANT_NAME);
262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(2, Node.POST_FLAG);
265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
266:       assertEquals(4095, Node.COLUMN_MASK);
267:       assertEquals(48, Node.DIRECTIVES);
268:       assertEquals(37, Node.OPT_ARG_NAME);
269:       assertEquals(39, Node.EMPTY_BLOCK);
270:       assertEquals(56, Node.CHANGE_TIME);
271:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
273:       assertEquals(29, Node.JSDOC_INFO_PROP);
274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
275:       assertEquals(15, Node.NO_SIDE_EFFECTS);
276:       assertEquals(36, Node.QUOTED_PROP);
277:       assertEquals(55, Node.INFERRED_FUNCTION);
278:       assertEquals(52, Node.LENGTH);
279:       assertEquals(8, Node.FLAG_NO_THROWS);
280:       assertEquals(54, Node.SLASH_V);
281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
282:       assertEquals(57, Node.REFLECTED_OBJECT);
283:       assertEquals(57, Node.LAST_PROP);
284:       assertEquals(49, Node.DIRECT_EVAL);
285:       assertEquals(30, Node.VAR_ARGS_NAME);
286:       assertEquals(40, Node.ORIGINALNAME_PROP);
287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
288:       assertEquals(46, Node.IS_NAMESPACE);
289:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
290:       assertEquals(12, Node.COLUMN_BITS);
291:       assertEquals(32, Node.INCRDECR_PROP);
292:       assertEquals(50, Node.FREE_CALL);
293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
294:       assertEquals(1, Node.DECR_FLAG);
295:       assertEquals(51, Node.STATIC_SOURCE_FILE);
296:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
297:       assertEquals(43, Node.IS_CONSTANT_NAME);
298:       assertEquals(36, Node.QUOTED_PROP);
299:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
300:       assertEquals(55, Node.INFERRED_FUNCTION);
301:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
302:       assertEquals(29, Node.JSDOC_INFO_PROP);
303:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
304:       assertEquals(53, Node.INPUT_ID);
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertEquals(37, Node.OPT_ARG_NAME);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(32, Node.INCRDECR_PROP);
309:       assertEquals(56, Node.CHANGE_TIME);
310:       assertEquals(12, Node.COLUMN_BITS);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(4095, Node.COLUMN_MASK);
313:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
314:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(54, Node.SLASH_V);
317:       assertEquals(52, Node.LENGTH);
318:       assertEquals(57, Node.LAST_PROP);
319:       assertEquals(57, Node.REFLECTED_OBJECT);
320:       assertEquals(1, Node.DECR_FLAG);
321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
322:       assertEquals(50, Node.FREE_CALL);
323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
324:       assertEquals(39, Node.EMPTY_BLOCK);
325:       assertEquals(2, Node.POST_FLAG);
326:       assertEquals(46, Node.IS_NAMESPACE);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(51, Node.STATIC_SOURCE_FILE);
329:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
330:       assertEquals(30, Node.VAR_ARGS_NAME);
331:       assertEquals(40, Node.ORIGINALNAME_PROP);
332:       
333:       Node node2 = new Node(54, node1, node1, node1);
334:       assertFalse(node0.equals((Object)node1));
335:       assertFalse(node1.equals((Object)node0));
336:       assertFalse(node2.equals((Object)node0));
337:       assertFalse(node2.equals((Object)node1));
338:       assertFalse(node0.isReturn());
339:       assertFalse(node0.isAssignAdd());
340:       assertFalse(node0.isContinue());
341:       assertFalse(node0.hasMoreThanOneChild());
342:       assertFalse(node0.isLabel());
343:       assertFalse(node0.isOr());
344:       assertEquals(39, node0.getType());
345:       assertFalse(node0.isDec());
346:       assertFalse(node0.isTypeOf());
347:       assertFalse(node0.isGetElem());
348:       assertFalse(node0.isLabelName());
349:       assertFalse(node0.isBlock());
350:       assertFalse(node0.isAssign());
351:       assertFalse(node0.hasChildren());
352:       assertFalse(node0.isScript());
353:       assertFalse(node0.isWhile());
354:       assertFalse(node0.hasOneChild());
355:       assertFalse(node0.isInstanceOf());
356:       assertFalse(node0.isCatch());
357:       assertFalse(node0.isObjectLit());
358:       assertFalse(node0.isThis());
359:       assertFalse(node0.isNot());
360:       assertFalse(node0.isWith());
361:       assertFalse(node0.isAnd());
362:       assertEquals(103, node0.getCharno());
363:       assertFalse(node0.isCast());
364:       assertFalse(node0.isThrow());
365:       assertFalse(node0.isFalse());
366:       assertFalse(node0.isFunction());
367:       assertFalse(node0.isSetterDef());
368:       assertFalse(node0.isInc());
369:       assertFalse(node0.isIn());
370:       assertFalse(node0.isDelProp());
371:       assertFalse(node0.isIf());
372:       assertFalse(node0.isNE());
373:       assertFalse(node0.isSwitch());
374:       assertFalse(node0.isArrayLit());
375:       assertFalse(node0.isHook());
376:       assertFalse(node0.isDebugger());
377:       assertFalse(node0.isRegExp());
378:       assertEquals(221287, node0.getSourcePosition());
379:       assertEquals(54, node0.getLineno());
380:       assertFalse(node0.isGetterDef());
381:       assertFalse(node0.isFor());
382:       assertFalse(node0.isString());
383:       assertFalse(node0.isGetProp());
384:       assertFalse(node0.isTry());
385:       assertFalse(node0.isCase());
386:       assertTrue(node0.isNumber());
387:       assertEquals(0, node0.getChildCount());
388:       assertFalse(node0.isComma());
389:       assertFalse(node0.isBreak());
390:       assertFalse(node0.isNull());
391:       assertFalse(node0.isStringKey());
392:       assertFalse(node0.isParamList());
393:       assertFalse(node0.isVoid());
394:       assertFalse(node0.isExprResult());
395:       assertFalse(node0.isCall());
396:       assertFalse(node0.isName());
397:       assertFalse(node0.isAdd());
398:       assertFalse(node0.isVar());
399:       assertFalse(node0.isTrue());
400:       assertFalse(node0.isDefaultCase());
401:       assertFalse(node0.isEmpty());
402:       assertFalse(node0.isDo());
403:       assertFalse(node0.isNew());
404:       assertFalse(node1.isLabel());
405:       assertFalse(node1.isOr());
406:       assertFalse(node1.isAssignAdd());
407:       assertFalse(node1.isReturn());
408:       assertEquals(46, node1.getCharno());
409:       assertFalse(node1.hasMoreThanOneChild());
410:       assertFalse(node1.isTypeOf());
411:       assertFalse(node1.isNumber());
412:       assertFalse(node1.isContinue());
413:       assertFalse(node1.isAssign());
414:       assertFalse(node1.isDo());
415:       assertFalse(node1.isDec());
416:       assertFalse(node1.isWhile());
417:       assertFalse(node1.isCast());
418:       assertFalse(node1.isScript());
419:       assertFalse(node1.isNot());
420:       assertFalse(node1.isLabelName());
421:       assertFalse(node1.isStringKey());
422:       assertFalse(node1.isAnd());
423:       assertFalse(node1.isParamList());
424:       assertEquals(1935224878, node1.getSourcePosition());
425:       assertFalse(node1.isGetProp());
426:       assertFalse(node1.isComma());
427:       assertFalse(node1.isObjectLit());
428:       assertFalse(node1.isVar());
429:       assertFalse(node1.isDefaultCase());
430:       assertFalse(node1.isAdd());
431:       assertFalse(node1.isVoid());
432:       assertFalse(node1.isNew());
433:       assertFalse(node1.isExprResult());
434:       assertFalse(node1.isCall());
435:       assertEquals(472467, node1.getLineno());
436:       assertFalse(node1.isDelProp());
437:       assertFalse(node1.isGetElem());
438:       assertFalse(node1.isName());
439:       assertFalse(node1.isBreak());
440:       assertFalse(node1.isTrue());
441:       assertFalse(node1.isNull());
442:       assertTrue(node1.hasChildren());
443:       assertEquals(1, node1.getChildCount());
444:       assertFalse(node1.isIn());
445:       assertTrue(node1.hasOneChild());
446:       assertFalse(node1.isEmpty());
447:       assertFalse(node1.isFor());
448:       assertFalse(node1.isCase());
449:       assertFalse(node1.isTry());
450:       assertFalse(node1.isArrayLit());
451:       assertEquals((-930), node1.getType());
452:       assertFalse(node1.isDebugger());
453:       assertFalse(node1.isFunction());
454:       assertFalse(node1.isFalse());
455:       assertFalse(node1.isString());
456:       assertFalse(node1.isGetterDef());
457:       assertFalse(node1.isSwitch());
458:       assertFalse(node1.isCatch());
459:       assertFalse(node1.isSetterDef());
460:       assertFalse(node1.isInstanceOf());
461:       assertFalse(node1.isWith());
462:       assertFalse(node1.isThis());
463:       assertFalse(node1.isThrow());
464:       assertFalse(node1.isBlock());
465:       assertFalse(node1.isHook());
466:       assertFalse(node1.isRegExp());
467:       assertFalse(node1.isInc());
468:       assertFalse(node1.isNE());
469:       assertFalse(node1.isIf());
470:       assertFalse(node2.isWhile());
471:       assertFalse(node2.isNew());
472:       assertFalse(node2.isDo());
473:       assertFalse(node2.isAdd());
474:       assertFalse(node2.isNumber());
475:       assertEquals((-1), node2.getSourcePosition());
476:       assertFalse(node2.isOr());
477:       assertFalse(node2.isGetElem());
478:       assertFalse(node2.isNull());
479:       assertFalse(node2.isCall());
480:       assertFalse(node2.isName());
481:       assertEquals((-1), node2.getLineno());
482:       assertFalse(node2.isReturn());
483:       assertFalse(node2.isBlock());
484:       assertFalse(node2.isCatch());
485:       assertFalse(node2.hasMoreThanOneChild());
486:       assertFalse(node2.isTypeOf());
487:       assertFalse(node2.isDec());
488:       assertFalse(node2.isAssign());
489:       assertFalse(node2.isWith());
490:       assertFalse(node2.isAnd());
491:       assertFalse(node2.isObjectLit());
492:       assertFalse(node2.isDebugger());
493:       assertFalse(node2.isNot());
494:       assertFalse(node2.isThrow());
495:       assertFalse(node2.isSetterDef());
496:       assertFalse(node2.isCast());
497:       assertFalse(node2.isFunction());
498:       assertFalse(node2.isContinue());
499:       assertFalse(node2.isFalse());
500:       assertFalse(node2.isString());
501:       assertFalse(node2.isInc());
502:       assertFalse(node2.isSwitch());
503:       assertFalse(node2.isCase());
504:       assertFalse(node2.isIn());
505:       assertEquals((-1), node2.getCharno());
506:       assertFalse(node2.isGetterDef());
507:       assertTrue(node2.hasOneChild());
508:       assertFalse(node2.isDelProp());
509:       assertEquals(54, node2.getType());
510:       assertFalse(node2.isBreak());
511:       assertFalse(node2.isIf());
512:       assertFalse(node2.isFor());
513:       assertFalse(node2.isNE());
514:       assertFalse(node2.isGetProp());
515:       assertEquals(1, node2.getChildCount());
516:       assertFalse(node2.isInstanceOf());
517:       assertFalse(node2.isHook());
518:       assertTrue(node2.hasChildren());
519:       assertFalse(node2.isThis());
520:       assertFalse(node2.isComma());
521:       assertFalse(node2.isRegExp());
522:       assertFalse(node2.isDefaultCase());
523:       assertFalse(node2.isScript());
524:       assertFalse(node2.isExprResult());
525:       assertFalse(node2.isVoid());
526:       assertFalse(node2.isTry());
527:       assertFalse(node2.isTrue());
528:       assertFalse(node2.isStringKey());
529:       assertFalse(node2.isEmpty());
530:       assertFalse(node2.isParamList());
531:       assertFalse(node2.isArrayLit());
532:       assertFalse(node2.isLabelName());
533:       assertFalse(node2.isLabel());
534:       assertFalse(node2.isAssignAdd());
535:       assertFalse(node2.isVar());
536:       assertNotNull(node2);
537:       assertEquals(53, Node.INPUT_ID);
538:       assertEquals(43, Node.IS_CONSTANT_NAME);
539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
540:       assertEquals(47, Node.IS_DISPATCHER);
541:       assertEquals(2, Node.POST_FLAG);
542:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
543:       assertEquals(4095, Node.COLUMN_MASK);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(37, Node.OPT_ARG_NAME);
546:       assertEquals(39, Node.EMPTY_BLOCK);
547:       assertEquals(56, Node.CHANGE_TIME);
548:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
549:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
550:       assertEquals(29, Node.JSDOC_INFO_PROP);
551:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
552:       assertEquals(15, Node.NO_SIDE_EFFECTS);
553:       assertEquals(36, Node.QUOTED_PROP);
554:       assertEquals(55, Node.INFERRED_FUNCTION);
555:       assertEquals(52, Node.LENGTH);
556:       assertEquals(8, Node.FLAG_NO_THROWS);
557:       assertEquals(54, Node.SLASH_V);
558:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
559:       assertEquals(57, Node.REFLECTED_OBJECT);
560:       assertEquals(57, Node.LAST_PROP);
561:       assertEquals(49, Node.DIRECT_EVAL);
562:       assertEquals(30, Node.VAR_ARGS_NAME);
563:       assertEquals(40, Node.ORIGINALNAME_PROP);
564:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
565:       assertEquals(46, Node.IS_NAMESPACE);
566:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
567:       assertEquals(12, Node.COLUMN_BITS);
568:       assertEquals(32, Node.INCRDECR_PROP);
569:       assertEquals(50, Node.FREE_CALL);
570:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
571:       assertEquals(1, Node.DECR_FLAG);
572:       assertEquals(51, Node.STATIC_SOURCE_FILE);
573:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
574:       assertEquals(43, Node.IS_CONSTANT_NAME);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
577:       assertEquals(55, Node.INFERRED_FUNCTION);
578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
579:       assertEquals(29, Node.JSDOC_INFO_PROP);
580:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
581:       assertEquals(53, Node.INPUT_ID);
582:       assertEquals(48, Node.DIRECTIVES);
583:       assertEquals(37, Node.OPT_ARG_NAME);
584:       assertEquals(8, Node.FLAG_NO_THROWS);
585:       assertEquals(32, Node.INCRDECR_PROP);
586:       assertEquals(56, Node.CHANGE_TIME);
587:       assertEquals(12, Node.COLUMN_BITS);
588:       assertEquals(49, Node.DIRECT_EVAL);
589:       assertEquals(4095, Node.COLUMN_MASK);
590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
591:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
592:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
593:       assertEquals(54, Node.SLASH_V);
594:       assertEquals(52, Node.LENGTH);
595:       assertEquals(57, Node.LAST_PROP);
596:       assertEquals(57, Node.REFLECTED_OBJECT);
597:       assertEquals(1, Node.DECR_FLAG);
598:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
599:       assertEquals(50, Node.FREE_CALL);
600:       assertEquals(15, Node.NO_SIDE_EFFECTS);
601:       assertEquals(39, Node.EMPTY_BLOCK);
602:       assertEquals(2, Node.POST_FLAG);
603:       assertEquals(46, Node.IS_NAMESPACE);
604:       assertEquals(47, Node.IS_DISPATCHER);
605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
606:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
607:       assertEquals(30, Node.VAR_ARGS_NAME);
608:       assertEquals(40, Node.ORIGINALNAME_PROP);
609:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
610:       assertEquals(29, Node.JSDOC_INFO_PROP);
611:       assertEquals(47, Node.IS_DISPATCHER);
612:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
613:       assertEquals(2, Node.POST_FLAG);
614:       assertEquals(37, Node.OPT_ARG_NAME);
615:       assertEquals(43, Node.IS_CONSTANT_NAME);
616:       assertEquals(56, Node.CHANGE_TIME);
617:       assertEquals(46, Node.IS_NAMESPACE);
618:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
619:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
620:       assertEquals(30, Node.VAR_ARGS_NAME);
621:       assertEquals(15, Node.NO_SIDE_EFFECTS);
622:       assertEquals(36, Node.QUOTED_PROP);
623:       assertEquals(55, Node.INFERRED_FUNCTION);
624:       assertEquals(53, Node.INPUT_ID);
625:       assertEquals(39, Node.EMPTY_BLOCK);
626:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
627:       assertEquals(57, Node.LAST_PROP);
628:       assertEquals(50, Node.FREE_CALL);
629:       assertEquals(40, Node.ORIGINALNAME_PROP);
630:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
631:       assertEquals(8, Node.FLAG_NO_THROWS);
632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
633:       assertEquals(52, Node.LENGTH);
634:       assertEquals(48, Node.DIRECTIVES);
635:       assertEquals(54, Node.SLASH_V);
636:       assertEquals(57, Node.REFLECTED_OBJECT);
637:       assertEquals(1, Node.DECR_FLAG);
638:       assertEquals(49, Node.DIRECT_EVAL);
639:       assertEquals(51, Node.STATIC_SOURCE_FILE);
640:       assertEquals(4095, Node.COLUMN_MASK);
641:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
642:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
643:       assertEquals(12, Node.COLUMN_BITS);
644:       assertEquals(32, Node.INCRDECR_PROP);
645:       
646:       node2.setSourceFileForTesting("\n\nSubtree2: ");
647:       assertFalse(node0.equals((Object)node2));
648:       assertFalse(node0.equals((Object)node1));
649:       assertFalse(node1.equals((Object)node2));
650:       assertFalse(node1.equals((Object)node0));
651:       assertFalse(node2.equals((Object)node0));
652:       assertFalse(node2.equals((Object)node1));
653:       assertFalse(node0.isReturn());
654:       assertFalse(node0.isAssignAdd());
655:       assertFalse(node0.isContinue());
656:       assertFalse(node0.hasMoreThanOneChild());
657:       assertFalse(node0.isLabel());
658:       assertFalse(node0.isOr());
659:       assertEquals(39, node0.getType());
660:       assertFalse(node0.isDec());
661:       assertFalse(node0.isTypeOf());
662:       assertFalse(node0.isGetElem());
663:       assertFalse(node0.isLabelName());
664:       assertFalse(node0.isBlock());
665:       assertFalse(node0.isAssign());
666:       assertFalse(node0.hasChildren());
667:       assertFalse(node0.isScript());
668:       assertFalse(node0.isWhile());
669:       assertFalse(node0.hasOneChild());
670:       assertFalse(node0.isInstanceOf());
671:       assertFalse(node0.isCatch());
672:       assertFalse(node0.isObjectLit());
673:       assertFalse(node0.isThis());
674:       assertFalse(node0.isNot());
675:       assertFalse(node0.isWith());
676:       assertFalse(node0.isAnd());
677:       assertEquals(103, node0.getCharno());
678:       assertFalse(node0.isCast());
679:       assertFalse(node0.isThrow());
680:       assertFalse(node0.isFalse());
681:       assertFalse(node0.isFunction());
682:       assertFalse(node0.isSetterDef());
683:       assertFalse(node0.isInc());
684:       assertFalse(node0.isIn());
685:       assertFalse(node0.isDelProp());
686:       assertFalse(node0.isIf());
687:       assertFalse(node0.isNE());
688:       assertFalse(node0.isSwitch());
689:       assertFalse(node0.isArrayLit());
690:       assertFalse(node0.isHook());
691:       assertFalse(node0.isDebugger());
692:       assertFalse(node0.isRegExp());
693:       assertEquals(221287, node0.getSourcePosition());
694:       assertEquals(54, node0.getLineno());
695:       assertFalse(node0.isGetterDef());
696:       assertFalse(node0.isFor());
697:       assertFalse(node0.isString());
698:       assertFalse(node0.isGetProp());
699:       assertFalse(node0.isTry());
700:       assertFalse(node0.isCase());
701:       assertTrue(node0.isNumber());
702:       assertEquals(0, node0.getChildCount());
703:       assertFalse(node0.isComma());
704:       assertFalse(node0.isBreak());
705:       assertFalse(node0.isNull());
706:       assertFalse(node0.isStringKey());
707:       assertFalse(node0.isParamList());
708:       assertFalse(node0.isVoid());
709:       assertFalse(node0.isExprResult());
710:       assertFalse(node0.isCall());
711:       assertFalse(node0.isName());
712:       assertFalse(node0.isAdd());
713:       assertFalse(node0.isVar());
714:       assertFalse(node0.isTrue());
715:       assertFalse(node0.isDefaultCase());
716:       assertFalse(node0.isEmpty());
717:       assertFalse(node0.isDo());
718:       assertFalse(node0.isNew());
719:       assertFalse(node1.isLabel());
720:       assertFalse(node1.isOr());
721:       assertFalse(node1.isAssignAdd());
722:       assertFalse(node1.isReturn());
723:       assertEquals(46, node1.getCharno());
724:       assertFalse(node1.hasMoreThanOneChild());
725:       assertFalse(node1.isTypeOf());
726:       assertFalse(node1.isNumber());
727:       assertFalse(node1.isContinue());
728:       assertFalse(node1.isAssign());
729:       assertFalse(node1.isDo());
730:       assertFalse(node1.isDec());
731:       assertFalse(node1.isWhile());
732:       assertFalse(node1.isCast());
733:       assertFalse(node1.isScript());
734:       assertFalse(node1.isNot());
735:       assertFalse(node1.isLabelName());
736:       assertFalse(node1.isStringKey());
737:       assertFalse(node1.isAnd());
738:       assertFalse(node1.isParamList());
739:       assertEquals(1935224878, node1.getSourcePosition());
740:       assertFalse(node1.isGetProp());
741:       assertFalse(node1.isComma());
742:       assertFalse(node1.isObjectLit());
743:       assertFalse(node1.isVar());
744:       assertFalse(node1.isDefaultCase());
745:       assertFalse(node1.isAdd());
746:       assertFalse(node1.isVoid());
747:       assertFalse(node1.isNew());
748:       assertFalse(node1.isExprResult());
749:       assertFalse(node1.isCall());
750:       assertEquals(472467, node1.getLineno());
751:       assertFalse(node1.isDelProp());
752:       assertFalse(node1.isGetElem());
753:       assertFalse(node1.isName());
754:       assertFalse(node1.isBreak());
755:       assertFalse(node1.isTrue());
756:       assertFalse(node1.isNull());
757:       assertTrue(node1.hasChildren());
758:       assertEquals(1, node1.getChildCount());
759:       assertFalse(node1.isIn());
760:       assertTrue(node1.hasOneChild());
761:       assertFalse(node1.isEmpty());
762:       assertFalse(node1.isFor());
763:       assertFalse(node1.isCase());
764:       assertFalse(node1.isTry());
765:       assertFalse(node1.isArrayLit());
766:       assertEquals((-930), node1.getType());
767:       assertFalse(node1.isDebugger());
768:       assertFalse(node1.isFunction());
769:       assertFalse(node1.isFalse());
770:       assertFalse(node1.isString());
771:       assertFalse(node1.isGetterDef());
772:       assertFalse(node1.isSwitch());
773:       assertFalse(node1.isCatch());
774:       assertFalse(node1.isSetterDef());
775:       assertFalse(node1.isInstanceOf());
776:       assertFalse(node1.isWith());
777:       assertFalse(node1.isThis());
778:       assertFalse(node1.isThrow());
779:       assertFalse(node1.isBlock());
780:       assertFalse(node1.isHook());
781:       assertFalse(node1.isRegExp());
782:       assertFalse(node1.isInc());
783:       assertFalse(node1.isNE());
784:       assertFalse(node1.isIf());
785:       assertFalse(node2.isWhile());
786:       assertFalse(node2.isNew());
787:       assertFalse(node2.isDo());
788:       assertFalse(node2.isAdd());
789:       assertFalse(node2.isNumber());
790:       assertEquals((-1), node2.getSourcePosition());
791:       assertFalse(node2.isOr());
792:       assertFalse(node2.isGetElem());
793:       assertFalse(node2.isNull());
794:       assertFalse(node2.isCall());
795:       assertFalse(node2.isName());
796:       assertEquals((-1), node2.getLineno());
797:       assertFalse(node2.isReturn());
798:       assertFalse(node2.isBlock());
799:       assertFalse(node2.isCatch());
800:       assertFalse(node2.hasMoreThanOneChild());
801:       assertFalse(node2.isTypeOf());
802:       assertFalse(node2.isDec());
803:       assertFalse(node2.isAssign());
804:       assertFalse(node2.isWith());
805:       assertFalse(node2.isAnd());
806:       assertFalse(node2.isObjectLit());
807:       assertFalse(node2.isDebugger());
808:       assertFalse(node2.isNot());
809:       assertFalse(node2.isThrow());
810:       assertFalse(node2.isSetterDef());
811:       assertFalse(node2.isCast());
812:       assertFalse(node2.isFunction());
813:       assertFalse(node2.isContinue());
814:       assertFalse(node2.isFalse());
815:       assertFalse(node2.isString());
816:       assertFalse(node2.isInc());
817:       assertFalse(node2.isSwitch());
818:       assertFalse(node2.isCase());
819:       assertFalse(node2.isIn());
820:       assertEquals((-1), node2.getCharno());
821:       assertFalse(node2.isGetterDef());
822:       assertTrue(node2.hasOneChild());
823:       assertFalse(node2.isDelProp());
824:       assertEquals(54, node2.getType());
825:       assertFalse(node2.isBreak());
826:       assertFalse(node2.isIf());
827:       assertFalse(node2.isFor());
828:       assertFalse(node2.isNE());
829:       assertFalse(node2.isGetProp());
830:       assertEquals(1, node2.getChildCount());
831:       assertFalse(node2.isInstanceOf());
832:       assertFalse(node2.isHook());
833:       assertTrue(node2.hasChildren());
834:       assertFalse(node2.isThis());
835:       assertFalse(node2.isComma());
836:       assertFalse(node2.isRegExp());
837:       assertFalse(node2.isDefaultCase());
838:       assertFalse(node2.isScript());
839:       assertFalse(node2.isExprResult());
840:       assertFalse(node2.isVoid());
841:       assertFalse(node2.isTry());
842:       assertFalse(node2.isTrue());
843:       assertFalse(node2.isStringKey());
844:       assertFalse(node2.isEmpty());
845:       assertFalse(node2.isParamList());
846:       assertFalse(node2.isArrayLit());
847:       assertFalse(node2.isLabelName());
848:       assertFalse(node2.isLabel());
849:       assertFalse(node2.isAssignAdd());
850:       assertFalse(node2.isVar());
851:       assertEquals(53, Node.INPUT_ID);
852:       assertEquals(43, Node.IS_CONSTANT_NAME);
853:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
854:       assertEquals(47, Node.IS_DISPATCHER);
855:       assertEquals(2, Node.POST_FLAG);
856:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
857:       assertEquals(4095, Node.COLUMN_MASK);
858:       assertEquals(48, Node.DIRECTIVES);
859:       assertEquals(37, Node.OPT_ARG_NAME);
860:       assertEquals(39, Node.EMPTY_BLOCK);
861:       assertEquals(56, Node.CHANGE_TIME);
862:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
863:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
864:       assertEquals(29, Node.JSDOC_INFO_PROP);
865:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
866:       assertEquals(15, Node.NO_SIDE_EFFECTS);
867:       assertEquals(36, Node.QUOTED_PROP);
868:       assertEquals(55, Node.INFERRED_FUNCTION);
869:       assertEquals(52, Node.LENGTH);
870:       assertEquals(8, Node.FLAG_NO_THROWS);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
873:       assertEquals(57, Node.REFLECTED_OBJECT);
874:       assertEquals(57, Node.LAST_PROP);
875:       assertEquals(49, Node.DIRECT_EVAL);
876:       assertEquals(30, Node.VAR_ARGS_NAME);
877:       assertEquals(40, Node.ORIGINALNAME_PROP);
878:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
879:       assertEquals(46, Node.IS_NAMESPACE);
880:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
881:       assertEquals(12, Node.COLUMN_BITS);
882:       assertEquals(32, Node.INCRDECR_PROP);
883:       assertEquals(50, Node.FREE_CALL);
884:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
885:       assertEquals(1, Node.DECR_FLAG);
886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
887:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
888:       assertEquals(43, Node.IS_CONSTANT_NAME);
889:       assertEquals(36, Node.QUOTED_PROP);
890:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
891:       assertEquals(55, Node.INFERRED_FUNCTION);
892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
893:       assertEquals(29, Node.JSDOC_INFO_PROP);
894:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
895:       assertEquals(53, Node.INPUT_ID);
896:       assertEquals(48, Node.DIRECTIVES);
897:       assertEquals(37, Node.OPT_ARG_NAME);
898:       assertEquals(8, Node.FLAG_NO_THROWS);
899:       assertEquals(32, Node.INCRDECR_PROP);
900:       assertEquals(56, Node.CHANGE_TIME);
901:       assertEquals(12, Node.COLUMN_BITS);
902:       assertEquals(49, Node.DIRECT_EVAL);
903:       assertEquals(4095, Node.COLUMN_MASK);
904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
905:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
906:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
907:       assertEquals(54, Node.SLASH_V);
908:       assertEquals(52, Node.LENGTH);
909:       assertEquals(57, Node.LAST_PROP);
910:       assertEquals(57, Node.REFLECTED_OBJECT);
911:       assertEquals(1, Node.DECR_FLAG);
912:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
913:       assertEquals(50, Node.FREE_CALL);
914:       assertEquals(15, Node.NO_SIDE_EFFECTS);
915:       assertEquals(39, Node.EMPTY_BLOCK);
916:       assertEquals(2, Node.POST_FLAG);
917:       assertEquals(46, Node.IS_NAMESPACE);
918:       assertEquals(47, Node.IS_DISPATCHER);
919:       assertEquals(51, Node.STATIC_SOURCE_FILE);
920:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
921:       assertEquals(30, Node.VAR_ARGS_NAME);
922:       assertEquals(40, Node.ORIGINALNAME_PROP);
923:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
924:       assertEquals(29, Node.JSDOC_INFO_PROP);
925:       assertEquals(47, Node.IS_DISPATCHER);
926:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
927:       assertEquals(2, Node.POST_FLAG);
928:       assertEquals(37, Node.OPT_ARG_NAME);
929:       assertEquals(43, Node.IS_CONSTANT_NAME);
930:       assertEquals(56, Node.CHANGE_TIME);
931:       assertEquals(46, Node.IS_NAMESPACE);
932:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
933:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
934:       assertEquals(30, Node.VAR_ARGS_NAME);
935:       assertEquals(15, Node.NO_SIDE_EFFECTS);
936:       assertEquals(36, Node.QUOTED_PROP);
937:       assertEquals(55, Node.INFERRED_FUNCTION);
938:       assertEquals(53, Node.INPUT_ID);
939:       assertEquals(39, Node.EMPTY_BLOCK);
940:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
941:       assertEquals(57, Node.LAST_PROP);
942:       assertEquals(50, Node.FREE_CALL);
943:       assertEquals(40, Node.ORIGINALNAME_PROP);
944:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
945:       assertEquals(8, Node.FLAG_NO_THROWS);
946:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
947:       assertEquals(52, Node.LENGTH);
948:       assertEquals(48, Node.DIRECTIVES);
949:       assertEquals(54, Node.SLASH_V);
950:       assertEquals(57, Node.REFLECTED_OBJECT);
951:       assertEquals(1, Node.DECR_FLAG);
952:       assertEquals(49, Node.DIRECT_EVAL);
953:       assertEquals(51, Node.STATIC_SOURCE_FILE);
954:       assertEquals(4095, Node.COLUMN_MASK);
955:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
956:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
957:       assertEquals(12, Node.COLUMN_BITS);
958:       assertEquals(32, Node.INCRDECR_PROP);
959:       
960:       boolean boolean0 = node2.isQualifiedName();
961:       assertFalse(node0.equals((Object)node2));
962:       assertFalse(node0.equals((Object)node1));
963:       assertFalse(node1.equals((Object)node2));
964:       assertFalse(node1.equals((Object)node0));
965:       assertFalse(node2.equals((Object)node0));
966:       assertFalse(node2.equals((Object)node1));
967:       assertFalse(node0.isReturn());
968:       assertFalse(node0.isAssignAdd());
969:       assertFalse(node0.isContinue());
970:       assertFalse(node0.hasMoreThanOneChild());
971:       assertFalse(node0.isLabel());
972:       assertFalse(node0.isOr());
973:       assertEquals(39, node0.getType());
974:       assertFalse(node0.isDec());
975:       assertFalse(node0.isTypeOf());
976:       assertFalse(node0.isGetElem());
977:       assertFalse(node0.isLabelName());
978:       assertFalse(node0.isBlock());
979:       assertFalse(node0.isAssign());
980:       assertFalse(node0.hasChildren());
981:       assertFalse(node0.isScript());
982:       assertFalse(node0.isWhile());
983:       assertFalse(node0.hasOneChild());
984:       assertFalse(node0.isInstanceOf());
985:       assertFalse(node0.isCatch());
986:       assertFalse(node0.isObjectLit());
987:       assertFalse(node0.isThis());
988:       assertFalse(node0.isNot());
989:       assertFalse(node0.isWith());
990:       assertFalse(node0.isAnd());
991:       assertEquals(103, node0.getCharno());
992:       assertFalse(node0.isCast());
993:       assertFalse(node0.isThrow());
994:       assertFalse(node0.isFalse());
995:       assertFalse(node0.isFunction());
996:       assertFalse(node0.isSetterDef());
997:       assertFalse(node0.isInc());
998:       assertFalse(node0.isIn());
999:       assertFalse(node0.isDelProp());
1000:       assertFalse(node0.isIf());
1001:       assertFalse(node0.isNE());
1002:       assertFalse(node0.isSwitch());
1003:       assertFalse(node0.isArrayLit());
1004:       assertFalse(node0.isHook());
1005:       assertFalse(node0.isDebugger());
1006:       assertFalse(node0.isRegExp());
1007:       assertEquals(221287, node0.getSourcePosition());
1008:       assertEquals(54, node0.getLineno());
1009:       assertFalse(node0.isGetterDef());
1010:       assertFalse(node0.isFor());
1011:       assertFalse(node0.isString());
1012:       assertFalse(node0.isGetProp());
1013:       assertFalse(node0.isTry());
1014:       assertFalse(node0.isCase());
1015:       assertTrue(node0.isNumber());
1016:       assertEquals(0, node0.getChildCount());
1017:       assertFalse(node0.isComma());
1018:       assertFalse(node0.isBreak());
1019:       assertFalse(node0.isNull());
1020:       assertFalse(node0.isStringKey());
1021:       assertFalse(node0.isParamList());
1022:       assertFalse(node0.isVoid());
1023:       assertFalse(node0.isExprResult());
1024:       assertFalse(node0.isCall());
1025:       assertFalse(node0.isName());
1026:       assertFalse(node0.isAdd());
1027:       assertFalse(node0.isVar());
1028:       assertFalse(node0.isTrue());
1029:       assertFalse(node0.isDefaultCase());
1030:       assertFalse(node0.isEmpty());
1031:       assertFalse(node0.isDo());
1032:       assertFalse(node0.isNew());
1033:       assertFalse(node1.isLabel());
1034:       assertFalse(node1.isOr());
1035:       assertFalse(node1.isAssignAdd());
1036:       assertFalse(node1.isReturn());
1037:       assertEquals(46, node1.getCharno());
1038:       assertFalse(node1.hasMoreThanOneChild());
1039:       assertFalse(node1.isTypeOf());
1040:       assertFalse(node1.isNumber());
1041:       assertFalse(node1.isContinue());
1042:       assertFalse(node1.isAssign());
1043:       assertFalse(node1.isDo());
1044:       assertFalse(node1.isDec());
1045:       assertFalse(node1.isWhile());
1046:       assertFalse(node1.isCast());
1047:       assertFalse(node1.isScript());
1048:       assertFalse(node1.isNot());
1049:       assertFalse(node1.isLabelName());
1050:       assertFalse(node1.isStringKey());
1051:       assertFalse(node1.isAnd());
1052:       assertFalse(node1.isParamList());
1053:       assertEquals(1935224878, node1.getSourcePosition());
1054:       assertFalse(node1.isGetProp());
1055:       assertFalse(node1.isComma());
1056:       assertFalse(node1.isObjectLit());
1057:       assertFalse(node1.isVar());
1058:       assertFalse(node1.isDefaultCase());
1059:       assertFalse(node1.isAdd());
1060:       assertFalse(node1.isVoid());
1061:       assertFalse(node1.isNew());
1062:       assertFalse(node1.isExprResult());
1063:       assertFalse(node1.isCall());
1064:       assertEquals(472467, node1.getLineno());
1065:       assertFalse(node1.isDelProp());
1066:       assertFalse(node1.isGetElem());
1067:       assertFalse(node1.isName());
1068:       assertFalse(node1.isBreak());
1069:       assertFalse(node1.isTrue());
1070:       assertFalse(node1.isNull());
1071:       assertTrue(node1.hasChildren());
1072:       assertEquals(1, node1.getChildCount());
1073:       assertFalse(node1.isIn());
1074:       assertTrue(node1.hasOneChild());
1075:       assertFalse(node1.isEmpty());
1076:       assertFalse(node1.isFor());
1077:       assertFalse(node1.isCase());
1078:       assertFalse(node1.isTry());
1079:       assertFalse(node1.isArrayLit());
1080:       assertEquals((-930), node1.getType());
1081:       assertFalse(node1.isDebugger());
1082:       assertFalse(node1.isFunction());
1083:       assertFalse(node1.isFalse());
1084:       assertFalse(node1.isString());
1085:       assertFalse(node1.isGetterDef());
1086:       assertFalse(node1.isSwitch());
1087:       assertFalse(node1.isCatch());
1088:       assertFalse(node1.isSetterDef());
1089:       assertFalse(node1.isInstanceOf());
1090:       assertFalse(node1.isWith());
1091:       assertFalse(node1.isThis());
1092:       assertFalse(node1.isThrow());
1093:       assertFalse(node1.isBlock());
1094:       assertFalse(node1.isHook());
1095:       assertFalse(node1.isRegExp());
1096:       assertFalse(node1.isInc());
1097:       assertFalse(node1.isNE());
1098:       assertFalse(node1.isIf());
1099:       assertFalse(node2.isWhile());
1100:       assertFalse(node2.isNew());
1101:       assertFalse(node2.isDo());
1102:       assertFalse(node2.isAdd());
1103:       assertFalse(node2.isNumber());
1104:       assertEquals((-1), node2.getSourcePosition());
1105:       assertFalse(node2.isOr());
1106:       assertFalse(node2.isGetElem());
1107:       assertFalse(node2.isNull());
1108:       assertFalse(node2.isCall());
1109:       assertFalse(node2.isName());
1110:       assertEquals((-1), node2.getLineno());
1111:       assertFalse(node2.isReturn());
1112:       assertFalse(node2.isBlock());
1113:       assertFalse(node2.isCatch());
1114:       assertFalse(node2.hasMoreThanOneChild());
1115:       assertFalse(node2.isTypeOf());
1116:       assertFalse(node2.isDec());
1117:       assertFalse(node2.isAssign());
1118:       assertFalse(node2.isWith());
1119:       assertFalse(node2.isAnd());
1120:       assertFalse(node2.isObjectLit());
1121:       assertFalse(node2.isDebugger());
1122:       assertFalse(node2.isNot());
1123:       assertFalse(node2.isThrow());
1124:       assertFalse(node2.isSetterDef());
1125:       assertFalse(node2.isCast());
1126:       assertFalse(node2.isFunction());
1127:       assertFalse(node2.isContinue());
1128:       assertFalse(node2.isFalse());
1129:       assertFalse(node2.isString());
1130:       assertFalse(node2.isInc());
1131:       assertFalse(node2.isSwitch());
1132:       assertFalse(node2.isCase());
1133:       assertFalse(node2.isIn());
1134:       assertEquals((-1), node2.getCharno());
1135:       assertFalse(node2.isGetterDef());
1136:       assertTrue(node2.hasOneChild());
1137:       assertFalse(node2.isDelProp());
1138:       assertEquals(54, node2.getType());
1139:       assertFalse(node2.isBreak());
1140:       assertFalse(node2.isIf());
1141:       assertFalse(node2.isFor());
1142:       assertFalse(node2.isNE());
1143:       assertFalse(node2.isGetProp());
1144:       assertEquals(1, node2.getChildCount());
1145:       assertFalse(node2.isInstanceOf());
1146:       assertFalse(node2.isHook());
1147:       assertTrue(node2.hasChildren());
1148:       assertFalse(node2.isThis());
1149:       assertFalse(node2.isComma());
1150:       assertFalse(node2.isRegExp());
1151:       assertFalse(node2.isDefaultCase());
1152:       assertFalse(node2.isScript());
1153:       assertFalse(node2.isExprResult());
1154:       assertFalse(node2.isVoid());
1155:       assertFalse(node2.isTry());
1156:       assertFalse(node2.isTrue());
1157:       assertFalse(node2.isStringKey());
1158:       assertFalse(node2.isEmpty());
1159:       assertFalse(node2.isParamList());
1160:       assertFalse(node2.isArrayLit());
1161:       assertFalse(node2.isLabelName());
1162:       assertFalse(node2.isLabel());
1163:       assertFalse(node2.isAssignAdd());
1164:       assertFalse(node2.isVar());
1165:       assertFalse(boolean0);
1166:       assertEquals(53, Node.INPUT_ID);
1167:       assertEquals(43, Node.IS_CONSTANT_NAME);
1168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1169:       assertEquals(47, Node.IS_DISPATCHER);
1170:       assertEquals(2, Node.POST_FLAG);
1171:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1172:       assertEquals(4095, Node.COLUMN_MASK);
1173:       assertEquals(48, Node.DIRECTIVES);
1174:       assertEquals(37, Node.OPT_ARG_NAME);
1175:       assertEquals(39, Node.EMPTY_BLOCK);
1176:       assertEquals(56, Node.CHANGE_TIME);
1177:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1178:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1179:       assertEquals(29, Node.JSDOC_INFO_PROP);
1180:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1181:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1182:       assertEquals(36, Node.QUOTED_PROP);
1183:       assertEquals(55, Node.INFERRED_FUNCTION);
1184:       assertEquals(52, Node.LENGTH);
1185:       assertEquals(8, Node.FLAG_NO_THROWS);
1186:       assertEquals(54, Node.SLASH_V);
1187:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1188:       assertEquals(57, Node.REFLECTED_OBJECT);
1189:       assertEquals(57, Node.LAST_PROP);
1190:       assertEquals(49, Node.DIRECT_EVAL);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(40, Node.ORIGINALNAME_PROP);
1193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1194:       assertEquals(46, Node.IS_NAMESPACE);
1195:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1196:       assertEquals(12, Node.COLUMN_BITS);
1197:       assertEquals(32, Node.INCRDECR_PROP);
1198:       assertEquals(50, Node.FREE_CALL);
1199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1200:       assertEquals(1, Node.DECR_FLAG);
1201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1202:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1203:       assertEquals(43, Node.IS_CONSTANT_NAME);
1204:       assertEquals(36, Node.QUOTED_PROP);
1205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1206:       assertEquals(55, Node.INFERRED_FUNCTION);
1207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1208:       assertEquals(29, Node.JSDOC_INFO_PROP);
1209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1210:       assertEquals(53, Node.INPUT_ID);
1211:       assertEquals(48, Node.DIRECTIVES);
1212:       assertEquals(37, Node.OPT_ARG_NAME);
1213:       assertEquals(8, Node.FLAG_NO_THROWS);
1214:       assertEquals(32, Node.INCRDECR_PROP);
1215:       assertEquals(56, Node.CHANGE_TIME);
1216:       assertEquals(12, Node.COLUMN_BITS);
1217:       assertEquals(49, Node.DIRECT_EVAL);
1218:       assertEquals(4095, Node.COLUMN_MASK);
1219:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1222:       assertEquals(54, Node.SLASH_V);
1223:       assertEquals(52, Node.LENGTH);
1224:       assertEquals(57, Node.LAST_PROP);
1225:       assertEquals(57, Node.REFLECTED_OBJECT);
1226:       assertEquals(1, Node.DECR_FLAG);
1227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1228:       assertEquals(50, Node.FREE_CALL);
1229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1230:       assertEquals(39, Node.EMPTY_BLOCK);
1231:       assertEquals(2, Node.POST_FLAG);
1232:       assertEquals(46, Node.IS_NAMESPACE);
1233:       assertEquals(47, Node.IS_DISPATCHER);
1234:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1235:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1236:       assertEquals(30, Node.VAR_ARGS_NAME);
1237:       assertEquals(40, Node.ORIGINALNAME_PROP);
1238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1239:       assertEquals(29, Node.JSDOC_INFO_PROP);
1240:       assertEquals(47, Node.IS_DISPATCHER);
1241:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1242:       assertEquals(2, Node.POST_FLAG);
1243:       assertEquals(37, Node.OPT_ARG_NAME);
1244:       assertEquals(43, Node.IS_CONSTANT_NAME);
1245:       assertEquals(56, Node.CHANGE_TIME);
1246:       assertEquals(46, Node.IS_NAMESPACE);
1247:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1249:       assertEquals(30, Node.VAR_ARGS_NAME);
1250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1251:       assertEquals(36, Node.QUOTED_PROP);
1252:       assertEquals(55, Node.INFERRED_FUNCTION);
1253:       assertEquals(53, Node.INPUT_ID);
1254:       assertEquals(39, Node.EMPTY_BLOCK);
1255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1256:       assertEquals(57, Node.LAST_PROP);
1257:       assertEquals(50, Node.FREE_CALL);
1258:       assertEquals(40, Node.ORIGINALNAME_PROP);
1259:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1260:       assertEquals(8, Node.FLAG_NO_THROWS);
1261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1262:       assertEquals(52, Node.LENGTH);
1263:       assertEquals(48, Node.DIRECTIVES);
1264:       assertEquals(54, Node.SLASH_V);
1265:       assertEquals(57, Node.REFLECTED_OBJECT);
1266:       assertEquals(1, Node.DECR_FLAG);
1267:       assertEquals(49, Node.DIRECT_EVAL);
1268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1269:       assertEquals(4095, Node.COLUMN_MASK);
1270:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1272:       assertEquals(12, Node.COLUMN_BITS);
1273:       assertEquals(32, Node.INCRDECR_PROP);
1274:       
1275:       boolean boolean1 = node2.isFalse();
1276:       assertFalse(node0.equals((Object)node2));
1277:       assertFalse(node0.equals((Object)node1));
1278:       assertFalse(node1.equals((Object)node2));
1279:       assertFalse(node1.equals((Object)node0));
1280:       assertFalse(node2.equals((Object)node0));
1281:       assertFalse(node2.equals((Object)node1));
1282:       assertTrue(boolean1 == boolean0);
1283:       assertFalse(node0.isReturn());
1284:       assertFalse(node0.isAssignAdd());
1285:       assertFalse(node0.isContinue());
1286:       assertFalse(node0.hasMoreThanOneChild());
1287:       assertFalse(node0.isLabel());
1288:       assertFalse(node0.isOr());
1289:       assertEquals(39, node0.getType());
1290:       assertFalse(node0.isDec());
1291:       assertFalse(node0.isTypeOf());
1292:       assertFalse(node0.isGetElem());
1293:       assertFalse(node0.isLabelName());
1294:       assertFalse(node0.isBlock());
1295:       assertFalse(node0.isAssign());
1296:       assertFalse(node0.hasChildren());
1297:       assertFalse(node0.isScript());
1298:       assertFalse(node0.isWhile());
1299:       assertFalse(node0.hasOneChild());
1300:       assertFalse(node0.isInstanceOf());
1301:       assertFalse(node0.isCatch());
1302:       assertFalse(node0.isObjectLit());
1303:       assertFalse(node0.isThis());
1304:       assertFalse(node0.isNot());
1305:       assertFalse(node0.isWith());
1306:       assertFalse(node0.isAnd());
1307:       assertEquals(103, node0.getCharno());
1308:       assertFalse(node0.isCast());
1309:       assertFalse(node0.isThrow());
1310:       assertFalse(node0.isFalse());
1311:       assertFalse(node0.isFunction());
1312:       assertFalse(node0.isSetterDef());
1313:       assertFalse(node0.isInc());
1314:       assertFalse(node0.isIn());
1315:       assertFalse(node0.isDelProp());
1316:       assertFalse(node0.isIf());
1317:       assertFalse(node0.isNE());
1318:       assertFalse(node0.isSwitch());
1319:       assertFalse(node0.isArrayLit());
1320:       assertFalse(node0.isHook());
1321:       assertFalse(node0.isDebugger());
1322:       assertFalse(node0.isRegExp());
1323:       assertEquals(221287, node0.getSourcePosition());
1324:       assertEquals(54, node0.getLineno());
1325:       assertFalse(node0.isGetterDef());
1326:       assertFalse(node0.isFor());
1327:       assertFalse(node0.isString());
1328:       assertFalse(node0.isGetProp());
1329:       assertFalse(node0.isTry());
1330:       assertFalse(node0.isCase());
1331:       assertTrue(node0.isNumber());
1332:       assertEquals(0, node0.getChildCount());
1333:       assertFalse(node0.isComma());
1334:       assertFalse(node0.isBreak());
1335:       assertFalse(node0.isNull());
1336:       assertFalse(node0.isStringKey());
1337:       assertFalse(node0.isParamList());
1338:       assertFalse(node0.isVoid());
1339:       assertFalse(node0.isExprResult());
1340:       assertFalse(node0.isCall());
1341:       assertFalse(node0.isName());
1342:       assertFalse(node0.isAdd());
1343:       assertFalse(node0.isVar());
1344:       assertFalse(node0.isTrue());
1345:       assertFalse(node0.isDefaultCase());
1346:       assertFalse(node0.isEmpty());
1347:       assertFalse(node0.isDo());
1348:       assertFalse(node0.isNew());
1349:       assertFalse(node1.isLabel());
1350:       assertFalse(node1.isOr());
1351:       assertFalse(node1.isAssignAdd());
1352:       assertFalse(node1.isReturn());
1353:       assertEquals(46, node1.getCharno());
1354:       assertFalse(node1.hasMoreThanOneChild());
1355:       assertFalse(node1.isTypeOf());
1356:       assertFalse(node1.isNumber());
1357:       assertFalse(node1.isContinue());
1358:       assertFalse(node1.isAssign());
1359:       assertFalse(node1.isDo());
1360:       assertFalse(node1.isDec());
1361:       assertFalse(node1.isWhile());
1362:       assertFalse(node1.isCast());
1363:       assertFalse(node1.isScript());
1364:       assertFalse(node1.isNot());
1365:       assertFalse(node1.isLabelName());
1366:       assertFalse(node1.isStringKey());
1367:       assertFalse(node1.isAnd());
1368:       assertFalse(node1.isParamList());
1369:       assertEquals(1935224878, node1.getSourcePosition());
1370:       assertFalse(node1.isGetProp());
1371:       assertFalse(node1.isComma());
1372:       assertFalse(node1.isObjectLit());
1373:       assertFalse(node1.isVar());
1374:       assertFalse(node1.isDefaultCase());
1375:       assertFalse(node1.isAdd());
1376:       assertFalse(node1.isVoid());
1377:       assertFalse(node1.isNew());
1378:       assertFalse(node1.isExprResult());
1379:       assertFalse(node1.isCall());
1380:       assertEquals(472467, node1.getLineno());
1381:       assertFalse(node1.isDelProp());
1382:       assertFalse(node1.isGetElem());
1383:       assertFalse(node1.isName());
1384:       assertFalse(node1.isBreak());
1385:       assertFalse(node1.isTrue());
1386:       assertFalse(node1.isNull());
1387:       assertTrue(node1.hasChildren());
1388:       assertEquals(1, node1.getChildCount());
1389:       assertFalse(node1.isIn());
1390:       assertTrue(node1.hasOneChild());
1391:       assertFalse(node1.isEmpty());
1392:       assertFalse(node1.isFor());
1393:       assertFalse(node1.isCase());
1394:       assertFalse(node1.isTry());
1395:       assertFalse(node1.isArrayLit());
1396:       assertEquals((-930), node1.getType());
1397:       assertFalse(node1.isDebugger());
1398:       assertFalse(node1.isFunction());
1399:       assertFalse(node1.isFalse());
1400:       assertFalse(node1.isString());
1401:       assertFalse(node1.isGetterDef());
1402:       assertFalse(node1.isSwitch());
1403:       assertFalse(node1.isCatch());
1404:       assertFalse(node1.isSetterDef());
1405:       assertFalse(node1.isInstanceOf());
1406:       assertFalse(node1.isWith());
1407:       assertFalse(node1.isThis());
1408:       assertFalse(node1.isThrow());
1409:       assertFalse(node1.isBlock());
1410:       assertFalse(node1.isHook());
1411:       assertFalse(node1.isRegExp());
1412:       assertFalse(node1.isInc());
1413:       assertFalse(node1.isNE());
1414:       assertFalse(node1.isIf());
1415:       assertFalse(node2.isWhile());
1416:       assertFalse(node2.isNew());
1417:       assertFalse(node2.isDo());
1418:       assertFalse(node2.isAdd());
1419:       assertFalse(node2.isNumber());
1420:       assertEquals((-1), node2.getSourcePosition());
1421:       assertFalse(node2.isOr());
1422:       assertFalse(node2.isGetElem());
1423:       assertFalse(node2.isNull());
1424:       assertFalse(node2.isCall());
1425:       assertFalse(node2.isName());
1426:       assertEquals((-1), node2.getLineno());
1427:       assertFalse(node2.isReturn());
1428:       assertFalse(node2.isBlock());
1429:       assertFalse(node2.isCatch());
1430:       assertFalse(node2.hasMoreThanOneChild());
1431:       assertFalse(node2.isTypeOf());
1432:       assertFalse(node2.isDec());
1433:       assertFalse(node2.isAssign());
1434:       assertFalse(node2.isWith());
1435:       assertFalse(node2.isAnd());
1436:       assertFalse(node2.isObjectLit());
1437:       assertFalse(node2.isDebugger());
1438:       assertFalse(node2.isNot());
1439:       assertFalse(node2.isThrow());
1440:       assertFalse(node2.isSetterDef());
1441:       assertFalse(node2.isCast());
1442:       assertFalse(node2.isFunction());
1443:       assertFalse(node2.isContinue());
1444:       assertFalse(node2.isFalse());
1445:       assertFalse(node2.isString());
1446:       assertFalse(node2.isInc());
1447:       assertFalse(node2.isSwitch());
1448:       assertFalse(node2.isCase());
1449:       assertFalse(node2.isIn());
1450:       assertEquals((-1), node2.getCharno());
1451:       assertFalse(node2.isGetterDef());
1452:       assertTrue(node2.hasOneChild());
1453:       assertFalse(node2.isDelProp());
1454:       assertEquals(54, node2.getType());
1455:       assertFalse(node2.isBreak());
1456:       assertFalse(node2.isIf());
1457:       assertFalse(node2.isFor());
1458:       assertFalse(node2.isNE());
1459:       assertFalse(node2.isGetProp());
1460:       assertEquals(1, node2.getChildCount());
1461:       assertFalse(node2.isInstanceOf());
1462:       assertFalse(node2.isHook());
1463:       assertTrue(node2.hasChildren());
1464:       assertFalse(node2.isThis());
1465:       assertFalse(node2.isComma());
1466:       assertFalse(node2.isRegExp());
1467:       assertFalse(node2.isDefaultCase());
1468:       assertFalse(node2.isScript());
1469:       assertFalse(node2.isExprResult());
1470:       assertFalse(node2.isVoid());
1471:       assertFalse(node2.isTry());
1472:       assertFalse(node2.isTrue());
1473:       assertFalse(node2.isStringKey());
1474:       assertFalse(node2.isEmpty());
1475:       assertFalse(node2.isParamList());
1476:       assertFalse(node2.isArrayLit());
1477:       assertFalse(node2.isLabelName());
1478:       assertFalse(node2.isLabel());
1479:       assertFalse(node2.isAssignAdd());
1480:       assertFalse(node2.isVar());
1481:       assertFalse(boolean1);
1482:       assertEquals(53, Node.INPUT_ID);
1483:       assertEquals(43, Node.IS_CONSTANT_NAME);
1484:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1485:       assertEquals(47, Node.IS_DISPATCHER);
1486:       assertEquals(2, Node.POST_FLAG);
1487:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1488:       assertEquals(4095, Node.COLUMN_MASK);
1489:       assertEquals(48, Node.DIRECTIVES);
1490:       assertEquals(37, Node.OPT_ARG_NAME);
1491:       assertEquals(39, Node.EMPTY_BLOCK);
1492:       assertEquals(56, Node.CHANGE_TIME);
1493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1494:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1495:       assertEquals(29, Node.JSDOC_INFO_PROP);
1496:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1498:       assertEquals(36, Node.QUOTED_PROP);
1499:       assertEquals(55, Node.INFERRED_FUNCTION);
1500:       assertEquals(52, Node.LENGTH);
1501:       assertEquals(8, Node.FLAG_NO_THROWS);
1502:       assertEquals(54, Node.SLASH_V);
1503:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1504:       assertEquals(57, Node.REFLECTED_OBJECT);
1505:       assertEquals(57, Node.LAST_PROP);
1506:       assertEquals(49, Node.DIRECT_EVAL);
1507:       assertEquals(30, Node.VAR_ARGS_NAME);
1508:       assertEquals(40, Node.ORIGINALNAME_PROP);
1509:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1510:       assertEquals(46, Node.IS_NAMESPACE);
1511:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1512:       assertEquals(12, Node.COLUMN_BITS);
1513:       assertEquals(32, Node.INCRDECR_PROP);
1514:       assertEquals(50, Node.FREE_CALL);
1515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1516:       assertEquals(1, Node.DECR_FLAG);
1517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1519:       assertEquals(43, Node.IS_CONSTANT_NAME);
1520:       assertEquals(36, Node.QUOTED_PROP);
1521:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1522:       assertEquals(55, Node.INFERRED_FUNCTION);
1523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1524:       assertEquals(29, Node.JSDOC_INFO_PROP);
1525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1526:       assertEquals(53, Node.INPUT_ID);
1527:       assertEquals(48, Node.DIRECTIVES);
1528:       assertEquals(37, Node.OPT_ARG_NAME);
1529:       assertEquals(8, Node.FLAG_NO_THROWS);
1530:       assertEquals(32, Node.INCRDECR_PROP);
1531:       assertEquals(56, Node.CHANGE_TIME);
1532:       assertEquals(12, Node.COLUMN_BITS);
1533:       assertEquals(49, Node.DIRECT_EVAL);
1534:       assertEquals(4095, Node.COLUMN_MASK);
1535:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1536:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1537:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1538:       assertEquals(54, Node.SLASH_V);
1539:       assertEquals(52, Node.LENGTH);
1540:       assertEquals(57, Node.LAST_PROP);
1541:       assertEquals(57, Node.REFLECTED_OBJECT);
1542:       assertEquals(1, Node.DECR_FLAG);
1543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1544:       assertEquals(50, Node.FREE_CALL);
1545:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1546:       assertEquals(39, Node.EMPTY_BLOCK);
1547:       assertEquals(2, Node.POST_FLAG);
1548:       assertEquals(46, Node.IS_NAMESPACE);
1549:       assertEquals(47, Node.IS_DISPATCHER);
1550:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1551:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1552:       assertEquals(30, Node.VAR_ARGS_NAME);
1553:       assertEquals(40, Node.ORIGINALNAME_PROP);
1554:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1555:       assertEquals(29, Node.JSDOC_INFO_PROP);
1556:       assertEquals(47, Node.IS_DISPATCHER);
1557:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1558:       assertEquals(2, Node.POST_FLAG);
1559:       assertEquals(37, Node.OPT_ARG_NAME);
1560:       assertEquals(43, Node.IS_CONSTANT_NAME);
1561:       assertEquals(56, Node.CHANGE_TIME);
1562:       assertEquals(46, Node.IS_NAMESPACE);
1563:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1564:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1565:       assertEquals(30, Node.VAR_ARGS_NAME);
1566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1567:       assertEquals(36, Node.QUOTED_PROP);
1568:       assertEquals(55, Node.INFERRED_FUNCTION);
1569:       assertEquals(53, Node.INPUT_ID);
1570:       assertEquals(39, Node.EMPTY_BLOCK);
1571:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1572:       assertEquals(57, Node.LAST_PROP);
1573:       assertEquals(50, Node.FREE_CALL);
1574:       assertEquals(40, Node.ORIGINALNAME_PROP);
1575:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1576:       assertEquals(8, Node.FLAG_NO_THROWS);
1577:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1578:       assertEquals(52, Node.LENGTH);
1579:       assertEquals(48, Node.DIRECTIVES);
1580:       assertEquals(54, Node.SLASH_V);
1581:       assertEquals(57, Node.REFLECTED_OBJECT);
1582:       assertEquals(1, Node.DECR_FLAG);
1583:       assertEquals(49, Node.DIRECT_EVAL);
1584:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1585:       assertEquals(4095, Node.COLUMN_MASK);
1586:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1587:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1588:       assertEquals(12, Node.COLUMN_BITS);
1589:       assertEquals(32, Node.INCRDECR_PROP);
1590:       
1591:       boolean boolean2 = node0.isWhile();
1592:       assertFalse(node0.equals((Object)node2));
1593:       assertFalse(node0.equals((Object)node1));
1594:       assertTrue(boolean2 == boolean1);
1595:       assertTrue(boolean2 == boolean0);
1596:       assertFalse(node0.isReturn());
1597:       assertFalse(node0.isAssignAdd());
1598:       assertFalse(node0.isContinue());
1599:       assertFalse(node0.hasMoreThanOneChild());
1600:       assertFalse(node0.isLabel());
1601:       assertFalse(node0.isOr());
1602:       assertEquals(39, node0.getType());
1603:       assertFalse(node0.isDec());
1604:       assertFalse(node0.isTypeOf());
1605:       assertFalse(node0.isGetElem());
1606:       assertFalse(node0.isLabelName());
1607:       assertFalse(node0.isBlock());
1608:       assertFalse(node0.isAssign());
1609:       assertFalse(node0.hasChildren());
1610:       assertFalse(node0.isScript());
1611:       assertFalse(node0.isWhile());
1612:       assertFalse(node0.hasOneChild());
1613:       assertFalse(node0.isInstanceOf());
1614:       assertFalse(node0.isCatch());
1615:       assertFalse(node0.isObjectLit());
1616:       assertFalse(node0.isThis());
1617:       assertFalse(node0.isNot());
1618:       assertFalse(node0.isWith());
1619:       assertFalse(node0.isAnd());
1620:       assertEquals(103, node0.getCharno());
1621:       assertFalse(node0.isCast());
1622:       assertFalse(node0.isThrow());
1623:       assertFalse(node0.isFalse());
1624:       assertFalse(node0.isFunction());
1625:       assertFalse(node0.isSetterDef());
1626:       assertFalse(node0.isInc());
1627:       assertFalse(node0.isIn());
1628:       assertFalse(node0.isDelProp());
1629:       assertFalse(node0.isIf());
1630:       assertFalse(node0.isNE());
1631:       assertFalse(node0.isSwitch());
1632:       assertFalse(node0.isArrayLit());
1633:       assertFalse(node0.isHook());
1634:       assertFalse(node0.isDebugger());
1635:       assertFalse(node0.isRegExp());
1636:       assertEquals(221287, node0.getSourcePosition());
1637:       assertEquals(54, node0.getLineno());
1638:       assertFalse(node0.isGetterDef());
1639:       assertFalse(node0.isFor());
1640:       assertFalse(node0.isString());
1641:       assertFalse(node0.isGetProp());
1642:       assertFalse(node0.isTry());
1643:       assertFalse(node0.isCase());
1644:       assertTrue(node0.isNumber());
1645:       assertEquals(0, node0.getChildCount());
1646:       assertFalse(node0.isComma());
1647:       assertFalse(node0.isBreak());
1648:       assertFalse(node0.isNull());
1649:       assertFalse(node0.isStringKey());
1650:       assertFalse(node0.isParamList());
1651:       assertFalse(node0.isVoid());
1652:       assertFalse(node0.isExprResult());
1653:       assertFalse(node0.isCall());
1654:       assertFalse(node0.isName());
1655:       assertFalse(node0.isAdd());
1656:       assertFalse(node0.isVar());
1657:       assertFalse(node0.isTrue());
1658:       assertFalse(node0.isDefaultCase());
1659:       assertFalse(node0.isEmpty());
1660:       assertFalse(node0.isDo());
1661:       assertFalse(node0.isNew());
1662:       assertFalse(boolean2);
1663:       assertEquals(53, Node.INPUT_ID);
1664:       assertEquals(43, Node.IS_CONSTANT_NAME);
1665:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1666:       assertEquals(47, Node.IS_DISPATCHER);
1667:       assertEquals(2, Node.POST_FLAG);
1668:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1669:       assertEquals(4095, Node.COLUMN_MASK);
1670:       assertEquals(48, Node.DIRECTIVES);
1671:       assertEquals(37, Node.OPT_ARG_NAME);
1672:       assertEquals(39, Node.EMPTY_BLOCK);
1673:       assertEquals(56, Node.CHANGE_TIME);
1674:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1675:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1676:       assertEquals(29, Node.JSDOC_INFO_PROP);
1677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1678:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1679:       assertEquals(36, Node.QUOTED_PROP);
1680:       assertEquals(55, Node.INFERRED_FUNCTION);
1681:       assertEquals(52, Node.LENGTH);
1682:       assertEquals(8, Node.FLAG_NO_THROWS);
1683:       assertEquals(54, Node.SLASH_V);
1684:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1685:       assertEquals(57, Node.REFLECTED_OBJECT);
1686:       assertEquals(57, Node.LAST_PROP);
1687:       assertEquals(49, Node.DIRECT_EVAL);
1688:       assertEquals(30, Node.VAR_ARGS_NAME);
1689:       assertEquals(40, Node.ORIGINALNAME_PROP);
1690:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1691:       assertEquals(46, Node.IS_NAMESPACE);
1692:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1693:       assertEquals(12, Node.COLUMN_BITS);
1694:       assertEquals(32, Node.INCRDECR_PROP);
1695:       assertEquals(50, Node.FREE_CALL);
1696:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1697:       assertEquals(1, Node.DECR_FLAG);
1698:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1699:       
1700:       Iterable<Node> iterable0 = node0.children();
1701:       assertFalse(node0.equals((Object)node2));
1702:       assertFalse(node0.equals((Object)node1));
1703:       assertFalse(iterable0.contains(node2));
1704:       assertFalse(node0.isReturn());
1705:       assertFalse(node0.isAssignAdd());
1706:       assertFalse(node0.isContinue());
1707:       assertFalse(node0.hasMoreThanOneChild());
1708:       assertFalse(node0.isLabel());
1709:       assertFalse(node0.isOr());
1710:       assertEquals(39, node0.getType());
1711:       assertFalse(node0.isDec());
1712:       assertFalse(node0.isTypeOf());
1713:       assertFalse(node0.isGetElem());
1714:       assertFalse(node0.isLabelName());
1715:       assertFalse(node0.isBlock());
1716:       assertFalse(node0.isAssign());
1717:       assertFalse(node0.hasChildren());
1718:       assertFalse(node0.isScript());
1719:       assertFalse(node0.isWhile());
1720:       assertFalse(node0.hasOneChild());
1721:       assertFalse(node0.isInstanceOf());
1722:       assertFalse(node0.isCatch());
1723:       assertFalse(node0.isObjectLit());
1724:       assertFalse(node0.isThis());
1725:       assertFalse(node0.isNot());
1726:       assertFalse(node0.isWith());
1727:       assertFalse(node0.isAnd());
1728:       assertEquals(103, node0.getCharno());
1729:       assertFalse(node0.isCast());
1730:       assertFalse(node0.isThrow());
1731:       assertFalse(node0.isFalse());
1732:       assertFalse(node0.isFunction());
1733:       assertFalse(node0.isSetterDef());
1734:       assertFalse(node0.isInc());
1735:       assertFalse(node0.isIn());
1736:       assertFalse(node0.isDelProp());
1737:       assertFalse(node0.isIf());
1738:       assertFalse(node0.isNE());
1739:       assertFalse(node0.isSwitch());
1740:       assertFalse(node0.isArrayLit());
1741:       assertFalse(node0.isHook());
1742:       assertFalse(node0.isDebugger());
1743:       assertFalse(node0.isRegExp());
1744:       assertEquals(221287, node0.getSourcePosition());
1745:       assertEquals(54, node0.getLineno());
1746:       assertFalse(node0.isGetterDef());
1747:       assertFalse(node0.isFor());
1748:       assertFalse(node0.isString());
1749:       assertFalse(node0.isGetProp());
1750:       assertFalse(node0.isTry());
1751:       assertFalse(node0.isCase());
1752:       assertTrue(node0.isNumber());
1753:       assertEquals(0, node0.getChildCount());
1754:       assertFalse(node0.isComma());
1755:       assertFalse(node0.isBreak());
1756:       assertFalse(node0.isNull());
1757:       assertFalse(node0.isStringKey());
1758:       assertFalse(node0.isParamList());
1759:       assertFalse(node0.isVoid());
1760:       assertFalse(node0.isExprResult());
1761:       assertFalse(node0.isCall());
1762:       assertFalse(node0.isName());
1763:       assertFalse(node0.isAdd());
1764:       assertFalse(node0.isVar());
1765:       assertFalse(node0.isTrue());
1766:       assertFalse(node0.isDefaultCase());
1767:       assertFalse(node0.isEmpty());
1768:       assertFalse(node0.isDo());
1769:       assertFalse(node0.isNew());
1770:       assertNotNull(iterable0);
1771:       assertEquals(53, Node.INPUT_ID);
1772:       assertEquals(43, Node.IS_CONSTANT_NAME);
1773:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1774:       assertEquals(47, Node.IS_DISPATCHER);
1775:       assertEquals(2, Node.POST_FLAG);
1776:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1777:       assertEquals(4095, Node.COLUMN_MASK);
1778:       assertEquals(48, Node.DIRECTIVES);
1779:       assertEquals(37, Node.OPT_ARG_NAME);
1780:       assertEquals(39, Node.EMPTY_BLOCK);
1781:       assertEquals(56, Node.CHANGE_TIME);
1782:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1783:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1784:       assertEquals(29, Node.JSDOC_INFO_PROP);
1785:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1786:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1787:       assertEquals(36, Node.QUOTED_PROP);
1788:       assertEquals(55, Node.INFERRED_FUNCTION);
1789:       assertEquals(52, Node.LENGTH);
1790:       assertEquals(8, Node.FLAG_NO_THROWS);
1791:       assertEquals(54, Node.SLASH_V);
1792:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1793:       assertEquals(57, Node.REFLECTED_OBJECT);
1794:       assertEquals(57, Node.LAST_PROP);
1795:       assertEquals(49, Node.DIRECT_EVAL);
1796:       assertEquals(30, Node.VAR_ARGS_NAME);
1797:       assertEquals(40, Node.ORIGINALNAME_PROP);
1798:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1799:       assertEquals(46, Node.IS_NAMESPACE);
1800:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1801:       assertEquals(12, Node.COLUMN_BITS);
1802:       assertEquals(32, Node.INCRDECR_PROP);
1803:       assertEquals(50, Node.FREE_CALL);
1804:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1805:       assertEquals(1, Node.DECR_FLAG);
1806:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1807:       
1808:       int int0 = node1.getIndexOfChild(node2);
1809:       assertFalse(node0.equals((Object)node2));
1810:       assertFalse(node0.equals((Object)node1));
1811:       assertFalse(node1.equals((Object)node2));
1812:       assertFalse(node1.equals((Object)node0));
1813:       assertFalse(node2.equals((Object)node0));
1814:       assertFalse(node2.equals((Object)node1));
1815:       assertFalse(node0.isReturn());
1816:       assertFalse(node0.isAssignAdd());
1817:       assertFalse(node0.isContinue());
1818:       assertFalse(node0.hasMoreThanOneChild());
1819:       assertFalse(node0.isLabel());
1820:       assertFalse(node0.isOr());
1821:       assertEquals(39, node0.getType());
1822:       assertFalse(node0.isDec());
1823:       assertFalse(node0.isTypeOf());
1824:       assertFalse(node0.isGetElem());
1825:       assertFalse(node0.isLabelName());
1826:       assertFalse(node0.isBlock());
1827:       assertFalse(node0.isAssign());
1828:       assertFalse(node0.hasChildren());
1829:       assertFalse(node0.isScript());
1830:       assertFalse(node0.isWhile());
1831:       assertFalse(node0.hasOneChild());
1832:       assertFalse(node0.isInstanceOf());
1833:       assertFalse(node0.isCatch());
1834:       assertFalse(node0.isObjectLit());
1835:       assertFalse(node0.isThis());
1836:       assertFalse(node0.isNot());
1837:       assertFalse(node0.isWith());
1838:       assertFalse(node0.isAnd());
1839:       assertEquals(103, node0.getCharno());
1840:       assertFalse(node0.isCast());
1841:       assertFalse(node0.isThrow());
1842:       assertFalse(node0.isFalse());
1843:       assertFalse(node0.isFunction());
1844:       assertFalse(node0.isSetterDef());
1845:       assertFalse(node0.isInc());
1846:       assertFalse(node0.isIn());
1847:       assertFalse(node0.isDelProp());
1848:       assertFalse(node0.isIf());
1849:       assertFalse(node0.isNE());
1850:       assertFalse(node0.isSwitch());
1851:       assertFalse(node0.isArrayLit());
1852:       assertFalse(node0.isHook());
1853:       assertFalse(node0.isDebugger());
1854:       assertFalse(node0.isRegExp());
1855:       assertEquals(221287, node0.getSourcePosition());
1856:       assertEquals(54, node0.getLineno());
1857:       assertFalse(node0.isGetterDef());
1858:       assertFalse(node0.isFor());
1859:       assertFalse(node0.isString());
1860:       assertFalse(node0.isGetProp());
1861:       assertFalse(node0.isTry());
1862:       assertFalse(node0.isCase());
1863:       assertTrue(node0.isNumber());
1864:       assertEquals(0, node0.getChildCount());
1865:       assertFalse(node0.isComma());
1866:       assertFalse(node0.isBreak());
1867:       assertFalse(node0.isNull());
1868:       assertFalse(node0.isStringKey());
1869:       assertFalse(node0.isParamList());
1870:       assertFalse(node0.isVoid());
1871:       assertFalse(node0.isExprResult());
1872:       assertFalse(node0.isCall());
1873:       assertFalse(node0.isName());
1874:       assertFalse(node0.isAdd());
1875:       assertFalse(node0.isVar());
1876:       assertFalse(node0.isTrue());
1877:       assertFalse(node0.isDefaultCase());
1878:       assertFalse(node0.isEmpty());
1879:       assertFalse(node0.isDo());
1880:       assertFalse(node0.isNew());
1881:       assertFalse(node1.isLabel());
1882:       assertFalse(node1.isOr());
1883:       assertFalse(node1.isAssignAdd());
1884:       assertFalse(node1.isReturn());
1885:       assertEquals(46, node1.getCharno());
1886:       assertFalse(node1.hasMoreThanOneChild());
1887:       assertFalse(node1.isTypeOf());
1888:       assertFalse(node1.isNumber());
1889:       assertFalse(node1.isContinue());
1890:       assertFalse(node1.isAssign());
1891:       assertFalse(node1.isDo());
1892:       assertFalse(node1.isDec());
1893:       assertFalse(node1.isWhile());
1894:       assertFalse(node1.isCast());
1895:       assertFalse(node1.isScript());
1896:       assertFalse(node1.isNot());
1897:       assertFalse(node1.isLabelName());
1898:       assertFalse(node1.isStringKey());
1899:       assertFalse(node1.isAnd());
1900:       assertFalse(node1.isParamList());
1901:       assertEquals(1935224878, node1.getSourcePosition());
1902:       assertFalse(node1.isGetProp());
1903:       assertFalse(node1.isComma());
1904:       assertFalse(node1.isObjectLit());
1905:       assertFalse(node1.isVar());
1906:       assertFalse(node1.isDefaultCase());
1907:       assertFalse(node1.isAdd());
1908:       assertFalse(node1.isVoid());
1909:       assertFalse(node1.isNew());
1910:       assertFalse(node1.isExprResult());
1911:       assertFalse(node1.isCall());
1912:       assertEquals(472467, node1.getLineno());
1913:       assertFalse(node1.isDelProp());
1914:       assertFalse(node1.isGetElem());
1915:       assertFalse(node1.isName());
1916:       assertFalse(node1.isBreak());
1917:       assertFalse(node1.isTrue());
1918:       assertFalse(node1.isNull());
1919:       assertTrue(node1.hasChildren());
1920:       assertEquals(1, node1.getChildCount());
1921:       assertFalse(node1.isIn());
1922:       assertTrue(node1.hasOneChild());
1923:       assertFalse(node1.isEmpty());
1924:       assertFalse(node1.isFor());
1925:       assertFalse(node1.isCase());
1926:       assertFalse(node1.isTry());
1927:       assertFalse(node1.isArrayLit());
1928:       assertEquals((-930), node1.getType());
1929:       assertFalse(node1.isDebugger());
1930:       assertFalse(node1.isFunction());
1931:       assertFalse(node1.isFalse());
1932:       assertFalse(node1.isString());
1933:       assertFalse(node1.isGetterDef());
1934:       assertFalse(node1.isSwitch());
1935:       assertFalse(node1.isCatch());
1936:       assertFalse(node1.isSetterDef());
1937:       assertFalse(node1.isInstanceOf());
1938:       assertFalse(node1.isWith());
1939:       assertFalse(node1.isThis());
1940:       assertFalse(node1.isThrow());
1941:       assertFalse(node1.isBlock());
1942:       assertFalse(node1.isHook());
1943:       assertFalse(node1.isRegExp());
1944:       assertFalse(node1.isInc());
1945:       assertFalse(node1.isNE());
1946:       assertFalse(node1.isIf());
1947:       assertFalse(node2.isWhile());
1948:       assertFalse(node2.isNew());
1949:       assertFalse(node2.isDo());
1950:       assertFalse(node2.isAdd());
1951:       assertFalse(node2.isNumber());
1952:       assertEquals((-1), node2.getSourcePosition());
1953:       assertFalse(node2.isOr());
1954:       assertFalse(node2.isGetElem());
1955:       assertFalse(node2.isNull());
1956:       assertFalse(node2.isCall());
1957:       assertFalse(node2.isName());
1958:       assertEquals((-1), node2.getLineno());
1959:       assertFalse(node2.isReturn());
1960:       assertFalse(node2.isBlock());
1961:       assertFalse(node2.isCatch());
1962:       assertFalse(node2.hasMoreThanOneChild());
1963:       assertFalse(node2.isTypeOf());
1964:       assertFalse(node2.isDec());
1965:       assertFalse(node2.isAssign());
1966:       assertFalse(node2.isWith());
1967:       assertFalse(node2.isAnd());
1968:       assertFalse(node2.isObjectLit());
1969:       assertFalse(node2.isDebugger());
1970:       assertFalse(node2.isNot());
1971:       assertFalse(node2.isThrow());
1972:       assertFalse(node2.isSetterDef());
1973:       assertFalse(node2.isCast());
1974:       assertFalse(node2.isFunction());
1975:       assertFalse(node2.isContinue());
1976:       assertFalse(node2.isFalse());
1977:       assertFalse(node2.isString());
1978:       assertFalse(node2.isInc());
1979:       assertFalse(node2.isSwitch());
1980:       assertFalse(node2.isCase());
1981:       assertFalse(node2.isIn());
1982:       assertEquals((-1), node2.getCharno());
1983:       assertFalse(node2.isGetterDef());
1984:       assertTrue(node2.hasOneChild());
1985:       assertFalse(node2.isDelProp());
1986:       assertEquals(54, node2.getType());
1987:       assertFalse(node2.isBreak());
1988:       assertFalse(node2.isIf());
1989:       assertFalse(node2.isFor());
1990:       assertFalse(node2.isNE());
1991:       assertFalse(node2.isGetProp());
1992:       assertEquals(1, node2.getChildCount());
1993:       assertFalse(node2.isInstanceOf());
1994:       assertFalse(node2.isHook());
1995:       assertTrue(node2.hasChildren());
1996:       assertFalse(node2.isThis());
1997:       assertFalse(node2.isComma());
1998:       assertFalse(node2.isRegExp());
1999:       assertFalse(node2.isDefaultCase());
2000:       assertFalse(node2.isScript());
2001:       assertFalse(node2.isExprResult());
2002:       assertFalse(node2.isVoid());
2003:       assertFalse(node2.isTry());
2004:       assertFalse(node2.isTrue());
2005:       assertFalse(node2.isStringKey());
2006:       assertFalse(node2.isEmpty());
2007:       assertFalse(node2.isParamList());
2008:       assertFalse(node2.isArrayLit());
2009:       assertFalse(node2.isLabelName());
2010:       assertFalse(node2.isLabel());
2011:       assertFalse(node2.isAssignAdd());
2012:       assertFalse(node2.isVar());
2013:       assertEquals((-1), int0);
2014:       assertEquals(53, Node.INPUT_ID);
2015:       assertEquals(43, Node.IS_CONSTANT_NAME);
2016:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2017:       assertEquals(47, Node.IS_DISPATCHER);
2018:       assertEquals(2, Node.POST_FLAG);
2019:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2020:       assertEquals(4095, Node.COLUMN_MASK);
2021:       assertEquals(48, Node.DIRECTIVES);
2022:       assertEquals(37, Node.OPT_ARG_NAME);
2023:       assertEquals(39, Node.EMPTY_BLOCK);
2024:       assertEquals(56, Node.CHANGE_TIME);
2025:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2026:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2027:       assertEquals(29, Node.JSDOC_INFO_PROP);
2028:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2029:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2030:       assertEquals(36, Node.QUOTED_PROP);
2031:       assertEquals(55, Node.INFERRED_FUNCTION);
2032:       assertEquals(52, Node.LENGTH);
2033:       assertEquals(8, Node.FLAG_NO_THROWS);
2034:       assertEquals(54, Node.SLASH_V);
2035:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2036:       assertEquals(57, Node.REFLECTED_OBJECT);
2037:       assertEquals(57, Node.LAST_PROP);
2038:       assertEquals(49, Node.DIRECT_EVAL);
2039:       assertEquals(30, Node.VAR_ARGS_NAME);
2040:       assertEquals(40, Node.ORIGINALNAME_PROP);
2041:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2042:       assertEquals(46, Node.IS_NAMESPACE);
2043:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2044:       assertEquals(12, Node.COLUMN_BITS);
2045:       assertEquals(32, Node.INCRDECR_PROP);
2046:       assertEquals(50, Node.FREE_CALL);
2047:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2048:       assertEquals(1, Node.DECR_FLAG);
2049:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2050:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2051:       assertEquals(43, Node.IS_CONSTANT_NAME);
2052:       assertEquals(36, Node.QUOTED_PROP);
2053:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2054:       assertEquals(55, Node.INFERRED_FUNCTION);
2055:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2056:       assertEquals(29, Node.JSDOC_INFO_PROP);
2057:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2058:       assertEquals(53, Node.INPUT_ID);
2059:       assertEquals(48, Node.DIRECTIVES);
2060:       assertEquals(37, Node.OPT_ARG_NAME);
2061:       assertEquals(8, Node.FLAG_NO_THROWS);
2062:       assertEquals(32, Node.INCRDECR_PROP);
2063:       assertEquals(56, Node.CHANGE_TIME);
2064:       assertEquals(12, Node.COLUMN_BITS);
2065:       assertEquals(49, Node.DIRECT_EVAL);
2066:       assertEquals(4095, Node.COLUMN_MASK);
2067:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2068:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2069:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2070:       assertEquals(54, Node.SLASH_V);
2071:       assertEquals(52, Node.LENGTH);
2072:       assertEquals(57, Node.LAST_PROP);
2073:       assertEquals(57, Node.REFLECTED_OBJECT);
2074:       assertEquals(1, Node.DECR_FLAG);
2075:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2076:       assertEquals(50, Node.FREE_CALL);
2077:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2078:       assertEquals(39, Node.EMPTY_BLOCK);
2079:       assertEquals(2, Node.POST_FLAG);
2080:       assertEquals(46, Node.IS_NAMESPACE);
2081:       assertEquals(47, Node.IS_DISPATCHER);
2082:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2083:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2084:       assertEquals(30, Node.VAR_ARGS_NAME);
2085:       assertEquals(40, Node.ORIGINALNAME_PROP);
2086:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2087:       assertEquals(29, Node.JSDOC_INFO_PROP);
2088:       assertEquals(47, Node.IS_DISPATCHER);
2089:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2090:       assertEquals(2, Node.POST_FLAG);
2091:       assertEquals(37, Node.OPT_ARG_NAME);
2092:       assertEquals(43, Node.IS_CONSTANT_NAME);
2093:       assertEquals(56, Node.CHANGE_TIME);
2094:       assertEquals(46, Node.IS_NAMESPACE);
2095:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2096:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2097:       assertEquals(30, Node.VAR_ARGS_NAME);
2098:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2099:       assertEquals(36, Node.QUOTED_PROP);
2100:       assertEquals(55, Node.INFERRED_FUNCTION);
2101:       assertEquals(53, Node.INPUT_ID);
2102:       assertEquals(39, Node.EMPTY_BLOCK);
2103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2104:       assertEquals(57, Node.LAST_PROP);
2105:       assertEquals(50, Node.FREE_CALL);
2106:       assertEquals(40, Node.ORIGINALNAME_PROP);
2107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2108:       assertEquals(8, Node.FLAG_NO_THROWS);
2109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2110:       assertEquals(52, Node.LENGTH);
2111:       
2112:       Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
2113:       assertFalse(node0.equals((Object)node2));
2114:       assertFalse(node0.equals((Object)node1));
2115:       assertFalse(node1.equals((Object)node2));
2116:       assertFalse(node1.equals((Object)node0));
2117:       assertFalse(node2.equals((Object)node0));
2118:       assertFalse(node2.equals((Object)node1));
2119:       assertFalse(node0.isReturn());
2120:       assertFalse(node0.isAssignAdd());
2121:       assertFalse(node0.isContinue());
2122:       assertFalse(node0.hasMoreThanOneChild());
2123:       assertFalse(node0.isLabel());
2124:       assertFalse(node0.isOr());
2125:       assertEquals(39, node0.getType());
2126:       assertFalse(node0.isDec());
2127:       assertFalse(node0.isTypeOf());
2128:       assertFalse(node0.isGetElem());
2129:       assertFalse(node0.isLabelName());
2130:       assertFalse(node0.isBlock());
2131:       assertFalse(node0.isAssign());
2132:       assertFalse(node0.hasChildren());
2133:       assertFalse(node0.isScript());
2134:       assertFalse(node0.isWhile());
2135:       assertFalse(node0.hasOneChild());
2136:       assertFalse(node0.isInstanceOf());
2137:       assertFalse(node0.isCatch());
2138:       assertFalse(node0.isObjectLit());
2139:       assertFalse(node0.isThis());
2140:       assertFalse(node0.isNot());
2141:       assertFalse(node0.isWith());
2142:       assertFalse(node0.isAnd());
2143:       assertEquals(103, node0.getCharno());
2144:       assertFalse(node0.isCast());
2145:       assertFalse(node0.isThrow());
2146:       assertFalse(node0.isFalse());
2147:       assertFalse(node0.isFunction());
2148:       assertFalse(node0.isSetterDef());
2149:       assertFalse(node0.isInc());
2150:       assertFalse(node0.isIn());
2151:       assertFalse(node0.isDelProp());
2152:       assertFalse(node0.isIf());
2153:       assertFalse(node0.isNE());
2154:       assertFalse(node0.isSwitch());
2155:       assertFalse(node0.isArrayLit());
2156:       assertFalse(node0.isHook());
2157:       assertFalse(node0.isDebugger());
2158:       assertFalse(node0.isRegExp());
2159:       assertEquals(221287, node0.getSourcePosition());
2160:       assertEquals(54, node0.getLineno());
2161:       assertFalse(node0.isGetterDef());
2162:       assertFalse(node0.isFor());
2163:       assertFalse(node0.isString());
2164:       assertFalse(node0.isGetProp());
2165:       assertFalse(node0.isTry());
2166:       assertFalse(node0.isCase());
2167:       assertTrue(node0.isNumber());
2168:       assertEquals(0, node0.getChildCount());
2169:       assertFalse(node0.isComma());
2170:       assertFalse(node0.isBreak());
2171:       assertFalse(node0.isNull());
2172:       assertFalse(node0.isStringKey());
2173:       assertFalse(node0.isParamList());
2174:       assertFalse(node0.isVoid());
2175:       assertFalse(node0.isExprResult());
2176:       assertFalse(node0.isCall());
2177:       assertFalse(node0.isName());
2178:       assertFalse(node0.isAdd());
2179:       assertFalse(node0.isVar());
2180:       assertFalse(node0.isTrue());
2181:       assertFalse(node0.isDefaultCase());
2182:       assertFalse(node0.isEmpty());
2183:       assertFalse(node0.isDo());
2184:       assertFalse(node0.isNew());
2185:       assertFalse(node1.isLabel());
2186:       assertFalse(node1.isOr());
2187:       assertFalse(node1.isAssignAdd());
2188:       assertFalse(node1.isReturn());
2189:       assertEquals(46, node1.getCharno());
2190:       assertFalse(node1.hasMoreThanOneChild());
2191:       assertFalse(node1.isTypeOf());
2192:       assertFalse(node1.isNumber());
2193:       assertFalse(node1.isContinue());
2194:       assertFalse(node1.isAssign());
2195:       assertFalse(node1.isDo());
2196:       assertFalse(node1.isDec());
2197:       assertFalse(node1.isWhile());
2198:       assertFalse(node1.isCast());
2199:       assertFalse(node1.isScript());
2200:       assertFalse(node1.isNot());
2201:       assertFalse(node1.isLabelName());
2202:       assertFalse(node1.isStringKey());
2203:       assertFalse(node1.isAnd());
2204:       assertFalse(node1.isParamList());
2205:       assertEquals(1935224878, node1.getSourcePosition());
2206:       assertFalse(node1.isGetProp());
2207:       assertFalse(node1.isComma());
2208:       assertFalse(node1.isObjectLit());
2209:       assertFalse(node1.isVar());
2210:       assertFalse(node1.isDefaultCase());
2211:       assertFalse(node1.isAdd());
2212:       assertFalse(node1.isVoid());
2213:       assertFalse(node1.isNew());
2214:       assertFalse(node1.isExprResult());
2215:       assertFalse(node1.isCall());
2216:       assertEquals(472467, node1.getLineno());
2217:       assertFalse(node1.isDelProp());
2218:       assertFalse(node1.isGetElem());
2219:       assertFalse(node1.isName());
2220:       assertFalse(node1.isBreak());
2221:       assertFalse(node1.isTrue());
2222:       assertFalse(node1.isNull());
2223:       assertTrue(node1.hasChildren());
2224:       assertEquals(1, node1.getChildCount());
2225:       assertFalse(node1.isIn());
2226:       assertTrue(node1.hasOneChild());
2227:       assertFalse(node1.isEmpty());
2228:       assertFalse(node1.isFor());
2229:       assertFalse(node1.isCase());
2230:       assertFalse(node1.isTry());
2231:       assertFalse(node1.isArrayLit());
2232:       assertEquals((-930), node1.getType());
2233:       assertFalse(node1.isDebugger());
2234:       assertFalse(node1.isFunction());
2235:       assertFalse(node1.isFalse());
2236:       assertFalse(node1.isString());
2237:       assertFalse(node1.isGetterDef());
2238:       assertFalse(node1.isSwitch());
2239:       assertFalse(node1.isCatch());
2240:       assertFalse(node1.isSetterDef());
2241:       assertFalse(node1.isInstanceOf());
2242:       assertFalse(node1.isWith());
2243:       assertFalse(node1.isThis());
2244:       assertFalse(node1.isThrow());
2245:       assertFalse(node1.isBlock());
2246:       assertFalse(node1.isHook());
2247:       assertFalse(node1.isRegExp());
2248:       assertFalse(node1.isInc());
2249:       assertFalse(node1.isNE());
2250:       assertFalse(node1.isIf());
2251:       assertFalse(node2.isWhile());
2252:       assertFalse(node2.isNew());
2253:       assertFalse(node2.isDo());
2254:       assertFalse(node2.isAdd());
2255:       assertFalse(node2.isNumber());
2256:       assertEquals((-1), node2.getSourcePosition());
2257:       assertFalse(node2.isOr());
2258:       assertFalse(node2.isGetElem());
2259:       assertFalse(node2.isNull());
2260:       assertFalse(node2.isCall());
2261:       assertFalse(node2.isName());
2262:       assertEquals((-1), node2.getLineno());
2263:       assertFalse(node2.isReturn());
2264:       assertFalse(node2.isBlock());
2265:       assertFalse(node2.isCatch());
2266:       assertFalse(node2.hasMoreThanOneChild());
2267:       assertFalse(node2.isTypeOf());
2268:       assertFalse(node2.isDec());
2269:       assertFalse(node2.isAssign());
2270:       assertFalse(node2.isWith());
2271:       assertFalse(node2.isAnd());
2272:       assertFalse(node2.isObjectLit());
2273:       assertFalse(node2.isDebugger());
2274:       assertFalse(node2.isNot());
2275:       assertFalse(node2.isThrow());
2276:       assertFalse(node2.isSetterDef());
2277:       assertFalse(node2.isCast());
2278:       assertFalse(node2.isFunction());
2279:       assertFalse(node2.isContinue());
2280:       assertFalse(node2.isFalse());
2281:       assertFalse(node2.isString());
2282:       assertFalse(node2.isInc());
2283:       assertFalse(node2.isSwitch());
2284:       assertFalse(node2.isCase());
2285:       assertFalse(node2.isIn());
2286:       assertEquals((-1), node2.getCharno());
2287:       assertFalse(node2.isGetterDef());
2288:       assertTrue(node2.hasOneChild());
2289:       assertFalse(node2.isDelProp());
2290:       assertEquals(54, node2.getType());
2291:       assertFalse(node2.isBreak());
2292:       assertFalse(node2.isIf());
2293:       assertFalse(node2.isFor());
2294:       assertFalse(node2.isNE());
2295:       assertFalse(node2.isGetProp());
2296:       assertEquals(1, node2.getChildCount());
2297:       assertFalse(node2.isInstanceOf());
2298:       assertFalse(node2.isHook());
2299:       assertTrue(node2.hasChildren());
2300:       assertFalse(node2.isThis());
2301:       assertFalse(node2.isComma());
2302:       assertFalse(node2.isRegExp());
2303:       assertFalse(node2.isDefaultCase());
2304:       assertFalse(node2.isScript());
2305:       assertFalse(node2.isExprResult());
2306:       assertFalse(node2.isVoid());
2307:       assertFalse(node2.isTry());
2308:       assertFalse(node2.isTrue());
2309:       assertFalse(node2.isStringKey());
2310:       assertFalse(node2.isEmpty());
2311:       assertFalse(node2.isParamList());
2312:       assertFalse(node2.isArrayLit());
2313:       assertFalse(node2.isLabelName());
2314:       assertFalse(node2.isLabel());
2315:       assertFalse(node2.isAssignAdd());
2316:       assertFalse(node2.isVar());
2317:       assertNotNull(node_AncestorIterable0);
2318:       
2319:       boolean boolean3 = node1.isLabel();
2320:       assertFalse(node0.equals((Object)node2));
2321:       assertFalse(node0.equals((Object)node1));
2322:       assertFalse(node1.equals((Object)node2));
2323:       assertFalse(node1.equals((Object)node0));
2324:       assertTrue(boolean3 == boolean0);
2325:       assertTrue(boolean3 == boolean1);
2326:       assertTrue(boolean3 == boolean2);
2327:       assertFalse(node0.isReturn());
2328:       assertFalse(node0.isAssignAdd());
2329:       assertFalse(node0.isContinue());
2330:       assertFalse(node0.hasMoreThanOneChild());
2331:       assertFalse(node0.isLabel());
2332:       assertFalse(node0.isOr());
2333:       assertEquals(39, node0.getType());
2334:       assertFalse(node0.isDec());
2335:       assertFalse(node0.isTypeOf());
2336:       assertFalse(node0.isGetElem());
2337:       assertFalse(node0.isLabelName());
2338:       assertFalse(node0.isBlock());
2339:       assertFalse(node0.isAssign());
2340:       assertFalse(node0.hasChildren());
2341:       assertFalse(node0.isScript());
2342:       assertFalse(node0.isWhile());
2343:       assertFalse(node0.hasOneChild());
2344:       assertFalse(node0.isInstanceOf());
2345:       assertFalse(node0.isCatch());
2346:       assertFalse(node0.isObjectLit());
2347:       assertFalse(node0.isThis());
2348:       assertFalse(node0.isNot());
2349:       assertFalse(node0.isWith());
2350:       assertFalse(node0.isAnd());
2351:       assertEquals(103, node0.getCharno());
2352:       assertFalse(node0.isCast());
2353:       assertFalse(node0.isThrow());
2354:       assertFalse(node0.isFalse());
2355:       assertFalse(node0.isFunction());
2356:       assertFalse(node0.isSetterDef());
2357:       assertFalse(node0.isInc());
2358:       assertFalse(node0.isIn());
2359:       assertFalse(node0.isDelProp());
2360:       assertFalse(node0.isIf());
2361:       assertFalse(node0.isNE());
2362:       assertFalse(node0.isSwitch());
2363:       assertFalse(node0.isArrayLit());
2364:       assertFalse(node0.isHook());
2365:       assertFalse(node0.isDebugger());
2366:       assertFalse(node0.isRegExp());
2367:       assertEquals(221287, node0.getSourcePosition());
2368:       assertEquals(54, node0.getLineno());
2369:       assertFalse(node0.isGetterDef());
2370:       assertFalse(node0.isFor());
2371:       assertFalse(node0.isString());
2372:       assertFalse(node0.isGetProp());
2373:       assertFalse(node0.isTry());
2374:       assertFalse(node0.isCase());
2375:       assertTrue(node0.isNumber());
2376:       assertEquals(0, node0.getChildCount());
2377:       assertFalse(node0.isComma());
2378:       assertFalse(node0.isBreak());
2379:       assertFalse(node0.isNull());
2380:       assertFalse(node0.isStringKey());
2381:       assertFalse(node0.isParamList());
2382:       assertFalse(node0.isVoid());
2383:       assertFalse(node0.isExprResult());
2384:       assertFalse(node0.isCall());
2385:       assertFalse(node0.isName());
2386:       assertFalse(node0.isAdd());
2387:       assertFalse(node0.isVar());
2388:       assertFalse(node0.isTrue());
2389:       assertFalse(node0.isDefaultCase());
2390:       assertFalse(node0.isEmpty());
2391:       assertFalse(node0.isDo());
2392:       assertFalse(node0.isNew());
2393:       assertFalse(node1.isLabel());
2394:       assertFalse(node1.isOr());
2395:       assertFalse(node1.isAssignAdd());
2396:       assertFalse(node1.isReturn());
2397:       assertEquals(46, node1.getCharno());
2398:       assertFalse(node1.hasMoreThanOneChild());
2399:       assertFalse(node1.isTypeOf());
2400:       assertFalse(node1.isNumber());
2401:       assertFalse(node1.isContinue());
2402:       assertFalse(node1.isAssign());
2403:       assertFalse(node1.isDo());
2404:       assertFalse(node1.isDec());
2405:       assertFalse(node1.isWhile());
2406:       assertFalse(node1.isCast());
2407:       assertFalse(node1.isScript());
2408:       assertFalse(node1.isNot());
2409:       assertFalse(node1.isLabelName());
2410:       assertFalse(node1.isStringKey());
2411:       assertFalse(node1.isAnd());
2412:       assertFalse(node1.isParamList());
2413:       assertEquals(1935224878, node1.getSourcePosition());
2414:       assertFalse(node1.isGetProp());
2415:       assertFalse(node1.isComma());
2416:       assertFalse(node1.isObjectLit());
2417:       assertFalse(node1.isVar());
2418:       assertFalse(node1.isDefaultCase());
2419:       assertFalse(node1.isAdd());
2420:       assertFalse(node1.isVoid());
2421:       assertFalse(node1.isNew());
2422:       assertFalse(node1.isExprResult());
2423:       assertFalse(node1.isCall());
2424:       assertEquals(472467, node1.getLineno());
2425:       assertFalse(node1.isDelProp());
2426:       assertFalse(node1.isGetElem());
2427:       assertFalse(node1.isName());
2428:       assertFalse(node1.isBreak());
2429:       assertFalse(node1.isTrue());
2430:       assertFalse(node1.isNull());
2431:       assertTrue(node1.hasChildren());
2432:       assertEquals(1, node1.getChildCount());
2433:       assertFalse(node1.isIn());
2434:       assertTrue(node1.hasOneChild());
2435:       assertFalse(node1.isEmpty());
2436:       assertFalse(node1.isFor());
2437:       assertFalse(node1.isCase());
2438:       assertFalse(node1.isTry());
2439:       assertFalse(node1.isArrayLit());
2440:       assertEquals((-930), node1.getType());
2441:       assertFalse(node1.isDebugger());
2442:       assertFalse(node1.isFunction());
2443:       assertFalse(node1.isFalse());
2444:       assertFalse(node1.isString());
2445:       assertFalse(node1.isGetterDef());
2446:       assertFalse(node1.isSwitch());
2447:       assertFalse(node1.isCatch());
2448:       assertFalse(node1.isSetterDef());
2449:       assertFalse(node1.isInstanceOf());
2450:       assertFalse(node1.isWith());
2451:       assertFalse(node1.isThis());
2452:       assertFalse(node1.isThrow());
2453:       assertFalse(node1.isBlock());
2454:       assertFalse(node1.isHook());
2455:       assertFalse(node1.isRegExp());
2456:       assertFalse(node1.isInc());
2457:       assertFalse(node1.isNE());
2458:       assertFalse(node1.isIf());
2459:       assertFalse(boolean3);
2460:       
2461:       Node node3 = node0.removeFirstChild();
2462:       assertFalse(node0.equals((Object)node2));
2463:       assertFalse(node0.equals((Object)node1));
2464:       assertFalse(node0.isReturn());
2465:       assertFalse(node0.isAssignAdd());
2466:       assertFalse(node0.isContinue());
2467:       assertFalse(node0.hasMoreThanOneChild());
2468:       assertFalse(node0.isLabel());
2469:       assertFalse(node0.isOr());
2470:       assertEquals(39, node0.getType());
2471:       assertFalse(node0.isDec());
2472:       assertFalse(node0.isTypeOf());
2473:       assertFalse(node0.isGetElem());
2474:       assertFalse(node0.isLabelName());
2475:       assertFalse(node0.isBlock());
2476:       assertFalse(node0.isAssign());
2477:       assertFalse(node0.hasChildren());
2478:       assertFalse(node0.isScript());
2479:       assertFalse(node0.isWhile());
2480:       assertFalse(node0.hasOneChild());
2481:       assertFalse(node0.isInstanceOf());
2482:       assertFalse(node0.isCatch());
2483:       assertFalse(node0.isObjectLit());
2484:       assertFalse(node0.isThis());
2485:       assertFalse(node0.isNot());
2486:       assertFalse(node0.isWith());
2487:       assertFalse(node0.isAnd());
2488:       assertEquals(103, node0.getCharno());
2489:       assertFalse(node0.isCast());
2490:       assertFalse(node0.isThrow());
2491:       assertFalse(node0.isFalse());
2492:       assertFalse(node0.isFunction());
2493:       assertFalse(node0.isSetterDef());
2494:       assertFalse(node0.isInc());
2495:       assertFalse(node0.isIn());
2496:       assertFalse(node0.isDelProp());
2497:       assertFalse(node0.isIf());
2498:       assertFalse(node0.isNE());
2499:       assertFalse(node0.isSwitch());
2500:       assertFalse(node0.isArrayLit());
2501:       assertFalse(node0.isHook());
2502:       assertFalse(node0.isDebugger());
2503:       assertFalse(node0.isRegExp());
2504:       assertEquals(221287, node0.getSourcePosition());
2505:       assertEquals(54, node0.getLineno());
2506:       assertFalse(node0.isGetterDef());
2507:       assertFalse(node0.isFor());
2508:       assertFalse(node0.isString());
2509:       assertFalse(node0.isGetProp());
2510:       assertFalse(node0.isTry());
2511:       assertFalse(node0.isCase());
2512:       assertTrue(node0.isNumber());
2513:       assertEquals(0, node0.getChildCount());
2514:       assertFalse(node0.isComma());
2515:       assertFalse(node0.isBreak());
2516:       assertFalse(node0.isNull());
2517:       assertFalse(node0.isStringKey());
2518:       assertFalse(node0.isParamList());
2519:       assertFalse(node0.isVoid());
2520:       assertFalse(node0.isExprResult());
2521:       assertFalse(node0.isCall());
2522:       assertFalse(node0.isName());
2523:       assertFalse(node0.isAdd());
2524:       assertFalse(node0.isVar());
2525:       assertFalse(node0.isTrue());
2526:       assertFalse(node0.isDefaultCase());
2527:       assertFalse(node0.isEmpty());
2528:       assertFalse(node0.isDo());
2529:       assertFalse(node0.isNew());
2530:       assertNull(node3);
2531:   }
2532: }
RegularFileObject[/tmp/EvoSuite_436_1628158463555/com/google/javascript/rhino/Node_436_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:23 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_436_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_436_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_436_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:24.275 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) 54, 54, 103);
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertNotNull(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node1 = new Node((-930), node0, node0, node0, 461845907, 46);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(46, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertNotNull(node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node2 = new Node(54, node1, node1, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(46, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertEquals(54, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertNotNull(node2);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node2.setSourceFileForTesting("\n\nSubtree2: ");
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(46, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertEquals(54, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean0 = node2.isQualifiedName();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(46, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertEquals(54, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean1 = node2.isFalse();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(46, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertEquals(54, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean2 = node0.isWhile();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(boolean2);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node2));
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertNotNull(iterable0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);

int int0 = node1.getIndexOfChild(node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(46, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertEquals(54, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertEquals((-1), int0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(46, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertEquals(54, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertNotNull(node_AncestorIterable0);

boolean boolean3 = node1.isLabel();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(46, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertEquals(1935224878, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(472467, node1.getLineno());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals((-930), node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(boolean3);

Node node3 = node0.removeFirstChild();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals(103, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(221287, node0.getSourcePosition());
assertEquals(54, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertNull(node3);


[MASTER] 10:14:25.489 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_454_1628158465401/com/google/javascript/rhino/Node_454_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_454_1628158465401/com/google/javascript/rhino/Node_454_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:25.489 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:25.489 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:25.490 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 335
[MASTER] 10:14:25.490 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_454_1628158465401/com/google/javascript/rhino/Node_454_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:25 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_454_tmp__ESTest extends Node_454_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((-583.009670238), 2764, 0);
21:       assertFalse(node0.isCall());
22:       assertFalse(node0.isAdd());
23:       assertFalse(node0.isVar());
24:       assertFalse(node0.isNew());
25:       assertFalse(node0.isStringKey());
26:       assertFalse(node0.isName());
27:       assertFalse(node0.isWhile());
28:       assertFalse(node0.isBlock());
29:       assertEquals(39, node0.getType());
30:       assertFalse(node0.isContinue());
31:       assertEquals(0, node0.getChildCount());
32:       assertFalse(node0.isReturn());
33:       assertFalse(node0.isParamList());
34:       assertFalse(node0.isDebugger());
35:       assertFalse(node0.isArrayLit());
36:       assertFalse(node0.isGetElem());
37:       assertEquals(11321344, node0.getSourcePosition());
38:       assertFalse(node0.isDelProp());
39:       assertFalse(node0.isVoid());
40:       assertFalse(node0.isLabelName());
41:       assertFalse(node0.isTypeOf());
42:       assertFalse(node0.isDec());
43:       assertFalse(node0.hasChildren());
44:       assertFalse(node0.isDefaultCase());
45:       assertFalse(node0.isExprResult());
46:       assertFalse(node0.isLabel());
47:       assertFalse(node0.isAssign());
48:       assertFalse(node0.isAssignAdd());
49:       assertFalse(node0.isDo());
50:       assertFalse(node0.isNull());
51:       assertFalse(node0.isTrue());
52:       assertFalse(node0.isEmpty());
53:       assertFalse(node0.isOr());
54:       assertEquals(2764, node0.getLineno());
55:       assertFalse(node0.isHook());
56:       assertFalse(node0.isThrow());
57:       assertFalse(node0.isBreak());
58:       assertFalse(node0.isThis());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isComma());
61:       assertFalse(node0.isCase());
62:       assertFalse(node0.isAnd());
63:       assertFalse(node0.isGetProp());
64:       assertTrue(node0.isNumber());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isString());
67:       assertFalse(node0.isScript());
68:       assertFalse(node0.isObjectLit());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isGetterDef());
71:       assertFalse(node0.hasOneChild());
72:       assertFalse(node0.isCast());
73:       assertFalse(node0.isTry());
74:       assertFalse(node0.isRegExp());
75:       assertFalse(node0.isFor());
76:       assertFalse(node0.isWith());
77:       assertFalse(node0.isFunction());
78:       assertFalse(node0.isInstanceOf());
79:       assertFalse(node0.hasMoreThanOneChild());
80:       assertFalse(node0.isIn());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isIf());
83:       assertEquals(0, node0.getCharno());
84:       assertFalse(node0.isSetterDef());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isNE());
87:       assertNotNull(node0);
88:       assertEquals(32, Node.INCRDECR_PROP);
89:       assertEquals(46, Node.IS_NAMESPACE);
90:       assertEquals(51, Node.STATIC_SOURCE_FILE);
91:       assertEquals(2, Node.POST_FLAG);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(30, Node.VAR_ARGS_NAME);
94:       assertEquals(15, Node.NO_SIDE_EFFECTS);
95:       assertEquals(1, Node.DECR_FLAG);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(47, Node.IS_DISPATCHER);
98:       assertEquals(12, Node.COLUMN_BITS);
99:       assertEquals(57, Node.LAST_PROP);
100:       assertEquals(52, Node.LENGTH);
101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
102:       assertEquals(53, Node.INPUT_ID);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(37, Node.OPT_ARG_NAME);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(8, Node.FLAG_NO_THROWS);
115:       assertEquals(39, Node.EMPTY_BLOCK);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(4095, Node.COLUMN_MASK);
118:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
119:       assertEquals(40, Node.ORIGINALNAME_PROP);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(54, Node.SLASH_V);
123:       assertEquals(43, Node.IS_CONSTANT_NAME);
124:       
125:       Node node1 = new Node(0, node0, 55, 8);
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node0.isCall());
128:       assertFalse(node0.isAdd());
129:       assertFalse(node0.isVar());
130:       assertFalse(node0.isNew());
131:       assertFalse(node0.isStringKey());
132:       assertFalse(node0.isName());
133:       assertFalse(node0.isWhile());
134:       assertFalse(node0.isBlock());
135:       assertEquals(39, node0.getType());
136:       assertFalse(node0.isContinue());
137:       assertEquals(0, node0.getChildCount());
138:       assertFalse(node0.isReturn());
139:       assertFalse(node0.isParamList());
140:       assertFalse(node0.isDebugger());
141:       assertFalse(node0.isArrayLit());
142:       assertFalse(node0.isGetElem());
143:       assertEquals(11321344, node0.getSourcePosition());
144:       assertFalse(node0.isDelProp());
145:       assertFalse(node0.isVoid());
146:       assertFalse(node0.isLabelName());
147:       assertFalse(node0.isTypeOf());
148:       assertFalse(node0.isDec());
149:       assertFalse(node0.hasChildren());
150:       assertFalse(node0.isDefaultCase());
151:       assertFalse(node0.isExprResult());
152:       assertFalse(node0.isLabel());
153:       assertFalse(node0.isAssign());
154:       assertFalse(node0.isAssignAdd());
155:       assertFalse(node0.isDo());
156:       assertFalse(node0.isNull());
157:       assertFalse(node0.isTrue());
158:       assertFalse(node0.isEmpty());
159:       assertFalse(node0.isOr());
160:       assertEquals(2764, node0.getLineno());
161:       assertFalse(node0.isHook());
162:       assertFalse(node0.isThrow());
163:       assertFalse(node0.isBreak());
164:       assertFalse(node0.isThis());
165:       assertFalse(node0.isFalse());
166:       assertFalse(node0.isComma());
167:       assertFalse(node0.isCase());
168:       assertFalse(node0.isAnd());
169:       assertFalse(node0.isGetProp());
170:       assertTrue(node0.isNumber());
171:       assertFalse(node0.isSwitch());
172:       assertFalse(node0.isString());
173:       assertFalse(node0.isScript());
174:       assertFalse(node0.isObjectLit());
175:       assertFalse(node0.isNot());
176:       assertFalse(node0.isGetterDef());
177:       assertFalse(node0.hasOneChild());
178:       assertFalse(node0.isCast());
179:       assertFalse(node0.isTry());
180:       assertFalse(node0.isRegExp());
181:       assertFalse(node0.isFor());
182:       assertFalse(node0.isWith());
183:       assertFalse(node0.isFunction());
184:       assertFalse(node0.isInstanceOf());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertFalse(node0.isIn());
187:       assertFalse(node0.isCatch());
188:       assertFalse(node0.isIf());
189:       assertEquals(0, node0.getCharno());
190:       assertFalse(node0.isSetterDef());
191:       assertFalse(node0.isInc());
192:       assertFalse(node0.isNE());
193:       assertFalse(node1.isSetterDef());
194:       assertFalse(node1.isNull());
195:       assertFalse(node1.isParamList());
196:       assertFalse(node1.isVar());
197:       assertFalse(node1.isDefaultCase());
198:       assertFalse(node1.isNew());
199:       assertFalse(node1.isVoid());
200:       assertFalse(node1.isTrue());
201:       assertFalse(node1.isBlock());
202:       assertFalse(node1.isAdd());
203:       assertFalse(node1.isRegExp());
204:       assertFalse(node1.isCall());
205:       assertFalse(node1.isName());
206:       assertFalse(node1.hasMoreThanOneChild());
207:       assertFalse(node1.isCatch());
208:       assertFalse(node1.isDelProp());
209:       assertFalse(node1.isIf());
210:       assertTrue(node1.hasChildren());
211:       assertFalse(node1.isAssignAdd());
212:       assertFalse(node1.isGetterDef());
213:       assertFalse(node1.isNumber());
214:       assertFalse(node1.isLabel());
215:       assertFalse(node1.isOr());
216:       assertEquals(1, node1.getChildCount());
217:       assertFalse(node1.isEmpty());
218:       assertFalse(node1.isFor());
219:       assertFalse(node1.isDo());
220:       assertFalse(node1.isTry());
221:       assertFalse(node1.isCase());
222:       assertFalse(node1.isSwitch());
223:       assertFalse(node1.isScript());
224:       assertFalse(node1.isStringKey());
225:       assertFalse(node1.isArrayLit());
226:       assertFalse(node1.isLabelName());
227:       assertFalse(node1.isGetProp());
228:       assertFalse(node1.isThis());
229:       assertFalse(node1.isComma());
230:       assertFalse(node1.isThrow());
231:       assertFalse(node1.isObjectLit());
232:       assertFalse(node1.isExprResult());
233:       assertEquals(0, node1.getType());
234:       assertFalse(node1.isInc());
235:       assertFalse(node1.isWith());
236:       assertFalse(node1.isHook());
237:       assertEquals(55, node1.getLineno());
238:       assertFalse(node1.isGetElem());
239:       assertEquals(8, node1.getCharno());
240:       assertFalse(node1.isInstanceOf());
241:       assertFalse(node1.isBreak());
242:       assertFalse(node1.isNE());
243:       assertFalse(node1.isIn());
244:       assertTrue(node1.hasOneChild());
245:       assertFalse(node1.isReturn());
246:       assertFalse(node1.isTypeOf());
247:       assertFalse(node1.isAssign());
248:       assertFalse(node1.isDec());
249:       assertFalse(node1.isString());
250:       assertFalse(node1.isWhile());
251:       assertFalse(node1.isDebugger());
252:       assertFalse(node1.isFunction());
253:       assertFalse(node1.isNot());
254:       assertEquals(225288, node1.getSourcePosition());
255:       assertFalse(node1.isAnd());
256:       assertFalse(node1.isContinue());
257:       assertFalse(node1.isFalse());
258:       assertFalse(node1.isCast());
259:       assertNotNull(node1);
260:       assertEquals(32, Node.INCRDECR_PROP);
261:       assertEquals(46, Node.IS_NAMESPACE);
262:       assertEquals(51, Node.STATIC_SOURCE_FILE);
263:       assertEquals(2, Node.POST_FLAG);
264:       assertEquals(29, Node.JSDOC_INFO_PROP);
265:       assertEquals(30, Node.VAR_ARGS_NAME);
266:       assertEquals(15, Node.NO_SIDE_EFFECTS);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
269:       assertEquals(47, Node.IS_DISPATCHER);
270:       assertEquals(12, Node.COLUMN_BITS);
271:       assertEquals(57, Node.LAST_PROP);
272:       assertEquals(52, Node.LENGTH);
273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
274:       assertEquals(53, Node.INPUT_ID);
275:       assertEquals(57, Node.REFLECTED_OBJECT);
276:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
277:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
278:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
279:       assertEquals(49, Node.DIRECT_EVAL);
280:       assertEquals(36, Node.QUOTED_PROP);
281:       assertEquals(37, Node.OPT_ARG_NAME);
282:       assertEquals(48, Node.DIRECTIVES);
283:       assertEquals(56, Node.CHANGE_TIME);
284:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
285:       assertEquals(55, Node.INFERRED_FUNCTION);
286:       assertEquals(8, Node.FLAG_NO_THROWS);
287:       assertEquals(39, Node.EMPTY_BLOCK);
288:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
289:       assertEquals(4095, Node.COLUMN_MASK);
290:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
291:       assertEquals(40, Node.ORIGINALNAME_PROP);
292:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
293:       assertEquals(50, Node.FREE_CALL);
294:       assertEquals(54, Node.SLASH_V);
295:       assertEquals(43, Node.IS_CONSTANT_NAME);
296:       assertEquals(54, Node.SLASH_V);
297:       assertEquals(15, Node.NO_SIDE_EFFECTS);
298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
299:       assertEquals(49, Node.DIRECT_EVAL);
300:       assertEquals(1, Node.DECR_FLAG);
301:       assertEquals(57, Node.LAST_PROP);
302:       assertEquals(51, Node.STATIC_SOURCE_FILE);
303:       assertEquals(46, Node.IS_NAMESPACE);
304:       assertEquals(57, Node.REFLECTED_OBJECT);
305:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(52, Node.LENGTH);
308:       assertEquals(2, Node.POST_FLAG);
309:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
310:       assertEquals(39, Node.EMPTY_BLOCK);
311:       assertEquals(47, Node.IS_DISPATCHER);
312:       assertEquals(40, Node.ORIGINALNAME_PROP);
313:       assertEquals(30, Node.VAR_ARGS_NAME);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(43, Node.IS_CONSTANT_NAME);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(55, Node.INFERRED_FUNCTION);
318:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
319:       assertEquals(29, Node.JSDOC_INFO_PROP);
320:       assertEquals(53, Node.INPUT_ID);
321:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
324:       assertEquals(56, Node.CHANGE_TIME);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
327:       assertEquals(48, Node.DIRECTIVES);
328:       assertEquals(32, Node.INCRDECR_PROP);
329:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
330:       assertEquals(12, Node.COLUMN_BITS);
331:       assertEquals(4095, Node.COLUMN_MASK);
332:       
333:       Iterable<Node> iterable0 = node0.children();
334:       assertFalse(node0.equals((Object)node1));
335:       assertFalse(iterable0.contains(node0));
336:       assertFalse(node0.isCall());
337:       assertFalse(node0.isAdd());
338:       assertFalse(node0.isVar());
339:       assertFalse(node0.isNew());
340:       assertFalse(node0.isStringKey());
341:       assertFalse(node0.isName());
342:       assertFalse(node0.isWhile());
343:       assertFalse(node0.isBlock());
344:       assertEquals(39, node0.getType());
345:       assertFalse(node0.isContinue());
346:       assertEquals(0, node0.getChildCount());
347:       assertFalse(node0.isReturn());
348:       assertFalse(node0.isParamList());
349:       assertFalse(node0.isDebugger());
350:       assertFalse(node0.isArrayLit());
351:       assertFalse(node0.isGetElem());
352:       assertEquals(11321344, node0.getSourcePosition());
353:       assertFalse(node0.isDelProp());
354:       assertFalse(node0.isVoid());
355:       assertFalse(node0.isLabelName());
356:       assertFalse(node0.isTypeOf());
357:       assertFalse(node0.isDec());
358:       assertFalse(node0.hasChildren());
359:       assertFalse(node0.isDefaultCase());
360:       assertFalse(node0.isExprResult());
361:       assertFalse(node0.isLabel());
362:       assertFalse(node0.isAssign());
363:       assertFalse(node0.isAssignAdd());
364:       assertFalse(node0.isDo());
365:       assertFalse(node0.isNull());
366:       assertFalse(node0.isTrue());
367:       assertFalse(node0.isEmpty());
368:       assertFalse(node0.isOr());
369:       assertEquals(2764, node0.getLineno());
370:       assertFalse(node0.isHook());
371:       assertFalse(node0.isThrow());
372:       assertFalse(node0.isBreak());
373:       assertFalse(node0.isThis());
374:       assertFalse(node0.isFalse());
375:       assertFalse(node0.isComma());
376:       assertFalse(node0.isCase());
377:       assertFalse(node0.isAnd());
378:       assertFalse(node0.isGetProp());
379:       assertTrue(node0.isNumber());
380:       assertFalse(node0.isSwitch());
381:       assertFalse(node0.isString());
382:       assertFalse(node0.isScript());
383:       assertFalse(node0.isObjectLit());
384:       assertFalse(node0.isNot());
385:       assertFalse(node0.isGetterDef());
386:       assertFalse(node0.hasOneChild());
387:       assertFalse(node0.isCast());
388:       assertFalse(node0.isTry());
389:       assertFalse(node0.isRegExp());
390:       assertFalse(node0.isFor());
391:       assertFalse(node0.isWith());
392:       assertFalse(node0.isFunction());
393:       assertFalse(node0.isInstanceOf());
394:       assertFalse(node0.hasMoreThanOneChild());
395:       assertFalse(node0.isIn());
396:       assertFalse(node0.isCatch());
397:       assertFalse(node0.isIf());
398:       assertEquals(0, node0.getCharno());
399:       assertFalse(node0.isSetterDef());
400:       assertFalse(node0.isInc());
401:       assertFalse(node0.isNE());
402:       assertNotNull(iterable0);
403:       assertEquals(32, Node.INCRDECR_PROP);
404:       assertEquals(46, Node.IS_NAMESPACE);
405:       assertEquals(51, Node.STATIC_SOURCE_FILE);
406:       assertEquals(2, Node.POST_FLAG);
407:       assertEquals(29, Node.JSDOC_INFO_PROP);
408:       assertEquals(30, Node.VAR_ARGS_NAME);
409:       assertEquals(15, Node.NO_SIDE_EFFECTS);
410:       assertEquals(1, Node.DECR_FLAG);
411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
412:       assertEquals(47, Node.IS_DISPATCHER);
413:       assertEquals(12, Node.COLUMN_BITS);
414:       assertEquals(57, Node.LAST_PROP);
415:       assertEquals(52, Node.LENGTH);
416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
417:       assertEquals(53, Node.INPUT_ID);
418:       assertEquals(57, Node.REFLECTED_OBJECT);
419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
422:       assertEquals(49, Node.DIRECT_EVAL);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(37, Node.OPT_ARG_NAME);
425:       assertEquals(48, Node.DIRECTIVES);
426:       assertEquals(56, Node.CHANGE_TIME);
427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
428:       assertEquals(55, Node.INFERRED_FUNCTION);
429:       assertEquals(8, Node.FLAG_NO_THROWS);
430:       assertEquals(39, Node.EMPTY_BLOCK);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(4095, Node.COLUMN_MASK);
433:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
434:       assertEquals(40, Node.ORIGINALNAME_PROP);
435:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
436:       assertEquals(50, Node.FREE_CALL);
437:       assertEquals(54, Node.SLASH_V);
438:       assertEquals(43, Node.IS_CONSTANT_NAME);
439:       
440:       node0.putBooleanProp(2764, false);
441:       assertFalse(node0.equals((Object)node1));
442:       assertFalse(node0.isCall());
443:       assertFalse(node0.isAdd());
444:       assertFalse(node0.isVar());
445:       assertFalse(node0.isNew());
446:       assertFalse(node0.isStringKey());
447:       assertFalse(node0.isName());
448:       assertFalse(node0.isWhile());
449:       assertFalse(node0.isBlock());
450:       assertEquals(39, node0.getType());
451:       assertFalse(node0.isContinue());
452:       assertEquals(0, node0.getChildCount());
453:       assertFalse(node0.isReturn());
454:       assertFalse(node0.isParamList());
455:       assertFalse(node0.isDebugger());
456:       assertFalse(node0.isArrayLit());
457:       assertFalse(node0.isGetElem());
458:       assertEquals(11321344, node0.getSourcePosition());
459:       assertFalse(node0.isDelProp());
460:       assertFalse(node0.isVoid());
461:       assertFalse(node0.isLabelName());
462:       assertFalse(node0.isTypeOf());
463:       assertFalse(node0.isDec());
464:       assertFalse(node0.hasChildren());
465:       assertFalse(node0.isDefaultCase());
466:       assertFalse(node0.isExprResult());
467:       assertFalse(node0.isLabel());
468:       assertFalse(node0.isAssign());
469:       assertFalse(node0.isAssignAdd());
470:       assertFalse(node0.isDo());
471:       assertFalse(node0.isNull());
472:       assertFalse(node0.isTrue());
473:       assertFalse(node0.isEmpty());
474:       assertFalse(node0.isOr());
475:       assertEquals(2764, node0.getLineno());
476:       assertFalse(node0.isHook());
477:       assertFalse(node0.isThrow());
478:       assertFalse(node0.isBreak());
479:       assertFalse(node0.isThis());
480:       assertFalse(node0.isFalse());
481:       assertFalse(node0.isComma());
482:       assertFalse(node0.isCase());
483:       assertFalse(node0.isAnd());
484:       assertFalse(node0.isGetProp());
485:       assertTrue(node0.isNumber());
486:       assertFalse(node0.isSwitch());
487:       assertFalse(node0.isString());
488:       assertFalse(node0.isScript());
489:       assertFalse(node0.isObjectLit());
490:       assertFalse(node0.isNot());
491:       assertFalse(node0.isGetterDef());
492:       assertFalse(node0.hasOneChild());
493:       assertFalse(node0.isCast());
494:       assertFalse(node0.isTry());
495:       assertFalse(node0.isRegExp());
496:       assertFalse(node0.isFor());
497:       assertFalse(node0.isWith());
498:       assertFalse(node0.isFunction());
499:       assertFalse(node0.isInstanceOf());
500:       assertFalse(node0.hasMoreThanOneChild());
501:       assertFalse(node0.isIn());
502:       assertFalse(node0.isCatch());
503:       assertFalse(node0.isIf());
504:       assertEquals(0, node0.getCharno());
505:       assertFalse(node0.isSetterDef());
506:       assertFalse(node0.isInc());
507:       assertFalse(node0.isNE());
508:       assertEquals(32, Node.INCRDECR_PROP);
509:       assertEquals(46, Node.IS_NAMESPACE);
510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
511:       assertEquals(2, Node.POST_FLAG);
512:       assertEquals(29, Node.JSDOC_INFO_PROP);
513:       assertEquals(30, Node.VAR_ARGS_NAME);
514:       assertEquals(15, Node.NO_SIDE_EFFECTS);
515:       assertEquals(1, Node.DECR_FLAG);
516:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
517:       assertEquals(47, Node.IS_DISPATCHER);
518:       assertEquals(12, Node.COLUMN_BITS);
519:       assertEquals(57, Node.LAST_PROP);
520:       assertEquals(52, Node.LENGTH);
521:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
522:       assertEquals(53, Node.INPUT_ID);
523:       assertEquals(57, Node.REFLECTED_OBJECT);
524:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
525:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
526:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
527:       assertEquals(49, Node.DIRECT_EVAL);
528:       assertEquals(36, Node.QUOTED_PROP);
529:       assertEquals(37, Node.OPT_ARG_NAME);
530:       assertEquals(48, Node.DIRECTIVES);
531:       assertEquals(56, Node.CHANGE_TIME);
532:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
533:       assertEquals(55, Node.INFERRED_FUNCTION);
534:       assertEquals(8, Node.FLAG_NO_THROWS);
535:       assertEquals(39, Node.EMPTY_BLOCK);
536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
537:       assertEquals(4095, Node.COLUMN_MASK);
538:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
539:       assertEquals(40, Node.ORIGINALNAME_PROP);
540:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
541:       assertEquals(50, Node.FREE_CALL);
542:       assertEquals(54, Node.SLASH_V);
543:       assertEquals(43, Node.IS_CONSTANT_NAME);
544:       
545:       boolean boolean0 = node1.isVarArgs();
546:       assertFalse(node0.equals((Object)node1));
547:       assertFalse(node1.equals((Object)node0));
548:       assertFalse(node0.isCall());
549:       assertFalse(node0.isAdd());
550:       assertFalse(node0.isVar());
551:       assertFalse(node0.isNew());
552:       assertFalse(node0.isStringKey());
553:       assertFalse(node0.isName());
554:       assertFalse(node0.isWhile());
555:       assertFalse(node0.isBlock());
556:       assertEquals(39, node0.getType());
557:       assertFalse(node0.isContinue());
558:       assertEquals(0, node0.getChildCount());
559:       assertFalse(node0.isReturn());
560:       assertFalse(node0.isParamList());
561:       assertFalse(node0.isDebugger());
562:       assertFalse(node0.isArrayLit());
563:       assertFalse(node0.isGetElem());
564:       assertEquals(11321344, node0.getSourcePosition());
565:       assertFalse(node0.isDelProp());
566:       assertFalse(node0.isVoid());
567:       assertFalse(node0.isLabelName());
568:       assertFalse(node0.isTypeOf());
569:       assertFalse(node0.isDec());
570:       assertFalse(node0.hasChildren());
571:       assertFalse(node0.isDefaultCase());
572:       assertFalse(node0.isExprResult());
573:       assertFalse(node0.isLabel());
574:       assertFalse(node0.isAssign());
575:       assertFalse(node0.isAssignAdd());
576:       assertFalse(node0.isDo());
577:       assertFalse(node0.isNull());
578:       assertFalse(node0.isTrue());
579:       assertFalse(node0.isEmpty());
580:       assertFalse(node0.isOr());
581:       assertEquals(2764, node0.getLineno());
582:       assertFalse(node0.isHook());
583:       assertFalse(node0.isThrow());
584:       assertFalse(node0.isBreak());
585:       assertFalse(node0.isThis());
586:       assertFalse(node0.isFalse());
587:       assertFalse(node0.isComma());
588:       assertFalse(node0.isCase());
589:       assertFalse(node0.isAnd());
590:       assertFalse(node0.isGetProp());
591:       assertTrue(node0.isNumber());
592:       assertFalse(node0.isSwitch());
593:       assertFalse(node0.isString());
594:       assertFalse(node0.isScript());
595:       assertFalse(node0.isObjectLit());
596:       assertFalse(node0.isNot());
597:       assertFalse(node0.isGetterDef());
598:       assertFalse(node0.hasOneChild());
599:       assertFalse(node0.isCast());
600:       assertFalse(node0.isTry());
601:       assertFalse(node0.isRegExp());
602:       assertFalse(node0.isFor());
603:       assertFalse(node0.isWith());
604:       assertFalse(node0.isFunction());
605:       assertFalse(node0.isInstanceOf());
606:       assertFalse(node0.hasMoreThanOneChild());
607:       assertFalse(node0.isIn());
608:       assertFalse(node0.isCatch());
609:       assertFalse(node0.isIf());
610:       assertEquals(0, node0.getCharno());
611:       assertFalse(node0.isSetterDef());
612:       assertFalse(node0.isInc());
613:       assertFalse(node0.isNE());
614:       assertFalse(node1.isSetterDef());
615:       assertFalse(node1.isNull());
616:       assertFalse(node1.isParamList());
617:       assertFalse(node1.isVar());
618:       assertFalse(node1.isDefaultCase());
619:       assertFalse(node1.isNew());
620:       assertFalse(node1.isVoid());
621:       assertFalse(node1.isTrue());
622:       assertFalse(node1.isBlock());
623:       assertFalse(node1.isAdd());
624:       assertFalse(node1.isRegExp());
625:       assertFalse(node1.isCall());
626:       assertFalse(node1.isName());
627:       assertFalse(node1.hasMoreThanOneChild());
628:       assertFalse(node1.isCatch());
629:       assertFalse(node1.isDelProp());
630:       assertFalse(node1.isIf());
631:       assertTrue(node1.hasChildren());
632:       assertFalse(node1.isAssignAdd());
633:       assertFalse(node1.isGetterDef());
634:       assertFalse(node1.isNumber());
635:       assertFalse(node1.isLabel());
636:       assertFalse(node1.isOr());
637:       assertEquals(1, node1.getChildCount());
638:       assertFalse(node1.isEmpty());
639:       assertFalse(node1.isFor());
640:       assertFalse(node1.isDo());
641:       assertFalse(node1.isTry());
642:       assertFalse(node1.isCase());
643:       assertFalse(node1.isSwitch());
644:       assertFalse(node1.isScript());
645:       assertFalse(node1.isStringKey());
646:       assertFalse(node1.isArrayLit());
647:       assertFalse(node1.isLabelName());
648:       assertFalse(node1.isGetProp());
649:       assertFalse(node1.isThis());
650:       assertFalse(node1.isComma());
651:       assertFalse(node1.isThrow());
652:       assertFalse(node1.isObjectLit());
653:       assertFalse(node1.isExprResult());
654:       assertEquals(0, node1.getType());
655:       assertFalse(node1.isInc());
656:       assertFalse(node1.isWith());
657:       assertFalse(node1.isHook());
658:       assertEquals(55, node1.getLineno());
659:       assertFalse(node1.isGetElem());
660:       assertEquals(8, node1.getCharno());
661:       assertFalse(node1.isInstanceOf());
662:       assertFalse(node1.isBreak());
663:       assertFalse(node1.isNE());
664:       assertFalse(node1.isIn());
665:       assertTrue(node1.hasOneChild());
666:       assertFalse(node1.isReturn());
667:       assertFalse(node1.isTypeOf());
668:       assertFalse(node1.isAssign());
669:       assertFalse(node1.isDec());
670:       assertFalse(node1.isString());
671:       assertFalse(node1.isWhile());
672:       assertFalse(node1.isDebugger());
673:       assertFalse(node1.isFunction());
674:       assertFalse(node1.isNot());
675:       assertEquals(225288, node1.getSourcePosition());
676:       assertFalse(node1.isAnd());
677:       assertFalse(node1.isContinue());
678:       assertFalse(node1.isFalse());
679:       assertFalse(node1.isCast());
680:       assertFalse(boolean0);
681:       assertEquals(32, Node.INCRDECR_PROP);
682:       assertEquals(46, Node.IS_NAMESPACE);
683:       assertEquals(51, Node.STATIC_SOURCE_FILE);
684:       assertEquals(2, Node.POST_FLAG);
685:       assertEquals(29, Node.JSDOC_INFO_PROP);
686:       assertEquals(30, Node.VAR_ARGS_NAME);
687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
688:       assertEquals(1, Node.DECR_FLAG);
689:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
690:       assertEquals(47, Node.IS_DISPATCHER);
691:       assertEquals(12, Node.COLUMN_BITS);
692:       assertEquals(57, Node.LAST_PROP);
693:       assertEquals(52, Node.LENGTH);
694:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
695:       assertEquals(53, Node.INPUT_ID);
696:       assertEquals(57, Node.REFLECTED_OBJECT);
697:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
698:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
699:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
700:       assertEquals(49, Node.DIRECT_EVAL);
701:       assertEquals(36, Node.QUOTED_PROP);
702:       assertEquals(37, Node.OPT_ARG_NAME);
703:       assertEquals(48, Node.DIRECTIVES);
704:       assertEquals(56, Node.CHANGE_TIME);
705:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
706:       assertEquals(55, Node.INFERRED_FUNCTION);
707:       assertEquals(8, Node.FLAG_NO_THROWS);
708:       assertEquals(39, Node.EMPTY_BLOCK);
709:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
710:       assertEquals(4095, Node.COLUMN_MASK);
711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
712:       assertEquals(40, Node.ORIGINALNAME_PROP);
713:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
714:       assertEquals(50, Node.FREE_CALL);
715:       assertEquals(54, Node.SLASH_V);
716:       assertEquals(43, Node.IS_CONSTANT_NAME);
717:       assertEquals(54, Node.SLASH_V);
718:       assertEquals(15, Node.NO_SIDE_EFFECTS);
719:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
720:       assertEquals(49, Node.DIRECT_EVAL);
721:       assertEquals(1, Node.DECR_FLAG);
722:       assertEquals(57, Node.LAST_PROP);
723:       assertEquals(51, Node.STATIC_SOURCE_FILE);
724:       assertEquals(46, Node.IS_NAMESPACE);
725:       assertEquals(57, Node.REFLECTED_OBJECT);
726:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
727:       assertEquals(50, Node.FREE_CALL);
728:       assertEquals(52, Node.LENGTH);
729:       assertEquals(2, Node.POST_FLAG);
730:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
731:       assertEquals(39, Node.EMPTY_BLOCK);
732:       assertEquals(47, Node.IS_DISPATCHER);
733:       assertEquals(40, Node.ORIGINALNAME_PROP);
734:       assertEquals(30, Node.VAR_ARGS_NAME);
735:       assertEquals(36, Node.QUOTED_PROP);
736:       assertEquals(43, Node.IS_CONSTANT_NAME);
737:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
738:       assertEquals(55, Node.INFERRED_FUNCTION);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(29, Node.JSDOC_INFO_PROP);
741:       assertEquals(53, Node.INPUT_ID);
742:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
745:       assertEquals(56, Node.CHANGE_TIME);
746:       assertEquals(37, Node.OPT_ARG_NAME);
747:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
748:       assertEquals(48, Node.DIRECTIVES);
749:       assertEquals(32, Node.INCRDECR_PROP);
750:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
751:       assertEquals(12, Node.COLUMN_BITS);
752:       assertEquals(4095, Node.COLUMN_MASK);
753:       
754:       boolean boolean1 = node0.isEquivalentToShallow(node1);
755:       assertFalse(node0.equals((Object)node1));
756:       assertFalse(node1.equals((Object)node0));
757:       assertTrue(boolean1 == boolean0);
758:       assertFalse(node0.isCall());
759:       assertFalse(node0.isAdd());
760:       assertFalse(node0.isVar());
761:       assertFalse(node0.isNew());
762:       assertFalse(node0.isStringKey());
763:       assertFalse(node0.isName());
764:       assertFalse(node0.isWhile());
765:       assertFalse(node0.isBlock());
766:       assertEquals(39, node0.getType());
767:       assertFalse(node0.isContinue());
768:       assertEquals(0, node0.getChildCount());
769:       assertFalse(node0.isReturn());
770:       assertFalse(node0.isParamList());
771:       assertFalse(node0.isDebugger());
772:       assertFalse(node0.isArrayLit());
773:       assertFalse(node0.isGetElem());
774:       assertEquals(11321344, node0.getSourcePosition());
775:       assertFalse(node0.isDelProp());
776:       assertFalse(node0.isVoid());
777:       assertFalse(node0.isLabelName());
778:       assertFalse(node0.isTypeOf());
779:       assertFalse(node0.isDec());
780:       assertFalse(node0.hasChildren());
781:       assertFalse(node0.isDefaultCase());
782:       assertFalse(node0.isExprResult());
783:       assertFalse(node0.isLabel());
784:       assertFalse(node0.isAssign());
785:       assertFalse(node0.isAssignAdd());
786:       assertFalse(node0.isDo());
787:       assertFalse(node0.isNull());
788:       assertFalse(node0.isTrue());
789:       assertFalse(node0.isEmpty());
790:       assertFalse(node0.isOr());
791:       assertEquals(2764, node0.getLineno());
792:       assertFalse(node0.isHook());
793:       assertFalse(node0.isThrow());
794:       assertFalse(node0.isBreak());
795:       assertFalse(node0.isThis());
796:       assertFalse(node0.isFalse());
797:       assertFalse(node0.isComma());
798:       assertFalse(node0.isCase());
799:       assertFalse(node0.isAnd());
800:       assertFalse(node0.isGetProp());
801:       assertTrue(node0.isNumber());
802:       assertFalse(node0.isSwitch());
803:       assertFalse(node0.isString());
804:       assertFalse(node0.isScript());
805:       assertFalse(node0.isObjectLit());
806:       assertFalse(node0.isNot());
807:       assertFalse(node0.isGetterDef());
808:       assertFalse(node0.hasOneChild());
809:       assertFalse(node0.isCast());
810:       assertFalse(node0.isTry());
811:       assertFalse(node0.isRegExp());
812:       assertFalse(node0.isFor());
813:       assertFalse(node0.isWith());
814:       assertFalse(node0.isFunction());
815:       assertFalse(node0.isInstanceOf());
816:       assertFalse(node0.hasMoreThanOneChild());
817:       assertFalse(node0.isIn());
818:       assertFalse(node0.isCatch());
819:       assertFalse(node0.isIf());
820:       assertEquals(0, node0.getCharno());
821:       assertFalse(node0.isSetterDef());
822:       assertFalse(node0.isInc());
823:       assertFalse(node0.isNE());
824:       assertFalse(node1.isSetterDef());
825:       assertFalse(node1.isNull());
826:       assertFalse(node1.isParamList());
827:       assertFalse(node1.isVar());
828:       assertFalse(node1.isDefaultCase());
829:       assertFalse(node1.isNew());
830:       assertFalse(node1.isVoid());
831:       assertFalse(node1.isTrue());
832:       assertFalse(node1.isBlock());
833:       assertFalse(node1.isAdd());
834:       assertFalse(node1.isRegExp());
835:       assertFalse(node1.isCall());
836:       assertFalse(node1.isName());
837:       assertFalse(node1.hasMoreThanOneChild());
838:       assertFalse(node1.isCatch());
839:       assertFalse(node1.isDelProp());
840:       assertFalse(node1.isIf());
841:       assertTrue(node1.hasChildren());
842:       assertFalse(node1.isAssignAdd());
843:       assertFalse(node1.isGetterDef());
844:       assertFalse(node1.isNumber());
845:       assertFalse(node1.isLabel());
846:       assertFalse(node1.isOr());
847:       assertEquals(1, node1.getChildCount());
848:       assertFalse(node1.isEmpty());
849:       assertFalse(node1.isFor());
850:       assertFalse(node1.isDo());
851:       assertFalse(node1.isTry());
852:       assertFalse(node1.isCase());
853:       assertFalse(node1.isSwitch());
854:       assertFalse(node1.isScript());
855:       assertFalse(node1.isStringKey());
856:       assertFalse(node1.isArrayLit());
857:       assertFalse(node1.isLabelName());
858:       assertFalse(node1.isGetProp());
859:       assertFalse(node1.isThis());
860:       assertFalse(node1.isComma());
861:       assertFalse(node1.isThrow());
862:       assertFalse(node1.isObjectLit());
863:       assertFalse(node1.isExprResult());
864:       assertEquals(0, node1.getType());
865:       assertFalse(node1.isInc());
866:       assertFalse(node1.isWith());
867:       assertFalse(node1.isHook());
868:       assertEquals(55, node1.getLineno());
869:       assertFalse(node1.isGetElem());
870:       assertEquals(8, node1.getCharno());
871:       assertFalse(node1.isInstanceOf());
872:       assertFalse(node1.isBreak());
873:       assertFalse(node1.isNE());
874:       assertFalse(node1.isIn());
875:       assertTrue(node1.hasOneChild());
876:       assertFalse(node1.isReturn());
877:       assertFalse(node1.isTypeOf());
878:       assertFalse(node1.isAssign());
879:       assertFalse(node1.isDec());
880:       assertFalse(node1.isString());
881:       assertFalse(node1.isWhile());
882:       assertFalse(node1.isDebugger());
883:       assertFalse(node1.isFunction());
884:       assertFalse(node1.isNot());
885:       assertEquals(225288, node1.getSourcePosition());
886:       assertFalse(node1.isAnd());
887:       assertFalse(node1.isContinue());
888:       assertFalse(node1.isFalse());
889:       assertFalse(node1.isCast());
890:       assertFalse(boolean1);
891:       assertEquals(32, Node.INCRDECR_PROP);
892:       assertEquals(46, Node.IS_NAMESPACE);
893:       assertEquals(51, Node.STATIC_SOURCE_FILE);
894:       assertEquals(2, Node.POST_FLAG);
895:       assertEquals(29, Node.JSDOC_INFO_PROP);
896:       assertEquals(30, Node.VAR_ARGS_NAME);
897:       assertEquals(15, Node.NO_SIDE_EFFECTS);
898:       assertEquals(1, Node.DECR_FLAG);
899:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
900:       assertEquals(47, Node.IS_DISPATCHER);
901:       assertEquals(12, Node.COLUMN_BITS);
902:       assertEquals(57, Node.LAST_PROP);
903:       assertEquals(52, Node.LENGTH);
904:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
905:       assertEquals(53, Node.INPUT_ID);
906:       assertEquals(57, Node.REFLECTED_OBJECT);
907:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
908:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
909:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
910:       assertEquals(49, Node.DIRECT_EVAL);
911:       assertEquals(36, Node.QUOTED_PROP);
912:       assertEquals(37, Node.OPT_ARG_NAME);
913:       assertEquals(48, Node.DIRECTIVES);
914:       assertEquals(56, Node.CHANGE_TIME);
915:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
916:       assertEquals(55, Node.INFERRED_FUNCTION);
917:       assertEquals(8, Node.FLAG_NO_THROWS);
918:       assertEquals(39, Node.EMPTY_BLOCK);
919:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
920:       assertEquals(4095, Node.COLUMN_MASK);
921:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
922:       assertEquals(40, Node.ORIGINALNAME_PROP);
923:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
924:       assertEquals(50, Node.FREE_CALL);
925:       assertEquals(54, Node.SLASH_V);
926:       assertEquals(43, Node.IS_CONSTANT_NAME);
927:       assertEquals(54, Node.SLASH_V);
928:       assertEquals(15, Node.NO_SIDE_EFFECTS);
929:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
930:       assertEquals(49, Node.DIRECT_EVAL);
931:       assertEquals(1, Node.DECR_FLAG);
932:       assertEquals(57, Node.LAST_PROP);
933:       assertEquals(51, Node.STATIC_SOURCE_FILE);
934:       assertEquals(46, Node.IS_NAMESPACE);
935:       assertEquals(57, Node.REFLECTED_OBJECT);
936:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
937:       assertEquals(50, Node.FREE_CALL);
938:       assertEquals(52, Node.LENGTH);
939:       assertEquals(2, Node.POST_FLAG);
940:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
941:       assertEquals(39, Node.EMPTY_BLOCK);
942:       assertEquals(47, Node.IS_DISPATCHER);
943:       assertEquals(40, Node.ORIGINALNAME_PROP);
944:       assertEquals(30, Node.VAR_ARGS_NAME);
945:       assertEquals(36, Node.QUOTED_PROP);
946:       assertEquals(43, Node.IS_CONSTANT_NAME);
947:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
948:       assertEquals(55, Node.INFERRED_FUNCTION);
949:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
950:       assertEquals(29, Node.JSDOC_INFO_PROP);
951:       assertEquals(53, Node.INPUT_ID);
952:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
953:       assertEquals(8, Node.FLAG_NO_THROWS);
954:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
955:       assertEquals(56, Node.CHANGE_TIME);
956:       assertEquals(37, Node.OPT_ARG_NAME);
957:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
958:       assertEquals(48, Node.DIRECTIVES);
959:       assertEquals(32, Node.INCRDECR_PROP);
960:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
961:       assertEquals(12, Node.COLUMN_BITS);
962:       assertEquals(4095, Node.COLUMN_MASK);
963:       
964:       node1.setChangeTime(0);
965:       assertFalse(node0.equals((Object)node1));
966:       assertFalse(node1.equals((Object)node0));
967:       assertFalse(node0.isCall());
968:       assertFalse(node0.isAdd());
969:       assertFalse(node0.isVar());
970:       assertFalse(node0.isNew());
971:       assertFalse(node0.isStringKey());
972:       assertFalse(node0.isName());
973:       assertFalse(node0.isWhile());
974:       assertFalse(node0.isBlock());
975:       assertEquals(39, node0.getType());
976:       assertFalse(node0.isContinue());
977:       assertEquals(0, node0.getChildCount());
978:       assertFalse(node0.isReturn());
979:       assertFalse(node0.isParamList());
980:       assertFalse(node0.isDebugger());
981:       assertFalse(node0.isArrayLit());
982:       assertFalse(node0.isGetElem());
983:       assertEquals(11321344, node0.getSourcePosition());
984:       assertFalse(node0.isDelProp());
985:       assertFalse(node0.isVoid());
986:       assertFalse(node0.isLabelName());
987:       assertFalse(node0.isTypeOf());
988:       assertFalse(node0.isDec());
989:       assertFalse(node0.hasChildren());
990:       assertFalse(node0.isDefaultCase());
991:       assertFalse(node0.isExprResult());
992:       assertFalse(node0.isLabel());
993:       assertFalse(node0.isAssign());
994:       assertFalse(node0.isAssignAdd());
995:       assertFalse(node0.isDo());
996:       assertFalse(node0.isNull());
997:       assertFalse(node0.isTrue());
998:       assertFalse(node0.isEmpty());
999:       assertFalse(node0.isOr());
1000:       assertEquals(2764, node0.getLineno());
1001:       assertFalse(node0.isHook());
1002:       assertFalse(node0.isThrow());
1003:       assertFalse(node0.isBreak());
1004:       assertFalse(node0.isThis());
1005:       assertFalse(node0.isFalse());
1006:       assertFalse(node0.isComma());
1007:       assertFalse(node0.isCase());
1008:       assertFalse(node0.isAnd());
1009:       assertFalse(node0.isGetProp());
1010:       assertTrue(node0.isNumber());
1011:       assertFalse(node0.isSwitch());
1012:       assertFalse(node0.isString());
1013:       assertFalse(node0.isScript());
1014:       assertFalse(node0.isObjectLit());
1015:       assertFalse(node0.isNot());
1016:       assertFalse(node0.isGetterDef());
1017:       assertFalse(node0.hasOneChild());
1018:       assertFalse(node0.isCast());
1019:       assertFalse(node0.isTry());
1020:       assertFalse(node0.isRegExp());
1021:       assertFalse(node0.isFor());
1022:       assertFalse(node0.isWith());
1023:       assertFalse(node0.isFunction());
1024:       assertFalse(node0.isInstanceOf());
1025:       assertFalse(node0.hasMoreThanOneChild());
1026:       assertFalse(node0.isIn());
1027:       assertFalse(node0.isCatch());
1028:       assertFalse(node0.isIf());
1029:       assertEquals(0, node0.getCharno());
1030:       assertFalse(node0.isSetterDef());
1031:       assertFalse(node0.isInc());
1032:       assertFalse(node0.isNE());
1033:       assertFalse(node1.isSetterDef());
1034:       assertFalse(node1.isNull());
1035:       assertFalse(node1.isParamList());
1036:       assertFalse(node1.isVar());
1037:       assertFalse(node1.isDefaultCase());
1038:       assertFalse(node1.isNew());
1039:       assertFalse(node1.isVoid());
1040:       assertFalse(node1.isTrue());
1041:       assertFalse(node1.isBlock());
1042:       assertFalse(node1.isAdd());
1043:       assertFalse(node1.isRegExp());
1044:       assertFalse(node1.isCall());
1045:       assertFalse(node1.isName());
1046:       assertFalse(node1.hasMoreThanOneChild());
1047:       assertFalse(node1.isCatch());
1048:       assertFalse(node1.isDelProp());
1049:       assertFalse(node1.isIf());
1050:       assertTrue(node1.hasChildren());
1051:       assertFalse(node1.isAssignAdd());
1052:       assertFalse(node1.isGetterDef());
1053:       assertFalse(node1.isNumber());
1054:       assertFalse(node1.isLabel());
1055:       assertFalse(node1.isOr());
1056:       assertEquals(1, node1.getChildCount());
1057:       assertFalse(node1.isEmpty());
1058:       assertFalse(node1.isFor());
1059:       assertFalse(node1.isDo());
1060:       assertFalse(node1.isTry());
1061:       assertFalse(node1.isCase());
1062:       assertFalse(node1.isSwitch());
1063:       assertFalse(node1.isScript());
1064:       assertFalse(node1.isStringKey());
1065:       assertFalse(node1.isArrayLit());
1066:       assertFalse(node1.isLabelName());
1067:       assertFalse(node1.isGetProp());
1068:       assertFalse(node1.isThis());
1069:       assertFalse(node1.isComma());
1070:       assertFalse(node1.isThrow());
1071:       assertFalse(node1.isObjectLit());
1072:       assertFalse(node1.isExprResult());
1073:       assertEquals(0, node1.getType());
1074:       assertFalse(node1.isInc());
1075:       assertFalse(node1.isWith());
1076:       assertFalse(node1.isHook());
1077:       assertEquals(55, node1.getLineno());
1078:       assertFalse(node1.isGetElem());
1079:       assertEquals(8, node1.getCharno());
1080:       assertFalse(node1.isInstanceOf());
1081:       assertFalse(node1.isBreak());
1082:       assertFalse(node1.isNE());
1083:       assertFalse(node1.isIn());
1084:       assertTrue(node1.hasOneChild());
1085:       assertFalse(node1.isReturn());
1086:       assertFalse(node1.isTypeOf());
1087:       assertFalse(node1.isAssign());
1088:       assertFalse(node1.isDec());
1089:       assertFalse(node1.isString());
1090:       assertFalse(node1.isWhile());
1091:       assertFalse(node1.isDebugger());
1092:       assertFalse(node1.isFunction());
1093:       assertFalse(node1.isNot());
1094:       assertEquals(225288, node1.getSourcePosition());
1095:       assertFalse(node1.isAnd());
1096:       assertFalse(node1.isContinue());
1097:       assertFalse(node1.isFalse());
1098:       assertFalse(node1.isCast());
1099:       assertEquals(32, Node.INCRDECR_PROP);
1100:       assertEquals(46, Node.IS_NAMESPACE);
1101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1102:       assertEquals(2, Node.POST_FLAG);
1103:       assertEquals(29, Node.JSDOC_INFO_PROP);
1104:       assertEquals(30, Node.VAR_ARGS_NAME);
1105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1106:       assertEquals(1, Node.DECR_FLAG);
1107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1108:       assertEquals(47, Node.IS_DISPATCHER);
1109:       assertEquals(12, Node.COLUMN_BITS);
1110:       assertEquals(57, Node.LAST_PROP);
1111:       assertEquals(52, Node.LENGTH);
1112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1113:       assertEquals(53, Node.INPUT_ID);
1114:       assertEquals(57, Node.REFLECTED_OBJECT);
1115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1118:       assertEquals(49, Node.DIRECT_EVAL);
1119:       assertEquals(36, Node.QUOTED_PROP);
1120:       assertEquals(37, Node.OPT_ARG_NAME);
1121:       assertEquals(48, Node.DIRECTIVES);
1122:       assertEquals(56, Node.CHANGE_TIME);
1123:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1124:       assertEquals(55, Node.INFERRED_FUNCTION);
1125:       assertEquals(8, Node.FLAG_NO_THROWS);
1126:       assertEquals(39, Node.EMPTY_BLOCK);
1127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1128:       assertEquals(4095, Node.COLUMN_MASK);
1129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1130:       assertEquals(40, Node.ORIGINALNAME_PROP);
1131:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1132:       assertEquals(50, Node.FREE_CALL);
1133:       assertEquals(54, Node.SLASH_V);
1134:       assertEquals(43, Node.IS_CONSTANT_NAME);
1135:       assertEquals(54, Node.SLASH_V);
1136:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1138:       assertEquals(49, Node.DIRECT_EVAL);
1139:       assertEquals(1, Node.DECR_FLAG);
1140:       assertEquals(57, Node.LAST_PROP);
1141:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1142:       assertEquals(46, Node.IS_NAMESPACE);
1143:       assertEquals(57, Node.REFLECTED_OBJECT);
1144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1145:       assertEquals(50, Node.FREE_CALL);
1146:       assertEquals(52, Node.LENGTH);
1147:       assertEquals(2, Node.POST_FLAG);
1148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1149:       assertEquals(39, Node.EMPTY_BLOCK);
1150:       assertEquals(47, Node.IS_DISPATCHER);
1151:       assertEquals(40, Node.ORIGINALNAME_PROP);
1152:       assertEquals(30, Node.VAR_ARGS_NAME);
1153:       assertEquals(36, Node.QUOTED_PROP);
1154:       assertEquals(43, Node.IS_CONSTANT_NAME);
1155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1156:       assertEquals(55, Node.INFERRED_FUNCTION);
1157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1158:       assertEquals(29, Node.JSDOC_INFO_PROP);
1159:       assertEquals(53, Node.INPUT_ID);
1160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1161:       assertEquals(8, Node.FLAG_NO_THROWS);
1162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1163:       assertEquals(56, Node.CHANGE_TIME);
1164:       assertEquals(37, Node.OPT_ARG_NAME);
1165:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1166:       assertEquals(48, Node.DIRECTIVES);
1167:       assertEquals(32, Node.INCRDECR_PROP);
1168:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1169:       assertEquals(12, Node.COLUMN_BITS);
1170:       assertEquals(4095, Node.COLUMN_MASK);
1171:   }
1172: }
RegularFileObject[/tmp/EvoSuite_454_1628158465401/com/google/javascript/rhino/Node_454_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:25 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_454_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_454_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_454_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:25.567 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-583.009670238), 2764, 0);
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(11321344, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(2764, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertNotNull(node0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node1 = new Node(0, node0, 55, 8);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(11321344, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(2764, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(55, node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(8, node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertEquals(225288, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertNotNull(node1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(11321344, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(2764, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertNotNull(iterable0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

node0.putBooleanProp(2764, false);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(11321344, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(2764, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean0 = node1.isVarArgs();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(11321344, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(2764, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(55, node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(8, node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertEquals(225288, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean1 = node0.isEquivalentToShallow(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(11321344, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(2764, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(55, node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(8, node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertEquals(225288, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(boolean1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

node1.setChangeTime(0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(11321344, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(2764, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(55, node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(8, node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertEquals(225288, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);


[MASTER] 10:14:26.745 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_464_1628158466646/com/google/javascript/rhino/Node_464_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_464_1628158466646/com/google/javascript/rhino/Node_464_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:26.745 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:26.745 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:26.745 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 650
[MASTER] 10:14:26.746 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_464_1628158466646/com/google/javascript/rhino/Node_464_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:26 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_464_tmp__ESTest extends Node_464_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString((-616), " gtDkB.s|(CwY");
21:       assertFalse(node0.isGetElem());
22:       assertFalse(node0.isAssign());
23:       assertFalse(node0.isLabelName());
24:       assertFalse(node0.hasOneChild());
25:       assertFalse(node0.isNumber());
26:       assertFalse(node0.isTypeOf());
27:       assertFalse(node0.isCast());
28:       assertFalse(node0.isLabel());
29:       assertFalse(node0.isAssignAdd());
30:       assertFalse(node0.isDec());
31:       assertFalse(node0.hasChildren());
32:       assertFalse(node0.isReturn());
33:       assertFalse(node0.isWith());
34:       assertFalse(node0.isDo());
35:       assertFalse(node0.isInstanceOf());
36:       assertFalse(node0.hasMoreThanOneChild());
37:       assertFalse(node0.isExprResult());
38:       assertEquals((-1), node0.getLineno());
39:       assertFalse(node0.isOr());
40:       assertFalse(node0.isStringKey());
41:       assertFalse(node0.isAdd());
42:       assertFalse(node0.isNew());
43:       assertFalse(node0.isBlock());
44:       assertEquals(0, node0.getChildCount());
45:       assertFalse(node0.isHook());
46:       assertFalse(node0.isThis());
47:       assertFalse(node0.isVar());
48:       assertFalse(node0.isCase());
49:       assertFalse(node0.isScript());
50:       assertEquals((-1), node0.getCharno());
51:       assertFalse(node0.isSwitch());
52:       assertFalse(node0.isParamList());
53:       assertEquals((-616), node0.getType());
54:       assertFalse(node0.isDelProp());
55:       assertFalse(node0.isGetterDef());
56:       assertFalse(node0.isArrayLit());
57:       assertFalse(node0.isEmpty());
58:       assertFalse(node0.isFunction());
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isFor());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isIn());
64:       assertFalse(node0.isInc());
65:       assertFalse(node0.isCatch());
66:       assertFalse(node0.isVoid());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isTrue());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isFalse());
72:       assertFalse(node0.isName());
73:       assertFalse(node0.isBreak());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isSetterDef());
76:       assertFalse(node0.isGetProp());
77:       assertFalse(node0.isComma());
78:       assertFalse(node0.isWhile());
79:       assertFalse(node0.isThrow());
80:       assertFalse(node0.isAnd());
81:       assertFalse(node0.isContinue());
82:       assertFalse(node0.isObjectLit());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isString());
85:       assertFalse(node0.isDebugger());
86:       assertEquals((-1), node0.getSourcePosition());
87:       assertNotNull(node0);
88:       assertEquals(55, Node.INFERRED_FUNCTION);
89:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
90:       assertEquals(4095, Node.COLUMN_MASK);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(39, Node.EMPTY_BLOCK);
95:       assertEquals(53, Node.INPUT_ID);
96:       assertEquals(40, Node.ORIGINALNAME_PROP);
97:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
98:       assertEquals(50, Node.FREE_CALL);
99:       assertEquals(47, Node.IS_DISPATCHER);
100:       assertEquals(2, Node.POST_FLAG);
101:       assertEquals(54, Node.SLASH_V);
102:       assertEquals(43, Node.IS_CONSTANT_NAME);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(1, Node.DECR_FLAG);
105:       assertEquals(30, Node.VAR_ARGS_NAME);
106:       assertEquals(46, Node.IS_NAMESPACE);
107:       assertEquals(51, Node.STATIC_SOURCE_FILE);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(29, Node.JSDOC_INFO_PROP);
111:       assertEquals(32, Node.INCRDECR_PROP);
112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
114:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(56, Node.CHANGE_TIME);
121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
123:       assertEquals(49, Node.DIRECT_EVAL);
124:       
125:       boolean boolean0 = node0.isVar();
126:       assertFalse(node0.isGetElem());
127:       assertFalse(node0.isAssign());
128:       assertFalse(node0.isLabelName());
129:       assertFalse(node0.hasOneChild());
130:       assertFalse(node0.isNumber());
131:       assertFalse(node0.isTypeOf());
132:       assertFalse(node0.isCast());
133:       assertFalse(node0.isLabel());
134:       assertFalse(node0.isAssignAdd());
135:       assertFalse(node0.isDec());
136:       assertFalse(node0.hasChildren());
137:       assertFalse(node0.isReturn());
138:       assertFalse(node0.isWith());
139:       assertFalse(node0.isDo());
140:       assertFalse(node0.isInstanceOf());
141:       assertFalse(node0.hasMoreThanOneChild());
142:       assertFalse(node0.isExprResult());
143:       assertEquals((-1), node0.getLineno());
144:       assertFalse(node0.isOr());
145:       assertFalse(node0.isStringKey());
146:       assertFalse(node0.isAdd());
147:       assertFalse(node0.isNew());
148:       assertFalse(node0.isBlock());
149:       assertEquals(0, node0.getChildCount());
150:       assertFalse(node0.isHook());
151:       assertFalse(node0.isThis());
152:       assertFalse(node0.isVar());
153:       assertFalse(node0.isCase());
154:       assertFalse(node0.isScript());
155:       assertEquals((-1), node0.getCharno());
156:       assertFalse(node0.isSwitch());
157:       assertFalse(node0.isParamList());
158:       assertEquals((-616), node0.getType());
159:       assertFalse(node0.isDelProp());
160:       assertFalse(node0.isGetterDef());
161:       assertFalse(node0.isArrayLit());
162:       assertFalse(node0.isEmpty());
163:       assertFalse(node0.isFunction());
164:       assertFalse(node0.isTry());
165:       assertFalse(node0.isDefaultCase());
166:       assertFalse(node0.isFor());
167:       assertFalse(node0.isRegExp());
168:       assertFalse(node0.isIn());
169:       assertFalse(node0.isInc());
170:       assertFalse(node0.isCatch());
171:       assertFalse(node0.isVoid());
172:       assertFalse(node0.isNull());
173:       assertFalse(node0.isIf());
174:       assertFalse(node0.isTrue());
175:       assertFalse(node0.isNE());
176:       assertFalse(node0.isFalse());
177:       assertFalse(node0.isName());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.isCall());
180:       assertFalse(node0.isSetterDef());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.isComma());
183:       assertFalse(node0.isWhile());
184:       assertFalse(node0.isThrow());
185:       assertFalse(node0.isAnd());
186:       assertFalse(node0.isContinue());
187:       assertFalse(node0.isObjectLit());
188:       assertFalse(node0.isNot());
189:       assertFalse(node0.isString());
190:       assertFalse(node0.isDebugger());
191:       assertEquals((-1), node0.getSourcePosition());
192:       assertFalse(boolean0);
193:       assertEquals(55, Node.INFERRED_FUNCTION);
194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
195:       assertEquals(4095, Node.COLUMN_MASK);
196:       assertEquals(36, Node.QUOTED_PROP);
197:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(40, Node.ORIGINALNAME_PROP);
202:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
203:       assertEquals(50, Node.FREE_CALL);
204:       assertEquals(47, Node.IS_DISPATCHER);
205:       assertEquals(2, Node.POST_FLAG);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(43, Node.IS_CONSTANT_NAME);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(1, Node.DECR_FLAG);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
213:       assertEquals(52, Node.LENGTH);
214:       assertEquals(57, Node.LAST_PROP);
215:       assertEquals(29, Node.JSDOC_INFO_PROP);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
219:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(57, Node.REFLECTED_OBJECT);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(37, Node.OPT_ARG_NAME);
224:       assertEquals(48, Node.DIRECTIVES);
225:       assertEquals(56, Node.CHANGE_TIME);
226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertEquals(49, Node.DIRECT_EVAL);
229:       
230:       int int0 = node0.getIntProp(64);
231:       assertFalse(node0.isGetElem());
232:       assertFalse(node0.isAssign());
233:       assertFalse(node0.isLabelName());
234:       assertFalse(node0.hasOneChild());
235:       assertFalse(node0.isNumber());
236:       assertFalse(node0.isTypeOf());
237:       assertFalse(node0.isCast());
238:       assertFalse(node0.isLabel());
239:       assertFalse(node0.isAssignAdd());
240:       assertFalse(node0.isDec());
241:       assertFalse(node0.hasChildren());
242:       assertFalse(node0.isReturn());
243:       assertFalse(node0.isWith());
244:       assertFalse(node0.isDo());
245:       assertFalse(node0.isInstanceOf());
246:       assertFalse(node0.hasMoreThanOneChild());
247:       assertFalse(node0.isExprResult());
248:       assertEquals((-1), node0.getLineno());
249:       assertFalse(node0.isOr());
250:       assertFalse(node0.isStringKey());
251:       assertFalse(node0.isAdd());
252:       assertFalse(node0.isNew());
253:       assertFalse(node0.isBlock());
254:       assertEquals(0, node0.getChildCount());
255:       assertFalse(node0.isHook());
256:       assertFalse(node0.isThis());
257:       assertFalse(node0.isVar());
258:       assertFalse(node0.isCase());
259:       assertFalse(node0.isScript());
260:       assertEquals((-1), node0.getCharno());
261:       assertFalse(node0.isSwitch());
262:       assertFalse(node0.isParamList());
263:       assertEquals((-616), node0.getType());
264:       assertFalse(node0.isDelProp());
265:       assertFalse(node0.isGetterDef());
266:       assertFalse(node0.isArrayLit());
267:       assertFalse(node0.isEmpty());
268:       assertFalse(node0.isFunction());
269:       assertFalse(node0.isTry());
270:       assertFalse(node0.isDefaultCase());
271:       assertFalse(node0.isFor());
272:       assertFalse(node0.isRegExp());
273:       assertFalse(node0.isIn());
274:       assertFalse(node0.isInc());
275:       assertFalse(node0.isCatch());
276:       assertFalse(node0.isVoid());
277:       assertFalse(node0.isNull());
278:       assertFalse(node0.isIf());
279:       assertFalse(node0.isTrue());
280:       assertFalse(node0.isNE());
281:       assertFalse(node0.isFalse());
282:       assertFalse(node0.isName());
283:       assertFalse(node0.isBreak());
284:       assertFalse(node0.isCall());
285:       assertFalse(node0.isSetterDef());
286:       assertFalse(node0.isGetProp());
287:       assertFalse(node0.isComma());
288:       assertFalse(node0.isWhile());
289:       assertFalse(node0.isThrow());
290:       assertFalse(node0.isAnd());
291:       assertFalse(node0.isContinue());
292:       assertFalse(node0.isObjectLit());
293:       assertFalse(node0.isNot());
294:       assertFalse(node0.isString());
295:       assertFalse(node0.isDebugger());
296:       assertEquals((-1), node0.getSourcePosition());
297:       assertEquals(0, int0);
298:       assertEquals(55, Node.INFERRED_FUNCTION);
299:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
300:       assertEquals(4095, Node.COLUMN_MASK);
301:       assertEquals(36, Node.QUOTED_PROP);
302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
303:       assertEquals(8, Node.FLAG_NO_THROWS);
304:       assertEquals(39, Node.EMPTY_BLOCK);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(40, Node.ORIGINALNAME_PROP);
307:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
308:       assertEquals(50, Node.FREE_CALL);
309:       assertEquals(47, Node.IS_DISPATCHER);
310:       assertEquals(2, Node.POST_FLAG);
311:       assertEquals(54, Node.SLASH_V);
312:       assertEquals(43, Node.IS_CONSTANT_NAME);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(1, Node.DECR_FLAG);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(46, Node.IS_NAMESPACE);
317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
318:       assertEquals(52, Node.LENGTH);
319:       assertEquals(57, Node.LAST_PROP);
320:       assertEquals(29, Node.JSDOC_INFO_PROP);
321:       assertEquals(32, Node.INCRDECR_PROP);
322:       assertEquals(15, Node.NO_SIDE_EFFECTS);
323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
325:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
326:       assertEquals(57, Node.REFLECTED_OBJECT);
327:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
328:       assertEquals(37, Node.OPT_ARG_NAME);
329:       assertEquals(48, Node.DIRECTIVES);
330:       assertEquals(56, Node.CHANGE_TIME);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(49, Node.DIRECT_EVAL);
334:       
335:       int int1 = node0.getChildCount();
336:       assertTrue(int1 == int0);
337:       assertFalse(node0.isGetElem());
338:       assertFalse(node0.isAssign());
339:       assertFalse(node0.isLabelName());
340:       assertFalse(node0.hasOneChild());
341:       assertFalse(node0.isNumber());
342:       assertFalse(node0.isTypeOf());
343:       assertFalse(node0.isCast());
344:       assertFalse(node0.isLabel());
345:       assertFalse(node0.isAssignAdd());
346:       assertFalse(node0.isDec());
347:       assertFalse(node0.hasChildren());
348:       assertFalse(node0.isReturn());
349:       assertFalse(node0.isWith());
350:       assertFalse(node0.isDo());
351:       assertFalse(node0.isInstanceOf());
352:       assertFalse(node0.hasMoreThanOneChild());
353:       assertFalse(node0.isExprResult());
354:       assertEquals((-1), node0.getLineno());
355:       assertFalse(node0.isOr());
356:       assertFalse(node0.isStringKey());
357:       assertFalse(node0.isAdd());
358:       assertFalse(node0.isNew());
359:       assertFalse(node0.isBlock());
360:       assertEquals(0, node0.getChildCount());
361:       assertFalse(node0.isHook());
362:       assertFalse(node0.isThis());
363:       assertFalse(node0.isVar());
364:       assertFalse(node0.isCase());
365:       assertFalse(node0.isScript());
366:       assertEquals((-1), node0.getCharno());
367:       assertFalse(node0.isSwitch());
368:       assertFalse(node0.isParamList());
369:       assertEquals((-616), node0.getType());
370:       assertFalse(node0.isDelProp());
371:       assertFalse(node0.isGetterDef());
372:       assertFalse(node0.isArrayLit());
373:       assertFalse(node0.isEmpty());
374:       assertFalse(node0.isFunction());
375:       assertFalse(node0.isTry());
376:       assertFalse(node0.isDefaultCase());
377:       assertFalse(node0.isFor());
378:       assertFalse(node0.isRegExp());
379:       assertFalse(node0.isIn());
380:       assertFalse(node0.isInc());
381:       assertFalse(node0.isCatch());
382:       assertFalse(node0.isVoid());
383:       assertFalse(node0.isNull());
384:       assertFalse(node0.isIf());
385:       assertFalse(node0.isTrue());
386:       assertFalse(node0.isNE());
387:       assertFalse(node0.isFalse());
388:       assertFalse(node0.isName());
389:       assertFalse(node0.isBreak());
390:       assertFalse(node0.isCall());
391:       assertFalse(node0.isSetterDef());
392:       assertFalse(node0.isGetProp());
393:       assertFalse(node0.isComma());
394:       assertFalse(node0.isWhile());
395:       assertFalse(node0.isThrow());
396:       assertFalse(node0.isAnd());
397:       assertFalse(node0.isContinue());
398:       assertFalse(node0.isObjectLit());
399:       assertFalse(node0.isNot());
400:       assertFalse(node0.isString());
401:       assertFalse(node0.isDebugger());
402:       assertEquals((-1), node0.getSourcePosition());
403:       assertEquals(0, int1);
404:       assertEquals(55, Node.INFERRED_FUNCTION);
405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
406:       assertEquals(4095, Node.COLUMN_MASK);
407:       assertEquals(36, Node.QUOTED_PROP);
408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
409:       assertEquals(8, Node.FLAG_NO_THROWS);
410:       assertEquals(39, Node.EMPTY_BLOCK);
411:       assertEquals(53, Node.INPUT_ID);
412:       assertEquals(40, Node.ORIGINALNAME_PROP);
413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
414:       assertEquals(50, Node.FREE_CALL);
415:       assertEquals(47, Node.IS_DISPATCHER);
416:       assertEquals(2, Node.POST_FLAG);
417:       assertEquals(54, Node.SLASH_V);
418:       assertEquals(43, Node.IS_CONSTANT_NAME);
419:       assertEquals(12, Node.COLUMN_BITS);
420:       assertEquals(1, Node.DECR_FLAG);
421:       assertEquals(30, Node.VAR_ARGS_NAME);
422:       assertEquals(46, Node.IS_NAMESPACE);
423:       assertEquals(51, Node.STATIC_SOURCE_FILE);
424:       assertEquals(52, Node.LENGTH);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(29, Node.JSDOC_INFO_PROP);
427:       assertEquals(32, Node.INCRDECR_PROP);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
432:       assertEquals(57, Node.REFLECTED_OBJECT);
433:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
434:       assertEquals(37, Node.OPT_ARG_NAME);
435:       assertEquals(48, Node.DIRECTIVES);
436:       assertEquals(56, Node.CHANGE_TIME);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
439:       assertEquals(49, Node.DIRECT_EVAL);
440:       
441:       node0.setLineno(301);
442:       assertFalse(node0.isGetElem());
443:       assertFalse(node0.isAssign());
444:       assertFalse(node0.isLabelName());
445:       assertFalse(node0.hasOneChild());
446:       assertFalse(node0.isNumber());
447:       assertFalse(node0.isTypeOf());
448:       assertFalse(node0.isCast());
449:       assertFalse(node0.isLabel());
450:       assertFalse(node0.isAssignAdd());
451:       assertFalse(node0.isDec());
452:       assertFalse(node0.hasChildren());
453:       assertFalse(node0.isReturn());
454:       assertFalse(node0.isWith());
455:       assertFalse(node0.isDo());
456:       assertFalse(node0.isInstanceOf());
457:       assertFalse(node0.hasMoreThanOneChild());
458:       assertFalse(node0.isExprResult());
459:       assertFalse(node0.isOr());
460:       assertEquals(0, node0.getCharno());
461:       assertFalse(node0.isStringKey());
462:       assertFalse(node0.isAdd());
463:       assertFalse(node0.isNew());
464:       assertFalse(node0.isBlock());
465:       assertEquals(0, node0.getChildCount());
466:       assertFalse(node0.isHook());
467:       assertFalse(node0.isThis());
468:       assertFalse(node0.isVar());
469:       assertFalse(node0.isCase());
470:       assertFalse(node0.isScript());
471:       assertFalse(node0.isSwitch());
472:       assertFalse(node0.isParamList());
473:       assertEquals((-616), node0.getType());
474:       assertFalse(node0.isDelProp());
475:       assertFalse(node0.isGetterDef());
476:       assertFalse(node0.isArrayLit());
477:       assertFalse(node0.isEmpty());
478:       assertFalse(node0.isFunction());
479:       assertFalse(node0.isTry());
480:       assertFalse(node0.isDefaultCase());
481:       assertFalse(node0.isFor());
482:       assertFalse(node0.isRegExp());
483:       assertFalse(node0.isIn());
484:       assertFalse(node0.isInc());
485:       assertFalse(node0.isCatch());
486:       assertFalse(node0.isVoid());
487:       assertFalse(node0.isNull());
488:       assertFalse(node0.isIf());
489:       assertFalse(node0.isTrue());
490:       assertFalse(node0.isNE());
491:       assertFalse(node0.isFalse());
492:       assertFalse(node0.isName());
493:       assertEquals(1232896, node0.getSourcePosition());
494:       assertFalse(node0.isBreak());
495:       assertFalse(node0.isCall());
496:       assertFalse(node0.isSetterDef());
497:       assertFalse(node0.isGetProp());
498:       assertFalse(node0.isComma());
499:       assertEquals(301, node0.getLineno());
500:       assertFalse(node0.isWhile());
501:       assertFalse(node0.isThrow());
502:       assertFalse(node0.isAnd());
503:       assertFalse(node0.isContinue());
504:       assertFalse(node0.isObjectLit());
505:       assertFalse(node0.isNot());
506:       assertFalse(node0.isString());
507:       assertFalse(node0.isDebugger());
508:       assertEquals(55, Node.INFERRED_FUNCTION);
509:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
510:       assertEquals(4095, Node.COLUMN_MASK);
511:       assertEquals(36, Node.QUOTED_PROP);
512:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
513:       assertEquals(8, Node.FLAG_NO_THROWS);
514:       assertEquals(39, Node.EMPTY_BLOCK);
515:       assertEquals(53, Node.INPUT_ID);
516:       assertEquals(40, Node.ORIGINALNAME_PROP);
517:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
518:       assertEquals(50, Node.FREE_CALL);
519:       assertEquals(47, Node.IS_DISPATCHER);
520:       assertEquals(2, Node.POST_FLAG);
521:       assertEquals(54, Node.SLASH_V);
522:       assertEquals(43, Node.IS_CONSTANT_NAME);
523:       assertEquals(12, Node.COLUMN_BITS);
524:       assertEquals(1, Node.DECR_FLAG);
525:       assertEquals(30, Node.VAR_ARGS_NAME);
526:       assertEquals(46, Node.IS_NAMESPACE);
527:       assertEquals(51, Node.STATIC_SOURCE_FILE);
528:       assertEquals(52, Node.LENGTH);
529:       assertEquals(57, Node.LAST_PROP);
530:       assertEquals(29, Node.JSDOC_INFO_PROP);
531:       assertEquals(32, Node.INCRDECR_PROP);
532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
533:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
534:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
535:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
536:       assertEquals(57, Node.REFLECTED_OBJECT);
537:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
538:       assertEquals(37, Node.OPT_ARG_NAME);
539:       assertEquals(48, Node.DIRECTIVES);
540:       assertEquals(56, Node.CHANGE_TIME);
541:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
543:       assertEquals(49, Node.DIRECT_EVAL);
544:       
545:       node0.setSourceFileForTesting("u:+");
546:       assertFalse(node0.isGetElem());
547:       assertFalse(node0.isAssign());
548:       assertFalse(node0.isLabelName());
549:       assertFalse(node0.hasOneChild());
550:       assertFalse(node0.isNumber());
551:       assertFalse(node0.isTypeOf());
552:       assertFalse(node0.isCast());
553:       assertFalse(node0.isLabel());
554:       assertFalse(node0.isAssignAdd());
555:       assertFalse(node0.isDec());
556:       assertFalse(node0.hasChildren());
557:       assertFalse(node0.isReturn());
558:       assertFalse(node0.isWith());
559:       assertFalse(node0.isDo());
560:       assertFalse(node0.isInstanceOf());
561:       assertFalse(node0.hasMoreThanOneChild());
562:       assertFalse(node0.isExprResult());
563:       assertFalse(node0.isOr());
564:       assertEquals(0, node0.getCharno());
565:       assertFalse(node0.isStringKey());
566:       assertFalse(node0.isAdd());
567:       assertFalse(node0.isNew());
568:       assertFalse(node0.isBlock());
569:       assertEquals(0, node0.getChildCount());
570:       assertFalse(node0.isHook());
571:       assertFalse(node0.isThis());
572:       assertFalse(node0.isVar());
573:       assertFalse(node0.isCase());
574:       assertFalse(node0.isScript());
575:       assertFalse(node0.isSwitch());
576:       assertFalse(node0.isParamList());
577:       assertEquals((-616), node0.getType());
578:       assertFalse(node0.isDelProp());
579:       assertFalse(node0.isGetterDef());
580:       assertFalse(node0.isArrayLit());
581:       assertFalse(node0.isEmpty());
582:       assertFalse(node0.isFunction());
583:       assertFalse(node0.isTry());
584:       assertFalse(node0.isDefaultCase());
585:       assertFalse(node0.isFor());
586:       assertFalse(node0.isRegExp());
587:       assertFalse(node0.isIn());
588:       assertFalse(node0.isInc());
589:       assertFalse(node0.isCatch());
590:       assertFalse(node0.isVoid());
591:       assertFalse(node0.isNull());
592:       assertFalse(node0.isIf());
593:       assertFalse(node0.isTrue());
594:       assertFalse(node0.isNE());
595:       assertFalse(node0.isFalse());
596:       assertFalse(node0.isName());
597:       assertEquals(1232896, node0.getSourcePosition());
598:       assertFalse(node0.isBreak());
599:       assertFalse(node0.isCall());
600:       assertFalse(node0.isSetterDef());
601:       assertFalse(node0.isGetProp());
602:       assertFalse(node0.isComma());
603:       assertEquals(301, node0.getLineno());
604:       assertFalse(node0.isWhile());
605:       assertFalse(node0.isThrow());
606:       assertFalse(node0.isAnd());
607:       assertFalse(node0.isContinue());
608:       assertFalse(node0.isObjectLit());
609:       assertFalse(node0.isNot());
610:       assertFalse(node0.isString());
611:       assertFalse(node0.isDebugger());
612:       assertEquals(55, Node.INFERRED_FUNCTION);
613:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
614:       assertEquals(4095, Node.COLUMN_MASK);
615:       assertEquals(36, Node.QUOTED_PROP);
616:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
617:       assertEquals(8, Node.FLAG_NO_THROWS);
618:       assertEquals(39, Node.EMPTY_BLOCK);
619:       assertEquals(53, Node.INPUT_ID);
620:       assertEquals(40, Node.ORIGINALNAME_PROP);
621:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
622:       assertEquals(50, Node.FREE_CALL);
623:       assertEquals(47, Node.IS_DISPATCHER);
624:       assertEquals(2, Node.POST_FLAG);
625:       assertEquals(54, Node.SLASH_V);
626:       assertEquals(43, Node.IS_CONSTANT_NAME);
627:       assertEquals(12, Node.COLUMN_BITS);
628:       assertEquals(1, Node.DECR_FLAG);
629:       assertEquals(30, Node.VAR_ARGS_NAME);
630:       assertEquals(46, Node.IS_NAMESPACE);
631:       assertEquals(51, Node.STATIC_SOURCE_FILE);
632:       assertEquals(52, Node.LENGTH);
633:       assertEquals(57, Node.LAST_PROP);
634:       assertEquals(29, Node.JSDOC_INFO_PROP);
635:       assertEquals(32, Node.INCRDECR_PROP);
636:       assertEquals(15, Node.NO_SIDE_EFFECTS);
637:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
639:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
640:       assertEquals(57, Node.REFLECTED_OBJECT);
641:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
642:       assertEquals(37, Node.OPT_ARG_NAME);
643:       assertEquals(48, Node.DIRECTIVES);
644:       assertEquals(56, Node.CHANGE_TIME);
645:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
647:       assertEquals(49, Node.DIRECT_EVAL);
648:       
649:       Iterable<Node> iterable0 = node0.children();
650:       assertFalse(iterable0.contains(node0));
651:       assertFalse(node0.isGetElem());
652:       assertFalse(node0.isAssign());
653:       assertFalse(node0.isLabelName());
654:       assertFalse(node0.hasOneChild());
655:       assertFalse(node0.isNumber());
656:       assertFalse(node0.isTypeOf());
657:       assertFalse(node0.isCast());
658:       assertFalse(node0.isLabel());
659:       assertFalse(node0.isAssignAdd());
660:       assertFalse(node0.isDec());
661:       assertFalse(node0.hasChildren());
662:       assertFalse(node0.isReturn());
663:       assertFalse(node0.isWith());
664:       assertFalse(node0.isDo());
665:       assertFalse(node0.isInstanceOf());
666:       assertFalse(node0.hasMoreThanOneChild());
667:       assertFalse(node0.isExprResult());
668:       assertFalse(node0.isOr());
669:       assertEquals(0, node0.getCharno());
670:       assertFalse(node0.isStringKey());
671:       assertFalse(node0.isAdd());
672:       assertFalse(node0.isNew());
673:       assertFalse(node0.isBlock());
674:       assertEquals(0, node0.getChildCount());
675:       assertFalse(node0.isHook());
676:       assertFalse(node0.isThis());
677:       assertFalse(node0.isVar());
678:       assertFalse(node0.isCase());
679:       assertFalse(node0.isScript());
680:       assertFalse(node0.isSwitch());
681:       assertFalse(node0.isParamList());
682:       assertEquals((-616), node0.getType());
683:       assertFalse(node0.isDelProp());
684:       assertFalse(node0.isGetterDef());
685:       assertFalse(node0.isArrayLit());
686:       assertFalse(node0.isEmpty());
687:       assertFalse(node0.isFunction());
688:       assertFalse(node0.isTry());
689:       assertFalse(node0.isDefaultCase());
690:       assertFalse(node0.isFor());
691:       assertFalse(node0.isRegExp());
692:       assertFalse(node0.isIn());
693:       assertFalse(node0.isInc());
694:       assertFalse(node0.isCatch());
695:       assertFalse(node0.isVoid());
696:       assertFalse(node0.isNull());
697:       assertFalse(node0.isIf());
698:       assertFalse(node0.isTrue());
699:       assertFalse(node0.isNE());
700:       assertFalse(node0.isFalse());
701:       assertFalse(node0.isName());
702:       assertEquals(1232896, node0.getSourcePosition());
703:       assertFalse(node0.isBreak());
704:       assertFalse(node0.isCall());
705:       assertFalse(node0.isSetterDef());
706:       assertFalse(node0.isGetProp());
707:       assertFalse(node0.isComma());
708:       assertEquals(301, node0.getLineno());
709:       assertFalse(node0.isWhile());
710:       assertFalse(node0.isThrow());
711:       assertFalse(node0.isAnd());
712:       assertFalse(node0.isContinue());
713:       assertFalse(node0.isObjectLit());
714:       assertFalse(node0.isNot());
715:       assertFalse(node0.isString());
716:       assertFalse(node0.isDebugger());
717:       assertNotNull(iterable0);
718:       assertEquals(55, Node.INFERRED_FUNCTION);
719:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
720:       assertEquals(4095, Node.COLUMN_MASK);
721:       assertEquals(36, Node.QUOTED_PROP);
722:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
723:       assertEquals(8, Node.FLAG_NO_THROWS);
724:       assertEquals(39, Node.EMPTY_BLOCK);
725:       assertEquals(53, Node.INPUT_ID);
726:       assertEquals(40, Node.ORIGINALNAME_PROP);
727:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
728:       assertEquals(50, Node.FREE_CALL);
729:       assertEquals(47, Node.IS_DISPATCHER);
730:       assertEquals(2, Node.POST_FLAG);
731:       assertEquals(54, Node.SLASH_V);
732:       assertEquals(43, Node.IS_CONSTANT_NAME);
733:       assertEquals(12, Node.COLUMN_BITS);
734:       assertEquals(1, Node.DECR_FLAG);
735:       assertEquals(30, Node.VAR_ARGS_NAME);
736:       assertEquals(46, Node.IS_NAMESPACE);
737:       assertEquals(51, Node.STATIC_SOURCE_FILE);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(57, Node.LAST_PROP);
740:       assertEquals(29, Node.JSDOC_INFO_PROP);
741:       assertEquals(32, Node.INCRDECR_PROP);
742:       assertEquals(15, Node.NO_SIDE_EFFECTS);
743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
744:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
745:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
746:       assertEquals(57, Node.REFLECTED_OBJECT);
747:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
748:       assertEquals(37, Node.OPT_ARG_NAME);
749:       assertEquals(48, Node.DIRECTIVES);
750:       assertEquals(56, Node.CHANGE_TIME);
751:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
752:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
753:       assertEquals(49, Node.DIRECT_EVAL);
754:       
755:       boolean boolean1 = node0.isWhile();
756:       assertTrue(boolean1 == boolean0);
757:       assertFalse(node0.isGetElem());
758:       assertFalse(node0.isAssign());
759:       assertFalse(node0.isLabelName());
760:       assertFalse(node0.hasOneChild());
761:       assertFalse(node0.isNumber());
762:       assertFalse(node0.isTypeOf());
763:       assertFalse(node0.isCast());
764:       assertFalse(node0.isLabel());
765:       assertFalse(node0.isAssignAdd());
766:       assertFalse(node0.isDec());
767:       assertFalse(node0.hasChildren());
768:       assertFalse(node0.isReturn());
769:       assertFalse(node0.isWith());
770:       assertFalse(node0.isDo());
771:       assertFalse(node0.isInstanceOf());
772:       assertFalse(node0.hasMoreThanOneChild());
773:       assertFalse(node0.isExprResult());
774:       assertFalse(node0.isOr());
775:       assertEquals(0, node0.getCharno());
776:       assertFalse(node0.isStringKey());
777:       assertFalse(node0.isAdd());
778:       assertFalse(node0.isNew());
779:       assertFalse(node0.isBlock());
780:       assertEquals(0, node0.getChildCount());
781:       assertFalse(node0.isHook());
782:       assertFalse(node0.isThis());
783:       assertFalse(node0.isVar());
784:       assertFalse(node0.isCase());
785:       assertFalse(node0.isScript());
786:       assertFalse(node0.isSwitch());
787:       assertFalse(node0.isParamList());
788:       assertEquals((-616), node0.getType());
789:       assertFalse(node0.isDelProp());
790:       assertFalse(node0.isGetterDef());
791:       assertFalse(node0.isArrayLit());
792:       assertFalse(node0.isEmpty());
793:       assertFalse(node0.isFunction());
794:       assertFalse(node0.isTry());
795:       assertFalse(node0.isDefaultCase());
796:       assertFalse(node0.isFor());
797:       assertFalse(node0.isRegExp());
798:       assertFalse(node0.isIn());
799:       assertFalse(node0.isInc());
800:       assertFalse(node0.isCatch());
801:       assertFalse(node0.isVoid());
802:       assertFalse(node0.isNull());
803:       assertFalse(node0.isIf());
804:       assertFalse(node0.isTrue());
805:       assertFalse(node0.isNE());
806:       assertFalse(node0.isFalse());
807:       assertFalse(node0.isName());
808:       assertEquals(1232896, node0.getSourcePosition());
809:       assertFalse(node0.isBreak());
810:       assertFalse(node0.isCall());
811:       assertFalse(node0.isSetterDef());
812:       assertFalse(node0.isGetProp());
813:       assertFalse(node0.isComma());
814:       assertEquals(301, node0.getLineno());
815:       assertFalse(node0.isWhile());
816:       assertFalse(node0.isThrow());
817:       assertFalse(node0.isAnd());
818:       assertFalse(node0.isContinue());
819:       assertFalse(node0.isObjectLit());
820:       assertFalse(node0.isNot());
821:       assertFalse(node0.isString());
822:       assertFalse(node0.isDebugger());
823:       assertFalse(boolean1);
824:       assertEquals(55, Node.INFERRED_FUNCTION);
825:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
826:       assertEquals(4095, Node.COLUMN_MASK);
827:       assertEquals(36, Node.QUOTED_PROP);
828:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
829:       assertEquals(8, Node.FLAG_NO_THROWS);
830:       assertEquals(39, Node.EMPTY_BLOCK);
831:       assertEquals(53, Node.INPUT_ID);
832:       assertEquals(40, Node.ORIGINALNAME_PROP);
833:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
834:       assertEquals(50, Node.FREE_CALL);
835:       assertEquals(47, Node.IS_DISPATCHER);
836:       assertEquals(2, Node.POST_FLAG);
837:       assertEquals(54, Node.SLASH_V);
838:       assertEquals(43, Node.IS_CONSTANT_NAME);
839:       assertEquals(12, Node.COLUMN_BITS);
840:       assertEquals(1, Node.DECR_FLAG);
841:       assertEquals(30, Node.VAR_ARGS_NAME);
842:       assertEquals(46, Node.IS_NAMESPACE);
843:       assertEquals(51, Node.STATIC_SOURCE_FILE);
844:       assertEquals(52, Node.LENGTH);
845:       assertEquals(57, Node.LAST_PROP);
846:       assertEquals(29, Node.JSDOC_INFO_PROP);
847:       assertEquals(32, Node.INCRDECR_PROP);
848:       assertEquals(15, Node.NO_SIDE_EFFECTS);
849:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
850:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
851:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
852:       assertEquals(57, Node.REFLECTED_OBJECT);
853:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
854:       assertEquals(37, Node.OPT_ARG_NAME);
855:       assertEquals(48, Node.DIRECTIVES);
856:       assertEquals(56, Node.CHANGE_TIME);
857:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
858:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
859:       assertEquals(49, Node.DIRECT_EVAL);
860:       
861:       String string0 = node0.getSourceFileName();
862:       assertFalse(node0.isGetElem());
863:       assertFalse(node0.isAssign());
864:       assertFalse(node0.isLabelName());
865:       assertFalse(node0.hasOneChild());
866:       assertFalse(node0.isNumber());
867:       assertFalse(node0.isTypeOf());
868:       assertFalse(node0.isCast());
869:       assertFalse(node0.isLabel());
870:       assertFalse(node0.isAssignAdd());
871:       assertFalse(node0.isDec());
872:       assertFalse(node0.hasChildren());
873:       assertFalse(node0.isReturn());
874:       assertFalse(node0.isWith());
875:       assertFalse(node0.isDo());
876:       assertFalse(node0.isInstanceOf());
877:       assertFalse(node0.hasMoreThanOneChild());
878:       assertFalse(node0.isExprResult());
879:       assertFalse(node0.isOr());
880:       assertEquals(0, node0.getCharno());
881:       assertFalse(node0.isStringKey());
882:       assertFalse(node0.isAdd());
883:       assertFalse(node0.isNew());
884:       assertFalse(node0.isBlock());
885:       assertEquals(0, node0.getChildCount());
886:       assertFalse(node0.isHook());
887:       assertFalse(node0.isThis());
888:       assertFalse(node0.isVar());
889:       assertFalse(node0.isCase());
890:       assertFalse(node0.isScript());
891:       assertFalse(node0.isSwitch());
892:       assertFalse(node0.isParamList());
893:       assertEquals((-616), node0.getType());
894:       assertFalse(node0.isDelProp());
895:       assertFalse(node0.isGetterDef());
896:       assertFalse(node0.isArrayLit());
897:       assertFalse(node0.isEmpty());
898:       assertFalse(node0.isFunction());
899:       assertFalse(node0.isTry());
900:       assertFalse(node0.isDefaultCase());
901:       assertFalse(node0.isFor());
902:       assertFalse(node0.isRegExp());
903:       assertFalse(node0.isIn());
904:       assertFalse(node0.isInc());
905:       assertFalse(node0.isCatch());
906:       assertFalse(node0.isVoid());
907:       assertFalse(node0.isNull());
908:       assertFalse(node0.isIf());
909:       assertFalse(node0.isTrue());
910:       assertFalse(node0.isNE());
911:       assertFalse(node0.isFalse());
912:       assertFalse(node0.isName());
913:       assertEquals(1232896, node0.getSourcePosition());
914:       assertFalse(node0.isBreak());
915:       assertFalse(node0.isCall());
916:       assertFalse(node0.isSetterDef());
917:       assertFalse(node0.isGetProp());
918:       assertFalse(node0.isComma());
919:       assertEquals(301, node0.getLineno());
920:       assertFalse(node0.isWhile());
921:       assertFalse(node0.isThrow());
922:       assertFalse(node0.isAnd());
923:       assertFalse(node0.isContinue());
924:       assertFalse(node0.isObjectLit());
925:       assertFalse(node0.isNot());
926:       assertFalse(node0.isString());
927:       assertFalse(node0.isDebugger());
928:       assertNotNull(string0);
929:       assertEquals("u:+", string0);
930:       assertEquals(55, Node.INFERRED_FUNCTION);
931:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
932:       assertEquals(4095, Node.COLUMN_MASK);
933:       assertEquals(36, Node.QUOTED_PROP);
934:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
935:       assertEquals(8, Node.FLAG_NO_THROWS);
936:       assertEquals(39, Node.EMPTY_BLOCK);
937:       assertEquals(53, Node.INPUT_ID);
938:       assertEquals(40, Node.ORIGINALNAME_PROP);
939:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
940:       assertEquals(50, Node.FREE_CALL);
941:       assertEquals(47, Node.IS_DISPATCHER);
942:       assertEquals(2, Node.POST_FLAG);
943:       assertEquals(54, Node.SLASH_V);
944:       assertEquals(43, Node.IS_CONSTANT_NAME);
945:       assertEquals(12, Node.COLUMN_BITS);
946:       assertEquals(1, Node.DECR_FLAG);
947:       assertEquals(30, Node.VAR_ARGS_NAME);
948:       assertEquals(46, Node.IS_NAMESPACE);
949:       assertEquals(51, Node.STATIC_SOURCE_FILE);
950:       assertEquals(52, Node.LENGTH);
951:       assertEquals(57, Node.LAST_PROP);
952:       assertEquals(29, Node.JSDOC_INFO_PROP);
953:       assertEquals(32, Node.INCRDECR_PROP);
954:       assertEquals(15, Node.NO_SIDE_EFFECTS);
955:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
956:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
957:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
958:       assertEquals(57, Node.REFLECTED_OBJECT);
959:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
960:       assertEquals(37, Node.OPT_ARG_NAME);
961:       assertEquals(48, Node.DIRECTIVES);
962:       assertEquals(56, Node.CHANGE_TIME);
963:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
964:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
965:       assertEquals(49, Node.DIRECT_EVAL);
966:   }
967: }
RegularFileObject[/tmp/EvoSuite_464_1628158466646/com/google/javascript/rhino/Node_464_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:26 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_464_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_464_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_464_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:26.764 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-616), " gtDkB.s|(CwY");
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-616), node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertNotNull(node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean0 = node0.isVar();
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-616), node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

int int0 = node0.getIntProp(64);
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-616), node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(0, int0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

int int1 = node0.getChildCount();
assertTrue(int1 == int0);
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-616), node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertEquals(0, int1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

node0.setLineno(301);
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-616), node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertEquals(1232896, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(301, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

node0.setSourceFileForTesting("u:+");
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-616), node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertEquals(1232896, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(301, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-616), node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertEquals(1232896, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(301, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertNotNull(iterable0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean1 = node0.isWhile();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-616), node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertEquals(1232896, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(301, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(boolean1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

String string0 = node0.getSourceFileName();
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-616), node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertEquals(1232896, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(301, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertNotNull(string0);
assertEquals("u:+", string0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);


[MASTER] 10:14:31.707 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_501_1628158471391/com/google/javascript/rhino/Node_501_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_501_1628158471391/com/google/javascript/rhino/Node_501_tmp__ESTest_scaffolding.java]]
[MASTER] 10:14:31.708 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:31.708 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:14:31.708 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1139
[MASTER] 10:14:31.710 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_501_1628158471391/com/google/javascript/rhino/Node_501_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:14:31 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_501_tmp__ESTest extends Node_501_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(" 9]Dy", (-1313), (-1648));
22:       assertEquals(0, node0.getChildCount());
23:       assertFalse(node0.isDefaultCase());
24:       assertEquals(40, node0.getType());
25:       assertFalse(node0.isTrue());
26:       assertFalse(node0.isDebugger());
27:       assertFalse(node0.isSetterDef());
28:       assertFalse(node0.isTry());
29:       assertFalse(node0.isCall());
30:       assertFalse(node0.isName());
31:       assertFalse(node0.isIf());
32:       assertFalse(node0.isNull());
33:       assertFalse(node0.isBlock());
34:       assertFalse(node0.isFor());
35:       assertFalse(node0.isNE());
36:       assertFalse(node0.isRegExp());
37:       assertFalse(node0.isDelProp());
38:       assertFalse(node0.isVoid());
39:       assertFalse(node0.isCatch());
40:       assertFalse(node0.hasMoreThanOneChild());
41:       assertFalse(node0.isCase());
42:       assertFalse(node0.isDo());
43:       assertFalse(node0.isLabel());
44:       assertFalse(node0.isAssignAdd());
45:       assertEquals((-1), node0.getCharno());
46:       assertTrue(node0.isString());
47:       assertFalse(node0.isNumber());
48:       assertFalse(node0.isNew());
49:       assertFalse(node0.isGetterDef());
50:       assertFalse(node0.isOr());
51:       assertFalse(node0.isEmpty());
52:       assertFalse(node0.isAdd());
53:       assertFalse(node0.isArrayLit());
54:       assertFalse(node0.isLabelName());
55:       assertFalse(node0.isStringKey());
56:       assertFalse(node0.isVar());
57:       assertFalse(node0.isParamList());
58:       assertFalse(node0.isSwitch());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isAnd());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isGetProp());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.hasOneChild());
65:       assertFalse(node0.isAssign());
66:       assertFalse(node0.hasChildren());
67:       assertFalse(node0.isHook());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isComma());
70:       assertFalse(node0.isExprResult());
71:       assertFalse(node0.isTypeOf());
72:       assertFalse(node0.isDec());
73:       assertEquals((-1), node0.getLineno());
74:       assertFalse(node0.isBreak());
75:       assertFalse(node0.isWith());
76:       assertFalse(node0.isInstanceOf());
77:       assertFalse(node0.isGetElem());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isInc());
82:       assertEquals((-1), node0.getSourcePosition());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isFalse());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.isFunction());
87:       assertFalse(node0.isCast());
88:       assertNotNull(node0);
89:       assertEquals(57, Node.REFLECTED_OBJECT);
90:       assertEquals(52, Node.LENGTH);
91:       assertEquals(40, Node.ORIGINALNAME_PROP);
92:       assertEquals(15, Node.NO_SIDE_EFFECTS);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(50, Node.FREE_CALL);
96:       assertEquals(54, Node.SLASH_V);
97:       assertEquals(46, Node.IS_NAMESPACE);
98:       assertEquals(55, Node.INFERRED_FUNCTION);
99:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
100:       assertEquals(39, Node.EMPTY_BLOCK);
101:       assertEquals(2, Node.POST_FLAG);
102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
103:       assertEquals(57, Node.LAST_PROP);
104:       assertEquals(30, Node.VAR_ARGS_NAME);
105:       assertEquals(47, Node.IS_DISPATCHER);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(53, Node.INPUT_ID);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(43, Node.IS_CONSTANT_NAME);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(32, Node.INCRDECR_PROP);
117:       assertEquals(4095, Node.COLUMN_MASK);
118:       assertEquals(1, Node.DECR_FLAG);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       
126:       JSDocInfo jSDocInfo0 = new JSDocInfo();
127:       assertFalse(jSDocInfo0.isIdGenerator());
128:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
129:       assertFalse(jSDocInfo0.isExterns());
130:       assertFalse(jSDocInfo0.isNoShadow());
131:       assertFalse(jSDocInfo0.isExpose());
132:       assertFalse(jSDocInfo0.makesStructs());
133:       assertFalse(jSDocInfo0.isInterface());
134:       assertNull(jSDocInfo0.getDeprecationReason());
135:       assertNull(jSDocInfo0.getBlockDescription());
136:       assertFalse(jSDocInfo0.makesDicts());
137:       assertFalse(jSDocInfo0.isDeprecated());
138:       assertNull(jSDocInfo0.getLendsName());
139:       assertNull(jSDocInfo0.getVersion());
140:       assertFalse(jSDocInfo0.isJaggerModule());
141:       assertFalse(jSDocInfo0.isOverride());
142:       assertFalse(jSDocInfo0.isNoSideEffects());
143:       assertFalse(jSDocInfo0.isJavaDispatch());
144:       assertNull(jSDocInfo0.getMeaning());
145:       assertFalse(jSDocInfo0.isNgInject());
146:       assertEquals("JSDocInfo", jSDocInfo0.toString());
147:       assertFalse(jSDocInfo0.isWizaction());
148:       assertFalse(jSDocInfo0.isConstant());
149:       assertFalse(jSDocInfo0.isMappedIdGenerator());
150:       assertFalse(jSDocInfo0.hasModifies());
151:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
152:       assertFalse(jSDocInfo0.isNoTypeCheck());
153:       assertNull(jSDocInfo0.getLicense());
154:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
155:       assertFalse(jSDocInfo0.isHidden());
156:       assertFalse(jSDocInfo0.isStableIdGenerator());
157:       assertFalse(jSDocInfo0.isJaggerProvide());
158:       assertFalse(jSDocInfo0.hasType());
159:       assertNull(jSDocInfo0.getReturnDescription());
160:       assertNull(jSDocInfo0.getOriginalCommentString());
161:       assertFalse(jSDocInfo0.isDisposes());
162:       assertFalse(jSDocInfo0.hasTypedefType());
163:       assertEquals(0, jSDocInfo0.getParameterCount());
164:       assertFalse(jSDocInfo0.hasBaseType());
165:       assertFalse(jSDocInfo0.hasFileOverview());
166:       assertFalse(jSDocInfo0.hasReturnType());
167:       assertFalse(jSDocInfo0.isNoAlias());
168:       assertFalse(jSDocInfo0.shouldPreserveTry());
169:       assertFalse(jSDocInfo0.isImplicitCast());
170:       assertFalse(jSDocInfo0.isExport());
171:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
172:       assertFalse(jSDocInfo0.containsDeclaration());
173:       assertFalse(jSDocInfo0.hasThisType());
174:       assertFalse(jSDocInfo0.isJaggerInject());
175:       assertFalse(jSDocInfo0.isConstructor());
176:       assertNull(jSDocInfo0.getDescription());
177:       assertNull(jSDocInfo0.getVisibility());
178:       assertFalse(jSDocInfo0.isNoCompile());
179:       assertFalse(jSDocInfo0.isDefine());
180:       assertNull(jSDocInfo0.getFileOverview());
181:       assertFalse(jSDocInfo0.hasEnumParameterType());
182:       assertNotNull(jSDocInfo0);
183:       
184:       Node node1 = node0.setJSDocInfo(jSDocInfo0);
185:       assertEquals(0, node0.getChildCount());
186:       assertFalse(node0.isDefaultCase());
187:       assertEquals(40, node0.getType());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isDebugger());
190:       assertFalse(node0.isSetterDef());
191:       assertFalse(node0.isTry());
192:       assertFalse(node0.isCall());
193:       assertFalse(node0.isName());
194:       assertFalse(node0.isIf());
195:       assertFalse(node0.isNull());
196:       assertFalse(node0.isBlock());
197:       assertFalse(node0.isFor());
198:       assertFalse(node0.isNE());
199:       assertFalse(node0.isRegExp());
200:       assertFalse(node0.isDelProp());
201:       assertFalse(node0.isVoid());
202:       assertFalse(node0.isCatch());
203:       assertFalse(node0.hasMoreThanOneChild());
204:       assertFalse(node0.isCase());
205:       assertFalse(node0.isDo());
206:       assertFalse(node0.isLabel());
207:       assertFalse(node0.isAssignAdd());
208:       assertEquals((-1), node0.getCharno());
209:       assertTrue(node0.isString());
210:       assertFalse(node0.isNumber());
211:       assertFalse(node0.isNew());
212:       assertFalse(node0.isGetterDef());
213:       assertFalse(node0.isOr());
214:       assertFalse(node0.isEmpty());
215:       assertFalse(node0.isAdd());
216:       assertFalse(node0.isArrayLit());
217:       assertFalse(node0.isLabelName());
218:       assertFalse(node0.isStringKey());
219:       assertFalse(node0.isVar());
220:       assertFalse(node0.isParamList());
221:       assertFalse(node0.isSwitch());
222:       assertFalse(node0.isObjectLit());
223:       assertFalse(node0.isAnd());
224:       assertFalse(node0.isNot());
225:       assertFalse(node0.isGetProp());
226:       assertFalse(node0.isScript());
227:       assertFalse(node0.hasOneChild());
228:       assertFalse(node0.isAssign());
229:       assertFalse(node0.hasChildren());
230:       assertFalse(node0.isHook());
231:       assertFalse(node0.isThis());
232:       assertFalse(node0.isComma());
233:       assertFalse(node0.isExprResult());
234:       assertFalse(node0.isTypeOf());
235:       assertFalse(node0.isDec());
236:       assertEquals((-1), node0.getLineno());
237:       assertFalse(node0.isBreak());
238:       assertFalse(node0.isWith());
239:       assertFalse(node0.isInstanceOf());
240:       assertFalse(node0.isGetElem());
241:       assertFalse(node0.isContinue());
242:       assertFalse(node0.isWhile());
243:       assertFalse(node0.isReturn());
244:       assertFalse(node0.isInc());
245:       assertEquals((-1), node0.getSourcePosition());
246:       assertFalse(node0.isIn());
247:       assertFalse(node0.isFalse());
248:       assertFalse(node0.isThrow());
249:       assertFalse(node0.isFunction());
250:       assertFalse(node0.isCast());
251:       assertFalse(jSDocInfo0.isIdGenerator());
252:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
253:       assertFalse(jSDocInfo0.isExterns());
254:       assertFalse(jSDocInfo0.isNoShadow());
255:       assertFalse(jSDocInfo0.isExpose());
256:       assertFalse(jSDocInfo0.makesStructs());
257:       assertFalse(jSDocInfo0.isInterface());
258:       assertNull(jSDocInfo0.getDeprecationReason());
259:       assertNull(jSDocInfo0.getBlockDescription());
260:       assertFalse(jSDocInfo0.makesDicts());
261:       assertFalse(jSDocInfo0.isDeprecated());
262:       assertNull(jSDocInfo0.getLendsName());
263:       assertNull(jSDocInfo0.getVersion());
264:       assertFalse(jSDocInfo0.isJaggerModule());
265:       assertFalse(jSDocInfo0.isOverride());
266:       assertFalse(jSDocInfo0.isNoSideEffects());
267:       assertFalse(jSDocInfo0.isJavaDispatch());
268:       assertNull(jSDocInfo0.getMeaning());
269:       assertFalse(jSDocInfo0.isNgInject());
270:       assertEquals("JSDocInfo", jSDocInfo0.toString());
271:       assertFalse(jSDocInfo0.isWizaction());
272:       assertFalse(jSDocInfo0.isConstant());
273:       assertFalse(jSDocInfo0.isMappedIdGenerator());
274:       assertFalse(jSDocInfo0.hasModifies());
275:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
276:       assertFalse(jSDocInfo0.isNoTypeCheck());
277:       assertNull(jSDocInfo0.getLicense());
278:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
279:       assertFalse(jSDocInfo0.isHidden());
280:       assertFalse(jSDocInfo0.isStableIdGenerator());
281:       assertFalse(jSDocInfo0.isJaggerProvide());
282:       assertFalse(jSDocInfo0.hasType());
283:       assertNull(jSDocInfo0.getReturnDescription());
284:       assertNull(jSDocInfo0.getOriginalCommentString());
285:       assertFalse(jSDocInfo0.isDisposes());
286:       assertFalse(jSDocInfo0.hasTypedefType());
287:       assertEquals(0, jSDocInfo0.getParameterCount());
288:       assertFalse(jSDocInfo0.hasBaseType());
289:       assertFalse(jSDocInfo0.hasFileOverview());
290:       assertFalse(jSDocInfo0.hasReturnType());
291:       assertFalse(jSDocInfo0.isNoAlias());
292:       assertFalse(jSDocInfo0.shouldPreserveTry());
293:       assertFalse(jSDocInfo0.isImplicitCast());
294:       assertFalse(jSDocInfo0.isExport());
295:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
296:       assertFalse(jSDocInfo0.containsDeclaration());
297:       assertFalse(jSDocInfo0.hasThisType());
298:       assertFalse(jSDocInfo0.isJaggerInject());
299:       assertFalse(jSDocInfo0.isConstructor());
300:       assertNull(jSDocInfo0.getDescription());
301:       assertNull(jSDocInfo0.getVisibility());
302:       assertFalse(jSDocInfo0.isNoCompile());
303:       assertFalse(jSDocInfo0.isDefine());
304:       assertNull(jSDocInfo0.getFileOverview());
305:       assertFalse(jSDocInfo0.hasEnumParameterType());
306:       assertFalse(node1.isEmpty());
307:       assertFalse(node1.isArrayLit());
308:       assertFalse(node1.isFor());
309:       assertFalse(node1.isDelProp());
310:       assertFalse(node1.isIf());
311:       assertFalse(node1.isTry());
312:       assertFalse(node1.isDebugger());
313:       assertFalse(node1.isNE());
314:       assertFalse(node1.isTrue());
315:       assertFalse(node1.isGetterDef());
316:       assertFalse(node1.isIn());
317:       assertEquals(40, node1.getType());
318:       assertFalse(node1.isDefaultCase());
319:       assertFalse(node1.isSwitch());
320:       assertEquals(0, node1.getChildCount());
321:       assertFalse(node1.isFunction());
322:       assertFalse(node1.isVar());
323:       assertFalse(node1.isCall());
324:       assertFalse(node1.isBreak());
325:       assertFalse(node1.isName());
326:       assertFalse(node1.isGetProp());
327:       assertFalse(node1.isNew());
328:       assertFalse(node1.isAdd());
329:       assertFalse(node1.isNull());
330:       assertFalse(node1.isObjectLit());
331:       assertFalse(node1.isWhile());
332:       assertFalse(node1.isVoid());
333:       assertFalse(node1.isComma());
334:       assertFalse(node1.isExprResult());
335:       assertFalse(node1.isReturn());
336:       assertFalse(node1.hasChildren());
337:       assertFalse(node1.isDec());
338:       assertFalse(node1.isAssign());
339:       assertFalse(node1.isTypeOf());
340:       assertFalse(node1.isCast());
341:       assertFalse(node1.isGetElem());
342:       assertFalse(node1.hasOneChild());
343:       assertFalse(node1.isLabelName());
344:       assertFalse(node1.isScript());
345:       assertEquals((-1), node1.getSourcePosition());
346:       assertFalse(node1.isNot());
347:       assertFalse(node1.isOr());
348:       assertFalse(node1.isNumber());
349:       assertFalse(node1.isAnd());
350:       assertFalse(node1.isContinue());
351:       assertFalse(node1.isAssignAdd());
352:       assertFalse(node1.isDo());
353:       assertFalse(node1.isLabel());
354:       assertFalse(node1.isFalse());
355:       assertFalse(node1.isThrow());
356:       assertFalse(node1.isStringKey());
357:       assertFalse(node1.isHook());
358:       assertTrue(node1.isString());
359:       assertEquals((-1), node1.getCharno());
360:       assertFalse(node1.isParamList());
361:       assertFalse(node1.isSetterDef());
362:       assertFalse(node1.isInc());
363:       assertFalse(node1.isCase());
364:       assertFalse(node1.isCatch());
365:       assertEquals((-1), node1.getLineno());
366:       assertFalse(node1.isThis());
367:       assertFalse(node1.isBlock());
368:       assertFalse(node1.isInstanceOf());
369:       assertFalse(node1.isWith());
370:       assertFalse(node1.hasMoreThanOneChild());
371:       assertFalse(node1.isRegExp());
372:       assertNotNull(node1);
373:       assertEquals(57, Node.REFLECTED_OBJECT);
374:       assertEquals(52, Node.LENGTH);
375:       assertEquals(40, Node.ORIGINALNAME_PROP);
376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
377:       assertEquals(8, Node.FLAG_NO_THROWS);
378:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
379:       assertEquals(50, Node.FREE_CALL);
380:       assertEquals(54, Node.SLASH_V);
381:       assertEquals(46, Node.IS_NAMESPACE);
382:       assertEquals(55, Node.INFERRED_FUNCTION);
383:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
384:       assertEquals(39, Node.EMPTY_BLOCK);
385:       assertEquals(2, Node.POST_FLAG);
386:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
387:       assertEquals(57, Node.LAST_PROP);
388:       assertEquals(30, Node.VAR_ARGS_NAME);
389:       assertEquals(47, Node.IS_DISPATCHER);
390:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
391:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
392:       assertEquals(53, Node.INPUT_ID);
393:       assertEquals(29, Node.JSDOC_INFO_PROP);
394:       assertEquals(43, Node.IS_CONSTANT_NAME);
395:       assertEquals(56, Node.CHANGE_TIME);
396:       assertEquals(36, Node.QUOTED_PROP);
397:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
399:       assertEquals(12, Node.COLUMN_BITS);
400:       assertEquals(32, Node.INCRDECR_PROP);
401:       assertEquals(4095, Node.COLUMN_MASK);
402:       assertEquals(1, Node.DECR_FLAG);
403:       assertEquals(48, Node.DIRECTIVES);
404:       assertEquals(49, Node.DIRECT_EVAL);
405:       assertEquals(37, Node.OPT_ARG_NAME);
406:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
407:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
409:       assertEquals(4095, Node.COLUMN_MASK);
410:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
411:       assertEquals(55, Node.INFERRED_FUNCTION);
412:       assertEquals(8, Node.FLAG_NO_THROWS);
413:       assertEquals(48, Node.DIRECTIVES);
414:       assertEquals(36, Node.QUOTED_PROP);
415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
416:       assertEquals(43, Node.IS_CONSTANT_NAME);
417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
418:       assertEquals(50, Node.FREE_CALL);
419:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
420:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(12, Node.COLUMN_BITS);
424:       assertEquals(32, Node.INCRDECR_PROP);
425:       assertEquals(51, Node.STATIC_SOURCE_FILE);
426:       assertEquals(1, Node.DECR_FLAG);
427:       assertEquals(30, Node.VAR_ARGS_NAME);
428:       assertEquals(37, Node.OPT_ARG_NAME);
429:       assertEquals(49, Node.DIRECT_EVAL);
430:       assertEquals(46, Node.IS_NAMESPACE);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(56, Node.CHANGE_TIME);
433:       assertEquals(40, Node.ORIGINALNAME_PROP);
434:       assertEquals(57, Node.REFLECTED_OBJECT);
435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
436:       assertEquals(29, Node.JSDOC_INFO_PROP);
437:       assertEquals(52, Node.LENGTH);
438:       assertEquals(53, Node.INPUT_ID);
439:       assertEquals(2, Node.POST_FLAG);
440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
441:       assertEquals(39, Node.EMPTY_BLOCK);
442:       assertEquals(47, Node.IS_DISPATCHER);
443:       assertEquals(57, Node.LAST_PROP);
444:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
445:       assertSame(node0, node1);
446:       assertSame(node1, node0);
447:       
448:       String string0 = node0.toString();
449:       assertEquals(0, node0.getChildCount());
450:       assertFalse(node0.isDefaultCase());
451:       assertEquals(40, node0.getType());
452:       assertFalse(node0.isTrue());
453:       assertFalse(node0.isDebugger());
454:       assertFalse(node0.isSetterDef());
455:       assertFalse(node0.isTry());
456:       assertFalse(node0.isCall());
457:       assertFalse(node0.isName());
458:       assertFalse(node0.isIf());
459:       assertFalse(node0.isNull());
460:       assertFalse(node0.isBlock());
461:       assertFalse(node0.isFor());
462:       assertFalse(node0.isNE());
463:       assertFalse(node0.isRegExp());
464:       assertFalse(node0.isDelProp());
465:       assertFalse(node0.isVoid());
466:       assertFalse(node0.isCatch());
467:       assertFalse(node0.hasMoreThanOneChild());
468:       assertFalse(node0.isCase());
469:       assertFalse(node0.isDo());
470:       assertFalse(node0.isLabel());
471:       assertFalse(node0.isAssignAdd());
472:       assertEquals((-1), node0.getCharno());
473:       assertTrue(node0.isString());
474:       assertFalse(node0.isNumber());
475:       assertFalse(node0.isNew());
476:       assertFalse(node0.isGetterDef());
477:       assertFalse(node0.isOr());
478:       assertFalse(node0.isEmpty());
479:       assertFalse(node0.isAdd());
480:       assertFalse(node0.isArrayLit());
481:       assertFalse(node0.isLabelName());
482:       assertFalse(node0.isStringKey());
483:       assertFalse(node0.isVar());
484:       assertFalse(node0.isParamList());
485:       assertFalse(node0.isSwitch());
486:       assertFalse(node0.isObjectLit());
487:       assertFalse(node0.isAnd());
488:       assertFalse(node0.isNot());
489:       assertFalse(node0.isGetProp());
490:       assertFalse(node0.isScript());
491:       assertFalse(node0.hasOneChild());
492:       assertFalse(node0.isAssign());
493:       assertFalse(node0.hasChildren());
494:       assertFalse(node0.isHook());
495:       assertFalse(node0.isThis());
496:       assertFalse(node0.isComma());
497:       assertFalse(node0.isExprResult());
498:       assertFalse(node0.isTypeOf());
499:       assertFalse(node0.isDec());
500:       assertEquals((-1), node0.getLineno());
501:       assertFalse(node0.isBreak());
502:       assertFalse(node0.isWith());
503:       assertFalse(node0.isInstanceOf());
504:       assertFalse(node0.isGetElem());
505:       assertFalse(node0.isContinue());
506:       assertFalse(node0.isWhile());
507:       assertFalse(node0.isReturn());
508:       assertFalse(node0.isInc());
509:       assertEquals((-1), node0.getSourcePosition());
510:       assertFalse(node0.isIn());
511:       assertFalse(node0.isFalse());
512:       assertFalse(node0.isThrow());
513:       assertFalse(node0.isFunction());
514:       assertFalse(node0.isCast());
515:       assertNotNull(string0);
516:       assertEquals(57, Node.REFLECTED_OBJECT);
517:       assertEquals(52, Node.LENGTH);
518:       assertEquals(40, Node.ORIGINALNAME_PROP);
519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
520:       assertEquals(8, Node.FLAG_NO_THROWS);
521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
522:       assertEquals(50, Node.FREE_CALL);
523:       assertEquals(54, Node.SLASH_V);
524:       assertEquals(46, Node.IS_NAMESPACE);
525:       assertEquals(55, Node.INFERRED_FUNCTION);
526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
527:       assertEquals(39, Node.EMPTY_BLOCK);
528:       assertEquals(2, Node.POST_FLAG);
529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
530:       assertEquals(57, Node.LAST_PROP);
531:       assertEquals(30, Node.VAR_ARGS_NAME);
532:       assertEquals(47, Node.IS_DISPATCHER);
533:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
534:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
535:       assertEquals(53, Node.INPUT_ID);
536:       assertEquals(29, Node.JSDOC_INFO_PROP);
537:       assertEquals(43, Node.IS_CONSTANT_NAME);
538:       assertEquals(56, Node.CHANGE_TIME);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
542:       assertEquals(12, Node.COLUMN_BITS);
543:       assertEquals(32, Node.INCRDECR_PROP);
544:       assertEquals(4095, Node.COLUMN_MASK);
545:       assertEquals(1, Node.DECR_FLAG);
546:       assertEquals(48, Node.DIRECTIVES);
547:       assertEquals(49, Node.DIRECT_EVAL);
548:       assertEquals(37, Node.OPT_ARG_NAME);
549:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
550:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
551:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
552:       assertSame(node0, node1);
553:       
554:       node0.setSourceFileForTesting("\n\nSubtree2: ");
555:       assertEquals(0, node0.getChildCount());
556:       assertFalse(node0.isDefaultCase());
557:       assertEquals(40, node0.getType());
558:       assertFalse(node0.isTrue());
559:       assertFalse(node0.isDebugger());
560:       assertFalse(node0.isSetterDef());
561:       assertFalse(node0.isTry());
562:       assertFalse(node0.isCall());
563:       assertFalse(node0.isName());
564:       assertFalse(node0.isIf());
565:       assertFalse(node0.isNull());
566:       assertFalse(node0.isBlock());
567:       assertFalse(node0.isFor());
568:       assertFalse(node0.isNE());
569:       assertFalse(node0.isRegExp());
570:       assertFalse(node0.isDelProp());
571:       assertFalse(node0.isVoid());
572:       assertFalse(node0.isCatch());
573:       assertFalse(node0.hasMoreThanOneChild());
574:       assertFalse(node0.isCase());
575:       assertFalse(node0.isDo());
576:       assertFalse(node0.isLabel());
577:       assertFalse(node0.isAssignAdd());
578:       assertEquals((-1), node0.getCharno());
579:       assertTrue(node0.isString());
580:       assertFalse(node0.isNumber());
581:       assertFalse(node0.isNew());
582:       assertFalse(node0.isGetterDef());
583:       assertFalse(node0.isOr());
584:       assertFalse(node0.isEmpty());
585:       assertFalse(node0.isAdd());
586:       assertFalse(node0.isArrayLit());
587:       assertFalse(node0.isLabelName());
588:       assertFalse(node0.isStringKey());
589:       assertFalse(node0.isVar());
590:       assertFalse(node0.isParamList());
591:       assertFalse(node0.isSwitch());
592:       assertFalse(node0.isObjectLit());
593:       assertFalse(node0.isAnd());
594:       assertFalse(node0.isNot());
595:       assertFalse(node0.isGetProp());
596:       assertFalse(node0.isScript());
597:       assertFalse(node0.hasOneChild());
598:       assertFalse(node0.isAssign());
599:       assertFalse(node0.hasChildren());
600:       assertFalse(node0.isHook());
601:       assertFalse(node0.isThis());
602:       assertFalse(node0.isComma());
603:       assertFalse(node0.isExprResult());
604:       assertFalse(node0.isTypeOf());
605:       assertFalse(node0.isDec());
606:       assertEquals((-1), node0.getLineno());
607:       assertFalse(node0.isBreak());
608:       assertFalse(node0.isWith());
609:       assertFalse(node0.isInstanceOf());
610:       assertFalse(node0.isGetElem());
611:       assertFalse(node0.isContinue());
612:       assertFalse(node0.isWhile());
613:       assertFalse(node0.isReturn());
614:       assertFalse(node0.isInc());
615:       assertEquals((-1), node0.getSourcePosition());
616:       assertFalse(node0.isIn());
617:       assertFalse(node0.isFalse());
618:       assertFalse(node0.isThrow());
619:       assertFalse(node0.isFunction());
620:       assertFalse(node0.isCast());
621:       assertEquals(57, Node.REFLECTED_OBJECT);
622:       assertEquals(52, Node.LENGTH);
623:       assertEquals(40, Node.ORIGINALNAME_PROP);
624:       assertEquals(15, Node.NO_SIDE_EFFECTS);
625:       assertEquals(8, Node.FLAG_NO_THROWS);
626:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
627:       assertEquals(50, Node.FREE_CALL);
628:       assertEquals(54, Node.SLASH_V);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(55, Node.INFERRED_FUNCTION);
631:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
632:       assertEquals(39, Node.EMPTY_BLOCK);
633:       assertEquals(2, Node.POST_FLAG);
634:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
635:       assertEquals(57, Node.LAST_PROP);
636:       assertEquals(30, Node.VAR_ARGS_NAME);
637:       assertEquals(47, Node.IS_DISPATCHER);
638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
639:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(29, Node.JSDOC_INFO_PROP);
642:       assertEquals(43, Node.IS_CONSTANT_NAME);
643:       assertEquals(56, Node.CHANGE_TIME);
644:       assertEquals(36, Node.QUOTED_PROP);
645:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
647:       assertEquals(12, Node.COLUMN_BITS);
648:       assertEquals(32, Node.INCRDECR_PROP);
649:       assertEquals(4095, Node.COLUMN_MASK);
650:       assertEquals(1, Node.DECR_FLAG);
651:       assertEquals(48, Node.DIRECTIVES);
652:       assertEquals(49, Node.DIRECT_EVAL);
653:       assertEquals(37, Node.OPT_ARG_NAME);
654:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
655:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
657:       assertSame(node0, node1);
658:       
659:       boolean boolean0 = node1.isQualifiedName();
660:       assertEquals(0, node0.getChildCount());
661:       assertFalse(node0.isDefaultCase());
662:       assertEquals(40, node0.getType());
663:       assertFalse(node0.isTrue());
664:       assertFalse(node0.isDebugger());
665:       assertFalse(node0.isSetterDef());
666:       assertFalse(node0.isTry());
667:       assertFalse(node0.isCall());
668:       assertFalse(node0.isName());
669:       assertFalse(node0.isIf());
670:       assertFalse(node0.isNull());
671:       assertFalse(node0.isBlock());
672:       assertFalse(node0.isFor());
673:       assertFalse(node0.isNE());
674:       assertFalse(node0.isRegExp());
675:       assertFalse(node0.isDelProp());
676:       assertFalse(node0.isVoid());
677:       assertFalse(node0.isCatch());
678:       assertFalse(node0.hasMoreThanOneChild());
679:       assertFalse(node0.isCase());
680:       assertFalse(node0.isDo());
681:       assertFalse(node0.isLabel());
682:       assertFalse(node0.isAssignAdd());
683:       assertEquals((-1), node0.getCharno());
684:       assertTrue(node0.isString());
685:       assertFalse(node0.isNumber());
686:       assertFalse(node0.isNew());
687:       assertFalse(node0.isGetterDef());
688:       assertFalse(node0.isOr());
689:       assertFalse(node0.isEmpty());
690:       assertFalse(node0.isAdd());
691:       assertFalse(node0.isArrayLit());
692:       assertFalse(node0.isLabelName());
693:       assertFalse(node0.isStringKey());
694:       assertFalse(node0.isVar());
695:       assertFalse(node0.isParamList());
696:       assertFalse(node0.isSwitch());
697:       assertFalse(node0.isObjectLit());
698:       assertFalse(node0.isAnd());
699:       assertFalse(node0.isNot());
700:       assertFalse(node0.isGetProp());
701:       assertFalse(node0.isScript());
702:       assertFalse(node0.hasOneChild());
703:       assertFalse(node0.isAssign());
704:       assertFalse(node0.hasChildren());
705:       assertFalse(node0.isHook());
706:       assertFalse(node0.isThis());
707:       assertFalse(node0.isComma());
708:       assertFalse(node0.isExprResult());
709:       assertFalse(node0.isTypeOf());
710:       assertFalse(node0.isDec());
711:       assertEquals((-1), node0.getLineno());
712:       assertFalse(node0.isBreak());
713:       assertFalse(node0.isWith());
714:       assertFalse(node0.isInstanceOf());
715:       assertFalse(node0.isGetElem());
716:       assertFalse(node0.isContinue());
717:       assertFalse(node0.isWhile());
718:       assertFalse(node0.isReturn());
719:       assertFalse(node0.isInc());
720:       assertEquals((-1), node0.getSourcePosition());
721:       assertFalse(node0.isIn());
722:       assertFalse(node0.isFalse());
723:       assertFalse(node0.isThrow());
724:       assertFalse(node0.isFunction());
725:       assertFalse(node0.isCast());
726:       assertFalse(jSDocInfo0.isIdGenerator());
727:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
728:       assertFalse(jSDocInfo0.isExterns());
729:       assertFalse(jSDocInfo0.isNoShadow());
730:       assertFalse(jSDocInfo0.isExpose());
731:       assertFalse(jSDocInfo0.makesStructs());
732:       assertFalse(jSDocInfo0.isInterface());
733:       assertNull(jSDocInfo0.getDeprecationReason());
734:       assertNull(jSDocInfo0.getBlockDescription());
735:       assertFalse(jSDocInfo0.makesDicts());
736:       assertFalse(jSDocInfo0.isDeprecated());
737:       assertNull(jSDocInfo0.getLendsName());
738:       assertNull(jSDocInfo0.getVersion());
739:       assertFalse(jSDocInfo0.isJaggerModule());
740:       assertFalse(jSDocInfo0.isOverride());
741:       assertFalse(jSDocInfo0.isNoSideEffects());
742:       assertFalse(jSDocInfo0.isJavaDispatch());
743:       assertNull(jSDocInfo0.getMeaning());
744:       assertFalse(jSDocInfo0.isNgInject());
745:       assertEquals("JSDocInfo", jSDocInfo0.toString());
746:       assertFalse(jSDocInfo0.isWizaction());
747:       assertFalse(jSDocInfo0.isConstant());
748:       assertFalse(jSDocInfo0.isMappedIdGenerator());
749:       assertFalse(jSDocInfo0.hasModifies());
750:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
751:       assertFalse(jSDocInfo0.isNoTypeCheck());
752:       assertNull(jSDocInfo0.getLicense());
753:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
754:       assertFalse(jSDocInfo0.isHidden());
755:       assertFalse(jSDocInfo0.isStableIdGenerator());
756:       assertFalse(jSDocInfo0.isJaggerProvide());
757:       assertFalse(jSDocInfo0.hasType());
758:       assertNull(jSDocInfo0.getReturnDescription());
759:       assertNull(jSDocInfo0.getOriginalCommentString());
760:       assertFalse(jSDocInfo0.isDisposes());
761:       assertFalse(jSDocInfo0.hasTypedefType());
762:       assertEquals(0, jSDocInfo0.getParameterCount());
763:       assertFalse(jSDocInfo0.hasBaseType());
764:       assertFalse(jSDocInfo0.hasFileOverview());
765:       assertFalse(jSDocInfo0.hasReturnType());
766:       assertFalse(jSDocInfo0.isNoAlias());
767:       assertFalse(jSDocInfo0.shouldPreserveTry());
768:       assertFalse(jSDocInfo0.isImplicitCast());
769:       assertFalse(jSDocInfo0.isExport());
770:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
771:       assertFalse(jSDocInfo0.containsDeclaration());
772:       assertFalse(jSDocInfo0.hasThisType());
773:       assertFalse(jSDocInfo0.isJaggerInject());
774:       assertFalse(jSDocInfo0.isConstructor());
775:       assertNull(jSDocInfo0.getDescription());
776:       assertNull(jSDocInfo0.getVisibility());
777:       assertFalse(jSDocInfo0.isNoCompile());
778:       assertFalse(jSDocInfo0.isDefine());
779:       assertNull(jSDocInfo0.getFileOverview());
780:       assertFalse(jSDocInfo0.hasEnumParameterType());
781:       assertFalse(node1.isEmpty());
782:       assertFalse(node1.isArrayLit());
783:       assertFalse(node1.isFor());
784:       assertFalse(node1.isDelProp());
785:       assertFalse(node1.isIf());
786:       assertFalse(node1.isTry());
787:       assertFalse(node1.isDebugger());
788:       assertFalse(node1.isNE());
789:       assertFalse(node1.isTrue());
790:       assertFalse(node1.isGetterDef());
791:       assertFalse(node1.isIn());
792:       assertEquals(40, node1.getType());
793:       assertFalse(node1.isDefaultCase());
794:       assertFalse(node1.isSwitch());
795:       assertEquals(0, node1.getChildCount());
796:       assertFalse(node1.isFunction());
797:       assertFalse(node1.isVar());
798:       assertFalse(node1.isCall());
799:       assertFalse(node1.isBreak());
800:       assertFalse(node1.isName());
801:       assertFalse(node1.isGetProp());
802:       assertFalse(node1.isNew());
803:       assertFalse(node1.isAdd());
804:       assertFalse(node1.isNull());
805:       assertFalse(node1.isObjectLit());
806:       assertFalse(node1.isWhile());
807:       assertFalse(node1.isVoid());
808:       assertFalse(node1.isComma());
809:       assertFalse(node1.isExprResult());
810:       assertFalse(node1.isReturn());
811:       assertFalse(node1.hasChildren());
812:       assertFalse(node1.isDec());
813:       assertFalse(node1.isAssign());
814:       assertFalse(node1.isTypeOf());
815:       assertFalse(node1.isCast());
816:       assertFalse(node1.isGetElem());
817:       assertFalse(node1.hasOneChild());
818:       assertFalse(node1.isLabelName());
819:       assertFalse(node1.isScript());
820:       assertEquals((-1), node1.getSourcePosition());
821:       assertFalse(node1.isNot());
822:       assertFalse(node1.isOr());
823:       assertFalse(node1.isNumber());
824:       assertFalse(node1.isAnd());
825:       assertFalse(node1.isContinue());
826:       assertFalse(node1.isAssignAdd());
827:       assertFalse(node1.isDo());
828:       assertFalse(node1.isLabel());
829:       assertFalse(node1.isFalse());
830:       assertFalse(node1.isThrow());
831:       assertFalse(node1.isStringKey());
832:       assertFalse(node1.isHook());
833:       assertTrue(node1.isString());
834:       assertEquals((-1), node1.getCharno());
835:       assertFalse(node1.isParamList());
836:       assertFalse(node1.isSetterDef());
837:       assertFalse(node1.isInc());
838:       assertFalse(node1.isCase());
839:       assertFalse(node1.isCatch());
840:       assertEquals((-1), node1.getLineno());
841:       assertFalse(node1.isThis());
842:       assertFalse(node1.isBlock());
843:       assertFalse(node1.isInstanceOf());
844:       assertFalse(node1.isWith());
845:       assertFalse(node1.hasMoreThanOneChild());
846:       assertFalse(node1.isRegExp());
847:       assertFalse(boolean0);
848:       assertEquals(57, Node.REFLECTED_OBJECT);
849:       assertEquals(52, Node.LENGTH);
850:       assertEquals(40, Node.ORIGINALNAME_PROP);
851:       assertEquals(15, Node.NO_SIDE_EFFECTS);
852:       assertEquals(8, Node.FLAG_NO_THROWS);
853:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
854:       assertEquals(50, Node.FREE_CALL);
855:       assertEquals(54, Node.SLASH_V);
856:       assertEquals(46, Node.IS_NAMESPACE);
857:       assertEquals(55, Node.INFERRED_FUNCTION);
858:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
859:       assertEquals(39, Node.EMPTY_BLOCK);
860:       assertEquals(2, Node.POST_FLAG);
861:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
862:       assertEquals(57, Node.LAST_PROP);
863:       assertEquals(30, Node.VAR_ARGS_NAME);
864:       assertEquals(47, Node.IS_DISPATCHER);
865:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
867:       assertEquals(53, Node.INPUT_ID);
868:       assertEquals(29, Node.JSDOC_INFO_PROP);
869:       assertEquals(43, Node.IS_CONSTANT_NAME);
870:       assertEquals(56, Node.CHANGE_TIME);
871:       assertEquals(36, Node.QUOTED_PROP);
872:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
873:       assertEquals(51, Node.STATIC_SOURCE_FILE);
874:       assertEquals(12, Node.COLUMN_BITS);
875:       assertEquals(32, Node.INCRDECR_PROP);
876:       assertEquals(4095, Node.COLUMN_MASK);
877:       assertEquals(1, Node.DECR_FLAG);
878:       assertEquals(48, Node.DIRECTIVES);
879:       assertEquals(49, Node.DIRECT_EVAL);
880:       assertEquals(37, Node.OPT_ARG_NAME);
881:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
882:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
883:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
884:       assertEquals(4095, Node.COLUMN_MASK);
885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
886:       assertEquals(55, Node.INFERRED_FUNCTION);
887:       assertEquals(8, Node.FLAG_NO_THROWS);
888:       assertEquals(48, Node.DIRECTIVES);
889:       assertEquals(36, Node.QUOTED_PROP);
890:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
891:       assertEquals(43, Node.IS_CONSTANT_NAME);
892:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
893:       assertEquals(50, Node.FREE_CALL);
894:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
895:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
896:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
897:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
898:       assertEquals(12, Node.COLUMN_BITS);
899:       assertEquals(32, Node.INCRDECR_PROP);
900:       assertEquals(51, Node.STATIC_SOURCE_FILE);
901:       assertEquals(1, Node.DECR_FLAG);
902:       assertEquals(30, Node.VAR_ARGS_NAME);
903:       assertEquals(37, Node.OPT_ARG_NAME);
904:       assertEquals(49, Node.DIRECT_EVAL);
905:       assertEquals(46, Node.IS_NAMESPACE);
906:       assertEquals(54, Node.SLASH_V);
907:       assertEquals(56, Node.CHANGE_TIME);
908:       assertEquals(40, Node.ORIGINALNAME_PROP);
909:       assertEquals(57, Node.REFLECTED_OBJECT);
910:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
911:       assertEquals(29, Node.JSDOC_INFO_PROP);
912:       assertEquals(52, Node.LENGTH);
913:       assertEquals(53, Node.INPUT_ID);
914:       assertEquals(2, Node.POST_FLAG);
915:       assertEquals(15, Node.NO_SIDE_EFFECTS);
916:       assertEquals(39, Node.EMPTY_BLOCK);
917:       assertEquals(47, Node.IS_DISPATCHER);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
920:       assertSame(node0, node1);
921:       assertSame(node1, node0);
922:       
923:       boolean boolean1 = node0.isFalse();
924:       assertTrue(boolean1 == boolean0);
925:       assertEquals(0, node0.getChildCount());
926:       assertFalse(node0.isDefaultCase());
927:       assertEquals(40, node0.getType());
928:       assertFalse(node0.isTrue());
929:       assertFalse(node0.isDebugger());
930:       assertFalse(node0.isSetterDef());
931:       assertFalse(node0.isTry());
932:       assertFalse(node0.isCall());
933:       assertFalse(node0.isName());
934:       assertFalse(node0.isIf());
935:       assertFalse(node0.isNull());
936:       assertFalse(node0.isBlock());
937:       assertFalse(node0.isFor());
938:       assertFalse(node0.isNE());
939:       assertFalse(node0.isRegExp());
940:       assertFalse(node0.isDelProp());
941:       assertFalse(node0.isVoid());
942:       assertFalse(node0.isCatch());
943:       assertFalse(node0.hasMoreThanOneChild());
944:       assertFalse(node0.isCase());
945:       assertFalse(node0.isDo());
946:       assertFalse(node0.isLabel());
947:       assertFalse(node0.isAssignAdd());
948:       assertEquals((-1), node0.getCharno());
949:       assertTrue(node0.isString());
950:       assertFalse(node0.isNumber());
951:       assertFalse(node0.isNew());
952:       assertFalse(node0.isGetterDef());
953:       assertFalse(node0.isOr());
954:       assertFalse(node0.isEmpty());
955:       assertFalse(node0.isAdd());
956:       assertFalse(node0.isArrayLit());
957:       assertFalse(node0.isLabelName());
958:       assertFalse(node0.isStringKey());
959:       assertFalse(node0.isVar());
960:       assertFalse(node0.isParamList());
961:       assertFalse(node0.isSwitch());
962:       assertFalse(node0.isObjectLit());
963:       assertFalse(node0.isAnd());
964:       assertFalse(node0.isNot());
965:       assertFalse(node0.isGetProp());
966:       assertFalse(node0.isScript());
967:       assertFalse(node0.hasOneChild());
968:       assertFalse(node0.isAssign());
969:       assertFalse(node0.hasChildren());
970:       assertFalse(node0.isHook());
971:       assertFalse(node0.isThis());
972:       assertFalse(node0.isComma());
973:       assertFalse(node0.isExprResult());
974:       assertFalse(node0.isTypeOf());
975:       assertFalse(node0.isDec());
976:       assertEquals((-1), node0.getLineno());
977:       assertFalse(node0.isBreak());
978:       assertFalse(node0.isWith());
979:       assertFalse(node0.isInstanceOf());
980:       assertFalse(node0.isGetElem());
981:       assertFalse(node0.isContinue());
982:       assertFalse(node0.isWhile());
983:       assertFalse(node0.isReturn());
984:       assertFalse(node0.isInc());
985:       assertEquals((-1), node0.getSourcePosition());
986:       assertFalse(node0.isIn());
987:       assertFalse(node0.isFalse());
988:       assertFalse(node0.isThrow());
989:       assertFalse(node0.isFunction());
990:       assertFalse(node0.isCast());
991:       assertFalse(boolean1);
992:       assertEquals(57, Node.REFLECTED_OBJECT);
993:       assertEquals(52, Node.LENGTH);
994:       assertEquals(40, Node.ORIGINALNAME_PROP);
995:       assertEquals(15, Node.NO_SIDE_EFFECTS);
996:       assertEquals(8, Node.FLAG_NO_THROWS);
997:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
998:       assertEquals(50, Node.FREE_CALL);
999:       assertEquals(54, Node.SLASH_V);
1000:       assertEquals(46, Node.IS_NAMESPACE);
1001:       assertEquals(55, Node.INFERRED_FUNCTION);
1002:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1003:       assertEquals(39, Node.EMPTY_BLOCK);
1004:       assertEquals(2, Node.POST_FLAG);
1005:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1006:       assertEquals(57, Node.LAST_PROP);
1007:       assertEquals(30, Node.VAR_ARGS_NAME);
1008:       assertEquals(47, Node.IS_DISPATCHER);
1009:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1010:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1011:       assertEquals(53, Node.INPUT_ID);
1012:       assertEquals(29, Node.JSDOC_INFO_PROP);
1013:       assertEquals(43, Node.IS_CONSTANT_NAME);
1014:       assertEquals(56, Node.CHANGE_TIME);
1015:       assertEquals(36, Node.QUOTED_PROP);
1016:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1017:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1018:       assertEquals(12, Node.COLUMN_BITS);
1019:       assertEquals(32, Node.INCRDECR_PROP);
1020:       assertEquals(4095, Node.COLUMN_MASK);
1021:       assertEquals(1, Node.DECR_FLAG);
1022:       assertEquals(48, Node.DIRECTIVES);
1023:       assertEquals(49, Node.DIRECT_EVAL);
1024:       assertEquals(37, Node.OPT_ARG_NAME);
1025:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1026:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1027:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1028:       assertSame(node0, node1);
1029:       
1030:       boolean boolean2 = node0.isWhile();
1031:       assertTrue(boolean2 == boolean1);
1032:       assertTrue(boolean2 == boolean0);
1033:       assertEquals(0, node0.getChildCount());
1034:       assertFalse(node0.isDefaultCase());
1035:       assertEquals(40, node0.getType());
1036:       assertFalse(node0.isTrue());
1037:       assertFalse(node0.isDebugger());
1038:       assertFalse(node0.isSetterDef());
1039:       assertFalse(node0.isTry());
1040:       assertFalse(node0.isCall());
1041:       assertFalse(node0.isName());
1042:       assertFalse(node0.isIf());
1043:       assertFalse(node0.isNull());
1044:       assertFalse(node0.isBlock());
1045:       assertFalse(node0.isFor());
1046:       assertFalse(node0.isNE());
1047:       assertFalse(node0.isRegExp());
1048:       assertFalse(node0.isDelProp());
1049:       assertFalse(node0.isVoid());
1050:       assertFalse(node0.isCatch());
1051:       assertFalse(node0.hasMoreThanOneChild());
1052:       assertFalse(node0.isCase());
1053:       assertFalse(node0.isDo());
1054:       assertFalse(node0.isLabel());
1055:       assertFalse(node0.isAssignAdd());
1056:       assertEquals((-1), node0.getCharno());
1057:       assertTrue(node0.isString());
1058:       assertFalse(node0.isNumber());
1059:       assertFalse(node0.isNew());
1060:       assertFalse(node0.isGetterDef());
1061:       assertFalse(node0.isOr());
1062:       assertFalse(node0.isEmpty());
1063:       assertFalse(node0.isAdd());
1064:       assertFalse(node0.isArrayLit());
1065:       assertFalse(node0.isLabelName());
1066:       assertFalse(node0.isStringKey());
1067:       assertFalse(node0.isVar());
1068:       assertFalse(node0.isParamList());
1069:       assertFalse(node0.isSwitch());
1070:       assertFalse(node0.isObjectLit());
1071:       assertFalse(node0.isAnd());
1072:       assertFalse(node0.isNot());
1073:       assertFalse(node0.isGetProp());
1074:       assertFalse(node0.isScript());
1075:       assertFalse(node0.hasOneChild());
1076:       assertFalse(node0.isAssign());
1077:       assertFalse(node0.hasChildren());
1078:       assertFalse(node0.isHook());
1079:       assertFalse(node0.isThis());
1080:       assertFalse(node0.isComma());
1081:       assertFalse(node0.isExprResult());
1082:       assertFalse(node0.isTypeOf());
1083:       assertFalse(node0.isDec());
1084:       assertEquals((-1), node0.getLineno());
1085:       assertFalse(node0.isBreak());
1086:       assertFalse(node0.isWith());
1087:       assertFalse(node0.isInstanceOf());
1088:       assertFalse(node0.isGetElem());
1089:       assertFalse(node0.isContinue());
1090:       assertFalse(node0.isWhile());
1091:       assertFalse(node0.isReturn());
1092:       assertFalse(node0.isInc());
1093:       assertEquals((-1), node0.getSourcePosition());
1094:       assertFalse(node0.isIn());
1095:       assertFalse(node0.isFalse());
1096:       assertFalse(node0.isThrow());
1097:       assertFalse(node0.isFunction());
1098:       assertFalse(node0.isCast());
1099:       assertFalse(boolean2);
1100:       assertEquals(57, Node.REFLECTED_OBJECT);
1101:       assertEquals(52, Node.LENGTH);
1102:       assertEquals(40, Node.ORIGINALNAME_PROP);
1103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1104:       assertEquals(8, Node.FLAG_NO_THROWS);
1105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1106:       assertEquals(50, Node.FREE_CALL);
1107:       assertEquals(54, Node.SLASH_V);
1108:       assertEquals(46, Node.IS_NAMESPACE);
1109:       assertEquals(55, Node.INFERRED_FUNCTION);
1110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1111:       assertEquals(39, Node.EMPTY_BLOCK);
1112:       assertEquals(2, Node.POST_FLAG);
1113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1114:       assertEquals(57, Node.LAST_PROP);
1115:       assertEquals(30, Node.VAR_ARGS_NAME);
1116:       assertEquals(47, Node.IS_DISPATCHER);
1117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1119:       assertEquals(53, Node.INPUT_ID);
1120:       assertEquals(29, Node.JSDOC_INFO_PROP);
1121:       assertEquals(43, Node.IS_CONSTANT_NAME);
1122:       assertEquals(56, Node.CHANGE_TIME);
1123:       assertEquals(36, Node.QUOTED_PROP);
1124:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1126:       assertEquals(12, Node.COLUMN_BITS);
1127:       assertEquals(32, Node.INCRDECR_PROP);
1128:       assertEquals(4095, Node.COLUMN_MASK);
1129:       assertEquals(1, Node.DECR_FLAG);
1130:       assertEquals(48, Node.DIRECTIVES);
1131:       assertEquals(49, Node.DIRECT_EVAL);
1132:       assertEquals(37, Node.OPT_ARG_NAME);
1133:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1135:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1136:       assertSame(node0, node1);
1137:       
1138:       Iterable<Node> iterable0 = node0.children();
1139:       assertFalse(iterable0.contains(node0));
1140:       assertEquals(0, node0.getChildCount());
1141:       assertFalse(node0.isDefaultCase());
1142:       assertEquals(40, node0.getType());
1143:       assertFalse(node0.isTrue());
1144:       assertFalse(node0.isDebugger());
1145:       assertFalse(node0.isSetterDef());
1146:       assertFalse(node0.isTry());
1147:       assertFalse(node0.isCall());
1148:       assertFalse(node0.isName());
1149:       assertFalse(node0.isIf());
1150:       assertFalse(node0.isNull());
1151:       assertFalse(node0.isBlock());
1152:       assertFalse(node0.isFor());
1153:       assertFalse(node0.isNE());
1154:       assertFalse(node0.isRegExp());
1155:       assertFalse(node0.isDelProp());
1156:       assertFalse(node0.isVoid());
1157:       assertFalse(node0.isCatch());
1158:       assertFalse(node0.hasMoreThanOneChild());
1159:       assertFalse(node0.isCase());
1160:       assertFalse(node0.isDo());
1161:       assertFalse(node0.isLabel());
1162:       assertFalse(node0.isAssignAdd());
1163:       assertEquals((-1), node0.getCharno());
1164:       assertTrue(node0.isString());
1165:       assertFalse(node0.isNumber());
1166:       assertFalse(node0.isNew());
1167:       assertFalse(node0.isGetterDef());
1168:       assertFalse(node0.isOr());
1169:       assertFalse(node0.isEmpty());
1170:       assertFalse(node0.isAdd());
1171:       assertFalse(node0.isArrayLit());
1172:       assertFalse(node0.isLabelName());
1173:       assertFalse(node0.isStringKey());
1174:       assertFalse(node0.isVar());
1175:       assertFalse(node0.isParamList());
1176:       assertFalse(node0.isSwitch());
1177:       assertFalse(node0.isObjectLit());
1178:       assertFalse(node0.isAnd());
1179:       assertFalse(node0.isNot());
1180:       assertFalse(node0.isGetProp());
1181:       assertFalse(node0.isScript());
1182:       assertFalse(node0.hasOneChild());
1183:       assertFalse(node0.isAssign());
1184:       assertFalse(node0.hasChildren());
1185:       assertFalse(node0.isHook());
1186:       assertFalse(node0.isThis());
1187:       assertFalse(node0.isComma());
1188:       assertFalse(node0.isExprResult());
1189:       assertFalse(node0.isTypeOf());
1190:       assertFalse(node0.isDec());
1191:       assertEquals((-1), node0.getLineno());
1192:       assertFalse(node0.isBreak());
1193:       assertFalse(node0.isWith());
1194:       assertFalse(node0.isInstanceOf());
1195:       assertFalse(node0.isGetElem());
1196:       assertFalse(node0.isContinue());
1197:       assertFalse(node0.isWhile());
1198:       assertFalse(node0.isReturn());
1199:       assertFalse(node0.isInc());
1200:       assertEquals((-1), node0.getSourcePosition());
1201:       assertFalse(node0.isIn());
1202:       assertFalse(node0.isFalse());
1203:       assertFalse(node0.isThrow());
1204:       assertFalse(node0.isFunction());
1205:       assertFalse(node0.isCast());
1206:       assertNotNull(iterable0);
1207:       assertEquals(57, Node.REFLECTED_OBJECT);
1208:       assertEquals(52, Node.LENGTH);
1209:       assertEquals(40, Node.ORIGINALNAME_PROP);
1210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1211:       assertEquals(8, Node.FLAG_NO_THROWS);
1212:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1213:       assertEquals(50, Node.FREE_CALL);
1214:       assertEquals(54, Node.SLASH_V);
1215:       assertEquals(46, Node.IS_NAMESPACE);
1216:       assertEquals(55, Node.INFERRED_FUNCTION);
1217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1218:       assertEquals(39, Node.EMPTY_BLOCK);
1219:       assertEquals(2, Node.POST_FLAG);
1220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1221:       assertEquals(57, Node.LAST_PROP);
1222:       assertEquals(30, Node.VAR_ARGS_NAME);
1223:       assertEquals(47, Node.IS_DISPATCHER);
1224:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1226:       assertEquals(53, Node.INPUT_ID);
1227:       assertEquals(29, Node.JSDOC_INFO_PROP);
1228:       assertEquals(43, Node.IS_CONSTANT_NAME);
1229:       assertEquals(56, Node.CHANGE_TIME);
1230:       assertEquals(36, Node.QUOTED_PROP);
1231:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1233:       assertEquals(12, Node.COLUMN_BITS);
1234:       assertEquals(32, Node.INCRDECR_PROP);
1235:       assertEquals(4095, Node.COLUMN_MASK);
1236:       assertEquals(1, Node.DECR_FLAG);
1237:       assertEquals(48, Node.DIRECTIVES);
1238:       assertEquals(49, Node.DIRECT_EVAL);
1239:       assertEquals(37, Node.OPT_ARG_NAME);
1240:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1241:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1243:       assertSame(node0, node1);
1244:       
1245:       int int0 = node0.getIndexOfChild(node1);
1246:       assertEquals(0, node0.getChildCount());
1247:       assertFalse(node0.isDefaultCase());
1248:       assertEquals(40, node0.getType());
1249:       assertFalse(node0.isTrue());
1250:       assertFalse(node0.isDebugger());
1251:       assertFalse(node0.isSetterDef());
1252:       assertFalse(node0.isTry());
1253:       assertFalse(node0.isCall());
1254:       assertFalse(node0.isName());
1255:       assertFalse(node0.isIf());
1256:       assertFalse(node0.isNull());
1257:       assertFalse(node0.isBlock());
1258:       assertFalse(node0.isFor());
1259:       assertFalse(node0.isNE());
1260:       assertFalse(node0.isRegExp());
1261:       assertFalse(node0.isDelProp());
1262:       assertFalse(node0.isVoid());
1263:       assertFalse(node0.isCatch());
1264:       assertFalse(node0.hasMoreThanOneChild());
1265:       assertFalse(node0.isCase());
1266:       assertFalse(node0.isDo());
1267:       assertFalse(node0.isLabel());
1268:       assertFalse(node0.isAssignAdd());
1269:       assertEquals((-1), node0.getCharno());
1270:       assertTrue(node0.isString());
1271:       assertFalse(node0.isNumber());
1272:       assertFalse(node0.isNew());
1273:       assertFalse(node0.isGetterDef());
1274:       assertFalse(node0.isOr());
1275:       assertFalse(node0.isEmpty());
1276:       assertFalse(node0.isAdd());
1277:       assertFalse(node0.isArrayLit());
1278:       assertFalse(node0.isLabelName());
1279:       assertFalse(node0.isStringKey());
1280:       assertFalse(node0.isVar());
1281:       assertFalse(node0.isParamList());
1282:       assertFalse(node0.isSwitch());
1283:       assertFalse(node0.isObjectLit());
1284:       assertFalse(node0.isAnd());
1285:       assertFalse(node0.isNot());
1286:       assertFalse(node0.isGetProp());
1287:       assertFalse(node0.isScript());
1288:       assertFalse(node0.hasOneChild());
1289:       assertFalse(node0.isAssign());
1290:       assertFalse(node0.hasChildren());
1291:       assertFalse(node0.isHook());
1292:       assertFalse(node0.isThis());
1293:       assertFalse(node0.isComma());
1294:       assertFalse(node0.isExprResult());
1295:       assertFalse(node0.isTypeOf());
1296:       assertFalse(node0.isDec());
1297:       assertEquals((-1), node0.getLineno());
1298:       assertFalse(node0.isBreak());
1299:       assertFalse(node0.isWith());
1300:       assertFalse(node0.isInstanceOf());
1301:       assertFalse(node0.isGetElem());
1302:       assertFalse(node0.isContinue());
1303:       assertFalse(node0.isWhile());
1304:       assertFalse(node0.isReturn());
1305:       assertFalse(node0.isInc());
1306:       assertEquals((-1), node0.getSourcePosition());
1307:       assertFalse(node0.isIn());
1308:       assertFalse(node0.isFalse());
1309:       assertFalse(node0.isThrow());
1310:       assertFalse(node0.isFunction());
1311:       assertFalse(node0.isCast());
1312:       assertFalse(jSDocInfo0.isIdGenerator());
1313:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1314:       assertFalse(jSDocInfo0.isExterns());
1315:       assertFalse(jSDocInfo0.isNoShadow());
1316:       assertFalse(jSDocInfo0.isExpose());
1317:       assertFalse(jSDocInfo0.makesStructs());
1318:       assertFalse(jSDocInfo0.isInterface());
1319:       assertNull(jSDocInfo0.getDeprecationReason());
1320:       assertNull(jSDocInfo0.getBlockDescription());
1321:       assertFalse(jSDocInfo0.makesDicts());
1322:       assertFalse(jSDocInfo0.isDeprecated());
1323:       assertNull(jSDocInfo0.getLendsName());
1324:       assertNull(jSDocInfo0.getVersion());
1325:       assertFalse(jSDocInfo0.isJaggerModule());
1326:       assertFalse(jSDocInfo0.isOverride());
1327:       assertFalse(jSDocInfo0.isNoSideEffects());
1328:       assertFalse(jSDocInfo0.isJavaDispatch());
1329:       assertNull(jSDocInfo0.getMeaning());
1330:       assertFalse(jSDocInfo0.isNgInject());
1331:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1332:       assertFalse(jSDocInfo0.isWizaction());
1333:       assertFalse(jSDocInfo0.isConstant());
1334:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1335:       assertFalse(jSDocInfo0.hasModifies());
1336:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1337:       assertFalse(jSDocInfo0.isNoTypeCheck());
1338:       assertNull(jSDocInfo0.getLicense());
1339:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1340:       assertFalse(jSDocInfo0.isHidden());
1341:       assertFalse(jSDocInfo0.isStableIdGenerator());
1342:       assertFalse(jSDocInfo0.isJaggerProvide());
1343:       assertFalse(jSDocInfo0.hasType());
1344:       assertNull(jSDocInfo0.getReturnDescription());
1345:       assertNull(jSDocInfo0.getOriginalCommentString());
1346:       assertFalse(jSDocInfo0.isDisposes());
1347:       assertFalse(jSDocInfo0.hasTypedefType());
1348:       assertEquals(0, jSDocInfo0.getParameterCount());
1349:       assertFalse(jSDocInfo0.hasBaseType());
1350:       assertFalse(jSDocInfo0.hasFileOverview());
1351:       assertFalse(jSDocInfo0.hasReturnType());
1352:       assertFalse(jSDocInfo0.isNoAlias());
1353:       assertFalse(jSDocInfo0.shouldPreserveTry());
1354:       assertFalse(jSDocInfo0.isImplicitCast());
1355:       assertFalse(jSDocInfo0.isExport());
1356:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1357:       assertFalse(jSDocInfo0.containsDeclaration());
1358:       assertFalse(jSDocInfo0.hasThisType());
1359:       assertFalse(jSDocInfo0.isJaggerInject());
1360:       assertFalse(jSDocInfo0.isConstructor());
1361:       assertNull(jSDocInfo0.getDescription());
1362:       assertNull(jSDocInfo0.getVisibility());
1363:       assertFalse(jSDocInfo0.isNoCompile());
1364:       assertFalse(jSDocInfo0.isDefine());
1365:       assertNull(jSDocInfo0.getFileOverview());
1366:       assertFalse(jSDocInfo0.hasEnumParameterType());
1367:       assertFalse(node1.isEmpty());
1368:       assertFalse(node1.isArrayLit());
1369:       assertFalse(node1.isFor());
1370:       assertFalse(node1.isDelProp());
1371:       assertFalse(node1.isIf());
1372:       assertFalse(node1.isTry());
1373:       assertFalse(node1.isDebugger());
1374:       assertFalse(node1.isNE());
1375:       assertFalse(node1.isTrue());
1376:       assertFalse(node1.isGetterDef());
1377:       assertFalse(node1.isIn());
1378:       assertEquals(40, node1.getType());
1379:       assertFalse(node1.isDefaultCase());
1380:       assertFalse(node1.isSwitch());
1381:       assertEquals(0, node1.getChildCount());
1382:       assertFalse(node1.isFunction());
1383:       assertFalse(node1.isVar());
1384:       assertFalse(node1.isCall());
1385:       assertFalse(node1.isBreak());
1386:       assertFalse(node1.isName());
1387:       assertFalse(node1.isGetProp());
1388:       assertFalse(node1.isNew());
1389:       assertFalse(node1.isAdd());
1390:       assertFalse(node1.isNull());
1391:       assertFalse(node1.isObjectLit());
1392:       assertFalse(node1.isWhile());
1393:       assertFalse(node1.isVoid());
1394:       assertFalse(node1.isComma());
1395:       assertFalse(node1.isExprResult());
1396:       assertFalse(node1.isReturn());
1397:       assertFalse(node1.hasChildren());
1398:       assertFalse(node1.isDec());
1399:       assertFalse(node1.isAssign());
1400:       assertFalse(node1.isTypeOf());
1401:       assertFalse(node1.isCast());
1402:       assertFalse(node1.isGetElem());
1403:       assertFalse(node1.hasOneChild());
1404:       assertFalse(node1.isLabelName());
1405:       assertFalse(node1.isScript());
1406:       assertEquals((-1), node1.getSourcePosition());
1407:       assertFalse(node1.isNot());
1408:       assertFalse(node1.isOr());
1409:       assertFalse(node1.isNumber());
1410:       assertFalse(node1.isAnd());
1411:       assertFalse(node1.isContinue());
1412:       assertFalse(node1.isAssignAdd());
1413:       assertFalse(node1.isDo());
1414:       assertFalse(node1.isLabel());
1415:       assertFalse(node1.isFalse());
1416:       assertFalse(node1.isThrow());
1417:       assertFalse(node1.isStringKey());
1418:       assertFalse(node1.isHook());
1419:       assertTrue(node1.isString());
1420:       assertEquals((-1), node1.getCharno());
1421:       assertFalse(node1.isParamList());
1422:       assertFalse(node1.isSetterDef());
1423:       assertFalse(node1.isInc());
1424:       assertFalse(node1.isCase());
1425:       assertFalse(node1.isCatch());
1426:       assertEquals((-1), node1.getLineno());
1427:       assertFalse(node1.isThis());
1428:       assertFalse(node1.isBlock());
1429:       assertFalse(node1.isInstanceOf());
1430:       assertFalse(node1.isWith());
1431:       assertFalse(node1.hasMoreThanOneChild());
1432:       assertFalse(node1.isRegExp());
1433:       assertEquals((-1), int0);
1434:       assertEquals(57, Node.REFLECTED_OBJECT);
1435:       assertEquals(52, Node.LENGTH);
1436:       assertEquals(40, Node.ORIGINALNAME_PROP);
1437:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1438:       assertEquals(8, Node.FLAG_NO_THROWS);
1439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1440:       assertEquals(50, Node.FREE_CALL);
1441:       assertEquals(54, Node.SLASH_V);
1442:       assertEquals(46, Node.IS_NAMESPACE);
1443:       assertEquals(55, Node.INFERRED_FUNCTION);
1444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1445:       assertEquals(39, Node.EMPTY_BLOCK);
1446:       assertEquals(2, Node.POST_FLAG);
1447:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1448:       assertEquals(57, Node.LAST_PROP);
1449:       assertEquals(30, Node.VAR_ARGS_NAME);
1450:       assertEquals(47, Node.IS_DISPATCHER);
1451:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1453:       assertEquals(53, Node.INPUT_ID);
1454:       assertEquals(29, Node.JSDOC_INFO_PROP);
1455:       assertEquals(43, Node.IS_CONSTANT_NAME);
1456:       assertEquals(56, Node.CHANGE_TIME);
1457:       assertEquals(36, Node.QUOTED_PROP);
1458:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1460:       assertEquals(12, Node.COLUMN_BITS);
1461:       assertEquals(32, Node.INCRDECR_PROP);
1462:       assertEquals(4095, Node.COLUMN_MASK);
1463:       assertEquals(1, Node.DECR_FLAG);
1464:       assertEquals(48, Node.DIRECTIVES);
1465:       assertEquals(49, Node.DIRECT_EVAL);
1466:       assertEquals(37, Node.OPT_ARG_NAME);
1467:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1468:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1469:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1470:       assertEquals(4095, Node.COLUMN_MASK);
1471:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1472:       assertEquals(55, Node.INFERRED_FUNCTION);
1473:       assertEquals(8, Node.FLAG_NO_THROWS);
1474:       assertEquals(48, Node.DIRECTIVES);
1475:       assertEquals(36, Node.QUOTED_PROP);
1476:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1477:       assertEquals(43, Node.IS_CONSTANT_NAME);
1478:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1479:       assertEquals(50, Node.FREE_CALL);
1480:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1481:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1483:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1484:       assertEquals(12, Node.COLUMN_BITS);
1485:       assertEquals(32, Node.INCRDECR_PROP);
1486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1487:       assertEquals(1, Node.DECR_FLAG);
1488:       assertEquals(30, Node.VAR_ARGS_NAME);
1489:       assertEquals(37, Node.OPT_ARG_NAME);
1490:       assertEquals(49, Node.DIRECT_EVAL);
1491:       assertEquals(46, Node.IS_NAMESPACE);
1492:       assertEquals(54, Node.SLASH_V);
1493:       assertEquals(56, Node.CHANGE_TIME);
1494:       assertEquals(40, Node.ORIGINALNAME_PROP);
1495:       assertEquals(57, Node.REFLECTED_OBJECT);
1496:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1497:       assertEquals(29, Node.JSDOC_INFO_PROP);
1498:       assertEquals(52, Node.LENGTH);
1499:       assertEquals(53, Node.INPUT_ID);
1500:       assertEquals(2, Node.POST_FLAG);
1501:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1502:       assertEquals(39, Node.EMPTY_BLOCK);
1503:       assertEquals(47, Node.IS_DISPATCHER);
1504:       assertEquals(57, Node.LAST_PROP);
1505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1506:       assertSame(node0, node1);
1507:       assertSame(node1, node0);
1508:       
1509:       Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
1510:       assertEquals(0, node0.getChildCount());
1511:       assertFalse(node0.isDefaultCase());
1512:       assertEquals(40, node0.getType());
1513:       assertFalse(node0.isTrue());
1514:       assertFalse(node0.isDebugger());
1515:       assertFalse(node0.isSetterDef());
1516:       assertFalse(node0.isTry());
1517:       assertFalse(node0.isCall());
1518:       assertFalse(node0.isName());
1519:       assertFalse(node0.isIf());
1520:       assertFalse(node0.isNull());
1521:       assertFalse(node0.isBlock());
1522:       assertFalse(node0.isFor());
1523:       assertFalse(node0.isNE());
1524:       assertFalse(node0.isRegExp());
1525:       assertFalse(node0.isDelProp());
1526:       assertFalse(node0.isVoid());
1527:       assertFalse(node0.isCatch());
1528:       assertFalse(node0.hasMoreThanOneChild());
1529:       assertFalse(node0.isCase());
1530:       assertFalse(node0.isDo());
1531:       assertFalse(node0.isLabel());
1532:       assertFalse(node0.isAssignAdd());
1533:       assertEquals((-1), node0.getCharno());
1534:       assertTrue(node0.isString());
1535:       assertFalse(node0.isNumber());
1536:       assertFalse(node0.isNew());
1537:       assertFalse(node0.isGetterDef());
1538:       assertFalse(node0.isOr());
1539:       assertFalse(node0.isEmpty());
1540:       assertFalse(node0.isAdd());
1541:       assertFalse(node0.isArrayLit());
1542:       assertFalse(node0.isLabelName());
1543:       assertFalse(node0.isStringKey());
1544:       assertFalse(node0.isVar());
1545:       assertFalse(node0.isParamList());
1546:       assertFalse(node0.isSwitch());
1547:       assertFalse(node0.isObjectLit());
1548:       assertFalse(node0.isAnd());
1549:       assertFalse(node0.isNot());
1550:       assertFalse(node0.isGetProp());
1551:       assertFalse(node0.isScript());
1552:       assertFalse(node0.hasOneChild());
1553:       assertFalse(node0.isAssign());
1554:       assertFalse(node0.hasChildren());
1555:       assertFalse(node0.isHook());
1556:       assertFalse(node0.isThis());
1557:       assertFalse(node0.isComma());
1558:       assertFalse(node0.isExprResult());
1559:       assertFalse(node0.isTypeOf());
1560:       assertFalse(node0.isDec());
1561:       assertEquals((-1), node0.getLineno());
1562:       assertFalse(node0.isBreak());
1563:       assertFalse(node0.isWith());
1564:       assertFalse(node0.isInstanceOf());
1565:       assertFalse(node0.isGetElem());
1566:       assertFalse(node0.isContinue());
1567:       assertFalse(node0.isWhile());
1568:       assertFalse(node0.isReturn());
1569:       assertFalse(node0.isInc());
1570:       assertEquals((-1), node0.getSourcePosition());
1571:       assertFalse(node0.isIn());
1572:       assertFalse(node0.isFalse());
1573:       assertFalse(node0.isThrow());
1574:       assertFalse(node0.isFunction());
1575:       assertFalse(node0.isCast());
1576:       assertFalse(jSDocInfo0.isIdGenerator());
1577:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1578:       assertFalse(jSDocInfo0.isExterns());
1579:       assertFalse(jSDocInfo0.isNoShadow());
1580:       assertFalse(jSDocInfo0.isExpose());
1581:       assertFalse(jSDocInfo0.makesStructs());
1582:       assertFalse(jSDocInfo0.isInterface());
1583:       assertNull(jSDocInfo0.getDeprecationReason());
1584:       assertNull(jSDocInfo0.getBlockDescription());
1585:       assertFalse(jSDocInfo0.makesDicts());
1586:       assertFalse(jSDocInfo0.isDeprecated());
1587:       assertNull(jSDocInfo0.getLendsName());
1588:       assertNull(jSDocInfo0.getVersion());
1589:       assertFalse(jSDocInfo0.isJaggerModule());
1590:       assertFalse(jSDocInfo0.isOverride());
1591:       assertFalse(jSDocInfo0.isNoSideEffects());
1592:       assertFalse(jSDocInfo0.isJavaDispatch());
1593:       assertNull(jSDocInfo0.getMeaning());
1594:       assertFalse(jSDocInfo0.isNgInject());
1595:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1596:       assertFalse(jSDocInfo0.isWizaction());
1597:       assertFalse(jSDocInfo0.isConstant());
1598:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1599:       assertFalse(jSDocInfo0.hasModifies());
1600:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1601:       assertFalse(jSDocInfo0.isNoTypeCheck());
1602:       assertNull(jSDocInfo0.getLicense());
1603:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1604:       assertFalse(jSDocInfo0.isHidden());
1605:       assertFalse(jSDocInfo0.isStableIdGenerator());
1606:       assertFalse(jSDocInfo0.isJaggerProvide());
1607:       assertFalse(jSDocInfo0.hasType());
1608:       assertNull(jSDocInfo0.getReturnDescription());
1609:       assertNull(jSDocInfo0.getOriginalCommentString());
1610:       assertFalse(jSDocInfo0.isDisposes());
1611:       assertFalse(jSDocInfo0.hasTypedefType());
1612:       assertEquals(0, jSDocInfo0.getParameterCount());
1613:       assertFalse(jSDocInfo0.hasBaseType());
1614:       assertFalse(jSDocInfo0.hasFileOverview());
1615:       assertFalse(jSDocInfo0.hasReturnType());
1616:       assertFalse(jSDocInfo0.isNoAlias());
1617:       assertFalse(jSDocInfo0.shouldPreserveTry());
1618:       assertFalse(jSDocInfo0.isImplicitCast());
1619:       assertFalse(jSDocInfo0.isExport());
1620:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1621:       assertFalse(jSDocInfo0.containsDeclaration());
1622:       assertFalse(jSDocInfo0.hasThisType());
1623:       assertFalse(jSDocInfo0.isJaggerInject());
1624:       assertFalse(jSDocInfo0.isConstructor());
1625:       assertNull(jSDocInfo0.getDescription());
1626:       assertNull(jSDocInfo0.getVisibility());
1627:       assertFalse(jSDocInfo0.isNoCompile());
1628:       assertFalse(jSDocInfo0.isDefine());
1629:       assertNull(jSDocInfo0.getFileOverview());
1630:       assertFalse(jSDocInfo0.hasEnumParameterType());
1631:       assertFalse(node1.isEmpty());
1632:       assertFalse(node1.isArrayLit());
1633:       assertFalse(node1.isFor());
1634:       assertFalse(node1.isDelProp());
1635:       assertFalse(node1.isIf());
1636:       assertFalse(node1.isTry());
1637:       assertFalse(node1.isDebugger());
1638:       assertFalse(node1.isNE());
1639:       assertFalse(node1.isTrue());
1640:       assertFalse(node1.isGetterDef());
1641:       assertFalse(node1.isIn());
1642:       assertEquals(40, node1.getType());
1643:       assertFalse(node1.isDefaultCase());
1644:       assertFalse(node1.isSwitch());
1645:       assertEquals(0, node1.getChildCount());
1646:       assertFalse(node1.isFunction());
1647:       assertFalse(node1.isVar());
1648:       assertFalse(node1.isCall());
1649:       assertFalse(node1.isBreak());
1650:       assertFalse(node1.isName());
1651:       assertFalse(node1.isGetProp());
1652:       assertFalse(node1.isNew());
1653:       assertFalse(node1.isAdd());
1654:       assertFalse(node1.isNull());
1655:       assertFalse(node1.isObjectLit());
1656:       assertFalse(node1.isWhile());
1657:       assertFalse(node1.isVoid());
1658:       assertFalse(node1.isComma());
1659:       assertFalse(node1.isExprResult());
1660:       assertFalse(node1.isReturn());
1661:       assertFalse(node1.hasChildren());
1662:       assertFalse(node1.isDec());
1663:       assertFalse(node1.isAssign());
1664:       assertFalse(node1.isTypeOf());
1665:       assertFalse(node1.isCast());
1666:       assertFalse(node1.isGetElem());
1667:       assertFalse(node1.hasOneChild());
1668:       assertFalse(node1.isLabelName());
1669:       assertFalse(node1.isScript());
1670:       assertEquals((-1), node1.getSourcePosition());
1671:       assertFalse(node1.isNot());
1672:       assertFalse(node1.isOr());
1673:       assertFalse(node1.isNumber());
1674:       assertFalse(node1.isAnd());
1675:       assertFalse(node1.isContinue());
1676:       assertFalse(node1.isAssignAdd());
1677:       assertFalse(node1.isDo());
1678:       assertFalse(node1.isLabel());
1679:       assertFalse(node1.isFalse());
1680:       assertFalse(node1.isThrow());
1681:       assertFalse(node1.isStringKey());
1682:       assertFalse(node1.isHook());
1683:       assertTrue(node1.isString());
1684:       assertEquals((-1), node1.getCharno());
1685:       assertFalse(node1.isParamList());
1686:       assertFalse(node1.isSetterDef());
1687:       assertFalse(node1.isInc());
1688:       assertFalse(node1.isCase());
1689:       assertFalse(node1.isCatch());
1690:       assertEquals((-1), node1.getLineno());
1691:       assertFalse(node1.isThis());
1692:       assertFalse(node1.isBlock());
1693:       assertFalse(node1.isInstanceOf());
1694:       assertFalse(node1.isWith());
1695:       assertFalse(node1.hasMoreThanOneChild());
1696:       assertFalse(node1.isRegExp());
1697:       assertNotNull(node_AncestorIterable0);
1698:       assertEquals(57, Node.REFLECTED_OBJECT);
1699:       assertEquals(52, Node.LENGTH);
1700:       assertEquals(40, Node.ORIGINALNAME_PROP);
1701:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1702:       assertEquals(8, Node.FLAG_NO_THROWS);
1703:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1704:       assertEquals(50, Node.FREE_CALL);
1705:       assertEquals(54, Node.SLASH_V);
1706:       assertEquals(46, Node.IS_NAMESPACE);
1707:       assertEquals(55, Node.INFERRED_FUNCTION);
1708:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1709:       assertEquals(39, Node.EMPTY_BLOCK);
1710:       assertEquals(2, Node.POST_FLAG);
1711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1712:       assertEquals(57, Node.LAST_PROP);
1713:       assertEquals(30, Node.VAR_ARGS_NAME);
1714:       assertEquals(47, Node.IS_DISPATCHER);
1715:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1716:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1717:       assertEquals(53, Node.INPUT_ID);
1718:       assertEquals(29, Node.JSDOC_INFO_PROP);
1719:       assertEquals(43, Node.IS_CONSTANT_NAME);
1720:       assertEquals(56, Node.CHANGE_TIME);
1721:       assertEquals(36, Node.QUOTED_PROP);
1722:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1723:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1724:       assertEquals(12, Node.COLUMN_BITS);
1725:       assertEquals(32, Node.INCRDECR_PROP);
1726:       assertEquals(4095, Node.COLUMN_MASK);
1727:       assertEquals(1, Node.DECR_FLAG);
1728:       assertEquals(48, Node.DIRECTIVES);
1729:       assertEquals(49, Node.DIRECT_EVAL);
1730:       assertEquals(37, Node.OPT_ARG_NAME);
1731:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1733:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1734:       assertEquals(4095, Node.COLUMN_MASK);
1735:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1736:       assertEquals(55, Node.INFERRED_FUNCTION);
1737:       assertEquals(8, Node.FLAG_NO_THROWS);
1738:       assertEquals(48, Node.DIRECTIVES);
1739:       assertEquals(36, Node.QUOTED_PROP);
1740:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1741:       assertEquals(43, Node.IS_CONSTANT_NAME);
1742:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1743:       assertEquals(50, Node.FREE_CALL);
1744:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1745:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1746:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1747:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1748:       assertEquals(12, Node.COLUMN_BITS);
1749:       assertEquals(32, Node.INCRDECR_PROP);
1750:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1751:       assertEquals(1, Node.DECR_FLAG);
1752:       assertEquals(30, Node.VAR_ARGS_NAME);
1753:       assertEquals(37, Node.OPT_ARG_NAME);
1754:       assertEquals(49, Node.DIRECT_EVAL);
1755:       assertEquals(46, Node.IS_NAMESPACE);
1756:       assertEquals(54, Node.SLASH_V);
1757:       assertEquals(56, Node.CHANGE_TIME);
1758:       assertEquals(40, Node.ORIGINALNAME_PROP);
1759:       assertEquals(57, Node.REFLECTED_OBJECT);
1760:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1761:       assertEquals(29, Node.JSDOC_INFO_PROP);
1762:       assertEquals(52, Node.LENGTH);
1763:       assertEquals(53, Node.INPUT_ID);
1764:       assertEquals(2, Node.POST_FLAG);
1765:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1766:       assertEquals(39, Node.EMPTY_BLOCK);
1767:       assertEquals(47, Node.IS_DISPATCHER);
1768:       assertEquals(57, Node.LAST_PROP);
1769:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1770:       assertSame(node0, node1);
1771:       assertSame(node1, node0);
1772:       
1773:       boolean boolean3 = node1.isLabel();
1774:       assertTrue(boolean3 == boolean2);
1775:       assertTrue(boolean3 == boolean1);
1776:       assertTrue(boolean3 == boolean0);
1777:       assertEquals(0, node0.getChildCount());
1778:       assertFalse(node0.isDefaultCase());
1779:       assertEquals(40, node0.getType());
1780:       assertFalse(node0.isTrue());
1781:       assertFalse(node0.isDebugger());
1782:       assertFalse(node0.isSetterDef());
1783:       assertFalse(node0.isTry());
1784:       assertFalse(node0.isCall());
1785:       assertFalse(node0.isName());
1786:       assertFalse(node0.isIf());
1787:       assertFalse(node0.isNull());
1788:       assertFalse(node0.isBlock());
1789:       assertFalse(node0.isFor());
1790:       assertFalse(node0.isNE());
1791:       assertFalse(node0.isRegExp());
1792:       assertFalse(node0.isDelProp());
1793:       assertFalse(node0.isVoid());
1794:       assertFalse(node0.isCatch());
1795:       assertFalse(node0.hasMoreThanOneChild());
1796:       assertFalse(node0.isCase());
1797:       assertFalse(node0.isDo());
1798:       assertFalse(node0.isLabel());
1799:       assertFalse(node0.isAssignAdd());
1800:       assertEquals((-1), node0.getCharno());
1801:       assertTrue(node0.isString());
1802:       assertFalse(node0.isNumber());
1803:       assertFalse(node0.isNew());
1804:       assertFalse(node0.isGetterDef());
1805:       assertFalse(node0.isOr());
1806:       assertFalse(node0.isEmpty());
1807:       assertFalse(node0.isAdd());
1808:       assertFalse(node0.isArrayLit());
1809:       assertFalse(node0.isLabelName());
1810:       assertFalse(node0.isStringKey());
1811:       assertFalse(node0.isVar());
1812:       assertFalse(node0.isParamList());
1813:       assertFalse(node0.isSwitch());
1814:       assertFalse(node0.isObjectLit());
1815:       assertFalse(node0.isAnd());
1816:       assertFalse(node0.isNot());
1817:       assertFalse(node0.isGetProp());
1818:       assertFalse(node0.isScript());
1819:       assertFalse(node0.hasOneChild());
1820:       assertFalse(node0.isAssign());
1821:       assertFalse(node0.hasChildren());
1822:       assertFalse(node0.isHook());
1823:       assertFalse(node0.isThis());
1824:       assertFalse(node0.isComma());
1825:       assertFalse(node0.isExprResult());
1826:       assertFalse(node0.isTypeOf());
1827:       assertFalse(node0.isDec());
1828:       assertEquals((-1), node0.getLineno());
1829:       assertFalse(node0.isBreak());
1830:       assertFalse(node0.isWith());
1831:       assertFalse(node0.isInstanceOf());
1832:       assertFalse(node0.isGetElem());
1833:       assertFalse(node0.isContinue());
1834:       assertFalse(node0.isWhile());
1835:       assertFalse(node0.isReturn());
1836:       assertFalse(node0.isInc());
1837:       assertEquals((-1), node0.getSourcePosition());
1838:       assertFalse(node0.isIn());
1839:       assertFalse(node0.isFalse());
1840:       assertFalse(node0.isThrow());
1841:       assertFalse(node0.isFunction());
1842:       assertFalse(node0.isCast());
1843:       assertFalse(jSDocInfo0.isIdGenerator());
1844:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1845:       assertFalse(jSDocInfo0.isExterns());
1846:       assertFalse(jSDocInfo0.isNoShadow());
1847:       assertFalse(jSDocInfo0.isExpose());
1848:       assertFalse(jSDocInfo0.makesStructs());
1849:       assertFalse(jSDocInfo0.isInterface());
1850:       assertNull(jSDocInfo0.getDeprecationReason());
1851:       assertNull(jSDocInfo0.getBlockDescription());
1852:       assertFalse(jSDocInfo0.makesDicts());
1853:       assertFalse(jSDocInfo0.isDeprecated());
1854:       assertNull(jSDocInfo0.getLendsName());
1855:       assertNull(jSDocInfo0.getVersion());
1856:       assertFalse(jSDocInfo0.isJaggerModule());
1857:       assertFalse(jSDocInfo0.isOverride());
1858:       assertFalse(jSDocInfo0.isNoSideEffects());
1859:       assertFalse(jSDocInfo0.isJavaDispatch());
1860:       assertNull(jSDocInfo0.getMeaning());
1861:       assertFalse(jSDocInfo0.isNgInject());
1862:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1863:       assertFalse(jSDocInfo0.isWizaction());
1864:       assertFalse(jSDocInfo0.isConstant());
1865:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1866:       assertFalse(jSDocInfo0.hasModifies());
1867:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1868:       assertFalse(jSDocInfo0.isNoTypeCheck());
1869:       assertNull(jSDocInfo0.getLicense());
1870:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1871:       assertFalse(jSDocInfo0.isHidden());
1872:       assertFalse(jSDocInfo0.isStableIdGenerator());
1873:       assertFalse(jSDocInfo0.isJaggerProvide());
1874:       assertFalse(jSDocInfo0.hasType());
1875:       assertNull(jSDocInfo0.getReturnDescription());
1876:       assertNull(jSDocInfo0.getOriginalCommentString());
1877:       assertFalse(jSDocInfo0.isDisposes());
1878:       assertFalse(jSDocInfo0.hasTypedefType());
1879:       assertEquals(0, jSDocInfo0.getParameterCount());
1880:       assertFalse(jSDocInfo0.hasBaseType());
1881:       assertFalse(jSDocInfo0.hasFileOverview());
1882:       assertFalse(jSDocInfo0.hasReturnType());
1883:       assertFalse(jSDocInfo0.isNoAlias());
1884:       assertFalse(jSDocInfo0.shouldPreserveTry());
1885:       assertFalse(jSDocInfo0.isImplicitCast());
1886:       assertFalse(jSDocInfo0.isExport());
1887:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1888:       assertFalse(jSDocInfo0.containsDeclaration());
1889:       assertFalse(jSDocInfo0.hasThisType());
1890:       assertFalse(jSDocInfo0.isJaggerInject());
1891:       assertFalse(jSDocInfo0.isConstructor());
1892:       assertNull(jSDocInfo0.getDescription());
1893:       assertNull(jSDocInfo0.getVisibility());
1894:       assertFalse(jSDocInfo0.isNoCompile());
1895:       assertFalse(jSDocInfo0.isDefine());
1896:       assertNull(jSDocInfo0.getFileOverview());
1897:       assertFalse(jSDocInfo0.hasEnumParameterType());
1898:       assertFalse(node1.isEmpty());
1899:       assertFalse(node1.isArrayLit());
1900:       assertFalse(node1.isFor());
1901:       assertFalse(node1.isDelProp());
1902:       assertFalse(node1.isIf());
1903:       assertFalse(node1.isTry());
1904:       assertFalse(node1.isDebugger());
1905:       assertFalse(node1.isNE());
1906:       assertFalse(node1.isTrue());
1907:       assertFalse(node1.isGetterDef());
1908:       assertFalse(node1.isIn());
1909:       assertEquals(40, node1.getType());
1910:       assertFalse(node1.isDefaultCase());
1911:       assertFalse(node1.isSwitch());
1912:       assertEquals(0, node1.getChildCount());
1913:       assertFalse(node1.isFunction());
1914:       assertFalse(node1.isVar());
1915:       assertFalse(node1.isCall());
1916:       assertFalse(node1.isBreak());
1917:       assertFalse(node1.isName());
1918:       assertFalse(node1.isGetProp());
1919:       assertFalse(node1.isNew());
1920:       assertFalse(node1.isAdd());
1921:       assertFalse(node1.isNull());
1922:       assertFalse(node1.isObjectLit());
1923:       assertFalse(node1.isWhile());
1924:       assertFalse(node1.isVoid());
1925:       assertFalse(node1.isComma());
1926:       assertFalse(node1.isExprResult());
1927:       assertFalse(node1.isReturn());
1928:       assertFalse(node1.hasChildren());
1929:       assertFalse(node1.isDec());
1930:       assertFalse(node1.isAssign());
1931:       assertFalse(node1.isTypeOf());
1932:       assertFalse(node1.isCast());
1933:       assertFalse(node1.isGetElem());
1934:       assertFalse(node1.hasOneChild());
1935:       assertFalse(node1.isLabelName());
1936:       assertFalse(node1.isScript());
1937:       assertEquals((-1), node1.getSourcePosition());
1938:       assertFalse(node1.isNot());
1939:       assertFalse(node1.isOr());
1940:       assertFalse(node1.isNumber());
1941:       assertFalse(node1.isAnd());
1942:       assertFalse(node1.isContinue());
1943:       assertFalse(node1.isAssignAdd());
1944:       assertFalse(node1.isDo());
1945:       assertFalse(node1.isLabel());
1946:       assertFalse(node1.isFalse());
1947:       assertFalse(node1.isThrow());
1948:       assertFalse(node1.isStringKey());
1949:       assertFalse(node1.isHook());
1950:       assertTrue(node1.isString());
1951:       assertEquals((-1), node1.getCharno());
1952:       assertFalse(node1.isParamList());
1953:       assertFalse(node1.isSetterDef());
1954:       assertFalse(node1.isInc());
1955:       assertFalse(node1.isCase());
1956:       assertFalse(node1.isCatch());
1957:       assertEquals((-1), node1.getLineno());
1958:       assertFalse(node1.isThis());
1959:       assertFalse(node1.isBlock());
1960:       assertFalse(node1.isInstanceOf());
1961:       assertFalse(node1.isWith());
1962:       assertFalse(node1.hasMoreThanOneChild());
1963:       assertFalse(node1.isRegExp());
1964:       assertFalse(boolean3);
1965:       assertEquals(57, Node.REFLECTED_OBJECT);
1966:       assertEquals(52, Node.LENGTH);
1967:       assertEquals(40, Node.ORIGINALNAME_PROP);
1968:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1969:       assertEquals(8, Node.FLAG_NO_THROWS);
1970:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1971:       assertEquals(50, Node.FREE_CALL);
1972:       assertEquals(54, Node.SLASH_V);
1973:       assertEquals(46, Node.IS_NAMESPACE);
1974:       assertEquals(55, Node.INFERRED_FUNCTION);
1975:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1976:       assertEquals(39, Node.EMPTY_BLOCK);
1977:       assertEquals(2, Node.POST_FLAG);
1978:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1979:       assertEquals(57, Node.LAST_PROP);
1980:       assertEquals(30, Node.VAR_ARGS_NAME);
1981:       assertEquals(47, Node.IS_DISPATCHER);
1982:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1983:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1984:       assertEquals(53, Node.INPUT_ID);
1985:       assertEquals(29, Node.JSDOC_INFO_PROP);
1986:       assertEquals(43, Node.IS_CONSTANT_NAME);
1987:       assertEquals(56, Node.CHANGE_TIME);
1988:       assertEquals(36, Node.QUOTED_PROP);
1989:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1990:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1991:       assertEquals(12, Node.COLUMN_BITS);
1992:       assertEquals(32, Node.INCRDECR_PROP);
1993:       assertEquals(4095, Node.COLUMN_MASK);
1994:       assertEquals(1, Node.DECR_FLAG);
1995:       assertEquals(48, Node.DIRECTIVES);
1996:       assertEquals(49, Node.DIRECT_EVAL);
1997:       assertEquals(37, Node.OPT_ARG_NAME);
1998:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1999:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2000:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2001:       assertEquals(4095, Node.COLUMN_MASK);
2002:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2003:       assertEquals(55, Node.INFERRED_FUNCTION);
2004:       assertEquals(8, Node.FLAG_NO_THROWS);
2005:       assertEquals(48, Node.DIRECTIVES);
2006:       assertEquals(36, Node.QUOTED_PROP);
2007:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2008:       assertEquals(43, Node.IS_CONSTANT_NAME);
2009:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2010:       assertEquals(50, Node.FREE_CALL);
2011:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2012:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2013:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2014:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2015:       assertEquals(12, Node.COLUMN_BITS);
2016:       assertEquals(32, Node.INCRDECR_PROP);
2017:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2018:       assertEquals(1, Node.DECR_FLAG);
2019:       assertEquals(30, Node.VAR_ARGS_NAME);
2020:       assertEquals(37, Node.OPT_ARG_NAME);
2021:       assertEquals(49, Node.DIRECT_EVAL);
2022:       assertEquals(46, Node.IS_NAMESPACE);
2023:       assertEquals(54, Node.SLASH_V);
2024:       assertEquals(56, Node.CHANGE_TIME);
2025:       assertEquals(40, Node.ORIGINALNAME_PROP);
2026:       assertEquals(57, Node.REFLECTED_OBJECT);
2027:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2028:       assertEquals(29, Node.JSDOC_INFO_PROP);
2029:       assertEquals(52, Node.LENGTH);
2030:       assertEquals(53, Node.INPUT_ID);
2031:       assertEquals(2, Node.POST_FLAG);
2032:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2033:       assertEquals(39, Node.EMPTY_BLOCK);
2034:       assertEquals(47, Node.IS_DISPATCHER);
2035:       assertEquals(57, Node.LAST_PROP);
2036:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2037:       assertSame(node0, node1);
2038:       assertSame(node1, node0);
2039:       
2040:       Node node2 = node1.removeFirstChild();
2041:       assertEquals(0, node0.getChildCount());
2042:       assertFalse(node0.isDefaultCase());
2043:       assertEquals(40, node0.getType());
2044:       assertFalse(node0.isTrue());
2045:       assertFalse(node0.isDebugger());
2046:       assertFalse(node0.isSetterDef());
2047:       assertFalse(node0.isTry());
2048:       assertFalse(node0.isCall());
2049:       assertFalse(node0.isName());
2050:       assertFalse(node0.isIf());
2051:       assertFalse(node0.isNull());
2052:       assertFalse(node0.isBlock());
2053:       assertFalse(node0.isFor());
2054:       assertFalse(node0.isNE());
2055:       assertFalse(node0.isRegExp());
2056:       assertFalse(node0.isDelProp());
2057:       assertFalse(node0.isVoid());
2058:       assertFalse(node0.isCatch());
2059:       assertFalse(node0.hasMoreThanOneChild());
2060:       assertFalse(node0.isCase());
2061:       assertFalse(node0.isDo());
2062:       assertFalse(node0.isLabel());
2063:       assertFalse(node0.isAssignAdd());
2064:       assertEquals((-1), node0.getCharno());
2065:       assertTrue(node0.isString());
2066:       assertFalse(node0.isNumber());
2067:       assertFalse(node0.isNew());
2068:       assertFalse(node0.isGetterDef());
2069:       assertFalse(node0.isOr());
2070:       assertFalse(node0.isEmpty());
2071:       assertFalse(node0.isAdd());
2072:       assertFalse(node0.isArrayLit());
2073:       assertFalse(node0.isLabelName());
2074:       assertFalse(node0.isStringKey());
2075:       assertFalse(node0.isVar());
2076:       assertFalse(node0.isParamList());
2077:       assertFalse(node0.isSwitch());
2078:       assertFalse(node0.isObjectLit());
2079:       assertFalse(node0.isAnd());
2080:       assertFalse(node0.isNot());
2081:       assertFalse(node0.isGetProp());
2082:       assertFalse(node0.isScript());
2083:       assertFalse(node0.hasOneChild());
2084:       assertFalse(node0.isAssign());
2085:       assertFalse(node0.hasChildren());
2086:       assertFalse(node0.isHook());
2087:       assertFalse(node0.isThis());
2088:       assertFalse(node0.isComma());
2089:       assertFalse(node0.isExprResult());
2090:       assertFalse(node0.isTypeOf());
2091:       assertFalse(node0.isDec());
2092:       assertEquals((-1), node0.getLineno());
2093:       assertFalse(node0.isBreak());
2094:       assertFalse(node0.isWith());
2095:       assertFalse(node0.isInstanceOf());
2096:       assertFalse(node0.isGetElem());
2097:       assertFalse(node0.isContinue());
2098:       assertFalse(node0.isWhile());
2099:       assertFalse(node0.isReturn());
2100:       assertFalse(node0.isInc());
2101:       assertEquals((-1), node0.getSourcePosition());
2102:       assertFalse(node0.isIn());
2103:       assertFalse(node0.isFalse());
2104:       assertFalse(node0.isThrow());
2105:       assertFalse(node0.isFunction());
2106:       assertFalse(node0.isCast());
2107:       assertFalse(jSDocInfo0.isIdGenerator());
2108:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
2109:       assertFalse(jSDocInfo0.isExterns());
2110:       assertFalse(jSDocInfo0.isNoShadow());
2111:       assertFalse(jSDocInfo0.isExpose());
2112:       assertFalse(jSDocInfo0.makesStructs());
2113:       assertFalse(jSDocInfo0.isInterface());
2114:       assertNull(jSDocInfo0.getDeprecationReason());
2115:       assertNull(jSDocInfo0.getBlockDescription());
2116:       assertFalse(jSDocInfo0.makesDicts());
2117:       assertFalse(jSDocInfo0.isDeprecated());
2118:       assertNull(jSDocInfo0.getLendsName());
2119:       assertNull(jSDocInfo0.getVersion());
2120:       assertFalse(jSDocInfo0.isJaggerModule());
2121:       assertFalse(jSDocInfo0.isOverride());
2122:       assertFalse(jSDocInfo0.isNoSideEffects());
2123:       assertFalse(jSDocInfo0.isJavaDispatch());
2124:       assertNull(jSDocInfo0.getMeaning());
2125:       assertFalse(jSDocInfo0.isNgInject());
2126:       assertEquals("JSDocInfo", jSDocInfo0.toString());
2127:       assertFalse(jSDocInfo0.isWizaction());
2128:       assertFalse(jSDocInfo0.isConstant());
2129:       assertFalse(jSDocInfo0.isMappedIdGenerator());
2130:       assertFalse(jSDocInfo0.hasModifies());
2131:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
2132:       assertFalse(jSDocInfo0.isNoTypeCheck());
2133:       assertNull(jSDocInfo0.getLicense());
2134:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
2135:       assertFalse(jSDocInfo0.isHidden());
2136:       assertFalse(jSDocInfo0.isStableIdGenerator());
2137:       assertFalse(jSDocInfo0.isJaggerProvide());
2138:       assertFalse(jSDocInfo0.hasType());
2139:       assertNull(jSDocInfo0.getReturnDescription());
2140:       assertNull(jSDocInfo0.getOriginalCommentString());
2141:       assertFalse(jSDocInfo0.isDisposes());
2142:       assertFalse(jSDocInfo0.hasTypedefType());
2143:       assertEquals(0, jSDocInfo0.getParameterCount());
2144:       assertFalse(jSDocInfo0.hasBaseType());
2145:       assertFalse(jSDocInfo0.hasFileOverview());
2146:       assertFalse(jSDocInfo0.hasReturnType());
2147:       assertFalse(jSDocInfo0.isNoAlias());
2148:       assertFalse(jSDocInfo0.shouldPreserveTry());
2149:       assertFalse(jSDocInfo0.isImplicitCast());
2150:       assertFalse(jSDocInfo0.isExport());
2151:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
2152:       assertFalse(jSDocInfo0.containsDeclaration());
2153:       assertFalse(jSDocInfo0.hasThisType());
2154:       assertFalse(jSDocInfo0.isJaggerInject());
2155:       assertFalse(jSDocInfo0.isConstructor());
2156:       assertNull(jSDocInfo0.getDescription());
2157:       assertNull(jSDocInfo0.getVisibility());
2158:       assertFalse(jSDocInfo0.isNoCompile());
2159:       assertFalse(jSDocInfo0.isDefine());
2160:       assertNull(jSDocInfo0.getFileOverview());
2161:       assertFalse(jSDocInfo0.hasEnumParameterType());
2162:       assertFalse(node1.isEmpty());
2163:       assertFalse(node1.isArrayLit());
2164:       assertFalse(node1.isFor());
2165:       assertFalse(node1.isDelProp());
2166:       assertFalse(node1.isIf());
2167:       assertFalse(node1.isTry());
2168:       assertFalse(node1.isDebugger());
2169:       assertFalse(node1.isNE());
2170:       assertFalse(node1.isTrue());
2171:       assertFalse(node1.isGetterDef());
2172:       assertFalse(node1.isIn());
2173:       assertEquals(40, node1.getType());
2174:       assertFalse(node1.isDefaultCase());
2175:       assertFalse(node1.isSwitch());
2176:       assertEquals(0, node1.getChildCount());
2177:       assertFalse(node1.isFunction());
2178:       assertFalse(node1.isVar());
2179:       assertFalse(node1.isCall());
2180:       assertFalse(node1.isBreak());
2181:       assertFalse(node1.isName());
2182:       assertFalse(node1.isGetProp());
2183:       assertFalse(node1.isNew());
2184:       assertFalse(node1.isAdd());
2185:       assertFalse(node1.isNull());
2186:       assertFalse(node1.isObjectLit());
2187:       assertFalse(node1.isWhile());
2188:       assertFalse(node1.isVoid());
2189:       assertFalse(node1.isComma());
2190:       assertFalse(node1.isExprResult());
2191:       assertFalse(node1.isReturn());
2192:       assertFalse(node1.hasChildren());
2193:       assertFalse(node1.isDec());
2194:       assertFalse(node1.isAssign());
2195:       assertFalse(node1.isTypeOf());
2196:       assertFalse(node1.isCast());
2197:       assertFalse(node1.isGetElem());
2198:       assertFalse(node1.hasOneChild());
2199:       assertFalse(node1.isLabelName());
2200:       assertFalse(node1.isScript());
2201:       assertEquals((-1), node1.getSourcePosition());
2202:       assertFalse(node1.isNot());
2203:       assertFalse(node1.isOr());
2204:       assertFalse(node1.isNumber());
2205:       assertFalse(node1.isAnd());
2206:       assertFalse(node1.isContinue());
2207:       assertFalse(node1.isAssignAdd());
2208:       assertFalse(node1.isDo());
2209:       assertFalse(node1.isLabel());
2210:       assertFalse(node1.isFalse());
2211:       assertFalse(node1.isThrow());
2212:       assertFalse(node1.isStringKey());
2213:       assertFalse(node1.isHook());
2214:       assertTrue(node1.isString());
2215:       assertEquals((-1), node1.getCharno());
2216:       assertFalse(node1.isParamList());
2217:       assertFalse(node1.isSetterDef());
2218:       assertFalse(node1.isInc());
2219:       assertFalse(node1.isCase());
2220:       assertFalse(node1.isCatch());
2221:       assertEquals((-1), node1.getLineno());
2222:       assertFalse(node1.isThis());
2223:       assertFalse(node1.isBlock());
2224:       assertFalse(node1.isInstanceOf());
2225:       assertFalse(node1.isWith());
2226:       assertFalse(node1.hasMoreThanOneChild());
2227:       assertFalse(node1.isRegExp());
2228:       assertNull(node2);
2229:       assertEquals(57, Node.REFLECTED_OBJECT);
2230:       assertEquals(52, Node.LENGTH);
2231:       assertEquals(40, Node.ORIGINALNAME_PROP);
2232:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2233:       assertEquals(8, Node.FLAG_NO_THROWS);
2234:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2235:       assertEquals(50, Node.FREE_CALL);
2236:       assertEquals(54, Node.SLASH_V);
2237:       assertEquals(46, Node.IS_NAMESPACE);
2238:       assertEquals(55, Node.INFERRED_FUNCTION);
2239:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2240:       assertEquals(39, Node.EMPTY_BLOCK);
2241:       assertEquals(2, Node.POST_FLAG);
2242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2243:       assertEquals(57, Node.LAST_PROP);
2244:       assertEquals(30, Node.VAR_ARGS_NAME);
2245:       assertEquals(47, Node.IS_DISPATCHER);
2246:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2248:       assertEquals(53, Node.INPUT_ID);
2249:       assertEquals(29, Node.JSDOC_INFO_PROP);
2250:       assertEquals(43, Node.IS_CONSTANT_NAME);
2251:       assertEquals(56, Node.CHANGE_TIME);
2252:       assertEquals(36, Node.QUOTED_PROP);
2253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2254:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2255:       assertEquals(12, Node.COLUMN_BITS);
2256:       assertEquals(32, Node.INCRDECR_PROP);
2257:       assertEquals(4095, Node.COLUMN_MASK);
2258:       assertEquals(1, Node.DECR_FLAG);
2259:       assertEquals(48, Node.DIRECTIVES);
2260:       assertEquals(49, Node.DIRECT_EVAL);
2261:       assertEquals(37, Node.OPT_ARG_NAME);
2262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2263:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2264:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2265:       assertEquals(4095, Node.COLUMN_MASK);
2266:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2267:       assertEquals(55, Node.INFERRED_FUNCTION);
2268:       assertEquals(8, Node.FLAG_NO_THROWS);
2269:       assertEquals(48, Node.DIRECTIVES);
2270:       assertEquals(36, Node.QUOTED_PROP);
2271:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2272:       assertEquals(43, Node.IS_CONSTANT_NAME);
2273:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2274:       assertEquals(50, Node.FREE_CALL);
2275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2277:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2279:       assertEquals(12, Node.COLUMN_BITS);
2280:       assertEquals(32, Node.INCRDECR_PROP);
2281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2282:       assertEquals(1, Node.DECR_FLAG);
2283:       assertEquals(30, Node.VAR_ARGS_NAME);
2284:       assertEquals(37, Node.OPT_ARG_NAME);
2285:       assertEquals(49, Node.DIRECT_EVAL);
2286:       assertEquals(46, Node.IS_NAMESPACE);
2287:       assertEquals(54, Node.SLASH_V);
2288:       assertEquals(56, Node.CHANGE_TIME);
2289:       assertEquals(40, Node.ORIGINALNAME_PROP);
2290:       assertEquals(57, Node.REFLECTED_OBJECT);
2291:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2292:       assertEquals(29, Node.JSDOC_INFO_PROP);
2293:       assertEquals(52, Node.LENGTH);
2294:       assertEquals(53, Node.INPUT_ID);
2295:       assertEquals(2, Node.POST_FLAG);
2296:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2297:       assertEquals(39, Node.EMPTY_BLOCK);
2298:       assertEquals(47, Node.IS_DISPATCHER);
2299:       assertEquals(57, Node.LAST_PROP);
2300:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2301:       assertSame(node0, node1);
2302:       assertSame(node1, node0);
2303:   }
2304: }
RegularFileObject[/tmp/EvoSuite_501_1628158471391/com/google/javascript/rhino/Node_501_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:14:31 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_501_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_501_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_501_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.ImmutableList$1",
351:       "com.google.javascript.rhino.jstype.JSType$TypePair",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.NamespaceType",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 10:14:31.959 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(" 9]Dy", (-1313), (-1648));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertNotNull(node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNgInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNotNull(jSDocInfo0);

Node node1 = node0.setJSDocInfo(jSDocInfo0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNgInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertTrue(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertNotNull(node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node0, node1);
assertSame(node1, node0);

String string0 = node0.toString();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertNotNull(string0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertSame(node0, node1);

node0.setSourceFileForTesting("\n\nSubtree2: ");
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertSame(node0, node1);

boolean boolean0 = node1.isQualifiedName();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNgInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertTrue(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(boolean0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node0, node1);
assertSame(node1, node0);

boolean boolean1 = node0.isFalse();
assertTrue(boolean1 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertSame(node0, node1);

boolean boolean2 = node0.isWhile();
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(boolean2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertSame(node0, node1);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertNotNull(iterable0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertSame(node0, node1);

int int0 = node0.getIndexOfChild(node1);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNgInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertTrue(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertEquals((-1), int0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node0, node1);
assertSame(node1, node0);

Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNgInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertTrue(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertNotNull(node_AncestorIterable0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node0, node1);
assertSame(node1, node0);

boolean boolean3 = node1.isLabel();
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNgInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertTrue(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(boolean3);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node0, node1);
assertSame(node1, node0);

Node node2 = node1.removeFirstChild();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNgInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertTrue(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertNull(node2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node0, node1);
assertSame(node1, node0);


[MASTER] 10:14:50.948 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:51.411 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:51.723 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:51.966 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:52.356 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/10
* Done!

* Computation finished
