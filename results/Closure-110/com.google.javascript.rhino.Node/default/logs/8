* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 11062
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3161637267
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:00:07.780 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:00:09.920 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:00:09.920 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:00:10.024 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:01:38.780 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:07:15.527 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 688 generations, 277942 statements, best individual has fitness: 2550.0
* Minimizing test suite
[MASTER] 10:11:35.534 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 790
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 625
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 469
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 55%
* Total number of goals: 4536
* Number of covered goals: 2496
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 588
* Generated 1230 tests with total length 11855
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:12:53.827 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6687% of time used, but only 121/1230 tests minimized), falling back to using all assertions
[MASTER] 10:13:13.761 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
[MASTER] 10:13:29.033 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 15 seconds more than allowed.
[MASTER] 10:13:35.088 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_133_1628158414744/com/google/javascript/rhino/Node_133_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_133_1628158414744/com/google/javascript/rhino/Node_133_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:35.088 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:35.089 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:35.093 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1300
[MASTER] 10:13:35.095 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_133_1628158414744/com/google/javascript/rhino/Node_133_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_133_tmp__ESTest extends Node_133_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(698.16961606004);
22:       assertFalse(node0.isContinue());
23:       assertFalse(node0.hasMoreThanOneChild());
24:       assertFalse(node0.isWhile());
25:       assertFalse(node0.isOr());
26:       assertFalse(node0.isLabel());
27:       assertFalse(node0.isReturn());
28:       assertEquals(39, node0.getType());
29:       assertFalse(node0.isAssignAdd());
30:       assertFalse(node0.isDo());
31:       assertFalse(node0.isNew());
32:       assertFalse(node0.isAdd());
33:       assertFalse(node0.isCall());
34:       assertFalse(node0.isName());
35:       assertFalse(node0.isDec());
36:       assertFalse(node0.isAssign());
37:       assertFalse(node0.isBlock());
38:       assertFalse(node0.isNull());
39:       assertFalse(node0.hasChildren());
40:       assertFalse(node0.isExprResult());
41:       assertFalse(node0.isTypeOf());
42:       assertEquals((-1), node0.getLineno());
43:       assertFalse(node0.isGetElem());
44:       assertFalse(node0.isCatch());
45:       assertFalse(node0.isWith());
46:       assertEquals(0, node0.getChildCount());
47:       assertFalse(node0.isTry());
48:       assertFalse(node0.isDefaultCase());
49:       assertFalse(node0.hasOneChild());
50:       assertFalse(node0.isScript());
51:       assertFalse(node0.isStringKey());
52:       assertFalse(node0.isGetterDef());
53:       assertFalse(node0.isVar());
54:       assertFalse(node0.isParamList());
55:       assertFalse(node0.isSwitch());
56:       assertFalse(node0.isLabelName());
57:       assertFalse(node0.isArrayLit());
58:       assertFalse(node0.isIn());
59:       assertFalse(node0.isInc());
60:       assertEquals((-1), node0.getCharno());
61:       assertFalse(node0.isString());
62:       assertTrue(node0.isNumber());
63:       assertFalse(node0.isCase());
64:       assertFalse(node0.isEmpty());
65:       assertFalse(node0.isFor());
66:       assertFalse(node0.isHook());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isTrue());
69:       assertFalse(node0.isVoid());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isComma());
72:       assertFalse(node0.isRegExp());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isInstanceOf());
77:       assertFalse(node0.isObjectLit());
78:       assertFalse(node0.isAnd());
79:       assertFalse(node0.isNot());
80:       assertFalse(node0.isDebugger());
81:       assertFalse(node0.isGetProp());
82:       assertFalse(node0.isSetterDef());
83:       assertFalse(node0.isThrow());
84:       assertFalse(node0.isCast());
85:       assertFalse(node0.isFalse());
86:       assertEquals((-1), node0.getSourcePosition());
87:       assertFalse(node0.isFunction());
88:       assertEquals(1, Node.DECR_FLAG);
89:       assertEquals(12, Node.COLUMN_BITS);
90:       assertEquals(51, Node.STATIC_SOURCE_FILE);
91:       assertEquals(30, Node.VAR_ARGS_NAME);
92:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(15, Node.NO_SIDE_EFFECTS);
95:       assertEquals(57, Node.LAST_PROP);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(29, Node.JSDOC_INFO_PROP);
98:       assertEquals(57, Node.REFLECTED_OBJECT);
99:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
102:       assertEquals(52, Node.LENGTH);
103:       assertEquals(8, Node.FLAG_NO_THROWS);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(56, Node.CHANGE_TIME);
108:       assertEquals(49, Node.DIRECT_EVAL);
109:       assertEquals(55, Node.INFERRED_FUNCTION);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(36, Node.QUOTED_PROP);
112:       assertEquals(4095, Node.COLUMN_MASK);
113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
114:       assertEquals(39, Node.EMPTY_BLOCK);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(47, Node.IS_DISPATCHER);
119:       assertEquals(2, Node.POST_FLAG);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(43, Node.IS_CONSTANT_NAME);
124:       assertNotNull(node0);
125:       
126:       node0.putIntProp(65535, 65535);
127:       assertFalse(node0.isContinue());
128:       assertFalse(node0.hasMoreThanOneChild());
129:       assertFalse(node0.isWhile());
130:       assertFalse(node0.isOr());
131:       assertFalse(node0.isLabel());
132:       assertFalse(node0.isReturn());
133:       assertEquals(39, node0.getType());
134:       assertFalse(node0.isAssignAdd());
135:       assertFalse(node0.isDo());
136:       assertFalse(node0.isNew());
137:       assertFalse(node0.isAdd());
138:       assertFalse(node0.isCall());
139:       assertFalse(node0.isName());
140:       assertFalse(node0.isDec());
141:       assertFalse(node0.isAssign());
142:       assertFalse(node0.isBlock());
143:       assertFalse(node0.isNull());
144:       assertFalse(node0.hasChildren());
145:       assertFalse(node0.isExprResult());
146:       assertFalse(node0.isTypeOf());
147:       assertEquals((-1), node0.getLineno());
148:       assertFalse(node0.isGetElem());
149:       assertFalse(node0.isCatch());
150:       assertFalse(node0.isWith());
151:       assertEquals(0, node0.getChildCount());
152:       assertFalse(node0.isTry());
153:       assertFalse(node0.isDefaultCase());
154:       assertFalse(node0.hasOneChild());
155:       assertFalse(node0.isScript());
156:       assertFalse(node0.isStringKey());
157:       assertFalse(node0.isGetterDef());
158:       assertFalse(node0.isVar());
159:       assertFalse(node0.isParamList());
160:       assertFalse(node0.isSwitch());
161:       assertFalse(node0.isLabelName());
162:       assertFalse(node0.isArrayLit());
163:       assertFalse(node0.isIn());
164:       assertFalse(node0.isInc());
165:       assertEquals((-1), node0.getCharno());
166:       assertFalse(node0.isString());
167:       assertTrue(node0.isNumber());
168:       assertFalse(node0.isCase());
169:       assertFalse(node0.isEmpty());
170:       assertFalse(node0.isFor());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isThis());
173:       assertFalse(node0.isTrue());
174:       assertFalse(node0.isVoid());
175:       assertFalse(node0.isNE());
176:       assertFalse(node0.isComma());
177:       assertFalse(node0.isRegExp());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isDelProp());
180:       assertFalse(node0.isBreak());
181:       assertFalse(node0.isInstanceOf());
182:       assertFalse(node0.isObjectLit());
183:       assertFalse(node0.isAnd());
184:       assertFalse(node0.isNot());
185:       assertFalse(node0.isDebugger());
186:       assertFalse(node0.isGetProp());
187:       assertFalse(node0.isSetterDef());
188:       assertFalse(node0.isThrow());
189:       assertFalse(node0.isCast());
190:       assertFalse(node0.isFalse());
191:       assertEquals((-1), node0.getSourcePosition());
192:       assertFalse(node0.isFunction());
193:       assertEquals(1, Node.DECR_FLAG);
194:       assertEquals(12, Node.COLUMN_BITS);
195:       assertEquals(51, Node.STATIC_SOURCE_FILE);
196:       assertEquals(30, Node.VAR_ARGS_NAME);
197:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertEquals(15, Node.NO_SIDE_EFFECTS);
200:       assertEquals(57, Node.LAST_PROP);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(29, Node.JSDOC_INFO_PROP);
203:       assertEquals(57, Node.REFLECTED_OBJECT);
204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
207:       assertEquals(52, Node.LENGTH);
208:       assertEquals(8, Node.FLAG_NO_THROWS);
209:       assertEquals(48, Node.DIRECTIVES);
210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
211:       assertEquals(37, Node.OPT_ARG_NAME);
212:       assertEquals(56, Node.CHANGE_TIME);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(55, Node.INFERRED_FUNCTION);
215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
216:       assertEquals(36, Node.QUOTED_PROP);
217:       assertEquals(4095, Node.COLUMN_MASK);
218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(47, Node.IS_DISPATCHER);
224:       assertEquals(2, Node.POST_FLAG);
225:       assertEquals(50, Node.FREE_CALL);
226:       assertEquals(54, Node.SLASH_V);
227:       assertEquals(46, Node.IS_NAMESPACE);
228:       assertEquals(43, Node.IS_CONSTANT_NAME);
229:       
230:       Node node1 = node0.cloneNode();
231:       assertFalse(node1.equals((Object)node0));
232:       assertFalse(node0.isContinue());
233:       assertFalse(node0.hasMoreThanOneChild());
234:       assertFalse(node0.isWhile());
235:       assertFalse(node0.isOr());
236:       assertFalse(node0.isLabel());
237:       assertFalse(node0.isReturn());
238:       assertEquals(39, node0.getType());
239:       assertFalse(node0.isAssignAdd());
240:       assertFalse(node0.isDo());
241:       assertFalse(node0.isNew());
242:       assertFalse(node0.isAdd());
243:       assertFalse(node0.isCall());
244:       assertFalse(node0.isName());
245:       assertFalse(node0.isDec());
246:       assertFalse(node0.isAssign());
247:       assertFalse(node0.isBlock());
248:       assertFalse(node0.isNull());
249:       assertFalse(node0.hasChildren());
250:       assertFalse(node0.isExprResult());
251:       assertFalse(node0.isTypeOf());
252:       assertEquals((-1), node0.getLineno());
253:       assertFalse(node0.isGetElem());
254:       assertFalse(node0.isCatch());
255:       assertFalse(node0.isWith());
256:       assertEquals(0, node0.getChildCount());
257:       assertFalse(node0.isTry());
258:       assertFalse(node0.isDefaultCase());
259:       assertFalse(node0.hasOneChild());
260:       assertFalse(node0.isScript());
261:       assertFalse(node0.isStringKey());
262:       assertFalse(node0.isGetterDef());
263:       assertFalse(node0.isVar());
264:       assertFalse(node0.isParamList());
265:       assertFalse(node0.isSwitch());
266:       assertFalse(node0.isLabelName());
267:       assertFalse(node0.isArrayLit());
268:       assertFalse(node0.isIn());
269:       assertFalse(node0.isInc());
270:       assertEquals((-1), node0.getCharno());
271:       assertFalse(node0.isString());
272:       assertTrue(node0.isNumber());
273:       assertFalse(node0.isCase());
274:       assertFalse(node0.isEmpty());
275:       assertFalse(node0.isFor());
276:       assertFalse(node0.isHook());
277:       assertFalse(node0.isThis());
278:       assertFalse(node0.isTrue());
279:       assertFalse(node0.isVoid());
280:       assertFalse(node0.isNE());
281:       assertFalse(node0.isComma());
282:       assertFalse(node0.isRegExp());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.isDelProp());
285:       assertFalse(node0.isBreak());
286:       assertFalse(node0.isInstanceOf());
287:       assertFalse(node0.isObjectLit());
288:       assertFalse(node0.isAnd());
289:       assertFalse(node0.isNot());
290:       assertFalse(node0.isDebugger());
291:       assertFalse(node0.isGetProp());
292:       assertFalse(node0.isSetterDef());
293:       assertFalse(node0.isThrow());
294:       assertFalse(node0.isCast());
295:       assertFalse(node0.isFalse());
296:       assertEquals((-1), node0.getSourcePosition());
297:       assertFalse(node0.isFunction());
298:       assertFalse(node1.isExprResult());
299:       assertFalse(node1.isObjectLit());
300:       assertFalse(node1.isNot());
301:       assertFalse(node1.hasOneChild());
302:       assertFalse(node1.isScript());
303:       assertFalse(node1.isGetProp());
304:       assertFalse(node1.isAssignAdd());
305:       assertEquals((-1), node1.getSourcePosition());
306:       assertFalse(node1.isLabel());
307:       assertFalse(node1.isAnd());
308:       assertFalse(node1.isContinue());
309:       assertFalse(node1.isCast());
310:       assertFalse(node1.isLabelName());
311:       assertFalse(node1.isFalse());
312:       assertEquals((-1), node1.getCharno());
313:       assertFalse(node1.isSwitch());
314:       assertFalse(node1.isBlock());
315:       assertFalse(node1.isHook());
316:       assertEquals(39, node1.getType());
317:       assertFalse(node1.isThrow());
318:       assertFalse(node1.isIn());
319:       assertFalse(node1.isCase());
320:       assertFalse(node1.isInc());
321:       assertFalse(node1.isSetterDef());
322:       assertFalse(node1.isNE());
323:       assertFalse(node1.isIf());
324:       assertFalse(node1.isFor());
325:       assertFalse(node1.isThis());
326:       assertFalse(node1.isCatch());
327:       assertFalse(node1.hasMoreThanOneChild());
328:       assertFalse(node1.isWith());
329:       assertFalse(node1.isInstanceOf());
330:       assertEquals((-1), node1.getLineno());
331:       assertFalse(node1.isTrue());
332:       assertFalse(node1.isVoid());
333:       assertFalse(node1.isDebugger());
334:       assertFalse(node1.isTry());
335:       assertFalse(node1.isRegExp());
336:       assertFalse(node1.isFunction());
337:       assertFalse(node1.isDefaultCase());
338:       assertFalse(node1.isEmpty());
339:       assertFalse(node1.isParamList());
340:       assertFalse(node1.isGetterDef());
341:       assertEquals(0, node1.getChildCount());
342:       assertFalse(node1.isStringKey());
343:       assertFalse(node1.isArrayLit());
344:       assertFalse(node1.isNew());
345:       assertFalse(node1.isWhile());
346:       assertFalse(node1.isVar());
347:       assertFalse(node1.isString());
348:       assertFalse(node1.isDo());
349:       assertTrue(node1.isNumber());
350:       assertFalse(node1.isAdd());
351:       assertFalse(node1.isComma());
352:       assertFalse(node1.isTypeOf());
353:       assertFalse(node1.hasChildren());
354:       assertFalse(node1.isDec());
355:       assertFalse(node1.isAssign());
356:       assertFalse(node1.isOr());
357:       assertFalse(node1.isNull());
358:       assertFalse(node1.isReturn());
359:       assertFalse(node1.isCall());
360:       assertFalse(node1.isName());
361:       assertFalse(node1.isDelProp());
362:       assertFalse(node1.isBreak());
363:       assertFalse(node1.isGetElem());
364:       assertNotSame(node0, node1);
365:       assertNotSame(node1, node0);
366:       assertEquals(1, Node.DECR_FLAG);
367:       assertEquals(12, Node.COLUMN_BITS);
368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
369:       assertEquals(30, Node.VAR_ARGS_NAME);
370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
373:       assertEquals(57, Node.LAST_PROP);
374:       assertEquals(32, Node.INCRDECR_PROP);
375:       assertEquals(29, Node.JSDOC_INFO_PROP);
376:       assertEquals(57, Node.REFLECTED_OBJECT);
377:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
378:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
380:       assertEquals(52, Node.LENGTH);
381:       assertEquals(8, Node.FLAG_NO_THROWS);
382:       assertEquals(48, Node.DIRECTIVES);
383:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
384:       assertEquals(37, Node.OPT_ARG_NAME);
385:       assertEquals(56, Node.CHANGE_TIME);
386:       assertEquals(49, Node.DIRECT_EVAL);
387:       assertEquals(55, Node.INFERRED_FUNCTION);
388:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
389:       assertEquals(36, Node.QUOTED_PROP);
390:       assertEquals(4095, Node.COLUMN_MASK);
391:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
392:       assertEquals(39, Node.EMPTY_BLOCK);
393:       assertEquals(53, Node.INPUT_ID);
394:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
395:       assertEquals(40, Node.ORIGINALNAME_PROP);
396:       assertEquals(47, Node.IS_DISPATCHER);
397:       assertEquals(2, Node.POST_FLAG);
398:       assertEquals(50, Node.FREE_CALL);
399:       assertEquals(54, Node.SLASH_V);
400:       assertEquals(46, Node.IS_NAMESPACE);
401:       assertEquals(43, Node.IS_CONSTANT_NAME);
402:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
403:       assertEquals(53, Node.INPUT_ID);
404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
405:       assertEquals(36, Node.QUOTED_PROP);
406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
407:       assertEquals(55, Node.INFERRED_FUNCTION);
408:       assertEquals(29, Node.JSDOC_INFO_PROP);
409:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
410:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
412:       assertEquals(46, Node.IS_NAMESPACE);
413:       assertEquals(47, Node.IS_DISPATCHER);
414:       assertEquals(51, Node.STATIC_SOURCE_FILE);
415:       assertEquals(2, Node.POST_FLAG);
416:       assertEquals(50, Node.FREE_CALL);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(43, Node.IS_CONSTANT_NAME);
419:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
420:       assertEquals(54, Node.SLASH_V);
421:       assertEquals(30, Node.VAR_ARGS_NAME);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(12, Node.COLUMN_BITS);
425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
426:       assertEquals(57, Node.LAST_PROP);
427:       assertEquals(32, Node.INCRDECR_PROP);
428:       assertEquals(48, Node.DIRECTIVES);
429:       assertEquals(37, Node.OPT_ARG_NAME);
430:       assertEquals(39, Node.EMPTY_BLOCK);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(4095, Node.COLUMN_MASK);
433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
434:       assertEquals(8, Node.FLAG_NO_THROWS);
435:       assertEquals(57, Node.REFLECTED_OBJECT);
436:       assertEquals(56, Node.CHANGE_TIME);
437:       assertEquals(49, Node.DIRECT_EVAL);
438:       assertNotNull(node1);
439:       
440:       JSDocInfo jSDocInfo0 = new JSDocInfo();
441:       assertFalse(jSDocInfo0.isConstant());
442:       assertNull(jSDocInfo0.getFileOverview());
443:       assertNull(jSDocInfo0.getVisibility());
444:       assertNull(jSDocInfo0.getLendsName());
445:       assertNull(jSDocInfo0.getDescription());
446:       assertFalse(jSDocInfo0.containsDeclaration());
447:       assertFalse(jSDocInfo0.isNoTypeCheck());
448:       assertNull(jSDocInfo0.getVersion());
449:       assertEquals("JSDocInfo", jSDocInfo0.toString());
450:       assertFalse(jSDocInfo0.isWizaction());
451:       assertFalse(jSDocInfo0.isExport());
452:       assertFalse(jSDocInfo0.hasReturnType());
453:       assertFalse(jSDocInfo0.isOverride());
454:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
455:       assertNull(jSDocInfo0.getMeaning());
456:       assertFalse(jSDocInfo0.isExterns());
457:       assertFalse(jSDocInfo0.isNgInject());
458:       assertFalse(jSDocInfo0.isExpose());
459:       assertFalse(jSDocInfo0.isNoShadow());
460:       assertNull(jSDocInfo0.getReturnDescription());
461:       assertFalse(jSDocInfo0.isDeprecated());
462:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
463:       assertFalse(jSDocInfo0.hasBaseType());
464:       assertFalse(jSDocInfo0.hasTypedefType());
465:       assertFalse(jSDocInfo0.isDisposes());
466:       assertFalse(jSDocInfo0.isHidden());
467:       assertFalse(jSDocInfo0.hasModifies());
468:       assertNull(jSDocInfo0.getOriginalCommentString());
469:       assertFalse(jSDocInfo0.isMappedIdGenerator());
470:       assertFalse(jSDocInfo0.isStableIdGenerator());
471:       assertFalse(jSDocInfo0.hasType());
472:       assertFalse(jSDocInfo0.isJaggerProvide());
473:       assertFalse(jSDocInfo0.isImplicitCast());
474:       assertNull(jSDocInfo0.getLicense());
475:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
476:       assertFalse(jSDocInfo0.shouldPreserveTry());
477:       assertFalse(jSDocInfo0.makesDicts());
478:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
479:       assertFalse(jSDocInfo0.isJavaDispatch());
480:       assertFalse(jSDocInfo0.isJaggerModule());
481:       assertFalse(jSDocInfo0.isNoSideEffects());
482:       assertFalse(jSDocInfo0.isIdGenerator());
483:       assertEquals(0, jSDocInfo0.getParameterCount());
484:       assertFalse(jSDocInfo0.isNoAlias());
485:       assertNull(jSDocInfo0.getBlockDescription());
486:       assertFalse(jSDocInfo0.makesStructs());
487:       assertFalse(jSDocInfo0.isConstructor());
488:       assertFalse(jSDocInfo0.hasEnumParameterType());
489:       assertFalse(jSDocInfo0.isJaggerInject());
490:       assertFalse(jSDocInfo0.isDefine());
491:       assertFalse(jSDocInfo0.hasFileOverview());
492:       assertNull(jSDocInfo0.getDeprecationReason());
493:       assertFalse(jSDocInfo0.isInterface());
494:       assertFalse(jSDocInfo0.isNoCompile());
495:       assertFalse(jSDocInfo0.hasThisType());
496:       assertNotNull(jSDocInfo0);
497:       
498:       Node node2 = node0.setJSDocInfo(jSDocInfo0);
499:       assertFalse(node0.equals((Object)node1));
500:       assertFalse(node2.equals((Object)node1));
501:       assertFalse(node0.isContinue());
502:       assertFalse(node0.hasMoreThanOneChild());
503:       assertFalse(node0.isWhile());
504:       assertFalse(node0.isOr());
505:       assertFalse(node0.isLabel());
506:       assertFalse(node0.isReturn());
507:       assertEquals(39, node0.getType());
508:       assertFalse(node0.isAssignAdd());
509:       assertFalse(node0.isDo());
510:       assertFalse(node0.isNew());
511:       assertFalse(node0.isAdd());
512:       assertFalse(node0.isCall());
513:       assertFalse(node0.isName());
514:       assertFalse(node0.isDec());
515:       assertFalse(node0.isAssign());
516:       assertFalse(node0.isBlock());
517:       assertFalse(node0.isNull());
518:       assertFalse(node0.hasChildren());
519:       assertFalse(node0.isExprResult());
520:       assertFalse(node0.isTypeOf());
521:       assertEquals((-1), node0.getLineno());
522:       assertFalse(node0.isGetElem());
523:       assertFalse(node0.isCatch());
524:       assertFalse(node0.isWith());
525:       assertEquals(0, node0.getChildCount());
526:       assertFalse(node0.isTry());
527:       assertFalse(node0.isDefaultCase());
528:       assertFalse(node0.hasOneChild());
529:       assertFalse(node0.isScript());
530:       assertFalse(node0.isStringKey());
531:       assertFalse(node0.isGetterDef());
532:       assertFalse(node0.isVar());
533:       assertFalse(node0.isParamList());
534:       assertFalse(node0.isSwitch());
535:       assertFalse(node0.isLabelName());
536:       assertFalse(node0.isArrayLit());
537:       assertFalse(node0.isIn());
538:       assertFalse(node0.isInc());
539:       assertEquals((-1), node0.getCharno());
540:       assertFalse(node0.isString());
541:       assertTrue(node0.isNumber());
542:       assertFalse(node0.isCase());
543:       assertFalse(node0.isEmpty());
544:       assertFalse(node0.isFor());
545:       assertFalse(node0.isHook());
546:       assertFalse(node0.isThis());
547:       assertFalse(node0.isTrue());
548:       assertFalse(node0.isVoid());
549:       assertFalse(node0.isNE());
550:       assertFalse(node0.isComma());
551:       assertFalse(node0.isRegExp());
552:       assertFalse(node0.isIf());
553:       assertFalse(node0.isDelProp());
554:       assertFalse(node0.isBreak());
555:       assertFalse(node0.isInstanceOf());
556:       assertFalse(node0.isObjectLit());
557:       assertFalse(node0.isAnd());
558:       assertFalse(node0.isNot());
559:       assertFalse(node0.isDebugger());
560:       assertFalse(node0.isGetProp());
561:       assertFalse(node0.isSetterDef());
562:       assertFalse(node0.isThrow());
563:       assertFalse(node0.isCast());
564:       assertFalse(node0.isFalse());
565:       assertEquals((-1), node0.getSourcePosition());
566:       assertFalse(node0.isFunction());
567:       assertFalse(jSDocInfo0.isConstant());
568:       assertNull(jSDocInfo0.getFileOverview());
569:       assertNull(jSDocInfo0.getVisibility());
570:       assertNull(jSDocInfo0.getLendsName());
571:       assertNull(jSDocInfo0.getDescription());
572:       assertFalse(jSDocInfo0.containsDeclaration());
573:       assertFalse(jSDocInfo0.isNoTypeCheck());
574:       assertNull(jSDocInfo0.getVersion());
575:       assertEquals("JSDocInfo", jSDocInfo0.toString());
576:       assertFalse(jSDocInfo0.isWizaction());
577:       assertFalse(jSDocInfo0.isExport());
578:       assertFalse(jSDocInfo0.hasReturnType());
579:       assertFalse(jSDocInfo0.isOverride());
580:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
581:       assertNull(jSDocInfo0.getMeaning());
582:       assertFalse(jSDocInfo0.isExterns());
583:       assertFalse(jSDocInfo0.isNgInject());
584:       assertFalse(jSDocInfo0.isExpose());
585:       assertFalse(jSDocInfo0.isNoShadow());
586:       assertNull(jSDocInfo0.getReturnDescription());
587:       assertFalse(jSDocInfo0.isDeprecated());
588:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
589:       assertFalse(jSDocInfo0.hasBaseType());
590:       assertFalse(jSDocInfo0.hasTypedefType());
591:       assertFalse(jSDocInfo0.isDisposes());
592:       assertFalse(jSDocInfo0.isHidden());
593:       assertFalse(jSDocInfo0.hasModifies());
594:       assertNull(jSDocInfo0.getOriginalCommentString());
595:       assertFalse(jSDocInfo0.isMappedIdGenerator());
596:       assertFalse(jSDocInfo0.isStableIdGenerator());
597:       assertFalse(jSDocInfo0.hasType());
598:       assertFalse(jSDocInfo0.isJaggerProvide());
599:       assertFalse(jSDocInfo0.isImplicitCast());
600:       assertNull(jSDocInfo0.getLicense());
601:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
602:       assertFalse(jSDocInfo0.shouldPreserveTry());
603:       assertFalse(jSDocInfo0.makesDicts());
604:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
605:       assertFalse(jSDocInfo0.isJavaDispatch());
606:       assertFalse(jSDocInfo0.isJaggerModule());
607:       assertFalse(jSDocInfo0.isNoSideEffects());
608:       assertFalse(jSDocInfo0.isIdGenerator());
609:       assertEquals(0, jSDocInfo0.getParameterCount());
610:       assertFalse(jSDocInfo0.isNoAlias());
611:       assertNull(jSDocInfo0.getBlockDescription());
612:       assertFalse(jSDocInfo0.makesStructs());
613:       assertFalse(jSDocInfo0.isConstructor());
614:       assertFalse(jSDocInfo0.hasEnumParameterType());
615:       assertFalse(jSDocInfo0.isJaggerInject());
616:       assertFalse(jSDocInfo0.isDefine());
617:       assertFalse(jSDocInfo0.hasFileOverview());
618:       assertNull(jSDocInfo0.getDeprecationReason());
619:       assertFalse(jSDocInfo0.isInterface());
620:       assertFalse(jSDocInfo0.isNoCompile());
621:       assertFalse(jSDocInfo0.hasThisType());
622:       assertFalse(node2.isNull());
623:       assertFalse(node2.isSetterDef());
624:       assertEquals(0, node2.getChildCount());
625:       assertFalse(node2.isVar());
626:       assertFalse(node2.isNew());
627:       assertFalse(node2.isBlock());
628:       assertFalse(node2.isDefaultCase());
629:       assertFalse(node2.isDebugger());
630:       assertFalse(node2.isFunction());
631:       assertFalse(node2.isContinue());
632:       assertFalse(node2.isArrayLit());
633:       assertFalse(node2.isStringKey());
634:       assertFalse(node2.isParamList());
635:       assertFalse(node2.isNE());
636:       assertFalse(node2.isGetterDef());
637:       assertFalse(node2.isIn());
638:       assertFalse(node2.hasOneChild());
639:       assertFalse(node2.isCase());
640:       assertFalse(node2.isFor());
641:       assertFalse(node2.isTry());
642:       assertFalse(node2.isRegExp());
643:       assertFalse(node2.isInc());
644:       assertEquals(39, node2.getType());
645:       assertFalse(node2.hasMoreThanOneChild());
646:       assertFalse(node2.isWith());
647:       assertFalse(node2.isCatch());
648:       assertFalse(node2.isInstanceOf());
649:       assertEquals((-1), node2.getLineno());
650:       assertFalse(node2.isIf());
651:       assertFalse(node2.isComma());
652:       assertFalse(node2.isBreak());
653:       assertFalse(node2.isGetProp());
654:       assertFalse(node2.isThis());
655:       assertFalse(node2.isFalse());
656:       assertFalse(node2.isHook());
657:       assertFalse(node2.isThrow());
658:       assertFalse(node2.isScript());
659:       assertEquals((-1), node2.getCharno());
660:       assertFalse(node2.isNot());
661:       assertFalse(node2.isString());
662:       assertFalse(node2.isObjectLit());
663:       assertFalse(node2.isCast());
664:       assertFalse(node2.isLabelName());
665:       assertFalse(node2.isAnd());
666:       assertFalse(node2.isSwitch());
667:       assertEquals((-1), node2.getSourcePosition());
668:       assertFalse(node2.isTypeOf());
669:       assertFalse(node2.isDec());
670:       assertFalse(node2.hasChildren());
671:       assertFalse(node2.isEmpty());
672:       assertFalse(node2.isLabel());
673:       assertFalse(node2.isGetElem());
674:       assertFalse(node2.isAssign());
675:       assertFalse(node2.isOr());
676:       assertFalse(node2.isReturn());
677:       assertFalse(node2.isDo());
678:       assertTrue(node2.isNumber());
679:       assertFalse(node2.isWhile());
680:       assertFalse(node2.isAssignAdd());
681:       assertFalse(node2.isTrue());
682:       assertFalse(node2.isExprResult());
683:       assertFalse(node2.isAdd());
684:       assertFalse(node2.isCall());
685:       assertFalse(node2.isName());
686:       assertFalse(node2.isDelProp());
687:       assertFalse(node2.isVoid());
688:       assertSame(node0, node2);
689:       assertNotSame(node0, node1);
690:       assertNotSame(node2, node1);
691:       assertSame(node2, node0);
692:       assertEquals(1, Node.DECR_FLAG);
693:       assertEquals(12, Node.COLUMN_BITS);
694:       assertEquals(51, Node.STATIC_SOURCE_FILE);
695:       assertEquals(30, Node.VAR_ARGS_NAME);
696:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
697:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
698:       assertEquals(15, Node.NO_SIDE_EFFECTS);
699:       assertEquals(57, Node.LAST_PROP);
700:       assertEquals(32, Node.INCRDECR_PROP);
701:       assertEquals(29, Node.JSDOC_INFO_PROP);
702:       assertEquals(57, Node.REFLECTED_OBJECT);
703:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
704:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
705:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
706:       assertEquals(52, Node.LENGTH);
707:       assertEquals(8, Node.FLAG_NO_THROWS);
708:       assertEquals(48, Node.DIRECTIVES);
709:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
710:       assertEquals(37, Node.OPT_ARG_NAME);
711:       assertEquals(56, Node.CHANGE_TIME);
712:       assertEquals(49, Node.DIRECT_EVAL);
713:       assertEquals(55, Node.INFERRED_FUNCTION);
714:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
715:       assertEquals(36, Node.QUOTED_PROP);
716:       assertEquals(4095, Node.COLUMN_MASK);
717:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
718:       assertEquals(39, Node.EMPTY_BLOCK);
719:       assertEquals(53, Node.INPUT_ID);
720:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
721:       assertEquals(40, Node.ORIGINALNAME_PROP);
722:       assertEquals(47, Node.IS_DISPATCHER);
723:       assertEquals(2, Node.POST_FLAG);
724:       assertEquals(50, Node.FREE_CALL);
725:       assertEquals(54, Node.SLASH_V);
726:       assertEquals(46, Node.IS_NAMESPACE);
727:       assertEquals(43, Node.IS_CONSTANT_NAME);
728:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(8, Node.FLAG_NO_THROWS);
731:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
733:       assertEquals(40, Node.ORIGINALNAME_PROP);
734:       assertEquals(39, Node.EMPTY_BLOCK);
735:       assertEquals(4095, Node.COLUMN_MASK);
736:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
737:       assertEquals(43, Node.IS_CONSTANT_NAME);
738:       assertEquals(51, Node.STATIC_SOURCE_FILE);
739:       assertEquals(50, Node.FREE_CALL);
740:       assertEquals(46, Node.IS_NAMESPACE);
741:       assertEquals(54, Node.SLASH_V);
742:       assertEquals(2, Node.POST_FLAG);
743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
744:       assertEquals(37, Node.OPT_ARG_NAME);
745:       assertEquals(56, Node.CHANGE_TIME);
746:       assertEquals(29, Node.JSDOC_INFO_PROP);
747:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
749:       assertEquals(1, Node.DECR_FLAG);
750:       assertEquals(32, Node.INCRDECR_PROP);
751:       assertEquals(30, Node.VAR_ARGS_NAME);
752:       assertEquals(47, Node.IS_DISPATCHER);
753:       assertEquals(12, Node.COLUMN_BITS);
754:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
755:       assertEquals(36, Node.QUOTED_PROP);
756:       assertEquals(57, Node.LAST_PROP);
757:       assertEquals(52, Node.LENGTH);
758:       assertEquals(49, Node.DIRECT_EVAL);
759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
760:       assertEquals(15, Node.NO_SIDE_EFFECTS);
761:       assertEquals(53, Node.INPUT_ID);
762:       assertEquals(55, Node.INFERRED_FUNCTION);
763:       assertEquals(57, Node.REFLECTED_OBJECT);
764:       assertNotNull(node2);
765:       
766:       Node node3 = new Node(15, node0, node0, node0, node0, 22, 31);
767:       assertFalse(node0.equals((Object)node1));
768:       assertFalse(node3.equals((Object)node0));
769:       assertFalse(node3.equals((Object)node2));
770:       assertFalse(node3.equals((Object)node1));
771:       assertFalse(node0.isContinue());
772:       assertFalse(node0.hasMoreThanOneChild());
773:       assertFalse(node0.isWhile());
774:       assertFalse(node0.isOr());
775:       assertFalse(node0.isLabel());
776:       assertFalse(node0.isReturn());
777:       assertEquals(39, node0.getType());
778:       assertFalse(node0.isAssignAdd());
779:       assertFalse(node0.isDo());
780:       assertFalse(node0.isNew());
781:       assertFalse(node0.isAdd());
782:       assertFalse(node0.isCall());
783:       assertFalse(node0.isName());
784:       assertFalse(node0.isDec());
785:       assertFalse(node0.isAssign());
786:       assertFalse(node0.isBlock());
787:       assertFalse(node0.isNull());
788:       assertFalse(node0.hasChildren());
789:       assertFalse(node0.isExprResult());
790:       assertFalse(node0.isTypeOf());
791:       assertEquals((-1), node0.getLineno());
792:       assertFalse(node0.isGetElem());
793:       assertFalse(node0.isCatch());
794:       assertFalse(node0.isWith());
795:       assertEquals(0, node0.getChildCount());
796:       assertFalse(node0.isTry());
797:       assertFalse(node0.isDefaultCase());
798:       assertFalse(node0.hasOneChild());
799:       assertFalse(node0.isScript());
800:       assertFalse(node0.isStringKey());
801:       assertFalse(node0.isGetterDef());
802:       assertFalse(node0.isVar());
803:       assertFalse(node0.isParamList());
804:       assertFalse(node0.isSwitch());
805:       assertFalse(node0.isLabelName());
806:       assertFalse(node0.isArrayLit());
807:       assertFalse(node0.isIn());
808:       assertFalse(node0.isInc());
809:       assertEquals((-1), node0.getCharno());
810:       assertFalse(node0.isString());
811:       assertTrue(node0.isNumber());
812:       assertFalse(node0.isCase());
813:       assertFalse(node0.isEmpty());
814:       assertFalse(node0.isFor());
815:       assertFalse(node0.isHook());
816:       assertFalse(node0.isThis());
817:       assertFalse(node0.isTrue());
818:       assertFalse(node0.isVoid());
819:       assertFalse(node0.isNE());
820:       assertFalse(node0.isComma());
821:       assertFalse(node0.isRegExp());
822:       assertFalse(node0.isIf());
823:       assertFalse(node0.isDelProp());
824:       assertFalse(node0.isBreak());
825:       assertFalse(node0.isInstanceOf());
826:       assertFalse(node0.isObjectLit());
827:       assertFalse(node0.isAnd());
828:       assertFalse(node0.isNot());
829:       assertFalse(node0.isDebugger());
830:       assertFalse(node0.isGetProp());
831:       assertFalse(node0.isSetterDef());
832:       assertFalse(node0.isThrow());
833:       assertFalse(node0.isCast());
834:       assertFalse(node0.isFalse());
835:       assertEquals((-1), node0.getSourcePosition());
836:       assertFalse(node0.isFunction());
837:       assertEquals(15, node3.getType());
838:       assertFalse(node3.isCatch());
839:       assertFalse(node3.isTrue());
840:       assertFalse(node3.isNull());
841:       assertFalse(node3.isVoid());
842:       assertFalse(node3.isStringKey());
843:       assertFalse(node3.isParamList());
844:       assertFalse(node3.isName());
845:       assertFalse(node3.isArrayLit());
846:       assertFalse(node3.isVar());
847:       assertFalse(node3.isAdd());
848:       assertEquals(31, node3.getCharno());
849:       assertFalse(node3.isFunction());
850:       assertFalse(node3.isDefaultCase());
851:       assertFalse(node3.isEmpty());
852:       assertFalse(node3.isSetterDef());
853:       assertFalse(node3.isNew());
854:       assertFalse(node3.isDo());
855:       assertFalse(node3.isIn());
856:       assertEquals(1, node3.getChildCount());
857:       assertFalse(node3.isLabel());
858:       assertTrue(node3.hasChildren());
859:       assertFalse(node3.hasMoreThanOneChild());
860:       assertFalse(node3.isIf());
861:       assertFalse(node3.isNE());
862:       assertFalse(node3.isLabelName());
863:       assertFalse(node3.isSwitch());
864:       assertFalse(node3.isHook());
865:       assertFalse(node3.isBlock());
866:       assertFalse(node3.isRegExp());
867:       assertFalse(node3.isGetterDef());
868:       assertFalse(node3.isNumber());
869:       assertFalse(node3.isScript());
870:       assertFalse(node3.isThis());
871:       assertFalse(node3.isFor());
872:       assertFalse(node3.isCase());
873:       assertFalse(node3.isTry());
874:       assertFalse(node3.isInstanceOf());
875:       assertFalse(node3.isComma());
876:       assertFalse(node3.isNot());
877:       assertFalse(node3.isWith());
878:       assertFalse(node3.isObjectLit());
879:       assertFalse(node3.isBreak());
880:       assertFalse(node3.isExprResult());
881:       assertFalse(node3.isAnd());
882:       assertFalse(node3.isCast());
883:       assertFalse(node3.isFalse());
884:       assertFalse(node3.isInc());
885:       assertFalse(node3.isThrow());
886:       assertFalse(node3.isAssignAdd());
887:       assertFalse(node3.isReturn());
888:       assertFalse(node3.isContinue());
889:       assertFalse(node3.isOr());
890:       assertFalse(node3.isTypeOf());
891:       assertEquals(22, node3.getLineno());
892:       assertFalse(node3.isGetElem());
893:       assertFalse(node3.isDelProp());
894:       assertFalse(node3.isCall());
895:       assertFalse(node3.isDebugger());
896:       assertFalse(node3.isAssign());
897:       assertFalse(node3.isDec());
898:       assertFalse(node3.isString());
899:       assertFalse(node3.isWhile());
900:       assertTrue(node3.hasOneChild());
901:       assertFalse(node3.isGetProp());
902:       assertEquals(90143, node3.getSourcePosition());
903:       assertEquals(1, Node.DECR_FLAG);
904:       assertEquals(12, Node.COLUMN_BITS);
905:       assertEquals(51, Node.STATIC_SOURCE_FILE);
906:       assertEquals(30, Node.VAR_ARGS_NAME);
907:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
908:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
909:       assertEquals(15, Node.NO_SIDE_EFFECTS);
910:       assertEquals(57, Node.LAST_PROP);
911:       assertEquals(32, Node.INCRDECR_PROP);
912:       assertEquals(29, Node.JSDOC_INFO_PROP);
913:       assertEquals(57, Node.REFLECTED_OBJECT);
914:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
915:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
916:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
917:       assertEquals(52, Node.LENGTH);
918:       assertEquals(8, Node.FLAG_NO_THROWS);
919:       assertEquals(48, Node.DIRECTIVES);
920:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
921:       assertEquals(37, Node.OPT_ARG_NAME);
922:       assertEquals(56, Node.CHANGE_TIME);
923:       assertEquals(49, Node.DIRECT_EVAL);
924:       assertEquals(55, Node.INFERRED_FUNCTION);
925:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
926:       assertEquals(36, Node.QUOTED_PROP);
927:       assertEquals(4095, Node.COLUMN_MASK);
928:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
929:       assertEquals(39, Node.EMPTY_BLOCK);
930:       assertEquals(53, Node.INPUT_ID);
931:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
932:       assertEquals(40, Node.ORIGINALNAME_PROP);
933:       assertEquals(47, Node.IS_DISPATCHER);
934:       assertEquals(2, Node.POST_FLAG);
935:       assertEquals(50, Node.FREE_CALL);
936:       assertEquals(54, Node.SLASH_V);
937:       assertEquals(46, Node.IS_NAMESPACE);
938:       assertEquals(43, Node.IS_CONSTANT_NAME);
939:       assertEquals(4095, Node.COLUMN_MASK);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(55, Node.INFERRED_FUNCTION);
942:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
943:       assertEquals(43, Node.IS_CONSTANT_NAME);
944:       assertEquals(36, Node.QUOTED_PROP);
945:       assertEquals(8, Node.FLAG_NO_THROWS);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(50, Node.FREE_CALL);
948:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
949:       assertEquals(57, Node.REFLECTED_OBJECT);
950:       assertEquals(53, Node.INPUT_ID);
951:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
952:       assertEquals(52, Node.LENGTH);
953:       assertEquals(40, Node.ORIGINALNAME_PROP);
954:       assertEquals(29, Node.JSDOC_INFO_PROP);
955:       assertEquals(15, Node.NO_SIDE_EFFECTS);
956:       assertEquals(57, Node.LAST_PROP);
957:       assertEquals(47, Node.IS_DISPATCHER);
958:       assertEquals(2, Node.POST_FLAG);
959:       assertEquals(30, Node.VAR_ARGS_NAME);
960:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
961:       assertEquals(51, Node.STATIC_SOURCE_FILE);
962:       assertEquals(32, Node.INCRDECR_PROP);
963:       assertEquals(1, Node.DECR_FLAG);
964:       assertEquals(56, Node.CHANGE_TIME);
965:       assertEquals(37, Node.OPT_ARG_NAME);
966:       assertEquals(49, Node.DIRECT_EVAL);
967:       assertEquals(46, Node.IS_NAMESPACE);
968:       assertEquals(54, Node.SLASH_V);
969:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
970:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
971:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
972:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
973:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
974:       assertEquals(12, Node.COLUMN_BITS);
975:       assertNotNull(node3);
976:       
977:       Node node4 = node0.srcref(node3);
978:       assertFalse(node0.equals((Object)node3));
979:       assertFalse(node0.equals((Object)node1));
980:       assertFalse(node3.equals((Object)node0));
981:       assertFalse(node3.equals((Object)node2));
982:       assertFalse(node3.equals((Object)node1));
983:       assertFalse(node4.equals((Object)node1));
984:       assertFalse(node4.equals((Object)node3));
985:       assertFalse(node0.isContinue());
986:       assertFalse(node0.hasMoreThanOneChild());
987:       assertFalse(node0.isWhile());
988:       assertFalse(node0.isOr());
989:       assertFalse(node0.isLabel());
990:       assertFalse(node0.isReturn());
991:       assertEquals(39, node0.getType());
992:       assertFalse(node0.isAssignAdd());
993:       assertFalse(node0.isDo());
994:       assertFalse(node0.isNew());
995:       assertFalse(node0.isAdd());
996:       assertFalse(node0.isCall());
997:       assertFalse(node0.isName());
998:       assertFalse(node0.isDec());
999:       assertFalse(node0.isAssign());
1000:       assertFalse(node0.isBlock());
1001:       assertFalse(node0.isNull());
1002:       assertFalse(node0.hasChildren());
1003:       assertFalse(node0.isExprResult());
1004:       assertFalse(node0.isTypeOf());
1005:       assertFalse(node0.isGetElem());
1006:       assertFalse(node0.isCatch());
1007:       assertFalse(node0.isWith());
1008:       assertEquals(0, node0.getChildCount());
1009:       assertEquals(31, node0.getCharno());
1010:       assertFalse(node0.isTry());
1011:       assertFalse(node0.isDefaultCase());
1012:       assertFalse(node0.hasOneChild());
1013:       assertFalse(node0.isScript());
1014:       assertFalse(node0.isStringKey());
1015:       assertFalse(node0.isGetterDef());
1016:       assertFalse(node0.isVar());
1017:       assertFalse(node0.isParamList());
1018:       assertFalse(node0.isSwitch());
1019:       assertFalse(node0.isLabelName());
1020:       assertFalse(node0.isArrayLit());
1021:       assertFalse(node0.isIn());
1022:       assertEquals(22, node0.getLineno());
1023:       assertFalse(node0.isInc());
1024:       assertFalse(node0.isString());
1025:       assertTrue(node0.isNumber());
1026:       assertFalse(node0.isCase());
1027:       assertFalse(node0.isEmpty());
1028:       assertFalse(node0.isFor());
1029:       assertFalse(node0.isHook());
1030:       assertFalse(node0.isThis());
1031:       assertFalse(node0.isTrue());
1032:       assertFalse(node0.isVoid());
1033:       assertFalse(node0.isNE());
1034:       assertFalse(node0.isComma());
1035:       assertFalse(node0.isRegExp());
1036:       assertFalse(node0.isIf());
1037:       assertFalse(node0.isDelProp());
1038:       assertFalse(node0.isBreak());
1039:       assertFalse(node0.isInstanceOf());
1040:       assertFalse(node0.isObjectLit());
1041:       assertFalse(node0.isAnd());
1042:       assertFalse(node0.isNot());
1043:       assertFalse(node0.isDebugger());
1044:       assertEquals(90143, node0.getSourcePosition());
1045:       assertFalse(node0.isGetProp());
1046:       assertFalse(node0.isSetterDef());
1047:       assertFalse(node0.isThrow());
1048:       assertFalse(node0.isCast());
1049:       assertFalse(node0.isFalse());
1050:       assertFalse(node0.isFunction());
1051:       assertEquals(15, node3.getType());
1052:       assertFalse(node3.isCatch());
1053:       assertFalse(node3.isTrue());
1054:       assertFalse(node3.isNull());
1055:       assertFalse(node3.isVoid());
1056:       assertFalse(node3.isStringKey());
1057:       assertFalse(node3.isParamList());
1058:       assertFalse(node3.isName());
1059:       assertFalse(node3.isArrayLit());
1060:       assertFalse(node3.isVar());
1061:       assertFalse(node3.isAdd());
1062:       assertEquals(31, node3.getCharno());
1063:       assertFalse(node3.isFunction());
1064:       assertFalse(node3.isDefaultCase());
1065:       assertFalse(node3.isEmpty());
1066:       assertFalse(node3.isSetterDef());
1067:       assertFalse(node3.isNew());
1068:       assertFalse(node3.isDo());
1069:       assertFalse(node3.isIn());
1070:       assertEquals(1, node3.getChildCount());
1071:       assertFalse(node3.isLabel());
1072:       assertTrue(node3.hasChildren());
1073:       assertFalse(node3.hasMoreThanOneChild());
1074:       assertFalse(node3.isIf());
1075:       assertFalse(node3.isNE());
1076:       assertFalse(node3.isLabelName());
1077:       assertFalse(node3.isSwitch());
1078:       assertFalse(node3.isHook());
1079:       assertFalse(node3.isBlock());
1080:       assertFalse(node3.isRegExp());
1081:       assertFalse(node3.isGetterDef());
1082:       assertFalse(node3.isNumber());
1083:       assertFalse(node3.isScript());
1084:       assertFalse(node3.isThis());
1085:       assertFalse(node3.isFor());
1086:       assertFalse(node3.isCase());
1087:       assertFalse(node3.isTry());
1088:       assertFalse(node3.isInstanceOf());
1089:       assertFalse(node3.isComma());
1090:       assertFalse(node3.isNot());
1091:       assertFalse(node3.isWith());
1092:       assertFalse(node3.isObjectLit());
1093:       assertFalse(node3.isBreak());
1094:       assertFalse(node3.isExprResult());
1095:       assertFalse(node3.isAnd());
1096:       assertFalse(node3.isCast());
1097:       assertFalse(node3.isFalse());
1098:       assertFalse(node3.isInc());
1099:       assertFalse(node3.isThrow());
1100:       assertFalse(node3.isAssignAdd());
1101:       assertFalse(node3.isReturn());
1102:       assertFalse(node3.isContinue());
1103:       assertFalse(node3.isOr());
1104:       assertFalse(node3.isTypeOf());
1105:       assertEquals(22, node3.getLineno());
1106:       assertFalse(node3.isGetElem());
1107:       assertFalse(node3.isDelProp());
1108:       assertFalse(node3.isCall());
1109:       assertFalse(node3.isDebugger());
1110:       assertFalse(node3.isAssign());
1111:       assertFalse(node3.isDec());
1112:       assertFalse(node3.isString());
1113:       assertFalse(node3.isWhile());
1114:       assertTrue(node3.hasOneChild());
1115:       assertFalse(node3.isGetProp());
1116:       assertEquals(90143, node3.getSourcePosition());
1117:       assertFalse(node4.isTypeOf());
1118:       assertFalse(node4.hasChildren());
1119:       assertFalse(node4.isDec());
1120:       assertFalse(node4.isAssignAdd());
1121:       assertFalse(node4.isLabel());
1122:       assertFalse(node4.isLabelName());
1123:       assertFalse(node4.isReturn());
1124:       assertFalse(node4.hasOneChild());
1125:       assertFalse(node4.isOr());
1126:       assertFalse(node4.isScript());
1127:       assertFalse(node4.isExprResult());
1128:       assertEquals(39, node4.getType());
1129:       assertFalse(node4.isBlock());
1130:       assertFalse(node4.isWhile());
1131:       assertFalse(node4.hasMoreThanOneChild());
1132:       assertFalse(node4.isCall());
1133:       assertFalse(node4.isAssign());
1134:       assertFalse(node4.isWith());
1135:       assertFalse(node4.isGetElem());
1136:       assertFalse(node4.isInstanceOf());
1137:       assertFalse(node4.isSetterDef());
1138:       assertFalse(node4.isGetProp());
1139:       assertFalse(node4.isComma());
1140:       assertFalse(node4.isThrow());
1141:       assertFalse(node4.isObjectLit());
1142:       assertFalse(node4.isNot());
1143:       assertFalse(node4.isInc());
1144:       assertFalse(node4.isFunction());
1145:       assertFalse(node4.isDebugger());
1146:       assertFalse(node4.isAnd());
1147:       assertFalse(node4.isCast());
1148:       assertFalse(node4.isFalse());
1149:       assertFalse(node4.isContinue());
1150:       assertFalse(node4.isNE());
1151:       assertFalse(node4.isDelProp());
1152:       assertFalse(node4.isGetterDef());
1153:       assertFalse(node4.isFor());
1154:       assertFalse(node4.isIf());
1155:       assertFalse(node4.isCase());
1156:       assertTrue(node4.isNumber());
1157:       assertFalse(node4.isEmpty());
1158:       assertFalse(node4.isIn());
1159:       assertFalse(node4.isString());
1160:       assertFalse(node4.isRegExp());
1161:       assertFalse(node4.isTrue());
1162:       assertEquals(31, node4.getCharno());
1163:       assertFalse(node4.isVoid());
1164:       assertEquals(22, node4.getLineno());
1165:       assertFalse(node4.isTry());
1166:       assertEquals(90143, node4.getSourcePosition());
1167:       assertFalse(node4.isHook());
1168:       assertFalse(node4.isCatch());
1169:       assertFalse(node4.isNull());
1170:       assertFalse(node4.isThis());
1171:       assertFalse(node4.isBreak());
1172:       assertFalse(node4.isName());
1173:       assertFalse(node4.isStringKey());
1174:       assertFalse(node4.isParamList());
1175:       assertFalse(node4.isAdd());
1176:       assertFalse(node4.isSwitch());
1177:       assertFalse(node4.isNew());
1178:       assertFalse(node4.isDo());
1179:       assertFalse(node4.isDefaultCase());
1180:       assertFalse(node4.isVar());
1181:       assertFalse(node4.isArrayLit());
1182:       assertEquals(0, node4.getChildCount());
1183:       assertSame(node0, node2);
1184:       assertSame(node0, node4);
1185:       assertNotSame(node0, node1);
1186:       assertNotSame(node4, node1);
1187:       assertSame(node4, node2);
1188:       assertSame(node4, node0);
1189:       assertEquals(1, Node.DECR_FLAG);
1190:       assertEquals(12, Node.COLUMN_BITS);
1191:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1192:       assertEquals(30, Node.VAR_ARGS_NAME);
1193:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1196:       assertEquals(57, Node.LAST_PROP);
1197:       assertEquals(32, Node.INCRDECR_PROP);
1198:       assertEquals(29, Node.JSDOC_INFO_PROP);
1199:       assertEquals(57, Node.REFLECTED_OBJECT);
1200:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1201:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1203:       assertEquals(52, Node.LENGTH);
1204:       assertEquals(8, Node.FLAG_NO_THROWS);
1205:       assertEquals(48, Node.DIRECTIVES);
1206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1207:       assertEquals(37, Node.OPT_ARG_NAME);
1208:       assertEquals(56, Node.CHANGE_TIME);
1209:       assertEquals(49, Node.DIRECT_EVAL);
1210:       assertEquals(55, Node.INFERRED_FUNCTION);
1211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1212:       assertEquals(36, Node.QUOTED_PROP);
1213:       assertEquals(4095, Node.COLUMN_MASK);
1214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1215:       assertEquals(39, Node.EMPTY_BLOCK);
1216:       assertEquals(53, Node.INPUT_ID);
1217:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1218:       assertEquals(40, Node.ORIGINALNAME_PROP);
1219:       assertEquals(47, Node.IS_DISPATCHER);
1220:       assertEquals(2, Node.POST_FLAG);
1221:       assertEquals(50, Node.FREE_CALL);
1222:       assertEquals(54, Node.SLASH_V);
1223:       assertEquals(46, Node.IS_NAMESPACE);
1224:       assertEquals(43, Node.IS_CONSTANT_NAME);
1225:       assertEquals(4095, Node.COLUMN_MASK);
1226:       assertEquals(39, Node.EMPTY_BLOCK);
1227:       assertEquals(55, Node.INFERRED_FUNCTION);
1228:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1229:       assertEquals(43, Node.IS_CONSTANT_NAME);
1230:       assertEquals(36, Node.QUOTED_PROP);
1231:       assertEquals(8, Node.FLAG_NO_THROWS);
1232:       assertEquals(48, Node.DIRECTIVES);
1233:       assertEquals(50, Node.FREE_CALL);
1234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1235:       assertEquals(57, Node.REFLECTED_OBJECT);
1236:       assertEquals(53, Node.INPUT_ID);
1237:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1238:       assertEquals(52, Node.LENGTH);
1239:       assertEquals(40, Node.ORIGINALNAME_PROP);
1240:       assertEquals(29, Node.JSDOC_INFO_PROP);
1241:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1242:       assertEquals(57, Node.LAST_PROP);
1243:       assertEquals(47, Node.IS_DISPATCHER);
1244:       assertEquals(2, Node.POST_FLAG);
1245:       assertEquals(30, Node.VAR_ARGS_NAME);
1246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1247:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1248:       assertEquals(32, Node.INCRDECR_PROP);
1249:       assertEquals(1, Node.DECR_FLAG);
1250:       assertEquals(56, Node.CHANGE_TIME);
1251:       assertEquals(37, Node.OPT_ARG_NAME);
1252:       assertEquals(49, Node.DIRECT_EVAL);
1253:       assertEquals(46, Node.IS_NAMESPACE);
1254:       assertEquals(54, Node.SLASH_V);
1255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1256:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1257:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1258:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1259:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1260:       assertEquals(12, Node.COLUMN_BITS);
1261:       assertEquals(2, Node.POST_FLAG);
1262:       assertEquals(56, Node.CHANGE_TIME);
1263:       assertEquals(46, Node.IS_NAMESPACE);
1264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1265:       assertEquals(47, Node.IS_DISPATCHER);
1266:       assertEquals(12, Node.COLUMN_BITS);
1267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1268:       assertEquals(29, Node.JSDOC_INFO_PROP);
1269:       assertEquals(32, Node.INCRDECR_PROP);
1270:       assertEquals(53, Node.INPUT_ID);
1271:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1272:       assertEquals(1, Node.DECR_FLAG);
1273:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1274:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1275:       assertEquals(52, Node.LENGTH);
1276:       assertEquals(36, Node.QUOTED_PROP);
1277:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1278:       assertEquals(57, Node.REFLECTED_OBJECT);
1279:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1280:       assertEquals(4095, Node.COLUMN_MASK);
1281:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1282:       assertEquals(49, Node.DIRECT_EVAL);
1283:       assertEquals(37, Node.OPT_ARG_NAME);
1284:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1285:       assertEquals(8, Node.FLAG_NO_THROWS);
1286:       assertEquals(39, Node.EMPTY_BLOCK);
1287:       assertEquals(48, Node.DIRECTIVES);
1288:       assertEquals(50, Node.FREE_CALL);
1289:       assertEquals(55, Node.INFERRED_FUNCTION);
1290:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1291:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1292:       assertEquals(54, Node.SLASH_V);
1293:       assertEquals(43, Node.IS_CONSTANT_NAME);
1294:       assertEquals(57, Node.LAST_PROP);
1295:       assertEquals(30, Node.VAR_ARGS_NAME);
1296:       assertEquals(40, Node.ORIGINALNAME_PROP);
1297:       assertNotNull(node4);
1298:       
1299:       Iterable<Node> iterable0 = node1.children();
1300:       assertFalse(iterable0.contains(node4));
1301:       assertFalse(node0.equals((Object)node3));
1302:       assertFalse(node0.equals((Object)node1));
1303:       assertFalse(node1.equals((Object)node0));
1304:       assertFalse(node1.equals((Object)node3));
1305:       assertFalse(node1.equals((Object)node4));
1306:       assertFalse(node1.equals((Object)node2));
1307:       assertFalse(node0.isContinue());
1308:       assertFalse(node0.hasMoreThanOneChild());
1309:       assertFalse(node0.isWhile());
1310:       assertFalse(node0.isOr());
1311:       assertFalse(node0.isLabel());
1312:       assertFalse(node0.isReturn());
1313:       assertEquals(39, node0.getType());
1314:       assertFalse(node0.isAssignAdd());
1315:       assertFalse(node0.isDo());
1316:       assertFalse(node0.isNew());
1317:       assertFalse(node0.isAdd());
1318:       assertFalse(node0.isCall());
1319:       assertFalse(node0.isName());
1320:       assertFalse(node0.isDec());
1321:       assertFalse(node0.isAssign());
1322:       assertFalse(node0.isBlock());
1323:       assertFalse(node0.isNull());
1324:       assertFalse(node0.hasChildren());
1325:       assertFalse(node0.isExprResult());
1326:       assertFalse(node0.isTypeOf());
1327:       assertFalse(node0.isGetElem());
1328:       assertFalse(node0.isCatch());
1329:       assertFalse(node0.isWith());
1330:       assertEquals(0, node0.getChildCount());
1331:       assertEquals(31, node0.getCharno());
1332:       assertFalse(node0.isTry());
1333:       assertFalse(node0.isDefaultCase());
1334:       assertFalse(node0.hasOneChild());
1335:       assertFalse(node0.isScript());
1336:       assertFalse(node0.isStringKey());
1337:       assertFalse(node0.isGetterDef());
1338:       assertFalse(node0.isVar());
1339:       assertFalse(node0.isParamList());
1340:       assertFalse(node0.isSwitch());
1341:       assertFalse(node0.isLabelName());
1342:       assertFalse(node0.isArrayLit());
1343:       assertFalse(node0.isIn());
1344:       assertEquals(22, node0.getLineno());
1345:       assertFalse(node0.isInc());
1346:       assertFalse(node0.isString());
1347:       assertTrue(node0.isNumber());
1348:       assertFalse(node0.isCase());
1349:       assertFalse(node0.isEmpty());
1350:       assertFalse(node0.isFor());
1351:       assertFalse(node0.isHook());
1352:       assertFalse(node0.isThis());
1353:       assertFalse(node0.isTrue());
1354:       assertFalse(node0.isVoid());
1355:       assertFalse(node0.isNE());
1356:       assertFalse(node0.isComma());
1357:       assertFalse(node0.isRegExp());
1358:       assertFalse(node0.isIf());
1359:       assertFalse(node0.isDelProp());
1360:       assertFalse(node0.isBreak());
1361:       assertFalse(node0.isInstanceOf());
1362:       assertFalse(node0.isObjectLit());
1363:       assertFalse(node0.isAnd());
1364:       assertFalse(node0.isNot());
1365:       assertFalse(node0.isDebugger());
1366:       assertEquals(90143, node0.getSourcePosition());
1367:       assertFalse(node0.isGetProp());
1368:       assertFalse(node0.isSetterDef());
1369:       assertFalse(node0.isThrow());
1370:       assertFalse(node0.isCast());
1371:       assertFalse(node0.isFalse());
1372:       assertFalse(node0.isFunction());
1373:       assertFalse(node1.isExprResult());
1374:       assertFalse(node1.isObjectLit());
1375:       assertFalse(node1.isNot());
1376:       assertFalse(node1.hasOneChild());
1377:       assertFalse(node1.isScript());
1378:       assertFalse(node1.isGetProp());
1379:       assertFalse(node1.isAssignAdd());
1380:       assertEquals((-1), node1.getSourcePosition());
1381:       assertFalse(node1.isLabel());
1382:       assertFalse(node1.isAnd());
1383:       assertFalse(node1.isContinue());
1384:       assertFalse(node1.isCast());
1385:       assertFalse(node1.isLabelName());
1386:       assertFalse(node1.isFalse());
1387:       assertEquals((-1), node1.getCharno());
1388:       assertFalse(node1.isSwitch());
1389:       assertFalse(node1.isBlock());
1390:       assertFalse(node1.isHook());
1391:       assertEquals(39, node1.getType());
1392:       assertFalse(node1.isThrow());
1393:       assertFalse(node1.isIn());
1394:       assertFalse(node1.isCase());
1395:       assertFalse(node1.isInc());
1396:       assertFalse(node1.isSetterDef());
1397:       assertFalse(node1.isNE());
1398:       assertFalse(node1.isIf());
1399:       assertFalse(node1.isFor());
1400:       assertFalse(node1.isThis());
1401:       assertFalse(node1.isCatch());
1402:       assertFalse(node1.hasMoreThanOneChild());
1403:       assertFalse(node1.isWith());
1404:       assertFalse(node1.isInstanceOf());
1405:       assertEquals((-1), node1.getLineno());
1406:       assertFalse(node1.isTrue());
1407:       assertFalse(node1.isVoid());
1408:       assertFalse(node1.isDebugger());
1409:       assertFalse(node1.isTry());
1410:       assertFalse(node1.isRegExp());
1411:       assertFalse(node1.isFunction());
1412:       assertFalse(node1.isDefaultCase());
1413:       assertFalse(node1.isEmpty());
1414:       assertFalse(node1.isParamList());
1415:       assertFalse(node1.isGetterDef());
1416:       assertEquals(0, node1.getChildCount());
1417:       assertFalse(node1.isStringKey());
1418:       assertFalse(node1.isArrayLit());
1419:       assertFalse(node1.isNew());
1420:       assertFalse(node1.isWhile());
1421:       assertFalse(node1.isVar());
1422:       assertFalse(node1.isString());
1423:       assertFalse(node1.isDo());
1424:       assertTrue(node1.isNumber());
1425:       assertFalse(node1.isAdd());
1426:       assertFalse(node1.isComma());
1427:       assertFalse(node1.isTypeOf());
1428:       assertFalse(node1.hasChildren());
1429:       assertFalse(node1.isDec());
1430:       assertFalse(node1.isAssign());
1431:       assertFalse(node1.isOr());
1432:       assertFalse(node1.isNull());
1433:       assertFalse(node1.isReturn());
1434:       assertFalse(node1.isCall());
1435:       assertFalse(node1.isName());
1436:       assertFalse(node1.isDelProp());
1437:       assertFalse(node1.isBreak());
1438:       assertFalse(node1.isGetElem());
1439:       assertSame(node0, node2);
1440:       assertSame(node0, node4);
1441:       assertNotSame(node0, node1);
1442:       assertNotSame(node1, node0);
1443:       assertNotSame(node1, node4);
1444:       assertNotSame(node1, node2);
1445:       assertEquals(1, Node.DECR_FLAG);
1446:       assertEquals(12, Node.COLUMN_BITS);
1447:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1448:       assertEquals(30, Node.VAR_ARGS_NAME);
1449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1450:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1452:       assertEquals(57, Node.LAST_PROP);
1453:       assertEquals(32, Node.INCRDECR_PROP);
1454:       assertEquals(29, Node.JSDOC_INFO_PROP);
1455:       assertEquals(57, Node.REFLECTED_OBJECT);
1456:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1458:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1459:       assertEquals(52, Node.LENGTH);
1460:       assertEquals(8, Node.FLAG_NO_THROWS);
1461:       assertEquals(48, Node.DIRECTIVES);
1462:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1463:       assertEquals(37, Node.OPT_ARG_NAME);
1464:       assertEquals(56, Node.CHANGE_TIME);
1465:       assertEquals(49, Node.DIRECT_EVAL);
1466:       assertEquals(55, Node.INFERRED_FUNCTION);
1467:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1468:       assertEquals(36, Node.QUOTED_PROP);
1469:       assertEquals(4095, Node.COLUMN_MASK);
1470:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1471:       assertEquals(39, Node.EMPTY_BLOCK);
1472:       assertEquals(53, Node.INPUT_ID);
1473:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1474:       assertEquals(40, Node.ORIGINALNAME_PROP);
1475:       assertEquals(47, Node.IS_DISPATCHER);
1476:       assertEquals(2, Node.POST_FLAG);
1477:       assertEquals(50, Node.FREE_CALL);
1478:       assertEquals(54, Node.SLASH_V);
1479:       assertEquals(46, Node.IS_NAMESPACE);
1480:       assertEquals(43, Node.IS_CONSTANT_NAME);
1481:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1482:       assertEquals(53, Node.INPUT_ID);
1483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1484:       assertEquals(36, Node.QUOTED_PROP);
1485:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1486:       assertEquals(55, Node.INFERRED_FUNCTION);
1487:       assertEquals(29, Node.JSDOC_INFO_PROP);
1488:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1489:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1490:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1491:       assertEquals(46, Node.IS_NAMESPACE);
1492:       assertEquals(47, Node.IS_DISPATCHER);
1493:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1494:       assertEquals(2, Node.POST_FLAG);
1495:       assertEquals(50, Node.FREE_CALL);
1496:       assertEquals(40, Node.ORIGINALNAME_PROP);
1497:       assertEquals(43, Node.IS_CONSTANT_NAME);
1498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1499:       assertEquals(54, Node.SLASH_V);
1500:       assertEquals(30, Node.VAR_ARGS_NAME);
1501:       assertEquals(52, Node.LENGTH);
1502:       assertEquals(1, Node.DECR_FLAG);
1503:       assertEquals(12, Node.COLUMN_BITS);
1504:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1505:       assertEquals(57, Node.LAST_PROP);
1506:       assertEquals(32, Node.INCRDECR_PROP);
1507:       assertEquals(48, Node.DIRECTIVES);
1508:       assertEquals(37, Node.OPT_ARG_NAME);
1509:       assertEquals(39, Node.EMPTY_BLOCK);
1510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1511:       assertEquals(4095, Node.COLUMN_MASK);
1512:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1513:       assertEquals(8, Node.FLAG_NO_THROWS);
1514:       assertEquals(57, Node.REFLECTED_OBJECT);
1515:       assertEquals(56, Node.CHANGE_TIME);
1516:       assertEquals(49, Node.DIRECT_EVAL);
1517:       assertNotNull(iterable0);
1518:       
1519:       int int0 = node3.getLength();
1520:       assertEquals(0, int0);
1521:       assertFalse(node0.equals((Object)node3));
1522:       assertFalse(node0.equals((Object)node1));
1523:       assertFalse(node3.equals((Object)node0));
1524:       assertFalse(node3.equals((Object)node4));
1525:       assertFalse(node3.equals((Object)node2));
1526:       assertFalse(node3.equals((Object)node1));
1527:       assertFalse(node0.isContinue());
1528:       assertFalse(node0.hasMoreThanOneChild());
1529:       assertFalse(node0.isWhile());
1530:       assertFalse(node0.isOr());
1531:       assertFalse(node0.isLabel());
1532:       assertFalse(node0.isReturn());
1533:       assertEquals(39, node0.getType());
1534:       assertFalse(node0.isAssignAdd());
1535:       assertFalse(node0.isDo());
1536:       assertFalse(node0.isNew());
1537:       assertFalse(node0.isAdd());
1538:       assertFalse(node0.isCall());
1539:       assertFalse(node0.isName());
1540:       assertFalse(node0.isDec());
1541:       assertFalse(node0.isAssign());
1542:       assertFalse(node0.isBlock());
1543:       assertFalse(node0.isNull());
1544:       assertFalse(node0.hasChildren());
1545:       assertFalse(node0.isExprResult());
1546:       assertFalse(node0.isTypeOf());
1547:       assertFalse(node0.isGetElem());
1548:       assertFalse(node0.isCatch());
1549:       assertFalse(node0.isWith());
1550:       assertEquals(0, node0.getChildCount());
1551:       assertEquals(31, node0.getCharno());
1552:       assertFalse(node0.isTry());
1553:       assertFalse(node0.isDefaultCase());
1554:       assertFalse(node0.hasOneChild());
1555:       assertFalse(node0.isScript());
1556:       assertFalse(node0.isStringKey());
1557:       assertFalse(node0.isGetterDef());
1558:       assertFalse(node0.isVar());
1559:       assertFalse(node0.isParamList());
1560:       assertFalse(node0.isSwitch());
1561:       assertFalse(node0.isLabelName());
1562:       assertFalse(node0.isArrayLit());
1563:       assertFalse(node0.isIn());
1564:       assertEquals(22, node0.getLineno());
1565:       assertFalse(node0.isInc());
1566:       assertFalse(node0.isString());
1567:       assertTrue(node0.isNumber());
1568:       assertFalse(node0.isCase());
1569:       assertFalse(node0.isEmpty());
1570:       assertFalse(node0.isFor());
1571:       assertFalse(node0.isHook());
1572:       assertFalse(node0.isThis());
1573:       assertFalse(node0.isTrue());
1574:       assertFalse(node0.isVoid());
1575:       assertFalse(node0.isNE());
1576:       assertFalse(node0.isComma());
1577:       assertFalse(node0.isRegExp());
1578:       assertFalse(node0.isIf());
1579:       assertFalse(node0.isDelProp());
1580:       assertFalse(node0.isBreak());
1581:       assertFalse(node0.isInstanceOf());
1582:       assertFalse(node0.isObjectLit());
1583:       assertFalse(node0.isAnd());
1584:       assertFalse(node0.isNot());
1585:       assertFalse(node0.isDebugger());
1586:       assertEquals(90143, node0.getSourcePosition());
1587:       assertFalse(node0.isGetProp());
1588:       assertFalse(node0.isSetterDef());
1589:       assertFalse(node0.isThrow());
1590:       assertFalse(node0.isCast());
1591:       assertFalse(node0.isFalse());
1592:       assertFalse(node0.isFunction());
1593:       assertEquals(15, node3.getType());
1594:       assertFalse(node3.isCatch());
1595:       assertFalse(node3.isTrue());
1596:       assertFalse(node3.isNull());
1597:       assertFalse(node3.isVoid());
1598:       assertFalse(node3.isStringKey());
1599:       assertFalse(node3.isParamList());
1600:       assertFalse(node3.isName());
1601:       assertFalse(node3.isArrayLit());
1602:       assertFalse(node3.isVar());
1603:       assertFalse(node3.isAdd());
1604:       assertEquals(31, node3.getCharno());
1605:       assertFalse(node3.isFunction());
1606:       assertFalse(node3.isDefaultCase());
1607:       assertFalse(node3.isEmpty());
1608:       assertFalse(node3.isSetterDef());
1609:       assertFalse(node3.isNew());
1610:       assertFalse(node3.isDo());
1611:       assertFalse(node3.isIn());
1612:       assertEquals(1, node3.getChildCount());
1613:       assertFalse(node3.isLabel());
1614:       assertTrue(node3.hasChildren());
1615:       assertFalse(node3.hasMoreThanOneChild());
1616:       assertFalse(node3.isIf());
1617:       assertFalse(node3.isNE());
1618:       assertFalse(node3.isLabelName());
1619:       assertFalse(node3.isSwitch());
1620:       assertFalse(node3.isHook());
1621:       assertFalse(node3.isBlock());
1622:       assertFalse(node3.isRegExp());
1623:       assertFalse(node3.isGetterDef());
1624:       assertFalse(node3.isNumber());
1625:       assertFalse(node3.isScript());
1626:       assertFalse(node3.isThis());
1627:       assertFalse(node3.isFor());
1628:       assertFalse(node3.isCase());
1629:       assertFalse(node3.isTry());
1630:       assertFalse(node3.isInstanceOf());
1631:       assertFalse(node3.isComma());
1632:       assertFalse(node3.isNot());
1633:       assertFalse(node3.isWith());
1634:       assertFalse(node3.isObjectLit());
1635:       assertFalse(node3.isBreak());
1636:       assertFalse(node3.isExprResult());
1637:       assertFalse(node3.isAnd());
1638:       assertFalse(node3.isCast());
1639:       assertFalse(node3.isFalse());
1640:       assertFalse(node3.isInc());
1641:       assertFalse(node3.isThrow());
1642:       assertFalse(node3.isAssignAdd());
1643:       assertFalse(node3.isReturn());
1644:       assertFalse(node3.isContinue());
1645:       assertFalse(node3.isOr());
1646:       assertFalse(node3.isTypeOf());
1647:       assertEquals(22, node3.getLineno());
1648:       assertFalse(node3.isGetElem());
1649:       assertFalse(node3.isDelProp());
1650:       assertFalse(node3.isCall());
1651:       assertFalse(node3.isDebugger());
1652:       assertFalse(node3.isAssign());
1653:       assertFalse(node3.isDec());
1654:       assertFalse(node3.isString());
1655:       assertFalse(node3.isWhile());
1656:       assertTrue(node3.hasOneChild());
1657:       assertFalse(node3.isGetProp());
1658:       assertEquals(90143, node3.getSourcePosition());
1659:       assertSame(node0, node2);
1660:       assertSame(node0, node4);
1661:       assertNotSame(node0, node1);
1662:       assertEquals(1, Node.DECR_FLAG);
1663:       assertEquals(12, Node.COLUMN_BITS);
1664:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1665:       assertEquals(30, Node.VAR_ARGS_NAME);
1666:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1667:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1668:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1669:       assertEquals(57, Node.LAST_PROP);
1670:       assertEquals(32, Node.INCRDECR_PROP);
1671:       assertEquals(29, Node.JSDOC_INFO_PROP);
1672:       assertEquals(57, Node.REFLECTED_OBJECT);
1673:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1674:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1675:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1676:       assertEquals(52, Node.LENGTH);
1677:       assertEquals(8, Node.FLAG_NO_THROWS);
1678:       assertEquals(48, Node.DIRECTIVES);
1679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1680:       assertEquals(37, Node.OPT_ARG_NAME);
1681:       assertEquals(56, Node.CHANGE_TIME);
1682:       assertEquals(49, Node.DIRECT_EVAL);
1683:       assertEquals(55, Node.INFERRED_FUNCTION);
1684:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1685:       assertEquals(36, Node.QUOTED_PROP);
1686:       assertEquals(4095, Node.COLUMN_MASK);
1687:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1688:       assertEquals(39, Node.EMPTY_BLOCK);
1689:       assertEquals(53, Node.INPUT_ID);
1690:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1691:       assertEquals(40, Node.ORIGINALNAME_PROP);
1692:       assertEquals(47, Node.IS_DISPATCHER);
1693:       assertEquals(2, Node.POST_FLAG);
1694:       assertEquals(50, Node.FREE_CALL);
1695:       assertEquals(54, Node.SLASH_V);
1696:       assertEquals(46, Node.IS_NAMESPACE);
1697:       assertEquals(43, Node.IS_CONSTANT_NAME);
1698:       assertEquals(4095, Node.COLUMN_MASK);
1699:       assertEquals(39, Node.EMPTY_BLOCK);
1700:       assertEquals(55, Node.INFERRED_FUNCTION);
1701:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1702:       assertEquals(43, Node.IS_CONSTANT_NAME);
1703:       assertEquals(36, Node.QUOTED_PROP);
1704:       assertEquals(8, Node.FLAG_NO_THROWS);
1705:       assertEquals(48, Node.DIRECTIVES);
1706:       assertEquals(50, Node.FREE_CALL);
1707:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1708:       assertEquals(57, Node.REFLECTED_OBJECT);
1709:       assertEquals(53, Node.INPUT_ID);
1710:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1711:       assertEquals(52, Node.LENGTH);
1712:       assertEquals(40, Node.ORIGINALNAME_PROP);
1713:       assertEquals(29, Node.JSDOC_INFO_PROP);
1714:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1715:       assertEquals(57, Node.LAST_PROP);
1716:       assertEquals(47, Node.IS_DISPATCHER);
1717:       assertEquals(2, Node.POST_FLAG);
1718:       assertEquals(30, Node.VAR_ARGS_NAME);
1719:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1720:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1721:       assertEquals(32, Node.INCRDECR_PROP);
1722:       assertEquals(1, Node.DECR_FLAG);
1723:       assertEquals(56, Node.CHANGE_TIME);
1724:       assertEquals(37, Node.OPT_ARG_NAME);
1725:       assertEquals(49, Node.DIRECT_EVAL);
1726:       assertEquals(46, Node.IS_NAMESPACE);
1727:       assertEquals(54, Node.SLASH_V);
1728:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1729:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1730:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1731:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1732:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1733:       assertEquals(12, Node.COLUMN_BITS);
1734:       
1735:       node0.setChangeTime((-1316));
1736:       assertFalse(node0.equals((Object)node3));
1737:       assertFalse(node0.equals((Object)node1));
1738:       assertFalse(node0.isContinue());
1739:       assertFalse(node0.hasMoreThanOneChild());
1740:       assertFalse(node0.isWhile());
1741:       assertFalse(node0.isOr());
1742:       assertFalse(node0.isLabel());
1743:       assertFalse(node0.isReturn());
1744:       assertEquals(39, node0.getType());
1745:       assertFalse(node0.isAssignAdd());
1746:       assertFalse(node0.isDo());
1747:       assertFalse(node0.isNew());
1748:       assertFalse(node0.isAdd());
1749:       assertFalse(node0.isCall());
1750:       assertFalse(node0.isName());
1751:       assertFalse(node0.isDec());
1752:       assertFalse(node0.isAssign());
1753:       assertFalse(node0.isBlock());
1754:       assertFalse(node0.isNull());
1755:       assertFalse(node0.hasChildren());
1756:       assertFalse(node0.isExprResult());
1757:       assertFalse(node0.isTypeOf());
1758:       assertFalse(node0.isGetElem());
1759:       assertFalse(node0.isCatch());
1760:       assertFalse(node0.isWith());
1761:       assertEquals(0, node0.getChildCount());
1762:       assertEquals(31, node0.getCharno());
1763:       assertFalse(node0.isTry());
1764:       assertFalse(node0.isDefaultCase());
1765:       assertFalse(node0.hasOneChild());
1766:       assertFalse(node0.isScript());
1767:       assertFalse(node0.isStringKey());
1768:       assertFalse(node0.isGetterDef());
1769:       assertFalse(node0.isVar());
1770:       assertFalse(node0.isParamList());
1771:       assertFalse(node0.isSwitch());
1772:       assertFalse(node0.isLabelName());
1773:       assertFalse(node0.isArrayLit());
1774:       assertFalse(node0.isIn());
1775:       assertEquals(22, node0.getLineno());
1776:       assertFalse(node0.isInc());
1777:       assertFalse(node0.isString());
1778:       assertTrue(node0.isNumber());
1779:       assertFalse(node0.isCase());
1780:       assertFalse(node0.isEmpty());
1781:       assertFalse(node0.isFor());
1782:       assertFalse(node0.isHook());
1783:       assertFalse(node0.isThis());
1784:       assertFalse(node0.isTrue());
1785:       assertFalse(node0.isVoid());
1786:       assertFalse(node0.isNE());
1787:       assertFalse(node0.isComma());
1788:       assertFalse(node0.isRegExp());
1789:       assertFalse(node0.isIf());
1790:       assertFalse(node0.isDelProp());
1791:       assertFalse(node0.isBreak());
1792:       assertFalse(node0.isInstanceOf());
1793:       assertFalse(node0.isObjectLit());
1794:       assertFalse(node0.isAnd());
1795:       assertFalse(node0.isNot());
1796:       assertFalse(node0.isDebugger());
1797:       assertEquals(90143, node0.getSourcePosition());
1798:       assertFalse(node0.isGetProp());
1799:       assertFalse(node0.isSetterDef());
1800:       assertFalse(node0.isThrow());
1801:       assertFalse(node0.isCast());
1802:       assertFalse(node0.isFalse());
1803:       assertFalse(node0.isFunction());
1804:       assertSame(node0, node2);
1805:       assertSame(node0, node4);
1806:       assertNotSame(node0, node1);
1807:       assertEquals(1, Node.DECR_FLAG);
1808:       assertEquals(12, Node.COLUMN_BITS);
1809:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1810:       assertEquals(30, Node.VAR_ARGS_NAME);
1811:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1812:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1813:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1814:       assertEquals(57, Node.LAST_PROP);
1815:       assertEquals(32, Node.INCRDECR_PROP);
1816:       assertEquals(29, Node.JSDOC_INFO_PROP);
1817:       assertEquals(57, Node.REFLECTED_OBJECT);
1818:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1819:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1820:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1821:       assertEquals(52, Node.LENGTH);
1822:       assertEquals(8, Node.FLAG_NO_THROWS);
1823:       assertEquals(48, Node.DIRECTIVES);
1824:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1825:       assertEquals(37, Node.OPT_ARG_NAME);
1826:       assertEquals(56, Node.CHANGE_TIME);
1827:       assertEquals(49, Node.DIRECT_EVAL);
1828:       assertEquals(55, Node.INFERRED_FUNCTION);
1829:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1830:       assertEquals(36, Node.QUOTED_PROP);
1831:       assertEquals(4095, Node.COLUMN_MASK);
1832:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1833:       assertEquals(39, Node.EMPTY_BLOCK);
1834:       assertEquals(53, Node.INPUT_ID);
1835:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1836:       assertEquals(40, Node.ORIGINALNAME_PROP);
1837:       assertEquals(47, Node.IS_DISPATCHER);
1838:       assertEquals(2, Node.POST_FLAG);
1839:       assertEquals(50, Node.FREE_CALL);
1840:       assertEquals(54, Node.SLASH_V);
1841:       assertEquals(46, Node.IS_NAMESPACE);
1842:       assertEquals(43, Node.IS_CONSTANT_NAME);
1843:       
1844:       int int1 = node3.getLineno();
1845:       assertEquals(22, int1);
1846:       assertFalse(node0.equals((Object)node3));
1847:       assertFalse(node0.equals((Object)node1));
1848:       assertFalse(node3.equals((Object)node0));
1849:       assertFalse(node3.equals((Object)node4));
1850:       assertFalse(node3.equals((Object)node2));
1851:       assertFalse(node3.equals((Object)node1));
1852:       assertFalse(int1 == int0);
1853:       assertFalse(node0.isContinue());
1854:       assertFalse(node0.hasMoreThanOneChild());
1855:       assertFalse(node0.isWhile());
1856:       assertFalse(node0.isOr());
1857:       assertFalse(node0.isLabel());
1858:       assertFalse(node0.isReturn());
1859:       assertEquals(39, node0.getType());
1860:       assertFalse(node0.isAssignAdd());
1861:       assertFalse(node0.isDo());
1862:       assertFalse(node0.isNew());
1863:       assertFalse(node0.isAdd());
1864:       assertFalse(node0.isCall());
1865:       assertFalse(node0.isName());
1866:       assertFalse(node0.isDec());
1867:       assertFalse(node0.isAssign());
1868:       assertFalse(node0.isBlock());
1869:       assertFalse(node0.isNull());
1870:       assertFalse(node0.hasChildren());
1871:       assertFalse(node0.isExprResult());
1872:       assertFalse(node0.isTypeOf());
1873:       assertFalse(node0.isGetElem());
1874:       assertFalse(node0.isCatch());
1875:       assertFalse(node0.isWith());
1876:       assertEquals(0, node0.getChildCount());
1877:       assertEquals(31, node0.getCharno());
1878:       assertFalse(node0.isTry());
1879:       assertFalse(node0.isDefaultCase());
1880:       assertFalse(node0.hasOneChild());
1881:       assertFalse(node0.isScript());
1882:       assertFalse(node0.isStringKey());
1883:       assertFalse(node0.isGetterDef());
1884:       assertFalse(node0.isVar());
1885:       assertFalse(node0.isParamList());
1886:       assertFalse(node0.isSwitch());
1887:       assertFalse(node0.isLabelName());
1888:       assertFalse(node0.isArrayLit());
1889:       assertFalse(node0.isIn());
1890:       assertEquals(22, node0.getLineno());
1891:       assertFalse(node0.isInc());
1892:       assertFalse(node0.isString());
1893:       assertTrue(node0.isNumber());
1894:       assertFalse(node0.isCase());
1895:       assertFalse(node0.isEmpty());
1896:       assertFalse(node0.isFor());
1897:       assertFalse(node0.isHook());
1898:       assertFalse(node0.isThis());
1899:       assertFalse(node0.isTrue());
1900:       assertFalse(node0.isVoid());
1901:       assertFalse(node0.isNE());
1902:       assertFalse(node0.isComma());
1903:       assertFalse(node0.isRegExp());
1904:       assertFalse(node0.isIf());
1905:       assertFalse(node0.isDelProp());
1906:       assertFalse(node0.isBreak());
1907:       assertFalse(node0.isInstanceOf());
1908:       assertFalse(node0.isObjectLit());
1909:       assertFalse(node0.isAnd());
1910:       assertFalse(node0.isNot());
1911:       assertFalse(node0.isDebugger());
1912:       assertEquals(90143, node0.getSourcePosition());
1913:       assertFalse(node0.isGetProp());
1914:       assertFalse(node0.isSetterDef());
1915:       assertFalse(node0.isThrow());
1916:       assertFalse(node0.isCast());
1917:       assertFalse(node0.isFalse());
1918:       assertFalse(node0.isFunction());
1919:       assertEquals(15, node3.getType());
1920:       assertFalse(node3.isCatch());
1921:       assertFalse(node3.isTrue());
1922:       assertFalse(node3.isNull());
1923:       assertFalse(node3.isVoid());
1924:       assertFalse(node3.isStringKey());
1925:       assertFalse(node3.isParamList());
1926:       assertFalse(node3.isName());
1927:       assertFalse(node3.isArrayLit());
1928:       assertFalse(node3.isVar());
1929:       assertFalse(node3.isAdd());
1930:       assertEquals(31, node3.getCharno());
1931:       assertFalse(node3.isFunction());
1932:       assertFalse(node3.isDefaultCase());
1933:       assertFalse(node3.isEmpty());
1934:       assertFalse(node3.isSetterDef());
1935:       assertFalse(node3.isNew());
1936:       assertFalse(node3.isDo());
1937:       assertFalse(node3.isIn());
1938:       assertEquals(1, node3.getChildCount());
1939:       assertFalse(node3.isLabel());
1940:       assertTrue(node3.hasChildren());
1941:       assertFalse(node3.hasMoreThanOneChild());
1942:       assertFalse(node3.isIf());
1943:       assertFalse(node3.isNE());
1944:       assertFalse(node3.isLabelName());
1945:       assertFalse(node3.isSwitch());
1946:       assertFalse(node3.isHook());
1947:       assertFalse(node3.isBlock());
1948:       assertFalse(node3.isRegExp());
1949:       assertFalse(node3.isGetterDef());
1950:       assertFalse(node3.isNumber());
1951:       assertFalse(node3.isScript());
1952:       assertFalse(node3.isThis());
1953:       assertFalse(node3.isFor());
1954:       assertFalse(node3.isCase());
1955:       assertFalse(node3.isTry());
1956:       assertFalse(node3.isInstanceOf());
1957:       assertFalse(node3.isComma());
1958:       assertFalse(node3.isNot());
1959:       assertFalse(node3.isWith());
1960:       assertFalse(node3.isObjectLit());
1961:       assertFalse(node3.isBreak());
1962:       assertFalse(node3.isExprResult());
1963:       assertFalse(node3.isAnd());
1964:       assertFalse(node3.isCast());
1965:       assertFalse(node3.isFalse());
1966:       assertFalse(node3.isInc());
1967:       assertFalse(node3.isThrow());
1968:       assertFalse(node3.isAssignAdd());
1969:       assertFalse(node3.isReturn());
1970:       assertFalse(node3.isContinue());
1971:       assertFalse(node3.isOr());
1972:       assertFalse(node3.isTypeOf());
1973:       assertEquals(22, node3.getLineno());
1974:       assertFalse(node3.isGetElem());
1975:       assertFalse(node3.isDelProp());
1976:       assertFalse(node3.isCall());
1977:       assertFalse(node3.isDebugger());
1978:       assertFalse(node3.isAssign());
1979:       assertFalse(node3.isDec());
1980:       assertFalse(node3.isString());
1981:       assertFalse(node3.isWhile());
1982:       assertTrue(node3.hasOneChild());
1983:       assertFalse(node3.isGetProp());
1984:       assertEquals(90143, node3.getSourcePosition());
1985:       assertSame(node0, node2);
1986:       assertSame(node0, node4);
1987:       assertNotSame(node0, node1);
1988:       assertEquals(1, Node.DECR_FLAG);
1989:       assertEquals(12, Node.COLUMN_BITS);
1990:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1991:       assertEquals(30, Node.VAR_ARGS_NAME);
1992:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1993:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1994:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1995:       assertEquals(57, Node.LAST_PROP);
1996:       assertEquals(32, Node.INCRDECR_PROP);
1997:       assertEquals(29, Node.JSDOC_INFO_PROP);
1998:       assertEquals(57, Node.REFLECTED_OBJECT);
1999:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2000:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2001:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2002:       assertEquals(52, Node.LENGTH);
2003:       assertEquals(8, Node.FLAG_NO_THROWS);
2004:       assertEquals(48, Node.DIRECTIVES);
2005:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2006:       assertEquals(37, Node.OPT_ARG_NAME);
2007:       assertEquals(56, Node.CHANGE_TIME);
2008:       assertEquals(49, Node.DIRECT_EVAL);
2009:       assertEquals(55, Node.INFERRED_FUNCTION);
2010:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2011:       assertEquals(36, Node.QUOTED_PROP);
2012:       assertEquals(4095, Node.COLUMN_MASK);
2013:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2014:       assertEquals(39, Node.EMPTY_BLOCK);
2015:       assertEquals(53, Node.INPUT_ID);
2016:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2017:       assertEquals(40, Node.ORIGINALNAME_PROP);
2018:       assertEquals(47, Node.IS_DISPATCHER);
2019:       assertEquals(2, Node.POST_FLAG);
2020:       assertEquals(50, Node.FREE_CALL);
2021:       assertEquals(54, Node.SLASH_V);
2022:       assertEquals(46, Node.IS_NAMESPACE);
2023:       assertEquals(43, Node.IS_CONSTANT_NAME);
2024:       assertEquals(4095, Node.COLUMN_MASK);
2025:       assertEquals(39, Node.EMPTY_BLOCK);
2026:       assertEquals(55, Node.INFERRED_FUNCTION);
2027:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2028:       assertEquals(43, Node.IS_CONSTANT_NAME);
2029:       assertEquals(36, Node.QUOTED_PROP);
2030:       assertEquals(8, Node.FLAG_NO_THROWS);
2031:       assertEquals(48, Node.DIRECTIVES);
2032:       assertEquals(50, Node.FREE_CALL);
2033:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2034:       assertEquals(57, Node.REFLECTED_OBJECT);
2035:       assertEquals(53, Node.INPUT_ID);
2036:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2037:       assertEquals(52, Node.LENGTH);
2038:       assertEquals(40, Node.ORIGINALNAME_PROP);
2039:       assertEquals(29, Node.JSDOC_INFO_PROP);
2040:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2041:       assertEquals(57, Node.LAST_PROP);
2042:       assertEquals(47, Node.IS_DISPATCHER);
2043:       assertEquals(2, Node.POST_FLAG);
2044:       assertEquals(30, Node.VAR_ARGS_NAME);
2045:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2046:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2047:       assertEquals(32, Node.INCRDECR_PROP);
2048:       assertEquals(1, Node.DECR_FLAG);
2049:       assertEquals(56, Node.CHANGE_TIME);
2050:       assertEquals(37, Node.OPT_ARG_NAME);
2051:       assertEquals(49, Node.DIRECT_EVAL);
2052:       assertEquals(46, Node.IS_NAMESPACE);
2053:       assertEquals(54, Node.SLASH_V);
2054:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2055:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2056:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2057:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2058:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2059:       assertEquals(12, Node.COLUMN_BITS);
2060:   }
2061: }
RegularFileObject[/tmp/EvoSuite_133_1628158414744/com/google/javascript/rhino/Node_133_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_133_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_133_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_133_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.InputId",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.TemplatizedType",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Iterators$12",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.JSTypeExpression",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.Sets$ImprovedAbstractSet",
349:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
350:       "com.google.common.collect.Hashing",
351:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.Platform",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
368:       "com.google.common.collect.ImmutableList$1"
369:     );
370:   }
371: }

[MASTER] 10:13:35.184 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(698.16961606004);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node0);

node0.putIntProp(65535, 65535);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node1 = node0.cloneNode();
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(39, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertTrue(node1.isNumber());
assertFalse(node1.isAdd());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node1);

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getVersion());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isOverride());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isNoShadow());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasThisType());
assertNotNull(jSDocInfo0);

Node node2 = node0.setJSDocInfo(jSDocInfo0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getVersion());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isOverride());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isNoShadow());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabel());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node2, node1);
assertSame(node2, node0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node2);

Node node3 = new Node(15, node0, node0, node0, node0, 22, 31);
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertEquals(15, node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isVoid());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertEquals(31, node3.getCharno());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isIn());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isLabel());
assertTrue(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isObjectLit());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertEquals(22, node3.getLineno());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isCall());
assertFalse(node3.isDebugger());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertTrue(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertEquals(90143, node3.getSourcePosition());
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node3);

Node node4 = node0.srcref(node3);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertEquals(31, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertEquals(22, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(90143, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(15, node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isVoid());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertEquals(31, node3.getCharno());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isIn());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isLabel());
assertTrue(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isObjectLit());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertEquals(22, node3.getLineno());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isCall());
assertFalse(node3.isDebugger());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertTrue(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertEquals(90143, node3.getSourcePosition());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isLabelName());
assertFalse(node4.isReturn());
assertFalse(node4.hasOneChild());
assertFalse(node4.isOr());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertEquals(39, node4.getType());
assertFalse(node4.isBlock());
assertFalse(node4.isWhile());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCall());
assertFalse(node4.isAssign());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isSetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isThrow());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isInc());
assertFalse(node4.isFunction());
assertFalse(node4.isDebugger());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isFalse());
assertFalse(node4.isContinue());
assertFalse(node4.isNE());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFor());
assertFalse(node4.isIf());
assertFalse(node4.isCase());
assertTrue(node4.isNumber());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isString());
assertFalse(node4.isRegExp());
assertFalse(node4.isTrue());
assertEquals(31, node4.getCharno());
assertFalse(node4.isVoid());
assertEquals(22, node4.getLineno());
assertFalse(node4.isTry());
assertEquals(90143, node4.getSourcePosition());
assertFalse(node4.isHook());
assertFalse(node4.isCatch());
assertFalse(node4.isNull());
assertFalse(node4.isThis());
assertFalse(node4.isBreak());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isAdd());
assertFalse(node4.isSwitch());
assertFalse(node4.isNew());
assertFalse(node4.isDo());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVar());
assertFalse(node4.isArrayLit());
assertEquals(0, node4.getChildCount());
assertSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node1);
assertNotSame(node4, node1);
assertSame(node4, node2);
assertSame(node4, node0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node4);

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertEquals(31, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertEquals(22, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(90143, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(39, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertTrue(node1.isNumber());
assertFalse(node1.isAdd());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertNotSame(node1, node2);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(iterable0);

int int0 = node3.getLength();
assertEquals(0, int0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertEquals(31, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertEquals(22, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(90143, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(15, node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isVoid());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertEquals(31, node3.getCharno());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isIn());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isLabel());
assertTrue(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isObjectLit());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertEquals(22, node3.getLineno());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isCall());
assertFalse(node3.isDebugger());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertTrue(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertEquals(90143, node3.getSourcePosition());
assertSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

node0.setChangeTime((-1316));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertEquals(31, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertEquals(22, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(90143, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

int int1 = node3.getLineno();
assertEquals(22, int1);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(int1 == int0);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertEquals(31, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertEquals(22, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(90143, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(15, node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isVoid());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertEquals(31, node3.getCharno());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isIn());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isLabel());
assertTrue(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isObjectLit());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertEquals(22, node3.getLineno());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isCall());
assertFalse(node3.isDebugger());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertTrue(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertEquals(90143, node3.getSourcePosition());
assertSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);


[MASTER] 10:13:37.651 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_155_1628158417622/com/google/javascript/rhino/Node_155_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_155_1628158417622/com/google/javascript/rhino/Node_155_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:37.651 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:37.651 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:37.652 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 129
[MASTER] 10:13:37.653 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_155_1628158417622/com/google/javascript/rhino/Node_155_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import java.util.PriorityQueue;
13: import java.util.Set;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_155_tmp__ESTest extends Node_155_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(103, 103, 103);
24:       assertFalse(node0.isNE());
25:       assertFalse(node0.isIf());
26:       assertFalse(node0.isFor());
27:       assertFalse(node0.isGetterDef());
28:       assertTrue(node0.isDec());
29:       assertFalse(node0.isDelProp());
30:       assertFalse(node0.isVoid());
31:       assertFalse(node0.isArrayLit());
32:       assertFalse(node0.isSwitch());
33:       assertFalse(node0.isRegExp());
34:       assertFalse(node0.isString());
35:       assertEquals(103, node0.getType());
36:       assertFalse(node0.isDebugger());
37:       assertFalse(node0.isHook());
38:       assertFalse(node0.isTry());
39:       assertFalse(node0.isCase());
40:       assertFalse(node0.isSetterDef());
41:       assertFalse(node0.isThis());
42:       assertEquals(103, node0.getLineno());
43:       assertFalse(node0.isCatch());
44:       assertFalse(node0.isFalse());
45:       assertFalse(node0.isAnd());
46:       assertFalse(node0.isInstanceOf());
47:       assertEquals(103, node0.getCharno());
48:       assertFalse(node0.isInc());
49:       assertFalse(node0.isFunction());
50:       assertEquals(421991, node0.getSourcePosition());
51:       assertFalse(node0.isThrow());
52:       assertFalse(node0.isIn());
53:       assertFalse(node0.isTypeOf());
54:       assertFalse(node0.isNumber());
55:       assertFalse(node0.isAssign());
56:       assertFalse(node0.isLabel());
57:       assertFalse(node0.isOr());
58:       assertFalse(node0.isReturn());
59:       assertFalse(node0.hasChildren());
60:       assertFalse(node0.isCast());
61:       assertFalse(node0.hasMoreThanOneChild());
62:       assertFalse(node0.isContinue());
63:       assertFalse(node0.isLabelName());
64:       assertFalse(node0.isGetElem());
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isScript());
67:       assertFalse(node0.isWhile());
68:       assertFalse(node0.isNot());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isBlock());
71:       assertFalse(node0.isObjectLit());
72:       assertFalse(node0.isGetProp());
73:       assertFalse(node0.hasOneChild());
74:       assertFalse(node0.isNull());
75:       assertFalse(node0.isParamList());
76:       assertEquals(0, node0.getChildCount());
77:       assertFalse(node0.isComma());
78:       assertFalse(node0.isCall());
79:       assertFalse(node0.isStringKey());
80:       assertFalse(node0.isName());
81:       assertFalse(node0.isBreak());
82:       assertFalse(node0.isTrue());
83:       assertFalse(node0.isDefaultCase());
84:       assertFalse(node0.isVar());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isDo());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isNew());
90:       assertEquals(37, Node.OPT_ARG_NAME);
91:       assertEquals(2, Node.POST_FLAG);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(47, Node.IS_DISPATCHER);
94:       assertEquals(29, Node.JSDOC_INFO_PROP);
95:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(49, Node.DIRECT_EVAL);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(56, Node.CHANGE_TIME);
100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
101:       assertEquals(54, Node.SLASH_V);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
104:       assertEquals(12, Node.COLUMN_BITS);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(32, Node.INCRDECR_PROP);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(8, Node.FLAG_NO_THROWS);
109:       assertEquals(39, Node.EMPTY_BLOCK);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
112:       assertEquals(50, Node.FREE_CALL);
113:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
114:       assertEquals(4095, Node.COLUMN_MASK);
115:       assertEquals(40, Node.ORIGINALNAME_PROP);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(43, Node.IS_CONSTANT_NAME);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(36, Node.QUOTED_PROP);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(52, Node.LENGTH);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(55, Node.INFERRED_FUNCTION);
124:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
125:       assertEquals(57, Node.LAST_PROP);
126:       assertNotNull(node0);
127:       
128:       Iterable<Node> iterable0 = new PriorityQueue<Node>(4095);
129:       assertFalse(iterable0.contains(node0));
130:       assertNotNull(iterable0);
131:       
132:       Set<String> set0 = node0.getDirectives();
133:       assertFalse(node0.isNE());
134:       assertFalse(node0.isIf());
135:       assertFalse(node0.isFor());
136:       assertFalse(node0.isGetterDef());
137:       assertTrue(node0.isDec());
138:       assertFalse(node0.isDelProp());
139:       assertFalse(node0.isVoid());
140:       assertFalse(node0.isArrayLit());
141:       assertFalse(node0.isSwitch());
142:       assertFalse(node0.isRegExp());
143:       assertFalse(node0.isString());
144:       assertEquals(103, node0.getType());
145:       assertFalse(node0.isDebugger());
146:       assertFalse(node0.isHook());
147:       assertFalse(node0.isTry());
148:       assertFalse(node0.isCase());
149:       assertFalse(node0.isSetterDef());
150:       assertFalse(node0.isThis());
151:       assertEquals(103, node0.getLineno());
152:       assertFalse(node0.isCatch());
153:       assertFalse(node0.isFalse());
154:       assertFalse(node0.isAnd());
155:       assertFalse(node0.isInstanceOf());
156:       assertEquals(103, node0.getCharno());
157:       assertFalse(node0.isInc());
158:       assertFalse(node0.isFunction());
159:       assertEquals(421991, node0.getSourcePosition());
160:       assertFalse(node0.isThrow());
161:       assertFalse(node0.isIn());
162:       assertFalse(node0.isTypeOf());
163:       assertFalse(node0.isNumber());
164:       assertFalse(node0.isAssign());
165:       assertFalse(node0.isLabel());
166:       assertFalse(node0.isOr());
167:       assertFalse(node0.isReturn());
168:       assertFalse(node0.hasChildren());
169:       assertFalse(node0.isCast());
170:       assertFalse(node0.hasMoreThanOneChild());
171:       assertFalse(node0.isContinue());
172:       assertFalse(node0.isLabelName());
173:       assertFalse(node0.isGetElem());
174:       assertFalse(node0.isExprResult());
175:       assertFalse(node0.isScript());
176:       assertFalse(node0.isWhile());
177:       assertFalse(node0.isNot());
178:       assertFalse(node0.isWith());
179:       assertFalse(node0.isBlock());
180:       assertFalse(node0.isObjectLit());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isNull());
184:       assertFalse(node0.isParamList());
185:       assertEquals(0, node0.getChildCount());
186:       assertFalse(node0.isComma());
187:       assertFalse(node0.isCall());
188:       assertFalse(node0.isStringKey());
189:       assertFalse(node0.isName());
190:       assertFalse(node0.isBreak());
191:       assertFalse(node0.isTrue());
192:       assertFalse(node0.isDefaultCase());
193:       assertFalse(node0.isVar());
194:       assertFalse(node0.isEmpty());
195:       assertFalse(node0.isDo());
196:       assertFalse(node0.isAssignAdd());
197:       assertFalse(node0.isAdd());
198:       assertFalse(node0.isNew());
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(2, Node.POST_FLAG);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(47, Node.IS_DISPATCHER);
203:       assertEquals(29, Node.JSDOC_INFO_PROP);
204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
206:       assertEquals(49, Node.DIRECT_EVAL);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(56, Node.CHANGE_TIME);
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(54, Node.SLASH_V);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
213:       assertEquals(12, Node.COLUMN_BITS);
214:       assertEquals(1, Node.DECR_FLAG);
215:       assertEquals(32, Node.INCRDECR_PROP);
216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
217:       assertEquals(8, Node.FLAG_NO_THROWS);
218:       assertEquals(39, Node.EMPTY_BLOCK);
219:       assertEquals(48, Node.DIRECTIVES);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(50, Node.FREE_CALL);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(4095, Node.COLUMN_MASK);
224:       assertEquals(40, Node.ORIGINALNAME_PROP);
225:       assertEquals(57, Node.REFLECTED_OBJECT);
226:       assertEquals(43, Node.IS_CONSTANT_NAME);
227:       assertEquals(15, Node.NO_SIDE_EFFECTS);
228:       assertEquals(36, Node.QUOTED_PROP);
229:       assertEquals(53, Node.INPUT_ID);
230:       assertEquals(52, Node.LENGTH);
231:       assertEquals(30, Node.VAR_ARGS_NAME);
232:       assertEquals(55, Node.INFERRED_FUNCTION);
233:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
234:       assertEquals(57, Node.LAST_PROP);
235:       assertNull(set0);
236:       
237:       String string0 = node0.checkTreeEquals(node0);
238:       assertFalse(node0.isNE());
239:       assertFalse(node0.isIf());
240:       assertFalse(node0.isFor());
241:       assertFalse(node0.isGetterDef());
242:       assertTrue(node0.isDec());
243:       assertFalse(node0.isDelProp());
244:       assertFalse(node0.isVoid());
245:       assertFalse(node0.isArrayLit());
246:       assertFalse(node0.isSwitch());
247:       assertFalse(node0.isRegExp());
248:       assertFalse(node0.isString());
249:       assertEquals(103, node0.getType());
250:       assertFalse(node0.isDebugger());
251:       assertFalse(node0.isHook());
252:       assertFalse(node0.isTry());
253:       assertFalse(node0.isCase());
254:       assertFalse(node0.isSetterDef());
255:       assertFalse(node0.isThis());
256:       assertEquals(103, node0.getLineno());
257:       assertFalse(node0.isCatch());
258:       assertFalse(node0.isFalse());
259:       assertFalse(node0.isAnd());
260:       assertFalse(node0.isInstanceOf());
261:       assertEquals(103, node0.getCharno());
262:       assertFalse(node0.isInc());
263:       assertFalse(node0.isFunction());
264:       assertEquals(421991, node0.getSourcePosition());
265:       assertFalse(node0.isThrow());
266:       assertFalse(node0.isIn());
267:       assertFalse(node0.isTypeOf());
268:       assertFalse(node0.isNumber());
269:       assertFalse(node0.isAssign());
270:       assertFalse(node0.isLabel());
271:       assertFalse(node0.isOr());
272:       assertFalse(node0.isReturn());
273:       assertFalse(node0.hasChildren());
274:       assertFalse(node0.isCast());
275:       assertFalse(node0.hasMoreThanOneChild());
276:       assertFalse(node0.isContinue());
277:       assertFalse(node0.isLabelName());
278:       assertFalse(node0.isGetElem());
279:       assertFalse(node0.isExprResult());
280:       assertFalse(node0.isScript());
281:       assertFalse(node0.isWhile());
282:       assertFalse(node0.isNot());
283:       assertFalse(node0.isWith());
284:       assertFalse(node0.isBlock());
285:       assertFalse(node0.isObjectLit());
286:       assertFalse(node0.isGetProp());
287:       assertFalse(node0.hasOneChild());
288:       assertFalse(node0.isNull());
289:       assertFalse(node0.isParamList());
290:       assertEquals(0, node0.getChildCount());
291:       assertFalse(node0.isComma());
292:       assertFalse(node0.isCall());
293:       assertFalse(node0.isStringKey());
294:       assertFalse(node0.isName());
295:       assertFalse(node0.isBreak());
296:       assertFalse(node0.isTrue());
297:       assertFalse(node0.isDefaultCase());
298:       assertFalse(node0.isVar());
299:       assertFalse(node0.isEmpty());
300:       assertFalse(node0.isDo());
301:       assertFalse(node0.isAssignAdd());
302:       assertFalse(node0.isAdd());
303:       assertFalse(node0.isNew());
304:       assertEquals(37, Node.OPT_ARG_NAME);
305:       assertEquals(2, Node.POST_FLAG);
306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
307:       assertEquals(47, Node.IS_DISPATCHER);
308:       assertEquals(29, Node.JSDOC_INFO_PROP);
309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(56, Node.CHANGE_TIME);
314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(12, Node.COLUMN_BITS);
319:       assertEquals(1, Node.DECR_FLAG);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(48, Node.DIRECTIVES);
325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(4095, Node.COLUMN_MASK);
329:       assertEquals(40, Node.ORIGINALNAME_PROP);
330:       assertEquals(57, Node.REFLECTED_OBJECT);
331:       assertEquals(43, Node.IS_CONSTANT_NAME);
332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
333:       assertEquals(36, Node.QUOTED_PROP);
334:       assertEquals(53, Node.INPUT_ID);
335:       assertEquals(52, Node.LENGTH);
336:       assertEquals(30, Node.VAR_ARGS_NAME);
337:       assertEquals(55, Node.INFERRED_FUNCTION);
338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
339:       assertEquals(57, Node.LAST_PROP);
340:       assertNull(string0);
341:       
342:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
343:       assertNotNull(simpleErrorReporter0);
344:   }
345: }
RegularFileObject[/tmp/EvoSuite_155_1628158417622/com/google/javascript/rhino/Node_155_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:37 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_155_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_155_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_155_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.InputId",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.TemplatizedType",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Iterators$12",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.JSTypeExpression",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.Sets$ImprovedAbstractSet",
349:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
350:       "com.google.common.collect.Hashing",
351:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.Platform",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
368:       "com.google.common.collect.ImmutableList$1"
369:     );
370:   }
371: }

[MASTER] 10:13:37.656 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(103, 103, 103);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertTrue(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertEquals(103, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(103, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(103, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(421991, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node0);

Iterable<Node> iterable0 = new PriorityQueue<Node>(4095);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

Set<String> set0 = node0.getDirectives();
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertTrue(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertEquals(103, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(103, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(103, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(421991, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertNull(set0);

String string0 = node0.checkTreeEquals(node0);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertTrue(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertEquals(103, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(103, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(103, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(421991, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertNull(string0);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);


[MASTER] 10:13:41.437 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_207_1628158421420/com/google/javascript/rhino/Node_207_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_207_1628158421420/com/google/javascript/rhino/Node_207_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:41.437 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:41.437 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:41.437 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 10:13:41.438 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_207_1628158421420/com/google/javascript/rhino/Node_207_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_207_tmp__ESTest extends Node_207_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1034.552, 664, 664);
21:       assertFalse(node0.isNew());
22:       assertFalse(node0.isBlock());
23:       assertFalse(node0.isAdd());
24:       assertFalse(node0.isDo());
25:       assertFalse(node0.isStringKey());
26:       assertFalse(node0.isName());
27:       assertFalse(node0.isNull());
28:       assertFalse(node0.isOr());
29:       assertEquals(664, node0.getLineno());
30:       assertFalse(node0.isAssignAdd());
31:       assertFalse(node0.isParamList());
32:       assertFalse(node0.isSetterDef());
33:       assertFalse(node0.isCast());
34:       assertFalse(node0.isContinue());
35:       assertEquals(0, node0.getChildCount());
36:       assertFalse(node0.isVar());
37:       assertFalse(node0.isLabel());
38:       assertFalse(node0.isTry());
39:       assertFalse(node0.hasOneChild());
40:       assertFalse(node0.isScript());
41:       assertFalse(node0.isArrayLit());
42:       assertFalse(node0.isLabelName());
43:       assertFalse(node0.isGetterDef());
44:       assertFalse(node0.isNE());
45:       assertFalse(node0.isIf());
46:       assertFalse(node0.isInstanceOf());
47:       assertFalse(node0.isFor());
48:       assertFalse(node0.hasMoreThanOneChild());
49:       assertFalse(node0.isCatch());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isHook());
52:       assertFalse(node0.isRegExp());
53:       assertEquals(39, node0.getType());
54:       assertFalse(node0.isThis());
55:       assertFalse(node0.isSwitch());
56:       assertFalse(node0.isInc());
57:       assertEquals(664, node0.getCharno());
58:       assertFalse(node0.isCase());
59:       assertFalse(node0.isString());
60:       assertFalse(node0.isIn());
61:       assertFalse(node0.isThrow());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isTrue());
64:       assertFalse(node0.isVoid());
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isObjectLit());
71:       assertFalse(node0.isAnd());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.isDelProp());
75:       assertTrue(node0.isNumber());
76:       assertFalse(node0.isBreak());
77:       assertFalse(node0.isGetElem());
78:       assertFalse(node0.isCall());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isDec());
81:       assertEquals(2720408, node0.getSourcePosition());
82:       assertFalse(node0.isTypeOf());
83:       assertFalse(node0.isComma());
84:       assertFalse(node0.isReturn());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.hasChildren());
87:       assertEquals(54, Node.SLASH_V);
88:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
89:       assertEquals(57, Node.REFLECTED_OBJECT);
90:       assertEquals(57, Node.LAST_PROP);
91:       assertEquals(50, Node.FREE_CALL);
92:       assertEquals(1, Node.DECR_FLAG);
93:       assertEquals(15, Node.NO_SIDE_EFFECTS);
94:       assertEquals(51, Node.STATIC_SOURCE_FILE);
95:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
96:       assertEquals(52, Node.LENGTH);
97:       assertEquals(8, Node.FLAG_NO_THROWS);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(39, Node.EMPTY_BLOCK);
100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
101:       assertEquals(30, Node.VAR_ARGS_NAME);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(47, Node.IS_DISPATCHER);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(53, Node.INPUT_ID);
106:       assertEquals(43, Node.IS_CONSTANT_NAME);
107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(36, Node.QUOTED_PROP);
112:       assertEquals(55, Node.INFERRED_FUNCTION);
113:       assertEquals(48, Node.DIRECTIVES);
114:       assertEquals(37, Node.OPT_ARG_NAME);
115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(12, Node.COLUMN_BITS);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(49, Node.DIRECT_EVAL);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(4095, Node.COLUMN_MASK);
122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertFalse(node0.isNew());
128:       assertFalse(node0.isBlock());
129:       assertFalse(node0.isAdd());
130:       assertFalse(node0.isDo());
131:       assertFalse(node0.isStringKey());
132:       assertFalse(node0.isName());
133:       assertFalse(node0.isNull());
134:       assertFalse(node0.isOr());
135:       assertEquals(664, node0.getLineno());
136:       assertFalse(node0.isAssignAdd());
137:       assertFalse(node0.isParamList());
138:       assertFalse(node0.isSetterDef());
139:       assertFalse(node0.isCast());
140:       assertFalse(node0.isContinue());
141:       assertEquals(0, node0.getChildCount());
142:       assertFalse(node0.isVar());
143:       assertFalse(node0.isLabel());
144:       assertFalse(node0.isTry());
145:       assertFalse(node0.hasOneChild());
146:       assertFalse(node0.isScript());
147:       assertFalse(node0.isArrayLit());
148:       assertFalse(node0.isLabelName());
149:       assertFalse(node0.isGetterDef());
150:       assertFalse(node0.isNE());
151:       assertFalse(node0.isIf());
152:       assertFalse(node0.isInstanceOf());
153:       assertFalse(node0.isFor());
154:       assertFalse(node0.hasMoreThanOneChild());
155:       assertFalse(node0.isCatch());
156:       assertFalse(node0.isWith());
157:       assertFalse(node0.isHook());
158:       assertFalse(node0.isRegExp());
159:       assertEquals(39, node0.getType());
160:       assertFalse(node0.isThis());
161:       assertFalse(node0.isSwitch());
162:       assertFalse(node0.isInc());
163:       assertEquals(664, node0.getCharno());
164:       assertFalse(node0.isCase());
165:       assertFalse(node0.isString());
166:       assertFalse(node0.isIn());
167:       assertFalse(node0.isThrow());
168:       assertFalse(node0.isFalse());
169:       assertFalse(node0.isTrue());
170:       assertFalse(node0.isVoid());
171:       assertFalse(node0.isExprResult());
172:       assertFalse(node0.isFunction());
173:       assertFalse(node0.isDefaultCase());
174:       assertFalse(node0.isEmpty());
175:       assertFalse(node0.isNot());
176:       assertFalse(node0.isObjectLit());
177:       assertFalse(node0.isAnd());
178:       assertFalse(node0.isDebugger());
179:       assertFalse(node0.isGetProp());
180:       assertFalse(node0.isDelProp());
181:       assertTrue(node0.isNumber());
182:       assertFalse(node0.isBreak());
183:       assertFalse(node0.isGetElem());
184:       assertFalse(node0.isCall());
185:       assertFalse(node0.isWhile());
186:       assertFalse(node0.isDec());
187:       assertEquals(2720408, node0.getSourcePosition());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.isComma());
190:       assertFalse(node0.isReturn());
191:       assertFalse(node0.isAssign());
192:       assertFalse(node0.hasChildren());
193:       assertEquals(54, Node.SLASH_V);
194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
195:       assertEquals(57, Node.REFLECTED_OBJECT);
196:       assertEquals(57, Node.LAST_PROP);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(1, Node.DECR_FLAG);
199:       assertEquals(15, Node.NO_SIDE_EFFECTS);
200:       assertEquals(51, Node.STATIC_SOURCE_FILE);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(52, Node.LENGTH);
203:       assertEquals(8, Node.FLAG_NO_THROWS);
204:       assertEquals(46, Node.IS_NAMESPACE);
205:       assertEquals(39, Node.EMPTY_BLOCK);
206:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
207:       assertEquals(30, Node.VAR_ARGS_NAME);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(47, Node.IS_DISPATCHER);
210:       assertEquals(2, Node.POST_FLAG);
211:       assertEquals(53, Node.INPUT_ID);
212:       assertEquals(43, Node.IS_CONSTANT_NAME);
213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
215:       assertEquals(29, Node.JSDOC_INFO_PROP);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(36, Node.QUOTED_PROP);
218:       assertEquals(55, Node.INFERRED_FUNCTION);
219:       assertEquals(48, Node.DIRECTIVES);
220:       assertEquals(37, Node.OPT_ARG_NAME);
221:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
222:       assertEquals(56, Node.CHANGE_TIME);
223:       assertEquals(12, Node.COLUMN_BITS);
224:       assertEquals(32, Node.INCRDECR_PROP);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
227:       assertEquals(4095, Node.COLUMN_MASK);
228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
229:       assertNotNull(iterable0);
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_207_1628158421420/com/google/javascript/rhino/Node_207_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_207_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_207_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_207_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.InputId",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.TemplatizedType",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Iterators$12",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.JSTypeExpression",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.Sets$ImprovedAbstractSet",
349:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
350:       "com.google.common.collect.Hashing",
351:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.Platform",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
368:       "com.google.common.collect.ImmutableList$1"
369:     );
370:   }
371: }

[MASTER] 10:13:41.439 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1034.552, 664, 664);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(664, node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals(664, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertEquals(2720408, node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(664, node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals(664, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertEquals(2720408, node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(iterable0);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/8
* Done!

* Computation finished
