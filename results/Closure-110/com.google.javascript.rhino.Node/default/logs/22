* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 11734
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2218411523
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:38:31.983 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:38:34.484 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V
[MASTER] 10:38:35.592 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 4724: com.google.javascript.rhino.Node.extractLineno(I)I:1212 - ReplaceBitwiseOperator >>> I -> << I
[MASTER] 10:42:41.576 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 556 generations, 235661 statements, best individual has fitness: 2767.0
* Minimizing test suite
[MASTER] 10:50:04.252 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 802
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 626
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 104
* Number of covered goals: 104
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 471
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 4536
* Number of covered goals: 2269
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 581
* Generated 1131 tests with total length 11173
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:51:24.919 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6708333333333333% of time used, but only 77/1131 tests minimized), falling back to using all assertions
[MASTER] 10:51:44.777 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 10:51:56.441 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 10:52:04.589 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_143_1628160724413/com/google/javascript/rhino/Node_143_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_143_1628160724413/com/google/javascript/rhino/Node_143_tmp__ESTest_scaffolding.java]]
[MASTER] 10:52:04.589 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:04.589 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:04.593 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 875
[MASTER] 10:52:04.595 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_143_1628160724413/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:52:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_143_tmp__ESTest extends Node_143_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber((-361.387943));
22:       assertNotNull(node0);
23:       assertFalse(node0.isStringKey());
24:       assertFalse(node0.isVar());
25:       assertFalse(node0.isCall());
26:       assertFalse(node0.isNew());
27:       assertFalse(node0.isSetterDef());
28:       assertFalse(node0.isAdd());
29:       assertFalse(node0.isBlock());
30:       assertFalse(node0.isWhile());
31:       assertFalse(node0.isDo());
32:       assertFalse(node0.isContinue());
33:       assertEquals(0, node0.getChildCount());
34:       assertFalse(node0.isFunction());
35:       assertFalse(node0.isDebugger());
36:       assertFalse(node0.isParamList());
37:       assertFalse(node0.isArrayLit());
38:       assertFalse(node0.isLabelName());
39:       assertFalse(node0.isGetElem());
40:       assertFalse(node0.isEmpty());
41:       assertFalse(node0.isDec());
42:       assertEquals((-1), node0.getSourcePosition());
43:       assertFalse(node0.hasChildren());
44:       assertFalse(node0.isAssign());
45:       assertFalse(node0.isTypeOf());
46:       assertFalse(node0.isLabel());
47:       assertFalse(node0.isAssignAdd());
48:       assertFalse(node0.isReturn());
49:       assertFalse(node0.isDefaultCase());
50:       assertTrue(node0.isNumber());
51:       assertFalse(node0.isOr());
52:       assertFalse(node0.isExprResult());
53:       assertFalse(node0.isTrue());
54:       assertFalse(node0.isNull());
55:       assertFalse(node0.isBreak());
56:       assertFalse(node0.isDelProp());
57:       assertFalse(node0.isVoid());
58:       assertFalse(node0.isName());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isThrow());
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isGetProp());
64:       assertFalse(node0.isInc());
65:       assertFalse(node0.isThis());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isObjectLit());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isSwitch());
73:       assertFalse(node0.isCast());
74:       assertFalse(node0.isFor());
75:       assertFalse(node0.isGetterDef());
76:       assertFalse(node0.isScript());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isTry());
79:       assertEquals(39, node0.getType());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.isIn());
82:       assertFalse(node0.isInstanceOf());
83:       assertFalse(node0.hasMoreThanOneChild());
84:       assertFalse(node0.isWith());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.isNE());
87:       assertFalse(node0.isIf());
88:       assertEquals((-1), node0.getLineno());
89:       assertEquals(15, Node.NO_SIDE_EFFECTS);
90:       assertEquals(57, Node.LAST_PROP);
91:       assertEquals(54, Node.SLASH_V);
92:       assertEquals(1, Node.DECR_FLAG);
93:       assertEquals(49, Node.DIRECT_EVAL);
94:       assertEquals(57, Node.REFLECTED_OBJECT);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(46, Node.IS_NAMESPACE);
97:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
98:       assertEquals(52, Node.LENGTH);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(47, Node.IS_DISPATCHER);
101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
102:       assertEquals(39, Node.EMPTY_BLOCK);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(40, Node.ORIGINALNAME_PROP);
105:       assertEquals(2, Node.POST_FLAG);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(43, Node.IS_CONSTANT_NAME);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
110:       assertEquals(55, Node.INFERRED_FUNCTION);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(53, Node.INPUT_ID);
113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
114:       assertEquals(8, Node.FLAG_NO_THROWS);
115:       assertEquals(56, Node.CHANGE_TIME);
116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(37, Node.OPT_ARG_NAME);
120:       assertEquals(32, Node.INCRDECR_PROP);
121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
122:       assertEquals(4095, Node.COLUMN_MASK);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       
126:       Node node1 = Node.newString(",p3nXQIp6SV$l0XU'", 5104, (-735));
127:       assertNotNull(node1);
128:       assertFalse(node1.isTry());
129:       assertFalse(node1.isDebugger());
130:       assertFalse(node1.isArrayLit());
131:       assertFalse(node1.isFunction());
132:       assertFalse(node1.isRegExp());
133:       assertFalse(node1.isEmpty());
134:       assertFalse(node1.isFor());
135:       assertEquals(40, node1.getType());
136:       assertFalse(node1.isDefaultCase());
137:       assertFalse(node1.isSetterDef());
138:       assertFalse(node1.isCatch());
139:       assertFalse(node1.isIn());
140:       assertFalse(node1.isDelProp());
141:       assertFalse(node1.isNull());
142:       assertFalse(node1.isTrue());
143:       assertFalse(node1.isVoid());
144:       assertFalse(node1.isNE());
145:       assertFalse(node1.isName());
146:       assertFalse(node1.isIf());
147:       assertFalse(node1.isAdd());
148:       assertFalse(node1.isHook());
149:       assertFalse(node1.isNew());
150:       assertFalse(node1.isBlock());
151:       assertEquals((-1), node1.getCharno());
152:       assertFalse(node1.isDo());
153:       assertFalse(node1.isCase());
154:       assertFalse(node1.isThis());
155:       assertFalse(node1.isVar());
156:       assertTrue(node1.isString());
157:       assertEquals(0, node1.getChildCount());
158:       assertFalse(node1.isLabel());
159:       assertFalse(node1.isNumber());
160:       assertFalse(node1.isGetterDef());
161:       assertFalse(node1.isLabelName());
162:       assertFalse(node1.isParamList());
163:       assertFalse(node1.isStringKey());
164:       assertFalse(node1.isSwitch());
165:       assertFalse(node1.hasOneChild());
166:       assertFalse(node1.isExprResult());
167:       assertFalse(node1.isCast());
168:       assertFalse(node1.isScript());
169:       assertFalse(node1.isWith());
170:       assertFalse(node1.isAssign());
171:       assertFalse(node1.isDec());
172:       assertFalse(node1.hasChildren());
173:       assertFalse(node1.isAssignAdd());
174:       assertFalse(node1.isReturn());
175:       assertEquals((-1), node1.getLineno());
176:       assertFalse(node1.isOr());
177:       assertFalse(node1.isComma());
178:       assertFalse(node1.hasMoreThanOneChild());
179:       assertFalse(node1.isTypeOf());
180:       assertFalse(node1.isInstanceOf());
181:       assertFalse(node1.isGetElem());
182:       assertFalse(node1.isBreak());
183:       assertFalse(node1.isInc());
184:       assertFalse(node1.isCall());
185:       assertFalse(node1.isFalse());
186:       assertFalse(node1.isWhile());
187:       assertFalse(node1.isThrow());
188:       assertFalse(node1.isGetProp());
189:       assertFalse(node1.isObjectLit());
190:       assertFalse(node1.isContinue());
191:       assertFalse(node1.isNot());
192:       assertEquals((-1), node1.getSourcePosition());
193:       assertFalse(node1.isAnd());
194:       assertEquals(55, Node.INFERRED_FUNCTION);
195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(8, Node.FLAG_NO_THROWS);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(50, Node.FREE_CALL);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(57, Node.REFLECTED_OBJECT);
204:       assertEquals(56, Node.CHANGE_TIME);
205:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
206:       assertEquals(48, Node.DIRECTIVES);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(37, Node.OPT_ARG_NAME);
209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
211:       assertEquals(4095, Node.COLUMN_MASK);
212:       assertEquals(12, Node.COLUMN_BITS);
213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
214:       assertEquals(1, Node.DECR_FLAG);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(46, Node.IS_NAMESPACE);
218:       assertEquals(57, Node.LAST_PROP);
219:       assertEquals(54, Node.SLASH_V);
220:       assertEquals(15, Node.NO_SIDE_EFFECTS);
221:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
222:       assertEquals(52, Node.LENGTH);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
225:       assertEquals(40, Node.ORIGINALNAME_PROP);
226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(47, Node.IS_DISPATCHER);
229:       assertEquals(30, Node.VAR_ARGS_NAME);
230:       assertFalse(node1.equals((Object)node0));
231:       
232:       Node node2 = Node.newNumber((double) 1, 16, 40);
233:       assertNotNull(node2);
234:       assertFalse(node2.isVar());
235:       assertFalse(node2.isCall());
236:       assertFalse(node2.isStringKey());
237:       assertFalse(node2.isAdd());
238:       assertFalse(node2.isName());
239:       assertEquals(16, node2.getLineno());
240:       assertFalse(node2.isNew());
241:       assertFalse(node2.isWhile());
242:       assertEquals(39, node2.getType());
243:       assertFalse(node2.isBlock());
244:       assertEquals(0, node2.getChildCount());
245:       assertFalse(node2.isContinue());
246:       assertFalse(node2.isParamList());
247:       assertFalse(node2.isDebugger());
248:       assertFalse(node2.isCast());
249:       assertFalse(node2.isTry());
250:       assertFalse(node2.hasOneChild());
251:       assertFalse(node2.isRegExp());
252:       assertFalse(node2.isFunction());
253:       assertFalse(node2.isFor());
254:       assertFalse(node2.isWith());
255:       assertFalse(node2.hasMoreThanOneChild());
256:       assertFalse(node2.isIn());
257:       assertFalse(node2.isCatch());
258:       assertFalse(node2.isInstanceOf());
259:       assertFalse(node2.isNE());
260:       assertFalse(node2.isInc());
261:       assertFalse(node2.isSetterDef());
262:       assertFalse(node2.isIf());
263:       assertFalse(node2.isHook());
264:       assertEquals(65576, node2.getSourcePosition());
265:       assertFalse(node2.isThrow());
266:       assertFalse(node2.isBreak());
267:       assertFalse(node2.isThis());
268:       assertFalse(node2.isFalse());
269:       assertFalse(node2.isComma());
270:       assertEquals(40, node2.getCharno());
271:       assertFalse(node2.isAnd());
272:       assertFalse(node2.isCase());
273:       assertFalse(node2.isGetProp());
274:       assertTrue(node2.isNumber());
275:       assertFalse(node2.isScript());
276:       assertFalse(node2.isSwitch());
277:       assertFalse(node2.isString());
278:       assertFalse(node2.isNot());
279:       assertFalse(node2.isObjectLit());
280:       assertFalse(node2.isGetterDef());
281:       assertFalse(node2.isArrayLit());
282:       assertFalse(node2.isEmpty());
283:       assertFalse(node2.isLabelName());
284:       assertFalse(node2.isGetElem());
285:       assertFalse(node2.isDelProp());
286:       assertFalse(node2.isVoid());
287:       assertFalse(node2.isTypeOf());
288:       assertFalse(node2.isDefaultCase());
289:       assertFalse(node2.isExprResult());
290:       assertFalse(node2.isAssign());
291:       assertFalse(node2.isLabel());
292:       assertFalse(node2.isReturn());
293:       assertFalse(node2.hasChildren());
294:       assertFalse(node2.isDec());
295:       assertFalse(node2.isDo());
296:       assertFalse(node2.isAssignAdd());
297:       assertFalse(node2.isNull());
298:       assertFalse(node2.isTrue());
299:       assertFalse(node2.isOr());
300:       assertNotSame(node2, node0);
301:       assertEquals(49, Node.DIRECT_EVAL);
302:       assertEquals(12, Node.COLUMN_BITS);
303:       assertEquals(30, Node.VAR_ARGS_NAME);
304:       assertEquals(51, Node.STATIC_SOURCE_FILE);
305:       assertEquals(52, Node.LENGTH);
306:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
309:       assertEquals(57, Node.LAST_PROP);
310:       assertEquals(32, Node.INCRDECR_PROP);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(50, Node.FREE_CALL);
313:       assertEquals(40, Node.ORIGINALNAME_PROP);
314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
315:       assertEquals(2, Node.POST_FLAG);
316:       assertEquals(47, Node.IS_DISPATCHER);
317:       assertEquals(46, Node.IS_NAMESPACE);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
320:       assertEquals(55, Node.INFERRED_FUNCTION);
321:       assertEquals(43, Node.IS_CONSTANT_NAME);
322:       assertEquals(36, Node.QUOTED_PROP);
323:       assertEquals(4095, Node.COLUMN_MASK);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
326:       assertEquals(39, Node.EMPTY_BLOCK);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
330:       assertEquals(56, Node.CHANGE_TIME);
331:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
332:       assertEquals(8, Node.FLAG_NO_THROWS);
333:       assertEquals(57, Node.REFLECTED_OBJECT);
334:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
335:       assertEquals(37, Node.OPT_ARG_NAME);
336:       assertEquals(48, Node.DIRECTIVES);
337:       assertFalse(node2.equals((Object)node1));
338:       assertFalse(node2.equals((Object)node0));
339:       
340:       String string0 = node1.getString();
341:       assertNotNull(string0);
342:       assertFalse(node1.isTry());
343:       assertFalse(node1.isDebugger());
344:       assertFalse(node1.isArrayLit());
345:       assertFalse(node1.isFunction());
346:       assertFalse(node1.isRegExp());
347:       assertFalse(node1.isEmpty());
348:       assertFalse(node1.isFor());
349:       assertEquals(40, node1.getType());
350:       assertFalse(node1.isDefaultCase());
351:       assertFalse(node1.isSetterDef());
352:       assertFalse(node1.isCatch());
353:       assertFalse(node1.isIn());
354:       assertFalse(node1.isDelProp());
355:       assertFalse(node1.isNull());
356:       assertFalse(node1.isTrue());
357:       assertFalse(node1.isVoid());
358:       assertFalse(node1.isNE());
359:       assertFalse(node1.isName());
360:       assertFalse(node1.isIf());
361:       assertFalse(node1.isAdd());
362:       assertFalse(node1.isHook());
363:       assertFalse(node1.isNew());
364:       assertFalse(node1.isBlock());
365:       assertEquals((-1), node1.getCharno());
366:       assertFalse(node1.isDo());
367:       assertFalse(node1.isCase());
368:       assertFalse(node1.isThis());
369:       assertFalse(node1.isVar());
370:       assertTrue(node1.isString());
371:       assertEquals(0, node1.getChildCount());
372:       assertFalse(node1.isLabel());
373:       assertFalse(node1.isNumber());
374:       assertFalse(node1.isGetterDef());
375:       assertFalse(node1.isLabelName());
376:       assertFalse(node1.isParamList());
377:       assertFalse(node1.isStringKey());
378:       assertFalse(node1.isSwitch());
379:       assertFalse(node1.hasOneChild());
380:       assertFalse(node1.isExprResult());
381:       assertFalse(node1.isCast());
382:       assertFalse(node1.isScript());
383:       assertFalse(node1.isWith());
384:       assertFalse(node1.isAssign());
385:       assertFalse(node1.isDec());
386:       assertFalse(node1.hasChildren());
387:       assertFalse(node1.isAssignAdd());
388:       assertFalse(node1.isReturn());
389:       assertEquals((-1), node1.getLineno());
390:       assertFalse(node1.isOr());
391:       assertFalse(node1.isComma());
392:       assertFalse(node1.hasMoreThanOneChild());
393:       assertFalse(node1.isTypeOf());
394:       assertFalse(node1.isInstanceOf());
395:       assertFalse(node1.isGetElem());
396:       assertFalse(node1.isBreak());
397:       assertFalse(node1.isInc());
398:       assertFalse(node1.isCall());
399:       assertFalse(node1.isFalse());
400:       assertFalse(node1.isWhile());
401:       assertFalse(node1.isThrow());
402:       assertFalse(node1.isGetProp());
403:       assertFalse(node1.isObjectLit());
404:       assertFalse(node1.isContinue());
405:       assertFalse(node1.isNot());
406:       assertEquals((-1), node1.getSourcePosition());
407:       assertFalse(node1.isAnd());
408:       assertEquals(",p3nXQIp6SV$l0XU'", string0);
409:       assertEquals(55, Node.INFERRED_FUNCTION);
410:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
411:       assertEquals(43, Node.IS_CONSTANT_NAME);
412:       assertEquals(8, Node.FLAG_NO_THROWS);
413:       assertEquals(39, Node.EMPTY_BLOCK);
414:       assertEquals(36, Node.QUOTED_PROP);
415:       assertEquals(53, Node.INPUT_ID);
416:       assertEquals(50, Node.FREE_CALL);
417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
418:       assertEquals(57, Node.REFLECTED_OBJECT);
419:       assertEquals(56, Node.CHANGE_TIME);
420:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
421:       assertEquals(48, Node.DIRECTIVES);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(37, Node.OPT_ARG_NAME);
424:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
426:       assertEquals(4095, Node.COLUMN_MASK);
427:       assertEquals(12, Node.COLUMN_BITS);
428:       assertEquals(51, Node.STATIC_SOURCE_FILE);
429:       assertEquals(1, Node.DECR_FLAG);
430:       assertEquals(49, Node.DIRECT_EVAL);
431:       assertEquals(32, Node.INCRDECR_PROP);
432:       assertEquals(46, Node.IS_NAMESPACE);
433:       assertEquals(57, Node.LAST_PROP);
434:       assertEquals(54, Node.SLASH_V);
435:       assertEquals(15, Node.NO_SIDE_EFFECTS);
436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
437:       assertEquals(52, Node.LENGTH);
438:       assertEquals(29, Node.JSDOC_INFO_PROP);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       assertEquals(2, Node.POST_FLAG);
443:       assertEquals(47, Node.IS_DISPATCHER);
444:       assertEquals(30, Node.VAR_ARGS_NAME);
445:       assertFalse(node1.equals((Object)node2));
446:       assertFalse(node1.equals((Object)node0));
447:       
448:       Node node3 = node0.srcref(node2);
449:       assertNotNull(node3);
450:       assertFalse(node0.isStringKey());
451:       assertFalse(node0.isVar());
452:       assertFalse(node0.isCall());
453:       assertFalse(node0.isNew());
454:       assertEquals(16, node0.getLineno());
455:       assertFalse(node0.isSetterDef());
456:       assertFalse(node0.isAdd());
457:       assertFalse(node0.isBlock());
458:       assertFalse(node0.isWhile());
459:       assertFalse(node0.isDo());
460:       assertFalse(node0.isContinue());
461:       assertEquals(0, node0.getChildCount());
462:       assertFalse(node0.isFunction());
463:       assertFalse(node0.isDebugger());
464:       assertFalse(node0.isParamList());
465:       assertFalse(node0.isArrayLit());
466:       assertFalse(node0.isLabelName());
467:       assertFalse(node0.isGetElem());
468:       assertFalse(node0.isEmpty());
469:       assertFalse(node0.isDec());
470:       assertFalse(node0.hasChildren());
471:       assertFalse(node0.isAssign());
472:       assertFalse(node0.isTypeOf());
473:       assertFalse(node0.isLabel());
474:       assertFalse(node0.isAssignAdd());
475:       assertFalse(node0.isReturn());
476:       assertFalse(node0.isDefaultCase());
477:       assertTrue(node0.isNumber());
478:       assertFalse(node0.isOr());
479:       assertFalse(node0.isExprResult());
480:       assertFalse(node0.isTrue());
481:       assertFalse(node0.isNull());
482:       assertFalse(node0.isBreak());
483:       assertFalse(node0.isDelProp());
484:       assertFalse(node0.isVoid());
485:       assertFalse(node0.isName());
486:       assertFalse(node0.isFalse());
487:       assertFalse(node0.isThrow());
488:       assertEquals(65576, node0.getSourcePosition());
489:       assertFalse(node0.isHook());
490:       assertFalse(node0.isComma());
491:       assertFalse(node0.isGetProp());
492:       assertFalse(node0.isInc());
493:       assertFalse(node0.isThis());
494:       assertFalse(node0.isAnd());
495:       assertFalse(node0.isCase());
496:       assertEquals(40, node0.getCharno());
497:       assertFalse(node0.isString());
498:       assertFalse(node0.isNot());
499:       assertFalse(node0.isObjectLit());
500:       assertFalse(node0.isSwitch());
501:       assertFalse(node0.isCast());
502:       assertFalse(node0.isFor());
503:       assertFalse(node0.isGetterDef());
504:       assertFalse(node0.isScript());
505:       assertFalse(node0.hasOneChild());
506:       assertFalse(node0.isTry());
507:       assertEquals(39, node0.getType());
508:       assertFalse(node0.isCatch());
509:       assertFalse(node0.isIn());
510:       assertFalse(node0.isInstanceOf());
511:       assertFalse(node0.hasMoreThanOneChild());
512:       assertFalse(node0.isWith());
513:       assertFalse(node0.isRegExp());
514:       assertFalse(node0.isNE());
515:       assertFalse(node0.isIf());
516:       assertFalse(node2.isVar());
517:       assertFalse(node2.isCall());
518:       assertFalse(node2.isStringKey());
519:       assertFalse(node2.isAdd());
520:       assertFalse(node2.isName());
521:       assertEquals(16, node2.getLineno());
522:       assertFalse(node2.isNew());
523:       assertFalse(node2.isWhile());
524:       assertEquals(39, node2.getType());
525:       assertFalse(node2.isBlock());
526:       assertEquals(0, node2.getChildCount());
527:       assertFalse(node2.isContinue());
528:       assertFalse(node2.isParamList());
529:       assertFalse(node2.isDebugger());
530:       assertFalse(node2.isCast());
531:       assertFalse(node2.isTry());
532:       assertFalse(node2.hasOneChild());
533:       assertFalse(node2.isRegExp());
534:       assertFalse(node2.isFunction());
535:       assertFalse(node2.isFor());
536:       assertFalse(node2.isWith());
537:       assertFalse(node2.hasMoreThanOneChild());
538:       assertFalse(node2.isIn());
539:       assertFalse(node2.isCatch());
540:       assertFalse(node2.isInstanceOf());
541:       assertFalse(node2.isNE());
542:       assertFalse(node2.isInc());
543:       assertFalse(node2.isSetterDef());
544:       assertFalse(node2.isIf());
545:       assertFalse(node2.isHook());
546:       assertEquals(65576, node2.getSourcePosition());
547:       assertFalse(node2.isThrow());
548:       assertFalse(node2.isBreak());
549:       assertFalse(node2.isThis());
550:       assertFalse(node2.isFalse());
551:       assertFalse(node2.isComma());
552:       assertEquals(40, node2.getCharno());
553:       assertFalse(node2.isAnd());
554:       assertFalse(node2.isCase());
555:       assertFalse(node2.isGetProp());
556:       assertTrue(node2.isNumber());
557:       assertFalse(node2.isScript());
558:       assertFalse(node2.isSwitch());
559:       assertFalse(node2.isString());
560:       assertFalse(node2.isNot());
561:       assertFalse(node2.isObjectLit());
562:       assertFalse(node2.isGetterDef());
563:       assertFalse(node2.isArrayLit());
564:       assertFalse(node2.isEmpty());
565:       assertFalse(node2.isLabelName());
566:       assertFalse(node2.isGetElem());
567:       assertFalse(node2.isDelProp());
568:       assertFalse(node2.isVoid());
569:       assertFalse(node2.isTypeOf());
570:       assertFalse(node2.isDefaultCase());
571:       assertFalse(node2.isExprResult());
572:       assertFalse(node2.isAssign());
573:       assertFalse(node2.isLabel());
574:       assertFalse(node2.isReturn());
575:       assertFalse(node2.hasChildren());
576:       assertFalse(node2.isDec());
577:       assertFalse(node2.isDo());
578:       assertFalse(node2.isAssignAdd());
579:       assertFalse(node2.isNull());
580:       assertFalse(node2.isTrue());
581:       assertFalse(node2.isOr());
582:       assertFalse(node3.isCatch());
583:       assertFalse(node3.isDebugger());
584:       assertEquals(0, node3.getChildCount());
585:       assertFalse(node3.isFunction());
586:       assertFalse(node3.isRegExp());
587:       assertFalse(node3.isTry());
588:       assertFalse(node3.isSetterDef());
589:       assertFalse(node3.isDefaultCase());
590:       assertFalse(node3.isStringKey());
591:       assertFalse(node3.isGetterDef());
592:       assertFalse(node3.isParamList());
593:       assertFalse(node3.isArrayLit());
594:       assertFalse(node3.isDo());
595:       assertFalse(node3.isString());
596:       assertFalse(node3.isWhile());
597:       assertEquals(40, node3.getCharno());
598:       assertFalse(node3.isAdd());
599:       assertFalse(node3.isLabel());
600:       assertFalse(node3.isAssignAdd());
601:       assertFalse(node3.isNew());
602:       assertTrue(node3.isNumber());
603:       assertFalse(node3.isReturn());
604:       assertFalse(node3.isVar());
605:       assertFalse(node3.isEmpty());
606:       assertFalse(node3.isAssign());
607:       assertFalse(node3.isBreak());
608:       assertFalse(node3.hasChildren());
609:       assertFalse(node3.isGetElem());
610:       assertFalse(node3.isCall());
611:       assertFalse(node3.isNull());
612:       assertFalse(node3.isComma());
613:       assertFalse(node3.isDec());
614:       assertFalse(node3.isTypeOf());
615:       assertFalse(node3.isOr());
616:       assertEquals(65576, node3.getSourcePosition());
617:       assertFalse(node3.isExprResult());
618:       assertFalse(node3.isTrue());
619:       assertFalse(node3.isDelProp());
620:       assertFalse(node3.isVoid());
621:       assertFalse(node3.isName());
622:       assertFalse(node3.isNot());
623:       assertFalse(node3.isWith());
624:       assertFalse(node3.isScript());
625:       assertFalse(node3.isInstanceOf());
626:       assertFalse(node3.isObjectLit());
627:       assertFalse(node3.isGetProp());
628:       assertFalse(node3.isThis());
629:       assertFalse(node3.hasOneChild());
630:       assertFalse(node3.isLabelName());
631:       assertFalse(node3.isThrow());
632:       assertFalse(node3.isCast());
633:       assertFalse(node3.isFalse());
634:       assertFalse(node3.isSwitch());
635:       assertFalse(node3.isAnd());
636:       assertEquals(39, node3.getType());
637:       assertFalse(node3.isCase());
638:       assertFalse(node3.hasMoreThanOneChild());
639:       assertFalse(node3.isIn());
640:       assertFalse(node3.isContinue());
641:       assertEquals(16, node3.getLineno());
642:       assertFalse(node3.isHook());
643:       assertFalse(node3.isInc());
644:       assertFalse(node3.isBlock());
645:       assertFalse(node3.isFor());
646:       assertFalse(node3.isNE());
647:       assertFalse(node3.isIf());
648:       assertNotSame(node0, node2);
649:       assertSame(node0, node3);
650:       assertNotSame(node2, node3);
651:       assertNotSame(node2, node0);
652:       assertNotSame(node3, node2);
653:       assertSame(node3, node0);
654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
655:       assertEquals(57, Node.LAST_PROP);
656:       assertEquals(54, Node.SLASH_V);
657:       assertEquals(1, Node.DECR_FLAG);
658:       assertEquals(49, Node.DIRECT_EVAL);
659:       assertEquals(57, Node.REFLECTED_OBJECT);
660:       assertEquals(51, Node.STATIC_SOURCE_FILE);
661:       assertEquals(46, Node.IS_NAMESPACE);
662:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
663:       assertEquals(52, Node.LENGTH);
664:       assertEquals(50, Node.FREE_CALL);
665:       assertEquals(47, Node.IS_DISPATCHER);
666:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
667:       assertEquals(39, Node.EMPTY_BLOCK);
668:       assertEquals(29, Node.JSDOC_INFO_PROP);
669:       assertEquals(40, Node.ORIGINALNAME_PROP);
670:       assertEquals(2, Node.POST_FLAG);
671:       assertEquals(30, Node.VAR_ARGS_NAME);
672:       assertEquals(43, Node.IS_CONSTANT_NAME);
673:       assertEquals(36, Node.QUOTED_PROP);
674:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
675:       assertEquals(55, Node.INFERRED_FUNCTION);
676:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
677:       assertEquals(53, Node.INPUT_ID);
678:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
679:       assertEquals(8, Node.FLAG_NO_THROWS);
680:       assertEquals(56, Node.CHANGE_TIME);
681:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
682:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
683:       assertEquals(48, Node.DIRECTIVES);
684:       assertEquals(37, Node.OPT_ARG_NAME);
685:       assertEquals(32, Node.INCRDECR_PROP);
686:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
687:       assertEquals(4095, Node.COLUMN_MASK);
688:       assertEquals(12, Node.COLUMN_BITS);
689:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
690:       assertEquals(49, Node.DIRECT_EVAL);
691:       assertEquals(12, Node.COLUMN_BITS);
692:       assertEquals(30, Node.VAR_ARGS_NAME);
693:       assertEquals(51, Node.STATIC_SOURCE_FILE);
694:       assertEquals(52, Node.LENGTH);
695:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
696:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
697:       assertEquals(15, Node.NO_SIDE_EFFECTS);
698:       assertEquals(57, Node.LAST_PROP);
699:       assertEquals(32, Node.INCRDECR_PROP);
700:       assertEquals(1, Node.DECR_FLAG);
701:       assertEquals(50, Node.FREE_CALL);
702:       assertEquals(40, Node.ORIGINALNAME_PROP);
703:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
704:       assertEquals(2, Node.POST_FLAG);
705:       assertEquals(47, Node.IS_DISPATCHER);
706:       assertEquals(46, Node.IS_NAMESPACE);
707:       assertEquals(54, Node.SLASH_V);
708:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
709:       assertEquals(55, Node.INFERRED_FUNCTION);
710:       assertEquals(43, Node.IS_CONSTANT_NAME);
711:       assertEquals(36, Node.QUOTED_PROP);
712:       assertEquals(4095, Node.COLUMN_MASK);
713:       assertEquals(53, Node.INPUT_ID);
714:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
715:       assertEquals(39, Node.EMPTY_BLOCK);
716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
717:       assertEquals(29, Node.JSDOC_INFO_PROP);
718:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
719:       assertEquals(56, Node.CHANGE_TIME);
720:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
721:       assertEquals(8, Node.FLAG_NO_THROWS);
722:       assertEquals(57, Node.REFLECTED_OBJECT);
723:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
724:       assertEquals(37, Node.OPT_ARG_NAME);
725:       assertEquals(48, Node.DIRECTIVES);
726:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
727:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
728:       assertEquals(39, Node.EMPTY_BLOCK);
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(55, Node.INFERRED_FUNCTION);
731:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
732:       assertEquals(57, Node.REFLECTED_OBJECT);
733:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
734:       assertEquals(52, Node.LENGTH);
735:       assertEquals(50, Node.FREE_CALL);
736:       assertEquals(8, Node.FLAG_NO_THROWS);
737:       assertEquals(43, Node.IS_CONSTANT_NAME);
738:       assertEquals(54, Node.SLASH_V);
739:       assertEquals(15, Node.NO_SIDE_EFFECTS);
740:       assertEquals(53, Node.INPUT_ID);
741:       assertEquals(57, Node.LAST_PROP);
742:       assertEquals(40, Node.ORIGINALNAME_PROP);
743:       assertEquals(30, Node.VAR_ARGS_NAME);
744:       assertEquals(2, Node.POST_FLAG);
745:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
746:       assertEquals(37, Node.OPT_ARG_NAME);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(47, Node.IS_DISPATCHER);
749:       assertEquals(32, Node.INCRDECR_PROP);
750:       assertEquals(51, Node.STATIC_SOURCE_FILE);
751:       assertEquals(46, Node.IS_NAMESPACE);
752:       assertEquals(29, Node.JSDOC_INFO_PROP);
753:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
754:       assertEquals(36, Node.QUOTED_PROP);
755:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
756:       assertEquals(49, Node.DIRECT_EVAL);
757:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
758:       assertEquals(1, Node.DECR_FLAG);
759:       assertEquals(12, Node.COLUMN_BITS);
760:       assertEquals(4095, Node.COLUMN_MASK);
761:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
762:       assertFalse(node0.equals((Object)node2));
763:       assertFalse(node0.equals((Object)node1));
764:       assertFalse(node2.equals((Object)node1));
765:       assertFalse(node2.equals((Object)node0));
766:       assertFalse(node3.equals((Object)node2));
767:       assertFalse(node3.equals((Object)node1));
768:       
769:       Iterable<Node> iterable0 = node2.children();
770:       assertNotNull(iterable0);
771:       assertFalse(node2.isVar());
772:       assertFalse(node2.isCall());
773:       assertFalse(node2.isStringKey());
774:       assertFalse(node2.isAdd());
775:       assertFalse(node2.isName());
776:       assertEquals(16, node2.getLineno());
777:       assertFalse(node2.isNew());
778:       assertFalse(node2.isWhile());
779:       assertEquals(39, node2.getType());
780:       assertFalse(node2.isBlock());
781:       assertEquals(0, node2.getChildCount());
782:       assertFalse(node2.isContinue());
783:       assertFalse(node2.isParamList());
784:       assertFalse(node2.isDebugger());
785:       assertFalse(node2.isCast());
786:       assertFalse(node2.isTry());
787:       assertFalse(node2.hasOneChild());
788:       assertFalse(node2.isRegExp());
789:       assertFalse(node2.isFunction());
790:       assertFalse(node2.isFor());
791:       assertFalse(node2.isWith());
792:       assertFalse(node2.hasMoreThanOneChild());
793:       assertFalse(node2.isIn());
794:       assertFalse(node2.isCatch());
795:       assertFalse(node2.isInstanceOf());
796:       assertFalse(node2.isNE());
797:       assertFalse(node2.isInc());
798:       assertFalse(node2.isSetterDef());
799:       assertFalse(node2.isIf());
800:       assertFalse(node2.isHook());
801:       assertEquals(65576, node2.getSourcePosition());
802:       assertFalse(node2.isThrow());
803:       assertFalse(node2.isBreak());
804:       assertFalse(node2.isThis());
805:       assertFalse(node2.isFalse());
806:       assertFalse(node2.isComma());
807:       assertEquals(40, node2.getCharno());
808:       assertFalse(node2.isAnd());
809:       assertFalse(node2.isCase());
810:       assertFalse(node2.isGetProp());
811:       assertTrue(node2.isNumber());
812:       assertFalse(node2.isScript());
813:       assertFalse(node2.isSwitch());
814:       assertFalse(node2.isString());
815:       assertFalse(node2.isNot());
816:       assertFalse(node2.isObjectLit());
817:       assertFalse(node2.isGetterDef());
818:       assertFalse(node2.isArrayLit());
819:       assertFalse(node2.isEmpty());
820:       assertFalse(node2.isLabelName());
821:       assertFalse(node2.isGetElem());
822:       assertFalse(node2.isDelProp());
823:       assertFalse(node2.isVoid());
824:       assertFalse(node2.isTypeOf());
825:       assertFalse(node2.isDefaultCase());
826:       assertFalse(node2.isExprResult());
827:       assertFalse(node2.isAssign());
828:       assertFalse(node2.isLabel());
829:       assertFalse(node2.isReturn());
830:       assertFalse(node2.hasChildren());
831:       assertFalse(node2.isDec());
832:       assertFalse(node2.isDo());
833:       assertFalse(node2.isAssignAdd());
834:       assertFalse(node2.isNull());
835:       assertFalse(node2.isTrue());
836:       assertFalse(node2.isOr());
837:       assertNotSame(node2, node3);
838:       assertNotSame(node2, node0);
839:       assertEquals(49, Node.DIRECT_EVAL);
840:       assertEquals(12, Node.COLUMN_BITS);
841:       assertEquals(30, Node.VAR_ARGS_NAME);
842:       assertEquals(51, Node.STATIC_SOURCE_FILE);
843:       assertEquals(52, Node.LENGTH);
844:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
845:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
846:       assertEquals(15, Node.NO_SIDE_EFFECTS);
847:       assertEquals(57, Node.LAST_PROP);
848:       assertEquals(32, Node.INCRDECR_PROP);
849:       assertEquals(1, Node.DECR_FLAG);
850:       assertEquals(50, Node.FREE_CALL);
851:       assertEquals(40, Node.ORIGINALNAME_PROP);
852:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
853:       assertEquals(2, Node.POST_FLAG);
854:       assertEquals(47, Node.IS_DISPATCHER);
855:       assertEquals(46, Node.IS_NAMESPACE);
856:       assertEquals(54, Node.SLASH_V);
857:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
858:       assertEquals(55, Node.INFERRED_FUNCTION);
859:       assertEquals(43, Node.IS_CONSTANT_NAME);
860:       assertEquals(36, Node.QUOTED_PROP);
861:       assertEquals(4095, Node.COLUMN_MASK);
862:       assertEquals(53, Node.INPUT_ID);
863:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
864:       assertEquals(39, Node.EMPTY_BLOCK);
865:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
866:       assertEquals(29, Node.JSDOC_INFO_PROP);
867:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
868:       assertEquals(56, Node.CHANGE_TIME);
869:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
870:       assertEquals(8, Node.FLAG_NO_THROWS);
871:       assertEquals(57, Node.REFLECTED_OBJECT);
872:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
873:       assertEquals(37, Node.OPT_ARG_NAME);
874:       assertEquals(48, Node.DIRECTIVES);
875:       assertFalse(iterable0.contains(node1));
876:       assertFalse(node2.equals((Object)node1));
877:       assertFalse(node2.equals((Object)node3));
878:       assertFalse(node2.equals((Object)node0));
879:       
880:       boolean boolean0 = node0.isLabelName();
881:       assertFalse(node0.isStringKey());
882:       assertFalse(node0.isVar());
883:       assertFalse(node0.isCall());
884:       assertFalse(node0.isNew());
885:       assertEquals(16, node0.getLineno());
886:       assertFalse(node0.isSetterDef());
887:       assertFalse(node0.isAdd());
888:       assertFalse(node0.isBlock());
889:       assertFalse(node0.isWhile());
890:       assertFalse(node0.isDo());
891:       assertFalse(node0.isContinue());
892:       assertEquals(0, node0.getChildCount());
893:       assertFalse(node0.isFunction());
894:       assertFalse(node0.isDebugger());
895:       assertFalse(node0.isParamList());
896:       assertFalse(node0.isArrayLit());
897:       assertFalse(node0.isLabelName());
898:       assertFalse(node0.isGetElem());
899:       assertFalse(node0.isEmpty());
900:       assertFalse(node0.isDec());
901:       assertFalse(node0.hasChildren());
902:       assertFalse(node0.isAssign());
903:       assertFalse(node0.isTypeOf());
904:       assertFalse(node0.isLabel());
905:       assertFalse(node0.isAssignAdd());
906:       assertFalse(node0.isReturn());
907:       assertFalse(node0.isDefaultCase());
908:       assertTrue(node0.isNumber());
909:       assertFalse(node0.isOr());
910:       assertFalse(node0.isExprResult());
911:       assertFalse(node0.isTrue());
912:       assertFalse(node0.isNull());
913:       assertFalse(node0.isBreak());
914:       assertFalse(node0.isDelProp());
915:       assertFalse(node0.isVoid());
916:       assertFalse(node0.isName());
917:       assertFalse(node0.isFalse());
918:       assertFalse(node0.isThrow());
919:       assertEquals(65576, node0.getSourcePosition());
920:       assertFalse(node0.isHook());
921:       assertFalse(node0.isComma());
922:       assertFalse(node0.isGetProp());
923:       assertFalse(node0.isInc());
924:       assertFalse(node0.isThis());
925:       assertFalse(node0.isAnd());
926:       assertFalse(node0.isCase());
927:       assertEquals(40, node0.getCharno());
928:       assertFalse(node0.isString());
929:       assertFalse(node0.isNot());
930:       assertFalse(node0.isObjectLit());
931:       assertFalse(node0.isSwitch());
932:       assertFalse(node0.isCast());
933:       assertFalse(node0.isFor());
934:       assertFalse(node0.isGetterDef());
935:       assertFalse(node0.isScript());
936:       assertFalse(node0.hasOneChild());
937:       assertFalse(node0.isTry());
938:       assertEquals(39, node0.getType());
939:       assertFalse(node0.isCatch());
940:       assertFalse(node0.isIn());
941:       assertFalse(node0.isInstanceOf());
942:       assertFalse(node0.hasMoreThanOneChild());
943:       assertFalse(node0.isWith());
944:       assertFalse(node0.isRegExp());
945:       assertFalse(node0.isNE());
946:       assertFalse(node0.isIf());
947:       assertFalse(boolean0);
948:       assertNotSame(node0, node2);
949:       assertSame(node0, node3);
950:       assertEquals(15, Node.NO_SIDE_EFFECTS);
951:       assertEquals(57, Node.LAST_PROP);
952:       assertEquals(54, Node.SLASH_V);
953:       assertEquals(1, Node.DECR_FLAG);
954:       assertEquals(49, Node.DIRECT_EVAL);
955:       assertEquals(57, Node.REFLECTED_OBJECT);
956:       assertEquals(51, Node.STATIC_SOURCE_FILE);
957:       assertEquals(46, Node.IS_NAMESPACE);
958:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
959:       assertEquals(52, Node.LENGTH);
960:       assertEquals(50, Node.FREE_CALL);
961:       assertEquals(47, Node.IS_DISPATCHER);
962:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
963:       assertEquals(39, Node.EMPTY_BLOCK);
964:       assertEquals(29, Node.JSDOC_INFO_PROP);
965:       assertEquals(40, Node.ORIGINALNAME_PROP);
966:       assertEquals(2, Node.POST_FLAG);
967:       assertEquals(30, Node.VAR_ARGS_NAME);
968:       assertEquals(43, Node.IS_CONSTANT_NAME);
969:       assertEquals(36, Node.QUOTED_PROP);
970:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
971:       assertEquals(55, Node.INFERRED_FUNCTION);
972:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
973:       assertEquals(53, Node.INPUT_ID);
974:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
975:       assertEquals(8, Node.FLAG_NO_THROWS);
976:       assertEquals(56, Node.CHANGE_TIME);
977:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
978:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
979:       assertEquals(48, Node.DIRECTIVES);
980:       assertEquals(37, Node.OPT_ARG_NAME);
981:       assertEquals(32, Node.INCRDECR_PROP);
982:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
983:       assertEquals(4095, Node.COLUMN_MASK);
984:       assertEquals(12, Node.COLUMN_BITS);
985:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
986:       assertFalse(node0.equals((Object)node2));
987:       assertFalse(node0.equals((Object)node1));
988:       
989:       boolean boolean1 = node2.isString();
990:       assertFalse(node2.isVar());
991:       assertFalse(node2.isCall());
992:       assertFalse(node2.isStringKey());
993:       assertFalse(node2.isAdd());
994:       assertFalse(node2.isName());
995:       assertEquals(16, node2.getLineno());
996:       assertFalse(node2.isNew());
997:       assertFalse(node2.isWhile());
998:       assertEquals(39, node2.getType());
999:       assertFalse(node2.isBlock());
1000:       assertEquals(0, node2.getChildCount());
1001:       assertFalse(node2.isContinue());
1002:       assertFalse(node2.isParamList());
1003:       assertFalse(node2.isDebugger());
1004:       assertFalse(node2.isCast());
1005:       assertFalse(node2.isTry());
1006:       assertFalse(node2.hasOneChild());
1007:       assertFalse(node2.isRegExp());
1008:       assertFalse(node2.isFunction());
1009:       assertFalse(node2.isFor());
1010:       assertFalse(node2.isWith());
1011:       assertFalse(node2.hasMoreThanOneChild());
1012:       assertFalse(node2.isIn());
1013:       assertFalse(node2.isCatch());
1014:       assertFalse(node2.isInstanceOf());
1015:       assertFalse(node2.isNE());
1016:       assertFalse(node2.isInc());
1017:       assertFalse(node2.isSetterDef());
1018:       assertFalse(node2.isIf());
1019:       assertFalse(node2.isHook());
1020:       assertEquals(65576, node2.getSourcePosition());
1021:       assertFalse(node2.isThrow());
1022:       assertFalse(node2.isBreak());
1023:       assertFalse(node2.isThis());
1024:       assertFalse(node2.isFalse());
1025:       assertFalse(node2.isComma());
1026:       assertEquals(40, node2.getCharno());
1027:       assertFalse(node2.isAnd());
1028:       assertFalse(node2.isCase());
1029:       assertFalse(node2.isGetProp());
1030:       assertTrue(node2.isNumber());
1031:       assertFalse(node2.isScript());
1032:       assertFalse(node2.isSwitch());
1033:       assertFalse(node2.isString());
1034:       assertFalse(node2.isNot());
1035:       assertFalse(node2.isObjectLit());
1036:       assertFalse(node2.isGetterDef());
1037:       assertFalse(node2.isArrayLit());
1038:       assertFalse(node2.isEmpty());
1039:       assertFalse(node2.isLabelName());
1040:       assertFalse(node2.isGetElem());
1041:       assertFalse(node2.isDelProp());
1042:       assertFalse(node2.isVoid());
1043:       assertFalse(node2.isTypeOf());
1044:       assertFalse(node2.isDefaultCase());
1045:       assertFalse(node2.isExprResult());
1046:       assertFalse(node2.isAssign());
1047:       assertFalse(node2.isLabel());
1048:       assertFalse(node2.isReturn());
1049:       assertFalse(node2.hasChildren());
1050:       assertFalse(node2.isDec());
1051:       assertFalse(node2.isDo());
1052:       assertFalse(node2.isAssignAdd());
1053:       assertFalse(node2.isNull());
1054:       assertFalse(node2.isTrue());
1055:       assertFalse(node2.isOr());
1056:       assertFalse(boolean1);
1057:       assertNotSame(node2, node3);
1058:       assertNotSame(node2, node0);
1059:       assertEquals(49, Node.DIRECT_EVAL);
1060:       assertEquals(12, Node.COLUMN_BITS);
1061:       assertEquals(30, Node.VAR_ARGS_NAME);
1062:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1063:       assertEquals(52, Node.LENGTH);
1064:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1065:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1066:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1067:       assertEquals(57, Node.LAST_PROP);
1068:       assertEquals(32, Node.INCRDECR_PROP);
1069:       assertEquals(1, Node.DECR_FLAG);
1070:       assertEquals(50, Node.FREE_CALL);
1071:       assertEquals(40, Node.ORIGINALNAME_PROP);
1072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1073:       assertEquals(2, Node.POST_FLAG);
1074:       assertEquals(47, Node.IS_DISPATCHER);
1075:       assertEquals(46, Node.IS_NAMESPACE);
1076:       assertEquals(54, Node.SLASH_V);
1077:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1078:       assertEquals(55, Node.INFERRED_FUNCTION);
1079:       assertEquals(43, Node.IS_CONSTANT_NAME);
1080:       assertEquals(36, Node.QUOTED_PROP);
1081:       assertEquals(4095, Node.COLUMN_MASK);
1082:       assertEquals(53, Node.INPUT_ID);
1083:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1084:       assertEquals(39, Node.EMPTY_BLOCK);
1085:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1086:       assertEquals(29, Node.JSDOC_INFO_PROP);
1087:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1088:       assertEquals(56, Node.CHANGE_TIME);
1089:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1090:       assertEquals(8, Node.FLAG_NO_THROWS);
1091:       assertEquals(57, Node.REFLECTED_OBJECT);
1092:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1093:       assertEquals(37, Node.OPT_ARG_NAME);
1094:       assertEquals(48, Node.DIRECTIVES);
1095:       assertFalse(node2.equals((Object)node1));
1096:       assertFalse(node2.equals((Object)node3));
1097:       assertFalse(node2.equals((Object)node0));
1098:       assertTrue(boolean1 == boolean0);
1099:       
1100:       boolean boolean2 = node0.isQualifiedName();
1101:       assertFalse(node0.isStringKey());
1102:       assertFalse(node0.isVar());
1103:       assertFalse(node0.isCall());
1104:       assertFalse(node0.isNew());
1105:       assertEquals(16, node0.getLineno());
1106:       assertFalse(node0.isSetterDef());
1107:       assertFalse(node0.isAdd());
1108:       assertFalse(node0.isBlock());
1109:       assertFalse(node0.isWhile());
1110:       assertFalse(node0.isDo());
1111:       assertFalse(node0.isContinue());
1112:       assertEquals(0, node0.getChildCount());
1113:       assertFalse(node0.isFunction());
1114:       assertFalse(node0.isDebugger());
1115:       assertFalse(node0.isParamList());
1116:       assertFalse(node0.isArrayLit());
1117:       assertFalse(node0.isLabelName());
1118:       assertFalse(node0.isGetElem());
1119:       assertFalse(node0.isEmpty());
1120:       assertFalse(node0.isDec());
1121:       assertFalse(node0.hasChildren());
1122:       assertFalse(node0.isAssign());
1123:       assertFalse(node0.isTypeOf());
1124:       assertFalse(node0.isLabel());
1125:       assertFalse(node0.isAssignAdd());
1126:       assertFalse(node0.isReturn());
1127:       assertFalse(node0.isDefaultCase());
1128:       assertTrue(node0.isNumber());
1129:       assertFalse(node0.isOr());
1130:       assertFalse(node0.isExprResult());
1131:       assertFalse(node0.isTrue());
1132:       assertFalse(node0.isNull());
1133:       assertFalse(node0.isBreak());
1134:       assertFalse(node0.isDelProp());
1135:       assertFalse(node0.isVoid());
1136:       assertFalse(node0.isName());
1137:       assertFalse(node0.isFalse());
1138:       assertFalse(node0.isThrow());
1139:       assertEquals(65576, node0.getSourcePosition());
1140:       assertFalse(node0.isHook());
1141:       assertFalse(node0.isComma());
1142:       assertFalse(node0.isGetProp());
1143:       assertFalse(node0.isInc());
1144:       assertFalse(node0.isThis());
1145:       assertFalse(node0.isAnd());
1146:       assertFalse(node0.isCase());
1147:       assertEquals(40, node0.getCharno());
1148:       assertFalse(node0.isString());
1149:       assertFalse(node0.isNot());
1150:       assertFalse(node0.isObjectLit());
1151:       assertFalse(node0.isSwitch());
1152:       assertFalse(node0.isCast());
1153:       assertFalse(node0.isFor());
1154:       assertFalse(node0.isGetterDef());
1155:       assertFalse(node0.isScript());
1156:       assertFalse(node0.hasOneChild());
1157:       assertFalse(node0.isTry());
1158:       assertEquals(39, node0.getType());
1159:       assertFalse(node0.isCatch());
1160:       assertFalse(node0.isIn());
1161:       assertFalse(node0.isInstanceOf());
1162:       assertFalse(node0.hasMoreThanOneChild());
1163:       assertFalse(node0.isWith());
1164:       assertFalse(node0.isRegExp());
1165:       assertFalse(node0.isNE());
1166:       assertFalse(node0.isIf());
1167:       assertFalse(boolean2);
1168:       assertNotSame(node0, node2);
1169:       assertSame(node0, node3);
1170:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1171:       assertEquals(57, Node.LAST_PROP);
1172:       assertEquals(54, Node.SLASH_V);
1173:       assertEquals(1, Node.DECR_FLAG);
1174:       assertEquals(49, Node.DIRECT_EVAL);
1175:       assertEquals(57, Node.REFLECTED_OBJECT);
1176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1177:       assertEquals(46, Node.IS_NAMESPACE);
1178:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1179:       assertEquals(52, Node.LENGTH);
1180:       assertEquals(50, Node.FREE_CALL);
1181:       assertEquals(47, Node.IS_DISPATCHER);
1182:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1183:       assertEquals(39, Node.EMPTY_BLOCK);
1184:       assertEquals(29, Node.JSDOC_INFO_PROP);
1185:       assertEquals(40, Node.ORIGINALNAME_PROP);
1186:       assertEquals(2, Node.POST_FLAG);
1187:       assertEquals(30, Node.VAR_ARGS_NAME);
1188:       assertEquals(43, Node.IS_CONSTANT_NAME);
1189:       assertEquals(36, Node.QUOTED_PROP);
1190:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1191:       assertEquals(55, Node.INFERRED_FUNCTION);
1192:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1193:       assertEquals(53, Node.INPUT_ID);
1194:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1195:       assertEquals(8, Node.FLAG_NO_THROWS);
1196:       assertEquals(56, Node.CHANGE_TIME);
1197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1199:       assertEquals(48, Node.DIRECTIVES);
1200:       assertEquals(37, Node.OPT_ARG_NAME);
1201:       assertEquals(32, Node.INCRDECR_PROP);
1202:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1203:       assertEquals(4095, Node.COLUMN_MASK);
1204:       assertEquals(12, Node.COLUMN_BITS);
1205:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1206:       assertFalse(node0.equals((Object)node2));
1207:       assertFalse(node0.equals((Object)node1));
1208:       assertTrue(boolean2 == boolean1);
1209:       assertTrue(boolean2 == boolean0);
1210:       
1211:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
1212:       assertNotNull(node_SideEffectFlags0);
1213:       assertEquals(47, node_SideEffectFlags0.valueOf());
1214:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1215:       
1216:       // Undeclared exception!
1217:       try { 
1218:         node1.setSideEffectFlags(2);
1219:         fail("Expecting exception: IllegalArgumentException");
1220:       
1221:       } catch(IllegalArgumentException e) {
1222:          //
1223:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
1224:          //
1225:          verifyException("com.google.common.base.Preconditions", e);
1226:       }
1227:   }
1228: }
RegularFileObject[/tmp/EvoSuite_143_1628160724413/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:52:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_143_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_143_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_143_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
268:       "com.google.javascript.rhino.jstype.JSType$1",
269:       "com.google.javascript.rhino.jstype.JSType",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Preconditions",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.javascript.rhino.SimpleErrorReporter",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.base.Objects",
352:       "com.google.common.collect.Sets",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.TemplatizedType",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.Iterators$11",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.jstype.NamespaceType",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 10:52:04.625 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-361.387943));
assertNotNull(node0);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node1 = Node.newString(",p3nXQIp6SV$l0XU'", 5104, (-735));
assertNotNull(node1);
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertTrue(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node0));

Node node2 = Node.newNumber((double) 1, 16, 40);
assertNotNull(node2);
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertEquals(16, node2.getLineno());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isContinue());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isCast());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isHook());
assertEquals(65576, node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertEquals(40, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertNotSame(node2, node0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

String string0 = node1.getString();
assertNotNull(string0);
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertTrue(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals(",p3nXQIp6SV$l0XU'", string0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));

Node node3 = node0.srcref(node2);
assertNotNull(node3);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertEquals(16, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(65576, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertEquals(40, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertEquals(16, node2.getLineno());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isContinue());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isCast());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isHook());
assertEquals(65576, node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertEquals(40, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node3.isCatch());
assertFalse(node3.isDebugger());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDo());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertEquals(40, node3.getCharno());
assertFalse(node3.isAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertTrue(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isVar());
assertFalse(node3.isEmpty());
assertFalse(node3.isAssign());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isOr());
assertEquals(65576, node3.getSourcePosition());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isName());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isSwitch());
assertFalse(node3.isAnd());
assertEquals(39, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertEquals(16, node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertNotSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node2, node3);
assertNotSame(node2, node0);
assertNotSame(node3, node2);
assertSame(node3, node0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

Iterable<Node> iterable0 = node2.children();
assertNotNull(iterable0);
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertEquals(16, node2.getLineno());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isContinue());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isCast());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isHook());
assertEquals(65576, node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertEquals(40, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertNotSame(node2, node3);
assertNotSame(node2, node0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(iterable0.contains(node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));

boolean boolean0 = node0.isLabelName();
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertEquals(16, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(65576, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertEquals(40, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(boolean0);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));

boolean boolean1 = node2.isString();
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertEquals(16, node2.getLineno());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isContinue());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isCast());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isHook());
assertEquals(65576, node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertEquals(40, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(boolean1);
assertNotSame(node2, node3);
assertNotSame(node2, node0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node0.isQualifiedName();
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertEquals(16, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(65576, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertEquals(40, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(boolean2);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
assertNotNull(node_SideEffectFlags0);
assertEquals(47, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

node1.setSideEffectFlags(2);

[MASTER] 10:52:05.159 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_148_1628160725118/com/google/javascript/rhino/Node_148_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_148_1628160725118/com/google/javascript/rhino/Node_148_tmp__ESTest_scaffolding.java]]
[MASTER] 10:52:05.159 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:05.159 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:05.160 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 334
[MASTER] 10:52:05.161 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_148_1628160725118/com/google/javascript/rhino/Node_148_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:52:05 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_148_tmp__ESTest extends Node_148_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(427);
21:       assertNotNull(node0);
22:       assertFalse(node0.isNE());
23:       assertFalse(node0.isEmpty());
24:       assertFalse(node0.isIn());
25:       assertFalse(node0.isGetterDef());
26:       assertFalse(node0.isArrayLit());
27:       assertFalse(node0.isVoid());
28:       assertFalse(node0.isIf());
29:       assertFalse(node0.isDelProp());
30:       assertFalse(node0.isSwitch());
31:       assertFalse(node0.isDebugger());
32:       assertEquals((-1), node0.getCharno());
33:       assertFalse(node0.isString());
34:       assertFalse(node0.isRegExp());
35:       assertFalse(node0.isHook());
36:       assertFalse(node0.isFor());
37:       assertFalse(node0.isTry());
38:       assertFalse(node0.isCase());
39:       assertFalse(node0.isSetterDef());
40:       assertFalse(node0.isGetProp());
41:       assertFalse(node0.isThis());
42:       assertFalse(node0.isFalse());
43:       assertFalse(node0.isCatch());
44:       assertFalse(node0.isAnd());
45:       assertFalse(node0.isInstanceOf());
46:       assertFalse(node0.isInc());
47:       assertFalse(node0.isContinue());
48:       assertFalse(node0.isFunction());
49:       assertFalse(node0.isThrow());
50:       assertEquals((-1), node0.getSourcePosition());
51:       assertFalse(node0.hasChildren());
52:       assertFalse(node0.isAssign());
53:       assertFalse(node0.isLabel());
54:       assertFalse(node0.isOr());
55:       assertFalse(node0.isDec());
56:       assertFalse(node0.isTypeOf());
57:       assertFalse(node0.isNumber());
58:       assertFalse(node0.isCast());
59:       assertFalse(node0.hasMoreThanOneChild());
60:       assertFalse(node0.isGetElem());
61:       assertFalse(node0.isLabelName());
62:       assertEquals((-1), node0.getLineno());
63:       assertFalse(node0.isExprResult());
64:       assertFalse(node0.isScript());
65:       assertFalse(node0.isBlock());
66:       assertFalse(node0.isNot());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isObjectLit());
69:       assertEquals(427, node0.getType());
70:       assertFalse(node0.hasOneChild());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isWhile());
73:       assertFalse(node0.isComma());
74:       assertFalse(node0.isParamList());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isNull());
77:       assertEquals(0, node0.getChildCount());
78:       assertFalse(node0.isStringKey());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isName());
81:       assertFalse(node0.isTrue());
82:       assertFalse(node0.isAdd());
83:       assertFalse(node0.isVar());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isNew());
87:       assertFalse(node0.isDefaultCase());
88:       assertEquals(53, Node.INPUT_ID);
89:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(2, Node.POST_FLAG);
93:       assertEquals(4095, Node.COLUMN_MASK);
94:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(12, Node.COLUMN_BITS);
97:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(32, Node.INCRDECR_PROP);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(52, Node.LENGTH);
104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
105:       assertEquals(54, Node.SLASH_V);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
111:       assertEquals(40, Node.ORIGINALNAME_PROP);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
114:       assertEquals(37, Node.OPT_ARG_NAME);
115:       assertEquals(56, Node.CHANGE_TIME);
116:       assertEquals(48, Node.DIRECTIVES);
117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
118:       assertEquals(29, Node.JSDOC_INFO_PROP);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
121:       assertEquals(55, Node.INFERRED_FUNCTION);
122:       assertEquals(36, Node.QUOTED_PROP);
123:       assertEquals(8, Node.FLAG_NO_THROWS);
124:       
125:       boolean boolean0 = node0.isGetProp();
126:       assertFalse(node0.isNE());
127:       assertFalse(node0.isEmpty());
128:       assertFalse(node0.isIn());
129:       assertFalse(node0.isGetterDef());
130:       assertFalse(node0.isArrayLit());
131:       assertFalse(node0.isVoid());
132:       assertFalse(node0.isIf());
133:       assertFalse(node0.isDelProp());
134:       assertFalse(node0.isSwitch());
135:       assertFalse(node0.isDebugger());
136:       assertEquals((-1), node0.getCharno());
137:       assertFalse(node0.isString());
138:       assertFalse(node0.isRegExp());
139:       assertFalse(node0.isHook());
140:       assertFalse(node0.isFor());
141:       assertFalse(node0.isTry());
142:       assertFalse(node0.isCase());
143:       assertFalse(node0.isSetterDef());
144:       assertFalse(node0.isGetProp());
145:       assertFalse(node0.isThis());
146:       assertFalse(node0.isFalse());
147:       assertFalse(node0.isCatch());
148:       assertFalse(node0.isAnd());
149:       assertFalse(node0.isInstanceOf());
150:       assertFalse(node0.isInc());
151:       assertFalse(node0.isContinue());
152:       assertFalse(node0.isFunction());
153:       assertFalse(node0.isThrow());
154:       assertEquals((-1), node0.getSourcePosition());
155:       assertFalse(node0.hasChildren());
156:       assertFalse(node0.isAssign());
157:       assertFalse(node0.isLabel());
158:       assertFalse(node0.isOr());
159:       assertFalse(node0.isDec());
160:       assertFalse(node0.isTypeOf());
161:       assertFalse(node0.isNumber());
162:       assertFalse(node0.isCast());
163:       assertFalse(node0.hasMoreThanOneChild());
164:       assertFalse(node0.isGetElem());
165:       assertFalse(node0.isLabelName());
166:       assertEquals((-1), node0.getLineno());
167:       assertFalse(node0.isExprResult());
168:       assertFalse(node0.isScript());
169:       assertFalse(node0.isBlock());
170:       assertFalse(node0.isNot());
171:       assertFalse(node0.isWith());
172:       assertFalse(node0.isObjectLit());
173:       assertEquals(427, node0.getType());
174:       assertFalse(node0.hasOneChild());
175:       assertFalse(node0.isReturn());
176:       assertFalse(node0.isWhile());
177:       assertFalse(node0.isComma());
178:       assertFalse(node0.isParamList());
179:       assertFalse(node0.isBreak());
180:       assertFalse(node0.isNull());
181:       assertEquals(0, node0.getChildCount());
182:       assertFalse(node0.isStringKey());
183:       assertFalse(node0.isCall());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.isTrue());
186:       assertFalse(node0.isAdd());
187:       assertFalse(node0.isVar());
188:       assertFalse(node0.isDo());
189:       assertFalse(node0.isAssignAdd());
190:       assertFalse(node0.isNew());
191:       assertFalse(node0.isDefaultCase());
192:       assertFalse(boolean0);
193:       assertEquals(53, Node.INPUT_ID);
194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
195:       assertEquals(43, Node.IS_CONSTANT_NAME);
196:       assertEquals(47, Node.IS_DISPATCHER);
197:       assertEquals(2, Node.POST_FLAG);
198:       assertEquals(4095, Node.COLUMN_MASK);
199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
200:       assertEquals(46, Node.IS_NAMESPACE);
201:       assertEquals(12, Node.COLUMN_BITS);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(1, Node.DECR_FLAG);
204:       assertEquals(32, Node.INCRDECR_PROP);
205:       assertEquals(50, Node.FREE_CALL);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(52, Node.LENGTH);
209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
210:       assertEquals(54, Node.SLASH_V);
211:       assertEquals(57, Node.REFLECTED_OBJECT);
212:       assertEquals(57, Node.LAST_PROP);
213:       assertEquals(30, Node.VAR_ARGS_NAME);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(40, Node.ORIGINALNAME_PROP);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
219:       assertEquals(37, Node.OPT_ARG_NAME);
220:       assertEquals(56, Node.CHANGE_TIME);
221:       assertEquals(48, Node.DIRECTIVES);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
226:       assertEquals(55, Node.INFERRED_FUNCTION);
227:       assertEquals(36, Node.QUOTED_PROP);
228:       assertEquals(8, Node.FLAG_NO_THROWS);
229:       
230:       Iterable<Node> iterable0 = node0.children();
231:       assertNotNull(iterable0);
232:       assertFalse(node0.isNE());
233:       assertFalse(node0.isEmpty());
234:       assertFalse(node0.isIn());
235:       assertFalse(node0.isGetterDef());
236:       assertFalse(node0.isArrayLit());
237:       assertFalse(node0.isVoid());
238:       assertFalse(node0.isIf());
239:       assertFalse(node0.isDelProp());
240:       assertFalse(node0.isSwitch());
241:       assertFalse(node0.isDebugger());
242:       assertEquals((-1), node0.getCharno());
243:       assertFalse(node0.isString());
244:       assertFalse(node0.isRegExp());
245:       assertFalse(node0.isHook());
246:       assertFalse(node0.isFor());
247:       assertFalse(node0.isTry());
248:       assertFalse(node0.isCase());
249:       assertFalse(node0.isSetterDef());
250:       assertFalse(node0.isGetProp());
251:       assertFalse(node0.isThis());
252:       assertFalse(node0.isFalse());
253:       assertFalse(node0.isCatch());
254:       assertFalse(node0.isAnd());
255:       assertFalse(node0.isInstanceOf());
256:       assertFalse(node0.isInc());
257:       assertFalse(node0.isContinue());
258:       assertFalse(node0.isFunction());
259:       assertFalse(node0.isThrow());
260:       assertEquals((-1), node0.getSourcePosition());
261:       assertFalse(node0.hasChildren());
262:       assertFalse(node0.isAssign());
263:       assertFalse(node0.isLabel());
264:       assertFalse(node0.isOr());
265:       assertFalse(node0.isDec());
266:       assertFalse(node0.isTypeOf());
267:       assertFalse(node0.isNumber());
268:       assertFalse(node0.isCast());
269:       assertFalse(node0.hasMoreThanOneChild());
270:       assertFalse(node0.isGetElem());
271:       assertFalse(node0.isLabelName());
272:       assertEquals((-1), node0.getLineno());
273:       assertFalse(node0.isExprResult());
274:       assertFalse(node0.isScript());
275:       assertFalse(node0.isBlock());
276:       assertFalse(node0.isNot());
277:       assertFalse(node0.isWith());
278:       assertFalse(node0.isObjectLit());
279:       assertEquals(427, node0.getType());
280:       assertFalse(node0.hasOneChild());
281:       assertFalse(node0.isReturn());
282:       assertFalse(node0.isWhile());
283:       assertFalse(node0.isComma());
284:       assertFalse(node0.isParamList());
285:       assertFalse(node0.isBreak());
286:       assertFalse(node0.isNull());
287:       assertEquals(0, node0.getChildCount());
288:       assertFalse(node0.isStringKey());
289:       assertFalse(node0.isCall());
290:       assertFalse(node0.isName());
291:       assertFalse(node0.isTrue());
292:       assertFalse(node0.isAdd());
293:       assertFalse(node0.isVar());
294:       assertFalse(node0.isDo());
295:       assertFalse(node0.isAssignAdd());
296:       assertFalse(node0.isNew());
297:       assertFalse(node0.isDefaultCase());
298:       assertEquals(53, Node.INPUT_ID);
299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(47, Node.IS_DISPATCHER);
302:       assertEquals(2, Node.POST_FLAG);
303:       assertEquals(4095, Node.COLUMN_MASK);
304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
305:       assertEquals(46, Node.IS_NAMESPACE);
306:       assertEquals(12, Node.COLUMN_BITS);
307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
308:       assertEquals(1, Node.DECR_FLAG);
309:       assertEquals(32, Node.INCRDECR_PROP);
310:       assertEquals(50, Node.FREE_CALL);
311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
313:       assertEquals(52, Node.LENGTH);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(57, Node.REFLECTED_OBJECT);
317:       assertEquals(57, Node.LAST_PROP);
318:       assertEquals(30, Node.VAR_ARGS_NAME);
319:       assertEquals(49, Node.DIRECT_EVAL);
320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
321:       assertEquals(40, Node.ORIGINALNAME_PROP);
322:       assertEquals(39, Node.EMPTY_BLOCK);
323:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
324:       assertEquals(37, Node.OPT_ARG_NAME);
325:       assertEquals(56, Node.CHANGE_TIME);
326:       assertEquals(48, Node.DIRECTIVES);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(15, Node.NO_SIDE_EFFECTS);
330:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
331:       assertEquals(55, Node.INFERRED_FUNCTION);
332:       assertEquals(36, Node.QUOTED_PROP);
333:       assertEquals(8, Node.FLAG_NO_THROWS);
334:       assertFalse(iterable0.contains(node0));
335:   }
336: }
RegularFileObject[/tmp/EvoSuite_148_1628160725118/com/google/javascript/rhino/Node_148_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:52:05 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_148_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_148_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_148_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
268:       "com.google.javascript.rhino.jstype.JSType$1",
269:       "com.google.javascript.rhino.jstype.JSType",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Preconditions",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.javascript.rhino.SimpleErrorReporter",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.base.Objects",
352:       "com.google.common.collect.Sets",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.TemplatizedType",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.Iterators$11",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.jstype.NamespaceType",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 10:52:05.164 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(427);
assertNotNull(node0);
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertEquals(427, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);

boolean boolean0 = node0.isGetProp();
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertEquals(427, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertEquals(427, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(iterable0.contains(node0));


[MASTER] 10:52:13.773 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_250_1628160733372/com/google/javascript/rhino/Node_250_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_250_1628160733372/com/google/javascript/rhino/Node_250_tmp__ESTest_scaffolding.java]]
[MASTER] 10:52:13.773 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:13.773 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:13.775 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1420
[MASTER] 10:52:13.777 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_250_1628160733372/com/google/javascript/rhino/Node_250_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:52:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_250_tmp__ESTest extends Node_250_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString("com.google.common.collect.ImmutableList$SubList");
24:       assertNotNull(node0);
25:       assertEquals((-1), node0.getCharno());
26:       assertFalse(node0.isSwitch());
27:       assertFalse(node0.isCase());
28:       assertFalse(node0.isInc());
29:       assertFalse(node0.isIn());
30:       assertFalse(node0.isComma());
31:       assertFalse(node0.isNE());
32:       assertFalse(node0.isIf());
33:       assertFalse(node0.isBreak());
34:       assertFalse(node0.isDelProp());
35:       assertFalse(node0.isInstanceOf());
36:       assertFalse(node0.isGetProp());
37:       assertFalse(node0.isWith());
38:       assertFalse(node0.isFor());
39:       assertFalse(node0.isHook());
40:       assertFalse(node0.isThis());
41:       assertFalse(node0.isExprResult());
42:       assertFalse(node0.isTrue());
43:       assertFalse(node0.isVoid());
44:       assertFalse(node0.isTry());
45:       assertFalse(node0.isDefaultCase());
46:       assertFalse(node0.hasOneChild());
47:       assertFalse(node0.isArrayLit());
48:       assertFalse(node0.isScript());
49:       assertFalse(node0.isLabelName());
50:       assertFalse(node0.isGetterDef());
51:       assertFalse(node0.isParamList());
52:       assertFalse(node0.isAssignAdd());
53:       assertFalse(node0.isEmpty());
54:       assertEquals(0, node0.getChildCount());
55:       assertFalse(node0.isVar());
56:       assertFalse(node0.isLabel());
57:       assertTrue(node0.isString());
58:       assertFalse(node0.isDo());
59:       assertFalse(node0.isAdd());
60:       assertFalse(node0.isNew());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isName());
63:       assertFalse(node0.isOr());
64:       assertFalse(node0.isNull());
65:       assertFalse(node0.isTypeOf());
66:       assertFalse(node0.isNumber());
67:       assertEquals((-1), node0.getLineno());
68:       assertFalse(node0.isGetElem());
69:       assertFalse(node0.isCall());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.hasMoreThanOneChild());
72:       assertFalse(node0.hasChildren());
73:       assertFalse(node0.isWhile());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.isBlock());
77:       assertFalse(node0.isReturn());
78:       assertFalse(node0.isDebugger());
79:       assertFalse(node0.isRegExp());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isAnd());
82:       assertFalse(node0.isObjectLit());
83:       assertFalse(node0.isNot());
84:       assertEquals((-1), node0.getSourcePosition());
85:       assertFalse(node0.isSetterDef());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isThrow());
88:       assertFalse(node0.isCast());
89:       assertFalse(node0.isFalse());
90:       assertEquals(40, node0.getType());
91:       assertEquals(32, Node.INCRDECR_PROP);
92:       assertEquals(46, Node.IS_NAMESPACE);
93:       assertEquals(2, Node.POST_FLAG);
94:       assertEquals(51, Node.STATIC_SOURCE_FILE);
95:       assertEquals(12, Node.COLUMN_BITS);
96:       assertEquals(47, Node.IS_DISPATCHER);
97:       assertEquals(30, Node.VAR_ARGS_NAME);
98:       assertEquals(56, Node.CHANGE_TIME);
99:       assertEquals(49, Node.DIRECT_EVAL);
100:       assertEquals(37, Node.OPT_ARG_NAME);
101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
105:       assertEquals(50, Node.FREE_CALL);
106:       assertEquals(1, Node.DECR_FLAG);
107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
108:       assertEquals(4095, Node.COLUMN_MASK);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(40, Node.ORIGINALNAME_PROP);
113:       assertEquals(48, Node.DIRECTIVES);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(55, Node.INFERRED_FUNCTION);
123:       assertEquals(29, Node.JSDOC_INFO_PROP);
124:       assertEquals(53, Node.INPUT_ID);
125:       assertEquals(15, Node.NO_SIDE_EFFECTS);
126:       assertEquals(39, Node.EMPTY_BLOCK);
127:       
128:       node0.setLength((-1569));
129:       assertEquals((-1), node0.getCharno());
130:       assertFalse(node0.isSwitch());
131:       assertFalse(node0.isCase());
132:       assertFalse(node0.isInc());
133:       assertFalse(node0.isIn());
134:       assertFalse(node0.isComma());
135:       assertFalse(node0.isNE());
136:       assertFalse(node0.isIf());
137:       assertFalse(node0.isBreak());
138:       assertFalse(node0.isDelProp());
139:       assertFalse(node0.isInstanceOf());
140:       assertFalse(node0.isGetProp());
141:       assertFalse(node0.isWith());
142:       assertFalse(node0.isFor());
143:       assertFalse(node0.isHook());
144:       assertFalse(node0.isThis());
145:       assertFalse(node0.isExprResult());
146:       assertFalse(node0.isTrue());
147:       assertFalse(node0.isVoid());
148:       assertFalse(node0.isTry());
149:       assertFalse(node0.isDefaultCase());
150:       assertFalse(node0.hasOneChild());
151:       assertFalse(node0.isArrayLit());
152:       assertFalse(node0.isScript());
153:       assertFalse(node0.isLabelName());
154:       assertFalse(node0.isGetterDef());
155:       assertFalse(node0.isParamList());
156:       assertFalse(node0.isAssignAdd());
157:       assertFalse(node0.isEmpty());
158:       assertEquals(0, node0.getChildCount());
159:       assertFalse(node0.isVar());
160:       assertFalse(node0.isLabel());
161:       assertTrue(node0.isString());
162:       assertFalse(node0.isDo());
163:       assertFalse(node0.isAdd());
164:       assertFalse(node0.isNew());
165:       assertFalse(node0.isStringKey());
166:       assertFalse(node0.isName());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isNull());
169:       assertFalse(node0.isTypeOf());
170:       assertFalse(node0.isNumber());
171:       assertEquals((-1), node0.getLineno());
172:       assertFalse(node0.isGetElem());
173:       assertFalse(node0.isCall());
174:       assertFalse(node0.isCatch());
175:       assertFalse(node0.hasMoreThanOneChild());
176:       assertFalse(node0.hasChildren());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isAssign());
179:       assertFalse(node0.isDec());
180:       assertFalse(node0.isBlock());
181:       assertFalse(node0.isReturn());
182:       assertFalse(node0.isDebugger());
183:       assertFalse(node0.isRegExp());
184:       assertFalse(node0.isFunction());
185:       assertFalse(node0.isAnd());
186:       assertFalse(node0.isObjectLit());
187:       assertFalse(node0.isNot());
188:       assertEquals((-1), node0.getSourcePosition());
189:       assertFalse(node0.isSetterDef());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.isThrow());
192:       assertFalse(node0.isCast());
193:       assertFalse(node0.isFalse());
194:       assertEquals(40, node0.getType());
195:       assertEquals(32, Node.INCRDECR_PROP);
196:       assertEquals(46, Node.IS_NAMESPACE);
197:       assertEquals(2, Node.POST_FLAG);
198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
199:       assertEquals(12, Node.COLUMN_BITS);
200:       assertEquals(47, Node.IS_DISPATCHER);
201:       assertEquals(30, Node.VAR_ARGS_NAME);
202:       assertEquals(56, Node.CHANGE_TIME);
203:       assertEquals(49, Node.DIRECT_EVAL);
204:       assertEquals(37, Node.OPT_ARG_NAME);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(1, Node.DECR_FLAG);
211:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
212:       assertEquals(4095, Node.COLUMN_MASK);
213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
214:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
215:       assertEquals(43, Node.IS_CONSTANT_NAME);
216:       assertEquals(40, Node.ORIGINALNAME_PROP);
217:       assertEquals(48, Node.DIRECTIVES);
218:       assertEquals(52, Node.LENGTH);
219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
220:       assertEquals(36, Node.QUOTED_PROP);
221:       assertEquals(57, Node.REFLECTED_OBJECT);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(8, Node.FLAG_NO_THROWS);
224:       assertEquals(57, Node.LAST_PROP);
225:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
226:       assertEquals(55, Node.INFERRED_FUNCTION);
227:       assertEquals(29, Node.JSDOC_INFO_PROP);
228:       assertEquals(53, Node.INPUT_ID);
229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
230:       assertEquals(39, Node.EMPTY_BLOCK);
231:       
232:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
233:       assertNotNull(simpleErrorReporter0);
234:       
235:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
236:       assertNotNull(jSTypeRegistry0);
237:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
238:       
239:       JSType[] jSTypeArray0 = new JSType[0];
240:       node0.detachChildren();
241:       assertEquals((-1), node0.getCharno());
242:       assertFalse(node0.isSwitch());
243:       assertFalse(node0.isCase());
244:       assertFalse(node0.isInc());
245:       assertFalse(node0.isIn());
246:       assertFalse(node0.isComma());
247:       assertFalse(node0.isNE());
248:       assertFalse(node0.isIf());
249:       assertFalse(node0.isBreak());
250:       assertFalse(node0.isDelProp());
251:       assertFalse(node0.isInstanceOf());
252:       assertFalse(node0.isGetProp());
253:       assertFalse(node0.isWith());
254:       assertFalse(node0.isFor());
255:       assertFalse(node0.isHook());
256:       assertFalse(node0.isThis());
257:       assertFalse(node0.isExprResult());
258:       assertFalse(node0.isTrue());
259:       assertFalse(node0.isVoid());
260:       assertFalse(node0.isTry());
261:       assertFalse(node0.isDefaultCase());
262:       assertFalse(node0.hasOneChild());
263:       assertFalse(node0.isArrayLit());
264:       assertFalse(node0.isScript());
265:       assertFalse(node0.isLabelName());
266:       assertFalse(node0.isGetterDef());
267:       assertFalse(node0.isParamList());
268:       assertFalse(node0.isAssignAdd());
269:       assertFalse(node0.isEmpty());
270:       assertEquals(0, node0.getChildCount());
271:       assertFalse(node0.isVar());
272:       assertFalse(node0.isLabel());
273:       assertTrue(node0.isString());
274:       assertFalse(node0.isDo());
275:       assertFalse(node0.isAdd());
276:       assertFalse(node0.isNew());
277:       assertFalse(node0.isStringKey());
278:       assertFalse(node0.isName());
279:       assertFalse(node0.isOr());
280:       assertFalse(node0.isNull());
281:       assertFalse(node0.isTypeOf());
282:       assertFalse(node0.isNumber());
283:       assertEquals((-1), node0.getLineno());
284:       assertFalse(node0.isGetElem());
285:       assertFalse(node0.isCall());
286:       assertFalse(node0.isCatch());
287:       assertFalse(node0.hasMoreThanOneChild());
288:       assertFalse(node0.hasChildren());
289:       assertFalse(node0.isWhile());
290:       assertFalse(node0.isAssign());
291:       assertFalse(node0.isDec());
292:       assertFalse(node0.isBlock());
293:       assertFalse(node0.isReturn());
294:       assertFalse(node0.isDebugger());
295:       assertFalse(node0.isRegExp());
296:       assertFalse(node0.isFunction());
297:       assertFalse(node0.isAnd());
298:       assertFalse(node0.isObjectLit());
299:       assertFalse(node0.isNot());
300:       assertEquals((-1), node0.getSourcePosition());
301:       assertFalse(node0.isSetterDef());
302:       assertFalse(node0.isContinue());
303:       assertFalse(node0.isThrow());
304:       assertFalse(node0.isCast());
305:       assertFalse(node0.isFalse());
306:       assertEquals(40, node0.getType());
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(46, Node.IS_NAMESPACE);
309:       assertEquals(2, Node.POST_FLAG);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(12, Node.COLUMN_BITS);
312:       assertEquals(47, Node.IS_DISPATCHER);
313:       assertEquals(30, Node.VAR_ARGS_NAME);
314:       assertEquals(56, Node.CHANGE_TIME);
315:       assertEquals(49, Node.DIRECT_EVAL);
316:       assertEquals(37, Node.OPT_ARG_NAME);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
320:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
321:       assertEquals(50, Node.FREE_CALL);
322:       assertEquals(1, Node.DECR_FLAG);
323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
324:       assertEquals(4095, Node.COLUMN_MASK);
325:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
327:       assertEquals(43, Node.IS_CONSTANT_NAME);
328:       assertEquals(40, Node.ORIGINALNAME_PROP);
329:       assertEquals(48, Node.DIRECTIVES);
330:       assertEquals(52, Node.LENGTH);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(36, Node.QUOTED_PROP);
333:       assertEquals(57, Node.REFLECTED_OBJECT);
334:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
335:       assertEquals(8, Node.FLAG_NO_THROWS);
336:       assertEquals(57, Node.LAST_PROP);
337:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
338:       assertEquals(55, Node.INFERRED_FUNCTION);
339:       assertEquals(29, Node.JSDOC_INFO_PROP);
340:       assertEquals(53, Node.INPUT_ID);
341:       assertEquals(15, Node.NO_SIDE_EFFECTS);
342:       assertEquals(39, Node.EMPTY_BLOCK);
343:       
344:       simpleErrorReporter0.error("is_dispatcher", "&3~/T*sR*+pZ", 1265, 57);
345:       Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
346:       assertNotNull(node1);
347:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
348:       assertEquals(0, node1.getChildCount());
349:       assertFalse(node1.isRegExp());
350:       assertFalse(node1.isCatch());
351:       assertFalse(node1.isFunction());
352:       assertFalse(node1.isTry());
353:       assertFalse(node1.isSetterDef());
354:       assertFalse(node1.isDefaultCase());
355:       assertFalse(node1.isEmpty());
356:       assertFalse(node1.isCall());
357:       assertFalse(node1.isName());
358:       assertFalse(node1.isFor());
359:       assertFalse(node1.isTrue());
360:       assertFalse(node1.isVoid());
361:       assertFalse(node1.isIf());
362:       assertFalse(node1.isDelProp());
363:       assertFalse(node1.isNull());
364:       assertFalse(node1.isNE());
365:       assertFalse(node1.isIn());
366:       assertFalse(node1.isString());
367:       assertFalse(node1.isContinue());
368:       assertFalse(node1.isInc());
369:       assertFalse(node1.isReturn());
370:       assertFalse(node1.hasChildren());
371:       assertFalse(node1.isWhile());
372:       assertFalse(node1.isFalse());
373:       assertFalse(node1.isThrow());
374:       assertFalse(node1.isCast());
375:       assertEquals((-1), node1.getSourcePosition());
376:       assertFalse(node1.isDebugger());
377:       assertFalse(node1.isAnd());
378:       assertFalse(node1.isObjectLit());
379:       assertFalse(node1.isNot());
380:       assertFalse(node1.isInstanceOf());
381:       assertTrue(node1.isParamList());
382:       assertFalse(node1.isScript());
383:       assertFalse(node1.isWith());
384:       assertFalse(node1.isGetProp());
385:       assertFalse(node1.isComma());
386:       assertFalse(node1.isThis());
387:       assertFalse(node1.hasOneChild());
388:       assertFalse(node1.isGetElem());
389:       assertFalse(node1.isAssign());
390:       assertFalse(node1.isBreak());
391:       assertFalse(node1.isDec());
392:       assertFalse(node1.isTypeOf());
393:       assertEquals(83, node1.getType());
394:       assertFalse(node1.isExprResult());
395:       assertFalse(node1.isOr());
396:       assertEquals((-1), node1.getLineno());
397:       assertFalse(node1.isDo());
398:       assertFalse(node1.isCase());
399:       assertFalse(node1.hasMoreThanOneChild());
400:       assertFalse(node1.isAdd());
401:       assertFalse(node1.isBlock());
402:       assertFalse(node1.isLabel());
403:       assertFalse(node1.isNew());
404:       assertFalse(node1.isHook());
405:       assertFalse(node1.isVar());
406:       assertFalse(node1.isAssignAdd());
407:       assertFalse(node1.isStringKey());
408:       assertFalse(node1.isLabelName());
409:       assertFalse(node1.isArrayLit());
410:       assertFalse(node1.isNumber());
411:       assertFalse(node1.isGetterDef());
412:       assertEquals((-1), node1.getCharno());
413:       assertFalse(node1.isSwitch());
414:       assertEquals(0, jSTypeArray0.length);
415:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
416:       assertEquals(39, Node.EMPTY_BLOCK);
417:       assertEquals(48, Node.DIRECTIVES);
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(57, Node.REFLECTED_OBJECT);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(50, Node.FREE_CALL);
422:       assertEquals(55, Node.INFERRED_FUNCTION);
423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
424:       assertEquals(52, Node.LENGTH);
425:       assertEquals(8, Node.FLAG_NO_THROWS);
426:       assertEquals(36, Node.QUOTED_PROP);
427:       assertEquals(1, Node.DECR_FLAG);
428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
429:       assertEquals(49, Node.DIRECT_EVAL);
430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
433:       assertEquals(4095, Node.COLUMN_MASK);
434:       assertEquals(56, Node.CHANGE_TIME);
435:       assertEquals(47, Node.IS_DISPATCHER);
436:       assertEquals(2, Node.POST_FLAG);
437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
438:       assertEquals(37, Node.OPT_ARG_NAME);
439:       assertEquals(32, Node.INCRDECR_PROP);
440:       assertEquals(46, Node.IS_NAMESPACE);
441:       assertEquals(51, Node.STATIC_SOURCE_FILE);
442:       assertEquals(29, Node.JSDOC_INFO_PROP);
443:       assertEquals(53, Node.INPUT_ID);
444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
446:       assertEquals(57, Node.LAST_PROP);
447:       assertEquals(30, Node.VAR_ARGS_NAME);
448:       assertEquals(54, Node.SLASH_V);
449:       assertEquals(43, Node.IS_CONSTANT_NAME);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertFalse(node1.equals((Object)node0));
452:       
453:       Node node2 = Node.newString("com.google.common.collect.ImmutableList$SubList", 55, 1);
454:       assertNotNull(node2);
455:       assertFalse(node2.isAssign());
456:       assertFalse(node2.isLabelName());
457:       assertFalse(node2.isGetElem());
458:       assertFalse(node2.isCast());
459:       assertFalse(node2.hasOneChild());
460:       assertFalse(node2.isLabel());
461:       assertFalse(node2.isAssignAdd());
462:       assertFalse(node2.isReturn());
463:       assertFalse(node2.isExprResult());
464:       assertFalse(node2.isTypeOf());
465:       assertFalse(node2.hasMoreThanOneChild());
466:       assertFalse(node2.hasChildren());
467:       assertFalse(node2.isDec());
468:       assertFalse(node2.isDo());
469:       assertFalse(node2.isWith());
470:       assertFalse(node2.isNew());
471:       assertFalse(node2.isAdd());
472:       assertFalse(node2.isOr());
473:       assertFalse(node2.isName());
474:       assertFalse(node2.isFalse());
475:       assertFalse(node2.isCall());
476:       assertFalse(node2.isThrow());
477:       assertFalse(node2.isSetterDef());
478:       assertFalse(node2.isBreak());
479:       assertFalse(node2.isComma());
480:       assertFalse(node2.isNot());
481:       assertFalse(node2.isAnd());
482:       assertFalse(node2.isWhile());
483:       assertFalse(node2.isContinue());
484:       assertFalse(node2.isGetProp());
485:       assertEquals(1, node2.getCharno());
486:       assertFalse(node2.isDebugger());
487:       assertFalse(node2.isObjectLit());
488:       assertFalse(node2.isEmpty());
489:       assertFalse(node2.isFor());
490:       assertFalse(node2.isIf());
491:       assertFalse(node2.isArrayLit());
492:       assertFalse(node2.isDelProp());
493:       assertFalse(node2.isTry());
494:       assertFalse(node2.isRegExp());
495:       assertFalse(node2.isFunction());
496:       assertEquals(40, node2.getType());
497:       assertFalse(node2.isCatch());
498:       assertFalse(node2.isInc());
499:       assertFalse(node2.isDefaultCase());
500:       assertFalse(node2.isVoid());
501:       assertEquals(225281, node2.getSourcePosition());
502:       assertFalse(node2.isIn());
503:       assertFalse(node2.isTrue());
504:       assertFalse(node2.isNE());
505:       assertFalse(node2.isNull());
506:       assertEquals(55, node2.getLineno());
507:       assertFalse(node2.isStringKey());
508:       assertTrue(node2.isString());
509:       assertFalse(node2.isBlock());
510:       assertFalse(node2.isInstanceOf());
511:       assertFalse(node2.isVar());
512:       assertFalse(node2.isHook());
513:       assertFalse(node2.isThis());
514:       assertEquals(0, node2.getChildCount());
515:       assertFalse(node2.isCase());
516:       assertFalse(node2.isScript());
517:       assertFalse(node2.isSwitch());
518:       assertFalse(node2.isParamList());
519:       assertFalse(node2.isNumber());
520:       assertFalse(node2.isGetterDef());
521:       assertNotSame(node2, node0);
522:       assertEquals(36, Node.QUOTED_PROP);
523:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
524:       assertEquals(43, Node.IS_CONSTANT_NAME);
525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
526:       assertEquals(55, Node.INFERRED_FUNCTION);
527:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
528:       assertEquals(29, Node.JSDOC_INFO_PROP);
529:       assertEquals(53, Node.INPUT_ID);
530:       assertEquals(8, Node.FLAG_NO_THROWS);
531:       assertEquals(39, Node.EMPTY_BLOCK);
532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
533:       assertEquals(56, Node.CHANGE_TIME);
534:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
536:       assertEquals(4095, Node.COLUMN_MASK);
537:       assertEquals(57, Node.REFLECTED_OBJECT);
538:       assertEquals(49, Node.DIRECT_EVAL);
539:       assertEquals(37, Node.OPT_ARG_NAME);
540:       assertEquals(48, Node.DIRECTIVES);
541:       assertEquals(15, Node.NO_SIDE_EFFECTS);
542:       assertEquals(57, Node.LAST_PROP);
543:       assertEquals(54, Node.SLASH_V);
544:       assertEquals(52, Node.LENGTH);
545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(12, Node.COLUMN_BITS);
548:       assertEquals(32, Node.INCRDECR_PROP);
549:       assertEquals(1, Node.DECR_FLAG);
550:       assertEquals(2, Node.POST_FLAG);
551:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
552:       assertEquals(47, Node.IS_DISPATCHER);
553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
554:       assertEquals(50, Node.FREE_CALL);
555:       assertEquals(51, Node.STATIC_SOURCE_FILE);
556:       assertEquals(40, Node.ORIGINALNAME_PROP);
557:       assertEquals(46, Node.IS_NAMESPACE);
558:       assertFalse(node2.equals((Object)node1));
559:       assertFalse(node2.equals((Object)node0));
560:       
561:       Node node3 = new Node(4095, node1, node1, 56, (-1569));
562:       assertNotNull(node3);
563:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
564:       assertEquals(0, node1.getChildCount());
565:       assertFalse(node1.isRegExp());
566:       assertFalse(node1.isCatch());
567:       assertFalse(node1.isFunction());
568:       assertFalse(node1.isTry());
569:       assertFalse(node1.isSetterDef());
570:       assertFalse(node1.isDefaultCase());
571:       assertFalse(node1.isEmpty());
572:       assertFalse(node1.isCall());
573:       assertFalse(node1.isName());
574:       assertFalse(node1.isFor());
575:       assertFalse(node1.isTrue());
576:       assertFalse(node1.isVoid());
577:       assertFalse(node1.isIf());
578:       assertFalse(node1.isDelProp());
579:       assertFalse(node1.isNull());
580:       assertFalse(node1.isNE());
581:       assertFalse(node1.isIn());
582:       assertFalse(node1.isString());
583:       assertFalse(node1.isContinue());
584:       assertFalse(node1.isInc());
585:       assertFalse(node1.isReturn());
586:       assertFalse(node1.hasChildren());
587:       assertFalse(node1.isWhile());
588:       assertFalse(node1.isFalse());
589:       assertFalse(node1.isThrow());
590:       assertFalse(node1.isCast());
591:       assertEquals((-1), node1.getSourcePosition());
592:       assertFalse(node1.isDebugger());
593:       assertFalse(node1.isAnd());
594:       assertFalse(node1.isObjectLit());
595:       assertFalse(node1.isNot());
596:       assertFalse(node1.isInstanceOf());
597:       assertTrue(node1.isParamList());
598:       assertFalse(node1.isScript());
599:       assertFalse(node1.isWith());
600:       assertFalse(node1.isGetProp());
601:       assertFalse(node1.isComma());
602:       assertFalse(node1.isThis());
603:       assertFalse(node1.hasOneChild());
604:       assertFalse(node1.isGetElem());
605:       assertFalse(node1.isAssign());
606:       assertFalse(node1.isBreak());
607:       assertFalse(node1.isDec());
608:       assertFalse(node1.isTypeOf());
609:       assertEquals(83, node1.getType());
610:       assertFalse(node1.isExprResult());
611:       assertFalse(node1.isOr());
612:       assertEquals((-1), node1.getLineno());
613:       assertFalse(node1.isDo());
614:       assertFalse(node1.isCase());
615:       assertFalse(node1.hasMoreThanOneChild());
616:       assertFalse(node1.isAdd());
617:       assertFalse(node1.isBlock());
618:       assertFalse(node1.isLabel());
619:       assertFalse(node1.isNew());
620:       assertFalse(node1.isHook());
621:       assertFalse(node1.isVar());
622:       assertFalse(node1.isAssignAdd());
623:       assertFalse(node1.isStringKey());
624:       assertFalse(node1.isLabelName());
625:       assertFalse(node1.isArrayLit());
626:       assertFalse(node1.isNumber());
627:       assertFalse(node1.isGetterDef());
628:       assertEquals((-1), node1.getCharno());
629:       assertFalse(node1.isSwitch());
630:       assertFalse(node3.isArrayLit());
631:       assertFalse(node3.isTry());
632:       assertFalse(node3.isDebugger());
633:       assertFalse(node3.isTrue());
634:       assertTrue(node3.hasOneChild());
635:       assertFalse(node3.isFor());
636:       assertFalse(node3.isIf());
637:       assertFalse(node3.isFunction());
638:       assertFalse(node3.isDelProp());
639:       assertFalse(node3.isRegExp());
640:       assertFalse(node3.isVoid());
641:       assertEquals(4095, node3.getType());
642:       assertTrue(node3.hasChildren());
643:       assertFalse(node3.isCatch());
644:       assertFalse(node3.isIn());
645:       assertFalse(node3.isNE());
646:       assertFalse(node3.isNull());
647:       assertFalse(node3.isDefaultCase());
648:       assertFalse(node3.isEmpty());
649:       assertFalse(node3.isSetterDef());
650:       assertFalse(node3.isInc());
651:       assertEquals((-1), node3.getCharno());
652:       assertFalse(node3.isStringKey());
653:       assertFalse(node3.isVar());
654:       assertFalse(node3.isHook());
655:       assertFalse(node3.isBlock());
656:       assertFalse(node3.isSwitch());
657:       assertFalse(node3.isInstanceOf());
658:       assertEquals(1, node3.getChildCount());
659:       assertFalse(node3.hasMoreThanOneChild());
660:       assertFalse(node3.isParamList());
661:       assertFalse(node3.isThis());
662:       assertFalse(node3.isNumber());
663:       assertFalse(node3.isGetterDef());
664:       assertFalse(node3.isCase());
665:       assertFalse(node3.isScript());
666:       assertFalse(node3.isDec());
667:       assertFalse(node3.isAssign());
668:       assertFalse(node3.isLabelName());
669:       assertFalse(node3.isWith());
670:       assertFalse(node3.isTypeOf());
671:       assertFalse(node3.isCast());
672:       assertFalse(node3.isGetElem());
673:       assertFalse(node3.isExprResult());
674:       assertEquals((-1), node3.getLineno());
675:       assertFalse(node3.isOr());
676:       assertFalse(node3.isAssignAdd());
677:       assertFalse(node3.isLabel());
678:       assertFalse(node3.isDo());
679:       assertFalse(node3.isNew());
680:       assertFalse(node3.isAdd());
681:       assertFalse(node3.isThrow());
682:       assertFalse(node3.isBreak());
683:       assertFalse(node3.isName());
684:       assertFalse(node3.isFalse());
685:       assertFalse(node3.isContinue());
686:       assertFalse(node3.isCall());
687:       assertFalse(node3.isObjectLit());
688:       assertFalse(node3.isAnd());
689:       assertFalse(node3.isComma());
690:       assertFalse(node3.isReturn());
691:       assertEquals((-1), node3.getSourcePosition());
692:       assertFalse(node3.isString());
693:       assertFalse(node3.isWhile());
694:       assertFalse(node3.isNot());
695:       assertFalse(node3.isGetProp());
696:       assertEquals(0, jSTypeArray0.length);
697:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
698:       assertEquals(39, Node.EMPTY_BLOCK);
699:       assertEquals(48, Node.DIRECTIVES);
700:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
701:       assertEquals(57, Node.REFLECTED_OBJECT);
702:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
703:       assertEquals(50, Node.FREE_CALL);
704:       assertEquals(55, Node.INFERRED_FUNCTION);
705:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
706:       assertEquals(52, Node.LENGTH);
707:       assertEquals(8, Node.FLAG_NO_THROWS);
708:       assertEquals(36, Node.QUOTED_PROP);
709:       assertEquals(1, Node.DECR_FLAG);
710:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
711:       assertEquals(49, Node.DIRECT_EVAL);
712:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
713:       assertEquals(12, Node.COLUMN_BITS);
714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
715:       assertEquals(4095, Node.COLUMN_MASK);
716:       assertEquals(56, Node.CHANGE_TIME);
717:       assertEquals(47, Node.IS_DISPATCHER);
718:       assertEquals(2, Node.POST_FLAG);
719:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
720:       assertEquals(37, Node.OPT_ARG_NAME);
721:       assertEquals(32, Node.INCRDECR_PROP);
722:       assertEquals(46, Node.IS_NAMESPACE);
723:       assertEquals(51, Node.STATIC_SOURCE_FILE);
724:       assertEquals(29, Node.JSDOC_INFO_PROP);
725:       assertEquals(53, Node.INPUT_ID);
726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
727:       assertEquals(15, Node.NO_SIDE_EFFECTS);
728:       assertEquals(57, Node.LAST_PROP);
729:       assertEquals(30, Node.VAR_ARGS_NAME);
730:       assertEquals(54, Node.SLASH_V);
731:       assertEquals(43, Node.IS_CONSTANT_NAME);
732:       assertEquals(40, Node.ORIGINALNAME_PROP);
733:       assertEquals(4095, Node.COLUMN_MASK);
734:       assertEquals(55, Node.INFERRED_FUNCTION);
735:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
736:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
738:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
740:       assertEquals(29, Node.JSDOC_INFO_PROP);
741:       assertEquals(39, Node.EMPTY_BLOCK);
742:       assertEquals(53, Node.INPUT_ID);
743:       assertEquals(48, Node.DIRECTIVES);
744:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
745:       assertEquals(37, Node.OPT_ARG_NAME);
746:       assertEquals(52, Node.LENGTH);
747:       assertEquals(8, Node.FLAG_NO_THROWS);
748:       assertEquals(56, Node.CHANGE_TIME);
749:       assertEquals(36, Node.QUOTED_PROP);
750:       assertEquals(57, Node.REFLECTED_OBJECT);
751:       assertEquals(1, Node.DECR_FLAG);
752:       assertEquals(30, Node.VAR_ARGS_NAME);
753:       assertEquals(49, Node.DIRECT_EVAL);
754:       assertEquals(15, Node.NO_SIDE_EFFECTS);
755:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
756:       assertEquals(2, Node.POST_FLAG);
757:       assertEquals(32, Node.INCRDECR_PROP);
758:       assertEquals(57, Node.LAST_PROP);
759:       assertEquals(47, Node.IS_DISPATCHER);
760:       assertEquals(12, Node.COLUMN_BITS);
761:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
762:       assertEquals(50, Node.FREE_CALL);
763:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
764:       assertEquals(40, Node.ORIGINALNAME_PROP);
765:       assertEquals(54, Node.SLASH_V);
766:       assertEquals(46, Node.IS_NAMESPACE);
767:       assertEquals(43, Node.IS_CONSTANT_NAME);
768:       assertEquals(51, Node.STATIC_SOURCE_FILE);
769:       assertFalse(node1.equals((Object)node2));
770:       assertFalse(node1.equals((Object)node0));
771:       assertFalse(node3.equals((Object)node0));
772:       assertFalse(node3.equals((Object)node2));
773:       assertFalse(node3.equals((Object)node1));
774:       
775:       String string0 = node0.toString();
776:       assertNotNull(string0);
777:       assertEquals((-1), node0.getCharno());
778:       assertFalse(node0.isSwitch());
779:       assertFalse(node0.isCase());
780:       assertFalse(node0.isInc());
781:       assertFalse(node0.isIn());
782:       assertFalse(node0.isComma());
783:       assertFalse(node0.isNE());
784:       assertFalse(node0.isIf());
785:       assertFalse(node0.isBreak());
786:       assertFalse(node0.isDelProp());
787:       assertFalse(node0.isInstanceOf());
788:       assertFalse(node0.isGetProp());
789:       assertFalse(node0.isWith());
790:       assertFalse(node0.isFor());
791:       assertFalse(node0.isHook());
792:       assertFalse(node0.isThis());
793:       assertFalse(node0.isExprResult());
794:       assertFalse(node0.isTrue());
795:       assertFalse(node0.isVoid());
796:       assertFalse(node0.isTry());
797:       assertFalse(node0.isDefaultCase());
798:       assertFalse(node0.hasOneChild());
799:       assertFalse(node0.isArrayLit());
800:       assertFalse(node0.isScript());
801:       assertFalse(node0.isLabelName());
802:       assertFalse(node0.isGetterDef());
803:       assertFalse(node0.isParamList());
804:       assertFalse(node0.isAssignAdd());
805:       assertFalse(node0.isEmpty());
806:       assertEquals(0, node0.getChildCount());
807:       assertFalse(node0.isVar());
808:       assertFalse(node0.isLabel());
809:       assertTrue(node0.isString());
810:       assertFalse(node0.isDo());
811:       assertFalse(node0.isAdd());
812:       assertFalse(node0.isNew());
813:       assertFalse(node0.isStringKey());
814:       assertFalse(node0.isName());
815:       assertFalse(node0.isOr());
816:       assertFalse(node0.isNull());
817:       assertFalse(node0.isTypeOf());
818:       assertFalse(node0.isNumber());
819:       assertEquals((-1), node0.getLineno());
820:       assertFalse(node0.isGetElem());
821:       assertFalse(node0.isCall());
822:       assertFalse(node0.isCatch());
823:       assertFalse(node0.hasMoreThanOneChild());
824:       assertFalse(node0.hasChildren());
825:       assertFalse(node0.isWhile());
826:       assertFalse(node0.isAssign());
827:       assertFalse(node0.isDec());
828:       assertFalse(node0.isBlock());
829:       assertFalse(node0.isReturn());
830:       assertFalse(node0.isDebugger());
831:       assertFalse(node0.isRegExp());
832:       assertFalse(node0.isFunction());
833:       assertFalse(node0.isAnd());
834:       assertFalse(node0.isObjectLit());
835:       assertFalse(node0.isNot());
836:       assertEquals((-1), node0.getSourcePosition());
837:       assertFalse(node0.isSetterDef());
838:       assertFalse(node0.isContinue());
839:       assertFalse(node0.isThrow());
840:       assertFalse(node0.isCast());
841:       assertFalse(node0.isFalse());
842:       assertEquals(40, node0.getType());
843:       assertNotSame(node0, node2);
844:       assertEquals(32, Node.INCRDECR_PROP);
845:       assertEquals(46, Node.IS_NAMESPACE);
846:       assertEquals(2, Node.POST_FLAG);
847:       assertEquals(51, Node.STATIC_SOURCE_FILE);
848:       assertEquals(12, Node.COLUMN_BITS);
849:       assertEquals(47, Node.IS_DISPATCHER);
850:       assertEquals(30, Node.VAR_ARGS_NAME);
851:       assertEquals(56, Node.CHANGE_TIME);
852:       assertEquals(49, Node.DIRECT_EVAL);
853:       assertEquals(37, Node.OPT_ARG_NAME);
854:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
855:       assertEquals(54, Node.SLASH_V);
856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
857:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
858:       assertEquals(50, Node.FREE_CALL);
859:       assertEquals(1, Node.DECR_FLAG);
860:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
861:       assertEquals(4095, Node.COLUMN_MASK);
862:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
863:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
864:       assertEquals(43, Node.IS_CONSTANT_NAME);
865:       assertEquals(40, Node.ORIGINALNAME_PROP);
866:       assertEquals(48, Node.DIRECTIVES);
867:       assertEquals(52, Node.LENGTH);
868:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
869:       assertEquals(36, Node.QUOTED_PROP);
870:       assertEquals(57, Node.REFLECTED_OBJECT);
871:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
872:       assertEquals(8, Node.FLAG_NO_THROWS);
873:       assertEquals(57, Node.LAST_PROP);
874:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
875:       assertEquals(55, Node.INFERRED_FUNCTION);
876:       assertEquals(29, Node.JSDOC_INFO_PROP);
877:       assertEquals(53, Node.INPUT_ID);
878:       assertEquals(15, Node.NO_SIDE_EFFECTS);
879:       assertEquals(39, Node.EMPTY_BLOCK);
880:       assertFalse(node0.equals((Object)node3));
881:       assertFalse(node0.equals((Object)node1));
882:       assertFalse(node0.equals((Object)node2));
883:       
884:       node3.addChildrenToFront(node0);
885:       assertEquals((-1), node0.getCharno());
886:       assertFalse(node0.isSwitch());
887:       assertFalse(node0.isCase());
888:       assertFalse(node0.isInc());
889:       assertFalse(node0.isIn());
890:       assertFalse(node0.isComma());
891:       assertFalse(node0.isNE());
892:       assertFalse(node0.isIf());
893:       assertFalse(node0.isBreak());
894:       assertFalse(node0.isDelProp());
895:       assertFalse(node0.isInstanceOf());
896:       assertFalse(node0.isGetProp());
897:       assertFalse(node0.isWith());
898:       assertFalse(node0.isFor());
899:       assertFalse(node0.isHook());
900:       assertFalse(node0.isThis());
901:       assertFalse(node0.isExprResult());
902:       assertFalse(node0.isTrue());
903:       assertFalse(node0.isVoid());
904:       assertFalse(node0.isTry());
905:       assertFalse(node0.isDefaultCase());
906:       assertFalse(node0.hasOneChild());
907:       assertFalse(node0.isArrayLit());
908:       assertFalse(node0.isScript());
909:       assertFalse(node0.isLabelName());
910:       assertFalse(node0.isGetterDef());
911:       assertFalse(node0.isParamList());
912:       assertFalse(node0.isAssignAdd());
913:       assertFalse(node0.isEmpty());
914:       assertEquals(0, node0.getChildCount());
915:       assertFalse(node0.isVar());
916:       assertFalse(node0.isLabel());
917:       assertTrue(node0.isString());
918:       assertFalse(node0.isDo());
919:       assertFalse(node0.isAdd());
920:       assertFalse(node0.isNew());
921:       assertFalse(node0.isStringKey());
922:       assertFalse(node0.isName());
923:       assertFalse(node0.isOr());
924:       assertFalse(node0.isNull());
925:       assertFalse(node0.isTypeOf());
926:       assertFalse(node0.isNumber());
927:       assertEquals((-1), node0.getLineno());
928:       assertFalse(node0.isGetElem());
929:       assertFalse(node0.isCall());
930:       assertFalse(node0.isCatch());
931:       assertFalse(node0.hasMoreThanOneChild());
932:       assertFalse(node0.hasChildren());
933:       assertFalse(node0.isWhile());
934:       assertFalse(node0.isAssign());
935:       assertFalse(node0.isDec());
936:       assertFalse(node0.isBlock());
937:       assertFalse(node0.isReturn());
938:       assertFalse(node0.isDebugger());
939:       assertFalse(node0.isRegExp());
940:       assertFalse(node0.isFunction());
941:       assertFalse(node0.isAnd());
942:       assertFalse(node0.isObjectLit());
943:       assertFalse(node0.isNot());
944:       assertEquals((-1), node0.getSourcePosition());
945:       assertFalse(node0.isSetterDef());
946:       assertFalse(node0.isContinue());
947:       assertFalse(node0.isThrow());
948:       assertFalse(node0.isCast());
949:       assertFalse(node0.isFalse());
950:       assertEquals(40, node0.getType());
951:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
952:       assertEquals(0, node1.getChildCount());
953:       assertFalse(node1.isRegExp());
954:       assertFalse(node1.isCatch());
955:       assertFalse(node1.isFunction());
956:       assertFalse(node1.isTry());
957:       assertFalse(node1.isSetterDef());
958:       assertFalse(node1.isDefaultCase());
959:       assertFalse(node1.isEmpty());
960:       assertFalse(node1.isCall());
961:       assertFalse(node1.isName());
962:       assertFalse(node1.isFor());
963:       assertFalse(node1.isTrue());
964:       assertFalse(node1.isVoid());
965:       assertFalse(node1.isIf());
966:       assertFalse(node1.isDelProp());
967:       assertFalse(node1.isNull());
968:       assertFalse(node1.isNE());
969:       assertFalse(node1.isIn());
970:       assertFalse(node1.isString());
971:       assertFalse(node1.isContinue());
972:       assertFalse(node1.isInc());
973:       assertFalse(node1.isReturn());
974:       assertFalse(node1.hasChildren());
975:       assertFalse(node1.isWhile());
976:       assertFalse(node1.isFalse());
977:       assertFalse(node1.isThrow());
978:       assertFalse(node1.isCast());
979:       assertEquals((-1), node1.getSourcePosition());
980:       assertFalse(node1.isDebugger());
981:       assertFalse(node1.isAnd());
982:       assertFalse(node1.isObjectLit());
983:       assertFalse(node1.isNot());
984:       assertFalse(node1.isInstanceOf());
985:       assertTrue(node1.isParamList());
986:       assertFalse(node1.isScript());
987:       assertFalse(node1.isWith());
988:       assertFalse(node1.isGetProp());
989:       assertFalse(node1.isComma());
990:       assertFalse(node1.isThis());
991:       assertFalse(node1.hasOneChild());
992:       assertFalse(node1.isGetElem());
993:       assertFalse(node1.isAssign());
994:       assertFalse(node1.isBreak());
995:       assertFalse(node1.isDec());
996:       assertFalse(node1.isTypeOf());
997:       assertEquals(83, node1.getType());
998:       assertFalse(node1.isExprResult());
999:       assertFalse(node1.isOr());
1000:       assertEquals((-1), node1.getLineno());
1001:       assertFalse(node1.isDo());
1002:       assertFalse(node1.isCase());
1003:       assertFalse(node1.hasMoreThanOneChild());
1004:       assertFalse(node1.isAdd());
1005:       assertFalse(node1.isBlock());
1006:       assertFalse(node1.isLabel());
1007:       assertFalse(node1.isNew());
1008:       assertFalse(node1.isHook());
1009:       assertFalse(node1.isVar());
1010:       assertFalse(node1.isAssignAdd());
1011:       assertFalse(node1.isStringKey());
1012:       assertFalse(node1.isLabelName());
1013:       assertFalse(node1.isArrayLit());
1014:       assertFalse(node1.isNumber());
1015:       assertFalse(node1.isGetterDef());
1016:       assertEquals((-1), node1.getCharno());
1017:       assertFalse(node1.isSwitch());
1018:       assertFalse(node3.isArrayLit());
1019:       assertFalse(node3.isTry());
1020:       assertFalse(node3.isDebugger());
1021:       assertFalse(node3.isTrue());
1022:       assertFalse(node3.isFor());
1023:       assertFalse(node3.isIf());
1024:       assertFalse(node3.isFunction());
1025:       assertFalse(node3.isDelProp());
1026:       assertFalse(node3.isRegExp());
1027:       assertFalse(node3.isVoid());
1028:       assertEquals(4095, node3.getType());
1029:       assertTrue(node3.hasChildren());
1030:       assertFalse(node3.isCatch());
1031:       assertFalse(node3.isIn());
1032:       assertFalse(node3.isNE());
1033:       assertFalse(node3.isNull());
1034:       assertFalse(node3.isDefaultCase());
1035:       assertFalse(node3.isEmpty());
1036:       assertFalse(node3.isSetterDef());
1037:       assertFalse(node3.isInc());
1038:       assertEquals((-1), node3.getCharno());
1039:       assertFalse(node3.isStringKey());
1040:       assertFalse(node3.isVar());
1041:       assertFalse(node3.isHook());
1042:       assertFalse(node3.isBlock());
1043:       assertFalse(node3.isSwitch());
1044:       assertFalse(node3.isInstanceOf());
1045:       assertFalse(node3.isParamList());
1046:       assertFalse(node3.isThis());
1047:       assertFalse(node3.isNumber());
1048:       assertFalse(node3.isGetterDef());
1049:       assertFalse(node3.isCase());
1050:       assertFalse(node3.isScript());
1051:       assertFalse(node3.hasOneChild());
1052:       assertFalse(node3.isDec());
1053:       assertFalse(node3.isAssign());
1054:       assertFalse(node3.isLabelName());
1055:       assertFalse(node3.isWith());
1056:       assertFalse(node3.isTypeOf());
1057:       assertFalse(node3.isCast());
1058:       assertFalse(node3.isGetElem());
1059:       assertFalse(node3.isExprResult());
1060:       assertEquals((-1), node3.getLineno());
1061:       assertFalse(node3.isOr());
1062:       assertFalse(node3.isAssignAdd());
1063:       assertEquals(2, node3.getChildCount());
1064:       assertFalse(node3.isLabel());
1065:       assertFalse(node3.isDo());
1066:       assertFalse(node3.isNew());
1067:       assertFalse(node3.isAdd());
1068:       assertFalse(node3.isThrow());
1069:       assertFalse(node3.isBreak());
1070:       assertTrue(node3.hasMoreThanOneChild());
1071:       assertFalse(node3.isName());
1072:       assertFalse(node3.isFalse());
1073:       assertFalse(node3.isContinue());
1074:       assertFalse(node3.isCall());
1075:       assertFalse(node3.isObjectLit());
1076:       assertFalse(node3.isAnd());
1077:       assertFalse(node3.isComma());
1078:       assertFalse(node3.isReturn());
1079:       assertEquals((-1), node3.getSourcePosition());
1080:       assertFalse(node3.isString());
1081:       assertFalse(node3.isWhile());
1082:       assertFalse(node3.isNot());
1083:       assertFalse(node3.isGetProp());
1084:       assertNotSame(node0, node2);
1085:       assertNotSame(node1, node3);
1086:       assertNotSame(node3, node1);
1087:       assertEquals(0, jSTypeArray0.length);
1088:       assertEquals(32, Node.INCRDECR_PROP);
1089:       assertEquals(46, Node.IS_NAMESPACE);
1090:       assertEquals(2, Node.POST_FLAG);
1091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1092:       assertEquals(12, Node.COLUMN_BITS);
1093:       assertEquals(47, Node.IS_DISPATCHER);
1094:       assertEquals(30, Node.VAR_ARGS_NAME);
1095:       assertEquals(56, Node.CHANGE_TIME);
1096:       assertEquals(49, Node.DIRECT_EVAL);
1097:       assertEquals(37, Node.OPT_ARG_NAME);
1098:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1099:       assertEquals(54, Node.SLASH_V);
1100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1102:       assertEquals(50, Node.FREE_CALL);
1103:       assertEquals(1, Node.DECR_FLAG);
1104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1105:       assertEquals(4095, Node.COLUMN_MASK);
1106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1108:       assertEquals(43, Node.IS_CONSTANT_NAME);
1109:       assertEquals(40, Node.ORIGINALNAME_PROP);
1110:       assertEquals(48, Node.DIRECTIVES);
1111:       assertEquals(52, Node.LENGTH);
1112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1113:       assertEquals(36, Node.QUOTED_PROP);
1114:       assertEquals(57, Node.REFLECTED_OBJECT);
1115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1116:       assertEquals(8, Node.FLAG_NO_THROWS);
1117:       assertEquals(57, Node.LAST_PROP);
1118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1119:       assertEquals(55, Node.INFERRED_FUNCTION);
1120:       assertEquals(29, Node.JSDOC_INFO_PROP);
1121:       assertEquals(53, Node.INPUT_ID);
1122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1123:       assertEquals(39, Node.EMPTY_BLOCK);
1124:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1125:       assertEquals(39, Node.EMPTY_BLOCK);
1126:       assertEquals(48, Node.DIRECTIVES);
1127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1128:       assertEquals(57, Node.REFLECTED_OBJECT);
1129:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1130:       assertEquals(50, Node.FREE_CALL);
1131:       assertEquals(55, Node.INFERRED_FUNCTION);
1132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1133:       assertEquals(52, Node.LENGTH);
1134:       assertEquals(8, Node.FLAG_NO_THROWS);
1135:       assertEquals(36, Node.QUOTED_PROP);
1136:       assertEquals(1, Node.DECR_FLAG);
1137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1138:       assertEquals(49, Node.DIRECT_EVAL);
1139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1140:       assertEquals(12, Node.COLUMN_BITS);
1141:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1142:       assertEquals(4095, Node.COLUMN_MASK);
1143:       assertEquals(56, Node.CHANGE_TIME);
1144:       assertEquals(47, Node.IS_DISPATCHER);
1145:       assertEquals(2, Node.POST_FLAG);
1146:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1147:       assertEquals(37, Node.OPT_ARG_NAME);
1148:       assertEquals(32, Node.INCRDECR_PROP);
1149:       assertEquals(46, Node.IS_NAMESPACE);
1150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1151:       assertEquals(29, Node.JSDOC_INFO_PROP);
1152:       assertEquals(53, Node.INPUT_ID);
1153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1155:       assertEquals(57, Node.LAST_PROP);
1156:       assertEquals(30, Node.VAR_ARGS_NAME);
1157:       assertEquals(54, Node.SLASH_V);
1158:       assertEquals(43, Node.IS_CONSTANT_NAME);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(4095, Node.COLUMN_MASK);
1161:       assertEquals(55, Node.INFERRED_FUNCTION);
1162:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1164:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1165:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1166:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1167:       assertEquals(29, Node.JSDOC_INFO_PROP);
1168:       assertEquals(39, Node.EMPTY_BLOCK);
1169:       assertEquals(53, Node.INPUT_ID);
1170:       assertEquals(48, Node.DIRECTIVES);
1171:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1172:       assertEquals(37, Node.OPT_ARG_NAME);
1173:       assertEquals(52, Node.LENGTH);
1174:       assertEquals(8, Node.FLAG_NO_THROWS);
1175:       assertEquals(56, Node.CHANGE_TIME);
1176:       assertEquals(36, Node.QUOTED_PROP);
1177:       assertEquals(57, Node.REFLECTED_OBJECT);
1178:       assertEquals(1, Node.DECR_FLAG);
1179:       assertEquals(30, Node.VAR_ARGS_NAME);
1180:       assertEquals(49, Node.DIRECT_EVAL);
1181:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1182:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1183:       assertEquals(2, Node.POST_FLAG);
1184:       assertEquals(32, Node.INCRDECR_PROP);
1185:       assertEquals(57, Node.LAST_PROP);
1186:       assertEquals(47, Node.IS_DISPATCHER);
1187:       assertEquals(12, Node.COLUMN_BITS);
1188:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1189:       assertEquals(50, Node.FREE_CALL);
1190:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1191:       assertEquals(40, Node.ORIGINALNAME_PROP);
1192:       assertEquals(54, Node.SLASH_V);
1193:       assertEquals(46, Node.IS_NAMESPACE);
1194:       assertEquals(43, Node.IS_CONSTANT_NAME);
1195:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1196:       assertFalse(node0.equals((Object)node3));
1197:       assertFalse(node0.equals((Object)node1));
1198:       assertFalse(node0.equals((Object)node2));
1199:       assertFalse(node1.equals((Object)node2));
1200:       assertFalse(node1.equals((Object)node3));
1201:       assertFalse(node1.equals((Object)node0));
1202:       assertFalse(node3.equals((Object)node0));
1203:       assertFalse(node3.equals((Object)node2));
1204:       assertFalse(node3.equals((Object)node1));
1205:       
1206:       boolean boolean0 = node0.isDo();
1207:       assertEquals((-1), node0.getCharno());
1208:       assertFalse(node0.isSwitch());
1209:       assertFalse(node0.isCase());
1210:       assertFalse(node0.isInc());
1211:       assertFalse(node0.isIn());
1212:       assertFalse(node0.isComma());
1213:       assertFalse(node0.isNE());
1214:       assertFalse(node0.isIf());
1215:       assertFalse(node0.isBreak());
1216:       assertFalse(node0.isDelProp());
1217:       assertFalse(node0.isInstanceOf());
1218:       assertFalse(node0.isGetProp());
1219:       assertFalse(node0.isWith());
1220:       assertFalse(node0.isFor());
1221:       assertFalse(node0.isHook());
1222:       assertFalse(node0.isThis());
1223:       assertFalse(node0.isExprResult());
1224:       assertFalse(node0.isTrue());
1225:       assertFalse(node0.isVoid());
1226:       assertFalse(node0.isTry());
1227:       assertFalse(node0.isDefaultCase());
1228:       assertFalse(node0.hasOneChild());
1229:       assertFalse(node0.isArrayLit());
1230:       assertFalse(node0.isScript());
1231:       assertFalse(node0.isLabelName());
1232:       assertFalse(node0.isGetterDef());
1233:       assertFalse(node0.isParamList());
1234:       assertFalse(node0.isAssignAdd());
1235:       assertFalse(node0.isEmpty());
1236:       assertEquals(0, node0.getChildCount());
1237:       assertFalse(node0.isVar());
1238:       assertFalse(node0.isLabel());
1239:       assertTrue(node0.isString());
1240:       assertFalse(node0.isDo());
1241:       assertFalse(node0.isAdd());
1242:       assertFalse(node0.isNew());
1243:       assertFalse(node0.isStringKey());
1244:       assertFalse(node0.isName());
1245:       assertFalse(node0.isOr());
1246:       assertFalse(node0.isNull());
1247:       assertFalse(node0.isTypeOf());
1248:       assertFalse(node0.isNumber());
1249:       assertEquals((-1), node0.getLineno());
1250:       assertFalse(node0.isGetElem());
1251:       assertFalse(node0.isCall());
1252:       assertFalse(node0.isCatch());
1253:       assertFalse(node0.hasMoreThanOneChild());
1254:       assertFalse(node0.hasChildren());
1255:       assertFalse(node0.isWhile());
1256:       assertFalse(node0.isAssign());
1257:       assertFalse(node0.isDec());
1258:       assertFalse(node0.isBlock());
1259:       assertFalse(node0.isReturn());
1260:       assertFalse(node0.isDebugger());
1261:       assertFalse(node0.isRegExp());
1262:       assertFalse(node0.isFunction());
1263:       assertFalse(node0.isAnd());
1264:       assertFalse(node0.isObjectLit());
1265:       assertFalse(node0.isNot());
1266:       assertEquals((-1), node0.getSourcePosition());
1267:       assertFalse(node0.isSetterDef());
1268:       assertFalse(node0.isContinue());
1269:       assertFalse(node0.isThrow());
1270:       assertFalse(node0.isCast());
1271:       assertFalse(node0.isFalse());
1272:       assertEquals(40, node0.getType());
1273:       assertFalse(boolean0);
1274:       assertNotSame(node0, node2);
1275:       assertEquals(32, Node.INCRDECR_PROP);
1276:       assertEquals(46, Node.IS_NAMESPACE);
1277:       assertEquals(2, Node.POST_FLAG);
1278:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1279:       assertEquals(12, Node.COLUMN_BITS);
1280:       assertEquals(47, Node.IS_DISPATCHER);
1281:       assertEquals(30, Node.VAR_ARGS_NAME);
1282:       assertEquals(56, Node.CHANGE_TIME);
1283:       assertEquals(49, Node.DIRECT_EVAL);
1284:       assertEquals(37, Node.OPT_ARG_NAME);
1285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1286:       assertEquals(54, Node.SLASH_V);
1287:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1288:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1289:       assertEquals(50, Node.FREE_CALL);
1290:       assertEquals(1, Node.DECR_FLAG);
1291:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1292:       assertEquals(4095, Node.COLUMN_MASK);
1293:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1294:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1295:       assertEquals(43, Node.IS_CONSTANT_NAME);
1296:       assertEquals(40, Node.ORIGINALNAME_PROP);
1297:       assertEquals(48, Node.DIRECTIVES);
1298:       assertEquals(52, Node.LENGTH);
1299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1300:       assertEquals(36, Node.QUOTED_PROP);
1301:       assertEquals(57, Node.REFLECTED_OBJECT);
1302:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1303:       assertEquals(8, Node.FLAG_NO_THROWS);
1304:       assertEquals(57, Node.LAST_PROP);
1305:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1306:       assertEquals(55, Node.INFERRED_FUNCTION);
1307:       assertEquals(29, Node.JSDOC_INFO_PROP);
1308:       assertEquals(53, Node.INPUT_ID);
1309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1310:       assertEquals(39, Node.EMPTY_BLOCK);
1311:       assertFalse(node0.equals((Object)node3));
1312:       assertFalse(node0.equals((Object)node1));
1313:       assertFalse(node0.equals((Object)node2));
1314:       
1315:       Iterable<Node> iterable0 = node0.children();
1316:       assertNotNull(iterable0);
1317:       assertEquals((-1), node0.getCharno());
1318:       assertFalse(node0.isSwitch());
1319:       assertFalse(node0.isCase());
1320:       assertFalse(node0.isInc());
1321:       assertFalse(node0.isIn());
1322:       assertFalse(node0.isComma());
1323:       assertFalse(node0.isNE());
1324:       assertFalse(node0.isIf());
1325:       assertFalse(node0.isBreak());
1326:       assertFalse(node0.isDelProp());
1327:       assertFalse(node0.isInstanceOf());
1328:       assertFalse(node0.isGetProp());
1329:       assertFalse(node0.isWith());
1330:       assertFalse(node0.isFor());
1331:       assertFalse(node0.isHook());
1332:       assertFalse(node0.isThis());
1333:       assertFalse(node0.isExprResult());
1334:       assertFalse(node0.isTrue());
1335:       assertFalse(node0.isVoid());
1336:       assertFalse(node0.isTry());
1337:       assertFalse(node0.isDefaultCase());
1338:       assertFalse(node0.hasOneChild());
1339:       assertFalse(node0.isArrayLit());
1340:       assertFalse(node0.isScript());
1341:       assertFalse(node0.isLabelName());
1342:       assertFalse(node0.isGetterDef());
1343:       assertFalse(node0.isParamList());
1344:       assertFalse(node0.isAssignAdd());
1345:       assertFalse(node0.isEmpty());
1346:       assertEquals(0, node0.getChildCount());
1347:       assertFalse(node0.isVar());
1348:       assertFalse(node0.isLabel());
1349:       assertTrue(node0.isString());
1350:       assertFalse(node0.isDo());
1351:       assertFalse(node0.isAdd());
1352:       assertFalse(node0.isNew());
1353:       assertFalse(node0.isStringKey());
1354:       assertFalse(node0.isName());
1355:       assertFalse(node0.isOr());
1356:       assertFalse(node0.isNull());
1357:       assertFalse(node0.isTypeOf());
1358:       assertFalse(node0.isNumber());
1359:       assertEquals((-1), node0.getLineno());
1360:       assertFalse(node0.isGetElem());
1361:       assertFalse(node0.isCall());
1362:       assertFalse(node0.isCatch());
1363:       assertFalse(node0.hasMoreThanOneChild());
1364:       assertFalse(node0.hasChildren());
1365:       assertFalse(node0.isWhile());
1366:       assertFalse(node0.isAssign());
1367:       assertFalse(node0.isDec());
1368:       assertFalse(node0.isBlock());
1369:       assertFalse(node0.isReturn());
1370:       assertFalse(node0.isDebugger());
1371:       assertFalse(node0.isRegExp());
1372:       assertFalse(node0.isFunction());
1373:       assertFalse(node0.isAnd());
1374:       assertFalse(node0.isObjectLit());
1375:       assertFalse(node0.isNot());
1376:       assertEquals((-1), node0.getSourcePosition());
1377:       assertFalse(node0.isSetterDef());
1378:       assertFalse(node0.isContinue());
1379:       assertFalse(node0.isThrow());
1380:       assertFalse(node0.isCast());
1381:       assertFalse(node0.isFalse());
1382:       assertEquals(40, node0.getType());
1383:       assertNotSame(node0, node2);
1384:       assertEquals(32, Node.INCRDECR_PROP);
1385:       assertEquals(46, Node.IS_NAMESPACE);
1386:       assertEquals(2, Node.POST_FLAG);
1387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1388:       assertEquals(12, Node.COLUMN_BITS);
1389:       assertEquals(47, Node.IS_DISPATCHER);
1390:       assertEquals(30, Node.VAR_ARGS_NAME);
1391:       assertEquals(56, Node.CHANGE_TIME);
1392:       assertEquals(49, Node.DIRECT_EVAL);
1393:       assertEquals(37, Node.OPT_ARG_NAME);
1394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1395:       assertEquals(54, Node.SLASH_V);
1396:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1397:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1398:       assertEquals(50, Node.FREE_CALL);
1399:       assertEquals(1, Node.DECR_FLAG);
1400:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1401:       assertEquals(4095, Node.COLUMN_MASK);
1402:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1403:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1404:       assertEquals(43, Node.IS_CONSTANT_NAME);
1405:       assertEquals(40, Node.ORIGINALNAME_PROP);
1406:       assertEquals(48, Node.DIRECTIVES);
1407:       assertEquals(52, Node.LENGTH);
1408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1409:       assertEquals(36, Node.QUOTED_PROP);
1410:       assertEquals(57, Node.REFLECTED_OBJECT);
1411:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1412:       assertEquals(8, Node.FLAG_NO_THROWS);
1413:       assertEquals(57, Node.LAST_PROP);
1414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1415:       assertEquals(55, Node.INFERRED_FUNCTION);
1416:       assertEquals(29, Node.JSDOC_INFO_PROP);
1417:       assertEquals(53, Node.INPUT_ID);
1418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1419:       assertEquals(39, Node.EMPTY_BLOCK);
1420:       assertFalse(iterable0.contains(node0));
1421:       assertFalse(node0.equals((Object)node3));
1422:       assertFalse(node0.equals((Object)node1));
1423:       assertFalse(node0.equals((Object)node2));
1424:       
1425:       Node.AncestorIterable node_AncestorIterable0 = node3.getAncestors();
1426:       assertNotNull(node_AncestorIterable0);
1427:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1428:       assertEquals(0, node1.getChildCount());
1429:       assertFalse(node1.isRegExp());
1430:       assertFalse(node1.isCatch());
1431:       assertFalse(node1.isFunction());
1432:       assertFalse(node1.isTry());
1433:       assertFalse(node1.isSetterDef());
1434:       assertFalse(node1.isDefaultCase());
1435:       assertFalse(node1.isEmpty());
1436:       assertFalse(node1.isCall());
1437:       assertFalse(node1.isName());
1438:       assertFalse(node1.isFor());
1439:       assertFalse(node1.isTrue());
1440:       assertFalse(node1.isVoid());
1441:       assertFalse(node1.isIf());
1442:       assertFalse(node1.isDelProp());
1443:       assertFalse(node1.isNull());
1444:       assertFalse(node1.isNE());
1445:       assertFalse(node1.isIn());
1446:       assertFalse(node1.isString());
1447:       assertFalse(node1.isContinue());
1448:       assertFalse(node1.isInc());
1449:       assertFalse(node1.isReturn());
1450:       assertFalse(node1.hasChildren());
1451:       assertFalse(node1.isWhile());
1452:       assertFalse(node1.isFalse());
1453:       assertFalse(node1.isThrow());
1454:       assertFalse(node1.isCast());
1455:       assertEquals((-1), node1.getSourcePosition());
1456:       assertFalse(node1.isDebugger());
1457:       assertFalse(node1.isAnd());
1458:       assertFalse(node1.isObjectLit());
1459:       assertFalse(node1.isNot());
1460:       assertFalse(node1.isInstanceOf());
1461:       assertTrue(node1.isParamList());
1462:       assertFalse(node1.isScript());
1463:       assertFalse(node1.isWith());
1464:       assertFalse(node1.isGetProp());
1465:       assertFalse(node1.isComma());
1466:       assertFalse(node1.isThis());
1467:       assertFalse(node1.hasOneChild());
1468:       assertFalse(node1.isGetElem());
1469:       assertFalse(node1.isAssign());
1470:       assertFalse(node1.isBreak());
1471:       assertFalse(node1.isDec());
1472:       assertFalse(node1.isTypeOf());
1473:       assertEquals(83, node1.getType());
1474:       assertFalse(node1.isExprResult());
1475:       assertFalse(node1.isOr());
1476:       assertEquals((-1), node1.getLineno());
1477:       assertFalse(node1.isDo());
1478:       assertFalse(node1.isCase());
1479:       assertFalse(node1.hasMoreThanOneChild());
1480:       assertFalse(node1.isAdd());
1481:       assertFalse(node1.isBlock());
1482:       assertFalse(node1.isLabel());
1483:       assertFalse(node1.isNew());
1484:       assertFalse(node1.isHook());
1485:       assertFalse(node1.isVar());
1486:       assertFalse(node1.isAssignAdd());
1487:       assertFalse(node1.isStringKey());
1488:       assertFalse(node1.isLabelName());
1489:       assertFalse(node1.isArrayLit());
1490:       assertFalse(node1.isNumber());
1491:       assertFalse(node1.isGetterDef());
1492:       assertEquals((-1), node1.getCharno());
1493:       assertFalse(node1.isSwitch());
1494:       assertFalse(node3.isArrayLit());
1495:       assertFalse(node3.isTry());
1496:       assertFalse(node3.isDebugger());
1497:       assertFalse(node3.isTrue());
1498:       assertFalse(node3.isFor());
1499:       assertFalse(node3.isIf());
1500:       assertFalse(node3.isFunction());
1501:       assertFalse(node3.isDelProp());
1502:       assertFalse(node3.isRegExp());
1503:       assertFalse(node3.isVoid());
1504:       assertEquals(4095, node3.getType());
1505:       assertTrue(node3.hasChildren());
1506:       assertFalse(node3.isCatch());
1507:       assertFalse(node3.isIn());
1508:       assertFalse(node3.isNE());
1509:       assertFalse(node3.isNull());
1510:       assertFalse(node3.isDefaultCase());
1511:       assertFalse(node3.isEmpty());
1512:       assertFalse(node3.isSetterDef());
1513:       assertFalse(node3.isInc());
1514:       assertEquals((-1), node3.getCharno());
1515:       assertFalse(node3.isStringKey());
1516:       assertFalse(node3.isVar());
1517:       assertFalse(node3.isHook());
1518:       assertFalse(node3.isBlock());
1519:       assertFalse(node3.isSwitch());
1520:       assertFalse(node3.isInstanceOf());
1521:       assertFalse(node3.isParamList());
1522:       assertFalse(node3.isThis());
1523:       assertFalse(node3.isNumber());
1524:       assertFalse(node3.isGetterDef());
1525:       assertFalse(node3.isCase());
1526:       assertFalse(node3.isScript());
1527:       assertFalse(node3.hasOneChild());
1528:       assertFalse(node3.isDec());
1529:       assertFalse(node3.isAssign());
1530:       assertFalse(node3.isLabelName());
1531:       assertFalse(node3.isWith());
1532:       assertFalse(node3.isTypeOf());
1533:       assertFalse(node3.isCast());
1534:       assertFalse(node3.isGetElem());
1535:       assertFalse(node3.isExprResult());
1536:       assertEquals((-1), node3.getLineno());
1537:       assertFalse(node3.isOr());
1538:       assertFalse(node3.isAssignAdd());
1539:       assertEquals(2, node3.getChildCount());
1540:       assertFalse(node3.isLabel());
1541:       assertFalse(node3.isDo());
1542:       assertFalse(node3.isNew());
1543:       assertFalse(node3.isAdd());
1544:       assertFalse(node3.isThrow());
1545:       assertFalse(node3.isBreak());
1546:       assertTrue(node3.hasMoreThanOneChild());
1547:       assertFalse(node3.isName());
1548:       assertFalse(node3.isFalse());
1549:       assertFalse(node3.isContinue());
1550:       assertFalse(node3.isCall());
1551:       assertFalse(node3.isObjectLit());
1552:       assertFalse(node3.isAnd());
1553:       assertFalse(node3.isComma());
1554:       assertFalse(node3.isReturn());
1555:       assertEquals((-1), node3.getSourcePosition());
1556:       assertFalse(node3.isString());
1557:       assertFalse(node3.isWhile());
1558:       assertFalse(node3.isNot());
1559:       assertFalse(node3.isGetProp());
1560:       assertNotSame(node1, node3);
1561:       assertNotSame(node3, node1);
1562:       assertEquals(0, jSTypeArray0.length);
1563:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1564:       assertEquals(39, Node.EMPTY_BLOCK);
1565:       assertEquals(48, Node.DIRECTIVES);
1566:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1567:       assertEquals(57, Node.REFLECTED_OBJECT);
1568:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1569:       assertEquals(50, Node.FREE_CALL);
1570:       assertEquals(55, Node.INFERRED_FUNCTION);
1571:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1572:       assertEquals(52, Node.LENGTH);
1573:       assertEquals(8, Node.FLAG_NO_THROWS);
1574:       assertEquals(36, Node.QUOTED_PROP);
1575:       assertEquals(1, Node.DECR_FLAG);
1576:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1577:       assertEquals(49, Node.DIRECT_EVAL);
1578:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1579:       assertEquals(12, Node.COLUMN_BITS);
1580:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1581:       assertEquals(4095, Node.COLUMN_MASK);
1582:       assertEquals(56, Node.CHANGE_TIME);
1583:       assertEquals(47, Node.IS_DISPATCHER);
1584:       assertEquals(2, Node.POST_FLAG);
1585:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1586:       assertEquals(37, Node.OPT_ARG_NAME);
1587:       assertEquals(32, Node.INCRDECR_PROP);
1588:       assertEquals(46, Node.IS_NAMESPACE);
1589:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1590:       assertEquals(29, Node.JSDOC_INFO_PROP);
1591:       assertEquals(53, Node.INPUT_ID);
1592:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1593:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1594:       assertEquals(57, Node.LAST_PROP);
1595:       assertEquals(30, Node.VAR_ARGS_NAME);
1596:       assertEquals(54, Node.SLASH_V);
1597:       assertEquals(43, Node.IS_CONSTANT_NAME);
1598:       assertEquals(40, Node.ORIGINALNAME_PROP);
1599:       assertEquals(4095, Node.COLUMN_MASK);
1600:       assertEquals(55, Node.INFERRED_FUNCTION);
1601:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1602:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1603:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1604:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1605:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1606:       assertEquals(29, Node.JSDOC_INFO_PROP);
1607:       assertEquals(39, Node.EMPTY_BLOCK);
1608:       assertEquals(53, Node.INPUT_ID);
1609:       assertEquals(48, Node.DIRECTIVES);
1610:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1611:       assertEquals(37, Node.OPT_ARG_NAME);
1612:       assertEquals(52, Node.LENGTH);
1613:       assertEquals(8, Node.FLAG_NO_THROWS);
1614:       assertEquals(56, Node.CHANGE_TIME);
1615:       assertEquals(36, Node.QUOTED_PROP);
1616:       assertEquals(57, Node.REFLECTED_OBJECT);
1617:       assertEquals(1, Node.DECR_FLAG);
1618:       assertEquals(30, Node.VAR_ARGS_NAME);
1619:       assertEquals(49, Node.DIRECT_EVAL);
1620:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1621:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1622:       assertEquals(2, Node.POST_FLAG);
1623:       assertEquals(32, Node.INCRDECR_PROP);
1624:       assertEquals(57, Node.LAST_PROP);
1625:       assertEquals(47, Node.IS_DISPATCHER);
1626:       assertEquals(12, Node.COLUMN_BITS);
1627:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1628:       assertEquals(50, Node.FREE_CALL);
1629:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1630:       assertEquals(40, Node.ORIGINALNAME_PROP);
1631:       assertEquals(54, Node.SLASH_V);
1632:       assertEquals(46, Node.IS_NAMESPACE);
1633:       assertEquals(43, Node.IS_CONSTANT_NAME);
1634:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1635:       assertFalse(node1.equals((Object)node2));
1636:       assertFalse(node1.equals((Object)node3));
1637:       assertFalse(node1.equals((Object)node0));
1638:       assertFalse(node3.equals((Object)node0));
1639:       assertFalse(node3.equals((Object)node2));
1640:       assertFalse(node3.equals((Object)node1));
1641:       
1642:       boolean boolean1 = node0.isUnscopedQualifiedName();
1643:       assertEquals((-1), node0.getCharno());
1644:       assertFalse(node0.isSwitch());
1645:       assertFalse(node0.isCase());
1646:       assertFalse(node0.isInc());
1647:       assertFalse(node0.isIn());
1648:       assertFalse(node0.isComma());
1649:       assertFalse(node0.isNE());
1650:       assertFalse(node0.isIf());
1651:       assertFalse(node0.isBreak());
1652:       assertFalse(node0.isDelProp());
1653:       assertFalse(node0.isInstanceOf());
1654:       assertFalse(node0.isGetProp());
1655:       assertFalse(node0.isWith());
1656:       assertFalse(node0.isFor());
1657:       assertFalse(node0.isHook());
1658:       assertFalse(node0.isThis());
1659:       assertFalse(node0.isExprResult());
1660:       assertFalse(node0.isTrue());
1661:       assertFalse(node0.isVoid());
1662:       assertFalse(node0.isTry());
1663:       assertFalse(node0.isDefaultCase());
1664:       assertFalse(node0.hasOneChild());
1665:       assertFalse(node0.isArrayLit());
1666:       assertFalse(node0.isScript());
1667:       assertFalse(node0.isLabelName());
1668:       assertFalse(node0.isGetterDef());
1669:       assertFalse(node0.isParamList());
1670:       assertFalse(node0.isAssignAdd());
1671:       assertFalse(node0.isEmpty());
1672:       assertEquals(0, node0.getChildCount());
1673:       assertFalse(node0.isVar());
1674:       assertFalse(node0.isLabel());
1675:       assertTrue(node0.isString());
1676:       assertFalse(node0.isDo());
1677:       assertFalse(node0.isAdd());
1678:       assertFalse(node0.isNew());
1679:       assertFalse(node0.isStringKey());
1680:       assertFalse(node0.isName());
1681:       assertFalse(node0.isOr());
1682:       assertFalse(node0.isNull());
1683:       assertFalse(node0.isTypeOf());
1684:       assertFalse(node0.isNumber());
1685:       assertEquals((-1), node0.getLineno());
1686:       assertFalse(node0.isGetElem());
1687:       assertFalse(node0.isCall());
1688:       assertFalse(node0.isCatch());
1689:       assertFalse(node0.hasMoreThanOneChild());
1690:       assertFalse(node0.hasChildren());
1691:       assertFalse(node0.isWhile());
1692:       assertFalse(node0.isAssign());
1693:       assertFalse(node0.isDec());
1694:       assertFalse(node0.isBlock());
1695:       assertFalse(node0.isReturn());
1696:       assertFalse(node0.isDebugger());
1697:       assertFalse(node0.isRegExp());
1698:       assertFalse(node0.isFunction());
1699:       assertFalse(node0.isAnd());
1700:       assertFalse(node0.isObjectLit());
1701:       assertFalse(node0.isNot());
1702:       assertEquals((-1), node0.getSourcePosition());
1703:       assertFalse(node0.isSetterDef());
1704:       assertFalse(node0.isContinue());
1705:       assertFalse(node0.isThrow());
1706:       assertFalse(node0.isCast());
1707:       assertFalse(node0.isFalse());
1708:       assertEquals(40, node0.getType());
1709:       assertFalse(boolean1);
1710:       assertNotSame(node0, node2);
1711:       assertEquals(32, Node.INCRDECR_PROP);
1712:       assertEquals(46, Node.IS_NAMESPACE);
1713:       assertEquals(2, Node.POST_FLAG);
1714:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1715:       assertEquals(12, Node.COLUMN_BITS);
1716:       assertEquals(47, Node.IS_DISPATCHER);
1717:       assertEquals(30, Node.VAR_ARGS_NAME);
1718:       assertEquals(56, Node.CHANGE_TIME);
1719:       assertEquals(49, Node.DIRECT_EVAL);
1720:       assertEquals(37, Node.OPT_ARG_NAME);
1721:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1722:       assertEquals(54, Node.SLASH_V);
1723:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1725:       assertEquals(50, Node.FREE_CALL);
1726:       assertEquals(1, Node.DECR_FLAG);
1727:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1728:       assertEquals(4095, Node.COLUMN_MASK);
1729:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1730:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1731:       assertEquals(43, Node.IS_CONSTANT_NAME);
1732:       assertEquals(40, Node.ORIGINALNAME_PROP);
1733:       assertEquals(48, Node.DIRECTIVES);
1734:       assertEquals(52, Node.LENGTH);
1735:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1736:       assertEquals(36, Node.QUOTED_PROP);
1737:       assertEquals(57, Node.REFLECTED_OBJECT);
1738:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1739:       assertEquals(8, Node.FLAG_NO_THROWS);
1740:       assertEquals(57, Node.LAST_PROP);
1741:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1742:       assertEquals(55, Node.INFERRED_FUNCTION);
1743:       assertEquals(29, Node.JSDOC_INFO_PROP);
1744:       assertEquals(53, Node.INPUT_ID);
1745:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1746:       assertEquals(39, Node.EMPTY_BLOCK);
1747:       assertFalse(node0.equals((Object)node3));
1748:       assertFalse(node0.equals((Object)node1));
1749:       assertFalse(node0.equals((Object)node2));
1750:       assertTrue(boolean1 == boolean0);
1751:       
1752:       boolean boolean2 = node3.isEquivalentTo(node0);
1753:       assertEquals((-1), node0.getCharno());
1754:       assertFalse(node0.isSwitch());
1755:       assertFalse(node0.isCase());
1756:       assertFalse(node0.isInc());
1757:       assertFalse(node0.isIn());
1758:       assertFalse(node0.isComma());
1759:       assertFalse(node0.isNE());
1760:       assertFalse(node0.isIf());
1761:       assertFalse(node0.isBreak());
1762:       assertFalse(node0.isDelProp());
1763:       assertFalse(node0.isInstanceOf());
1764:       assertFalse(node0.isGetProp());
1765:       assertFalse(node0.isWith());
1766:       assertFalse(node0.isFor());
1767:       assertFalse(node0.isHook());
1768:       assertFalse(node0.isThis());
1769:       assertFalse(node0.isExprResult());
1770:       assertFalse(node0.isTrue());
1771:       assertFalse(node0.isVoid());
1772:       assertFalse(node0.isTry());
1773:       assertFalse(node0.isDefaultCase());
1774:       assertFalse(node0.hasOneChild());
1775:       assertFalse(node0.isArrayLit());
1776:       assertFalse(node0.isScript());
1777:       assertFalse(node0.isLabelName());
1778:       assertFalse(node0.isGetterDef());
1779:       assertFalse(node0.isParamList());
1780:       assertFalse(node0.isAssignAdd());
1781:       assertFalse(node0.isEmpty());
1782:       assertEquals(0, node0.getChildCount());
1783:       assertFalse(node0.isVar());
1784:       assertFalse(node0.isLabel());
1785:       assertTrue(node0.isString());
1786:       assertFalse(node0.isDo());
1787:       assertFalse(node0.isAdd());
1788:       assertFalse(node0.isNew());
1789:       assertFalse(node0.isStringKey());
1790:       assertFalse(node0.isName());
1791:       assertFalse(node0.isOr());
1792:       assertFalse(node0.isNull());
1793:       assertFalse(node0.isTypeOf());
1794:       assertFalse(node0.isNumber());
1795:       assertEquals((-1), node0.getLineno());
1796:       assertFalse(node0.isGetElem());
1797:       assertFalse(node0.isCall());
1798:       assertFalse(node0.isCatch());
1799:       assertFalse(node0.hasMoreThanOneChild());
1800:       assertFalse(node0.hasChildren());
1801:       assertFalse(node0.isWhile());
1802:       assertFalse(node0.isAssign());
1803:       assertFalse(node0.isDec());
1804:       assertFalse(node0.isBlock());
1805:       assertFalse(node0.isReturn());
1806:       assertFalse(node0.isDebugger());
1807:       assertFalse(node0.isRegExp());
1808:       assertFalse(node0.isFunction());
1809:       assertFalse(node0.isAnd());
1810:       assertFalse(node0.isObjectLit());
1811:       assertFalse(node0.isNot());
1812:       assertEquals((-1), node0.getSourcePosition());
1813:       assertFalse(node0.isSetterDef());
1814:       assertFalse(node0.isContinue());
1815:       assertFalse(node0.isThrow());
1816:       assertFalse(node0.isCast());
1817:       assertFalse(node0.isFalse());
1818:       assertEquals(40, node0.getType());
1819:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1820:       assertEquals(0, node1.getChildCount());
1821:       assertFalse(node1.isRegExp());
1822:       assertFalse(node1.isCatch());
1823:       assertFalse(node1.isFunction());
1824:       assertFalse(node1.isTry());
1825:       assertFalse(node1.isSetterDef());
1826:       assertFalse(node1.isDefaultCase());
1827:       assertFalse(node1.isEmpty());
1828:       assertFalse(node1.isCall());
1829:       assertFalse(node1.isName());
1830:       assertFalse(node1.isFor());
1831:       assertFalse(node1.isTrue());
1832:       assertFalse(node1.isVoid());
1833:       assertFalse(node1.isIf());
1834:       assertFalse(node1.isDelProp());
1835:       assertFalse(node1.isNull());
1836:       assertFalse(node1.isNE());
1837:       assertFalse(node1.isIn());
1838:       assertFalse(node1.isString());
1839:       assertFalse(node1.isContinue());
1840:       assertFalse(node1.isInc());
1841:       assertFalse(node1.isReturn());
1842:       assertFalse(node1.hasChildren());
1843:       assertFalse(node1.isWhile());
1844:       assertFalse(node1.isFalse());
1845:       assertFalse(node1.isThrow());
1846:       assertFalse(node1.isCast());
1847:       assertEquals((-1), node1.getSourcePosition());
1848:       assertFalse(node1.isDebugger());
1849:       assertFalse(node1.isAnd());
1850:       assertFalse(node1.isObjectLit());
1851:       assertFalse(node1.isNot());
1852:       assertFalse(node1.isInstanceOf());
1853:       assertTrue(node1.isParamList());
1854:       assertFalse(node1.isScript());
1855:       assertFalse(node1.isWith());
1856:       assertFalse(node1.isGetProp());
1857:       assertFalse(node1.isComma());
1858:       assertFalse(node1.isThis());
1859:       assertFalse(node1.hasOneChild());
1860:       assertFalse(node1.isGetElem());
1861:       assertFalse(node1.isAssign());
1862:       assertFalse(node1.isBreak());
1863:       assertFalse(node1.isDec());
1864:       assertFalse(node1.isTypeOf());
1865:       assertEquals(83, node1.getType());
1866:       assertFalse(node1.isExprResult());
1867:       assertFalse(node1.isOr());
1868:       assertEquals((-1), node1.getLineno());
1869:       assertFalse(node1.isDo());
1870:       assertFalse(node1.isCase());
1871:       assertFalse(node1.hasMoreThanOneChild());
1872:       assertFalse(node1.isAdd());
1873:       assertFalse(node1.isBlock());
1874:       assertFalse(node1.isLabel());
1875:       assertFalse(node1.isNew());
1876:       assertFalse(node1.isHook());
1877:       assertFalse(node1.isVar());
1878:       assertFalse(node1.isAssignAdd());
1879:       assertFalse(node1.isStringKey());
1880:       assertFalse(node1.isLabelName());
1881:       assertFalse(node1.isArrayLit());
1882:       assertFalse(node1.isNumber());
1883:       assertFalse(node1.isGetterDef());
1884:       assertEquals((-1), node1.getCharno());
1885:       assertFalse(node1.isSwitch());
1886:       assertFalse(node3.isArrayLit());
1887:       assertFalse(node3.isTry());
1888:       assertFalse(node3.isDebugger());
1889:       assertFalse(node3.isTrue());
1890:       assertFalse(node3.isFor());
1891:       assertFalse(node3.isIf());
1892:       assertFalse(node3.isFunction());
1893:       assertFalse(node3.isDelProp());
1894:       assertFalse(node3.isRegExp());
1895:       assertFalse(node3.isVoid());
1896:       assertEquals(4095, node3.getType());
1897:       assertTrue(node3.hasChildren());
1898:       assertFalse(node3.isCatch());
1899:       assertFalse(node3.isIn());
1900:       assertFalse(node3.isNE());
1901:       assertFalse(node3.isNull());
1902:       assertFalse(node3.isDefaultCase());
1903:       assertFalse(node3.isEmpty());
1904:       assertFalse(node3.isSetterDef());
1905:       assertFalse(node3.isInc());
1906:       assertEquals((-1), node3.getCharno());
1907:       assertFalse(node3.isStringKey());
1908:       assertFalse(node3.isVar());
1909:       assertFalse(node3.isHook());
1910:       assertFalse(node3.isBlock());
1911:       assertFalse(node3.isSwitch());
1912:       assertFalse(node3.isInstanceOf());
1913:       assertFalse(node3.isParamList());
1914:       assertFalse(node3.isThis());
1915:       assertFalse(node3.isNumber());
1916:       assertFalse(node3.isGetterDef());
1917:       assertFalse(node3.isCase());
1918:       assertFalse(node3.isScript());
1919:       assertFalse(node3.hasOneChild());
1920:       assertFalse(node3.isDec());
1921:       assertFalse(node3.isAssign());
1922:       assertFalse(node3.isLabelName());
1923:       assertFalse(node3.isWith());
1924:       assertFalse(node3.isTypeOf());
1925:       assertFalse(node3.isCast());
1926:       assertFalse(node3.isGetElem());
1927:       assertFalse(node3.isExprResult());
1928:       assertEquals((-1), node3.getLineno());
1929:       assertFalse(node3.isOr());
1930:       assertFalse(node3.isAssignAdd());
1931:       assertEquals(2, node3.getChildCount());
1932:       assertFalse(node3.isLabel());
1933:       assertFalse(node3.isDo());
1934:       assertFalse(node3.isNew());
1935:       assertFalse(node3.isAdd());
1936:       assertFalse(node3.isThrow());
1937:       assertFalse(node3.isBreak());
1938:       assertTrue(node3.hasMoreThanOneChild());
1939:       assertFalse(node3.isName());
1940:       assertFalse(node3.isFalse());
1941:       assertFalse(node3.isContinue());
1942:       assertFalse(node3.isCall());
1943:       assertFalse(node3.isObjectLit());
1944:       assertFalse(node3.isAnd());
1945:       assertFalse(node3.isComma());
1946:       assertFalse(node3.isReturn());
1947:       assertEquals((-1), node3.getSourcePosition());
1948:       assertFalse(node3.isString());
1949:       assertFalse(node3.isWhile());
1950:       assertFalse(node3.isNot());
1951:       assertFalse(node3.isGetProp());
1952:       assertFalse(boolean2);
1953:       assertNotSame(node0, node2);
1954:       assertNotSame(node1, node3);
1955:       assertNotSame(node3, node1);
1956:       assertEquals(0, jSTypeArray0.length);
1957:       assertEquals(32, Node.INCRDECR_PROP);
1958:       assertEquals(46, Node.IS_NAMESPACE);
1959:       assertEquals(2, Node.POST_FLAG);
1960:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1961:       assertEquals(12, Node.COLUMN_BITS);
1962:       assertEquals(47, Node.IS_DISPATCHER);
1963:       assertEquals(30, Node.VAR_ARGS_NAME);
1964:       assertEquals(56, Node.CHANGE_TIME);
1965:       assertEquals(49, Node.DIRECT_EVAL);
1966:       assertEquals(37, Node.OPT_ARG_NAME);
1967:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1968:       assertEquals(54, Node.SLASH_V);
1969:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1970:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1971:       assertEquals(50, Node.FREE_CALL);
1972:       assertEquals(1, Node.DECR_FLAG);
1973:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1974:       assertEquals(4095, Node.COLUMN_MASK);
1975:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1976:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1977:       assertEquals(43, Node.IS_CONSTANT_NAME);
1978:       assertEquals(40, Node.ORIGINALNAME_PROP);
1979:       assertEquals(48, Node.DIRECTIVES);
1980:       assertEquals(52, Node.LENGTH);
1981:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1982:       assertEquals(36, Node.QUOTED_PROP);
1983:       assertEquals(57, Node.REFLECTED_OBJECT);
1984:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1985:       assertEquals(8, Node.FLAG_NO_THROWS);
1986:       assertEquals(57, Node.LAST_PROP);
1987:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1988:       assertEquals(55, Node.INFERRED_FUNCTION);
1989:       assertEquals(29, Node.JSDOC_INFO_PROP);
1990:       assertEquals(53, Node.INPUT_ID);
1991:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1992:       assertEquals(39, Node.EMPTY_BLOCK);
1993:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1994:       assertEquals(39, Node.EMPTY_BLOCK);
1995:       assertEquals(48, Node.DIRECTIVES);
1996:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1997:       assertEquals(57, Node.REFLECTED_OBJECT);
1998:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1999:       assertEquals(50, Node.FREE_CALL);
2000:       assertEquals(55, Node.INFERRED_FUNCTION);
2001:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2002:       assertEquals(52, Node.LENGTH);
2003:       assertEquals(8, Node.FLAG_NO_THROWS);
2004:       assertEquals(36, Node.QUOTED_PROP);
2005:       assertEquals(1, Node.DECR_FLAG);
2006:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2007:       assertEquals(49, Node.DIRECT_EVAL);
2008:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2009:       assertEquals(12, Node.COLUMN_BITS);
2010:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2011:       assertEquals(4095, Node.COLUMN_MASK);
2012:       assertEquals(56, Node.CHANGE_TIME);
2013:       assertEquals(47, Node.IS_DISPATCHER);
2014:       assertEquals(2, Node.POST_FLAG);
2015:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2016:       assertEquals(37, Node.OPT_ARG_NAME);
2017:       assertEquals(32, Node.INCRDECR_PROP);
2018:       assertEquals(46, Node.IS_NAMESPACE);
2019:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2020:       assertEquals(29, Node.JSDOC_INFO_PROP);
2021:       assertEquals(53, Node.INPUT_ID);
2022:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2023:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2024:       assertEquals(57, Node.LAST_PROP);
2025:       assertEquals(30, Node.VAR_ARGS_NAME);
2026:       assertEquals(54, Node.SLASH_V);
2027:       assertEquals(43, Node.IS_CONSTANT_NAME);
2028:       assertEquals(40, Node.ORIGINALNAME_PROP);
2029:       assertEquals(4095, Node.COLUMN_MASK);
2030:       assertEquals(55, Node.INFERRED_FUNCTION);
2031:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2032:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2033:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2034:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2035:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2036:       assertEquals(29, Node.JSDOC_INFO_PROP);
2037:       assertEquals(39, Node.EMPTY_BLOCK);
2038:       assertEquals(53, Node.INPUT_ID);
2039:       assertEquals(48, Node.DIRECTIVES);
2040:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2041:       assertEquals(37, Node.OPT_ARG_NAME);
2042:       assertEquals(52, Node.LENGTH);
2043:       assertEquals(8, Node.FLAG_NO_THROWS);
2044:       assertEquals(56, Node.CHANGE_TIME);
2045:       assertEquals(36, Node.QUOTED_PROP);
2046:       assertEquals(57, Node.REFLECTED_OBJECT);
2047:       assertEquals(1, Node.DECR_FLAG);
2048:       assertEquals(30, Node.VAR_ARGS_NAME);
2049:       assertEquals(49, Node.DIRECT_EVAL);
2050:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2051:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2052:       assertEquals(2, Node.POST_FLAG);
2053:       assertEquals(32, Node.INCRDECR_PROP);
2054:       assertEquals(57, Node.LAST_PROP);
2055:       assertEquals(47, Node.IS_DISPATCHER);
2056:       assertEquals(12, Node.COLUMN_BITS);
2057:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2058:       assertEquals(50, Node.FREE_CALL);
2059:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2060:       assertEquals(40, Node.ORIGINALNAME_PROP);
2061:       assertEquals(54, Node.SLASH_V);
2062:       assertEquals(46, Node.IS_NAMESPACE);
2063:       assertEquals(43, Node.IS_CONSTANT_NAME);
2064:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2065:       assertTrue(boolean2 == boolean0);
2066:       assertTrue(boolean2 == boolean1);
2067:       assertFalse(node0.equals((Object)node3));
2068:       assertFalse(node0.equals((Object)node1));
2069:       assertFalse(node0.equals((Object)node2));
2070:       assertFalse(node1.equals((Object)node2));
2071:       assertFalse(node1.equals((Object)node3));
2072:       assertFalse(node1.equals((Object)node0));
2073:       assertFalse(node3.equals((Object)node0));
2074:       assertFalse(node3.equals((Object)node2));
2075:       assertFalse(node3.equals((Object)node1));
2076:       
2077:       boolean boolean3 = node0.isOnlyModifiesThisCall();
2078:       assertEquals((-1), node0.getCharno());
2079:       assertFalse(node0.isSwitch());
2080:       assertFalse(node0.isCase());
2081:       assertFalse(node0.isInc());
2082:       assertFalse(node0.isIn());
2083:       assertFalse(node0.isComma());
2084:       assertFalse(node0.isNE());
2085:       assertFalse(node0.isIf());
2086:       assertFalse(node0.isBreak());
2087:       assertFalse(node0.isDelProp());
2088:       assertFalse(node0.isInstanceOf());
2089:       assertFalse(node0.isGetProp());
2090:       assertFalse(node0.isWith());
2091:       assertFalse(node0.isFor());
2092:       assertFalse(node0.isHook());
2093:       assertFalse(node0.isThis());
2094:       assertFalse(node0.isExprResult());
2095:       assertFalse(node0.isTrue());
2096:       assertFalse(node0.isVoid());
2097:       assertFalse(node0.isTry());
2098:       assertFalse(node0.isDefaultCase());
2099:       assertFalse(node0.hasOneChild());
2100:       assertFalse(node0.isArrayLit());
2101:       assertFalse(node0.isScript());
2102:       assertFalse(node0.isLabelName());
2103:       assertFalse(node0.isGetterDef());
2104:       assertFalse(node0.isParamList());
2105:       assertFalse(node0.isAssignAdd());
2106:       assertFalse(node0.isEmpty());
2107:       assertEquals(0, node0.getChildCount());
2108:       assertFalse(node0.isVar());
2109:       assertFalse(node0.isLabel());
2110:       assertTrue(node0.isString());
2111:       assertFalse(node0.isDo());
2112:       assertFalse(node0.isAdd());
2113:       assertFalse(node0.isNew());
2114:       assertFalse(node0.isStringKey());
2115:       assertFalse(node0.isName());
2116:       assertFalse(node0.isOr());
2117:       assertFalse(node0.isNull());
2118:       assertFalse(node0.isTypeOf());
2119:       assertFalse(node0.isNumber());
2120:       assertEquals((-1), node0.getLineno());
2121:       assertFalse(node0.isGetElem());
2122:       assertFalse(node0.isCall());
2123:       assertFalse(node0.isCatch());
2124:       assertFalse(node0.hasMoreThanOneChild());
2125:       assertFalse(node0.hasChildren());
2126:       assertFalse(node0.isWhile());
2127:       assertFalse(node0.isAssign());
2128:       assertFalse(node0.isDec());
2129:       assertFalse(node0.isBlock());
2130:       assertFalse(node0.isReturn());
2131:       assertFalse(node0.isDebugger());
2132:       assertFalse(node0.isRegExp());
2133:       assertFalse(node0.isFunction());
2134:       assertFalse(node0.isAnd());
2135:       assertFalse(node0.isObjectLit());
2136:       assertFalse(node0.isNot());
2137:       assertEquals((-1), node0.getSourcePosition());
2138:       assertFalse(node0.isSetterDef());
2139:       assertFalse(node0.isContinue());
2140:       assertFalse(node0.isThrow());
2141:       assertFalse(node0.isCast());
2142:       assertFalse(node0.isFalse());
2143:       assertEquals(40, node0.getType());
2144:       assertFalse(boolean3);
2145:       assertNotSame(node0, node2);
2146:       assertEquals(32, Node.INCRDECR_PROP);
2147:       assertEquals(46, Node.IS_NAMESPACE);
2148:       assertEquals(2, Node.POST_FLAG);
2149:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2150:       assertEquals(12, Node.COLUMN_BITS);
2151:       assertEquals(47, Node.IS_DISPATCHER);
2152:       assertEquals(30, Node.VAR_ARGS_NAME);
2153:       assertEquals(56, Node.CHANGE_TIME);
2154:       assertEquals(49, Node.DIRECT_EVAL);
2155:       assertEquals(37, Node.OPT_ARG_NAME);
2156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2157:       assertEquals(54, Node.SLASH_V);
2158:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2160:       assertEquals(50, Node.FREE_CALL);
2161:       assertEquals(1, Node.DECR_FLAG);
2162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2163:       assertEquals(4095, Node.COLUMN_MASK);
2164:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2165:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2166:       assertEquals(43, Node.IS_CONSTANT_NAME);
2167:       assertEquals(40, Node.ORIGINALNAME_PROP);
2168:       assertEquals(48, Node.DIRECTIVES);
2169:       assertEquals(52, Node.LENGTH);
2170:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2171:       assertEquals(36, Node.QUOTED_PROP);
2172:       assertEquals(57, Node.REFLECTED_OBJECT);
2173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2174:       assertEquals(8, Node.FLAG_NO_THROWS);
2175:       assertEquals(57, Node.LAST_PROP);
2176:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2177:       assertEquals(55, Node.INFERRED_FUNCTION);
2178:       assertEquals(29, Node.JSDOC_INFO_PROP);
2179:       assertEquals(53, Node.INPUT_ID);
2180:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2181:       assertEquals(39, Node.EMPTY_BLOCK);
2182:       assertFalse(node0.equals((Object)node3));
2183:       assertFalse(node0.equals((Object)node1));
2184:       assertFalse(node0.equals((Object)node2));
2185:       assertTrue(boolean3 == boolean1);
2186:       assertTrue(boolean3 == boolean2);
2187:       assertTrue(boolean3 == boolean0);
2188:       
2189:       node3.setCharno(47);
2190:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
2191:       assertEquals(0, node1.getChildCount());
2192:       assertFalse(node1.isRegExp());
2193:       assertFalse(node1.isCatch());
2194:       assertFalse(node1.isFunction());
2195:       assertFalse(node1.isTry());
2196:       assertFalse(node1.isSetterDef());
2197:       assertFalse(node1.isDefaultCase());
2198:       assertFalse(node1.isEmpty());
2199:       assertFalse(node1.isCall());
2200:       assertFalse(node1.isName());
2201:       assertFalse(node1.isFor());
2202:       assertFalse(node1.isTrue());
2203:       assertFalse(node1.isVoid());
2204:       assertFalse(node1.isIf());
2205:       assertFalse(node1.isDelProp());
2206:       assertFalse(node1.isNull());
2207:       assertFalse(node1.isNE());
2208:       assertFalse(node1.isIn());
2209:       assertFalse(node1.isString());
2210:       assertFalse(node1.isContinue());
2211:       assertFalse(node1.isInc());
2212:       assertFalse(node1.isReturn());
2213:       assertFalse(node1.hasChildren());
2214:       assertFalse(node1.isWhile());
2215:       assertFalse(node1.isFalse());
2216:       assertFalse(node1.isThrow());
2217:       assertFalse(node1.isCast());
2218:       assertEquals((-1), node1.getSourcePosition());
2219:       assertFalse(node1.isDebugger());
2220:       assertFalse(node1.isAnd());
2221:       assertFalse(node1.isObjectLit());
2222:       assertFalse(node1.isNot());
2223:       assertFalse(node1.isInstanceOf());
2224:       assertTrue(node1.isParamList());
2225:       assertFalse(node1.isScript());
2226:       assertFalse(node1.isWith());
2227:       assertFalse(node1.isGetProp());
2228:       assertFalse(node1.isComma());
2229:       assertFalse(node1.isThis());
2230:       assertFalse(node1.hasOneChild());
2231:       assertFalse(node1.isGetElem());
2232:       assertFalse(node1.isAssign());
2233:       assertFalse(node1.isBreak());
2234:       assertFalse(node1.isDec());
2235:       assertFalse(node1.isTypeOf());
2236:       assertEquals(83, node1.getType());
2237:       assertFalse(node1.isExprResult());
2238:       assertFalse(node1.isOr());
2239:       assertEquals((-1), node1.getLineno());
2240:       assertFalse(node1.isDo());
2241:       assertFalse(node1.isCase());
2242:       assertFalse(node1.hasMoreThanOneChild());
2243:       assertFalse(node1.isAdd());
2244:       assertFalse(node1.isBlock());
2245:       assertFalse(node1.isLabel());
2246:       assertFalse(node1.isNew());
2247:       assertFalse(node1.isHook());
2248:       assertFalse(node1.isVar());
2249:       assertFalse(node1.isAssignAdd());
2250:       assertFalse(node1.isStringKey());
2251:       assertFalse(node1.isLabelName());
2252:       assertFalse(node1.isArrayLit());
2253:       assertFalse(node1.isNumber());
2254:       assertFalse(node1.isGetterDef());
2255:       assertEquals((-1), node1.getCharno());
2256:       assertFalse(node1.isSwitch());
2257:       assertFalse(node3.isArrayLit());
2258:       assertFalse(node3.isTry());
2259:       assertFalse(node3.isDebugger());
2260:       assertFalse(node3.isTrue());
2261:       assertFalse(node3.isFor());
2262:       assertFalse(node3.isIf());
2263:       assertFalse(node3.isFunction());
2264:       assertFalse(node3.isDelProp());
2265:       assertFalse(node3.isRegExp());
2266:       assertFalse(node3.isVoid());
2267:       assertEquals(4095, node3.getType());
2268:       assertTrue(node3.hasChildren());
2269:       assertFalse(node3.isCatch());
2270:       assertFalse(node3.isIn());
2271:       assertFalse(node3.isNE());
2272:       assertFalse(node3.isNull());
2273:       assertFalse(node3.isDefaultCase());
2274:       assertFalse(node3.isEmpty());
2275:       assertFalse(node3.isSetterDef());
2276:       assertFalse(node3.isInc());
2277:       assertEquals((-1), node3.getCharno());
2278:       assertFalse(node3.isStringKey());
2279:       assertFalse(node3.isVar());
2280:       assertFalse(node3.isHook());
2281:       assertFalse(node3.isBlock());
2282:       assertFalse(node3.isSwitch());
2283:       assertFalse(node3.isInstanceOf());
2284:       assertFalse(node3.isParamList());
2285:       assertFalse(node3.isThis());
2286:       assertFalse(node3.isNumber());
2287:       assertFalse(node3.isGetterDef());
2288:       assertFalse(node3.isCase());
2289:       assertFalse(node3.isScript());
2290:       assertFalse(node3.hasOneChild());
2291:       assertFalse(node3.isDec());
2292:       assertFalse(node3.isAssign());
2293:       assertFalse(node3.isLabelName());
2294:       assertFalse(node3.isWith());
2295:       assertFalse(node3.isTypeOf());
2296:       assertFalse(node3.isCast());
2297:       assertFalse(node3.isGetElem());
2298:       assertFalse(node3.isExprResult());
2299:       assertEquals((-1), node3.getLineno());
2300:       assertFalse(node3.isOr());
2301:       assertFalse(node3.isAssignAdd());
2302:       assertEquals(2, node3.getChildCount());
2303:       assertFalse(node3.isLabel());
2304:       assertFalse(node3.isDo());
2305:       assertFalse(node3.isNew());
2306:       assertFalse(node3.isAdd());
2307:       assertFalse(node3.isThrow());
2308:       assertFalse(node3.isBreak());
2309:       assertTrue(node3.hasMoreThanOneChild());
2310:       assertFalse(node3.isName());
2311:       assertFalse(node3.isFalse());
2312:       assertFalse(node3.isContinue());
2313:       assertFalse(node3.isCall());
2314:       assertFalse(node3.isObjectLit());
2315:       assertFalse(node3.isAnd());
2316:       assertFalse(node3.isComma());
2317:       assertFalse(node3.isReturn());
2318:       assertEquals((-1), node3.getSourcePosition());
2319:       assertFalse(node3.isString());
2320:       assertFalse(node3.isWhile());
2321:       assertFalse(node3.isNot());
2322:       assertFalse(node3.isGetProp());
2323:       assertNotSame(node1, node3);
2324:       assertNotSame(node3, node1);
2325:       assertEquals(0, jSTypeArray0.length);
2326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2327:       assertEquals(39, Node.EMPTY_BLOCK);
2328:       assertEquals(48, Node.DIRECTIVES);
2329:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2330:       assertEquals(57, Node.REFLECTED_OBJECT);
2331:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2332:       assertEquals(50, Node.FREE_CALL);
2333:       assertEquals(55, Node.INFERRED_FUNCTION);
2334:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2335:       assertEquals(52, Node.LENGTH);
2336:       assertEquals(8, Node.FLAG_NO_THROWS);
2337:       assertEquals(36, Node.QUOTED_PROP);
2338:       assertEquals(1, Node.DECR_FLAG);
2339:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2340:       assertEquals(49, Node.DIRECT_EVAL);
2341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2342:       assertEquals(12, Node.COLUMN_BITS);
2343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2344:       assertEquals(4095, Node.COLUMN_MASK);
2345:       assertEquals(56, Node.CHANGE_TIME);
2346:       assertEquals(47, Node.IS_DISPATCHER);
2347:       assertEquals(2, Node.POST_FLAG);
2348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2349:       assertEquals(37, Node.OPT_ARG_NAME);
2350:       assertEquals(32, Node.INCRDECR_PROP);
2351:       assertEquals(46, Node.IS_NAMESPACE);
2352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2353:       assertEquals(29, Node.JSDOC_INFO_PROP);
2354:       assertEquals(53, Node.INPUT_ID);
2355:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2356:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2357:       assertEquals(57, Node.LAST_PROP);
2358:       assertEquals(30, Node.VAR_ARGS_NAME);
2359:       assertEquals(54, Node.SLASH_V);
2360:       assertEquals(43, Node.IS_CONSTANT_NAME);
2361:       assertEquals(40, Node.ORIGINALNAME_PROP);
2362:       assertEquals(4095, Node.COLUMN_MASK);
2363:       assertEquals(55, Node.INFERRED_FUNCTION);
2364:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2365:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2369:       assertEquals(29, Node.JSDOC_INFO_PROP);
2370:       assertEquals(39, Node.EMPTY_BLOCK);
2371:       assertEquals(53, Node.INPUT_ID);
2372:       assertEquals(48, Node.DIRECTIVES);
2373:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2374:       assertEquals(37, Node.OPT_ARG_NAME);
2375:       assertEquals(52, Node.LENGTH);
2376:       assertEquals(8, Node.FLAG_NO_THROWS);
2377:       assertEquals(56, Node.CHANGE_TIME);
2378:       assertEquals(36, Node.QUOTED_PROP);
2379:       assertEquals(57, Node.REFLECTED_OBJECT);
2380:       assertEquals(1, Node.DECR_FLAG);
2381:       assertEquals(30, Node.VAR_ARGS_NAME);
2382:       assertEquals(49, Node.DIRECT_EVAL);
2383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2384:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2385:       assertEquals(2, Node.POST_FLAG);
2386:       assertEquals(32, Node.INCRDECR_PROP);
2387:       assertEquals(57, Node.LAST_PROP);
2388:       assertEquals(47, Node.IS_DISPATCHER);
2389:       assertEquals(12, Node.COLUMN_BITS);
2390:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2391:       assertEquals(50, Node.FREE_CALL);
2392:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2393:       assertEquals(40, Node.ORIGINALNAME_PROP);
2394:       assertEquals(54, Node.SLASH_V);
2395:       assertEquals(46, Node.IS_NAMESPACE);
2396:       assertEquals(43, Node.IS_CONSTANT_NAME);
2397:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2398:       assertFalse(node1.equals((Object)node2));
2399:       assertFalse(node1.equals((Object)node3));
2400:       assertFalse(node1.equals((Object)node0));
2401:       assertFalse(node3.equals((Object)node0));
2402:       assertFalse(node3.equals((Object)node2));
2403:       assertFalse(node3.equals((Object)node1));
2404:       
2405:       boolean boolean4 = node2.isSwitch();
2406:       assertFalse(node2.isAssign());
2407:       assertFalse(node2.isLabelName());
2408:       assertFalse(node2.isGetElem());
2409:       assertFalse(node2.isCast());
2410:       assertFalse(node2.hasOneChild());
2411:       assertFalse(node2.isLabel());
2412:       assertFalse(node2.isAssignAdd());
2413:       assertFalse(node2.isReturn());
2414:       assertFalse(node2.isExprResult());
2415:       assertFalse(node2.isTypeOf());
2416:       assertFalse(node2.hasMoreThanOneChild());
2417:       assertFalse(node2.hasChildren());
2418:       assertFalse(node2.isDec());
2419:       assertFalse(node2.isDo());
2420:       assertFalse(node2.isWith());
2421:       assertFalse(node2.isNew());
2422:       assertFalse(node2.isAdd());
2423:       assertFalse(node2.isOr());
2424:       assertFalse(node2.isName());
2425:       assertFalse(node2.isFalse());
2426:       assertFalse(node2.isCall());
2427:       assertFalse(node2.isThrow());
2428:       assertFalse(node2.isSetterDef());
2429:       assertFalse(node2.isBreak());
2430:       assertFalse(node2.isComma());
2431:       assertFalse(node2.isNot());
2432:       assertFalse(node2.isAnd());
2433:       assertFalse(node2.isWhile());
2434:       assertFalse(node2.isContinue());
2435:       assertFalse(node2.isGetProp());
2436:       assertEquals(1, node2.getCharno());
2437:       assertFalse(node2.isDebugger());
2438:       assertFalse(node2.isObjectLit());
2439:       assertFalse(node2.isEmpty());
2440:       assertFalse(node2.isFor());
2441:       assertFalse(node2.isIf());
2442:       assertFalse(node2.isArrayLit());
2443:       assertFalse(node2.isDelProp());
2444:       assertFalse(node2.isTry());
2445:       assertFalse(node2.isRegExp());
2446:       assertFalse(node2.isFunction());
2447:       assertEquals(40, node2.getType());
2448:       assertFalse(node2.isCatch());
2449:       assertFalse(node2.isInc());
2450:       assertFalse(node2.isDefaultCase());
2451:       assertFalse(node2.isVoid());
2452:       assertEquals(225281, node2.getSourcePosition());
2453:       assertFalse(node2.isIn());
2454:       assertFalse(node2.isTrue());
2455:       assertFalse(node2.isNE());
2456:       assertFalse(node2.isNull());
2457:       assertEquals(55, node2.getLineno());
2458:       assertFalse(node2.isStringKey());
2459:       assertTrue(node2.isString());
2460:       assertFalse(node2.isBlock());
2461:       assertFalse(node2.isInstanceOf());
2462:       assertFalse(node2.isVar());
2463:       assertFalse(node2.isHook());
2464:       assertFalse(node2.isThis());
2465:       assertEquals(0, node2.getChildCount());
2466:       assertFalse(node2.isCase());
2467:       assertFalse(node2.isScript());
2468:       assertFalse(node2.isSwitch());
2469:       assertFalse(node2.isParamList());
2470:       assertFalse(node2.isNumber());
2471:       assertFalse(node2.isGetterDef());
2472:       assertFalse(boolean4);
2473:       assertNotSame(node2, node0);
2474:       assertEquals(36, Node.QUOTED_PROP);
2475:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2476:       assertEquals(43, Node.IS_CONSTANT_NAME);
2477:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2478:       assertEquals(55, Node.INFERRED_FUNCTION);
2479:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2480:       assertEquals(29, Node.JSDOC_INFO_PROP);
2481:       assertEquals(53, Node.INPUT_ID);
2482:       assertEquals(8, Node.FLAG_NO_THROWS);
2483:       assertEquals(39, Node.EMPTY_BLOCK);
2484:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2485:       assertEquals(56, Node.CHANGE_TIME);
2486:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2487:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2488:       assertEquals(4095, Node.COLUMN_MASK);
2489:       assertEquals(57, Node.REFLECTED_OBJECT);
2490:       assertEquals(49, Node.DIRECT_EVAL);
2491:       assertEquals(37, Node.OPT_ARG_NAME);
2492:       assertEquals(48, Node.DIRECTIVES);
2493:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2494:       assertEquals(57, Node.LAST_PROP);
2495:       assertEquals(54, Node.SLASH_V);
2496:       assertEquals(52, Node.LENGTH);
2497:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2498:       assertEquals(30, Node.VAR_ARGS_NAME);
2499:       assertEquals(12, Node.COLUMN_BITS);
2500:       assertEquals(32, Node.INCRDECR_PROP);
2501:       assertEquals(1, Node.DECR_FLAG);
2502:       assertEquals(2, Node.POST_FLAG);
2503:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2504:       assertEquals(47, Node.IS_DISPATCHER);
2505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2506:       assertEquals(50, Node.FREE_CALL);
2507:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2508:       assertEquals(40, Node.ORIGINALNAME_PROP);
2509:       assertEquals(46, Node.IS_NAMESPACE);
2510:       assertTrue(boolean4 == boolean2);
2511:       assertTrue(boolean4 == boolean1);
2512:       assertTrue(boolean4 == boolean0);
2513:       assertTrue(boolean4 == boolean3);
2514:       assertFalse(node2.equals((Object)node3));
2515:       assertFalse(node2.equals((Object)node1));
2516:       assertFalse(node2.equals((Object)node0));
2517:   }
2518: }
RegularFileObject[/tmp/EvoSuite_250_1628160733372/com/google/javascript/rhino/Node_250_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:52:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_250_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_250_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_250_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
268:       "com.google.javascript.rhino.jstype.JSType$1",
269:       "com.google.javascript.rhino.jstype.JSType",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Preconditions",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.javascript.rhino.SimpleErrorReporter",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.base.Objects",
352:       "com.google.common.collect.Sets",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.TemplatizedType",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.Iterators$11",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.jstype.NamespaceType",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 10:52:13.950 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("com.google.common.collect.ImmutableList$SubList");
assertNotNull(node0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node0.setLength((-1569));
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

JSType[] jSTypeArray0 = new JSType[0];
node0.detachChildren();
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

simpleErrorReporter0.error("is_dispatcher", "&3~/T*sR*+pZ", 1265, 57);
Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
assertNotNull(node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(83, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertEquals(0, jSTypeArray0.length);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));

Node node2 = Node.newString("com.google.common.collect.ImmutableList$SubList", 55, 1);
assertNotNull(node2);
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDo());
assertFalse(node2.isWith());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isCatch());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertEquals(225281, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertEquals(55, node2.getLineno());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertNotSame(node2, node0);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

Node node3 = new Node(4095, node1, node1, 56, (-1569));
assertNotNull(node3);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(83, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertTrue(node3.hasOneChild());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isFunction());
assertFalse(node3.isDelProp());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertTrue(node3.hasChildren());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isSwitch());
assertFalse(node3.isInstanceOf());
assertEquals(1, node3.getChildCount());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isParamList());
assertFalse(node3.isThis());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isThrow());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertEquals(0, jSTypeArray0.length);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

String string0 = node0.toString();
assertNotNull(string0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertNotSame(node0, node2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));

node3.addChildrenToFront(node0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(83, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isFunction());
assertFalse(node3.isDelProp());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertTrue(node3.hasChildren());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isSwitch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isParamList());
assertFalse(node3.isThis());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isThrow());
assertFalse(node3.isBreak());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertNotSame(node0, node2);
assertNotSame(node1, node3);
assertNotSame(node3, node1);
assertEquals(0, jSTypeArray0.length);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

boolean boolean0 = node0.isDo();
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(boolean0);
assertNotSame(node0, node2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertNotSame(node0, node2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));

Node.AncestorIterable node_AncestorIterable0 = node3.getAncestors();
assertNotNull(node_AncestorIterable0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(83, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isFunction());
assertFalse(node3.isDelProp());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertTrue(node3.hasChildren());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isSwitch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isParamList());
assertFalse(node3.isThis());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isThrow());
assertFalse(node3.isBreak());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertNotSame(node1, node3);
assertNotSame(node3, node1);
assertEquals(0, jSTypeArray0.length);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

boolean boolean1 = node0.isUnscopedQualifiedName();
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(boolean1);
assertNotSame(node0, node2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node3.isEquivalentTo(node0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(83, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isFunction());
assertFalse(node3.isDelProp());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertTrue(node3.hasChildren());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isSwitch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isParamList());
assertFalse(node3.isThis());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isThrow());
assertFalse(node3.isBreak());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(boolean2);
assertNotSame(node0, node2);
assertNotSame(node1, node3);
assertNotSame(node3, node1);
assertEquals(0, jSTypeArray0.length);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

boolean boolean3 = node0.isOnlyModifiesThisCall();
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(boolean3);
assertNotSame(node0, node2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);

node3.setCharno(47);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(83, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isFunction());
assertFalse(node3.isDelProp());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertTrue(node3.hasChildren());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isSwitch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isParamList());
assertFalse(node3.isThis());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isThrow());
assertFalse(node3.isBreak());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertNotSame(node1, node3);
assertNotSame(node3, node1);
assertEquals(0, jSTypeArray0.length);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

boolean boolean4 = node2.isSwitch();
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDo());
assertFalse(node2.isWith());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isCatch());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertEquals(225281, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertEquals(55, node2.getLineno());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(boolean4);
assertNotSame(node2, node0);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));


[MASTER] 10:52:26.615 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_352_1628160746225/com/google/javascript/rhino/Node_352_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_352_1628160746225/com/google/javascript/rhino/Node_352_tmp__ESTest_scaffolding.java]]
[MASTER] 10:52:26.615 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:26.615 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:26.616 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1626
[MASTER] 10:52:26.617 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_352_1628160746225/com/google/javascript/rhino/Node_352_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:52:26 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_352_tmp__ESTest extends Node_352_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("com.google.common.collect.ImmutableList$SubList");
25:       assertNotNull(node0);
26:       assertEquals((-1), node0.getCharno());
27:       assertFalse(node0.isHook());
28:       assertFalse(node0.isInc());
29:       assertFalse(node0.isFalse());
30:       assertFalse(node0.isBreak());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isGetProp());
33:       assertFalse(node0.isThis());
34:       assertFalse(node0.isComma());
35:       assertFalse(node0.isInstanceOf());
36:       assertFalse(node0.isObjectLit());
37:       assertFalse(node0.isGetterDef());
38:       assertFalse(node0.isFor());
39:       assertFalse(node0.isCase());
40:       assertFalse(node0.isTry());
41:       assertFalse(node0.isExprResult());
42:       assertFalse(node0.isTrue());
43:       assertFalse(node0.isScript());
44:       assertFalse(node0.isLabelName());
45:       assertFalse(node0.isGetElem());
46:       assertFalse(node0.isArrayLit());
47:       assertFalse(node0.isDelProp());
48:       assertFalse(node0.isVoid());
49:       assertFalse(node0.isLabel());
50:       assertFalse(node0.isOr());
51:       assertFalse(node0.isAssignAdd());
52:       assertEquals(0, node0.getChildCount());
53:       assertFalse(node0.isEmpty());
54:       assertFalse(node0.isDo());
55:       assertFalse(node0.isVar());
56:       assertFalse(node0.isDefaultCase());
57:       assertFalse(node0.isAdd());
58:       assertFalse(node0.isNew());
59:       assertFalse(node0.isBlock());
60:       assertFalse(node0.isStringKey());
61:       assertFalse(node0.isCall());
62:       assertFalse(node0.isNull());
63:       assertFalse(node0.isParamList());
64:       assertFalse(node0.isName());
65:       assertEquals((-1), node0.getLineno());
66:       assertFalse(node0.isReturn());
67:       assertEquals((-1), node0.getSourcePosition());
68:       assertFalse(node0.isDec());
69:       assertFalse(node0.isCatch());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.isNumber());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isAssign());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.hasOneChild());
77:       assertTrue(node0.isString());
78:       assertFalse(node0.isDebugger());
79:       assertFalse(node0.isCast());
80:       assertFalse(node0.isRegExp());
81:       assertFalse(node0.isFunction());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isAnd());
86:       assertFalse(node0.isIf());
87:       assertFalse(node0.isSetterDef());
88:       assertFalse(node0.isIn());
89:       assertFalse(node0.isContinue());
90:       assertFalse(node0.isThrow());
91:       assertEquals(40, node0.getType());
92:       assertEquals(12, Node.COLUMN_BITS);
93:       assertEquals(51, Node.STATIC_SOURCE_FILE);
94:       assertEquals(46, Node.IS_NAMESPACE);
95:       assertEquals(49, Node.DIRECT_EVAL);
96:       assertEquals(1, Node.DECR_FLAG);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(32, Node.INCRDECR_PROP);
99:       assertEquals(2, Node.POST_FLAG);
100:       assertEquals(37, Node.OPT_ARG_NAME);
101:       assertEquals(47, Node.IS_DISPATCHER);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(30, Node.VAR_ARGS_NAME);
104:       assertEquals(40, Node.ORIGINALNAME_PROP);
105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
106:       assertEquals(43, Node.IS_CONSTANT_NAME);
107:       assertEquals(54, Node.SLASH_V);
108:       assertEquals(50, Node.FREE_CALL);
109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
110:       assertEquals(4095, Node.COLUMN_MASK);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
113:       assertEquals(48, Node.DIRECTIVES);
114:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
119:       assertEquals(56, Node.CHANGE_TIME);
120:       assertEquals(36, Node.QUOTED_PROP);
121:       assertEquals(15, Node.NO_SIDE_EFFECTS);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       assertEquals(53, Node.INPUT_ID);
124:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
125:       assertEquals(29, Node.JSDOC_INFO_PROP);
126:       assertEquals(52, Node.LENGTH);
127:       assertEquals(8, Node.FLAG_NO_THROWS);
128:       
129:       node0.setLength((-1569));
130:       assertEquals((-1), node0.getCharno());
131:       assertFalse(node0.isHook());
132:       assertFalse(node0.isInc());
133:       assertFalse(node0.isFalse());
134:       assertFalse(node0.isBreak());
135:       assertFalse(node0.isSwitch());
136:       assertFalse(node0.isGetProp());
137:       assertFalse(node0.isThis());
138:       assertFalse(node0.isComma());
139:       assertFalse(node0.isInstanceOf());
140:       assertFalse(node0.isObjectLit());
141:       assertFalse(node0.isGetterDef());
142:       assertFalse(node0.isFor());
143:       assertFalse(node0.isCase());
144:       assertFalse(node0.isTry());
145:       assertFalse(node0.isExprResult());
146:       assertFalse(node0.isTrue());
147:       assertFalse(node0.isScript());
148:       assertFalse(node0.isLabelName());
149:       assertFalse(node0.isGetElem());
150:       assertFalse(node0.isArrayLit());
151:       assertFalse(node0.isDelProp());
152:       assertFalse(node0.isVoid());
153:       assertFalse(node0.isLabel());
154:       assertFalse(node0.isOr());
155:       assertFalse(node0.isAssignAdd());
156:       assertEquals(0, node0.getChildCount());
157:       assertFalse(node0.isEmpty());
158:       assertFalse(node0.isDo());
159:       assertFalse(node0.isVar());
160:       assertFalse(node0.isDefaultCase());
161:       assertFalse(node0.isAdd());
162:       assertFalse(node0.isNew());
163:       assertFalse(node0.isBlock());
164:       assertFalse(node0.isStringKey());
165:       assertFalse(node0.isCall());
166:       assertFalse(node0.isNull());
167:       assertFalse(node0.isParamList());
168:       assertFalse(node0.isName());
169:       assertEquals((-1), node0.getLineno());
170:       assertFalse(node0.isReturn());
171:       assertEquals((-1), node0.getSourcePosition());
172:       assertFalse(node0.isDec());
173:       assertFalse(node0.isCatch());
174:       assertFalse(node0.isTypeOf());
175:       assertFalse(node0.isNumber());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertFalse(node0.isAssign());
178:       assertFalse(node0.isWhile());
179:       assertFalse(node0.hasChildren());
180:       assertFalse(node0.hasOneChild());
181:       assertTrue(node0.isString());
182:       assertFalse(node0.isDebugger());
183:       assertFalse(node0.isCast());
184:       assertFalse(node0.isRegExp());
185:       assertFalse(node0.isFunction());
186:       assertFalse(node0.isWith());
187:       assertFalse(node0.isNot());
188:       assertFalse(node0.isNE());
189:       assertFalse(node0.isAnd());
190:       assertFalse(node0.isIf());
191:       assertFalse(node0.isSetterDef());
192:       assertFalse(node0.isIn());
193:       assertFalse(node0.isContinue());
194:       assertFalse(node0.isThrow());
195:       assertEquals(40, node0.getType());
196:       assertEquals(12, Node.COLUMN_BITS);
197:       assertEquals(51, Node.STATIC_SOURCE_FILE);
198:       assertEquals(46, Node.IS_NAMESPACE);
199:       assertEquals(49, Node.DIRECT_EVAL);
200:       assertEquals(1, Node.DECR_FLAG);
201:       assertEquals(57, Node.LAST_PROP);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(37, Node.OPT_ARG_NAME);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
207:       assertEquals(30, Node.VAR_ARGS_NAME);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
210:       assertEquals(43, Node.IS_CONSTANT_NAME);
211:       assertEquals(54, Node.SLASH_V);
212:       assertEquals(50, Node.FREE_CALL);
213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(48, Node.DIRECTIVES);
218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
219:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
221:       assertEquals(57, Node.REFLECTED_OBJECT);
222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
223:       assertEquals(56, Node.CHANGE_TIME);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(15, Node.NO_SIDE_EFFECTS);
226:       assertEquals(39, Node.EMPTY_BLOCK);
227:       assertEquals(53, Node.INPUT_ID);
228:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
229:       assertEquals(29, Node.JSDOC_INFO_PROP);
230:       assertEquals(52, Node.LENGTH);
231:       assertEquals(8, Node.FLAG_NO_THROWS);
232:       
233:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
234:       assertNotNull(simpleErrorReporter0);
235:       
236:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
237:       assertNotNull(jSTypeRegistry0);
238:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
239:       
240:       JSType[] jSTypeArray0 = new JSType[0];
241:       node0.detachChildren();
242:       assertEquals((-1), node0.getCharno());
243:       assertFalse(node0.isHook());
244:       assertFalse(node0.isInc());
245:       assertFalse(node0.isFalse());
246:       assertFalse(node0.isBreak());
247:       assertFalse(node0.isSwitch());
248:       assertFalse(node0.isGetProp());
249:       assertFalse(node0.isThis());
250:       assertFalse(node0.isComma());
251:       assertFalse(node0.isInstanceOf());
252:       assertFalse(node0.isObjectLit());
253:       assertFalse(node0.isGetterDef());
254:       assertFalse(node0.isFor());
255:       assertFalse(node0.isCase());
256:       assertFalse(node0.isTry());
257:       assertFalse(node0.isExprResult());
258:       assertFalse(node0.isTrue());
259:       assertFalse(node0.isScript());
260:       assertFalse(node0.isLabelName());
261:       assertFalse(node0.isGetElem());
262:       assertFalse(node0.isArrayLit());
263:       assertFalse(node0.isDelProp());
264:       assertFalse(node0.isVoid());
265:       assertFalse(node0.isLabel());
266:       assertFalse(node0.isOr());
267:       assertFalse(node0.isAssignAdd());
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isEmpty());
270:       assertFalse(node0.isDo());
271:       assertFalse(node0.isVar());
272:       assertFalse(node0.isDefaultCase());
273:       assertFalse(node0.isAdd());
274:       assertFalse(node0.isNew());
275:       assertFalse(node0.isBlock());
276:       assertFalse(node0.isStringKey());
277:       assertFalse(node0.isCall());
278:       assertFalse(node0.isNull());
279:       assertFalse(node0.isParamList());
280:       assertFalse(node0.isName());
281:       assertEquals((-1), node0.getLineno());
282:       assertFalse(node0.isReturn());
283:       assertEquals((-1), node0.getSourcePosition());
284:       assertFalse(node0.isDec());
285:       assertFalse(node0.isCatch());
286:       assertFalse(node0.isTypeOf());
287:       assertFalse(node0.isNumber());
288:       assertFalse(node0.hasMoreThanOneChild());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.isWhile());
291:       assertFalse(node0.hasChildren());
292:       assertFalse(node0.hasOneChild());
293:       assertTrue(node0.isString());
294:       assertFalse(node0.isDebugger());
295:       assertFalse(node0.isCast());
296:       assertFalse(node0.isRegExp());
297:       assertFalse(node0.isFunction());
298:       assertFalse(node0.isWith());
299:       assertFalse(node0.isNot());
300:       assertFalse(node0.isNE());
301:       assertFalse(node0.isAnd());
302:       assertFalse(node0.isIf());
303:       assertFalse(node0.isSetterDef());
304:       assertFalse(node0.isIn());
305:       assertFalse(node0.isContinue());
306:       assertFalse(node0.isThrow());
307:       assertEquals(40, node0.getType());
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(51, Node.STATIC_SOURCE_FILE);
310:       assertEquals(46, Node.IS_NAMESPACE);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(1, Node.DECR_FLAG);
313:       assertEquals(57, Node.LAST_PROP);
314:       assertEquals(32, Node.INCRDECR_PROP);
315:       assertEquals(2, Node.POST_FLAG);
316:       assertEquals(37, Node.OPT_ARG_NAME);
317:       assertEquals(47, Node.IS_DISPATCHER);
318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
319:       assertEquals(30, Node.VAR_ARGS_NAME);
320:       assertEquals(40, Node.ORIGINALNAME_PROP);
321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
322:       assertEquals(43, Node.IS_CONSTANT_NAME);
323:       assertEquals(54, Node.SLASH_V);
324:       assertEquals(50, Node.FREE_CALL);
325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
326:       assertEquals(4095, Node.COLUMN_MASK);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
329:       assertEquals(48, Node.DIRECTIVES);
330:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
331:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
333:       assertEquals(57, Node.REFLECTED_OBJECT);
334:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
335:       assertEquals(56, Node.CHANGE_TIME);
336:       assertEquals(36, Node.QUOTED_PROP);
337:       assertEquals(15, Node.NO_SIDE_EFFECTS);
338:       assertEquals(39, Node.EMPTY_BLOCK);
339:       assertEquals(53, Node.INPUT_ID);
340:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
341:       assertEquals(29, Node.JSDOC_INFO_PROP);
342:       assertEquals(52, Node.LENGTH);
343:       assertEquals(8, Node.FLAG_NO_THROWS);
344:       
345:       simpleErrorReporter0.error("is_dispatcher", "&3~/T*sR*+pZ", 1265, 57);
346:       Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
347:       assertNotNull(node1);
348:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
349:       assertFalse(node1.isNE());
350:       assertFalse(node1.isIf());
351:       assertFalse(node1.isDelProp());
352:       assertFalse(node1.isEmpty());
353:       assertFalse(node1.isString());
354:       assertFalse(node1.isIn());
355:       assertFalse(node1.isGetterDef());
356:       assertFalse(node1.isSwitch());
357:       assertFalse(node1.isInc());
358:       assertFalse(node1.isFunction());
359:       assertEquals((-1), node1.getCharno());
360:       assertFalse(node1.isDebugger());
361:       assertFalse(node1.isDefaultCase());
362:       assertFalse(node1.isArrayLit());
363:       assertFalse(node1.isThrow());
364:       assertFalse(node1.isFalse());
365:       assertEquals(0, node1.getChildCount());
366:       assertFalse(node1.isComma());
367:       assertFalse(node1.isGetProp());
368:       assertEquals(83, node1.getType());
369:       assertFalse(node1.isNull());
370:       assertFalse(node1.isBreak());
371:       assertFalse(node1.isName());
372:       assertFalse(node1.isAnd());
373:       assertTrue(node1.isParamList());
374:       assertFalse(node1.isNot());
375:       assertFalse(node1.isObjectLit());
376:       assertFalse(node1.isExprResult());
377:       assertFalse(node1.isTrue());
378:       assertFalse(node1.isWhile());
379:       assertFalse(node1.isVoid());
380:       assertFalse(node1.isCall());
381:       assertFalse(node1.isGetElem());
382:       assertFalse(node1.isReturn());
383:       assertFalse(node1.hasChildren());
384:       assertFalse(node1.isDec());
385:       assertFalse(node1.isAssign());
386:       assertFalse(node1.isTypeOf());
387:       assertEquals((-1), node1.getLineno());
388:       assertFalse(node1.isAssignAdd());
389:       assertFalse(node1.isLabelName());
390:       assertEquals((-1), node1.getSourcePosition());
391:       assertFalse(node1.isNumber());
392:       assertFalse(node1.isOr());
393:       assertFalse(node1.isAdd());
394:       assertFalse(node1.isNew());
395:       assertFalse(node1.isDo());
396:       assertFalse(node1.isContinue());
397:       assertFalse(node1.isCast());
398:       assertFalse(node1.isVar());
399:       assertFalse(node1.isLabel());
400:       assertFalse(node1.isSetterDef());
401:       assertFalse(node1.isThis());
402:       assertFalse(node1.isStringKey());
403:       assertFalse(node1.isBlock());
404:       assertFalse(node1.isScript());
405:       assertFalse(node1.hasOneChild());
406:       assertFalse(node1.isCase());
407:       assertFalse(node1.isTry());
408:       assertFalse(node1.isCatch());
409:       assertFalse(node1.hasMoreThanOneChild());
410:       assertFalse(node1.isHook());
411:       assertFalse(node1.isInstanceOf());
412:       assertFalse(node1.isFor());
413:       assertFalse(node1.isWith());
414:       assertFalse(node1.isRegExp());
415:       assertEquals(0, jSTypeArray0.length);
416:       assertEquals(53, Node.INPUT_ID);
417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
418:       assertEquals(36, Node.QUOTED_PROP);
419:       assertEquals(43, Node.IS_CONSTANT_NAME);
420:       assertEquals(56, Node.CHANGE_TIME);
421:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
422:       assertEquals(37, Node.OPT_ARG_NAME);
423:       assertEquals(55, Node.INFERRED_FUNCTION);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(2, Node.POST_FLAG);
426:       assertEquals(30, Node.VAR_ARGS_NAME);
427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
428:       assertEquals(57, Node.LAST_PROP);
429:       assertEquals(15, Node.NO_SIDE_EFFECTS);
430:       assertEquals(47, Node.IS_DISPATCHER);
431:       assertEquals(29, Node.JSDOC_INFO_PROP);
432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
433:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
434:       assertEquals(39, Node.EMPTY_BLOCK);
435:       assertEquals(52, Node.LENGTH);
436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
437:       assertEquals(57, Node.REFLECTED_OBJECT);
438:       assertEquals(54, Node.SLASH_V);
439:       assertEquals(50, Node.FREE_CALL);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
442:       assertEquals(48, Node.DIRECTIVES);
443:       assertEquals(49, Node.DIRECT_EVAL);
444:       assertEquals(12, Node.COLUMN_BITS);
445:       assertEquals(46, Node.IS_NAMESPACE);
446:       assertEquals(4095, Node.COLUMN_MASK);
447:       assertEquals(51, Node.STATIC_SOURCE_FILE);
448:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
449:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(32, Node.INCRDECR_PROP);
452:       assertFalse(node1.equals((Object)node0));
453:       
454:       Node node2 = node0.useSourceInfoIfMissingFrom(node1);
455:       assertNotNull(node2);
456:       assertEquals((-1), node0.getCharno());
457:       assertFalse(node0.isHook());
458:       assertFalse(node0.isInc());
459:       assertFalse(node0.isFalse());
460:       assertFalse(node0.isBreak());
461:       assertFalse(node0.isSwitch());
462:       assertFalse(node0.isGetProp());
463:       assertFalse(node0.isThis());
464:       assertFalse(node0.isComma());
465:       assertFalse(node0.isInstanceOf());
466:       assertFalse(node0.isObjectLit());
467:       assertFalse(node0.isGetterDef());
468:       assertFalse(node0.isFor());
469:       assertFalse(node0.isCase());
470:       assertFalse(node0.isTry());
471:       assertFalse(node0.isExprResult());
472:       assertFalse(node0.isTrue());
473:       assertFalse(node0.isScript());
474:       assertFalse(node0.isLabelName());
475:       assertFalse(node0.isGetElem());
476:       assertFalse(node0.isArrayLit());
477:       assertFalse(node0.isDelProp());
478:       assertFalse(node0.isVoid());
479:       assertFalse(node0.isLabel());
480:       assertFalse(node0.isOr());
481:       assertFalse(node0.isAssignAdd());
482:       assertEquals(0, node0.getChildCount());
483:       assertFalse(node0.isEmpty());
484:       assertFalse(node0.isDo());
485:       assertFalse(node0.isVar());
486:       assertFalse(node0.isDefaultCase());
487:       assertFalse(node0.isAdd());
488:       assertFalse(node0.isNew());
489:       assertFalse(node0.isBlock());
490:       assertFalse(node0.isStringKey());
491:       assertFalse(node0.isCall());
492:       assertFalse(node0.isNull());
493:       assertFalse(node0.isParamList());
494:       assertFalse(node0.isName());
495:       assertEquals((-1), node0.getLineno());
496:       assertFalse(node0.isReturn());
497:       assertEquals((-1), node0.getSourcePosition());
498:       assertFalse(node0.isDec());
499:       assertFalse(node0.isCatch());
500:       assertFalse(node0.isTypeOf());
501:       assertFalse(node0.isNumber());
502:       assertFalse(node0.hasMoreThanOneChild());
503:       assertFalse(node0.isAssign());
504:       assertFalse(node0.isWhile());
505:       assertFalse(node0.hasChildren());
506:       assertFalse(node0.hasOneChild());
507:       assertTrue(node0.isString());
508:       assertFalse(node0.isDebugger());
509:       assertFalse(node0.isCast());
510:       assertFalse(node0.isRegExp());
511:       assertFalse(node0.isFunction());
512:       assertFalse(node0.isWith());
513:       assertFalse(node0.isNot());
514:       assertFalse(node0.isNE());
515:       assertFalse(node0.isAnd());
516:       assertFalse(node0.isIf());
517:       assertFalse(node0.isSetterDef());
518:       assertFalse(node0.isIn());
519:       assertFalse(node0.isContinue());
520:       assertFalse(node0.isThrow());
521:       assertEquals(40, node0.getType());
522:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
523:       assertFalse(node1.isNE());
524:       assertFalse(node1.isIf());
525:       assertFalse(node1.isDelProp());
526:       assertFalse(node1.isEmpty());
527:       assertFalse(node1.isString());
528:       assertFalse(node1.isIn());
529:       assertFalse(node1.isGetterDef());
530:       assertFalse(node1.isSwitch());
531:       assertFalse(node1.isInc());
532:       assertFalse(node1.isFunction());
533:       assertEquals((-1), node1.getCharno());
534:       assertFalse(node1.isDebugger());
535:       assertFalse(node1.isDefaultCase());
536:       assertFalse(node1.isArrayLit());
537:       assertFalse(node1.isThrow());
538:       assertFalse(node1.isFalse());
539:       assertEquals(0, node1.getChildCount());
540:       assertFalse(node1.isComma());
541:       assertFalse(node1.isGetProp());
542:       assertEquals(83, node1.getType());
543:       assertFalse(node1.isNull());
544:       assertFalse(node1.isBreak());
545:       assertFalse(node1.isName());
546:       assertFalse(node1.isAnd());
547:       assertTrue(node1.isParamList());
548:       assertFalse(node1.isNot());
549:       assertFalse(node1.isObjectLit());
550:       assertFalse(node1.isExprResult());
551:       assertFalse(node1.isTrue());
552:       assertFalse(node1.isWhile());
553:       assertFalse(node1.isVoid());
554:       assertFalse(node1.isCall());
555:       assertFalse(node1.isGetElem());
556:       assertFalse(node1.isReturn());
557:       assertFalse(node1.hasChildren());
558:       assertFalse(node1.isDec());
559:       assertFalse(node1.isAssign());
560:       assertFalse(node1.isTypeOf());
561:       assertEquals((-1), node1.getLineno());
562:       assertFalse(node1.isAssignAdd());
563:       assertFalse(node1.isLabelName());
564:       assertEquals((-1), node1.getSourcePosition());
565:       assertFalse(node1.isNumber());
566:       assertFalse(node1.isOr());
567:       assertFalse(node1.isAdd());
568:       assertFalse(node1.isNew());
569:       assertFalse(node1.isDo());
570:       assertFalse(node1.isContinue());
571:       assertFalse(node1.isCast());
572:       assertFalse(node1.isVar());
573:       assertFalse(node1.isLabel());
574:       assertFalse(node1.isSetterDef());
575:       assertFalse(node1.isThis());
576:       assertFalse(node1.isStringKey());
577:       assertFalse(node1.isBlock());
578:       assertFalse(node1.isScript());
579:       assertFalse(node1.hasOneChild());
580:       assertFalse(node1.isCase());
581:       assertFalse(node1.isTry());
582:       assertFalse(node1.isCatch());
583:       assertFalse(node1.hasMoreThanOneChild());
584:       assertFalse(node1.isHook());
585:       assertFalse(node1.isInstanceOf());
586:       assertFalse(node1.isFor());
587:       assertFalse(node1.isWith());
588:       assertFalse(node1.isRegExp());
589:       assertFalse(node2.isCall());
590:       assertFalse(node2.isVar());
591:       assertFalse(node2.isStringKey());
592:       assertFalse(node2.isName());
593:       assertFalse(node2.isNull());
594:       assertFalse(node2.isBlock());
595:       assertTrue(node2.isString());
596:       assertFalse(node2.isDo());
597:       assertFalse(node2.isAdd());
598:       assertFalse(node2.isNew());
599:       assertFalse(node2.isSetterDef());
600:       assertFalse(node2.isCatch());
601:       assertFalse(node2.hasMoreThanOneChild());
602:       assertFalse(node2.isWhile());
603:       assertFalse(node2.isOr());
604:       assertFalse(node2.isReturn());
605:       assertFalse(node2.isTrue());
606:       assertFalse(node2.isVoid());
607:       assertFalse(node2.isTypeOf());
608:       assertFalse(node2.isRegExp());
609:       assertEquals((-1), node2.getLineno());
610:       assertFalse(node2.isGetElem());
611:       assertFalse(node2.isCast());
612:       assertFalse(node2.isAssign());
613:       assertFalse(node2.isDec());
614:       assertEquals((-1), node2.getSourcePosition());
615:       assertFalse(node2.hasChildren());
616:       assertFalse(node2.isDebugger());
617:       assertFalse(node2.isAnd());
618:       assertFalse(node2.isObjectLit());
619:       assertFalse(node2.isContinue());
620:       assertFalse(node2.isNot());
621:       assertEquals(40, node2.getType());
622:       assertFalse(node2.isFunction());
623:       assertFalse(node2.isThrow());
624:       assertFalse(node2.isFalse());
625:       assertFalse(node2.isHook());
626:       assertFalse(node2.isThis());
627:       assertFalse(node2.isInc());
628:       assertEquals((-1), node2.getCharno());
629:       assertFalse(node2.isCase());
630:       assertFalse(node2.isGetProp());
631:       assertFalse(node2.isIn());
632:       assertFalse(node2.isWith());
633:       assertFalse(node2.isExprResult());
634:       assertFalse(node2.isComma());
635:       assertFalse(node2.isNE());
636:       assertFalse(node2.isIf());
637:       assertFalse(node2.isDelProp());
638:       assertFalse(node2.isInstanceOf());
639:       assertFalse(node2.isBreak());
640:       assertFalse(node2.isGetterDef());
641:       assertFalse(node2.isFor());
642:       assertFalse(node2.isDefaultCase());
643:       assertFalse(node2.isAssignAdd());
644:       assertFalse(node2.isNumber());
645:       assertFalse(node2.hasOneChild());
646:       assertFalse(node2.isTry());
647:       assertFalse(node2.isEmpty());
648:       assertFalse(node2.isScript());
649:       assertEquals(0, node2.getChildCount());
650:       assertFalse(node2.isLabel());
651:       assertFalse(node2.isParamList());
652:       assertFalse(node2.isSwitch());
653:       assertFalse(node2.isLabelName());
654:       assertFalse(node2.isArrayLit());
655:       assertSame(node0, node2);
656:       assertSame(node2, node0);
657:       assertEquals(0, jSTypeArray0.length);
658:       assertEquals(12, Node.COLUMN_BITS);
659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
660:       assertEquals(46, Node.IS_NAMESPACE);
661:       assertEquals(49, Node.DIRECT_EVAL);
662:       assertEquals(1, Node.DECR_FLAG);
663:       assertEquals(57, Node.LAST_PROP);
664:       assertEquals(32, Node.INCRDECR_PROP);
665:       assertEquals(2, Node.POST_FLAG);
666:       assertEquals(37, Node.OPT_ARG_NAME);
667:       assertEquals(47, Node.IS_DISPATCHER);
668:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
669:       assertEquals(30, Node.VAR_ARGS_NAME);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
672:       assertEquals(43, Node.IS_CONSTANT_NAME);
673:       assertEquals(54, Node.SLASH_V);
674:       assertEquals(50, Node.FREE_CALL);
675:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
676:       assertEquals(4095, Node.COLUMN_MASK);
677:       assertEquals(55, Node.INFERRED_FUNCTION);
678:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
679:       assertEquals(48, Node.DIRECTIVES);
680:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
681:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
682:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
683:       assertEquals(57, Node.REFLECTED_OBJECT);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(56, Node.CHANGE_TIME);
686:       assertEquals(36, Node.QUOTED_PROP);
687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
688:       assertEquals(39, Node.EMPTY_BLOCK);
689:       assertEquals(53, Node.INPUT_ID);
690:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
691:       assertEquals(29, Node.JSDOC_INFO_PROP);
692:       assertEquals(52, Node.LENGTH);
693:       assertEquals(8, Node.FLAG_NO_THROWS);
694:       assertEquals(53, Node.INPUT_ID);
695:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
696:       assertEquals(36, Node.QUOTED_PROP);
697:       assertEquals(43, Node.IS_CONSTANT_NAME);
698:       assertEquals(56, Node.CHANGE_TIME);
699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
700:       assertEquals(37, Node.OPT_ARG_NAME);
701:       assertEquals(55, Node.INFERRED_FUNCTION);
702:       assertEquals(8, Node.FLAG_NO_THROWS);
703:       assertEquals(2, Node.POST_FLAG);
704:       assertEquals(30, Node.VAR_ARGS_NAME);
705:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
706:       assertEquals(57, Node.LAST_PROP);
707:       assertEquals(15, Node.NO_SIDE_EFFECTS);
708:       assertEquals(47, Node.IS_DISPATCHER);
709:       assertEquals(29, Node.JSDOC_INFO_PROP);
710:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
712:       assertEquals(39, Node.EMPTY_BLOCK);
713:       assertEquals(52, Node.LENGTH);
714:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
715:       assertEquals(57, Node.REFLECTED_OBJECT);
716:       assertEquals(54, Node.SLASH_V);
717:       assertEquals(50, Node.FREE_CALL);
718:       assertEquals(40, Node.ORIGINALNAME_PROP);
719:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
720:       assertEquals(48, Node.DIRECTIVES);
721:       assertEquals(49, Node.DIRECT_EVAL);
722:       assertEquals(12, Node.COLUMN_BITS);
723:       assertEquals(46, Node.IS_NAMESPACE);
724:       assertEquals(4095, Node.COLUMN_MASK);
725:       assertEquals(51, Node.STATIC_SOURCE_FILE);
726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
727:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
728:       assertEquals(1, Node.DECR_FLAG);
729:       assertEquals(32, Node.INCRDECR_PROP);
730:       assertEquals(30, Node.VAR_ARGS_NAME);
731:       assertEquals(49, Node.DIRECT_EVAL);
732:       assertEquals(57, Node.LAST_PROP);
733:       assertEquals(1, Node.DECR_FLAG);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(46, Node.IS_NAMESPACE);
736:       assertEquals(52, Node.LENGTH);
737:       assertEquals(54, Node.SLASH_V);
738:       assertEquals(51, Node.STATIC_SOURCE_FILE);
739:       assertEquals(57, Node.REFLECTED_OBJECT);
740:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
741:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
742:       assertEquals(56, Node.CHANGE_TIME);
743:       assertEquals(50, Node.FREE_CALL);
744:       assertEquals(37, Node.OPT_ARG_NAME);
745:       assertEquals(48, Node.DIRECTIVES);
746:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
747:       assertEquals(32, Node.INCRDECR_PROP);
748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
749:       assertEquals(4095, Node.COLUMN_MASK);
750:       assertEquals(12, Node.COLUMN_BITS);
751:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
752:       assertEquals(43, Node.IS_CONSTANT_NAME);
753:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
754:       assertEquals(55, Node.INFERRED_FUNCTION);
755:       assertEquals(53, Node.INPUT_ID);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(36, Node.QUOTED_PROP);
758:       assertEquals(29, Node.JSDOC_INFO_PROP);
759:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
760:       assertEquals(8, Node.FLAG_NO_THROWS);
761:       assertEquals(40, Node.ORIGINALNAME_PROP);
762:       assertEquals(39, Node.EMPTY_BLOCK);
763:       assertEquals(2, Node.POST_FLAG);
764:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
765:       assertEquals(47, Node.IS_DISPATCHER);
766:       assertFalse(node0.equals((Object)node1));
767:       assertFalse(node1.equals((Object)node0));
768:       assertFalse(node2.equals((Object)node1));
769:       
770:       Node node3 = new Node(4095, node1, node1, 56, (-1569));
771:       assertNotNull(node3);
772:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
773:       assertFalse(node1.isNE());
774:       assertFalse(node1.isIf());
775:       assertFalse(node1.isDelProp());
776:       assertFalse(node1.isEmpty());
777:       assertFalse(node1.isString());
778:       assertFalse(node1.isIn());
779:       assertFalse(node1.isGetterDef());
780:       assertFalse(node1.isSwitch());
781:       assertFalse(node1.isInc());
782:       assertFalse(node1.isFunction());
783:       assertEquals((-1), node1.getCharno());
784:       assertFalse(node1.isDebugger());
785:       assertFalse(node1.isDefaultCase());
786:       assertFalse(node1.isArrayLit());
787:       assertFalse(node1.isThrow());
788:       assertFalse(node1.isFalse());
789:       assertEquals(0, node1.getChildCount());
790:       assertFalse(node1.isComma());
791:       assertFalse(node1.isGetProp());
792:       assertEquals(83, node1.getType());
793:       assertFalse(node1.isNull());
794:       assertFalse(node1.isBreak());
795:       assertFalse(node1.isName());
796:       assertFalse(node1.isAnd());
797:       assertTrue(node1.isParamList());
798:       assertFalse(node1.isNot());
799:       assertFalse(node1.isObjectLit());
800:       assertFalse(node1.isExprResult());
801:       assertFalse(node1.isTrue());
802:       assertFalse(node1.isWhile());
803:       assertFalse(node1.isVoid());
804:       assertFalse(node1.isCall());
805:       assertFalse(node1.isGetElem());
806:       assertFalse(node1.isReturn());
807:       assertFalse(node1.hasChildren());
808:       assertFalse(node1.isDec());
809:       assertFalse(node1.isAssign());
810:       assertFalse(node1.isTypeOf());
811:       assertEquals((-1), node1.getLineno());
812:       assertFalse(node1.isAssignAdd());
813:       assertFalse(node1.isLabelName());
814:       assertEquals((-1), node1.getSourcePosition());
815:       assertFalse(node1.isNumber());
816:       assertFalse(node1.isOr());
817:       assertFalse(node1.isAdd());
818:       assertFalse(node1.isNew());
819:       assertFalse(node1.isDo());
820:       assertFalse(node1.isContinue());
821:       assertFalse(node1.isCast());
822:       assertFalse(node1.isVar());
823:       assertFalse(node1.isLabel());
824:       assertFalse(node1.isSetterDef());
825:       assertFalse(node1.isThis());
826:       assertFalse(node1.isStringKey());
827:       assertFalse(node1.isBlock());
828:       assertFalse(node1.isScript());
829:       assertFalse(node1.hasOneChild());
830:       assertFalse(node1.isCase());
831:       assertFalse(node1.isTry());
832:       assertFalse(node1.isCatch());
833:       assertFalse(node1.hasMoreThanOneChild());
834:       assertFalse(node1.isHook());
835:       assertFalse(node1.isInstanceOf());
836:       assertFalse(node1.isFor());
837:       assertFalse(node1.isWith());
838:       assertFalse(node1.isRegExp());
839:       assertFalse(node3.isCase());
840:       assertFalse(node3.isIn());
841:       assertEquals(1, node3.getChildCount());
842:       assertFalse(node3.isString());
843:       assertEquals((-1), node3.getCharno());
844:       assertTrue(node3.hasChildren());
845:       assertFalse(node3.isNE());
846:       assertFalse(node3.isIf());
847:       assertFalse(node3.isSwitch());
848:       assertFalse(node3.isDelProp());
849:       assertFalse(node3.isThrow());
850:       assertFalse(node3.isEmpty());
851:       assertFalse(node3.isFalse());
852:       assertFalse(node3.isInc());
853:       assertFalse(node3.isDefaultCase());
854:       assertFalse(node3.isAnd());
855:       assertFalse(node3.isNot());
856:       assertFalse(node3.isFunction());
857:       assertFalse(node3.isObjectLit());
858:       assertFalse(node3.isVoid());
859:       assertEquals(4095, node3.getType());
860:       assertFalse(node3.isDebugger());
861:       assertFalse(node3.isExprResult());
862:       assertFalse(node3.isTrue());
863:       assertFalse(node3.isNull());
864:       assertFalse(node3.isBreak());
865:       assertFalse(node3.isName());
866:       assertFalse(node3.isGetElem());
867:       assertFalse(node3.isCall());
868:       assertTrue(node3.hasOneChild());
869:       assertEquals((-1), node3.getSourcePosition());
870:       assertFalse(node3.isDec());
871:       assertFalse(node3.isAssign());
872:       assertFalse(node3.isTypeOf());
873:       assertFalse(node3.isGetProp());
874:       assertFalse(node3.isComma());
875:       assertFalse(node3.isReturn());
876:       assertFalse(node3.isWhile());
877:       assertFalse(node3.isContinue());
878:       assertFalse(node3.isOr());
879:       assertFalse(node3.hasMoreThanOneChild());
880:       assertEquals((-1), node3.getLineno());
881:       assertFalse(node3.isLabelName());
882:       assertFalse(node3.isCast());
883:       assertFalse(node3.isVar());
884:       assertFalse(node3.isNew());
885:       assertFalse(node3.isLabel());
886:       assertFalse(node3.isAdd());
887:       assertFalse(node3.isSetterDef());
888:       assertFalse(node3.isDo());
889:       assertFalse(node3.isAssignAdd());
890:       assertFalse(node3.isCatch());
891:       assertFalse(node3.isInstanceOf());
892:       assertFalse(node3.isWith());
893:       assertFalse(node3.isRegExp());
894:       assertFalse(node3.isParamList());
895:       assertFalse(node3.isArrayLit());
896:       assertFalse(node3.isStringKey());
897:       assertFalse(node3.isFor());
898:       assertFalse(node3.isHook());
899:       assertFalse(node3.isGetterDef());
900:       assertFalse(node3.isNumber());
901:       assertFalse(node3.isScript());
902:       assertFalse(node3.isThis());
903:       assertFalse(node3.isBlock());
904:       assertFalse(node3.isTry());
905:       assertEquals(0, jSTypeArray0.length);
906:       assertEquals(53, Node.INPUT_ID);
907:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
908:       assertEquals(36, Node.QUOTED_PROP);
909:       assertEquals(43, Node.IS_CONSTANT_NAME);
910:       assertEquals(56, Node.CHANGE_TIME);
911:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
912:       assertEquals(37, Node.OPT_ARG_NAME);
913:       assertEquals(55, Node.INFERRED_FUNCTION);
914:       assertEquals(8, Node.FLAG_NO_THROWS);
915:       assertEquals(2, Node.POST_FLAG);
916:       assertEquals(30, Node.VAR_ARGS_NAME);
917:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(15, Node.NO_SIDE_EFFECTS);
920:       assertEquals(47, Node.IS_DISPATCHER);
921:       assertEquals(29, Node.JSDOC_INFO_PROP);
922:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
923:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
924:       assertEquals(39, Node.EMPTY_BLOCK);
925:       assertEquals(52, Node.LENGTH);
926:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
927:       assertEquals(57, Node.REFLECTED_OBJECT);
928:       assertEquals(54, Node.SLASH_V);
929:       assertEquals(50, Node.FREE_CALL);
930:       assertEquals(40, Node.ORIGINALNAME_PROP);
931:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(49, Node.DIRECT_EVAL);
934:       assertEquals(12, Node.COLUMN_BITS);
935:       assertEquals(46, Node.IS_NAMESPACE);
936:       assertEquals(4095, Node.COLUMN_MASK);
937:       assertEquals(51, Node.STATIC_SOURCE_FILE);
938:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
939:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
940:       assertEquals(1, Node.DECR_FLAG);
941:       assertEquals(32, Node.INCRDECR_PROP);
942:       assertEquals(47, Node.IS_DISPATCHER);
943:       assertEquals(56, Node.CHANGE_TIME);
944:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
945:       assertEquals(29, Node.JSDOC_INFO_PROP);
946:       assertEquals(37, Node.OPT_ARG_NAME);
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(12, Node.COLUMN_BITS);
949:       assertEquals(2, Node.POST_FLAG);
950:       assertEquals(30, Node.VAR_ARGS_NAME);
951:       assertEquals(15, Node.NO_SIDE_EFFECTS);
952:       assertEquals(57, Node.LAST_PROP);
953:       assertEquals(36, Node.QUOTED_PROP);
954:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
955:       assertEquals(49, Node.DIRECT_EVAL);
956:       assertEquals(55, Node.INFERRED_FUNCTION);
957:       assertEquals(53, Node.INPUT_ID);
958:       assertEquals(57, Node.REFLECTED_OBJECT);
959:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
960:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
961:       assertEquals(52, Node.LENGTH);
962:       assertEquals(8, Node.FLAG_NO_THROWS);
963:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
964:       assertEquals(39, Node.EMPTY_BLOCK);
965:       assertEquals(48, Node.DIRECTIVES);
966:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
967:       assertEquals(40, Node.ORIGINALNAME_PROP);
968:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
969:       assertEquals(4095, Node.COLUMN_MASK);
970:       assertEquals(43, Node.IS_CONSTANT_NAME);
971:       assertEquals(1, Node.DECR_FLAG);
972:       assertEquals(54, Node.SLASH_V);
973:       assertEquals(32, Node.INCRDECR_PROP);
974:       assertEquals(46, Node.IS_NAMESPACE);
975:       assertEquals(51, Node.STATIC_SOURCE_FILE);
976:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
977:       assertEquals(50, Node.FREE_CALL);
978:       assertFalse(node1.equals((Object)node2));
979:       assertFalse(node1.equals((Object)node0));
980:       assertFalse(node3.equals((Object)node1));
981:       assertFalse(node3.equals((Object)node0));
982:       assertFalse(node3.equals((Object)node2));
983:       
984:       String string0 = node0.toString();
985:       assertNotNull(string0);
986:       assertEquals((-1), node0.getCharno());
987:       assertFalse(node0.isHook());
988:       assertFalse(node0.isInc());
989:       assertFalse(node0.isFalse());
990:       assertFalse(node0.isBreak());
991:       assertFalse(node0.isSwitch());
992:       assertFalse(node0.isGetProp());
993:       assertFalse(node0.isThis());
994:       assertFalse(node0.isComma());
995:       assertFalse(node0.isInstanceOf());
996:       assertFalse(node0.isObjectLit());
997:       assertFalse(node0.isGetterDef());
998:       assertFalse(node0.isFor());
999:       assertFalse(node0.isCase());
1000:       assertFalse(node0.isTry());
1001:       assertFalse(node0.isExprResult());
1002:       assertFalse(node0.isTrue());
1003:       assertFalse(node0.isScript());
1004:       assertFalse(node0.isLabelName());
1005:       assertFalse(node0.isGetElem());
1006:       assertFalse(node0.isArrayLit());
1007:       assertFalse(node0.isDelProp());
1008:       assertFalse(node0.isVoid());
1009:       assertFalse(node0.isLabel());
1010:       assertFalse(node0.isOr());
1011:       assertFalse(node0.isAssignAdd());
1012:       assertEquals(0, node0.getChildCount());
1013:       assertFalse(node0.isEmpty());
1014:       assertFalse(node0.isDo());
1015:       assertFalse(node0.isVar());
1016:       assertFalse(node0.isDefaultCase());
1017:       assertFalse(node0.isAdd());
1018:       assertFalse(node0.isNew());
1019:       assertFalse(node0.isBlock());
1020:       assertFalse(node0.isStringKey());
1021:       assertFalse(node0.isCall());
1022:       assertFalse(node0.isNull());
1023:       assertFalse(node0.isParamList());
1024:       assertFalse(node0.isName());
1025:       assertEquals((-1), node0.getLineno());
1026:       assertFalse(node0.isReturn());
1027:       assertEquals((-1), node0.getSourcePosition());
1028:       assertFalse(node0.isDec());
1029:       assertFalse(node0.isCatch());
1030:       assertFalse(node0.isTypeOf());
1031:       assertFalse(node0.isNumber());
1032:       assertFalse(node0.hasMoreThanOneChild());
1033:       assertFalse(node0.isAssign());
1034:       assertFalse(node0.isWhile());
1035:       assertFalse(node0.hasChildren());
1036:       assertFalse(node0.hasOneChild());
1037:       assertTrue(node0.isString());
1038:       assertFalse(node0.isDebugger());
1039:       assertFalse(node0.isCast());
1040:       assertFalse(node0.isRegExp());
1041:       assertFalse(node0.isFunction());
1042:       assertFalse(node0.isWith());
1043:       assertFalse(node0.isNot());
1044:       assertFalse(node0.isNE());
1045:       assertFalse(node0.isAnd());
1046:       assertFalse(node0.isIf());
1047:       assertFalse(node0.isSetterDef());
1048:       assertFalse(node0.isIn());
1049:       assertFalse(node0.isContinue());
1050:       assertFalse(node0.isThrow());
1051:       assertEquals(40, node0.getType());
1052:       assertSame(node0, node2);
1053:       assertEquals(12, Node.COLUMN_BITS);
1054:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1055:       assertEquals(46, Node.IS_NAMESPACE);
1056:       assertEquals(49, Node.DIRECT_EVAL);
1057:       assertEquals(1, Node.DECR_FLAG);
1058:       assertEquals(57, Node.LAST_PROP);
1059:       assertEquals(32, Node.INCRDECR_PROP);
1060:       assertEquals(2, Node.POST_FLAG);
1061:       assertEquals(37, Node.OPT_ARG_NAME);
1062:       assertEquals(47, Node.IS_DISPATCHER);
1063:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1064:       assertEquals(30, Node.VAR_ARGS_NAME);
1065:       assertEquals(40, Node.ORIGINALNAME_PROP);
1066:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1067:       assertEquals(43, Node.IS_CONSTANT_NAME);
1068:       assertEquals(54, Node.SLASH_V);
1069:       assertEquals(50, Node.FREE_CALL);
1070:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1071:       assertEquals(4095, Node.COLUMN_MASK);
1072:       assertEquals(55, Node.INFERRED_FUNCTION);
1073:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1074:       assertEquals(48, Node.DIRECTIVES);
1075:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1077:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1078:       assertEquals(57, Node.REFLECTED_OBJECT);
1079:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1080:       assertEquals(56, Node.CHANGE_TIME);
1081:       assertEquals(36, Node.QUOTED_PROP);
1082:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1083:       assertEquals(39, Node.EMPTY_BLOCK);
1084:       assertEquals(53, Node.INPUT_ID);
1085:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1086:       assertEquals(29, Node.JSDOC_INFO_PROP);
1087:       assertEquals(52, Node.LENGTH);
1088:       assertEquals(8, Node.FLAG_NO_THROWS);
1089:       assertFalse(node0.equals((Object)node1));
1090:       assertFalse(node0.equals((Object)node3));
1091:       
1092:       node3.addChildrenToFront(node0);
1093:       assertEquals((-1), node0.getCharno());
1094:       assertFalse(node0.isHook());
1095:       assertFalse(node0.isInc());
1096:       assertFalse(node0.isFalse());
1097:       assertFalse(node0.isBreak());
1098:       assertFalse(node0.isSwitch());
1099:       assertFalse(node0.isGetProp());
1100:       assertFalse(node0.isThis());
1101:       assertFalse(node0.isComma());
1102:       assertFalse(node0.isInstanceOf());
1103:       assertFalse(node0.isObjectLit());
1104:       assertFalse(node0.isGetterDef());
1105:       assertFalse(node0.isFor());
1106:       assertFalse(node0.isCase());
1107:       assertFalse(node0.isTry());
1108:       assertFalse(node0.isExprResult());
1109:       assertFalse(node0.isTrue());
1110:       assertFalse(node0.isScript());
1111:       assertFalse(node0.isLabelName());
1112:       assertFalse(node0.isGetElem());
1113:       assertFalse(node0.isArrayLit());
1114:       assertFalse(node0.isDelProp());
1115:       assertFalse(node0.isVoid());
1116:       assertFalse(node0.isLabel());
1117:       assertFalse(node0.isOr());
1118:       assertFalse(node0.isAssignAdd());
1119:       assertEquals(0, node0.getChildCount());
1120:       assertFalse(node0.isEmpty());
1121:       assertFalse(node0.isDo());
1122:       assertFalse(node0.isVar());
1123:       assertFalse(node0.isDefaultCase());
1124:       assertFalse(node0.isAdd());
1125:       assertFalse(node0.isNew());
1126:       assertFalse(node0.isBlock());
1127:       assertFalse(node0.isStringKey());
1128:       assertFalse(node0.isCall());
1129:       assertFalse(node0.isNull());
1130:       assertFalse(node0.isParamList());
1131:       assertFalse(node0.isName());
1132:       assertEquals((-1), node0.getLineno());
1133:       assertFalse(node0.isReturn());
1134:       assertEquals((-1), node0.getSourcePosition());
1135:       assertFalse(node0.isDec());
1136:       assertFalse(node0.isCatch());
1137:       assertFalse(node0.isTypeOf());
1138:       assertFalse(node0.isNumber());
1139:       assertFalse(node0.hasMoreThanOneChild());
1140:       assertFalse(node0.isAssign());
1141:       assertFalse(node0.isWhile());
1142:       assertFalse(node0.hasChildren());
1143:       assertFalse(node0.hasOneChild());
1144:       assertTrue(node0.isString());
1145:       assertFalse(node0.isDebugger());
1146:       assertFalse(node0.isCast());
1147:       assertFalse(node0.isRegExp());
1148:       assertFalse(node0.isFunction());
1149:       assertFalse(node0.isWith());
1150:       assertFalse(node0.isNot());
1151:       assertFalse(node0.isNE());
1152:       assertFalse(node0.isAnd());
1153:       assertFalse(node0.isIf());
1154:       assertFalse(node0.isSetterDef());
1155:       assertFalse(node0.isIn());
1156:       assertFalse(node0.isContinue());
1157:       assertFalse(node0.isThrow());
1158:       assertEquals(40, node0.getType());
1159:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1160:       assertFalse(node1.isNE());
1161:       assertFalse(node1.isIf());
1162:       assertFalse(node1.isDelProp());
1163:       assertFalse(node1.isEmpty());
1164:       assertFalse(node1.isString());
1165:       assertFalse(node1.isIn());
1166:       assertFalse(node1.isGetterDef());
1167:       assertFalse(node1.isSwitch());
1168:       assertFalse(node1.isInc());
1169:       assertFalse(node1.isFunction());
1170:       assertEquals((-1), node1.getCharno());
1171:       assertFalse(node1.isDebugger());
1172:       assertFalse(node1.isDefaultCase());
1173:       assertFalse(node1.isArrayLit());
1174:       assertFalse(node1.isThrow());
1175:       assertFalse(node1.isFalse());
1176:       assertEquals(0, node1.getChildCount());
1177:       assertFalse(node1.isComma());
1178:       assertFalse(node1.isGetProp());
1179:       assertEquals(83, node1.getType());
1180:       assertFalse(node1.isNull());
1181:       assertFalse(node1.isBreak());
1182:       assertFalse(node1.isName());
1183:       assertFalse(node1.isAnd());
1184:       assertTrue(node1.isParamList());
1185:       assertFalse(node1.isNot());
1186:       assertFalse(node1.isObjectLit());
1187:       assertFalse(node1.isExprResult());
1188:       assertFalse(node1.isTrue());
1189:       assertFalse(node1.isWhile());
1190:       assertFalse(node1.isVoid());
1191:       assertFalse(node1.isCall());
1192:       assertFalse(node1.isGetElem());
1193:       assertFalse(node1.isReturn());
1194:       assertFalse(node1.hasChildren());
1195:       assertFalse(node1.isDec());
1196:       assertFalse(node1.isAssign());
1197:       assertFalse(node1.isTypeOf());
1198:       assertEquals((-1), node1.getLineno());
1199:       assertFalse(node1.isAssignAdd());
1200:       assertFalse(node1.isLabelName());
1201:       assertEquals((-1), node1.getSourcePosition());
1202:       assertFalse(node1.isNumber());
1203:       assertFalse(node1.isOr());
1204:       assertFalse(node1.isAdd());
1205:       assertFalse(node1.isNew());
1206:       assertFalse(node1.isDo());
1207:       assertFalse(node1.isContinue());
1208:       assertFalse(node1.isCast());
1209:       assertFalse(node1.isVar());
1210:       assertFalse(node1.isLabel());
1211:       assertFalse(node1.isSetterDef());
1212:       assertFalse(node1.isThis());
1213:       assertFalse(node1.isStringKey());
1214:       assertFalse(node1.isBlock());
1215:       assertFalse(node1.isScript());
1216:       assertFalse(node1.hasOneChild());
1217:       assertFalse(node1.isCase());
1218:       assertFalse(node1.isTry());
1219:       assertFalse(node1.isCatch());
1220:       assertFalse(node1.hasMoreThanOneChild());
1221:       assertFalse(node1.isHook());
1222:       assertFalse(node1.isInstanceOf());
1223:       assertFalse(node1.isFor());
1224:       assertFalse(node1.isWith());
1225:       assertFalse(node1.isRegExp());
1226:       assertFalse(node3.isCase());
1227:       assertFalse(node3.isIn());
1228:       assertFalse(node3.isString());
1229:       assertEquals((-1), node3.getCharno());
1230:       assertTrue(node3.hasChildren());
1231:       assertFalse(node3.isNE());
1232:       assertFalse(node3.isIf());
1233:       assertTrue(node3.hasMoreThanOneChild());
1234:       assertFalse(node3.isSwitch());
1235:       assertFalse(node3.isDelProp());
1236:       assertFalse(node3.isThrow());
1237:       assertFalse(node3.isEmpty());
1238:       assertFalse(node3.isFalse());
1239:       assertEquals(2, node3.getChildCount());
1240:       assertFalse(node3.isInc());
1241:       assertFalse(node3.isDefaultCase());
1242:       assertFalse(node3.isAnd());
1243:       assertFalse(node3.isNot());
1244:       assertFalse(node3.isFunction());
1245:       assertFalse(node3.isObjectLit());
1246:       assertFalse(node3.isVoid());
1247:       assertEquals(4095, node3.getType());
1248:       assertFalse(node3.isDebugger());
1249:       assertFalse(node3.isExprResult());
1250:       assertFalse(node3.isTrue());
1251:       assertFalse(node3.isNull());
1252:       assertFalse(node3.isBreak());
1253:       assertFalse(node3.isName());
1254:       assertFalse(node3.isGetElem());
1255:       assertFalse(node3.isCall());
1256:       assertEquals((-1), node3.getSourcePosition());
1257:       assertFalse(node3.isDec());
1258:       assertFalse(node3.isAssign());
1259:       assertFalse(node3.isTypeOf());
1260:       assertFalse(node3.isGetProp());
1261:       assertFalse(node3.isComma());
1262:       assertFalse(node3.isReturn());
1263:       assertFalse(node3.isWhile());
1264:       assertFalse(node3.isContinue());
1265:       assertFalse(node3.isOr());
1266:       assertEquals((-1), node3.getLineno());
1267:       assertFalse(node3.isLabelName());
1268:       assertFalse(node3.isCast());
1269:       assertFalse(node3.isVar());
1270:       assertFalse(node3.isNew());
1271:       assertFalse(node3.isLabel());
1272:       assertFalse(node3.isAdd());
1273:       assertFalse(node3.isSetterDef());
1274:       assertFalse(node3.isDo());
1275:       assertFalse(node3.isAssignAdd());
1276:       assertFalse(node3.isCatch());
1277:       assertFalse(node3.isInstanceOf());
1278:       assertFalse(node3.isWith());
1279:       assertFalse(node3.isRegExp());
1280:       assertFalse(node3.isParamList());
1281:       assertFalse(node3.isArrayLit());
1282:       assertFalse(node3.isStringKey());
1283:       assertFalse(node3.isFor());
1284:       assertFalse(node3.isHook());
1285:       assertFalse(node3.isGetterDef());
1286:       assertFalse(node3.isNumber());
1287:       assertFalse(node3.isScript());
1288:       assertFalse(node3.isThis());
1289:       assertFalse(node3.isBlock());
1290:       assertFalse(node3.hasOneChild());
1291:       assertFalse(node3.isTry());
1292:       assertSame(node0, node2);
1293:       assertNotSame(node1, node3);
1294:       assertNotSame(node3, node1);
1295:       assertEquals(0, jSTypeArray0.length);
1296:       assertEquals(12, Node.COLUMN_BITS);
1297:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1298:       assertEquals(46, Node.IS_NAMESPACE);
1299:       assertEquals(49, Node.DIRECT_EVAL);
1300:       assertEquals(1, Node.DECR_FLAG);
1301:       assertEquals(57, Node.LAST_PROP);
1302:       assertEquals(32, Node.INCRDECR_PROP);
1303:       assertEquals(2, Node.POST_FLAG);
1304:       assertEquals(37, Node.OPT_ARG_NAME);
1305:       assertEquals(47, Node.IS_DISPATCHER);
1306:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1307:       assertEquals(30, Node.VAR_ARGS_NAME);
1308:       assertEquals(40, Node.ORIGINALNAME_PROP);
1309:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1310:       assertEquals(43, Node.IS_CONSTANT_NAME);
1311:       assertEquals(54, Node.SLASH_V);
1312:       assertEquals(50, Node.FREE_CALL);
1313:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1314:       assertEquals(4095, Node.COLUMN_MASK);
1315:       assertEquals(55, Node.INFERRED_FUNCTION);
1316:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1317:       assertEquals(48, Node.DIRECTIVES);
1318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1321:       assertEquals(57, Node.REFLECTED_OBJECT);
1322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1323:       assertEquals(56, Node.CHANGE_TIME);
1324:       assertEquals(36, Node.QUOTED_PROP);
1325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1326:       assertEquals(39, Node.EMPTY_BLOCK);
1327:       assertEquals(53, Node.INPUT_ID);
1328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1329:       assertEquals(29, Node.JSDOC_INFO_PROP);
1330:       assertEquals(52, Node.LENGTH);
1331:       assertEquals(8, Node.FLAG_NO_THROWS);
1332:       assertEquals(53, Node.INPUT_ID);
1333:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1334:       assertEquals(36, Node.QUOTED_PROP);
1335:       assertEquals(43, Node.IS_CONSTANT_NAME);
1336:       assertEquals(56, Node.CHANGE_TIME);
1337:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1338:       assertEquals(37, Node.OPT_ARG_NAME);
1339:       assertEquals(55, Node.INFERRED_FUNCTION);
1340:       assertEquals(8, Node.FLAG_NO_THROWS);
1341:       assertEquals(2, Node.POST_FLAG);
1342:       assertEquals(30, Node.VAR_ARGS_NAME);
1343:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1344:       assertEquals(57, Node.LAST_PROP);
1345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1346:       assertEquals(47, Node.IS_DISPATCHER);
1347:       assertEquals(29, Node.JSDOC_INFO_PROP);
1348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1349:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1350:       assertEquals(39, Node.EMPTY_BLOCK);
1351:       assertEquals(52, Node.LENGTH);
1352:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1353:       assertEquals(57, Node.REFLECTED_OBJECT);
1354:       assertEquals(54, Node.SLASH_V);
1355:       assertEquals(50, Node.FREE_CALL);
1356:       assertEquals(40, Node.ORIGINALNAME_PROP);
1357:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1358:       assertEquals(48, Node.DIRECTIVES);
1359:       assertEquals(49, Node.DIRECT_EVAL);
1360:       assertEquals(12, Node.COLUMN_BITS);
1361:       assertEquals(46, Node.IS_NAMESPACE);
1362:       assertEquals(4095, Node.COLUMN_MASK);
1363:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1365:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1366:       assertEquals(1, Node.DECR_FLAG);
1367:       assertEquals(32, Node.INCRDECR_PROP);
1368:       assertEquals(47, Node.IS_DISPATCHER);
1369:       assertEquals(56, Node.CHANGE_TIME);
1370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1371:       assertEquals(29, Node.JSDOC_INFO_PROP);
1372:       assertEquals(37, Node.OPT_ARG_NAME);
1373:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1374:       assertEquals(12, Node.COLUMN_BITS);
1375:       assertEquals(2, Node.POST_FLAG);
1376:       assertEquals(30, Node.VAR_ARGS_NAME);
1377:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1378:       assertEquals(57, Node.LAST_PROP);
1379:       assertEquals(36, Node.QUOTED_PROP);
1380:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1381:       assertEquals(49, Node.DIRECT_EVAL);
1382:       assertEquals(55, Node.INFERRED_FUNCTION);
1383:       assertEquals(53, Node.INPUT_ID);
1384:       assertEquals(57, Node.REFLECTED_OBJECT);
1385:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1386:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1387:       assertEquals(52, Node.LENGTH);
1388:       assertEquals(8, Node.FLAG_NO_THROWS);
1389:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1390:       assertEquals(39, Node.EMPTY_BLOCK);
1391:       assertEquals(48, Node.DIRECTIVES);
1392:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1393:       assertEquals(40, Node.ORIGINALNAME_PROP);
1394:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1395:       assertEquals(4095, Node.COLUMN_MASK);
1396:       assertEquals(43, Node.IS_CONSTANT_NAME);
1397:       assertEquals(1, Node.DECR_FLAG);
1398:       assertEquals(54, Node.SLASH_V);
1399:       assertEquals(32, Node.INCRDECR_PROP);
1400:       assertEquals(46, Node.IS_NAMESPACE);
1401:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1402:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1403:       assertEquals(50, Node.FREE_CALL);
1404:       assertFalse(node0.equals((Object)node1));
1405:       assertFalse(node0.equals((Object)node3));
1406:       assertFalse(node1.equals((Object)node2));
1407:       assertFalse(node1.equals((Object)node3));
1408:       assertFalse(node1.equals((Object)node0));
1409:       assertFalse(node3.equals((Object)node1));
1410:       assertFalse(node3.equals((Object)node0));
1411:       assertFalse(node3.equals((Object)node2));
1412:       
1413:       boolean boolean0 = node0.isDo();
1414:       assertEquals((-1), node0.getCharno());
1415:       assertFalse(node0.isHook());
1416:       assertFalse(node0.isInc());
1417:       assertFalse(node0.isFalse());
1418:       assertFalse(node0.isBreak());
1419:       assertFalse(node0.isSwitch());
1420:       assertFalse(node0.isGetProp());
1421:       assertFalse(node0.isThis());
1422:       assertFalse(node0.isComma());
1423:       assertFalse(node0.isInstanceOf());
1424:       assertFalse(node0.isObjectLit());
1425:       assertFalse(node0.isGetterDef());
1426:       assertFalse(node0.isFor());
1427:       assertFalse(node0.isCase());
1428:       assertFalse(node0.isTry());
1429:       assertFalse(node0.isExprResult());
1430:       assertFalse(node0.isTrue());
1431:       assertFalse(node0.isScript());
1432:       assertFalse(node0.isLabelName());
1433:       assertFalse(node0.isGetElem());
1434:       assertFalse(node0.isArrayLit());
1435:       assertFalse(node0.isDelProp());
1436:       assertFalse(node0.isVoid());
1437:       assertFalse(node0.isLabel());
1438:       assertFalse(node0.isOr());
1439:       assertFalse(node0.isAssignAdd());
1440:       assertEquals(0, node0.getChildCount());
1441:       assertFalse(node0.isEmpty());
1442:       assertFalse(node0.isDo());
1443:       assertFalse(node0.isVar());
1444:       assertFalse(node0.isDefaultCase());
1445:       assertFalse(node0.isAdd());
1446:       assertFalse(node0.isNew());
1447:       assertFalse(node0.isBlock());
1448:       assertFalse(node0.isStringKey());
1449:       assertFalse(node0.isCall());
1450:       assertFalse(node0.isNull());
1451:       assertFalse(node0.isParamList());
1452:       assertFalse(node0.isName());
1453:       assertEquals((-1), node0.getLineno());
1454:       assertFalse(node0.isReturn());
1455:       assertEquals((-1), node0.getSourcePosition());
1456:       assertFalse(node0.isDec());
1457:       assertFalse(node0.isCatch());
1458:       assertFalse(node0.isTypeOf());
1459:       assertFalse(node0.isNumber());
1460:       assertFalse(node0.hasMoreThanOneChild());
1461:       assertFalse(node0.isAssign());
1462:       assertFalse(node0.isWhile());
1463:       assertFalse(node0.hasChildren());
1464:       assertFalse(node0.hasOneChild());
1465:       assertTrue(node0.isString());
1466:       assertFalse(node0.isDebugger());
1467:       assertFalse(node0.isCast());
1468:       assertFalse(node0.isRegExp());
1469:       assertFalse(node0.isFunction());
1470:       assertFalse(node0.isWith());
1471:       assertFalse(node0.isNot());
1472:       assertFalse(node0.isNE());
1473:       assertFalse(node0.isAnd());
1474:       assertFalse(node0.isIf());
1475:       assertFalse(node0.isSetterDef());
1476:       assertFalse(node0.isIn());
1477:       assertFalse(node0.isContinue());
1478:       assertFalse(node0.isThrow());
1479:       assertEquals(40, node0.getType());
1480:       assertFalse(boolean0);
1481:       assertSame(node0, node2);
1482:       assertEquals(12, Node.COLUMN_BITS);
1483:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1484:       assertEquals(46, Node.IS_NAMESPACE);
1485:       assertEquals(49, Node.DIRECT_EVAL);
1486:       assertEquals(1, Node.DECR_FLAG);
1487:       assertEquals(57, Node.LAST_PROP);
1488:       assertEquals(32, Node.INCRDECR_PROP);
1489:       assertEquals(2, Node.POST_FLAG);
1490:       assertEquals(37, Node.OPT_ARG_NAME);
1491:       assertEquals(47, Node.IS_DISPATCHER);
1492:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1493:       assertEquals(30, Node.VAR_ARGS_NAME);
1494:       assertEquals(40, Node.ORIGINALNAME_PROP);
1495:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1496:       assertEquals(43, Node.IS_CONSTANT_NAME);
1497:       assertEquals(54, Node.SLASH_V);
1498:       assertEquals(50, Node.FREE_CALL);
1499:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1500:       assertEquals(4095, Node.COLUMN_MASK);
1501:       assertEquals(55, Node.INFERRED_FUNCTION);
1502:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1503:       assertEquals(48, Node.DIRECTIVES);
1504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1505:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1506:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1507:       assertEquals(57, Node.REFLECTED_OBJECT);
1508:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1509:       assertEquals(56, Node.CHANGE_TIME);
1510:       assertEquals(36, Node.QUOTED_PROP);
1511:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1512:       assertEquals(39, Node.EMPTY_BLOCK);
1513:       assertEquals(53, Node.INPUT_ID);
1514:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1515:       assertEquals(29, Node.JSDOC_INFO_PROP);
1516:       assertEquals(52, Node.LENGTH);
1517:       assertEquals(8, Node.FLAG_NO_THROWS);
1518:       assertFalse(node0.equals((Object)node1));
1519:       assertFalse(node0.equals((Object)node3));
1520:       
1521:       Iterable<Node> iterable0 = node0.children();
1522:       assertNotNull(iterable0);
1523:       assertEquals((-1), node0.getCharno());
1524:       assertFalse(node0.isHook());
1525:       assertFalse(node0.isInc());
1526:       assertFalse(node0.isFalse());
1527:       assertFalse(node0.isBreak());
1528:       assertFalse(node0.isSwitch());
1529:       assertFalse(node0.isGetProp());
1530:       assertFalse(node0.isThis());
1531:       assertFalse(node0.isComma());
1532:       assertFalse(node0.isInstanceOf());
1533:       assertFalse(node0.isObjectLit());
1534:       assertFalse(node0.isGetterDef());
1535:       assertFalse(node0.isFor());
1536:       assertFalse(node0.isCase());
1537:       assertFalse(node0.isTry());
1538:       assertFalse(node0.isExprResult());
1539:       assertFalse(node0.isTrue());
1540:       assertFalse(node0.isScript());
1541:       assertFalse(node0.isLabelName());
1542:       assertFalse(node0.isGetElem());
1543:       assertFalse(node0.isArrayLit());
1544:       assertFalse(node0.isDelProp());
1545:       assertFalse(node0.isVoid());
1546:       assertFalse(node0.isLabel());
1547:       assertFalse(node0.isOr());
1548:       assertFalse(node0.isAssignAdd());
1549:       assertEquals(0, node0.getChildCount());
1550:       assertFalse(node0.isEmpty());
1551:       assertFalse(node0.isDo());
1552:       assertFalse(node0.isVar());
1553:       assertFalse(node0.isDefaultCase());
1554:       assertFalse(node0.isAdd());
1555:       assertFalse(node0.isNew());
1556:       assertFalse(node0.isBlock());
1557:       assertFalse(node0.isStringKey());
1558:       assertFalse(node0.isCall());
1559:       assertFalse(node0.isNull());
1560:       assertFalse(node0.isParamList());
1561:       assertFalse(node0.isName());
1562:       assertEquals((-1), node0.getLineno());
1563:       assertFalse(node0.isReturn());
1564:       assertEquals((-1), node0.getSourcePosition());
1565:       assertFalse(node0.isDec());
1566:       assertFalse(node0.isCatch());
1567:       assertFalse(node0.isTypeOf());
1568:       assertFalse(node0.isNumber());
1569:       assertFalse(node0.hasMoreThanOneChild());
1570:       assertFalse(node0.isAssign());
1571:       assertFalse(node0.isWhile());
1572:       assertFalse(node0.hasChildren());
1573:       assertFalse(node0.hasOneChild());
1574:       assertTrue(node0.isString());
1575:       assertFalse(node0.isDebugger());
1576:       assertFalse(node0.isCast());
1577:       assertFalse(node0.isRegExp());
1578:       assertFalse(node0.isFunction());
1579:       assertFalse(node0.isWith());
1580:       assertFalse(node0.isNot());
1581:       assertFalse(node0.isNE());
1582:       assertFalse(node0.isAnd());
1583:       assertFalse(node0.isIf());
1584:       assertFalse(node0.isSetterDef());
1585:       assertFalse(node0.isIn());
1586:       assertFalse(node0.isContinue());
1587:       assertFalse(node0.isThrow());
1588:       assertEquals(40, node0.getType());
1589:       assertSame(node0, node2);
1590:       assertEquals(12, Node.COLUMN_BITS);
1591:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1592:       assertEquals(46, Node.IS_NAMESPACE);
1593:       assertEquals(49, Node.DIRECT_EVAL);
1594:       assertEquals(1, Node.DECR_FLAG);
1595:       assertEquals(57, Node.LAST_PROP);
1596:       assertEquals(32, Node.INCRDECR_PROP);
1597:       assertEquals(2, Node.POST_FLAG);
1598:       assertEquals(37, Node.OPT_ARG_NAME);
1599:       assertEquals(47, Node.IS_DISPATCHER);
1600:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1601:       assertEquals(30, Node.VAR_ARGS_NAME);
1602:       assertEquals(40, Node.ORIGINALNAME_PROP);
1603:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1604:       assertEquals(43, Node.IS_CONSTANT_NAME);
1605:       assertEquals(54, Node.SLASH_V);
1606:       assertEquals(50, Node.FREE_CALL);
1607:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1608:       assertEquals(4095, Node.COLUMN_MASK);
1609:       assertEquals(55, Node.INFERRED_FUNCTION);
1610:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1611:       assertEquals(48, Node.DIRECTIVES);
1612:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1613:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1614:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1615:       assertEquals(57, Node.REFLECTED_OBJECT);
1616:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1617:       assertEquals(56, Node.CHANGE_TIME);
1618:       assertEquals(36, Node.QUOTED_PROP);
1619:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1620:       assertEquals(39, Node.EMPTY_BLOCK);
1621:       assertEquals(53, Node.INPUT_ID);
1622:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1623:       assertEquals(29, Node.JSDOC_INFO_PROP);
1624:       assertEquals(52, Node.LENGTH);
1625:       assertEquals(8, Node.FLAG_NO_THROWS);
1626:       assertFalse(iterable0.contains(node1));
1627:       assertFalse(node0.equals((Object)node1));
1628:       assertFalse(node0.equals((Object)node3));
1629:       
1630:       Node node4 = node2.copyInformationFromForTree(node3);
1631:       assertNotNull(node4);
1632:       assertEquals((-1), node0.getCharno());
1633:       assertFalse(node0.isHook());
1634:       assertFalse(node0.isInc());
1635:       assertFalse(node0.isFalse());
1636:       assertFalse(node0.isBreak());
1637:       assertFalse(node0.isSwitch());
1638:       assertFalse(node0.isGetProp());
1639:       assertFalse(node0.isThis());
1640:       assertFalse(node0.isComma());
1641:       assertFalse(node0.isInstanceOf());
1642:       assertFalse(node0.isObjectLit());
1643:       assertFalse(node0.isGetterDef());
1644:       assertFalse(node0.isFor());
1645:       assertFalse(node0.isCase());
1646:       assertFalse(node0.isTry());
1647:       assertFalse(node0.isExprResult());
1648:       assertFalse(node0.isTrue());
1649:       assertFalse(node0.isScript());
1650:       assertFalse(node0.isLabelName());
1651:       assertFalse(node0.isGetElem());
1652:       assertFalse(node0.isArrayLit());
1653:       assertFalse(node0.isDelProp());
1654:       assertFalse(node0.isVoid());
1655:       assertFalse(node0.isLabel());
1656:       assertFalse(node0.isOr());
1657:       assertFalse(node0.isAssignAdd());
1658:       assertEquals(0, node0.getChildCount());
1659:       assertFalse(node0.isEmpty());
1660:       assertFalse(node0.isDo());
1661:       assertFalse(node0.isVar());
1662:       assertFalse(node0.isDefaultCase());
1663:       assertFalse(node0.isAdd());
1664:       assertFalse(node0.isNew());
1665:       assertFalse(node0.isBlock());
1666:       assertFalse(node0.isStringKey());
1667:       assertFalse(node0.isCall());
1668:       assertFalse(node0.isNull());
1669:       assertFalse(node0.isParamList());
1670:       assertFalse(node0.isName());
1671:       assertEquals((-1), node0.getLineno());
1672:       assertFalse(node0.isReturn());
1673:       assertEquals((-1), node0.getSourcePosition());
1674:       assertFalse(node0.isDec());
1675:       assertFalse(node0.isCatch());
1676:       assertFalse(node0.isTypeOf());
1677:       assertFalse(node0.isNumber());
1678:       assertFalse(node0.hasMoreThanOneChild());
1679:       assertFalse(node0.isAssign());
1680:       assertFalse(node0.isWhile());
1681:       assertFalse(node0.hasChildren());
1682:       assertFalse(node0.hasOneChild());
1683:       assertTrue(node0.isString());
1684:       assertFalse(node0.isDebugger());
1685:       assertFalse(node0.isCast());
1686:       assertFalse(node0.isRegExp());
1687:       assertFalse(node0.isFunction());
1688:       assertFalse(node0.isWith());
1689:       assertFalse(node0.isNot());
1690:       assertFalse(node0.isNE());
1691:       assertFalse(node0.isAnd());
1692:       assertFalse(node0.isIf());
1693:       assertFalse(node0.isSetterDef());
1694:       assertFalse(node0.isIn());
1695:       assertFalse(node0.isContinue());
1696:       assertFalse(node0.isThrow());
1697:       assertEquals(40, node0.getType());
1698:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1699:       assertFalse(node1.isNE());
1700:       assertFalse(node1.isIf());
1701:       assertFalse(node1.isDelProp());
1702:       assertFalse(node1.isEmpty());
1703:       assertFalse(node1.isString());
1704:       assertFalse(node1.isIn());
1705:       assertFalse(node1.isGetterDef());
1706:       assertFalse(node1.isSwitch());
1707:       assertFalse(node1.isInc());
1708:       assertFalse(node1.isFunction());
1709:       assertEquals((-1), node1.getCharno());
1710:       assertFalse(node1.isDebugger());
1711:       assertFalse(node1.isDefaultCase());
1712:       assertFalse(node1.isArrayLit());
1713:       assertFalse(node1.isThrow());
1714:       assertFalse(node1.isFalse());
1715:       assertEquals(0, node1.getChildCount());
1716:       assertFalse(node1.isComma());
1717:       assertFalse(node1.isGetProp());
1718:       assertEquals(83, node1.getType());
1719:       assertFalse(node1.isNull());
1720:       assertFalse(node1.isBreak());
1721:       assertFalse(node1.isName());
1722:       assertFalse(node1.isAnd());
1723:       assertTrue(node1.isParamList());
1724:       assertFalse(node1.isNot());
1725:       assertFalse(node1.isObjectLit());
1726:       assertFalse(node1.isExprResult());
1727:       assertFalse(node1.isTrue());
1728:       assertFalse(node1.isWhile());
1729:       assertFalse(node1.isVoid());
1730:       assertFalse(node1.isCall());
1731:       assertFalse(node1.isGetElem());
1732:       assertFalse(node1.isReturn());
1733:       assertFalse(node1.hasChildren());
1734:       assertFalse(node1.isDec());
1735:       assertFalse(node1.isAssign());
1736:       assertFalse(node1.isTypeOf());
1737:       assertEquals((-1), node1.getLineno());
1738:       assertFalse(node1.isAssignAdd());
1739:       assertFalse(node1.isLabelName());
1740:       assertEquals((-1), node1.getSourcePosition());
1741:       assertFalse(node1.isNumber());
1742:       assertFalse(node1.isOr());
1743:       assertFalse(node1.isAdd());
1744:       assertFalse(node1.isNew());
1745:       assertFalse(node1.isDo());
1746:       assertFalse(node1.isContinue());
1747:       assertFalse(node1.isCast());
1748:       assertFalse(node1.isVar());
1749:       assertFalse(node1.isLabel());
1750:       assertFalse(node1.isSetterDef());
1751:       assertFalse(node1.isThis());
1752:       assertFalse(node1.isStringKey());
1753:       assertFalse(node1.isBlock());
1754:       assertFalse(node1.isScript());
1755:       assertFalse(node1.hasOneChild());
1756:       assertFalse(node1.isCase());
1757:       assertFalse(node1.isTry());
1758:       assertFalse(node1.isCatch());
1759:       assertFalse(node1.hasMoreThanOneChild());
1760:       assertFalse(node1.isHook());
1761:       assertFalse(node1.isInstanceOf());
1762:       assertFalse(node1.isFor());
1763:       assertFalse(node1.isWith());
1764:       assertFalse(node1.isRegExp());
1765:       assertFalse(node2.isCall());
1766:       assertFalse(node2.isVar());
1767:       assertFalse(node2.isStringKey());
1768:       assertFalse(node2.isName());
1769:       assertFalse(node2.isNull());
1770:       assertFalse(node2.isBlock());
1771:       assertTrue(node2.isString());
1772:       assertFalse(node2.isDo());
1773:       assertFalse(node2.isAdd());
1774:       assertFalse(node2.isNew());
1775:       assertFalse(node2.isSetterDef());
1776:       assertFalse(node2.isCatch());
1777:       assertFalse(node2.hasMoreThanOneChild());
1778:       assertFalse(node2.isWhile());
1779:       assertFalse(node2.isOr());
1780:       assertFalse(node2.isReturn());
1781:       assertFalse(node2.isTrue());
1782:       assertFalse(node2.isVoid());
1783:       assertFalse(node2.isTypeOf());
1784:       assertFalse(node2.isRegExp());
1785:       assertEquals((-1), node2.getLineno());
1786:       assertFalse(node2.isGetElem());
1787:       assertFalse(node2.isCast());
1788:       assertFalse(node2.isAssign());
1789:       assertFalse(node2.isDec());
1790:       assertEquals((-1), node2.getSourcePosition());
1791:       assertFalse(node2.hasChildren());
1792:       assertFalse(node2.isDebugger());
1793:       assertFalse(node2.isAnd());
1794:       assertFalse(node2.isObjectLit());
1795:       assertFalse(node2.isContinue());
1796:       assertFalse(node2.isNot());
1797:       assertEquals(40, node2.getType());
1798:       assertFalse(node2.isFunction());
1799:       assertFalse(node2.isThrow());
1800:       assertFalse(node2.isFalse());
1801:       assertFalse(node2.isHook());
1802:       assertFalse(node2.isThis());
1803:       assertFalse(node2.isInc());
1804:       assertEquals((-1), node2.getCharno());
1805:       assertFalse(node2.isCase());
1806:       assertFalse(node2.isGetProp());
1807:       assertFalse(node2.isIn());
1808:       assertFalse(node2.isWith());
1809:       assertFalse(node2.isExprResult());
1810:       assertFalse(node2.isComma());
1811:       assertFalse(node2.isNE());
1812:       assertFalse(node2.isIf());
1813:       assertFalse(node2.isDelProp());
1814:       assertFalse(node2.isInstanceOf());
1815:       assertFalse(node2.isBreak());
1816:       assertFalse(node2.isGetterDef());
1817:       assertFalse(node2.isFor());
1818:       assertFalse(node2.isDefaultCase());
1819:       assertFalse(node2.isAssignAdd());
1820:       assertFalse(node2.isNumber());
1821:       assertFalse(node2.hasOneChild());
1822:       assertFalse(node2.isTry());
1823:       assertFalse(node2.isEmpty());
1824:       assertFalse(node2.isScript());
1825:       assertEquals(0, node2.getChildCount());
1826:       assertFalse(node2.isLabel());
1827:       assertFalse(node2.isParamList());
1828:       assertFalse(node2.isSwitch());
1829:       assertFalse(node2.isLabelName());
1830:       assertFalse(node2.isArrayLit());
1831:       assertFalse(node3.isCase());
1832:       assertFalse(node3.isIn());
1833:       assertFalse(node3.isString());
1834:       assertEquals((-1), node3.getCharno());
1835:       assertTrue(node3.hasChildren());
1836:       assertFalse(node3.isNE());
1837:       assertFalse(node3.isIf());
1838:       assertTrue(node3.hasMoreThanOneChild());
1839:       assertFalse(node3.isSwitch());
1840:       assertFalse(node3.isDelProp());
1841:       assertFalse(node3.isThrow());
1842:       assertFalse(node3.isEmpty());
1843:       assertFalse(node3.isFalse());
1844:       assertEquals(2, node3.getChildCount());
1845:       assertFalse(node3.isInc());
1846:       assertFalse(node3.isDefaultCase());
1847:       assertFalse(node3.isAnd());
1848:       assertFalse(node3.isNot());
1849:       assertFalse(node3.isFunction());
1850:       assertFalse(node3.isObjectLit());
1851:       assertFalse(node3.isVoid());
1852:       assertEquals(4095, node3.getType());
1853:       assertFalse(node3.isDebugger());
1854:       assertFalse(node3.isExprResult());
1855:       assertFalse(node3.isTrue());
1856:       assertFalse(node3.isNull());
1857:       assertFalse(node3.isBreak());
1858:       assertFalse(node3.isName());
1859:       assertFalse(node3.isGetElem());
1860:       assertFalse(node3.isCall());
1861:       assertEquals((-1), node3.getSourcePosition());
1862:       assertFalse(node3.isDec());
1863:       assertFalse(node3.isAssign());
1864:       assertFalse(node3.isTypeOf());
1865:       assertFalse(node3.isGetProp());
1866:       assertFalse(node3.isComma());
1867:       assertFalse(node3.isReturn());
1868:       assertFalse(node3.isWhile());
1869:       assertFalse(node3.isContinue());
1870:       assertFalse(node3.isOr());
1871:       assertEquals((-1), node3.getLineno());
1872:       assertFalse(node3.isLabelName());
1873:       assertFalse(node3.isCast());
1874:       assertFalse(node3.isVar());
1875:       assertFalse(node3.isNew());
1876:       assertFalse(node3.isLabel());
1877:       assertFalse(node3.isAdd());
1878:       assertFalse(node3.isSetterDef());
1879:       assertFalse(node3.isDo());
1880:       assertFalse(node3.isAssignAdd());
1881:       assertFalse(node3.isCatch());
1882:       assertFalse(node3.isInstanceOf());
1883:       assertFalse(node3.isWith());
1884:       assertFalse(node3.isRegExp());
1885:       assertFalse(node3.isParamList());
1886:       assertFalse(node3.isArrayLit());
1887:       assertFalse(node3.isStringKey());
1888:       assertFalse(node3.isFor());
1889:       assertFalse(node3.isHook());
1890:       assertFalse(node3.isGetterDef());
1891:       assertFalse(node3.isNumber());
1892:       assertFalse(node3.isScript());
1893:       assertFalse(node3.isThis());
1894:       assertFalse(node3.isBlock());
1895:       assertFalse(node3.hasOneChild());
1896:       assertFalse(node3.isTry());
1897:       assertFalse(node4.isCase());
1898:       assertFalse(node4.isInc());
1899:       assertFalse(node4.isIn());
1900:       assertEquals((-1), node4.getCharno());
1901:       assertFalse(node4.isSwitch());
1902:       assertFalse(node4.isNE());
1903:       assertFalse(node4.isIf());
1904:       assertFalse(node4.isDelProp());
1905:       assertFalse(node4.isGetterDef());
1906:       assertFalse(node4.isFor());
1907:       assertFalse(node4.isBreak());
1908:       assertFalse(node4.isComma());
1909:       assertFalse(node4.isTry());
1910:       assertFalse(node4.isHook());
1911:       assertFalse(node4.isGetProp());
1912:       assertFalse(node4.isThis());
1913:       assertFalse(node4.isWith());
1914:       assertFalse(node4.isNot());
1915:       assertEquals(40, node4.getType());
1916:       assertFalse(node4.isFunction());
1917:       assertFalse(node4.isCatch());
1918:       assertFalse(node4.isObjectLit());
1919:       assertFalse(node4.isRegExp());
1920:       assertFalse(node4.isInstanceOf());
1921:       assertFalse(node4.isDebugger());
1922:       assertFalse(node4.isAnd());
1923:       assertFalse(node4.isCast());
1924:       assertFalse(node4.isSetterDef());
1925:       assertFalse(node4.isFalse());
1926:       assertFalse(node4.isThrow());
1927:       assertFalse(node4.isDo());
1928:       assertFalse(node4.hasMoreThanOneChild());
1929:       assertFalse(node4.isContinue());
1930:       assertEquals((-1), node4.getLineno());
1931:       assertFalse(node4.isOr());
1932:       assertFalse(node4.isStringKey());
1933:       assertFalse(node4.isAssign());
1934:       assertFalse(node4.isName());
1935:       assertEquals((-1), node4.getSourcePosition());
1936:       assertFalse(node4.isGetElem());
1937:       assertFalse(node4.isDec());
1938:       assertFalse(node4.hasChildren());
1939:       assertFalse(node4.isTypeOf());
1940:       assertFalse(node4.isCall());
1941:       assertFalse(node4.isNumber());
1942:       assertFalse(node4.isReturn());
1943:       assertTrue(node4.isString());
1944:       assertFalse(node4.hasOneChild());
1945:       assertFalse(node4.isBlock());
1946:       assertFalse(node4.isWhile());
1947:       assertFalse(node4.isExprResult());
1948:       assertFalse(node4.isScript());
1949:       assertFalse(node4.isArrayLit());
1950:       assertFalse(node4.isParamList());
1951:       assertFalse(node4.isTrue());
1952:       assertFalse(node4.isVoid());
1953:       assertFalse(node4.isNull());
1954:       assertFalse(node4.isEmpty());
1955:       assertFalse(node4.isLabelName());
1956:       assertFalse(node4.isAdd());
1957:       assertEquals(0, node4.getChildCount());
1958:       assertFalse(node4.isNew());
1959:       assertFalse(node4.isLabel());
1960:       assertFalse(node4.isVar());
1961:       assertFalse(node4.isDefaultCase());
1962:       assertFalse(node4.isAssignAdd());
1963:       assertSame(node0, node2);
1964:       assertSame(node0, node4);
1965:       assertNotSame(node1, node3);
1966:       assertSame(node2, node0);
1967:       assertSame(node2, node4);
1968:       assertNotSame(node3, node1);
1969:       assertSame(node4, node0);
1970:       assertSame(node4, node2);
1971:       assertEquals(0, jSTypeArray0.length);
1972:       assertEquals(12, Node.COLUMN_BITS);
1973:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1974:       assertEquals(46, Node.IS_NAMESPACE);
1975:       assertEquals(49, Node.DIRECT_EVAL);
1976:       assertEquals(1, Node.DECR_FLAG);
1977:       assertEquals(57, Node.LAST_PROP);
1978:       assertEquals(32, Node.INCRDECR_PROP);
1979:       assertEquals(2, Node.POST_FLAG);
1980:       assertEquals(37, Node.OPT_ARG_NAME);
1981:       assertEquals(47, Node.IS_DISPATCHER);
1982:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1983:       assertEquals(30, Node.VAR_ARGS_NAME);
1984:       assertEquals(40, Node.ORIGINALNAME_PROP);
1985:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1986:       assertEquals(43, Node.IS_CONSTANT_NAME);
1987:       assertEquals(54, Node.SLASH_V);
1988:       assertEquals(50, Node.FREE_CALL);
1989:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1990:       assertEquals(4095, Node.COLUMN_MASK);
1991:       assertEquals(55, Node.INFERRED_FUNCTION);
1992:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1993:       assertEquals(48, Node.DIRECTIVES);
1994:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1995:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1996:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1997:       assertEquals(57, Node.REFLECTED_OBJECT);
1998:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1999:       assertEquals(56, Node.CHANGE_TIME);
2000:       assertEquals(36, Node.QUOTED_PROP);
2001:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2002:       assertEquals(39, Node.EMPTY_BLOCK);
2003:       assertEquals(53, Node.INPUT_ID);
2004:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2005:       assertEquals(29, Node.JSDOC_INFO_PROP);
2006:       assertEquals(52, Node.LENGTH);
2007:       assertEquals(8, Node.FLAG_NO_THROWS);
2008:       assertEquals(53, Node.INPUT_ID);
2009:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2010:       assertEquals(36, Node.QUOTED_PROP);
2011:       assertEquals(43, Node.IS_CONSTANT_NAME);
2012:       assertEquals(56, Node.CHANGE_TIME);
2013:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2014:       assertEquals(37, Node.OPT_ARG_NAME);
2015:       assertEquals(55, Node.INFERRED_FUNCTION);
2016:       assertEquals(8, Node.FLAG_NO_THROWS);
2017:       assertEquals(2, Node.POST_FLAG);
2018:       assertEquals(30, Node.VAR_ARGS_NAME);
2019:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2020:       assertEquals(57, Node.LAST_PROP);
2021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2022:       assertEquals(47, Node.IS_DISPATCHER);
2023:       assertEquals(29, Node.JSDOC_INFO_PROP);
2024:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2025:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2026:       assertEquals(39, Node.EMPTY_BLOCK);
2027:       assertEquals(52, Node.LENGTH);
2028:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2029:       assertEquals(57, Node.REFLECTED_OBJECT);
2030:       assertEquals(54, Node.SLASH_V);
2031:       assertEquals(50, Node.FREE_CALL);
2032:       assertEquals(40, Node.ORIGINALNAME_PROP);
2033:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2034:       assertEquals(48, Node.DIRECTIVES);
2035:       assertEquals(49, Node.DIRECT_EVAL);
2036:       assertEquals(12, Node.COLUMN_BITS);
2037:       assertEquals(46, Node.IS_NAMESPACE);
2038:       assertEquals(4095, Node.COLUMN_MASK);
2039:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2040:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2041:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2042:       assertEquals(1, Node.DECR_FLAG);
2043:       assertEquals(32, Node.INCRDECR_PROP);
2044:       assertEquals(30, Node.VAR_ARGS_NAME);
2045:       assertEquals(49, Node.DIRECT_EVAL);
2046:       assertEquals(57, Node.LAST_PROP);
2047:       assertEquals(1, Node.DECR_FLAG);
2048:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2049:       assertEquals(46, Node.IS_NAMESPACE);
2050:       assertEquals(52, Node.LENGTH);
2051:       assertEquals(54, Node.SLASH_V);
2052:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2053:       assertEquals(57, Node.REFLECTED_OBJECT);
2054:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2055:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2056:       assertEquals(56, Node.CHANGE_TIME);
2057:       assertEquals(50, Node.FREE_CALL);
2058:       assertEquals(37, Node.OPT_ARG_NAME);
2059:       assertEquals(48, Node.DIRECTIVES);
2060:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2061:       assertEquals(32, Node.INCRDECR_PROP);
2062:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2063:       assertEquals(4095, Node.COLUMN_MASK);
2064:       assertEquals(12, Node.COLUMN_BITS);
2065:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2066:       assertEquals(43, Node.IS_CONSTANT_NAME);
2067:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2068:       assertEquals(55, Node.INFERRED_FUNCTION);
2069:       assertEquals(53, Node.INPUT_ID);
2070:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2071:       assertEquals(36, Node.QUOTED_PROP);
2072:       assertEquals(29, Node.JSDOC_INFO_PROP);
2073:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2074:       assertEquals(8, Node.FLAG_NO_THROWS);
2075:       assertEquals(40, Node.ORIGINALNAME_PROP);
2076:       assertEquals(39, Node.EMPTY_BLOCK);
2077:       assertEquals(2, Node.POST_FLAG);
2078:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2079:       assertEquals(47, Node.IS_DISPATCHER);
2080:       assertEquals(47, Node.IS_DISPATCHER);
2081:       assertEquals(56, Node.CHANGE_TIME);
2082:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2083:       assertEquals(29, Node.JSDOC_INFO_PROP);
2084:       assertEquals(37, Node.OPT_ARG_NAME);
2085:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2086:       assertEquals(12, Node.COLUMN_BITS);
2087:       assertEquals(2, Node.POST_FLAG);
2088:       assertEquals(30, Node.VAR_ARGS_NAME);
2089:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2090:       assertEquals(57, Node.LAST_PROP);
2091:       assertEquals(36, Node.QUOTED_PROP);
2092:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2093:       assertEquals(49, Node.DIRECT_EVAL);
2094:       assertEquals(55, Node.INFERRED_FUNCTION);
2095:       assertEquals(53, Node.INPUT_ID);
2096:       assertEquals(57, Node.REFLECTED_OBJECT);
2097:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2098:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2099:       assertEquals(52, Node.LENGTH);
2100:       assertEquals(8, Node.FLAG_NO_THROWS);
2101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2102:       assertEquals(39, Node.EMPTY_BLOCK);
2103:       assertEquals(48, Node.DIRECTIVES);
2104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2105:       assertEquals(40, Node.ORIGINALNAME_PROP);
2106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2107:       assertEquals(4095, Node.COLUMN_MASK);
2108:       assertEquals(43, Node.IS_CONSTANT_NAME);
2109:       assertEquals(1, Node.DECR_FLAG);
2110:       assertEquals(54, Node.SLASH_V);
2111:       assertEquals(32, Node.INCRDECR_PROP);
2112:       assertEquals(46, Node.IS_NAMESPACE);
2113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2115:       assertEquals(50, Node.FREE_CALL);
2116:       assertEquals(2, Node.POST_FLAG);
2117:       assertEquals(47, Node.IS_DISPATCHER);
2118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2119:       assertEquals(37, Node.OPT_ARG_NAME);
2120:       assertEquals(32, Node.INCRDECR_PROP);
2121:       assertEquals(46, Node.IS_NAMESPACE);
2122:       assertEquals(56, Node.CHANGE_TIME);
2123:       assertEquals(12, Node.COLUMN_BITS);
2124:       assertEquals(30, Node.VAR_ARGS_NAME);
2125:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2126:       assertEquals(54, Node.SLASH_V);
2127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2128:       assertEquals(43, Node.IS_CONSTANT_NAME);
2129:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2130:       assertEquals(1, Node.DECR_FLAG);
2131:       assertEquals(50, Node.FREE_CALL);
2132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2133:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2134:       assertEquals(8, Node.FLAG_NO_THROWS);
2135:       assertEquals(39, Node.EMPTY_BLOCK);
2136:       assertEquals(48, Node.DIRECTIVES);
2137:       assertEquals(40, Node.ORIGINALNAME_PROP);
2138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2139:       assertEquals(4095, Node.COLUMN_MASK);
2140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2141:       assertEquals(36, Node.QUOTED_PROP);
2142:       assertEquals(49, Node.DIRECT_EVAL);
2143:       assertEquals(57, Node.LAST_PROP);
2144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2145:       assertEquals(55, Node.INFERRED_FUNCTION);
2146:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2147:       assertEquals(57, Node.REFLECTED_OBJECT);
2148:       assertEquals(52, Node.LENGTH);
2149:       assertEquals(29, Node.JSDOC_INFO_PROP);
2150:       assertEquals(53, Node.INPUT_ID);
2151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2152:       assertFalse(node0.equals((Object)node1));
2153:       assertFalse(node0.equals((Object)node3));
2154:       assertFalse(node1.equals((Object)node2));
2155:       assertFalse(node1.equals((Object)node3));
2156:       assertFalse(node1.equals((Object)node0));
2157:       assertFalse(node2.equals((Object)node3));
2158:       assertFalse(node2.equals((Object)node1));
2159:       assertFalse(node3.equals((Object)node1));
2160:       assertFalse(node3.equals((Object)node0));
2161:       assertFalse(node3.equals((Object)node2));
2162:       assertFalse(node4.equals((Object)node3));
2163:       assertFalse(node4.equals((Object)node1));
2164:       
2165:       Node.AncestorIterable node_AncestorIterable0 = node3.getAncestors();
2166:       assertNotNull(node_AncestorIterable0);
2167:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
2168:       assertFalse(node1.isNE());
2169:       assertFalse(node1.isIf());
2170:       assertFalse(node1.isDelProp());
2171:       assertFalse(node1.isEmpty());
2172:       assertFalse(node1.isString());
2173:       assertFalse(node1.isIn());
2174:       assertFalse(node1.isGetterDef());
2175:       assertFalse(node1.isSwitch());
2176:       assertFalse(node1.isInc());
2177:       assertFalse(node1.isFunction());
2178:       assertEquals((-1), node1.getCharno());
2179:       assertFalse(node1.isDebugger());
2180:       assertFalse(node1.isDefaultCase());
2181:       assertFalse(node1.isArrayLit());
2182:       assertFalse(node1.isThrow());
2183:       assertFalse(node1.isFalse());
2184:       assertEquals(0, node1.getChildCount());
2185:       assertFalse(node1.isComma());
2186:       assertFalse(node1.isGetProp());
2187:       assertEquals(83, node1.getType());
2188:       assertFalse(node1.isNull());
2189:       assertFalse(node1.isBreak());
2190:       assertFalse(node1.isName());
2191:       assertFalse(node1.isAnd());
2192:       assertTrue(node1.isParamList());
2193:       assertFalse(node1.isNot());
2194:       assertFalse(node1.isObjectLit());
2195:       assertFalse(node1.isExprResult());
2196:       assertFalse(node1.isTrue());
2197:       assertFalse(node1.isWhile());
2198:       assertFalse(node1.isVoid());
2199:       assertFalse(node1.isCall());
2200:       assertFalse(node1.isGetElem());
2201:       assertFalse(node1.isReturn());
2202:       assertFalse(node1.hasChildren());
2203:       assertFalse(node1.isDec());
2204:       assertFalse(node1.isAssign());
2205:       assertFalse(node1.isTypeOf());
2206:       assertEquals((-1), node1.getLineno());
2207:       assertFalse(node1.isAssignAdd());
2208:       assertFalse(node1.isLabelName());
2209:       assertEquals((-1), node1.getSourcePosition());
2210:       assertFalse(node1.isNumber());
2211:       assertFalse(node1.isOr());
2212:       assertFalse(node1.isAdd());
2213:       assertFalse(node1.isNew());
2214:       assertFalse(node1.isDo());
2215:       assertFalse(node1.isContinue());
2216:       assertFalse(node1.isCast());
2217:       assertFalse(node1.isVar());
2218:       assertFalse(node1.isLabel());
2219:       assertFalse(node1.isSetterDef());
2220:       assertFalse(node1.isThis());
2221:       assertFalse(node1.isStringKey());
2222:       assertFalse(node1.isBlock());
2223:       assertFalse(node1.isScript());
2224:       assertFalse(node1.hasOneChild());
2225:       assertFalse(node1.isCase());
2226:       assertFalse(node1.isTry());
2227:       assertFalse(node1.isCatch());
2228:       assertFalse(node1.hasMoreThanOneChild());
2229:       assertFalse(node1.isHook());
2230:       assertFalse(node1.isInstanceOf());
2231:       assertFalse(node1.isFor());
2232:       assertFalse(node1.isWith());
2233:       assertFalse(node1.isRegExp());
2234:       assertFalse(node3.isCase());
2235:       assertFalse(node3.isIn());
2236:       assertFalse(node3.isString());
2237:       assertEquals((-1), node3.getCharno());
2238:       assertTrue(node3.hasChildren());
2239:       assertFalse(node3.isNE());
2240:       assertFalse(node3.isIf());
2241:       assertTrue(node3.hasMoreThanOneChild());
2242:       assertFalse(node3.isSwitch());
2243:       assertFalse(node3.isDelProp());
2244:       assertFalse(node3.isThrow());
2245:       assertFalse(node3.isEmpty());
2246:       assertFalse(node3.isFalse());
2247:       assertEquals(2, node3.getChildCount());
2248:       assertFalse(node3.isInc());
2249:       assertFalse(node3.isDefaultCase());
2250:       assertFalse(node3.isAnd());
2251:       assertFalse(node3.isNot());
2252:       assertFalse(node3.isFunction());
2253:       assertFalse(node3.isObjectLit());
2254:       assertFalse(node3.isVoid());
2255:       assertEquals(4095, node3.getType());
2256:       assertFalse(node3.isDebugger());
2257:       assertFalse(node3.isExprResult());
2258:       assertFalse(node3.isTrue());
2259:       assertFalse(node3.isNull());
2260:       assertFalse(node3.isBreak());
2261:       assertFalse(node3.isName());
2262:       assertFalse(node3.isGetElem());
2263:       assertFalse(node3.isCall());
2264:       assertEquals((-1), node3.getSourcePosition());
2265:       assertFalse(node3.isDec());
2266:       assertFalse(node3.isAssign());
2267:       assertFalse(node3.isTypeOf());
2268:       assertFalse(node3.isGetProp());
2269:       assertFalse(node3.isComma());
2270:       assertFalse(node3.isReturn());
2271:       assertFalse(node3.isWhile());
2272:       assertFalse(node3.isContinue());
2273:       assertFalse(node3.isOr());
2274:       assertEquals((-1), node3.getLineno());
2275:       assertFalse(node3.isLabelName());
2276:       assertFalse(node3.isCast());
2277:       assertFalse(node3.isVar());
2278:       assertFalse(node3.isNew());
2279:       assertFalse(node3.isLabel());
2280:       assertFalse(node3.isAdd());
2281:       assertFalse(node3.isSetterDef());
2282:       assertFalse(node3.isDo());
2283:       assertFalse(node3.isAssignAdd());
2284:       assertFalse(node3.isCatch());
2285:       assertFalse(node3.isInstanceOf());
2286:       assertFalse(node3.isWith());
2287:       assertFalse(node3.isRegExp());
2288:       assertFalse(node3.isParamList());
2289:       assertFalse(node3.isArrayLit());
2290:       assertFalse(node3.isStringKey());
2291:       assertFalse(node3.isFor());
2292:       assertFalse(node3.isHook());
2293:       assertFalse(node3.isGetterDef());
2294:       assertFalse(node3.isNumber());
2295:       assertFalse(node3.isScript());
2296:       assertFalse(node3.isThis());
2297:       assertFalse(node3.isBlock());
2298:       assertFalse(node3.hasOneChild());
2299:       assertFalse(node3.isTry());
2300:       assertNotSame(node1, node3);
2301:       assertNotSame(node3, node1);
2302:       assertEquals(0, jSTypeArray0.length);
2303:       assertEquals(53, Node.INPUT_ID);
2304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2305:       assertEquals(36, Node.QUOTED_PROP);
2306:       assertEquals(43, Node.IS_CONSTANT_NAME);
2307:       assertEquals(56, Node.CHANGE_TIME);
2308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2309:       assertEquals(37, Node.OPT_ARG_NAME);
2310:       assertEquals(55, Node.INFERRED_FUNCTION);
2311:       assertEquals(8, Node.FLAG_NO_THROWS);
2312:       assertEquals(2, Node.POST_FLAG);
2313:       assertEquals(30, Node.VAR_ARGS_NAME);
2314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2315:       assertEquals(57, Node.LAST_PROP);
2316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2317:       assertEquals(47, Node.IS_DISPATCHER);
2318:       assertEquals(29, Node.JSDOC_INFO_PROP);
2319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2321:       assertEquals(39, Node.EMPTY_BLOCK);
2322:       assertEquals(52, Node.LENGTH);
2323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2324:       assertEquals(57, Node.REFLECTED_OBJECT);
2325:       assertEquals(54, Node.SLASH_V);
2326:       assertEquals(50, Node.FREE_CALL);
2327:       assertEquals(40, Node.ORIGINALNAME_PROP);
2328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2329:       assertEquals(48, Node.DIRECTIVES);
2330:       assertEquals(49, Node.DIRECT_EVAL);
2331:       assertEquals(12, Node.COLUMN_BITS);
2332:       assertEquals(46, Node.IS_NAMESPACE);
2333:       assertEquals(4095, Node.COLUMN_MASK);
2334:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2335:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2336:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2337:       assertEquals(1, Node.DECR_FLAG);
2338:       assertEquals(32, Node.INCRDECR_PROP);
2339:       assertEquals(47, Node.IS_DISPATCHER);
2340:       assertEquals(56, Node.CHANGE_TIME);
2341:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2342:       assertEquals(29, Node.JSDOC_INFO_PROP);
2343:       assertEquals(37, Node.OPT_ARG_NAME);
2344:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2345:       assertEquals(12, Node.COLUMN_BITS);
2346:       assertEquals(2, Node.POST_FLAG);
2347:       assertEquals(30, Node.VAR_ARGS_NAME);
2348:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2349:       assertEquals(57, Node.LAST_PROP);
2350:       assertEquals(36, Node.QUOTED_PROP);
2351:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2352:       assertEquals(49, Node.DIRECT_EVAL);
2353:       assertEquals(55, Node.INFERRED_FUNCTION);
2354:       assertEquals(53, Node.INPUT_ID);
2355:       assertEquals(57, Node.REFLECTED_OBJECT);
2356:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2357:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2358:       assertEquals(52, Node.LENGTH);
2359:       assertEquals(8, Node.FLAG_NO_THROWS);
2360:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2361:       assertEquals(39, Node.EMPTY_BLOCK);
2362:       assertEquals(48, Node.DIRECTIVES);
2363:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2364:       assertEquals(40, Node.ORIGINALNAME_PROP);
2365:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2366:       assertEquals(4095, Node.COLUMN_MASK);
2367:       assertEquals(43, Node.IS_CONSTANT_NAME);
2368:       assertEquals(1, Node.DECR_FLAG);
2369:       assertEquals(54, Node.SLASH_V);
2370:       assertEquals(32, Node.INCRDECR_PROP);
2371:       assertEquals(46, Node.IS_NAMESPACE);
2372:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2373:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2374:       assertEquals(50, Node.FREE_CALL);
2375:       assertFalse(node1.equals((Object)node2));
2376:       assertFalse(node1.equals((Object)node3));
2377:       assertFalse(node1.equals((Object)node4));
2378:       assertFalse(node1.equals((Object)node0));
2379:       assertFalse(node3.equals((Object)node4));
2380:       assertFalse(node3.equals((Object)node1));
2381:       assertFalse(node3.equals((Object)node0));
2382:       assertFalse(node3.equals((Object)node2));
2383:       
2384:       // Undeclared exception!
2385:       try { 
2386:         node0.replaceChild(node3, node2);
2387:         fail("Expecting exception: IllegalArgumentException");
2388:       
2389:       } catch(IllegalArgumentException e) {
2390:          //
2391:          // The new child node has siblings.
2392:          //
2393:          verifyException("com.google.common.base.Preconditions", e);
2394:       }
2395:   }
2396: }
RegularFileObject[/tmp/EvoSuite_352_1628160746225/com/google/javascript/rhino/Node_352_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:52:26 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_352_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_352_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_352_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
268:       "com.google.javascript.rhino.jstype.JSType$1",
269:       "com.google.javascript.rhino.jstype.JSType",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Preconditions",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.javascript.rhino.SimpleErrorReporter",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.base.Objects",
352:       "com.google.common.collect.Sets",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.TemplatizedType",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.Iterators$11",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.jstype.NamespaceType",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 10:52:26.897 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("com.google.common.collect.ImmutableList$SubList");
assertNotNull(node0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

node0.setLength((-1569));
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

JSType[] jSTypeArray0 = new JSType[0];
node0.detachChildren();
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

simpleErrorReporter0.error("is_dispatcher", "&3~/T*sR*+pZ", 1265, 57);
Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
assertNotNull(node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(83, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(0, jSTypeArray0.length);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.equals((Object)node0));

Node node2 = node0.useSourceInfoIfMissingFrom(node1);
assertNotNull(node2);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(83, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertSame(node0, node2);
assertSame(node2, node0);
assertEquals(0, jSTypeArray0.length);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node3 = new Node(4095, node1, node1, 56, (-1569));
assertNotNull(node3);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(83, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isSwitch());
assertFalse(node3.isDelProp());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertTrue(node3.hasOneChild());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertEquals(0, jSTypeArray0.length);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));

String string0 = node0.toString();
assertNotNull(string0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertSame(node0, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));

node3.addChildrenToFront(node0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(83, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isSwitch());
assertFalse(node3.isDelProp());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isFalse());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertSame(node0, node2);
assertNotSame(node1, node3);
assertNotSame(node3, node1);
assertEquals(0, jSTypeArray0.length);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));

boolean boolean0 = node0.isDo();
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(boolean0);
assertSame(node0, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertSame(node0, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(iterable0.contains(node1));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));

Node node4 = node2.copyInformationFromForTree(node3);
assertNotNull(node4);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(83, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isSwitch());
assertFalse(node3.isDelProp());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isFalse());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node4.isCase());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isSwitch());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFor());
assertFalse(node4.isBreak());
assertFalse(node4.isComma());
assertFalse(node4.isTry());
assertFalse(node4.isHook());
assertFalse(node4.isGetProp());
assertFalse(node4.isThis());
assertFalse(node4.isWith());
assertFalse(node4.isNot());
assertEquals(40, node4.getType());
assertFalse(node4.isFunction());
assertFalse(node4.isCatch());
assertFalse(node4.isObjectLit());
assertFalse(node4.isRegExp());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isDebugger());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isSetterDef());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isDo());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isStringKey());
assertFalse(node4.isAssign());
assertFalse(node4.isName());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isGetElem());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isCall());
assertFalse(node4.isNumber());
assertFalse(node4.isReturn());
assertTrue(node4.isString());
assertFalse(node4.hasOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isWhile());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isArrayLit());
assertFalse(node4.isParamList());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isNull());
assertFalse(node4.isEmpty());
assertFalse(node4.isLabelName());
assertFalse(node4.isAdd());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isNew());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isAssignAdd());
assertSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node1, node3);
assertSame(node2, node0);
assertSame(node2, node4);
assertNotSame(node3, node1);
assertSame(node4, node0);
assertSame(node4, node2);
assertEquals(0, jSTypeArray0.length);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));

Node.AncestorIterable node_AncestorIterable0 = node3.getAncestors();
assertNotNull(node_AncestorIterable0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(83, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isSwitch());
assertFalse(node3.isDelProp());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isFalse());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertNotSame(node1, node3);
assertNotSame(node3, node1);
assertEquals(0, jSTypeArray0.length);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));

node0.replaceChild(node3, node2);

[MASTER] 10:52:30.359 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_389_1628160749943/com/google/javascript/rhino/Node_389_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_389_1628160749943/com/google/javascript/rhino/Node_389_tmp__ESTest_scaffolding.java]]
[MASTER] 10:52:30.359 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:30.359 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:30.360 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 465
[MASTER] 10:52:30.361 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_389_1628160749943/com/google/javascript/rhino/Node_389_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:52:29 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_389_tmp__ESTest extends Node_389_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       int int0 = Node.extractCharno(359);
24:       assertEquals(359, int0);
25:       
26:       Node node0 = new Node(359, 359, 8233);
27:       assertNotNull(node0);
28:       assertFalse(node0.isHook());
29:       assertFalse(node0.isFalse());
30:       assertFalse(node0.isThrow());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isBreak());
33:       assertFalse(node0.isIn());
34:       assertFalse(node0.isEmpty());
35:       assertFalse(node0.isInc());
36:       assertFalse(node0.isArrayLit());
37:       assertFalse(node0.hasOneChild());
38:       assertFalse(node0.isFor());
39:       assertFalse(node0.isRegExp());
40:       assertFalse(node0.isNE());
41:       assertFalse(node0.isIf());
42:       assertFalse(node0.isWith());
43:       assertFalse(node0.isLabelName());
44:       assertFalse(node0.isInstanceOf());
45:       assertEquals(1474559, node0.getSourcePosition());
46:       assertFalse(node0.isCatch());
47:       assertFalse(node0.hasMoreThanOneChild());
48:       assertFalse(node0.isThis());
49:       assertFalse(node0.isNumber());
50:       assertEquals(4095, node0.getCharno());
51:       assertFalse(node0.isGetterDef());
52:       assertFalse(node0.isScript());
53:       assertFalse(node0.isCase());
54:       assertFalse(node0.isTry());
55:       assertFalse(node0.isVar());
56:       assertFalse(node0.isStringKey());
57:       assertFalse(node0.isBlock());
58:       assertEquals(359, node0.getLineno());
59:       assertFalse(node0.isNull());
60:       assertFalse(node0.isParamList());
61:       assertFalse(node0.isName());
62:       assertFalse(node0.isCall());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isContinue());
65:       assertFalse(node0.isAssignAdd());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isDefaultCase());
69:       assertFalse(node0.isAdd());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isDo());
72:       assertFalse(node0.isSetterDef());
73:       assertFalse(node0.isCast());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isDebugger());
76:       assertFalse(node0.isTrue());
77:       assertFalse(node0.hasChildren());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isDelProp());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isVoid());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isObjectLit());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isNot());
88:       assertFalse(node0.isReturn());
89:       assertFalse(node0.isComma());
90:       assertEquals(359, node0.getType());
91:       assertFalse(node0.isString());
92:       assertFalse(node0.isWhile());
93:       assertFalse(node0.isGetProp());
94:       assertEquals(30, Node.VAR_ARGS_NAME);
95:       assertEquals(49, Node.DIRECT_EVAL);
96:       assertEquals(1, Node.DECR_FLAG);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(32, Node.INCRDECR_PROP);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(12, Node.COLUMN_BITS);
101:       assertEquals(2, Node.POST_FLAG);
102:       assertEquals(47, Node.IS_DISPATCHER);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(29, Node.JSDOC_INFO_PROP);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(39, Node.EMPTY_BLOCK);
110:       assertEquals(53, Node.INPUT_ID);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
113:       assertEquals(8, Node.FLAG_NO_THROWS);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(56, Node.CHANGE_TIME);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(4095, Node.COLUMN_MASK);
120:       assertEquals(55, Node.INFERRED_FUNCTION);
121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
126:       assertEquals(54, Node.SLASH_V);
127:       assertEquals(43, Node.IS_CONSTANT_NAME);
128:       assertEquals(51, Node.STATIC_SOURCE_FILE);
129:       assertEquals(46, Node.IS_NAMESPACE);
130:       
131:       boolean boolean0 = node0.isUnscopedQualifiedName();
132:       assertFalse(node0.isHook());
133:       assertFalse(node0.isFalse());
134:       assertFalse(node0.isThrow());
135:       assertFalse(node0.isSwitch());
136:       assertFalse(node0.isBreak());
137:       assertFalse(node0.isIn());
138:       assertFalse(node0.isEmpty());
139:       assertFalse(node0.isInc());
140:       assertFalse(node0.isArrayLit());
141:       assertFalse(node0.hasOneChild());
142:       assertFalse(node0.isFor());
143:       assertFalse(node0.isRegExp());
144:       assertFalse(node0.isNE());
145:       assertFalse(node0.isIf());
146:       assertFalse(node0.isWith());
147:       assertFalse(node0.isLabelName());
148:       assertFalse(node0.isInstanceOf());
149:       assertEquals(1474559, node0.getSourcePosition());
150:       assertFalse(node0.isCatch());
151:       assertFalse(node0.hasMoreThanOneChild());
152:       assertFalse(node0.isThis());
153:       assertFalse(node0.isNumber());
154:       assertEquals(4095, node0.getCharno());
155:       assertFalse(node0.isGetterDef());
156:       assertFalse(node0.isScript());
157:       assertFalse(node0.isCase());
158:       assertFalse(node0.isTry());
159:       assertFalse(node0.isVar());
160:       assertFalse(node0.isStringKey());
161:       assertFalse(node0.isBlock());
162:       assertEquals(359, node0.getLineno());
163:       assertFalse(node0.isNull());
164:       assertFalse(node0.isParamList());
165:       assertFalse(node0.isName());
166:       assertFalse(node0.isCall());
167:       assertEquals(0, node0.getChildCount());
168:       assertFalse(node0.isContinue());
169:       assertFalse(node0.isAssignAdd());
170:       assertFalse(node0.isOr());
171:       assertFalse(node0.isLabel());
172:       assertFalse(node0.isDefaultCase());
173:       assertFalse(node0.isAdd());
174:       assertFalse(node0.isNew());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.isSetterDef());
177:       assertFalse(node0.isCast());
178:       assertFalse(node0.isAssign());
179:       assertFalse(node0.isDebugger());
180:       assertFalse(node0.isTrue());
181:       assertFalse(node0.hasChildren());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isDec());
184:       assertFalse(node0.isFunction());
185:       assertFalse(node0.isDelProp());
186:       assertFalse(node0.isGetElem());
187:       assertFalse(node0.isVoid());
188:       assertFalse(node0.isExprResult());
189:       assertFalse(node0.isObjectLit());
190:       assertFalse(node0.isAnd());
191:       assertFalse(node0.isNot());
192:       assertFalse(node0.isReturn());
193:       assertFalse(node0.isComma());
194:       assertEquals(359, node0.getType());
195:       assertFalse(node0.isString());
196:       assertFalse(node0.isWhile());
197:       assertFalse(node0.isGetProp());
198:       assertFalse(boolean0);
199:       assertEquals(30, Node.VAR_ARGS_NAME);
200:       assertEquals(49, Node.DIRECT_EVAL);
201:       assertEquals(1, Node.DECR_FLAG);
202:       assertEquals(57, Node.LAST_PROP);
203:       assertEquals(32, Node.INCRDECR_PROP);
204:       assertEquals(15, Node.NO_SIDE_EFFECTS);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(2, Node.POST_FLAG);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(29, Node.JSDOC_INFO_PROP);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
213:       assertEquals(37, Node.OPT_ARG_NAME);
214:       assertEquals(39, Node.EMPTY_BLOCK);
215:       assertEquals(53, Node.INPUT_ID);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(56, Node.CHANGE_TIME);
221:       assertEquals(36, Node.QUOTED_PROP);
222:       assertEquals(57, Node.REFLECTED_OBJECT);
223:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
224:       assertEquals(4095, Node.COLUMN_MASK);
225:       assertEquals(55, Node.INFERRED_FUNCTION);
226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
231:       assertEquals(54, Node.SLASH_V);
232:       assertEquals(43, Node.IS_CONSTANT_NAME);
233:       assertEquals(51, Node.STATIC_SOURCE_FILE);
234:       assertEquals(46, Node.IS_NAMESPACE);
235:       
236:       Node node1 = Node.newNumber((-168.351), 117, 57);
237:       assertNotNull(node1);
238:       assertFalse(node1.hasChildren());
239:       assertFalse(node1.isDec());
240:       assertFalse(node1.isGetElem());
241:       assertFalse(node1.isCast());
242:       assertFalse(node1.isAssign());
243:       assertFalse(node1.isTypeOf());
244:       assertFalse(node1.isOr());
245:       assertFalse(node1.hasOneChild());
246:       assertFalse(node1.isLabel());
247:       assertFalse(node1.isReturn());
248:       assertFalse(node1.isDo());
249:       assertFalse(node1.isAssignAdd());
250:       assertFalse(node1.isScript());
251:       assertFalse(node1.isObjectLit());
252:       assertFalse(node1.isContinue());
253:       assertFalse(node1.isNot());
254:       assertFalse(node1.isAnd());
255:       assertFalse(node1.isStringKey());
256:       assertFalse(node1.isLabelName());
257:       assertFalse(node1.isSetterDef());
258:       assertFalse(node1.isThis());
259:       assertFalse(node1.isFalse());
260:       assertEquals(57, node1.getCharno());
261:       assertFalse(node1.isHook());
262:       assertFalse(node1.isBlock());
263:       assertFalse(node1.isThrow());
264:       assertEquals(479289, node1.getSourcePosition());
265:       assertEquals(39, node1.getType());
266:       assertFalse(node1.isInc());
267:       assertFalse(node1.isCatch());
268:       assertFalse(node1.isRegExp());
269:       assertFalse(node1.hasMoreThanOneChild());
270:       assertFalse(node1.isWith());
271:       assertFalse(node1.isInstanceOf());
272:       assertFalse(node1.isDelProp());
273:       assertFalse(node1.isGetterDef());
274:       assertFalse(node1.isIf());
275:       assertFalse(node1.isEmpty());
276:       assertFalse(node1.isNE());
277:       assertFalse(node1.isFor());
278:       assertFalse(node1.isIn());
279:       assertTrue(node1.isNumber());
280:       assertFalse(node1.isTry());
281:       assertFalse(node1.isDefaultCase());
282:       assertFalse(node1.isString());
283:       assertFalse(node1.isCase());
284:       assertFalse(node1.isDebugger());
285:       assertFalse(node1.isFunction());
286:       assertFalse(node1.isArrayLit());
287:       assertFalse(node1.isParamList());
288:       assertFalse(node1.isSwitch());
289:       assertFalse(node1.isBreak());
290:       assertFalse(node1.isNull());
291:       assertFalse(node1.isCall());
292:       assertFalse(node1.isComma());
293:       assertEquals(0, node1.getChildCount());
294:       assertFalse(node1.isVar());
295:       assertFalse(node1.isAdd());
296:       assertFalse(node1.isGetProp());
297:       assertFalse(node1.isNew());
298:       assertFalse(node1.isWhile());
299:       assertFalse(node1.isExprResult());
300:       assertEquals(117, node1.getLineno());
301:       assertFalse(node1.isTrue());
302:       assertFalse(node1.isVoid());
303:       assertFalse(node1.isName());
304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
305:       assertEquals(36, Node.QUOTED_PROP);
306:       assertEquals(53, Node.INPUT_ID);
307:       assertEquals(43, Node.IS_CONSTANT_NAME);
308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
309:       assertEquals(55, Node.INFERRED_FUNCTION);
310:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
313:       assertEquals(39, Node.EMPTY_BLOCK);
314:       assertEquals(47, Node.IS_DISPATCHER);
315:       assertEquals(46, Node.IS_NAMESPACE);
316:       assertEquals(40, Node.ORIGINALNAME_PROP);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(2, Node.POST_FLAG);
319:       assertEquals(54, Node.SLASH_V);
320:       assertEquals(15, Node.NO_SIDE_EFFECTS);
321:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
322:       assertEquals(49, Node.DIRECT_EVAL);
323:       assertEquals(57, Node.LAST_PROP);
324:       assertEquals(1, Node.DECR_FLAG);
325:       assertEquals(57, Node.REFLECTED_OBJECT);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(50, Node.FREE_CALL);
329:       assertEquals(52, Node.LENGTH);
330:       assertEquals(8, Node.FLAG_NO_THROWS);
331:       assertEquals(37, Node.OPT_ARG_NAME);
332:       assertEquals(48, Node.DIRECTIVES);
333:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
334:       assertEquals(32, Node.INCRDECR_PROP);
335:       assertEquals(56, Node.CHANGE_TIME);
336:       assertEquals(12, Node.COLUMN_BITS);
337:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
338:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
339:       assertEquals(4095, Node.COLUMN_MASK);
340:       assertFalse(node1.equals((Object)node0));
341:       
342:       byte[] byteArray0 = new byte[9];
343:       byteArray0[0] = (byte)65;
344:       byteArray0[1] = (byte) (-52);
345:       byteArray0[2] = (byte)18;
346:       byteArray0[3] = (byte)48;
347:       byteArray0[4] = (byte)43;
348:       byteArray0[5] = (byte) (-108);
349:       byteArray0[6] = (byte)0;
350:       byteArray0[7] = (byte)90;
351:       byteArray0[8] = (byte)66;
352:       boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
353:       assertFalse(boolean1);
354:       assertEquals(9, byteArray0.length);
355:       assertTrue(boolean1 == boolean0);
356:       assertArrayEquals(new byte[] {(byte)65, (byte) (-52), (byte)18, (byte)48, (byte)43, (byte) (-108), (byte)0, (byte)90, (byte)66}, byteArray0);
357:       
358:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
359:       assertNotNull(fileSystemHandling0);
360:       
361:       Iterable<Node> iterable0 = node1.children();
362:       assertNotNull(iterable0);
363:       assertFalse(node1.hasChildren());
364:       assertFalse(node1.isDec());
365:       assertFalse(node1.isGetElem());
366:       assertFalse(node1.isCast());
367:       assertFalse(node1.isAssign());
368:       assertFalse(node1.isTypeOf());
369:       assertFalse(node1.isOr());
370:       assertFalse(node1.hasOneChild());
371:       assertFalse(node1.isLabel());
372:       assertFalse(node1.isReturn());
373:       assertFalse(node1.isDo());
374:       assertFalse(node1.isAssignAdd());
375:       assertFalse(node1.isScript());
376:       assertFalse(node1.isObjectLit());
377:       assertFalse(node1.isContinue());
378:       assertFalse(node1.isNot());
379:       assertFalse(node1.isAnd());
380:       assertFalse(node1.isStringKey());
381:       assertFalse(node1.isLabelName());
382:       assertFalse(node1.isSetterDef());
383:       assertFalse(node1.isThis());
384:       assertFalse(node1.isFalse());
385:       assertEquals(57, node1.getCharno());
386:       assertFalse(node1.isHook());
387:       assertFalse(node1.isBlock());
388:       assertFalse(node1.isThrow());
389:       assertEquals(479289, node1.getSourcePosition());
390:       assertEquals(39, node1.getType());
391:       assertFalse(node1.isInc());
392:       assertFalse(node1.isCatch());
393:       assertFalse(node1.isRegExp());
394:       assertFalse(node1.hasMoreThanOneChild());
395:       assertFalse(node1.isWith());
396:       assertFalse(node1.isInstanceOf());
397:       assertFalse(node1.isDelProp());
398:       assertFalse(node1.isGetterDef());
399:       assertFalse(node1.isIf());
400:       assertFalse(node1.isEmpty());
401:       assertFalse(node1.isNE());
402:       assertFalse(node1.isFor());
403:       assertFalse(node1.isIn());
404:       assertTrue(node1.isNumber());
405:       assertFalse(node1.isTry());
406:       assertFalse(node1.isDefaultCase());
407:       assertFalse(node1.isString());
408:       assertFalse(node1.isCase());
409:       assertFalse(node1.isDebugger());
410:       assertFalse(node1.isFunction());
411:       assertFalse(node1.isArrayLit());
412:       assertFalse(node1.isParamList());
413:       assertFalse(node1.isSwitch());
414:       assertFalse(node1.isBreak());
415:       assertFalse(node1.isNull());
416:       assertFalse(node1.isCall());
417:       assertFalse(node1.isComma());
418:       assertEquals(0, node1.getChildCount());
419:       assertFalse(node1.isVar());
420:       assertFalse(node1.isAdd());
421:       assertFalse(node1.isGetProp());
422:       assertFalse(node1.isNew());
423:       assertFalse(node1.isWhile());
424:       assertFalse(node1.isExprResult());
425:       assertEquals(117, node1.getLineno());
426:       assertFalse(node1.isTrue());
427:       assertFalse(node1.isVoid());
428:       assertFalse(node1.isName());
429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
430:       assertEquals(36, Node.QUOTED_PROP);
431:       assertEquals(53, Node.INPUT_ID);
432:       assertEquals(43, Node.IS_CONSTANT_NAME);
433:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
434:       assertEquals(55, Node.INFERRED_FUNCTION);
435:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
436:       assertEquals(29, Node.JSDOC_INFO_PROP);
437:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
438:       assertEquals(39, Node.EMPTY_BLOCK);
439:       assertEquals(47, Node.IS_DISPATCHER);
440:       assertEquals(46, Node.IS_NAMESPACE);
441:       assertEquals(40, Node.ORIGINALNAME_PROP);
442:       assertEquals(30, Node.VAR_ARGS_NAME);
443:       assertEquals(2, Node.POST_FLAG);
444:       assertEquals(54, Node.SLASH_V);
445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
446:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
447:       assertEquals(49, Node.DIRECT_EVAL);
448:       assertEquals(57, Node.LAST_PROP);
449:       assertEquals(1, Node.DECR_FLAG);
450:       assertEquals(57, Node.REFLECTED_OBJECT);
451:       assertEquals(51, Node.STATIC_SOURCE_FILE);
452:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
453:       assertEquals(50, Node.FREE_CALL);
454:       assertEquals(52, Node.LENGTH);
455:       assertEquals(8, Node.FLAG_NO_THROWS);
456:       assertEquals(37, Node.OPT_ARG_NAME);
457:       assertEquals(48, Node.DIRECTIVES);
458:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
459:       assertEquals(32, Node.INCRDECR_PROP);
460:       assertEquals(56, Node.CHANGE_TIME);
461:       assertEquals(12, Node.COLUMN_BITS);
462:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
463:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
464:       assertEquals(4095, Node.COLUMN_MASK);
465:       assertFalse(iterable0.contains(node0));
466:       assertFalse(node1.equals((Object)node0));
467:       
468:       node1.addChildToBack(node0);
469:       assertFalse(node0.isHook());
470:       assertFalse(node0.isFalse());
471:       assertFalse(node0.isThrow());
472:       assertFalse(node0.isSwitch());
473:       assertFalse(node0.isBreak());
474:       assertFalse(node0.isIn());
475:       assertFalse(node0.isEmpty());
476:       assertFalse(node0.isInc());
477:       assertFalse(node0.isArrayLit());
478:       assertFalse(node0.hasOneChild());
479:       assertFalse(node0.isFor());
480:       assertFalse(node0.isRegExp());
481:       assertFalse(node0.isNE());
482:       assertFalse(node0.isIf());
483:       assertFalse(node0.isWith());
484:       assertFalse(node0.isLabelName());
485:       assertFalse(node0.isInstanceOf());
486:       assertEquals(1474559, node0.getSourcePosition());
487:       assertFalse(node0.isCatch());
488:       assertFalse(node0.hasMoreThanOneChild());
489:       assertFalse(node0.isThis());
490:       assertFalse(node0.isNumber());
491:       assertEquals(4095, node0.getCharno());
492:       assertFalse(node0.isGetterDef());
493:       assertFalse(node0.isScript());
494:       assertFalse(node0.isCase());
495:       assertFalse(node0.isTry());
496:       assertFalse(node0.isVar());
497:       assertFalse(node0.isStringKey());
498:       assertFalse(node0.isBlock());
499:       assertEquals(359, node0.getLineno());
500:       assertFalse(node0.isNull());
501:       assertFalse(node0.isParamList());
502:       assertFalse(node0.isName());
503:       assertFalse(node0.isCall());
504:       assertEquals(0, node0.getChildCount());
505:       assertFalse(node0.isContinue());
506:       assertFalse(node0.isAssignAdd());
507:       assertFalse(node0.isOr());
508:       assertFalse(node0.isLabel());
509:       assertFalse(node0.isDefaultCase());
510:       assertFalse(node0.isAdd());
511:       assertFalse(node0.isNew());
512:       assertFalse(node0.isDo());
513:       assertFalse(node0.isSetterDef());
514:       assertFalse(node0.isCast());
515:       assertFalse(node0.isAssign());
516:       assertFalse(node0.isDebugger());
517:       assertFalse(node0.isTrue());
518:       assertFalse(node0.hasChildren());
519:       assertFalse(node0.isTypeOf());
520:       assertFalse(node0.isDec());
521:       assertFalse(node0.isFunction());
522:       assertFalse(node0.isDelProp());
523:       assertFalse(node0.isGetElem());
524:       assertFalse(node0.isVoid());
525:       assertFalse(node0.isExprResult());
526:       assertFalse(node0.isObjectLit());
527:       assertFalse(node0.isAnd());
528:       assertFalse(node0.isNot());
529:       assertFalse(node0.isReturn());
530:       assertFalse(node0.isComma());
531:       assertEquals(359, node0.getType());
532:       assertFalse(node0.isString());
533:       assertFalse(node0.isWhile());
534:       assertFalse(node0.isGetProp());
535:       assertFalse(node1.isDec());
536:       assertFalse(node1.isGetElem());
537:       assertFalse(node1.isCast());
538:       assertFalse(node1.isAssign());
539:       assertFalse(node1.isTypeOf());
540:       assertFalse(node1.isOr());
541:       assertFalse(node1.isLabel());
542:       assertFalse(node1.isReturn());
543:       assertFalse(node1.isDo());
544:       assertFalse(node1.isAssignAdd());
545:       assertFalse(node1.isScript());
546:       assertFalse(node1.isObjectLit());
547:       assertFalse(node1.isContinue());
548:       assertFalse(node1.isNot());
549:       assertFalse(node1.isAnd());
550:       assertFalse(node1.isStringKey());
551:       assertFalse(node1.isLabelName());
552:       assertFalse(node1.isSetterDef());
553:       assertFalse(node1.isThis());
554:       assertFalse(node1.isFalse());
555:       assertEquals(57, node1.getCharno());
556:       assertFalse(node1.isHook());
557:       assertFalse(node1.isBlock());
558:       assertFalse(node1.isThrow());
559:       assertEquals(479289, node1.getSourcePosition());
560:       assertEquals(39, node1.getType());
561:       assertFalse(node1.isInc());
562:       assertFalse(node1.isCatch());
563:       assertFalse(node1.isRegExp());
564:       assertFalse(node1.hasMoreThanOneChild());
565:       assertFalse(node1.isWith());
566:       assertFalse(node1.isInstanceOf());
567:       assertTrue(node1.hasChildren());
568:       assertFalse(node1.isDelProp());
569:       assertFalse(node1.isGetterDef());
570:       assertFalse(node1.isIf());
571:       assertFalse(node1.isEmpty());
572:       assertFalse(node1.isNE());
573:       assertFalse(node1.isFor());
574:       assertTrue(node1.hasOneChild());
575:       assertFalse(node1.isIn());
576:       assertEquals(1, node1.getChildCount());
577:       assertTrue(node1.isNumber());
578:       assertFalse(node1.isTry());
579:       assertFalse(node1.isDefaultCase());
580:       assertFalse(node1.isString());
581:       assertFalse(node1.isCase());
582:       assertFalse(node1.isDebugger());
583:       assertFalse(node1.isFunction());
584:       assertFalse(node1.isArrayLit());
585:       assertFalse(node1.isParamList());
586:       assertFalse(node1.isSwitch());
587:       assertFalse(node1.isBreak());
588:       assertFalse(node1.isNull());
589:       assertFalse(node1.isCall());
590:       assertFalse(node1.isComma());
591:       assertFalse(node1.isVar());
592:       assertFalse(node1.isAdd());
593:       assertFalse(node1.isGetProp());
594:       assertFalse(node1.isNew());
595:       assertFalse(node1.isWhile());
596:       assertFalse(node1.isExprResult());
597:       assertEquals(117, node1.getLineno());
598:       assertFalse(node1.isTrue());
599:       assertFalse(node1.isVoid());
600:       assertFalse(node1.isName());
601:       assertEquals(30, Node.VAR_ARGS_NAME);
602:       assertEquals(49, Node.DIRECT_EVAL);
603:       assertEquals(1, Node.DECR_FLAG);
604:       assertEquals(57, Node.LAST_PROP);
605:       assertEquals(32, Node.INCRDECR_PROP);
606:       assertEquals(15, Node.NO_SIDE_EFFECTS);
607:       assertEquals(12, Node.COLUMN_BITS);
608:       assertEquals(2, Node.POST_FLAG);
609:       assertEquals(47, Node.IS_DISPATCHER);
610:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
611:       assertEquals(29, Node.JSDOC_INFO_PROP);
612:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
613:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
614:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
615:       assertEquals(37, Node.OPT_ARG_NAME);
616:       assertEquals(39, Node.EMPTY_BLOCK);
617:       assertEquals(53, Node.INPUT_ID);
618:       assertEquals(48, Node.DIRECTIVES);
619:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
620:       assertEquals(8, Node.FLAG_NO_THROWS);
621:       assertEquals(52, Node.LENGTH);
622:       assertEquals(56, Node.CHANGE_TIME);
623:       assertEquals(36, Node.QUOTED_PROP);
624:       assertEquals(57, Node.REFLECTED_OBJECT);
625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
626:       assertEquals(4095, Node.COLUMN_MASK);
627:       assertEquals(55, Node.INFERRED_FUNCTION);
628:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
629:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
630:       assertEquals(50, Node.FREE_CALL);
631:       assertEquals(40, Node.ORIGINALNAME_PROP);
632:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
633:       assertEquals(54, Node.SLASH_V);
634:       assertEquals(43, Node.IS_CONSTANT_NAME);
635:       assertEquals(51, Node.STATIC_SOURCE_FILE);
636:       assertEquals(46, Node.IS_NAMESPACE);
637:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
638:       assertEquals(36, Node.QUOTED_PROP);
639:       assertEquals(53, Node.INPUT_ID);
640:       assertEquals(43, Node.IS_CONSTANT_NAME);
641:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
642:       assertEquals(55, Node.INFERRED_FUNCTION);
643:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
644:       assertEquals(29, Node.JSDOC_INFO_PROP);
645:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
646:       assertEquals(39, Node.EMPTY_BLOCK);
647:       assertEquals(47, Node.IS_DISPATCHER);
648:       assertEquals(46, Node.IS_NAMESPACE);
649:       assertEquals(40, Node.ORIGINALNAME_PROP);
650:       assertEquals(30, Node.VAR_ARGS_NAME);
651:       assertEquals(2, Node.POST_FLAG);
652:       assertEquals(54, Node.SLASH_V);
653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
654:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
655:       assertEquals(49, Node.DIRECT_EVAL);
656:       assertEquals(57, Node.LAST_PROP);
657:       assertEquals(1, Node.DECR_FLAG);
658:       assertEquals(57, Node.REFLECTED_OBJECT);
659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
660:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
661:       assertEquals(50, Node.FREE_CALL);
662:       assertEquals(52, Node.LENGTH);
663:       assertEquals(8, Node.FLAG_NO_THROWS);
664:       assertEquals(37, Node.OPT_ARG_NAME);
665:       assertEquals(48, Node.DIRECTIVES);
666:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
667:       assertEquals(32, Node.INCRDECR_PROP);
668:       assertEquals(56, Node.CHANGE_TIME);
669:       assertEquals(12, Node.COLUMN_BITS);
670:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
671:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
672:       assertEquals(4095, Node.COLUMN_MASK);
673:       assertFalse(node0.equals((Object)node1));
674:       assertFalse(node1.equals((Object)node0));
675:       
676:       node1.removeProp((-5801));
677:       assertFalse(node1.isDec());
678:       assertFalse(node1.isGetElem());
679:       assertFalse(node1.isCast());
680:       assertFalse(node1.isAssign());
681:       assertFalse(node1.isTypeOf());
682:       assertFalse(node1.isOr());
683:       assertFalse(node1.isLabel());
684:       assertFalse(node1.isReturn());
685:       assertFalse(node1.isDo());
686:       assertFalse(node1.isAssignAdd());
687:       assertFalse(node1.isScript());
688:       assertFalse(node1.isObjectLit());
689:       assertFalse(node1.isContinue());
690:       assertFalse(node1.isNot());
691:       assertFalse(node1.isAnd());
692:       assertFalse(node1.isStringKey());
693:       assertFalse(node1.isLabelName());
694:       assertFalse(node1.isSetterDef());
695:       assertFalse(node1.isThis());
696:       assertFalse(node1.isFalse());
697:       assertEquals(57, node1.getCharno());
698:       assertFalse(node1.isHook());
699:       assertFalse(node1.isBlock());
700:       assertFalse(node1.isThrow());
701:       assertEquals(479289, node1.getSourcePosition());
702:       assertEquals(39, node1.getType());
703:       assertFalse(node1.isInc());
704:       assertFalse(node1.isCatch());
705:       assertFalse(node1.isRegExp());
706:       assertFalse(node1.hasMoreThanOneChild());
707:       assertFalse(node1.isWith());
708:       assertFalse(node1.isInstanceOf());
709:       assertTrue(node1.hasChildren());
710:       assertFalse(node1.isDelProp());
711:       assertFalse(node1.isGetterDef());
712:       assertFalse(node1.isIf());
713:       assertFalse(node1.isEmpty());
714:       assertFalse(node1.isNE());
715:       assertFalse(node1.isFor());
716:       assertTrue(node1.hasOneChild());
717:       assertFalse(node1.isIn());
718:       assertEquals(1, node1.getChildCount());
719:       assertTrue(node1.isNumber());
720:       assertFalse(node1.isTry());
721:       assertFalse(node1.isDefaultCase());
722:       assertFalse(node1.isString());
723:       assertFalse(node1.isCase());
724:       assertFalse(node1.isDebugger());
725:       assertFalse(node1.isFunction());
726:       assertFalse(node1.isArrayLit());
727:       assertFalse(node1.isParamList());
728:       assertFalse(node1.isSwitch());
729:       assertFalse(node1.isBreak());
730:       assertFalse(node1.isNull());
731:       assertFalse(node1.isCall());
732:       assertFalse(node1.isComma());
733:       assertFalse(node1.isVar());
734:       assertFalse(node1.isAdd());
735:       assertFalse(node1.isGetProp());
736:       assertFalse(node1.isNew());
737:       assertFalse(node1.isWhile());
738:       assertFalse(node1.isExprResult());
739:       assertEquals(117, node1.getLineno());
740:       assertFalse(node1.isTrue());
741:       assertFalse(node1.isVoid());
742:       assertFalse(node1.isName());
743:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
744:       assertEquals(36, Node.QUOTED_PROP);
745:       assertEquals(53, Node.INPUT_ID);
746:       assertEquals(43, Node.IS_CONSTANT_NAME);
747:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
748:       assertEquals(55, Node.INFERRED_FUNCTION);
749:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
750:       assertEquals(29, Node.JSDOC_INFO_PROP);
751:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
752:       assertEquals(39, Node.EMPTY_BLOCK);
753:       assertEquals(47, Node.IS_DISPATCHER);
754:       assertEquals(46, Node.IS_NAMESPACE);
755:       assertEquals(40, Node.ORIGINALNAME_PROP);
756:       assertEquals(30, Node.VAR_ARGS_NAME);
757:       assertEquals(2, Node.POST_FLAG);
758:       assertEquals(54, Node.SLASH_V);
759:       assertEquals(15, Node.NO_SIDE_EFFECTS);
760:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
761:       assertEquals(49, Node.DIRECT_EVAL);
762:       assertEquals(57, Node.LAST_PROP);
763:       assertEquals(1, Node.DECR_FLAG);
764:       assertEquals(57, Node.REFLECTED_OBJECT);
765:       assertEquals(51, Node.STATIC_SOURCE_FILE);
766:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
767:       assertEquals(50, Node.FREE_CALL);
768:       assertEquals(52, Node.LENGTH);
769:       assertEquals(8, Node.FLAG_NO_THROWS);
770:       assertEquals(37, Node.OPT_ARG_NAME);
771:       assertEquals(48, Node.DIRECTIVES);
772:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
773:       assertEquals(32, Node.INCRDECR_PROP);
774:       assertEquals(56, Node.CHANGE_TIME);
775:       assertEquals(12, Node.COLUMN_BITS);
776:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
777:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
778:       assertEquals(4095, Node.COLUMN_MASK);
779:       assertFalse(node1.equals((Object)node0));
780:       
781:       int int1 = node0.getIndexOfChild(node1);
782:       assertFalse(node0.isHook());
783:       assertFalse(node0.isFalse());
784:       assertFalse(node0.isThrow());
785:       assertFalse(node0.isSwitch());
786:       assertFalse(node0.isBreak());
787:       assertFalse(node0.isIn());
788:       assertFalse(node0.isEmpty());
789:       assertFalse(node0.isInc());
790:       assertFalse(node0.isArrayLit());
791:       assertFalse(node0.hasOneChild());
792:       assertFalse(node0.isFor());
793:       assertFalse(node0.isRegExp());
794:       assertFalse(node0.isNE());
795:       assertFalse(node0.isIf());
796:       assertFalse(node0.isWith());
797:       assertFalse(node0.isLabelName());
798:       assertFalse(node0.isInstanceOf());
799:       assertEquals(1474559, node0.getSourcePosition());
800:       assertFalse(node0.isCatch());
801:       assertFalse(node0.hasMoreThanOneChild());
802:       assertFalse(node0.isThis());
803:       assertFalse(node0.isNumber());
804:       assertEquals(4095, node0.getCharno());
805:       assertFalse(node0.isGetterDef());
806:       assertFalse(node0.isScript());
807:       assertFalse(node0.isCase());
808:       assertFalse(node0.isTry());
809:       assertFalse(node0.isVar());
810:       assertFalse(node0.isStringKey());
811:       assertFalse(node0.isBlock());
812:       assertEquals(359, node0.getLineno());
813:       assertFalse(node0.isNull());
814:       assertFalse(node0.isParamList());
815:       assertFalse(node0.isName());
816:       assertFalse(node0.isCall());
817:       assertEquals(0, node0.getChildCount());
818:       assertFalse(node0.isContinue());
819:       assertFalse(node0.isAssignAdd());
820:       assertFalse(node0.isOr());
821:       assertFalse(node0.isLabel());
822:       assertFalse(node0.isDefaultCase());
823:       assertFalse(node0.isAdd());
824:       assertFalse(node0.isNew());
825:       assertFalse(node0.isDo());
826:       assertFalse(node0.isSetterDef());
827:       assertFalse(node0.isCast());
828:       assertFalse(node0.isAssign());
829:       assertFalse(node0.isDebugger());
830:       assertFalse(node0.isTrue());
831:       assertFalse(node0.hasChildren());
832:       assertFalse(node0.isTypeOf());
833:       assertFalse(node0.isDec());
834:       assertFalse(node0.isFunction());
835:       assertFalse(node0.isDelProp());
836:       assertFalse(node0.isGetElem());
837:       assertFalse(node0.isVoid());
838:       assertFalse(node0.isExprResult());
839:       assertFalse(node0.isObjectLit());
840:       assertFalse(node0.isAnd());
841:       assertFalse(node0.isNot());
842:       assertFalse(node0.isReturn());
843:       assertFalse(node0.isComma());
844:       assertEquals(359, node0.getType());
845:       assertFalse(node0.isString());
846:       assertFalse(node0.isWhile());
847:       assertFalse(node0.isGetProp());
848:       assertFalse(node1.isDec());
849:       assertFalse(node1.isGetElem());
850:       assertFalse(node1.isCast());
851:       assertFalse(node1.isAssign());
852:       assertFalse(node1.isTypeOf());
853:       assertFalse(node1.isOr());
854:       assertFalse(node1.isLabel());
855:       assertFalse(node1.isReturn());
856:       assertFalse(node1.isDo());
857:       assertFalse(node1.isAssignAdd());
858:       assertFalse(node1.isScript());
859:       assertFalse(node1.isObjectLit());
860:       assertFalse(node1.isContinue());
861:       assertFalse(node1.isNot());
862:       assertFalse(node1.isAnd());
863:       assertFalse(node1.isStringKey());
864:       assertFalse(node1.isLabelName());
865:       assertFalse(node1.isSetterDef());
866:       assertFalse(node1.isThis());
867:       assertFalse(node1.isFalse());
868:       assertEquals(57, node1.getCharno());
869:       assertFalse(node1.isHook());
870:       assertFalse(node1.isBlock());
871:       assertFalse(node1.isThrow());
872:       assertEquals(479289, node1.getSourcePosition());
873:       assertEquals(39, node1.getType());
874:       assertFalse(node1.isInc());
875:       assertFalse(node1.isCatch());
876:       assertFalse(node1.isRegExp());
877:       assertFalse(node1.hasMoreThanOneChild());
878:       assertFalse(node1.isWith());
879:       assertFalse(node1.isInstanceOf());
880:       assertTrue(node1.hasChildren());
881:       assertFalse(node1.isDelProp());
882:       assertFalse(node1.isGetterDef());
883:       assertFalse(node1.isIf());
884:       assertFalse(node1.isEmpty());
885:       assertFalse(node1.isNE());
886:       assertFalse(node1.isFor());
887:       assertTrue(node1.hasOneChild());
888:       assertFalse(node1.isIn());
889:       assertEquals(1, node1.getChildCount());
890:       assertTrue(node1.isNumber());
891:       assertFalse(node1.isTry());
892:       assertFalse(node1.isDefaultCase());
893:       assertFalse(node1.isString());
894:       assertFalse(node1.isCase());
895:       assertFalse(node1.isDebugger());
896:       assertFalse(node1.isFunction());
897:       assertFalse(node1.isArrayLit());
898:       assertFalse(node1.isParamList());
899:       assertFalse(node1.isSwitch());
900:       assertFalse(node1.isBreak());
901:       assertFalse(node1.isNull());
902:       assertFalse(node1.isCall());
903:       assertFalse(node1.isComma());
904:       assertFalse(node1.isVar());
905:       assertFalse(node1.isAdd());
906:       assertFalse(node1.isGetProp());
907:       assertFalse(node1.isNew());
908:       assertFalse(node1.isWhile());
909:       assertFalse(node1.isExprResult());
910:       assertEquals(117, node1.getLineno());
911:       assertFalse(node1.isTrue());
912:       assertFalse(node1.isVoid());
913:       assertFalse(node1.isName());
914:       assertEquals((-1), int1);
915:       assertEquals(30, Node.VAR_ARGS_NAME);
916:       assertEquals(49, Node.DIRECT_EVAL);
917:       assertEquals(1, Node.DECR_FLAG);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(32, Node.INCRDECR_PROP);
920:       assertEquals(15, Node.NO_SIDE_EFFECTS);
921:       assertEquals(12, Node.COLUMN_BITS);
922:       assertEquals(2, Node.POST_FLAG);
923:       assertEquals(47, Node.IS_DISPATCHER);
924:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
925:       assertEquals(29, Node.JSDOC_INFO_PROP);
926:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
927:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
928:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
929:       assertEquals(37, Node.OPT_ARG_NAME);
930:       assertEquals(39, Node.EMPTY_BLOCK);
931:       assertEquals(53, Node.INPUT_ID);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
934:       assertEquals(8, Node.FLAG_NO_THROWS);
935:       assertEquals(52, Node.LENGTH);
936:       assertEquals(56, Node.CHANGE_TIME);
937:       assertEquals(36, Node.QUOTED_PROP);
938:       assertEquals(57, Node.REFLECTED_OBJECT);
939:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
940:       assertEquals(4095, Node.COLUMN_MASK);
941:       assertEquals(55, Node.INFERRED_FUNCTION);
942:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
943:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
944:       assertEquals(50, Node.FREE_CALL);
945:       assertEquals(40, Node.ORIGINALNAME_PROP);
946:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
947:       assertEquals(54, Node.SLASH_V);
948:       assertEquals(43, Node.IS_CONSTANT_NAME);
949:       assertEquals(51, Node.STATIC_SOURCE_FILE);
950:       assertEquals(46, Node.IS_NAMESPACE);
951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
952:       assertEquals(36, Node.QUOTED_PROP);
953:       assertEquals(53, Node.INPUT_ID);
954:       assertEquals(43, Node.IS_CONSTANT_NAME);
955:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
956:       assertEquals(55, Node.INFERRED_FUNCTION);
957:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
958:       assertEquals(29, Node.JSDOC_INFO_PROP);
959:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
960:       assertEquals(39, Node.EMPTY_BLOCK);
961:       assertEquals(47, Node.IS_DISPATCHER);
962:       assertEquals(46, Node.IS_NAMESPACE);
963:       assertEquals(40, Node.ORIGINALNAME_PROP);
964:       assertEquals(30, Node.VAR_ARGS_NAME);
965:       assertEquals(2, Node.POST_FLAG);
966:       assertEquals(54, Node.SLASH_V);
967:       assertEquals(15, Node.NO_SIDE_EFFECTS);
968:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
969:       assertEquals(49, Node.DIRECT_EVAL);
970:       assertEquals(57, Node.LAST_PROP);
971:       assertEquals(1, Node.DECR_FLAG);
972:       assertEquals(57, Node.REFLECTED_OBJECT);
973:       assertEquals(51, Node.STATIC_SOURCE_FILE);
974:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
975:       assertEquals(50, Node.FREE_CALL);
976:       assertEquals(52, Node.LENGTH);
977:       assertEquals(8, Node.FLAG_NO_THROWS);
978:       assertEquals(37, Node.OPT_ARG_NAME);
979:       assertEquals(48, Node.DIRECTIVES);
980:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
981:       assertEquals(32, Node.INCRDECR_PROP);
982:       assertEquals(56, Node.CHANGE_TIME);
983:       assertEquals(12, Node.COLUMN_BITS);
984:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
985:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
986:       assertEquals(4095, Node.COLUMN_MASK);
987:       assertFalse(node0.equals((Object)node1));
988:       assertFalse(int1 == int0);
989:       assertFalse(node1.equals((Object)node0));
990:       
991:       JSDocInfo jSDocInfo0 = new JSDocInfo();
992:       assertNotNull(jSDocInfo0);
993:       assertFalse(jSDocInfo0.hasType());
994:       assertFalse(jSDocInfo0.isMappedIdGenerator());
995:       assertFalse(jSDocInfo0.isJavaDispatch());
996:       assertFalse(jSDocInfo0.isNoSideEffects());
997:       assertNull(jSDocInfo0.getDeprecationReason());
998:       assertFalse(jSDocInfo0.isHidden());
999:       assertFalse(jSDocInfo0.isJaggerModule());
1000:       assertFalse(jSDocInfo0.makesDicts());
1001:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1002:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1003:       assertFalse(jSDocInfo0.isDeprecated());
1004:       assertFalse(jSDocInfo0.isImplicitCast());
1005:       assertNull(jSDocInfo0.getBlockDescription());
1006:       assertFalse(jSDocInfo0.isNgInject());
1007:       assertFalse(jSDocInfo0.makesStructs());
1008:       assertFalse(jSDocInfo0.isInterface());
1009:       assertFalse(jSDocInfo0.hasFileOverview());
1010:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1011:       assertFalse(jSDocInfo0.isDefine());
1012:       assertFalse(jSDocInfo0.isIdGenerator());
1013:       assertFalse(jSDocInfo0.isNoCompile());
1014:       assertFalse(jSDocInfo0.hasReturnType());
1015:       assertFalse(jSDocInfo0.isNoAlias());
1016:       assertNull(jSDocInfo0.getVisibility());
1017:       assertFalse(jSDocInfo0.hasEnumParameterType());
1018:       assertNull(jSDocInfo0.getFileOverview());
1019:       assertFalse(jSDocInfo0.shouldPreserveTry());
1020:       assertEquals(0, jSDocInfo0.getParameterCount());
1021:       assertNull(jSDocInfo0.getDescription());
1022:       assertFalse(jSDocInfo0.hasThisType());
1023:       assertFalse(jSDocInfo0.isJaggerInject());
1024:       assertFalse(jSDocInfo0.isConstructor());
1025:       assertFalse(jSDocInfo0.isNoTypeCheck());
1026:       assertFalse(jSDocInfo0.hasModifies());
1027:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1028:       assertNull(jSDocInfo0.getMeaning());
1029:       assertFalse(jSDocInfo0.isConstant());
1030:       assertNull(jSDocInfo0.getLendsName());
1031:       assertFalse(jSDocInfo0.isExport());
1032:       assertFalse(jSDocInfo0.containsDeclaration());
1033:       assertFalse(jSDocInfo0.isNoShadow());
1034:       assertFalse(jSDocInfo0.isWizaction());
1035:       assertFalse(jSDocInfo0.isExpose());
1036:       assertFalse(jSDocInfo0.isOverride());
1037:       assertFalse(jSDocInfo0.isExterns());
1038:       assertNull(jSDocInfo0.getVersion());
1039:       assertFalse(jSDocInfo0.isStableIdGenerator());
1040:       assertFalse(jSDocInfo0.hasTypedefType());
1041:       assertFalse(jSDocInfo0.isDisposes());
1042:       assertNull(jSDocInfo0.getOriginalCommentString());
1043:       assertNull(jSDocInfo0.getLicense());
1044:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1045:       assertNull(jSDocInfo0.getReturnDescription());
1046:       assertFalse(jSDocInfo0.isJaggerProvide());
1047:       assertFalse(jSDocInfo0.hasBaseType());
1048:       
1049:       Node node2 = node1.setJSDocInfo(jSDocInfo0);
1050:       assertNotNull(node2);
1051:       assertFalse(node1.isDec());
1052:       assertFalse(node1.isGetElem());
1053:       assertFalse(node1.isCast());
1054:       assertFalse(node1.isAssign());
1055:       assertFalse(node1.isTypeOf());
1056:       assertFalse(node1.isOr());
1057:       assertFalse(node1.isLabel());
1058:       assertFalse(node1.isReturn());
1059:       assertFalse(node1.isDo());
1060:       assertFalse(node1.isAssignAdd());
1061:       assertFalse(node1.isScript());
1062:       assertFalse(node1.isObjectLit());
1063:       assertFalse(node1.isContinue());
1064:       assertFalse(node1.isNot());
1065:       assertFalse(node1.isAnd());
1066:       assertFalse(node1.isStringKey());
1067:       assertFalse(node1.isLabelName());
1068:       assertFalse(node1.isSetterDef());
1069:       assertFalse(node1.isThis());
1070:       assertFalse(node1.isFalse());
1071:       assertEquals(57, node1.getCharno());
1072:       assertFalse(node1.isHook());
1073:       assertFalse(node1.isBlock());
1074:       assertFalse(node1.isThrow());
1075:       assertEquals(479289, node1.getSourcePosition());
1076:       assertEquals(39, node1.getType());
1077:       assertFalse(node1.isInc());
1078:       assertFalse(node1.isCatch());
1079:       assertFalse(node1.isRegExp());
1080:       assertFalse(node1.hasMoreThanOneChild());
1081:       assertFalse(node1.isWith());
1082:       assertFalse(node1.isInstanceOf());
1083:       assertTrue(node1.hasChildren());
1084:       assertFalse(node1.isDelProp());
1085:       assertFalse(node1.isGetterDef());
1086:       assertFalse(node1.isIf());
1087:       assertFalse(node1.isEmpty());
1088:       assertFalse(node1.isNE());
1089:       assertFalse(node1.isFor());
1090:       assertTrue(node1.hasOneChild());
1091:       assertFalse(node1.isIn());
1092:       assertEquals(1, node1.getChildCount());
1093:       assertTrue(node1.isNumber());
1094:       assertFalse(node1.isTry());
1095:       assertFalse(node1.isDefaultCase());
1096:       assertFalse(node1.isString());
1097:       assertFalse(node1.isCase());
1098:       assertFalse(node1.isDebugger());
1099:       assertFalse(node1.isFunction());
1100:       assertFalse(node1.isArrayLit());
1101:       assertFalse(node1.isParamList());
1102:       assertFalse(node1.isSwitch());
1103:       assertFalse(node1.isBreak());
1104:       assertFalse(node1.isNull());
1105:       assertFalse(node1.isCall());
1106:       assertFalse(node1.isComma());
1107:       assertFalse(node1.isVar());
1108:       assertFalse(node1.isAdd());
1109:       assertFalse(node1.isGetProp());
1110:       assertFalse(node1.isNew());
1111:       assertFalse(node1.isWhile());
1112:       assertFalse(node1.isExprResult());
1113:       assertEquals(117, node1.getLineno());
1114:       assertFalse(node1.isTrue());
1115:       assertFalse(node1.isVoid());
1116:       assertFalse(node1.isName());
1117:       assertFalse(jSDocInfo0.hasType());
1118:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1119:       assertFalse(jSDocInfo0.isJavaDispatch());
1120:       assertFalse(jSDocInfo0.isNoSideEffects());
1121:       assertNull(jSDocInfo0.getDeprecationReason());
1122:       assertFalse(jSDocInfo0.isHidden());
1123:       assertFalse(jSDocInfo0.isJaggerModule());
1124:       assertFalse(jSDocInfo0.makesDicts());
1125:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1126:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1127:       assertFalse(jSDocInfo0.isDeprecated());
1128:       assertFalse(jSDocInfo0.isImplicitCast());
1129:       assertNull(jSDocInfo0.getBlockDescription());
1130:       assertFalse(jSDocInfo0.isNgInject());
1131:       assertFalse(jSDocInfo0.makesStructs());
1132:       assertFalse(jSDocInfo0.isInterface());
1133:       assertFalse(jSDocInfo0.hasFileOverview());
1134:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1135:       assertFalse(jSDocInfo0.isDefine());
1136:       assertFalse(jSDocInfo0.isIdGenerator());
1137:       assertFalse(jSDocInfo0.isNoCompile());
1138:       assertFalse(jSDocInfo0.hasReturnType());
1139:       assertFalse(jSDocInfo0.isNoAlias());
1140:       assertNull(jSDocInfo0.getVisibility());
1141:       assertFalse(jSDocInfo0.hasEnumParameterType());
1142:       assertNull(jSDocInfo0.getFileOverview());
1143:       assertFalse(jSDocInfo0.shouldPreserveTry());
1144:       assertEquals(0, jSDocInfo0.getParameterCount());
1145:       assertNull(jSDocInfo0.getDescription());
1146:       assertFalse(jSDocInfo0.hasThisType());
1147:       assertFalse(jSDocInfo0.isJaggerInject());
1148:       assertFalse(jSDocInfo0.isConstructor());
1149:       assertFalse(jSDocInfo0.isNoTypeCheck());
1150:       assertFalse(jSDocInfo0.hasModifies());
1151:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1152:       assertNull(jSDocInfo0.getMeaning());
1153:       assertFalse(jSDocInfo0.isConstant());
1154:       assertNull(jSDocInfo0.getLendsName());
1155:       assertFalse(jSDocInfo0.isExport());
1156:       assertFalse(jSDocInfo0.containsDeclaration());
1157:       assertFalse(jSDocInfo0.isNoShadow());
1158:       assertFalse(jSDocInfo0.isWizaction());
1159:       assertFalse(jSDocInfo0.isExpose());
1160:       assertFalse(jSDocInfo0.isOverride());
1161:       assertFalse(jSDocInfo0.isExterns());
1162:       assertNull(jSDocInfo0.getVersion());
1163:       assertFalse(jSDocInfo0.isStableIdGenerator());
1164:       assertFalse(jSDocInfo0.hasTypedefType());
1165:       assertFalse(jSDocInfo0.isDisposes());
1166:       assertNull(jSDocInfo0.getOriginalCommentString());
1167:       assertNull(jSDocInfo0.getLicense());
1168:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1169:       assertNull(jSDocInfo0.getReturnDescription());
1170:       assertFalse(jSDocInfo0.isJaggerProvide());
1171:       assertFalse(jSDocInfo0.hasBaseType());
1172:       assertFalse(node2.isGetterDef());
1173:       assertFalse(node2.isIf());
1174:       assertFalse(node2.isDelProp());
1175:       assertTrue(node2.hasOneChild());
1176:       assertFalse(node2.isEmpty());
1177:       assertFalse(node2.isNE());
1178:       assertFalse(node2.isFor());
1179:       assertEquals(1, node2.getChildCount());
1180:       assertTrue(node2.hasChildren());
1181:       assertFalse(node2.isVoid());
1182:       assertFalse(node2.isArrayLit());
1183:       assertFalse(node2.isDefaultCase());
1184:       assertEquals(117, node2.getLineno());
1185:       assertFalse(node2.isFunction());
1186:       assertFalse(node2.isTrue());
1187:       assertFalse(node2.isIn());
1188:       assertEquals(479289, node2.getSourcePosition());
1189:       assertFalse(node2.isInc());
1190:       assertFalse(node2.isSetterDef());
1191:       assertFalse(node2.isStringKey());
1192:       assertFalse(node2.isParamList());
1193:       assertFalse(node2.isThis());
1194:       assertFalse(node2.isCatch());
1195:       assertFalse(node2.isInstanceOf());
1196:       assertFalse(node2.isRegExp());
1197:       assertFalse(node2.isSwitch());
1198:       assertFalse(node2.isWith());
1199:       assertFalse(node2.isScript());
1200:       assertFalse(node2.isBlock());
1201:       assertEquals(39, node2.getType());
1202:       assertFalse(node2.isHook());
1203:       assertEquals(57, node2.getCharno());
1204:       assertFalse(node2.isTry());
1205:       assertFalse(node2.isCase());
1206:       assertFalse(node2.isDec());
1207:       assertFalse(node2.isTypeOf());
1208:       assertFalse(node2.isAssign());
1209:       assertFalse(node2.isLabel());
1210:       assertFalse(node2.isOr());
1211:       assertFalse(node2.isCast());
1212:       assertFalse(node2.hasMoreThanOneChild());
1213:       assertFalse(node2.isGetElem());
1214:       assertFalse(node2.isExprResult());
1215:       assertFalse(node2.isLabelName());
1216:       assertFalse(node2.isContinue());
1217:       assertFalse(node2.isVar());
1218:       assertFalse(node2.isAssignAdd());
1219:       assertFalse(node2.isAdd());
1220:       assertFalse(node2.isDo());
1221:       assertFalse(node2.isNew());
1222:       assertFalse(node2.isBreak());
1223:       assertFalse(node2.isNull());
1224:       assertFalse(node2.isThrow());
1225:       assertFalse(node2.isFalse());
1226:       assertFalse(node2.isComma());
1227:       assertFalse(node2.isAnd());
1228:       assertFalse(node2.isCall());
1229:       assertFalse(node2.isName());
1230:       assertFalse(node2.isString());
1231:       assertFalse(node2.isWhile());
1232:       assertFalse(node2.isObjectLit());
1233:       assertFalse(node2.isNot());
1234:       assertFalse(node2.isDebugger());
1235:       assertFalse(node2.isReturn());
1236:       assertFalse(node2.isGetProp());
1237:       assertTrue(node2.isNumber());
1238:       assertSame(node1, node2);
1239:       assertSame(node2, node1);
1240:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1241:       assertEquals(36, Node.QUOTED_PROP);
1242:       assertEquals(53, Node.INPUT_ID);
1243:       assertEquals(43, Node.IS_CONSTANT_NAME);
1244:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1245:       assertEquals(55, Node.INFERRED_FUNCTION);
1246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1247:       assertEquals(29, Node.JSDOC_INFO_PROP);
1248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1249:       assertEquals(39, Node.EMPTY_BLOCK);
1250:       assertEquals(47, Node.IS_DISPATCHER);
1251:       assertEquals(46, Node.IS_NAMESPACE);
1252:       assertEquals(40, Node.ORIGINALNAME_PROP);
1253:       assertEquals(30, Node.VAR_ARGS_NAME);
1254:       assertEquals(2, Node.POST_FLAG);
1255:       assertEquals(54, Node.SLASH_V);
1256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1258:       assertEquals(49, Node.DIRECT_EVAL);
1259:       assertEquals(57, Node.LAST_PROP);
1260:       assertEquals(1, Node.DECR_FLAG);
1261:       assertEquals(57, Node.REFLECTED_OBJECT);
1262:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1263:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1264:       assertEquals(50, Node.FREE_CALL);
1265:       assertEquals(52, Node.LENGTH);
1266:       assertEquals(8, Node.FLAG_NO_THROWS);
1267:       assertEquals(37, Node.OPT_ARG_NAME);
1268:       assertEquals(48, Node.DIRECTIVES);
1269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1270:       assertEquals(32, Node.INCRDECR_PROP);
1271:       assertEquals(56, Node.CHANGE_TIME);
1272:       assertEquals(12, Node.COLUMN_BITS);
1273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1275:       assertEquals(4095, Node.COLUMN_MASK);
1276:       assertEquals(53, Node.INPUT_ID);
1277:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1278:       assertEquals(43, Node.IS_CONSTANT_NAME);
1279:       assertEquals(4095, Node.COLUMN_MASK);
1280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1281:       assertEquals(47, Node.IS_DISPATCHER);
1282:       assertEquals(2, Node.POST_FLAG);
1283:       assertEquals(48, Node.DIRECTIVES);
1284:       assertEquals(8, Node.FLAG_NO_THROWS);
1285:       assertEquals(39, Node.EMPTY_BLOCK);
1286:       assertEquals(56, Node.CHANGE_TIME);
1287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1288:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1289:       assertEquals(37, Node.OPT_ARG_NAME);
1290:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1291:       assertEquals(55, Node.INFERRED_FUNCTION);
1292:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1293:       assertEquals(29, Node.JSDOC_INFO_PROP);
1294:       assertEquals(57, Node.REFLECTED_OBJECT);
1295:       assertEquals(36, Node.QUOTED_PROP);
1296:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1297:       assertEquals(54, Node.SLASH_V);
1298:       assertEquals(52, Node.LENGTH);
1299:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1300:       assertEquals(57, Node.LAST_PROP);
1301:       assertEquals(49, Node.DIRECT_EVAL);
1302:       assertEquals(1, Node.DECR_FLAG);
1303:       assertEquals(40, Node.ORIGINALNAME_PROP);
1304:       assertEquals(12, Node.COLUMN_BITS);
1305:       assertEquals(30, Node.VAR_ARGS_NAME);
1306:       assertEquals(32, Node.INCRDECR_PROP);
1307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1309:       assertEquals(46, Node.IS_NAMESPACE);
1310:       assertEquals(50, Node.FREE_CALL);
1311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1312:       assertFalse(node1.equals((Object)node0));
1313:       assertFalse(node2.equals((Object)node0));
1314:       
1315:       boolean boolean2 = node2.isFalse();
1316:       assertFalse(node1.isDec());
1317:       assertFalse(node1.isGetElem());
1318:       assertFalse(node1.isCast());
1319:       assertFalse(node1.isAssign());
1320:       assertFalse(node1.isTypeOf());
1321:       assertFalse(node1.isOr());
1322:       assertFalse(node1.isLabel());
1323:       assertFalse(node1.isReturn());
1324:       assertFalse(node1.isDo());
1325:       assertFalse(node1.isAssignAdd());
1326:       assertFalse(node1.isScript());
1327:       assertFalse(node1.isObjectLit());
1328:       assertFalse(node1.isContinue());
1329:       assertFalse(node1.isNot());
1330:       assertFalse(node1.isAnd());
1331:       assertFalse(node1.isStringKey());
1332:       assertFalse(node1.isLabelName());
1333:       assertFalse(node1.isSetterDef());
1334:       assertFalse(node1.isThis());
1335:       assertFalse(node1.isFalse());
1336:       assertEquals(57, node1.getCharno());
1337:       assertFalse(node1.isHook());
1338:       assertFalse(node1.isBlock());
1339:       assertFalse(node1.isThrow());
1340:       assertEquals(479289, node1.getSourcePosition());
1341:       assertEquals(39, node1.getType());
1342:       assertFalse(node1.isInc());
1343:       assertFalse(node1.isCatch());
1344:       assertFalse(node1.isRegExp());
1345:       assertFalse(node1.hasMoreThanOneChild());
1346:       assertFalse(node1.isWith());
1347:       assertFalse(node1.isInstanceOf());
1348:       assertTrue(node1.hasChildren());
1349:       assertFalse(node1.isDelProp());
1350:       assertFalse(node1.isGetterDef());
1351:       assertFalse(node1.isIf());
1352:       assertFalse(node1.isEmpty());
1353:       assertFalse(node1.isNE());
1354:       assertFalse(node1.isFor());
1355:       assertTrue(node1.hasOneChild());
1356:       assertFalse(node1.isIn());
1357:       assertEquals(1, node1.getChildCount());
1358:       assertTrue(node1.isNumber());
1359:       assertFalse(node1.isTry());
1360:       assertFalse(node1.isDefaultCase());
1361:       assertFalse(node1.isString());
1362:       assertFalse(node1.isCase());
1363:       assertFalse(node1.isDebugger());
1364:       assertFalse(node1.isFunction());
1365:       assertFalse(node1.isArrayLit());
1366:       assertFalse(node1.isParamList());
1367:       assertFalse(node1.isSwitch());
1368:       assertFalse(node1.isBreak());
1369:       assertFalse(node1.isNull());
1370:       assertFalse(node1.isCall());
1371:       assertFalse(node1.isComma());
1372:       assertFalse(node1.isVar());
1373:       assertFalse(node1.isAdd());
1374:       assertFalse(node1.isGetProp());
1375:       assertFalse(node1.isNew());
1376:       assertFalse(node1.isWhile());
1377:       assertFalse(node1.isExprResult());
1378:       assertEquals(117, node1.getLineno());
1379:       assertFalse(node1.isTrue());
1380:       assertFalse(node1.isVoid());
1381:       assertFalse(node1.isName());
1382:       assertFalse(jSDocInfo0.hasType());
1383:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1384:       assertFalse(jSDocInfo0.isJavaDispatch());
1385:       assertFalse(jSDocInfo0.isNoSideEffects());
1386:       assertNull(jSDocInfo0.getDeprecationReason());
1387:       assertFalse(jSDocInfo0.isHidden());
1388:       assertFalse(jSDocInfo0.isJaggerModule());
1389:       assertFalse(jSDocInfo0.makesDicts());
1390:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1391:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1392:       assertFalse(jSDocInfo0.isDeprecated());
1393:       assertFalse(jSDocInfo0.isImplicitCast());
1394:       assertNull(jSDocInfo0.getBlockDescription());
1395:       assertFalse(jSDocInfo0.isNgInject());
1396:       assertFalse(jSDocInfo0.makesStructs());
1397:       assertFalse(jSDocInfo0.isInterface());
1398:       assertFalse(jSDocInfo0.hasFileOverview());
1399:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1400:       assertFalse(jSDocInfo0.isDefine());
1401:       assertFalse(jSDocInfo0.isIdGenerator());
1402:       assertFalse(jSDocInfo0.isNoCompile());
1403:       assertFalse(jSDocInfo0.hasReturnType());
1404:       assertFalse(jSDocInfo0.isNoAlias());
1405:       assertNull(jSDocInfo0.getVisibility());
1406:       assertFalse(jSDocInfo0.hasEnumParameterType());
1407:       assertNull(jSDocInfo0.getFileOverview());
1408:       assertFalse(jSDocInfo0.shouldPreserveTry());
1409:       assertEquals(0, jSDocInfo0.getParameterCount());
1410:       assertNull(jSDocInfo0.getDescription());
1411:       assertFalse(jSDocInfo0.hasThisType());
1412:       assertFalse(jSDocInfo0.isJaggerInject());
1413:       assertFalse(jSDocInfo0.isConstructor());
1414:       assertFalse(jSDocInfo0.isNoTypeCheck());
1415:       assertFalse(jSDocInfo0.hasModifies());
1416:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1417:       assertNull(jSDocInfo0.getMeaning());
1418:       assertFalse(jSDocInfo0.isConstant());
1419:       assertNull(jSDocInfo0.getLendsName());
1420:       assertFalse(jSDocInfo0.isExport());
1421:       assertFalse(jSDocInfo0.containsDeclaration());
1422:       assertFalse(jSDocInfo0.isNoShadow());
1423:       assertFalse(jSDocInfo0.isWizaction());
1424:       assertFalse(jSDocInfo0.isExpose());
1425:       assertFalse(jSDocInfo0.isOverride());
1426:       assertFalse(jSDocInfo0.isExterns());
1427:       assertNull(jSDocInfo0.getVersion());
1428:       assertFalse(jSDocInfo0.isStableIdGenerator());
1429:       assertFalse(jSDocInfo0.hasTypedefType());
1430:       assertFalse(jSDocInfo0.isDisposes());
1431:       assertNull(jSDocInfo0.getOriginalCommentString());
1432:       assertNull(jSDocInfo0.getLicense());
1433:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1434:       assertNull(jSDocInfo0.getReturnDescription());
1435:       assertFalse(jSDocInfo0.isJaggerProvide());
1436:       assertFalse(jSDocInfo0.hasBaseType());
1437:       assertFalse(node2.isGetterDef());
1438:       assertFalse(node2.isIf());
1439:       assertFalse(node2.isDelProp());
1440:       assertTrue(node2.hasOneChild());
1441:       assertFalse(node2.isEmpty());
1442:       assertFalse(node2.isNE());
1443:       assertFalse(node2.isFor());
1444:       assertEquals(1, node2.getChildCount());
1445:       assertTrue(node2.hasChildren());
1446:       assertFalse(node2.isVoid());
1447:       assertFalse(node2.isArrayLit());
1448:       assertFalse(node2.isDefaultCase());
1449:       assertEquals(117, node2.getLineno());
1450:       assertFalse(node2.isFunction());
1451:       assertFalse(node2.isTrue());
1452:       assertFalse(node2.isIn());
1453:       assertEquals(479289, node2.getSourcePosition());
1454:       assertFalse(node2.isInc());
1455:       assertFalse(node2.isSetterDef());
1456:       assertFalse(node2.isStringKey());
1457:       assertFalse(node2.isParamList());
1458:       assertFalse(node2.isThis());
1459:       assertFalse(node2.isCatch());
1460:       assertFalse(node2.isInstanceOf());
1461:       assertFalse(node2.isRegExp());
1462:       assertFalse(node2.isSwitch());
1463:       assertFalse(node2.isWith());
1464:       assertFalse(node2.isScript());
1465:       assertFalse(node2.isBlock());
1466:       assertEquals(39, node2.getType());
1467:       assertFalse(node2.isHook());
1468:       assertEquals(57, node2.getCharno());
1469:       assertFalse(node2.isTry());
1470:       assertFalse(node2.isCase());
1471:       assertFalse(node2.isDec());
1472:       assertFalse(node2.isTypeOf());
1473:       assertFalse(node2.isAssign());
1474:       assertFalse(node2.isLabel());
1475:       assertFalse(node2.isOr());
1476:       assertFalse(node2.isCast());
1477:       assertFalse(node2.hasMoreThanOneChild());
1478:       assertFalse(node2.isGetElem());
1479:       assertFalse(node2.isExprResult());
1480:       assertFalse(node2.isLabelName());
1481:       assertFalse(node2.isContinue());
1482:       assertFalse(node2.isVar());
1483:       assertFalse(node2.isAssignAdd());
1484:       assertFalse(node2.isAdd());
1485:       assertFalse(node2.isDo());
1486:       assertFalse(node2.isNew());
1487:       assertFalse(node2.isBreak());
1488:       assertFalse(node2.isNull());
1489:       assertFalse(node2.isThrow());
1490:       assertFalse(node2.isFalse());
1491:       assertFalse(node2.isComma());
1492:       assertFalse(node2.isAnd());
1493:       assertFalse(node2.isCall());
1494:       assertFalse(node2.isName());
1495:       assertFalse(node2.isString());
1496:       assertFalse(node2.isWhile());
1497:       assertFalse(node2.isObjectLit());
1498:       assertFalse(node2.isNot());
1499:       assertFalse(node2.isDebugger());
1500:       assertFalse(node2.isReturn());
1501:       assertFalse(node2.isGetProp());
1502:       assertTrue(node2.isNumber());
1503:       assertFalse(boolean2);
1504:       assertSame(node1, node2);
1505:       assertSame(node2, node1);
1506:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1507:       assertEquals(36, Node.QUOTED_PROP);
1508:       assertEquals(53, Node.INPUT_ID);
1509:       assertEquals(43, Node.IS_CONSTANT_NAME);
1510:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1511:       assertEquals(55, Node.INFERRED_FUNCTION);
1512:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1513:       assertEquals(29, Node.JSDOC_INFO_PROP);
1514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1515:       assertEquals(39, Node.EMPTY_BLOCK);
1516:       assertEquals(47, Node.IS_DISPATCHER);
1517:       assertEquals(46, Node.IS_NAMESPACE);
1518:       assertEquals(40, Node.ORIGINALNAME_PROP);
1519:       assertEquals(30, Node.VAR_ARGS_NAME);
1520:       assertEquals(2, Node.POST_FLAG);
1521:       assertEquals(54, Node.SLASH_V);
1522:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1523:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1524:       assertEquals(49, Node.DIRECT_EVAL);
1525:       assertEquals(57, Node.LAST_PROP);
1526:       assertEquals(1, Node.DECR_FLAG);
1527:       assertEquals(57, Node.REFLECTED_OBJECT);
1528:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1529:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1530:       assertEquals(50, Node.FREE_CALL);
1531:       assertEquals(52, Node.LENGTH);
1532:       assertEquals(8, Node.FLAG_NO_THROWS);
1533:       assertEquals(37, Node.OPT_ARG_NAME);
1534:       assertEquals(48, Node.DIRECTIVES);
1535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1536:       assertEquals(32, Node.INCRDECR_PROP);
1537:       assertEquals(56, Node.CHANGE_TIME);
1538:       assertEquals(12, Node.COLUMN_BITS);
1539:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1540:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1541:       assertEquals(4095, Node.COLUMN_MASK);
1542:       assertEquals(53, Node.INPUT_ID);
1543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1544:       assertEquals(43, Node.IS_CONSTANT_NAME);
1545:       assertEquals(4095, Node.COLUMN_MASK);
1546:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1547:       assertEquals(47, Node.IS_DISPATCHER);
1548:       assertEquals(2, Node.POST_FLAG);
1549:       assertEquals(48, Node.DIRECTIVES);
1550:       assertEquals(8, Node.FLAG_NO_THROWS);
1551:       assertEquals(39, Node.EMPTY_BLOCK);
1552:       assertEquals(56, Node.CHANGE_TIME);
1553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1554:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1555:       assertEquals(37, Node.OPT_ARG_NAME);
1556:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1557:       assertEquals(55, Node.INFERRED_FUNCTION);
1558:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1559:       assertEquals(29, Node.JSDOC_INFO_PROP);
1560:       assertEquals(57, Node.REFLECTED_OBJECT);
1561:       assertEquals(36, Node.QUOTED_PROP);
1562:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1563:       assertEquals(54, Node.SLASH_V);
1564:       assertEquals(52, Node.LENGTH);
1565:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1566:       assertEquals(57, Node.LAST_PROP);
1567:       assertEquals(49, Node.DIRECT_EVAL);
1568:       assertEquals(1, Node.DECR_FLAG);
1569:       assertEquals(40, Node.ORIGINALNAME_PROP);
1570:       assertEquals(12, Node.COLUMN_BITS);
1571:       assertEquals(30, Node.VAR_ARGS_NAME);
1572:       assertEquals(32, Node.INCRDECR_PROP);
1573:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1574:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1575:       assertEquals(46, Node.IS_NAMESPACE);
1576:       assertEquals(50, Node.FREE_CALL);
1577:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1578:       assertFalse(node1.equals((Object)node0));
1579:       assertFalse(node2.equals((Object)node0));
1580:       assertTrue(boolean2 == boolean0);
1581:       assertTrue(boolean2 == boolean1);
1582:       
1583:       boolean boolean3 = node2.isVoid();
1584:       assertFalse(node1.isDec());
1585:       assertFalse(node1.isGetElem());
1586:       assertFalse(node1.isCast());
1587:       assertFalse(node1.isAssign());
1588:       assertFalse(node1.isTypeOf());
1589:       assertFalse(node1.isOr());
1590:       assertFalse(node1.isLabel());
1591:       assertFalse(node1.isReturn());
1592:       assertFalse(node1.isDo());
1593:       assertFalse(node1.isAssignAdd());
1594:       assertFalse(node1.isScript());
1595:       assertFalse(node1.isObjectLit());
1596:       assertFalse(node1.isContinue());
1597:       assertFalse(node1.isNot());
1598:       assertFalse(node1.isAnd());
1599:       assertFalse(node1.isStringKey());
1600:       assertFalse(node1.isLabelName());
1601:       assertFalse(node1.isSetterDef());
1602:       assertFalse(node1.isThis());
1603:       assertFalse(node1.isFalse());
1604:       assertEquals(57, node1.getCharno());
1605:       assertFalse(node1.isHook());
1606:       assertFalse(node1.isBlock());
1607:       assertFalse(node1.isThrow());
1608:       assertEquals(479289, node1.getSourcePosition());
1609:       assertEquals(39, node1.getType());
1610:       assertFalse(node1.isInc());
1611:       assertFalse(node1.isCatch());
1612:       assertFalse(node1.isRegExp());
1613:       assertFalse(node1.hasMoreThanOneChild());
1614:       assertFalse(node1.isWith());
1615:       assertFalse(node1.isInstanceOf());
1616:       assertTrue(node1.hasChildren());
1617:       assertFalse(node1.isDelProp());
1618:       assertFalse(node1.isGetterDef());
1619:       assertFalse(node1.isIf());
1620:       assertFalse(node1.isEmpty());
1621:       assertFalse(node1.isNE());
1622:       assertFalse(node1.isFor());
1623:       assertTrue(node1.hasOneChild());
1624:       assertFalse(node1.isIn());
1625:       assertEquals(1, node1.getChildCount());
1626:       assertTrue(node1.isNumber());
1627:       assertFalse(node1.isTry());
1628:       assertFalse(node1.isDefaultCase());
1629:       assertFalse(node1.isString());
1630:       assertFalse(node1.isCase());
1631:       assertFalse(node1.isDebugger());
1632:       assertFalse(node1.isFunction());
1633:       assertFalse(node1.isArrayLit());
1634:       assertFalse(node1.isParamList());
1635:       assertFalse(node1.isSwitch());
1636:       assertFalse(node1.isBreak());
1637:       assertFalse(node1.isNull());
1638:       assertFalse(node1.isCall());
1639:       assertFalse(node1.isComma());
1640:       assertFalse(node1.isVar());
1641:       assertFalse(node1.isAdd());
1642:       assertFalse(node1.isGetProp());
1643:       assertFalse(node1.isNew());
1644:       assertFalse(node1.isWhile());
1645:       assertFalse(node1.isExprResult());
1646:       assertEquals(117, node1.getLineno());
1647:       assertFalse(node1.isTrue());
1648:       assertFalse(node1.isVoid());
1649:       assertFalse(node1.isName());
1650:       assertFalse(jSDocInfo0.hasType());
1651:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1652:       assertFalse(jSDocInfo0.isJavaDispatch());
1653:       assertFalse(jSDocInfo0.isNoSideEffects());
1654:       assertNull(jSDocInfo0.getDeprecationReason());
1655:       assertFalse(jSDocInfo0.isHidden());
1656:       assertFalse(jSDocInfo0.isJaggerModule());
1657:       assertFalse(jSDocInfo0.makesDicts());
1658:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1659:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1660:       assertFalse(jSDocInfo0.isDeprecated());
1661:       assertFalse(jSDocInfo0.isImplicitCast());
1662:       assertNull(jSDocInfo0.getBlockDescription());
1663:       assertFalse(jSDocInfo0.isNgInject());
1664:       assertFalse(jSDocInfo0.makesStructs());
1665:       assertFalse(jSDocInfo0.isInterface());
1666:       assertFalse(jSDocInfo0.hasFileOverview());
1667:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1668:       assertFalse(jSDocInfo0.isDefine());
1669:       assertFalse(jSDocInfo0.isIdGenerator());
1670:       assertFalse(jSDocInfo0.isNoCompile());
1671:       assertFalse(jSDocInfo0.hasReturnType());
1672:       assertFalse(jSDocInfo0.isNoAlias());
1673:       assertNull(jSDocInfo0.getVisibility());
1674:       assertFalse(jSDocInfo0.hasEnumParameterType());
1675:       assertNull(jSDocInfo0.getFileOverview());
1676:       assertFalse(jSDocInfo0.shouldPreserveTry());
1677:       assertEquals(0, jSDocInfo0.getParameterCount());
1678:       assertNull(jSDocInfo0.getDescription());
1679:       assertFalse(jSDocInfo0.hasThisType());
1680:       assertFalse(jSDocInfo0.isJaggerInject());
1681:       assertFalse(jSDocInfo0.isConstructor());
1682:       assertFalse(jSDocInfo0.isNoTypeCheck());
1683:       assertFalse(jSDocInfo0.hasModifies());
1684:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1685:       assertNull(jSDocInfo0.getMeaning());
1686:       assertFalse(jSDocInfo0.isConstant());
1687:       assertNull(jSDocInfo0.getLendsName());
1688:       assertFalse(jSDocInfo0.isExport());
1689:       assertFalse(jSDocInfo0.containsDeclaration());
1690:       assertFalse(jSDocInfo0.isNoShadow());
1691:       assertFalse(jSDocInfo0.isWizaction());
1692:       assertFalse(jSDocInfo0.isExpose());
1693:       assertFalse(jSDocInfo0.isOverride());
1694:       assertFalse(jSDocInfo0.isExterns());
1695:       assertNull(jSDocInfo0.getVersion());
1696:       assertFalse(jSDocInfo0.isStableIdGenerator());
1697:       assertFalse(jSDocInfo0.hasTypedefType());
1698:       assertFalse(jSDocInfo0.isDisposes());
1699:       assertNull(jSDocInfo0.getOriginalCommentString());
1700:       assertNull(jSDocInfo0.getLicense());
1701:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1702:       assertNull(jSDocInfo0.getReturnDescription());
1703:       assertFalse(jSDocInfo0.isJaggerProvide());
1704:       assertFalse(jSDocInfo0.hasBaseType());
1705:       assertFalse(node2.isGetterDef());
1706:       assertFalse(node2.isIf());
1707:       assertFalse(node2.isDelProp());
1708:       assertTrue(node2.hasOneChild());
1709:       assertFalse(node2.isEmpty());
1710:       assertFalse(node2.isNE());
1711:       assertFalse(node2.isFor());
1712:       assertEquals(1, node2.getChildCount());
1713:       assertTrue(node2.hasChildren());
1714:       assertFalse(node2.isVoid());
1715:       assertFalse(node2.isArrayLit());
1716:       assertFalse(node2.isDefaultCase());
1717:       assertEquals(117, node2.getLineno());
1718:       assertFalse(node2.isFunction());
1719:       assertFalse(node2.isTrue());
1720:       assertFalse(node2.isIn());
1721:       assertEquals(479289, node2.getSourcePosition());
1722:       assertFalse(node2.isInc());
1723:       assertFalse(node2.isSetterDef());
1724:       assertFalse(node2.isStringKey());
1725:       assertFalse(node2.isParamList());
1726:       assertFalse(node2.isThis());
1727:       assertFalse(node2.isCatch());
1728:       assertFalse(node2.isInstanceOf());
1729:       assertFalse(node2.isRegExp());
1730:       assertFalse(node2.isSwitch());
1731:       assertFalse(node2.isWith());
1732:       assertFalse(node2.isScript());
1733:       assertFalse(node2.isBlock());
1734:       assertEquals(39, node2.getType());
1735:       assertFalse(node2.isHook());
1736:       assertEquals(57, node2.getCharno());
1737:       assertFalse(node2.isTry());
1738:       assertFalse(node2.isCase());
1739:       assertFalse(node2.isDec());
1740:       assertFalse(node2.isTypeOf());
1741:       assertFalse(node2.isAssign());
1742:       assertFalse(node2.isLabel());
1743:       assertFalse(node2.isOr());
1744:       assertFalse(node2.isCast());
1745:       assertFalse(node2.hasMoreThanOneChild());
1746:       assertFalse(node2.isGetElem());
1747:       assertFalse(node2.isExprResult());
1748:       assertFalse(node2.isLabelName());
1749:       assertFalse(node2.isContinue());
1750:       assertFalse(node2.isVar());
1751:       assertFalse(node2.isAssignAdd());
1752:       assertFalse(node2.isAdd());
1753:       assertFalse(node2.isDo());
1754:       assertFalse(node2.isNew());
1755:       assertFalse(node2.isBreak());
1756:       assertFalse(node2.isNull());
1757:       assertFalse(node2.isThrow());
1758:       assertFalse(node2.isFalse());
1759:       assertFalse(node2.isComma());
1760:       assertFalse(node2.isAnd());
1761:       assertFalse(node2.isCall());
1762:       assertFalse(node2.isName());
1763:       assertFalse(node2.isString());
1764:       assertFalse(node2.isWhile());
1765:       assertFalse(node2.isObjectLit());
1766:       assertFalse(node2.isNot());
1767:       assertFalse(node2.isDebugger());
1768:       assertFalse(node2.isReturn());
1769:       assertFalse(node2.isGetProp());
1770:       assertTrue(node2.isNumber());
1771:       assertFalse(boolean3);
1772:       assertSame(node1, node2);
1773:       assertSame(node2, node1);
1774:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1775:       assertEquals(36, Node.QUOTED_PROP);
1776:       assertEquals(53, Node.INPUT_ID);
1777:       assertEquals(43, Node.IS_CONSTANT_NAME);
1778:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1779:       assertEquals(55, Node.INFERRED_FUNCTION);
1780:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1781:       assertEquals(29, Node.JSDOC_INFO_PROP);
1782:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1783:       assertEquals(39, Node.EMPTY_BLOCK);
1784:       assertEquals(47, Node.IS_DISPATCHER);
1785:       assertEquals(46, Node.IS_NAMESPACE);
1786:       assertEquals(40, Node.ORIGINALNAME_PROP);
1787:       assertEquals(30, Node.VAR_ARGS_NAME);
1788:       assertEquals(2, Node.POST_FLAG);
1789:       assertEquals(54, Node.SLASH_V);
1790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1791:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1792:       assertEquals(49, Node.DIRECT_EVAL);
1793:       assertEquals(57, Node.LAST_PROP);
1794:       assertEquals(1, Node.DECR_FLAG);
1795:       assertEquals(57, Node.REFLECTED_OBJECT);
1796:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1797:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1798:       assertEquals(50, Node.FREE_CALL);
1799:       assertEquals(52, Node.LENGTH);
1800:       assertEquals(8, Node.FLAG_NO_THROWS);
1801:       assertEquals(37, Node.OPT_ARG_NAME);
1802:       assertEquals(48, Node.DIRECTIVES);
1803:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1804:       assertEquals(32, Node.INCRDECR_PROP);
1805:       assertEquals(56, Node.CHANGE_TIME);
1806:       assertEquals(12, Node.COLUMN_BITS);
1807:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1808:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1809:       assertEquals(4095, Node.COLUMN_MASK);
1810:       assertEquals(53, Node.INPUT_ID);
1811:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1812:       assertEquals(43, Node.IS_CONSTANT_NAME);
1813:       assertEquals(4095, Node.COLUMN_MASK);
1814:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1815:       assertEquals(47, Node.IS_DISPATCHER);
1816:       assertEquals(2, Node.POST_FLAG);
1817:       assertEquals(48, Node.DIRECTIVES);
1818:       assertEquals(8, Node.FLAG_NO_THROWS);
1819:       assertEquals(39, Node.EMPTY_BLOCK);
1820:       assertEquals(56, Node.CHANGE_TIME);
1821:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1822:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1823:       assertEquals(37, Node.OPT_ARG_NAME);
1824:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1825:       assertEquals(55, Node.INFERRED_FUNCTION);
1826:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1827:       assertEquals(29, Node.JSDOC_INFO_PROP);
1828:       assertEquals(57, Node.REFLECTED_OBJECT);
1829:       assertEquals(36, Node.QUOTED_PROP);
1830:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1831:       assertEquals(54, Node.SLASH_V);
1832:       assertEquals(52, Node.LENGTH);
1833:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1834:       assertEquals(57, Node.LAST_PROP);
1835:       assertEquals(49, Node.DIRECT_EVAL);
1836:       assertEquals(1, Node.DECR_FLAG);
1837:       assertEquals(40, Node.ORIGINALNAME_PROP);
1838:       assertEquals(12, Node.COLUMN_BITS);
1839:       assertEquals(30, Node.VAR_ARGS_NAME);
1840:       assertEquals(32, Node.INCRDECR_PROP);
1841:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1842:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1843:       assertEquals(46, Node.IS_NAMESPACE);
1844:       assertEquals(50, Node.FREE_CALL);
1845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1846:       assertFalse(node1.equals((Object)node0));
1847:       assertFalse(node2.equals((Object)node0));
1848:       assertTrue(boolean3 == boolean2);
1849:       assertTrue(boolean3 == boolean1);
1850:       assertTrue(boolean3 == boolean0);
1851:       
1852:       boolean boolean4 = node2.isAssignAdd();
1853:       assertFalse(node1.isDec());
1854:       assertFalse(node1.isGetElem());
1855:       assertFalse(node1.isCast());
1856:       assertFalse(node1.isAssign());
1857:       assertFalse(node1.isTypeOf());
1858:       assertFalse(node1.isOr());
1859:       assertFalse(node1.isLabel());
1860:       assertFalse(node1.isReturn());
1861:       assertFalse(node1.isDo());
1862:       assertFalse(node1.isAssignAdd());
1863:       assertFalse(node1.isScript());
1864:       assertFalse(node1.isObjectLit());
1865:       assertFalse(node1.isContinue());
1866:       assertFalse(node1.isNot());
1867:       assertFalse(node1.isAnd());
1868:       assertFalse(node1.isStringKey());
1869:       assertFalse(node1.isLabelName());
1870:       assertFalse(node1.isSetterDef());
1871:       assertFalse(node1.isThis());
1872:       assertFalse(node1.isFalse());
1873:       assertEquals(57, node1.getCharno());
1874:       assertFalse(node1.isHook());
1875:       assertFalse(node1.isBlock());
1876:       assertFalse(node1.isThrow());
1877:       assertEquals(479289, node1.getSourcePosition());
1878:       assertEquals(39, node1.getType());
1879:       assertFalse(node1.isInc());
1880:       assertFalse(node1.isCatch());
1881:       assertFalse(node1.isRegExp());
1882:       assertFalse(node1.hasMoreThanOneChild());
1883:       assertFalse(node1.isWith());
1884:       assertFalse(node1.isInstanceOf());
1885:       assertTrue(node1.hasChildren());
1886:       assertFalse(node1.isDelProp());
1887:       assertFalse(node1.isGetterDef());
1888:       assertFalse(node1.isIf());
1889:       assertFalse(node1.isEmpty());
1890:       assertFalse(node1.isNE());
1891:       assertFalse(node1.isFor());
1892:       assertTrue(node1.hasOneChild());
1893:       assertFalse(node1.isIn());
1894:       assertEquals(1, node1.getChildCount());
1895:       assertTrue(node1.isNumber());
1896:       assertFalse(node1.isTry());
1897:       assertFalse(node1.isDefaultCase());
1898:       assertFalse(node1.isString());
1899:       assertFalse(node1.isCase());
1900:       assertFalse(node1.isDebugger());
1901:       assertFalse(node1.isFunction());
1902:       assertFalse(node1.isArrayLit());
1903:       assertFalse(node1.isParamList());
1904:       assertFalse(node1.isSwitch());
1905:       assertFalse(node1.isBreak());
1906:       assertFalse(node1.isNull());
1907:       assertFalse(node1.isCall());
1908:       assertFalse(node1.isComma());
1909:       assertFalse(node1.isVar());
1910:       assertFalse(node1.isAdd());
1911:       assertFalse(node1.isGetProp());
1912:       assertFalse(node1.isNew());
1913:       assertFalse(node1.isWhile());
1914:       assertFalse(node1.isExprResult());
1915:       assertEquals(117, node1.getLineno());
1916:       assertFalse(node1.isTrue());
1917:       assertFalse(node1.isVoid());
1918:       assertFalse(node1.isName());
1919:       assertFalse(jSDocInfo0.hasType());
1920:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1921:       assertFalse(jSDocInfo0.isJavaDispatch());
1922:       assertFalse(jSDocInfo0.isNoSideEffects());
1923:       assertNull(jSDocInfo0.getDeprecationReason());
1924:       assertFalse(jSDocInfo0.isHidden());
1925:       assertFalse(jSDocInfo0.isJaggerModule());
1926:       assertFalse(jSDocInfo0.makesDicts());
1927:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1928:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1929:       assertFalse(jSDocInfo0.isDeprecated());
1930:       assertFalse(jSDocInfo0.isImplicitCast());
1931:       assertNull(jSDocInfo0.getBlockDescription());
1932:       assertFalse(jSDocInfo0.isNgInject());
1933:       assertFalse(jSDocInfo0.makesStructs());
1934:       assertFalse(jSDocInfo0.isInterface());
1935:       assertFalse(jSDocInfo0.hasFileOverview());
1936:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1937:       assertFalse(jSDocInfo0.isDefine());
1938:       assertFalse(jSDocInfo0.isIdGenerator());
1939:       assertFalse(jSDocInfo0.isNoCompile());
1940:       assertFalse(jSDocInfo0.hasReturnType());
1941:       assertFalse(jSDocInfo0.isNoAlias());
1942:       assertNull(jSDocInfo0.getVisibility());
1943:       assertFalse(jSDocInfo0.hasEnumParameterType());
1944:       assertNull(jSDocInfo0.getFileOverview());
1945:       assertFalse(jSDocInfo0.shouldPreserveTry());
1946:       assertEquals(0, jSDocInfo0.getParameterCount());
1947:       assertNull(jSDocInfo0.getDescription());
1948:       assertFalse(jSDocInfo0.hasThisType());
1949:       assertFalse(jSDocInfo0.isJaggerInject());
1950:       assertFalse(jSDocInfo0.isConstructor());
1951:       assertFalse(jSDocInfo0.isNoTypeCheck());
1952:       assertFalse(jSDocInfo0.hasModifies());
1953:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1954:       assertNull(jSDocInfo0.getMeaning());
1955:       assertFalse(jSDocInfo0.isConstant());
1956:       assertNull(jSDocInfo0.getLendsName());
1957:       assertFalse(jSDocInfo0.isExport());
1958:       assertFalse(jSDocInfo0.containsDeclaration());
1959:       assertFalse(jSDocInfo0.isNoShadow());
1960:       assertFalse(jSDocInfo0.isWizaction());
1961:       assertFalse(jSDocInfo0.isExpose());
1962:       assertFalse(jSDocInfo0.isOverride());
1963:       assertFalse(jSDocInfo0.isExterns());
1964:       assertNull(jSDocInfo0.getVersion());
1965:       assertFalse(jSDocInfo0.isStableIdGenerator());
1966:       assertFalse(jSDocInfo0.hasTypedefType());
1967:       assertFalse(jSDocInfo0.isDisposes());
1968:       assertNull(jSDocInfo0.getOriginalCommentString());
1969:       assertNull(jSDocInfo0.getLicense());
1970:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1971:       assertNull(jSDocInfo0.getReturnDescription());
1972:       assertFalse(jSDocInfo0.isJaggerProvide());
1973:       assertFalse(jSDocInfo0.hasBaseType());
1974:       assertFalse(node2.isGetterDef());
1975:       assertFalse(node2.isIf());
1976:       assertFalse(node2.isDelProp());
1977:       assertTrue(node2.hasOneChild());
1978:       assertFalse(node2.isEmpty());
1979:       assertFalse(node2.isNE());
1980:       assertFalse(node2.isFor());
1981:       assertEquals(1, node2.getChildCount());
1982:       assertTrue(node2.hasChildren());
1983:       assertFalse(node2.isVoid());
1984:       assertFalse(node2.isArrayLit());
1985:       assertFalse(node2.isDefaultCase());
1986:       assertEquals(117, node2.getLineno());
1987:       assertFalse(node2.isFunction());
1988:       assertFalse(node2.isTrue());
1989:       assertFalse(node2.isIn());
1990:       assertEquals(479289, node2.getSourcePosition());
1991:       assertFalse(node2.isInc());
1992:       assertFalse(node2.isSetterDef());
1993:       assertFalse(node2.isStringKey());
1994:       assertFalse(node2.isParamList());
1995:       assertFalse(node2.isThis());
1996:       assertFalse(node2.isCatch());
1997:       assertFalse(node2.isInstanceOf());
1998:       assertFalse(node2.isRegExp());
1999:       assertFalse(node2.isSwitch());
2000:       assertFalse(node2.isWith());
2001:       assertFalse(node2.isScript());
2002:       assertFalse(node2.isBlock());
2003:       assertEquals(39, node2.getType());
2004:       assertFalse(node2.isHook());
2005:       assertEquals(57, node2.getCharno());
2006:       assertFalse(node2.isTry());
2007:       assertFalse(node2.isCase());
2008:       assertFalse(node2.isDec());
2009:       assertFalse(node2.isTypeOf());
2010:       assertFalse(node2.isAssign());
2011:       assertFalse(node2.isLabel());
2012:       assertFalse(node2.isOr());
2013:       assertFalse(node2.isCast());
2014:       assertFalse(node2.hasMoreThanOneChild());
2015:       assertFalse(node2.isGetElem());
2016:       assertFalse(node2.isExprResult());
2017:       assertFalse(node2.isLabelName());
2018:       assertFalse(node2.isContinue());
2019:       assertFalse(node2.isVar());
2020:       assertFalse(node2.isAssignAdd());
2021:       assertFalse(node2.isAdd());
2022:       assertFalse(node2.isDo());
2023:       assertFalse(node2.isNew());
2024:       assertFalse(node2.isBreak());
2025:       assertFalse(node2.isNull());
2026:       assertFalse(node2.isThrow());
2027:       assertFalse(node2.isFalse());
2028:       assertFalse(node2.isComma());
2029:       assertFalse(node2.isAnd());
2030:       assertFalse(node2.isCall());
2031:       assertFalse(node2.isName());
2032:       assertFalse(node2.isString());
2033:       assertFalse(node2.isWhile());
2034:       assertFalse(node2.isObjectLit());
2035:       assertFalse(node2.isNot());
2036:       assertFalse(node2.isDebugger());
2037:       assertFalse(node2.isReturn());
2038:       assertFalse(node2.isGetProp());
2039:       assertTrue(node2.isNumber());
2040:       assertFalse(boolean4);
2041:       assertSame(node1, node2);
2042:       assertSame(node2, node1);
2043:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2044:       assertEquals(36, Node.QUOTED_PROP);
2045:       assertEquals(53, Node.INPUT_ID);
2046:       assertEquals(43, Node.IS_CONSTANT_NAME);
2047:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2048:       assertEquals(55, Node.INFERRED_FUNCTION);
2049:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2050:       assertEquals(29, Node.JSDOC_INFO_PROP);
2051:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2052:       assertEquals(39, Node.EMPTY_BLOCK);
2053:       assertEquals(47, Node.IS_DISPATCHER);
2054:       assertEquals(46, Node.IS_NAMESPACE);
2055:       assertEquals(40, Node.ORIGINALNAME_PROP);
2056:       assertEquals(30, Node.VAR_ARGS_NAME);
2057:       assertEquals(2, Node.POST_FLAG);
2058:       assertEquals(54, Node.SLASH_V);
2059:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2060:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2061:       assertEquals(49, Node.DIRECT_EVAL);
2062:       assertEquals(57, Node.LAST_PROP);
2063:       assertEquals(1, Node.DECR_FLAG);
2064:       assertEquals(57, Node.REFLECTED_OBJECT);
2065:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2066:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2067:       assertEquals(50, Node.FREE_CALL);
2068:       assertEquals(52, Node.LENGTH);
2069:       assertEquals(8, Node.FLAG_NO_THROWS);
2070:       assertEquals(37, Node.OPT_ARG_NAME);
2071:       assertEquals(48, Node.DIRECTIVES);
2072:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2073:       assertEquals(32, Node.INCRDECR_PROP);
2074:       assertEquals(56, Node.CHANGE_TIME);
2075:       assertEquals(12, Node.COLUMN_BITS);
2076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2077:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2078:       assertEquals(4095, Node.COLUMN_MASK);
2079:       assertEquals(53, Node.INPUT_ID);
2080:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2081:       assertEquals(43, Node.IS_CONSTANT_NAME);
2082:       assertEquals(4095, Node.COLUMN_MASK);
2083:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2084:       assertEquals(47, Node.IS_DISPATCHER);
2085:       assertEquals(2, Node.POST_FLAG);
2086:       assertEquals(48, Node.DIRECTIVES);
2087:       assertEquals(8, Node.FLAG_NO_THROWS);
2088:       assertEquals(39, Node.EMPTY_BLOCK);
2089:       assertEquals(56, Node.CHANGE_TIME);
2090:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2091:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2092:       assertEquals(37, Node.OPT_ARG_NAME);
2093:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2094:       assertEquals(55, Node.INFERRED_FUNCTION);
2095:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2096:       assertEquals(29, Node.JSDOC_INFO_PROP);
2097:       assertEquals(57, Node.REFLECTED_OBJECT);
2098:       assertEquals(36, Node.QUOTED_PROP);
2099:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2100:       assertEquals(54, Node.SLASH_V);
2101:       assertEquals(52, Node.LENGTH);
2102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2103:       assertEquals(57, Node.LAST_PROP);
2104:       assertEquals(49, Node.DIRECT_EVAL);
2105:       assertEquals(1, Node.DECR_FLAG);
2106:       assertEquals(40, Node.ORIGINALNAME_PROP);
2107:       assertEquals(12, Node.COLUMN_BITS);
2108:       assertEquals(30, Node.VAR_ARGS_NAME);
2109:       assertEquals(32, Node.INCRDECR_PROP);
2110:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2112:       assertEquals(46, Node.IS_NAMESPACE);
2113:       assertEquals(50, Node.FREE_CALL);
2114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2115:       assertFalse(node1.equals((Object)node0));
2116:       assertFalse(node2.equals((Object)node0));
2117:       assertTrue(boolean4 == boolean1);
2118:       assertTrue(boolean4 == boolean2);
2119:       assertTrue(boolean4 == boolean3);
2120:       assertTrue(boolean4 == boolean0);
2121:       
2122:       String string0 = node1.toString();
2123:       assertNotNull(string0);
2124:       assertFalse(node1.isDec());
2125:       assertFalse(node1.isGetElem());
2126:       assertFalse(node1.isCast());
2127:       assertFalse(node1.isAssign());
2128:       assertFalse(node1.isTypeOf());
2129:       assertFalse(node1.isOr());
2130:       assertFalse(node1.isLabel());
2131:       assertFalse(node1.isReturn());
2132:       assertFalse(node1.isDo());
2133:       assertFalse(node1.isAssignAdd());
2134:       assertFalse(node1.isScript());
2135:       assertFalse(node1.isObjectLit());
2136:       assertFalse(node1.isContinue());
2137:       assertFalse(node1.isNot());
2138:       assertFalse(node1.isAnd());
2139:       assertFalse(node1.isStringKey());
2140:       assertFalse(node1.isLabelName());
2141:       assertFalse(node1.isSetterDef());
2142:       assertFalse(node1.isThis());
2143:       assertFalse(node1.isFalse());
2144:       assertEquals(57, node1.getCharno());
2145:       assertFalse(node1.isHook());
2146:       assertFalse(node1.isBlock());
2147:       assertFalse(node1.isThrow());
2148:       assertEquals(479289, node1.getSourcePosition());
2149:       assertEquals(39, node1.getType());
2150:       assertFalse(node1.isInc());
2151:       assertFalse(node1.isCatch());
2152:       assertFalse(node1.isRegExp());
2153:       assertFalse(node1.hasMoreThanOneChild());
2154:       assertFalse(node1.isWith());
2155:       assertFalse(node1.isInstanceOf());
2156:       assertTrue(node1.hasChildren());
2157:       assertFalse(node1.isDelProp());
2158:       assertFalse(node1.isGetterDef());
2159:       assertFalse(node1.isIf());
2160:       assertFalse(node1.isEmpty());
2161:       assertFalse(node1.isNE());
2162:       assertFalse(node1.isFor());
2163:       assertTrue(node1.hasOneChild());
2164:       assertFalse(node1.isIn());
2165:       assertEquals(1, node1.getChildCount());
2166:       assertTrue(node1.isNumber());
2167:       assertFalse(node1.isTry());
2168:       assertFalse(node1.isDefaultCase());
2169:       assertFalse(node1.isString());
2170:       assertFalse(node1.isCase());
2171:       assertFalse(node1.isDebugger());
2172:       assertFalse(node1.isFunction());
2173:       assertFalse(node1.isArrayLit());
2174:       assertFalse(node1.isParamList());
2175:       assertFalse(node1.isSwitch());
2176:       assertFalse(node1.isBreak());
2177:       assertFalse(node1.isNull());
2178:       assertFalse(node1.isCall());
2179:       assertFalse(node1.isComma());
2180:       assertFalse(node1.isVar());
2181:       assertFalse(node1.isAdd());
2182:       assertFalse(node1.isGetProp());
2183:       assertFalse(node1.isNew());
2184:       assertFalse(node1.isWhile());
2185:       assertFalse(node1.isExprResult());
2186:       assertEquals(117, node1.getLineno());
2187:       assertFalse(node1.isTrue());
2188:       assertFalse(node1.isVoid());
2189:       assertFalse(node1.isName());
2190:       assertSame(node1, node2);
2191:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2192:       assertEquals(36, Node.QUOTED_PROP);
2193:       assertEquals(53, Node.INPUT_ID);
2194:       assertEquals(43, Node.IS_CONSTANT_NAME);
2195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2196:       assertEquals(55, Node.INFERRED_FUNCTION);
2197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2198:       assertEquals(29, Node.JSDOC_INFO_PROP);
2199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2200:       assertEquals(39, Node.EMPTY_BLOCK);
2201:       assertEquals(47, Node.IS_DISPATCHER);
2202:       assertEquals(46, Node.IS_NAMESPACE);
2203:       assertEquals(40, Node.ORIGINALNAME_PROP);
2204:       assertEquals(30, Node.VAR_ARGS_NAME);
2205:       assertEquals(2, Node.POST_FLAG);
2206:       assertEquals(54, Node.SLASH_V);
2207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2209:       assertEquals(49, Node.DIRECT_EVAL);
2210:       assertEquals(57, Node.LAST_PROP);
2211:       assertEquals(1, Node.DECR_FLAG);
2212:       assertEquals(57, Node.REFLECTED_OBJECT);
2213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2214:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2215:       assertEquals(50, Node.FREE_CALL);
2216:       assertEquals(52, Node.LENGTH);
2217:       assertEquals(8, Node.FLAG_NO_THROWS);
2218:       assertEquals(37, Node.OPT_ARG_NAME);
2219:       assertEquals(48, Node.DIRECTIVES);
2220:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2221:       assertEquals(32, Node.INCRDECR_PROP);
2222:       assertEquals(56, Node.CHANGE_TIME);
2223:       assertEquals(12, Node.COLUMN_BITS);
2224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2226:       assertEquals(4095, Node.COLUMN_MASK);
2227:       assertFalse(node1.equals((Object)node0));
2228:   }
2229: }
RegularFileObject[/tmp/EvoSuite_389_1628160749943/com/google/javascript/rhino/Node_389_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:52:30 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_389_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_389_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_389_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
268:       "com.google.javascript.rhino.jstype.JSType$1",
269:       "com.google.javascript.rhino.jstype.JSType",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Preconditions",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.javascript.rhino.SimpleErrorReporter",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.base.Objects",
352:       "com.google.common.collect.Sets",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.TemplatizedType",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.Iterators$11",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.jstype.NamespaceType",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 10:52:30.554 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = Node.extractCharno(359);
assertEquals(359, int0);

Node node0 = new Node(359, 359, 8233);
assertNotNull(node0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertEquals(1474559, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertEquals(359, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertEquals(359, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

boolean boolean0 = node0.isUnscopedQualifiedName();
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertEquals(1474559, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertEquals(359, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertEquals(359, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(boolean0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

Node node1 = Node.newNumber((-168.351), 117, 57);
assertNotNull(node1);
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));

byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte)65;
byteArray0[1] = (byte) (-52);
byteArray0[2] = (byte)18;
byteArray0[3] = (byte)48;
byteArray0[4] = (byte)43;
byteArray0[5] = (byte) (-108);
byteArray0[6] = (byte)0;
byteArray0[7] = (byte)90;
byteArray0[8] = (byte)66;
boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean1);
assertEquals(9, byteArray0.length);
assertTrue(boolean1 == boolean0);
assertArrayEquals(new byte[] {(byte)65, (byte) (-52), (byte)18, (byte)48, (byte)43, (byte) (-108), (byte)0, (byte)90, (byte)66}, byteArray0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(iterable0.contains(node0));
assertFalse(node1.equals((Object)node0));

node1.addChildToBack(node0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertEquals(1474559, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertEquals(359, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertEquals(359, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

node1.removeProp((-5801));
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));

int int1 = node0.getIndexOfChild(node1);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertEquals(1474559, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertEquals(359, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertEquals(359, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertEquals((-1), int1);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(int1 == int0);
assertFalse(node1.equals((Object)node0));

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertNotNull(jSDocInfo0);
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.hasFileOverview());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());

Node node2 = node1.setJSDocInfo(jSDocInfo0);
assertNotNull(node2);
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.hasFileOverview());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertEquals(117, node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertEquals(479289, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isHook());
assertEquals(57, node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

boolean boolean2 = node2.isFalse();
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.hasFileOverview());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertEquals(117, node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertEquals(479289, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isHook());
assertEquals(57, node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(boolean2);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

boolean boolean3 = node2.isVoid();
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.hasFileOverview());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertEquals(117, node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertEquals(479289, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isHook());
assertEquals(57, node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(boolean3);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);

boolean boolean4 = node2.isAssignAdd();
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.hasFileOverview());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasModifies());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertEquals(117, node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertEquals(479289, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isHook());
assertEquals(57, node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(boolean4);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);

String string0 = node1.toString();
assertNotNull(string0);
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(57, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertEquals(479289, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertEquals(117, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertSame(node1, node2);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));


[MASTER] 10:52:35.117 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_415_1628160754622/com/google/javascript/rhino/Node_415_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_415_1628160754622/com/google/javascript/rhino/Node_415_tmp__ESTest_scaffolding.java]]
[MASTER] 10:52:35.117 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:35.117 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:52:35.118 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1934
[MASTER] 10:52:35.119 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_415_1628160754622/com/google/javascript/rhino/Node_415_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:52:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_415_tmp__ESTest extends Node_415_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("d");
25:       assertNotNull(node0);
26:       assertFalse(node0.isNot());
27:       assertFalse(node0.isObjectLit());
28:       assertFalse(node0.hasOneChild());
29:       assertFalse(node0.isScript());
30:       assertFalse(node0.isAssignAdd());
31:       assertEquals((-1), node0.getSourcePosition());
32:       assertFalse(node0.isNumber());
33:       assertFalse(node0.isLabel());
34:       assertFalse(node0.isLabelName());
35:       assertFalse(node0.isAnd());
36:       assertFalse(node0.isFalse());
37:       assertFalse(node0.isContinue());
38:       assertFalse(node0.isCast());
39:       assertFalse(node0.isAdd());
40:       assertFalse(node0.isNew());
41:       assertFalse(node0.isVar());
42:       assertFalse(node0.isDo());
43:       assertFalse(node0.isWhile());
44:       assertFalse(node0.isGetProp());
45:       assertFalse(node0.isOr());
46:       assertFalse(node0.isTypeOf());
47:       assertFalse(node0.isNull());
48:       assertFalse(node0.isDec());
49:       assertFalse(node0.isReturn());
50:       assertFalse(node0.isComma());
51:       assertFalse(node0.hasChildren());
52:       assertFalse(node0.isGetElem());
53:       assertFalse(node0.isName());
54:       assertFalse(node0.isAssign());
55:       assertFalse(node0.isDelProp());
56:       assertFalse(node0.isExprResult());
57:       assertFalse(node0.isCall());
58:       assertFalse(node0.isBreak());
59:       assertFalse(node0.isVoid());
60:       assertFalse(node0.isTry());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isDebugger());
64:       assertFalse(node0.isTrue());
65:       assertEquals(40, node0.getType());
66:       assertFalse(node0.isFor());
67:       assertFalse(node0.isEmpty());
68:       assertFalse(node0.isGetterDef());
69:       assertFalse(node0.isDefaultCase());
70:       assertFalse(node0.isParamList());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isStringKey());
73:       assertFalse(node0.isArrayLit());
74:       assertTrue(node0.isString());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isSwitch());
77:       assertFalse(node0.isHook());
78:       assertEquals((-1), node0.getCharno());
79:       assertFalse(node0.isCase());
80:       assertFalse(node0.isThrow());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isSetterDef());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isThis());
86:       assertFalse(node0.isIf());
87:       assertFalse(node0.hasMoreThanOneChild());
88:       assertFalse(node0.isWith());
89:       assertFalse(node0.isCatch());
90:       assertFalse(node0.isInstanceOf());
91:       assertEquals((-1), node0.getLineno());
92:       assertEquals(55, Node.INFERRED_FUNCTION);
93:       assertEquals(4095, Node.COLUMN_MASK);
94:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
95:       assertEquals(48, Node.DIRECTIVES);
96:       assertEquals(39, Node.EMPTY_BLOCK);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
100:       assertEquals(8, Node.FLAG_NO_THROWS);
101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
102:       assertEquals(50, Node.FREE_CALL);
103:       assertEquals(52, Node.LENGTH);
104:       assertEquals(53, Node.INPUT_ID);
105:       assertEquals(29, Node.JSDOC_INFO_PROP);
106:       assertEquals(40, Node.ORIGINALNAME_PROP);
107:       assertEquals(2, Node.POST_FLAG);
108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(30, Node.VAR_ARGS_NAME);
111:       assertEquals(47, Node.IS_DISPATCHER);
112:       assertEquals(51, Node.STATIC_SOURCE_FILE);
113:       assertEquals(12, Node.COLUMN_BITS);
114:       assertEquals(46, Node.IS_NAMESPACE);
115:       assertEquals(32, Node.INCRDECR_PROP);
116:       assertEquals(49, Node.DIRECT_EVAL);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
120:       assertEquals(15, Node.NO_SIDE_EFFECTS);
121:       assertEquals(56, Node.CHANGE_TIME);
122:       assertEquals(54, Node.SLASH_V);
123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
124:       assertEquals(57, Node.REFLECTED_OBJECT);
125:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
128:       
129:       Node node1 = new Node(31);
130:       assertNotNull(node1);
131:       assertFalse(node1.isName());
132:       assertFalse(node1.isStringKey());
133:       assertFalse(node1.isNull());
134:       assertFalse(node1.isParamList());
135:       assertFalse(node1.isVar());
136:       assertFalse(node1.isBlock());
137:       assertEquals(31, node1.getType());
138:       assertEquals(0, node1.getChildCount());
139:       assertFalse(node1.isCall());
140:       assertFalse(node1.isCatch());
141:       assertFalse(node1.isReturn());
142:       assertFalse(node1.isWhile());
143:       assertFalse(node1.isDebugger());
144:       assertFalse(node1.isTry());
145:       assertFalse(node1.isNumber());
146:       assertEquals((-1), node1.getSourcePosition());
147:       assertFalse(node1.isIf());
148:       assertFalse(node1.isNE());
149:       assertFalse(node1.isFor());
150:       assertFalse(node1.isFunction());
151:       assertEquals((-1), node1.getLineno());
152:       assertFalse(node1.isRegExp());
153:       assertFalse(node1.hasMoreThanOneChild());
154:       assertFalse(node1.isCast());
155:       assertFalse(node1.isContinue());
156:       assertTrue(node1.isDelProp());
157:       assertFalse(node1.isIn());
158:       assertFalse(node1.isInc());
159:       assertFalse(node1.isSetterDef());
160:       assertFalse(node1.isFalse());
161:       assertFalse(node1.isHook());
162:       assertFalse(node1.isThis());
163:       assertFalse(node1.isThrow());
164:       assertFalse(node1.isComma());
165:       assertFalse(node1.isInstanceOf());
166:       assertFalse(node1.isBreak());
167:       assertFalse(node1.isCase());
168:       assertFalse(node1.isAnd());
169:       assertFalse(node1.isWith());
170:       assertFalse(node1.isObjectLit());
171:       assertFalse(node1.isNot());
172:       assertFalse(node1.isSwitch());
173:       assertEquals((-1), node1.getCharno());
174:       assertFalse(node1.isGetProp());
175:       assertFalse(node1.hasOneChild());
176:       assertFalse(node1.isString());
177:       assertFalse(node1.isScript());
178:       assertFalse(node1.isGetElem());
179:       assertFalse(node1.isAssign());
180:       assertFalse(node1.isGetterDef());
181:       assertFalse(node1.isLabelName());
182:       assertFalse(node1.isDec());
183:       assertFalse(node1.hasChildren());
184:       assertFalse(node1.isLabel());
185:       assertFalse(node1.isVoid());
186:       assertFalse(node1.isTypeOf());
187:       assertFalse(node1.isArrayLit());
188:       assertFalse(node1.isExprResult());
189:       assertFalse(node1.isDo());
190:       assertFalse(node1.isDefaultCase());
191:       assertFalse(node1.isTrue());
192:       assertFalse(node1.isNew());
193:       assertFalse(node1.isAssignAdd());
194:       assertFalse(node1.isOr());
195:       assertFalse(node1.isEmpty());
196:       assertFalse(node1.isAdd());
197:       assertEquals(15, Node.NO_SIDE_EFFECTS);
198:       assertEquals(57, Node.LAST_PROP);
199:       assertEquals(30, Node.VAR_ARGS_NAME);
200:       assertEquals(49, Node.DIRECT_EVAL);
201:       assertEquals(52, Node.LENGTH);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(1, Node.DECR_FLAG);
204:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(2, Node.POST_FLAG);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
211:       assertEquals(40, Node.ORIGINALNAME_PROP);
212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
213:       assertEquals(46, Node.IS_NAMESPACE);
214:       assertEquals(54, Node.SLASH_V);
215:       assertEquals(43, Node.IS_CONSTANT_NAME);
216:       assertEquals(36, Node.QUOTED_PROP);
217:       assertEquals(53, Node.INPUT_ID);
218:       assertEquals(55, Node.INFERRED_FUNCTION);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
221:       assertEquals(4095, Node.COLUMN_MASK);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(56, Node.CHANGE_TIME);
224:       assertEquals(37, Node.OPT_ARG_NAME);
225:       assertEquals(8, Node.FLAG_NO_THROWS);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
228:       assertEquals(39, Node.EMPTY_BLOCK);
229:       assertEquals(29, Node.JSDOC_INFO_PROP);
230:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
231:       assertEquals(57, Node.REFLECTED_OBJECT);
232:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
233:       assertFalse(node1.equals((Object)node0));
234:       
235:       boolean boolean0 = node0.isEquivalentTo(node1, false, false, false);
236:       assertFalse(node0.isNot());
237:       assertFalse(node0.isObjectLit());
238:       assertFalse(node0.hasOneChild());
239:       assertFalse(node0.isScript());
240:       assertFalse(node0.isAssignAdd());
241:       assertEquals((-1), node0.getSourcePosition());
242:       assertFalse(node0.isNumber());
243:       assertFalse(node0.isLabel());
244:       assertFalse(node0.isLabelName());
245:       assertFalse(node0.isAnd());
246:       assertFalse(node0.isFalse());
247:       assertFalse(node0.isContinue());
248:       assertFalse(node0.isCast());
249:       assertFalse(node0.isAdd());
250:       assertFalse(node0.isNew());
251:       assertFalse(node0.isVar());
252:       assertFalse(node0.isDo());
253:       assertFalse(node0.isWhile());
254:       assertFalse(node0.isGetProp());
255:       assertFalse(node0.isOr());
256:       assertFalse(node0.isTypeOf());
257:       assertFalse(node0.isNull());
258:       assertFalse(node0.isDec());
259:       assertFalse(node0.isReturn());
260:       assertFalse(node0.isComma());
261:       assertFalse(node0.hasChildren());
262:       assertFalse(node0.isGetElem());
263:       assertFalse(node0.isName());
264:       assertFalse(node0.isAssign());
265:       assertFalse(node0.isDelProp());
266:       assertFalse(node0.isExprResult());
267:       assertFalse(node0.isCall());
268:       assertFalse(node0.isBreak());
269:       assertFalse(node0.isVoid());
270:       assertFalse(node0.isTry());
271:       assertFalse(node0.isFunction());
272:       assertFalse(node0.isRegExp());
273:       assertFalse(node0.isDebugger());
274:       assertFalse(node0.isTrue());
275:       assertEquals(40, node0.getType());
276:       assertFalse(node0.isFor());
277:       assertFalse(node0.isEmpty());
278:       assertFalse(node0.isGetterDef());
279:       assertFalse(node0.isDefaultCase());
280:       assertFalse(node0.isParamList());
281:       assertEquals(0, node0.getChildCount());
282:       assertFalse(node0.isStringKey());
283:       assertFalse(node0.isArrayLit());
284:       assertTrue(node0.isString());
285:       assertFalse(node0.isBlock());
286:       assertFalse(node0.isSwitch());
287:       assertFalse(node0.isHook());
288:       assertEquals((-1), node0.getCharno());
289:       assertFalse(node0.isCase());
290:       assertFalse(node0.isThrow());
291:       assertFalse(node0.isInc());
292:       assertFalse(node0.isSetterDef());
293:       assertFalse(node0.isIn());
294:       assertFalse(node0.isNE());
295:       assertFalse(node0.isThis());
296:       assertFalse(node0.isIf());
297:       assertFalse(node0.hasMoreThanOneChild());
298:       assertFalse(node0.isWith());
299:       assertFalse(node0.isCatch());
300:       assertFalse(node0.isInstanceOf());
301:       assertEquals((-1), node0.getLineno());
302:       assertFalse(node1.isName());
303:       assertFalse(node1.isStringKey());
304:       assertFalse(node1.isNull());
305:       assertFalse(node1.isParamList());
306:       assertFalse(node1.isVar());
307:       assertFalse(node1.isBlock());
308:       assertEquals(31, node1.getType());
309:       assertEquals(0, node1.getChildCount());
310:       assertFalse(node1.isCall());
311:       assertFalse(node1.isCatch());
312:       assertFalse(node1.isReturn());
313:       assertFalse(node1.isWhile());
314:       assertFalse(node1.isDebugger());
315:       assertFalse(node1.isTry());
316:       assertFalse(node1.isNumber());
317:       assertEquals((-1), node1.getSourcePosition());
318:       assertFalse(node1.isIf());
319:       assertFalse(node1.isNE());
320:       assertFalse(node1.isFor());
321:       assertFalse(node1.isFunction());
322:       assertEquals((-1), node1.getLineno());
323:       assertFalse(node1.isRegExp());
324:       assertFalse(node1.hasMoreThanOneChild());
325:       assertFalse(node1.isCast());
326:       assertFalse(node1.isContinue());
327:       assertTrue(node1.isDelProp());
328:       assertFalse(node1.isIn());
329:       assertFalse(node1.isInc());
330:       assertFalse(node1.isSetterDef());
331:       assertFalse(node1.isFalse());
332:       assertFalse(node1.isHook());
333:       assertFalse(node1.isThis());
334:       assertFalse(node1.isThrow());
335:       assertFalse(node1.isComma());
336:       assertFalse(node1.isInstanceOf());
337:       assertFalse(node1.isBreak());
338:       assertFalse(node1.isCase());
339:       assertFalse(node1.isAnd());
340:       assertFalse(node1.isWith());
341:       assertFalse(node1.isObjectLit());
342:       assertFalse(node1.isNot());
343:       assertFalse(node1.isSwitch());
344:       assertEquals((-1), node1.getCharno());
345:       assertFalse(node1.isGetProp());
346:       assertFalse(node1.hasOneChild());
347:       assertFalse(node1.isString());
348:       assertFalse(node1.isScript());
349:       assertFalse(node1.isGetElem());
350:       assertFalse(node1.isAssign());
351:       assertFalse(node1.isGetterDef());
352:       assertFalse(node1.isLabelName());
353:       assertFalse(node1.isDec());
354:       assertFalse(node1.hasChildren());
355:       assertFalse(node1.isLabel());
356:       assertFalse(node1.isVoid());
357:       assertFalse(node1.isTypeOf());
358:       assertFalse(node1.isArrayLit());
359:       assertFalse(node1.isExprResult());
360:       assertFalse(node1.isDo());
361:       assertFalse(node1.isDefaultCase());
362:       assertFalse(node1.isTrue());
363:       assertFalse(node1.isNew());
364:       assertFalse(node1.isAssignAdd());
365:       assertFalse(node1.isOr());
366:       assertFalse(node1.isEmpty());
367:       assertFalse(node1.isAdd());
368:       assertFalse(boolean0);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(4095, Node.COLUMN_MASK);
371:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
372:       assertEquals(48, Node.DIRECTIVES);
373:       assertEquals(39, Node.EMPTY_BLOCK);
374:       assertEquals(43, Node.IS_CONSTANT_NAME);
375:       assertEquals(36, Node.QUOTED_PROP);
376:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
377:       assertEquals(8, Node.FLAG_NO_THROWS);
378:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
379:       assertEquals(50, Node.FREE_CALL);
380:       assertEquals(52, Node.LENGTH);
381:       assertEquals(53, Node.INPUT_ID);
382:       assertEquals(29, Node.JSDOC_INFO_PROP);
383:       assertEquals(40, Node.ORIGINALNAME_PROP);
384:       assertEquals(2, Node.POST_FLAG);
385:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
386:       assertEquals(57, Node.LAST_PROP);
387:       assertEquals(30, Node.VAR_ARGS_NAME);
388:       assertEquals(47, Node.IS_DISPATCHER);
389:       assertEquals(51, Node.STATIC_SOURCE_FILE);
390:       assertEquals(12, Node.COLUMN_BITS);
391:       assertEquals(46, Node.IS_NAMESPACE);
392:       assertEquals(32, Node.INCRDECR_PROP);
393:       assertEquals(49, Node.DIRECT_EVAL);
394:       assertEquals(1, Node.DECR_FLAG);
395:       assertEquals(37, Node.OPT_ARG_NAME);
396:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
397:       assertEquals(15, Node.NO_SIDE_EFFECTS);
398:       assertEquals(56, Node.CHANGE_TIME);
399:       assertEquals(54, Node.SLASH_V);
400:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
401:       assertEquals(57, Node.REFLECTED_OBJECT);
402:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
403:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
404:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
406:       assertEquals(57, Node.LAST_PROP);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(49, Node.DIRECT_EVAL);
409:       assertEquals(52, Node.LENGTH);
410:       assertEquals(32, Node.INCRDECR_PROP);
411:       assertEquals(1, Node.DECR_FLAG);
412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
413:       assertEquals(12, Node.COLUMN_BITS);
414:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
415:       assertEquals(47, Node.IS_DISPATCHER);
416:       assertEquals(2, Node.POST_FLAG);
417:       assertEquals(50, Node.FREE_CALL);
418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
419:       assertEquals(40, Node.ORIGINALNAME_PROP);
420:       assertEquals(51, Node.STATIC_SOURCE_FILE);
421:       assertEquals(46, Node.IS_NAMESPACE);
422:       assertEquals(54, Node.SLASH_V);
423:       assertEquals(43, Node.IS_CONSTANT_NAME);
424:       assertEquals(36, Node.QUOTED_PROP);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(55, Node.INFERRED_FUNCTION);
427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
428:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
429:       assertEquals(4095, Node.COLUMN_MASK);
430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
431:       assertEquals(56, Node.CHANGE_TIME);
432:       assertEquals(37, Node.OPT_ARG_NAME);
433:       assertEquals(8, Node.FLAG_NO_THROWS);
434:       assertEquals(48, Node.DIRECTIVES);
435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
436:       assertEquals(39, Node.EMPTY_BLOCK);
437:       assertEquals(29, Node.JSDOC_INFO_PROP);
438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
439:       assertEquals(57, Node.REFLECTED_OBJECT);
440:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
441:       assertFalse(node0.equals((Object)node1));
442:       assertFalse(node1.equals((Object)node0));
443:       
444:       InputId inputId0 = node0.getInputId();
445:       assertNull(inputId0);
446:       assertFalse(node0.isNot());
447:       assertFalse(node0.isObjectLit());
448:       assertFalse(node0.hasOneChild());
449:       assertFalse(node0.isScript());
450:       assertFalse(node0.isAssignAdd());
451:       assertEquals((-1), node0.getSourcePosition());
452:       assertFalse(node0.isNumber());
453:       assertFalse(node0.isLabel());
454:       assertFalse(node0.isLabelName());
455:       assertFalse(node0.isAnd());
456:       assertFalse(node0.isFalse());
457:       assertFalse(node0.isContinue());
458:       assertFalse(node0.isCast());
459:       assertFalse(node0.isAdd());
460:       assertFalse(node0.isNew());
461:       assertFalse(node0.isVar());
462:       assertFalse(node0.isDo());
463:       assertFalse(node0.isWhile());
464:       assertFalse(node0.isGetProp());
465:       assertFalse(node0.isOr());
466:       assertFalse(node0.isTypeOf());
467:       assertFalse(node0.isNull());
468:       assertFalse(node0.isDec());
469:       assertFalse(node0.isReturn());
470:       assertFalse(node0.isComma());
471:       assertFalse(node0.hasChildren());
472:       assertFalse(node0.isGetElem());
473:       assertFalse(node0.isName());
474:       assertFalse(node0.isAssign());
475:       assertFalse(node0.isDelProp());
476:       assertFalse(node0.isExprResult());
477:       assertFalse(node0.isCall());
478:       assertFalse(node0.isBreak());
479:       assertFalse(node0.isVoid());
480:       assertFalse(node0.isTry());
481:       assertFalse(node0.isFunction());
482:       assertFalse(node0.isRegExp());
483:       assertFalse(node0.isDebugger());
484:       assertFalse(node0.isTrue());
485:       assertEquals(40, node0.getType());
486:       assertFalse(node0.isFor());
487:       assertFalse(node0.isEmpty());
488:       assertFalse(node0.isGetterDef());
489:       assertFalse(node0.isDefaultCase());
490:       assertFalse(node0.isParamList());
491:       assertEquals(0, node0.getChildCount());
492:       assertFalse(node0.isStringKey());
493:       assertFalse(node0.isArrayLit());
494:       assertTrue(node0.isString());
495:       assertFalse(node0.isBlock());
496:       assertFalse(node0.isSwitch());
497:       assertFalse(node0.isHook());
498:       assertEquals((-1), node0.getCharno());
499:       assertFalse(node0.isCase());
500:       assertFalse(node0.isThrow());
501:       assertFalse(node0.isInc());
502:       assertFalse(node0.isSetterDef());
503:       assertFalse(node0.isIn());
504:       assertFalse(node0.isNE());
505:       assertFalse(node0.isThis());
506:       assertFalse(node0.isIf());
507:       assertFalse(node0.hasMoreThanOneChild());
508:       assertFalse(node0.isWith());
509:       assertFalse(node0.isCatch());
510:       assertFalse(node0.isInstanceOf());
511:       assertEquals((-1), node0.getLineno());
512:       assertEquals(55, Node.INFERRED_FUNCTION);
513:       assertEquals(4095, Node.COLUMN_MASK);
514:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
515:       assertEquals(48, Node.DIRECTIVES);
516:       assertEquals(39, Node.EMPTY_BLOCK);
517:       assertEquals(43, Node.IS_CONSTANT_NAME);
518:       assertEquals(36, Node.QUOTED_PROP);
519:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
520:       assertEquals(8, Node.FLAG_NO_THROWS);
521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
522:       assertEquals(50, Node.FREE_CALL);
523:       assertEquals(52, Node.LENGTH);
524:       assertEquals(53, Node.INPUT_ID);
525:       assertEquals(29, Node.JSDOC_INFO_PROP);
526:       assertEquals(40, Node.ORIGINALNAME_PROP);
527:       assertEquals(2, Node.POST_FLAG);
528:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
529:       assertEquals(57, Node.LAST_PROP);
530:       assertEquals(30, Node.VAR_ARGS_NAME);
531:       assertEquals(47, Node.IS_DISPATCHER);
532:       assertEquals(51, Node.STATIC_SOURCE_FILE);
533:       assertEquals(12, Node.COLUMN_BITS);
534:       assertEquals(46, Node.IS_NAMESPACE);
535:       assertEquals(32, Node.INCRDECR_PROP);
536:       assertEquals(49, Node.DIRECT_EVAL);
537:       assertEquals(1, Node.DECR_FLAG);
538:       assertEquals(37, Node.OPT_ARG_NAME);
539:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
541:       assertEquals(56, Node.CHANGE_TIME);
542:       assertEquals(54, Node.SLASH_V);
543:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
544:       assertEquals(57, Node.REFLECTED_OBJECT);
545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
546:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
548:       assertFalse(node0.equals((Object)node1));
549:       
550:       Node node2 = new Node((-900), node0);
551:       assertNotNull(node2);
552:       assertFalse(node0.isNot());
553:       assertFalse(node0.isObjectLit());
554:       assertFalse(node0.hasOneChild());
555:       assertFalse(node0.isScript());
556:       assertFalse(node0.isAssignAdd());
557:       assertEquals((-1), node0.getSourcePosition());
558:       assertFalse(node0.isNumber());
559:       assertFalse(node0.isLabel());
560:       assertFalse(node0.isLabelName());
561:       assertFalse(node0.isAnd());
562:       assertFalse(node0.isFalse());
563:       assertFalse(node0.isContinue());
564:       assertFalse(node0.isCast());
565:       assertFalse(node0.isAdd());
566:       assertFalse(node0.isNew());
567:       assertFalse(node0.isVar());
568:       assertFalse(node0.isDo());
569:       assertFalse(node0.isWhile());
570:       assertFalse(node0.isGetProp());
571:       assertFalse(node0.isOr());
572:       assertFalse(node0.isTypeOf());
573:       assertFalse(node0.isNull());
574:       assertFalse(node0.isDec());
575:       assertFalse(node0.isReturn());
576:       assertFalse(node0.isComma());
577:       assertFalse(node0.hasChildren());
578:       assertFalse(node0.isGetElem());
579:       assertFalse(node0.isName());
580:       assertFalse(node0.isAssign());
581:       assertFalse(node0.isDelProp());
582:       assertFalse(node0.isExprResult());
583:       assertFalse(node0.isCall());
584:       assertFalse(node0.isBreak());
585:       assertFalse(node0.isVoid());
586:       assertFalse(node0.isTry());
587:       assertFalse(node0.isFunction());
588:       assertFalse(node0.isRegExp());
589:       assertFalse(node0.isDebugger());
590:       assertFalse(node0.isTrue());
591:       assertEquals(40, node0.getType());
592:       assertFalse(node0.isFor());
593:       assertFalse(node0.isEmpty());
594:       assertFalse(node0.isGetterDef());
595:       assertFalse(node0.isDefaultCase());
596:       assertFalse(node0.isParamList());
597:       assertEquals(0, node0.getChildCount());
598:       assertFalse(node0.isStringKey());
599:       assertFalse(node0.isArrayLit());
600:       assertTrue(node0.isString());
601:       assertFalse(node0.isBlock());
602:       assertFalse(node0.isSwitch());
603:       assertFalse(node0.isHook());
604:       assertEquals((-1), node0.getCharno());
605:       assertFalse(node0.isCase());
606:       assertFalse(node0.isThrow());
607:       assertFalse(node0.isInc());
608:       assertFalse(node0.isSetterDef());
609:       assertFalse(node0.isIn());
610:       assertFalse(node0.isNE());
611:       assertFalse(node0.isThis());
612:       assertFalse(node0.isIf());
613:       assertFalse(node0.hasMoreThanOneChild());
614:       assertFalse(node0.isWith());
615:       assertFalse(node0.isCatch());
616:       assertFalse(node0.isInstanceOf());
617:       assertEquals((-1), node0.getLineno());
618:       assertFalse(node2.isCase());
619:       assertFalse(node2.isString());
620:       assertFalse(node2.isIn());
621:       assertFalse(node2.isInc());
622:       assertEquals(1, node2.getChildCount());
623:       assertFalse(node2.isHook());
624:       assertFalse(node2.isFalse());
625:       assertFalse(node2.isThrow());
626:       assertFalse(node2.isArrayLit());
627:       assertFalse(node2.isGetterDef());
628:       assertEquals((-1), node2.getCharno());
629:       assertFalse(node2.isDebugger());
630:       assertFalse(node2.isSwitch());
631:       assertFalse(node2.isAnd());
632:       assertFalse(node2.isInstanceOf());
633:       assertFalse(node2.isRegExp());
634:       assertFalse(node2.isScript());
635:       assertFalse(node2.isFunction());
636:       assertFalse(node2.isCatch());
637:       assertFalse(node2.isWith());
638:       assertFalse(node2.isTry());
639:       assertFalse(node2.isSetterDef());
640:       assertFalse(node2.isThis());
641:       assertFalse(node2.isFor());
642:       assertTrue(node2.hasChildren());
643:       assertEquals((-1), node2.getLineno());
644:       assertFalse(node2.isNE());
645:       assertFalse(node2.isIf());
646:       assertFalse(node2.isDo());
647:       assertFalse(node2.hasMoreThanOneChild());
648:       assertFalse(node2.isContinue());
649:       assertFalse(node2.isNew());
650:       assertFalse(node2.isBlock());
651:       assertFalse(node2.isAdd());
652:       assertFalse(node2.isReturn());
653:       assertFalse(node2.isLabel());
654:       assertFalse(node2.isVar());
655:       assertFalse(node2.isWhile());
656:       assertFalse(node2.isAssignAdd());
657:       assertFalse(node2.isStringKey());
658:       assertFalse(node2.isLabelName());
659:       assertEquals((-1), node2.getSourcePosition());
660:       assertFalse(node2.isNumber());
661:       assertFalse(node2.isCast());
662:       assertFalse(node2.isParamList());
663:       assertFalse(node2.isNot());
664:       assertFalse(node2.isObjectLit());
665:       assertFalse(node2.isComma());
666:       assertFalse(node2.isGetProp());
667:       assertFalse(node2.isDefaultCase());
668:       assertFalse(node2.isGetElem());
669:       assertFalse(node2.isName());
670:       assertFalse(node2.isEmpty());
671:       assertFalse(node2.isAssign());
672:       assertFalse(node2.isCall());
673:       assertTrue(node2.hasOneChild());
674:       assertFalse(node2.isBreak());
675:       assertFalse(node2.isDec());
676:       assertFalse(node2.isTypeOf());
677:       assertFalse(node2.isVoid());
678:       assertFalse(node2.isOr());
679:       assertFalse(node2.isExprResult());
680:       assertFalse(node2.isTrue());
681:       assertFalse(node2.isDelProp());
682:       assertEquals((-900), node2.getType());
683:       assertFalse(node2.isNull());
684:       assertEquals(55, Node.INFERRED_FUNCTION);
685:       assertEquals(4095, Node.COLUMN_MASK);
686:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
687:       assertEquals(48, Node.DIRECTIVES);
688:       assertEquals(39, Node.EMPTY_BLOCK);
689:       assertEquals(43, Node.IS_CONSTANT_NAME);
690:       assertEquals(36, Node.QUOTED_PROP);
691:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
692:       assertEquals(8, Node.FLAG_NO_THROWS);
693:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
694:       assertEquals(50, Node.FREE_CALL);
695:       assertEquals(52, Node.LENGTH);
696:       assertEquals(53, Node.INPUT_ID);
697:       assertEquals(29, Node.JSDOC_INFO_PROP);
698:       assertEquals(40, Node.ORIGINALNAME_PROP);
699:       assertEquals(2, Node.POST_FLAG);
700:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
701:       assertEquals(57, Node.LAST_PROP);
702:       assertEquals(30, Node.VAR_ARGS_NAME);
703:       assertEquals(47, Node.IS_DISPATCHER);
704:       assertEquals(51, Node.STATIC_SOURCE_FILE);
705:       assertEquals(12, Node.COLUMN_BITS);
706:       assertEquals(46, Node.IS_NAMESPACE);
707:       assertEquals(32, Node.INCRDECR_PROP);
708:       assertEquals(49, Node.DIRECT_EVAL);
709:       assertEquals(1, Node.DECR_FLAG);
710:       assertEquals(37, Node.OPT_ARG_NAME);
711:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
712:       assertEquals(15, Node.NO_SIDE_EFFECTS);
713:       assertEquals(56, Node.CHANGE_TIME);
714:       assertEquals(54, Node.SLASH_V);
715:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
716:       assertEquals(57, Node.REFLECTED_OBJECT);
717:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
718:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
719:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
720:       assertEquals(56, Node.CHANGE_TIME);
721:       assertEquals(47, Node.IS_DISPATCHER);
722:       assertEquals(2, Node.POST_FLAG);
723:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
724:       assertEquals(37, Node.OPT_ARG_NAME);
725:       assertEquals(51, Node.STATIC_SOURCE_FILE);
726:       assertEquals(32, Node.INCRDECR_PROP);
727:       assertEquals(46, Node.IS_NAMESPACE);
728:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
729:       assertEquals(29, Node.JSDOC_INFO_PROP);
730:       assertEquals(53, Node.INPUT_ID);
731:       assertEquals(43, Node.IS_CONSTANT_NAME);
732:       assertEquals(15, Node.NO_SIDE_EFFECTS);
733:       assertEquals(30, Node.VAR_ARGS_NAME);
734:       assertEquals(54, Node.SLASH_V);
735:       assertEquals(57, Node.LAST_PROP);
736:       assertEquals(40, Node.ORIGINALNAME_PROP);
737:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
738:       assertEquals(39, Node.EMPTY_BLOCK);
739:       assertEquals(48, Node.DIRECTIVES);
740:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
741:       assertEquals(57, Node.REFLECTED_OBJECT);
742:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
743:       assertEquals(50, Node.FREE_CALL);
744:       assertEquals(55, Node.INFERRED_FUNCTION);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(8, Node.FLAG_NO_THROWS);
747:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
748:       assertEquals(36, Node.QUOTED_PROP);
749:       assertEquals(1, Node.DECR_FLAG);
750:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
751:       assertEquals(49, Node.DIRECT_EVAL);
752:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
753:       assertEquals(12, Node.COLUMN_BITS);
754:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
755:       assertEquals(4095, Node.COLUMN_MASK);
756:       assertFalse(node0.equals((Object)node1));
757:       assertFalse(node2.equals((Object)node0));
758:       assertFalse(node2.equals((Object)node1));
759:       
760:       Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
761:       assertNotNull(node_AncestorIterable0);
762:       assertFalse(node0.isNot());
763:       assertFalse(node0.isObjectLit());
764:       assertFalse(node0.hasOneChild());
765:       assertFalse(node0.isScript());
766:       assertFalse(node0.isAssignAdd());
767:       assertEquals((-1), node0.getSourcePosition());
768:       assertFalse(node0.isNumber());
769:       assertFalse(node0.isLabel());
770:       assertFalse(node0.isLabelName());
771:       assertFalse(node0.isAnd());
772:       assertFalse(node0.isFalse());
773:       assertFalse(node0.isContinue());
774:       assertFalse(node0.isCast());
775:       assertFalse(node0.isAdd());
776:       assertFalse(node0.isNew());
777:       assertFalse(node0.isVar());
778:       assertFalse(node0.isDo());
779:       assertFalse(node0.isWhile());
780:       assertFalse(node0.isGetProp());
781:       assertFalse(node0.isOr());
782:       assertFalse(node0.isTypeOf());
783:       assertFalse(node0.isNull());
784:       assertFalse(node0.isDec());
785:       assertFalse(node0.isReturn());
786:       assertFalse(node0.isComma());
787:       assertFalse(node0.hasChildren());
788:       assertFalse(node0.isGetElem());
789:       assertFalse(node0.isName());
790:       assertFalse(node0.isAssign());
791:       assertFalse(node0.isDelProp());
792:       assertFalse(node0.isExprResult());
793:       assertFalse(node0.isCall());
794:       assertFalse(node0.isBreak());
795:       assertFalse(node0.isVoid());
796:       assertFalse(node0.isTry());
797:       assertFalse(node0.isFunction());
798:       assertFalse(node0.isRegExp());
799:       assertFalse(node0.isDebugger());
800:       assertFalse(node0.isTrue());
801:       assertEquals(40, node0.getType());
802:       assertFalse(node0.isFor());
803:       assertFalse(node0.isEmpty());
804:       assertFalse(node0.isGetterDef());
805:       assertFalse(node0.isDefaultCase());
806:       assertFalse(node0.isParamList());
807:       assertEquals(0, node0.getChildCount());
808:       assertFalse(node0.isStringKey());
809:       assertFalse(node0.isArrayLit());
810:       assertTrue(node0.isString());
811:       assertFalse(node0.isBlock());
812:       assertFalse(node0.isSwitch());
813:       assertFalse(node0.isHook());
814:       assertEquals((-1), node0.getCharno());
815:       assertFalse(node0.isCase());
816:       assertFalse(node0.isThrow());
817:       assertFalse(node0.isInc());
818:       assertFalse(node0.isSetterDef());
819:       assertFalse(node0.isIn());
820:       assertFalse(node0.isNE());
821:       assertFalse(node0.isThis());
822:       assertFalse(node0.isIf());
823:       assertFalse(node0.hasMoreThanOneChild());
824:       assertFalse(node0.isWith());
825:       assertFalse(node0.isCatch());
826:       assertFalse(node0.isInstanceOf());
827:       assertEquals((-1), node0.getLineno());
828:       assertFalse(node2.isCase());
829:       assertFalse(node2.isString());
830:       assertFalse(node2.isIn());
831:       assertFalse(node2.isInc());
832:       assertEquals(1, node2.getChildCount());
833:       assertFalse(node2.isHook());
834:       assertFalse(node2.isFalse());
835:       assertFalse(node2.isThrow());
836:       assertFalse(node2.isArrayLit());
837:       assertFalse(node2.isGetterDef());
838:       assertEquals((-1), node2.getCharno());
839:       assertFalse(node2.isDebugger());
840:       assertFalse(node2.isSwitch());
841:       assertFalse(node2.isAnd());
842:       assertFalse(node2.isInstanceOf());
843:       assertFalse(node2.isRegExp());
844:       assertFalse(node2.isScript());
845:       assertFalse(node2.isFunction());
846:       assertFalse(node2.isCatch());
847:       assertFalse(node2.isWith());
848:       assertFalse(node2.isTry());
849:       assertFalse(node2.isSetterDef());
850:       assertFalse(node2.isThis());
851:       assertFalse(node2.isFor());
852:       assertTrue(node2.hasChildren());
853:       assertEquals((-1), node2.getLineno());
854:       assertFalse(node2.isNE());
855:       assertFalse(node2.isIf());
856:       assertFalse(node2.isDo());
857:       assertFalse(node2.hasMoreThanOneChild());
858:       assertFalse(node2.isContinue());
859:       assertFalse(node2.isNew());
860:       assertFalse(node2.isBlock());
861:       assertFalse(node2.isAdd());
862:       assertFalse(node2.isReturn());
863:       assertFalse(node2.isLabel());
864:       assertFalse(node2.isVar());
865:       assertFalse(node2.isWhile());
866:       assertFalse(node2.isAssignAdd());
867:       assertFalse(node2.isStringKey());
868:       assertFalse(node2.isLabelName());
869:       assertEquals((-1), node2.getSourcePosition());
870:       assertFalse(node2.isNumber());
871:       assertFalse(node2.isCast());
872:       assertFalse(node2.isParamList());
873:       assertFalse(node2.isNot());
874:       assertFalse(node2.isObjectLit());
875:       assertFalse(node2.isComma());
876:       assertFalse(node2.isGetProp());
877:       assertFalse(node2.isDefaultCase());
878:       assertFalse(node2.isGetElem());
879:       assertFalse(node2.isName());
880:       assertFalse(node2.isEmpty());
881:       assertFalse(node2.isAssign());
882:       assertFalse(node2.isCall());
883:       assertTrue(node2.hasOneChild());
884:       assertFalse(node2.isBreak());
885:       assertFalse(node2.isDec());
886:       assertFalse(node2.isTypeOf());
887:       assertFalse(node2.isVoid());
888:       assertFalse(node2.isOr());
889:       assertFalse(node2.isExprResult());
890:       assertFalse(node2.isTrue());
891:       assertFalse(node2.isDelProp());
892:       assertEquals((-900), node2.getType());
893:       assertFalse(node2.isNull());
894:       assertNotSame(node2, node1);
895:       assertEquals(55, Node.INFERRED_FUNCTION);
896:       assertEquals(4095, Node.COLUMN_MASK);
897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
898:       assertEquals(48, Node.DIRECTIVES);
899:       assertEquals(39, Node.EMPTY_BLOCK);
900:       assertEquals(43, Node.IS_CONSTANT_NAME);
901:       assertEquals(36, Node.QUOTED_PROP);
902:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
903:       assertEquals(8, Node.FLAG_NO_THROWS);
904:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
905:       assertEquals(50, Node.FREE_CALL);
906:       assertEquals(52, Node.LENGTH);
907:       assertEquals(53, Node.INPUT_ID);
908:       assertEquals(29, Node.JSDOC_INFO_PROP);
909:       assertEquals(40, Node.ORIGINALNAME_PROP);
910:       assertEquals(2, Node.POST_FLAG);
911:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
912:       assertEquals(57, Node.LAST_PROP);
913:       assertEquals(30, Node.VAR_ARGS_NAME);
914:       assertEquals(47, Node.IS_DISPATCHER);
915:       assertEquals(51, Node.STATIC_SOURCE_FILE);
916:       assertEquals(12, Node.COLUMN_BITS);
917:       assertEquals(46, Node.IS_NAMESPACE);
918:       assertEquals(32, Node.INCRDECR_PROP);
919:       assertEquals(49, Node.DIRECT_EVAL);
920:       assertEquals(1, Node.DECR_FLAG);
921:       assertEquals(37, Node.OPT_ARG_NAME);
922:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
923:       assertEquals(15, Node.NO_SIDE_EFFECTS);
924:       assertEquals(56, Node.CHANGE_TIME);
925:       assertEquals(54, Node.SLASH_V);
926:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
927:       assertEquals(57, Node.REFLECTED_OBJECT);
928:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
929:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
930:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
931:       assertEquals(56, Node.CHANGE_TIME);
932:       assertEquals(47, Node.IS_DISPATCHER);
933:       assertEquals(2, Node.POST_FLAG);
934:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
935:       assertEquals(37, Node.OPT_ARG_NAME);
936:       assertEquals(51, Node.STATIC_SOURCE_FILE);
937:       assertEquals(32, Node.INCRDECR_PROP);
938:       assertEquals(46, Node.IS_NAMESPACE);
939:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
940:       assertEquals(29, Node.JSDOC_INFO_PROP);
941:       assertEquals(53, Node.INPUT_ID);
942:       assertEquals(43, Node.IS_CONSTANT_NAME);
943:       assertEquals(15, Node.NO_SIDE_EFFECTS);
944:       assertEquals(30, Node.VAR_ARGS_NAME);
945:       assertEquals(54, Node.SLASH_V);
946:       assertEquals(57, Node.LAST_PROP);
947:       assertEquals(40, Node.ORIGINALNAME_PROP);
948:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
949:       assertEquals(39, Node.EMPTY_BLOCK);
950:       assertEquals(48, Node.DIRECTIVES);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(57, Node.REFLECTED_OBJECT);
953:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
954:       assertEquals(50, Node.FREE_CALL);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(52, Node.LENGTH);
957:       assertEquals(8, Node.FLAG_NO_THROWS);
958:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
959:       assertEquals(36, Node.QUOTED_PROP);
960:       assertEquals(1, Node.DECR_FLAG);
961:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
962:       assertEquals(49, Node.DIRECT_EVAL);
963:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
964:       assertEquals(12, Node.COLUMN_BITS);
965:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
966:       assertEquals(4095, Node.COLUMN_MASK);
967:       assertFalse(node0.equals((Object)node1));
968:       assertFalse(node0.equals((Object)node2));
969:       assertFalse(node2.equals((Object)node0));
970:       assertFalse(node2.equals((Object)node1));
971:       
972:       boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
973:       assertFalse(boolean1);
974:       assertTrue(boolean1 == boolean0);
975:       
976:       node0.addChildToBack(node1);
977:       assertFalse(node0.isNot());
978:       assertFalse(node0.isObjectLit());
979:       assertFalse(node0.isScript());
980:       assertFalse(node0.isAssignAdd());
981:       assertEquals((-1), node0.getSourcePosition());
982:       assertFalse(node0.isNumber());
983:       assertFalse(node0.isLabel());
984:       assertFalse(node0.isLabelName());
985:       assertFalse(node0.isAnd());
986:       assertFalse(node0.isFalse());
987:       assertFalse(node0.isContinue());
988:       assertFalse(node0.isCast());
989:       assertFalse(node0.isAdd());
990:       assertFalse(node0.isNew());
991:       assertFalse(node0.isVar());
992:       assertFalse(node0.isDo());
993:       assertFalse(node0.isWhile());
994:       assertFalse(node0.isGetProp());
995:       assertFalse(node0.isOr());
996:       assertFalse(node0.isTypeOf());
997:       assertFalse(node0.isNull());
998:       assertFalse(node0.isDec());
999:       assertFalse(node0.isReturn());
1000:       assertFalse(node0.isComma());
1001:       assertTrue(node0.hasOneChild());
1002:       assertFalse(node0.isGetElem());
1003:       assertFalse(node0.isName());
1004:       assertFalse(node0.isAssign());
1005:       assertFalse(node0.isDelProp());
1006:       assertFalse(node0.isExprResult());
1007:       assertFalse(node0.isCall());
1008:       assertFalse(node0.isBreak());
1009:       assertFalse(node0.isVoid());
1010:       assertFalse(node0.isTry());
1011:       assertFalse(node0.isFunction());
1012:       assertFalse(node0.isRegExp());
1013:       assertFalse(node0.isDebugger());
1014:       assertFalse(node0.isTrue());
1015:       assertEquals(40, node0.getType());
1016:       assertFalse(node0.isFor());
1017:       assertFalse(node0.isEmpty());
1018:       assertFalse(node0.isGetterDef());
1019:       assertFalse(node0.isDefaultCase());
1020:       assertFalse(node0.isParamList());
1021:       assertFalse(node0.isStringKey());
1022:       assertFalse(node0.isArrayLit());
1023:       assertTrue(node0.isString());
1024:       assertFalse(node0.isBlock());
1025:       assertFalse(node0.isSwitch());
1026:       assertFalse(node0.isHook());
1027:       assertEquals((-1), node0.getCharno());
1028:       assertFalse(node0.isCase());
1029:       assertFalse(node0.isThrow());
1030:       assertFalse(node0.isInc());
1031:       assertFalse(node0.isSetterDef());
1032:       assertTrue(node0.hasChildren());
1033:       assertFalse(node0.isIn());
1034:       assertFalse(node0.isNE());
1035:       assertEquals(1, node0.getChildCount());
1036:       assertFalse(node0.isThis());
1037:       assertFalse(node0.isIf());
1038:       assertFalse(node0.hasMoreThanOneChild());
1039:       assertFalse(node0.isWith());
1040:       assertFalse(node0.isCatch());
1041:       assertFalse(node0.isInstanceOf());
1042:       assertEquals((-1), node0.getLineno());
1043:       assertFalse(node1.isName());
1044:       assertFalse(node1.isStringKey());
1045:       assertFalse(node1.isNull());
1046:       assertFalse(node1.isParamList());
1047:       assertFalse(node1.isVar());
1048:       assertFalse(node1.isBlock());
1049:       assertEquals(31, node1.getType());
1050:       assertEquals(0, node1.getChildCount());
1051:       assertFalse(node1.isCall());
1052:       assertFalse(node1.isCatch());
1053:       assertFalse(node1.isReturn());
1054:       assertFalse(node1.isWhile());
1055:       assertFalse(node1.isDebugger());
1056:       assertFalse(node1.isTry());
1057:       assertFalse(node1.isNumber());
1058:       assertEquals((-1), node1.getSourcePosition());
1059:       assertFalse(node1.isIf());
1060:       assertFalse(node1.isNE());
1061:       assertFalse(node1.isFor());
1062:       assertFalse(node1.isFunction());
1063:       assertEquals((-1), node1.getLineno());
1064:       assertFalse(node1.isRegExp());
1065:       assertFalse(node1.hasMoreThanOneChild());
1066:       assertFalse(node1.isCast());
1067:       assertFalse(node1.isContinue());
1068:       assertTrue(node1.isDelProp());
1069:       assertFalse(node1.isIn());
1070:       assertFalse(node1.isInc());
1071:       assertFalse(node1.isSetterDef());
1072:       assertFalse(node1.isFalse());
1073:       assertFalse(node1.isHook());
1074:       assertFalse(node1.isThis());
1075:       assertFalse(node1.isThrow());
1076:       assertFalse(node1.isComma());
1077:       assertFalse(node1.isInstanceOf());
1078:       assertFalse(node1.isBreak());
1079:       assertFalse(node1.isCase());
1080:       assertFalse(node1.isAnd());
1081:       assertFalse(node1.isWith());
1082:       assertFalse(node1.isObjectLit());
1083:       assertFalse(node1.isNot());
1084:       assertFalse(node1.isSwitch());
1085:       assertEquals((-1), node1.getCharno());
1086:       assertFalse(node1.isGetProp());
1087:       assertFalse(node1.hasOneChild());
1088:       assertFalse(node1.isString());
1089:       assertFalse(node1.isScript());
1090:       assertFalse(node1.isGetElem());
1091:       assertFalse(node1.isAssign());
1092:       assertFalse(node1.isGetterDef());
1093:       assertFalse(node1.isLabelName());
1094:       assertFalse(node1.isDec());
1095:       assertFalse(node1.hasChildren());
1096:       assertFalse(node1.isLabel());
1097:       assertFalse(node1.isVoid());
1098:       assertFalse(node1.isTypeOf());
1099:       assertFalse(node1.isArrayLit());
1100:       assertFalse(node1.isExprResult());
1101:       assertFalse(node1.isDo());
1102:       assertFalse(node1.isDefaultCase());
1103:       assertFalse(node1.isTrue());
1104:       assertFalse(node1.isNew());
1105:       assertFalse(node1.isAssignAdd());
1106:       assertFalse(node1.isOr());
1107:       assertFalse(node1.isEmpty());
1108:       assertFalse(node1.isAdd());
1109:       assertNotSame(node1, node2);
1110:       assertEquals(55, Node.INFERRED_FUNCTION);
1111:       assertEquals(4095, Node.COLUMN_MASK);
1112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1113:       assertEquals(48, Node.DIRECTIVES);
1114:       assertEquals(39, Node.EMPTY_BLOCK);
1115:       assertEquals(43, Node.IS_CONSTANT_NAME);
1116:       assertEquals(36, Node.QUOTED_PROP);
1117:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1118:       assertEquals(8, Node.FLAG_NO_THROWS);
1119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1120:       assertEquals(50, Node.FREE_CALL);
1121:       assertEquals(52, Node.LENGTH);
1122:       assertEquals(53, Node.INPUT_ID);
1123:       assertEquals(29, Node.JSDOC_INFO_PROP);
1124:       assertEquals(40, Node.ORIGINALNAME_PROP);
1125:       assertEquals(2, Node.POST_FLAG);
1126:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1127:       assertEquals(57, Node.LAST_PROP);
1128:       assertEquals(30, Node.VAR_ARGS_NAME);
1129:       assertEquals(47, Node.IS_DISPATCHER);
1130:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1131:       assertEquals(12, Node.COLUMN_BITS);
1132:       assertEquals(46, Node.IS_NAMESPACE);
1133:       assertEquals(32, Node.INCRDECR_PROP);
1134:       assertEquals(49, Node.DIRECT_EVAL);
1135:       assertEquals(1, Node.DECR_FLAG);
1136:       assertEquals(37, Node.OPT_ARG_NAME);
1137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1139:       assertEquals(56, Node.CHANGE_TIME);
1140:       assertEquals(54, Node.SLASH_V);
1141:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1142:       assertEquals(57, Node.REFLECTED_OBJECT);
1143:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1145:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1147:       assertEquals(57, Node.LAST_PROP);
1148:       assertEquals(30, Node.VAR_ARGS_NAME);
1149:       assertEquals(49, Node.DIRECT_EVAL);
1150:       assertEquals(52, Node.LENGTH);
1151:       assertEquals(32, Node.INCRDECR_PROP);
1152:       assertEquals(1, Node.DECR_FLAG);
1153:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1154:       assertEquals(12, Node.COLUMN_BITS);
1155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1156:       assertEquals(47, Node.IS_DISPATCHER);
1157:       assertEquals(2, Node.POST_FLAG);
1158:       assertEquals(50, Node.FREE_CALL);
1159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1160:       assertEquals(40, Node.ORIGINALNAME_PROP);
1161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1162:       assertEquals(46, Node.IS_NAMESPACE);
1163:       assertEquals(54, Node.SLASH_V);
1164:       assertEquals(43, Node.IS_CONSTANT_NAME);
1165:       assertEquals(36, Node.QUOTED_PROP);
1166:       assertEquals(53, Node.INPUT_ID);
1167:       assertEquals(55, Node.INFERRED_FUNCTION);
1168:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1170:       assertEquals(4095, Node.COLUMN_MASK);
1171:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1172:       assertEquals(56, Node.CHANGE_TIME);
1173:       assertEquals(37, Node.OPT_ARG_NAME);
1174:       assertEquals(8, Node.FLAG_NO_THROWS);
1175:       assertEquals(48, Node.DIRECTIVES);
1176:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertEquals(29, Node.JSDOC_INFO_PROP);
1179:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1180:       assertEquals(57, Node.REFLECTED_OBJECT);
1181:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1182:       assertFalse(node0.equals((Object)node1));
1183:       assertFalse(node0.equals((Object)node2));
1184:       assertFalse(node1.equals((Object)node0));
1185:       assertFalse(node1.equals((Object)node2));
1186:       
1187:       String string0 = node1.getQualifiedName();
1188:       assertNull(string0);
1189:       assertFalse(node1.isName());
1190:       assertFalse(node1.isStringKey());
1191:       assertFalse(node1.isNull());
1192:       assertFalse(node1.isParamList());
1193:       assertFalse(node1.isVar());
1194:       assertFalse(node1.isBlock());
1195:       assertEquals(31, node1.getType());
1196:       assertEquals(0, node1.getChildCount());
1197:       assertFalse(node1.isCall());
1198:       assertFalse(node1.isCatch());
1199:       assertFalse(node1.isReturn());
1200:       assertFalse(node1.isWhile());
1201:       assertFalse(node1.isDebugger());
1202:       assertFalse(node1.isTry());
1203:       assertFalse(node1.isNumber());
1204:       assertEquals((-1), node1.getSourcePosition());
1205:       assertFalse(node1.isIf());
1206:       assertFalse(node1.isNE());
1207:       assertFalse(node1.isFor());
1208:       assertFalse(node1.isFunction());
1209:       assertEquals((-1), node1.getLineno());
1210:       assertFalse(node1.isRegExp());
1211:       assertFalse(node1.hasMoreThanOneChild());
1212:       assertFalse(node1.isCast());
1213:       assertFalse(node1.isContinue());
1214:       assertTrue(node1.isDelProp());
1215:       assertFalse(node1.isIn());
1216:       assertFalse(node1.isInc());
1217:       assertFalse(node1.isSetterDef());
1218:       assertFalse(node1.isFalse());
1219:       assertFalse(node1.isHook());
1220:       assertFalse(node1.isThis());
1221:       assertFalse(node1.isThrow());
1222:       assertFalse(node1.isComma());
1223:       assertFalse(node1.isInstanceOf());
1224:       assertFalse(node1.isBreak());
1225:       assertFalse(node1.isCase());
1226:       assertFalse(node1.isAnd());
1227:       assertFalse(node1.isWith());
1228:       assertFalse(node1.isObjectLit());
1229:       assertFalse(node1.isNot());
1230:       assertFalse(node1.isSwitch());
1231:       assertEquals((-1), node1.getCharno());
1232:       assertFalse(node1.isGetProp());
1233:       assertFalse(node1.hasOneChild());
1234:       assertFalse(node1.isString());
1235:       assertFalse(node1.isScript());
1236:       assertFalse(node1.isGetElem());
1237:       assertFalse(node1.isAssign());
1238:       assertFalse(node1.isGetterDef());
1239:       assertFalse(node1.isLabelName());
1240:       assertFalse(node1.isDec());
1241:       assertFalse(node1.hasChildren());
1242:       assertFalse(node1.isLabel());
1243:       assertFalse(node1.isVoid());
1244:       assertFalse(node1.isTypeOf());
1245:       assertFalse(node1.isArrayLit());
1246:       assertFalse(node1.isExprResult());
1247:       assertFalse(node1.isDo());
1248:       assertFalse(node1.isDefaultCase());
1249:       assertFalse(node1.isTrue());
1250:       assertFalse(node1.isNew());
1251:       assertFalse(node1.isAssignAdd());
1252:       assertFalse(node1.isOr());
1253:       assertFalse(node1.isEmpty());
1254:       assertFalse(node1.isAdd());
1255:       assertNotSame(node1, node2);
1256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1257:       assertEquals(57, Node.LAST_PROP);
1258:       assertEquals(30, Node.VAR_ARGS_NAME);
1259:       assertEquals(49, Node.DIRECT_EVAL);
1260:       assertEquals(52, Node.LENGTH);
1261:       assertEquals(32, Node.INCRDECR_PROP);
1262:       assertEquals(1, Node.DECR_FLAG);
1263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1264:       assertEquals(12, Node.COLUMN_BITS);
1265:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1266:       assertEquals(47, Node.IS_DISPATCHER);
1267:       assertEquals(2, Node.POST_FLAG);
1268:       assertEquals(50, Node.FREE_CALL);
1269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1270:       assertEquals(40, Node.ORIGINALNAME_PROP);
1271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1272:       assertEquals(46, Node.IS_NAMESPACE);
1273:       assertEquals(54, Node.SLASH_V);
1274:       assertEquals(43, Node.IS_CONSTANT_NAME);
1275:       assertEquals(36, Node.QUOTED_PROP);
1276:       assertEquals(53, Node.INPUT_ID);
1277:       assertEquals(55, Node.INFERRED_FUNCTION);
1278:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1279:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1280:       assertEquals(4095, Node.COLUMN_MASK);
1281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1282:       assertEquals(56, Node.CHANGE_TIME);
1283:       assertEquals(37, Node.OPT_ARG_NAME);
1284:       assertEquals(8, Node.FLAG_NO_THROWS);
1285:       assertEquals(48, Node.DIRECTIVES);
1286:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1287:       assertEquals(39, Node.EMPTY_BLOCK);
1288:       assertEquals(29, Node.JSDOC_INFO_PROP);
1289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1290:       assertEquals(57, Node.REFLECTED_OBJECT);
1291:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1292:       assertFalse(node1.equals((Object)node0));
1293:       assertFalse(node1.equals((Object)node2));
1294:       
1295:       boolean boolean2 = node1.isOptionalArg();
1296:       assertFalse(node1.isName());
1297:       assertFalse(node1.isStringKey());
1298:       assertFalse(node1.isNull());
1299:       assertFalse(node1.isParamList());
1300:       assertFalse(node1.isVar());
1301:       assertFalse(node1.isBlock());
1302:       assertEquals(31, node1.getType());
1303:       assertEquals(0, node1.getChildCount());
1304:       assertFalse(node1.isCall());
1305:       assertFalse(node1.isCatch());
1306:       assertFalse(node1.isReturn());
1307:       assertFalse(node1.isWhile());
1308:       assertFalse(node1.isDebugger());
1309:       assertFalse(node1.isTry());
1310:       assertFalse(node1.isNumber());
1311:       assertEquals((-1), node1.getSourcePosition());
1312:       assertFalse(node1.isIf());
1313:       assertFalse(node1.isNE());
1314:       assertFalse(node1.isFor());
1315:       assertFalse(node1.isFunction());
1316:       assertEquals((-1), node1.getLineno());
1317:       assertFalse(node1.isRegExp());
1318:       assertFalse(node1.hasMoreThanOneChild());
1319:       assertFalse(node1.isCast());
1320:       assertFalse(node1.isContinue());
1321:       assertTrue(node1.isDelProp());
1322:       assertFalse(node1.isIn());
1323:       assertFalse(node1.isInc());
1324:       assertFalse(node1.isSetterDef());
1325:       assertFalse(node1.isFalse());
1326:       assertFalse(node1.isHook());
1327:       assertFalse(node1.isThis());
1328:       assertFalse(node1.isThrow());
1329:       assertFalse(node1.isComma());
1330:       assertFalse(node1.isInstanceOf());
1331:       assertFalse(node1.isBreak());
1332:       assertFalse(node1.isCase());
1333:       assertFalse(node1.isAnd());
1334:       assertFalse(node1.isWith());
1335:       assertFalse(node1.isObjectLit());
1336:       assertFalse(node1.isNot());
1337:       assertFalse(node1.isSwitch());
1338:       assertEquals((-1), node1.getCharno());
1339:       assertFalse(node1.isGetProp());
1340:       assertFalse(node1.hasOneChild());
1341:       assertFalse(node1.isString());
1342:       assertFalse(node1.isScript());
1343:       assertFalse(node1.isGetElem());
1344:       assertFalse(node1.isAssign());
1345:       assertFalse(node1.isGetterDef());
1346:       assertFalse(node1.isLabelName());
1347:       assertFalse(node1.isDec());
1348:       assertFalse(node1.hasChildren());
1349:       assertFalse(node1.isLabel());
1350:       assertFalse(node1.isVoid());
1351:       assertFalse(node1.isTypeOf());
1352:       assertFalse(node1.isArrayLit());
1353:       assertFalse(node1.isExprResult());
1354:       assertFalse(node1.isDo());
1355:       assertFalse(node1.isDefaultCase());
1356:       assertFalse(node1.isTrue());
1357:       assertFalse(node1.isNew());
1358:       assertFalse(node1.isAssignAdd());
1359:       assertFalse(node1.isOr());
1360:       assertFalse(node1.isEmpty());
1361:       assertFalse(node1.isAdd());
1362:       assertFalse(boolean2);
1363:       assertNotSame(node1, node2);
1364:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1365:       assertEquals(57, Node.LAST_PROP);
1366:       assertEquals(30, Node.VAR_ARGS_NAME);
1367:       assertEquals(49, Node.DIRECT_EVAL);
1368:       assertEquals(52, Node.LENGTH);
1369:       assertEquals(32, Node.INCRDECR_PROP);
1370:       assertEquals(1, Node.DECR_FLAG);
1371:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1372:       assertEquals(12, Node.COLUMN_BITS);
1373:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1374:       assertEquals(47, Node.IS_DISPATCHER);
1375:       assertEquals(2, Node.POST_FLAG);
1376:       assertEquals(50, Node.FREE_CALL);
1377:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1378:       assertEquals(40, Node.ORIGINALNAME_PROP);
1379:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1380:       assertEquals(46, Node.IS_NAMESPACE);
1381:       assertEquals(54, Node.SLASH_V);
1382:       assertEquals(43, Node.IS_CONSTANT_NAME);
1383:       assertEquals(36, Node.QUOTED_PROP);
1384:       assertEquals(53, Node.INPUT_ID);
1385:       assertEquals(55, Node.INFERRED_FUNCTION);
1386:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1387:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1388:       assertEquals(4095, Node.COLUMN_MASK);
1389:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1390:       assertEquals(56, Node.CHANGE_TIME);
1391:       assertEquals(37, Node.OPT_ARG_NAME);
1392:       assertEquals(8, Node.FLAG_NO_THROWS);
1393:       assertEquals(48, Node.DIRECTIVES);
1394:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1395:       assertEquals(39, Node.EMPTY_BLOCK);
1396:       assertEquals(29, Node.JSDOC_INFO_PROP);
1397:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1398:       assertEquals(57, Node.REFLECTED_OBJECT);
1399:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1400:       assertFalse(node1.equals((Object)node0));
1401:       assertFalse(node1.equals((Object)node2));
1402:       assertTrue(boolean2 == boolean1);
1403:       assertTrue(boolean2 == boolean0);
1404:       
1405:       node2.setVarArgs(false);
1406:       assertFalse(node0.isNot());
1407:       assertFalse(node0.isObjectLit());
1408:       assertFalse(node0.isScript());
1409:       assertFalse(node0.isAssignAdd());
1410:       assertEquals((-1), node0.getSourcePosition());
1411:       assertFalse(node0.isNumber());
1412:       assertFalse(node0.isLabel());
1413:       assertFalse(node0.isLabelName());
1414:       assertFalse(node0.isAnd());
1415:       assertFalse(node0.isFalse());
1416:       assertFalse(node0.isContinue());
1417:       assertFalse(node0.isCast());
1418:       assertFalse(node0.isAdd());
1419:       assertFalse(node0.isNew());
1420:       assertFalse(node0.isVar());
1421:       assertFalse(node0.isDo());
1422:       assertFalse(node0.isWhile());
1423:       assertFalse(node0.isGetProp());
1424:       assertFalse(node0.isOr());
1425:       assertFalse(node0.isTypeOf());
1426:       assertFalse(node0.isNull());
1427:       assertFalse(node0.isDec());
1428:       assertFalse(node0.isReturn());
1429:       assertFalse(node0.isComma());
1430:       assertTrue(node0.hasOneChild());
1431:       assertFalse(node0.isGetElem());
1432:       assertFalse(node0.isName());
1433:       assertFalse(node0.isAssign());
1434:       assertFalse(node0.isDelProp());
1435:       assertFalse(node0.isExprResult());
1436:       assertFalse(node0.isCall());
1437:       assertFalse(node0.isBreak());
1438:       assertFalse(node0.isVoid());
1439:       assertFalse(node0.isTry());
1440:       assertFalse(node0.isFunction());
1441:       assertFalse(node0.isRegExp());
1442:       assertFalse(node0.isDebugger());
1443:       assertFalse(node0.isTrue());
1444:       assertEquals(40, node0.getType());
1445:       assertFalse(node0.isFor());
1446:       assertFalse(node0.isEmpty());
1447:       assertFalse(node0.isGetterDef());
1448:       assertFalse(node0.isDefaultCase());
1449:       assertFalse(node0.isParamList());
1450:       assertFalse(node0.isStringKey());
1451:       assertFalse(node0.isArrayLit());
1452:       assertTrue(node0.isString());
1453:       assertFalse(node0.isBlock());
1454:       assertFalse(node0.isSwitch());
1455:       assertFalse(node0.isHook());
1456:       assertEquals((-1), node0.getCharno());
1457:       assertFalse(node0.isCase());
1458:       assertFalse(node0.isThrow());
1459:       assertFalse(node0.isInc());
1460:       assertFalse(node0.isSetterDef());
1461:       assertTrue(node0.hasChildren());
1462:       assertFalse(node0.isIn());
1463:       assertFalse(node0.isNE());
1464:       assertEquals(1, node0.getChildCount());
1465:       assertFalse(node0.isThis());
1466:       assertFalse(node0.isIf());
1467:       assertFalse(node0.hasMoreThanOneChild());
1468:       assertFalse(node0.isWith());
1469:       assertFalse(node0.isCatch());
1470:       assertFalse(node0.isInstanceOf());
1471:       assertEquals((-1), node0.getLineno());
1472:       assertFalse(node2.isCase());
1473:       assertFalse(node2.isString());
1474:       assertFalse(node2.isIn());
1475:       assertFalse(node2.isInc());
1476:       assertEquals(1, node2.getChildCount());
1477:       assertFalse(node2.isHook());
1478:       assertFalse(node2.isFalse());
1479:       assertFalse(node2.isThrow());
1480:       assertFalse(node2.isArrayLit());
1481:       assertFalse(node2.isGetterDef());
1482:       assertEquals((-1), node2.getCharno());
1483:       assertFalse(node2.isDebugger());
1484:       assertFalse(node2.isSwitch());
1485:       assertFalse(node2.isAnd());
1486:       assertFalse(node2.isInstanceOf());
1487:       assertFalse(node2.isRegExp());
1488:       assertFalse(node2.isScript());
1489:       assertFalse(node2.isFunction());
1490:       assertFalse(node2.isCatch());
1491:       assertFalse(node2.isWith());
1492:       assertFalse(node2.isTry());
1493:       assertFalse(node2.isSetterDef());
1494:       assertFalse(node2.isThis());
1495:       assertFalse(node2.isFor());
1496:       assertTrue(node2.hasChildren());
1497:       assertEquals((-1), node2.getLineno());
1498:       assertFalse(node2.isNE());
1499:       assertFalse(node2.isIf());
1500:       assertFalse(node2.isDo());
1501:       assertFalse(node2.hasMoreThanOneChild());
1502:       assertFalse(node2.isContinue());
1503:       assertFalse(node2.isNew());
1504:       assertFalse(node2.isBlock());
1505:       assertFalse(node2.isAdd());
1506:       assertFalse(node2.isReturn());
1507:       assertFalse(node2.isLabel());
1508:       assertFalse(node2.isVar());
1509:       assertFalse(node2.isWhile());
1510:       assertFalse(node2.isAssignAdd());
1511:       assertFalse(node2.isStringKey());
1512:       assertFalse(node2.isLabelName());
1513:       assertEquals((-1), node2.getSourcePosition());
1514:       assertFalse(node2.isNumber());
1515:       assertFalse(node2.isCast());
1516:       assertFalse(node2.isParamList());
1517:       assertFalse(node2.isNot());
1518:       assertFalse(node2.isObjectLit());
1519:       assertFalse(node2.isComma());
1520:       assertFalse(node2.isGetProp());
1521:       assertFalse(node2.isDefaultCase());
1522:       assertFalse(node2.isGetElem());
1523:       assertFalse(node2.isName());
1524:       assertFalse(node2.isEmpty());
1525:       assertFalse(node2.isAssign());
1526:       assertFalse(node2.isCall());
1527:       assertTrue(node2.hasOneChild());
1528:       assertFalse(node2.isBreak());
1529:       assertFalse(node2.isDec());
1530:       assertFalse(node2.isTypeOf());
1531:       assertFalse(node2.isVoid());
1532:       assertFalse(node2.isOr());
1533:       assertFalse(node2.isExprResult());
1534:       assertFalse(node2.isTrue());
1535:       assertFalse(node2.isDelProp());
1536:       assertEquals((-900), node2.getType());
1537:       assertFalse(node2.isNull());
1538:       assertNotSame(node2, node1);
1539:       assertEquals(55, Node.INFERRED_FUNCTION);
1540:       assertEquals(4095, Node.COLUMN_MASK);
1541:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1542:       assertEquals(48, Node.DIRECTIVES);
1543:       assertEquals(39, Node.EMPTY_BLOCK);
1544:       assertEquals(43, Node.IS_CONSTANT_NAME);
1545:       assertEquals(36, Node.QUOTED_PROP);
1546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1547:       assertEquals(8, Node.FLAG_NO_THROWS);
1548:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1549:       assertEquals(50, Node.FREE_CALL);
1550:       assertEquals(52, Node.LENGTH);
1551:       assertEquals(53, Node.INPUT_ID);
1552:       assertEquals(29, Node.JSDOC_INFO_PROP);
1553:       assertEquals(40, Node.ORIGINALNAME_PROP);
1554:       assertEquals(2, Node.POST_FLAG);
1555:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1556:       assertEquals(57, Node.LAST_PROP);
1557:       assertEquals(30, Node.VAR_ARGS_NAME);
1558:       assertEquals(47, Node.IS_DISPATCHER);
1559:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1560:       assertEquals(12, Node.COLUMN_BITS);
1561:       assertEquals(46, Node.IS_NAMESPACE);
1562:       assertEquals(32, Node.INCRDECR_PROP);
1563:       assertEquals(49, Node.DIRECT_EVAL);
1564:       assertEquals(1, Node.DECR_FLAG);
1565:       assertEquals(37, Node.OPT_ARG_NAME);
1566:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1567:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1568:       assertEquals(56, Node.CHANGE_TIME);
1569:       assertEquals(54, Node.SLASH_V);
1570:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1571:       assertEquals(57, Node.REFLECTED_OBJECT);
1572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1573:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1574:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1575:       assertEquals(56, Node.CHANGE_TIME);
1576:       assertEquals(47, Node.IS_DISPATCHER);
1577:       assertEquals(2, Node.POST_FLAG);
1578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1579:       assertEquals(37, Node.OPT_ARG_NAME);
1580:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1581:       assertEquals(32, Node.INCRDECR_PROP);
1582:       assertEquals(46, Node.IS_NAMESPACE);
1583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1584:       assertEquals(29, Node.JSDOC_INFO_PROP);
1585:       assertEquals(53, Node.INPUT_ID);
1586:       assertEquals(43, Node.IS_CONSTANT_NAME);
1587:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1588:       assertEquals(30, Node.VAR_ARGS_NAME);
1589:       assertEquals(54, Node.SLASH_V);
1590:       assertEquals(57, Node.LAST_PROP);
1591:       assertEquals(40, Node.ORIGINALNAME_PROP);
1592:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1593:       assertEquals(39, Node.EMPTY_BLOCK);
1594:       assertEquals(48, Node.DIRECTIVES);
1595:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1596:       assertEquals(57, Node.REFLECTED_OBJECT);
1597:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1598:       assertEquals(50, Node.FREE_CALL);
1599:       assertEquals(55, Node.INFERRED_FUNCTION);
1600:       assertEquals(52, Node.LENGTH);
1601:       assertEquals(8, Node.FLAG_NO_THROWS);
1602:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1603:       assertEquals(36, Node.QUOTED_PROP);
1604:       assertEquals(1, Node.DECR_FLAG);
1605:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1606:       assertEquals(49, Node.DIRECT_EVAL);
1607:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1608:       assertEquals(12, Node.COLUMN_BITS);
1609:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1610:       assertEquals(4095, Node.COLUMN_MASK);
1611:       assertFalse(node0.equals((Object)node1));
1612:       assertFalse(node0.equals((Object)node2));
1613:       assertFalse(node2.equals((Object)node0));
1614:       assertFalse(node2.equals((Object)node1));
1615:       
1616:       Node node3 = node0.getLastSibling();
1617:       assertNotNull(node3);
1618:       assertFalse(node0.isNot());
1619:       assertFalse(node0.isObjectLit());
1620:       assertFalse(node0.isScript());
1621:       assertFalse(node0.isAssignAdd());
1622:       assertEquals((-1), node0.getSourcePosition());
1623:       assertFalse(node0.isNumber());
1624:       assertFalse(node0.isLabel());
1625:       assertFalse(node0.isLabelName());
1626:       assertFalse(node0.isAnd());
1627:       assertFalse(node0.isFalse());
1628:       assertFalse(node0.isContinue());
1629:       assertFalse(node0.isCast());
1630:       assertFalse(node0.isAdd());
1631:       assertFalse(node0.isNew());
1632:       assertFalse(node0.isVar());
1633:       assertFalse(node0.isDo());
1634:       assertFalse(node0.isWhile());
1635:       assertFalse(node0.isGetProp());
1636:       assertFalse(node0.isOr());
1637:       assertFalse(node0.isTypeOf());
1638:       assertFalse(node0.isNull());
1639:       assertFalse(node0.isDec());
1640:       assertFalse(node0.isReturn());
1641:       assertFalse(node0.isComma());
1642:       assertTrue(node0.hasOneChild());
1643:       assertFalse(node0.isGetElem());
1644:       assertFalse(node0.isName());
1645:       assertFalse(node0.isAssign());
1646:       assertFalse(node0.isDelProp());
1647:       assertFalse(node0.isExprResult());
1648:       assertFalse(node0.isCall());
1649:       assertFalse(node0.isBreak());
1650:       assertFalse(node0.isVoid());
1651:       assertFalse(node0.isTry());
1652:       assertFalse(node0.isFunction());
1653:       assertFalse(node0.isRegExp());
1654:       assertFalse(node0.isDebugger());
1655:       assertFalse(node0.isTrue());
1656:       assertEquals(40, node0.getType());
1657:       assertFalse(node0.isFor());
1658:       assertFalse(node0.isEmpty());
1659:       assertFalse(node0.isGetterDef());
1660:       assertFalse(node0.isDefaultCase());
1661:       assertFalse(node0.isParamList());
1662:       assertFalse(node0.isStringKey());
1663:       assertFalse(node0.isArrayLit());
1664:       assertTrue(node0.isString());
1665:       assertFalse(node0.isBlock());
1666:       assertFalse(node0.isSwitch());
1667:       assertFalse(node0.isHook());
1668:       assertEquals((-1), node0.getCharno());
1669:       assertFalse(node0.isCase());
1670:       assertFalse(node0.isThrow());
1671:       assertFalse(node0.isInc());
1672:       assertFalse(node0.isSetterDef());
1673:       assertTrue(node0.hasChildren());
1674:       assertFalse(node0.isIn());
1675:       assertFalse(node0.isNE());
1676:       assertEquals(1, node0.getChildCount());
1677:       assertFalse(node0.isThis());
1678:       assertFalse(node0.isIf());
1679:       assertFalse(node0.hasMoreThanOneChild());
1680:       assertFalse(node0.isWith());
1681:       assertFalse(node0.isCatch());
1682:       assertFalse(node0.isInstanceOf());
1683:       assertEquals((-1), node0.getLineno());
1684:       assertEquals(40, node3.getType());
1685:       assertFalse(node3.isVoid());
1686:       assertFalse(node3.isDefaultCase());
1687:       assertFalse(node3.isTry());
1688:       assertFalse(node3.isTrue());
1689:       assertFalse(node3.isSetterDef());
1690:       assertFalse(node3.isDebugger());
1691:       assertFalse(node3.isEmpty());
1692:       assertFalse(node3.isStringKey());
1693:       assertFalse(node3.isVar());
1694:       assertFalse(node3.isParamList());
1695:       assertFalse(node3.isArrayLit());
1696:       assertFalse(node3.isFunction());
1697:       assertFalse(node3.isCase());
1698:       assertFalse(node3.isSwitch());
1699:       assertTrue(node3.isString());
1700:       assertEquals((-1), node3.getCharno());
1701:       assertFalse(node3.isInc());
1702:       assertFalse(node3.isIn());
1703:       assertFalse(node3.isGetterDef());
1704:       assertFalse(node3.isNumber());
1705:       assertFalse(node3.isFor());
1706:       assertFalse(node3.isNE());
1707:       assertFalse(node3.isIf());
1708:       assertTrue(node3.hasChildren());
1709:       assertEquals(1, node3.getChildCount());
1710:       assertEquals((-1), node3.getLineno());
1711:       assertFalse(node3.isHook());
1712:       assertFalse(node3.isThis());
1713:       assertFalse(node3.isBlock());
1714:       assertFalse(node3.isCatch());
1715:       assertFalse(node3.hasMoreThanOneChild());
1716:       assertFalse(node3.isInstanceOf());
1717:       assertFalse(node3.isRegExp());
1718:       assertFalse(node3.isNot());
1719:       assertFalse(node3.isWith());
1720:       assertFalse(node3.isAnd());
1721:       assertFalse(node3.isGetProp());
1722:       assertFalse(node3.isScript());
1723:       assertFalse(node3.isObjectLit());
1724:       assertFalse(node3.isLabelName());
1725:       assertFalse(node3.isThrow());
1726:       assertFalse(node3.isLabel());
1727:       assertFalse(node3.isAssignAdd());
1728:       assertFalse(node3.isCast());
1729:       assertFalse(node3.isContinue());
1730:       assertFalse(node3.isFalse());
1731:       assertFalse(node3.isDo());
1732:       assertFalse(node3.isWhile());
1733:       assertFalse(node3.isOr());
1734:       assertFalse(node3.isNew());
1735:       assertFalse(node3.isAdd());
1736:       assertEquals((-1), node3.getSourcePosition());
1737:       assertFalse(node3.isAssign());
1738:       assertFalse(node3.isBreak());
1739:       assertFalse(node3.isGetElem());
1740:       assertFalse(node3.isCall());
1741:       assertFalse(node3.isNull());
1742:       assertTrue(node3.hasOneChild());
1743:       assertFalse(node3.isDelProp());
1744:       assertFalse(node3.isName());
1745:       assertFalse(node3.isExprResult());
1746:       assertFalse(node3.isReturn());
1747:       assertFalse(node3.isComma());
1748:       assertFalse(node3.isDec());
1749:       assertFalse(node3.isTypeOf());
1750:       assertSame(node0, node3);
1751:       assertSame(node3, node0);
1752:       assertEquals(55, Node.INFERRED_FUNCTION);
1753:       assertEquals(4095, Node.COLUMN_MASK);
1754:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1755:       assertEquals(48, Node.DIRECTIVES);
1756:       assertEquals(39, Node.EMPTY_BLOCK);
1757:       assertEquals(43, Node.IS_CONSTANT_NAME);
1758:       assertEquals(36, Node.QUOTED_PROP);
1759:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1760:       assertEquals(8, Node.FLAG_NO_THROWS);
1761:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1762:       assertEquals(50, Node.FREE_CALL);
1763:       assertEquals(52, Node.LENGTH);
1764:       assertEquals(53, Node.INPUT_ID);
1765:       assertEquals(29, Node.JSDOC_INFO_PROP);
1766:       assertEquals(40, Node.ORIGINALNAME_PROP);
1767:       assertEquals(2, Node.POST_FLAG);
1768:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1769:       assertEquals(57, Node.LAST_PROP);
1770:       assertEquals(30, Node.VAR_ARGS_NAME);
1771:       assertEquals(47, Node.IS_DISPATCHER);
1772:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1773:       assertEquals(12, Node.COLUMN_BITS);
1774:       assertEquals(46, Node.IS_NAMESPACE);
1775:       assertEquals(32, Node.INCRDECR_PROP);
1776:       assertEquals(49, Node.DIRECT_EVAL);
1777:       assertEquals(1, Node.DECR_FLAG);
1778:       assertEquals(37, Node.OPT_ARG_NAME);
1779:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1780:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1781:       assertEquals(56, Node.CHANGE_TIME);
1782:       assertEquals(54, Node.SLASH_V);
1783:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1784:       assertEquals(57, Node.REFLECTED_OBJECT);
1785:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1786:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1787:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1788:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1789:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1790:       assertEquals(39, Node.EMPTY_BLOCK);
1791:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1792:       assertEquals(50, Node.FREE_CALL);
1793:       assertEquals(8, Node.FLAG_NO_THROWS);
1794:       assertEquals(4095, Node.COLUMN_MASK);
1795:       assertEquals(40, Node.ORIGINALNAME_PROP);
1796:       assertEquals(57, Node.REFLECTED_OBJECT);
1797:       assertEquals(48, Node.DIRECTIVES);
1798:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1799:       assertEquals(36, Node.QUOTED_PROP);
1800:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1801:       assertEquals(53, Node.INPUT_ID);
1802:       assertEquals(30, Node.VAR_ARGS_NAME);
1803:       assertEquals(52, Node.LENGTH);
1804:       assertEquals(55, Node.INFERRED_FUNCTION);
1805:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1806:       assertEquals(57, Node.LAST_PROP);
1807:       assertEquals(2, Node.POST_FLAG);
1808:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1809:       assertEquals(37, Node.OPT_ARG_NAME);
1810:       assertEquals(56, Node.CHANGE_TIME);
1811:       assertEquals(47, Node.IS_DISPATCHER);
1812:       assertEquals(29, Node.JSDOC_INFO_PROP);
1813:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1814:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1815:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1816:       assertEquals(46, Node.IS_NAMESPACE);
1817:       assertEquals(49, Node.DIRECT_EVAL);
1818:       assertEquals(43, Node.IS_CONSTANT_NAME);
1819:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1820:       assertEquals(54, Node.SLASH_V);
1821:       assertEquals(12, Node.COLUMN_BITS);
1822:       assertEquals(32, Node.INCRDECR_PROP);
1823:       assertEquals(1, Node.DECR_FLAG);
1824:       assertFalse(node0.equals((Object)node1));
1825:       assertFalse(node0.equals((Object)node2));
1826:       assertFalse(node3.equals((Object)node2));
1827:       assertFalse(node3.equals((Object)node1));
1828:       
1829:       Iterable<Node> iterable0 = node1.children();
1830:       assertNotNull(iterable0);
1831:       assertFalse(node1.isName());
1832:       assertFalse(node1.isStringKey());
1833:       assertFalse(node1.isNull());
1834:       assertFalse(node1.isParamList());
1835:       assertFalse(node1.isVar());
1836:       assertFalse(node1.isBlock());
1837:       assertEquals(31, node1.getType());
1838:       assertEquals(0, node1.getChildCount());
1839:       assertFalse(node1.isCall());
1840:       assertFalse(node1.isCatch());
1841:       assertFalse(node1.isReturn());
1842:       assertFalse(node1.isWhile());
1843:       assertFalse(node1.isDebugger());
1844:       assertFalse(node1.isTry());
1845:       assertFalse(node1.isNumber());
1846:       assertEquals((-1), node1.getSourcePosition());
1847:       assertFalse(node1.isIf());
1848:       assertFalse(node1.isNE());
1849:       assertFalse(node1.isFor());
1850:       assertFalse(node1.isFunction());
1851:       assertEquals((-1), node1.getLineno());
1852:       assertFalse(node1.isRegExp());
1853:       assertFalse(node1.hasMoreThanOneChild());
1854:       assertFalse(node1.isCast());
1855:       assertFalse(node1.isContinue());
1856:       assertTrue(node1.isDelProp());
1857:       assertFalse(node1.isIn());
1858:       assertFalse(node1.isInc());
1859:       assertFalse(node1.isSetterDef());
1860:       assertFalse(node1.isFalse());
1861:       assertFalse(node1.isHook());
1862:       assertFalse(node1.isThis());
1863:       assertFalse(node1.isThrow());
1864:       assertFalse(node1.isComma());
1865:       assertFalse(node1.isInstanceOf());
1866:       assertFalse(node1.isBreak());
1867:       assertFalse(node1.isCase());
1868:       assertFalse(node1.isAnd());
1869:       assertFalse(node1.isWith());
1870:       assertFalse(node1.isObjectLit());
1871:       assertFalse(node1.isNot());
1872:       assertFalse(node1.isSwitch());
1873:       assertEquals((-1), node1.getCharno());
1874:       assertFalse(node1.isGetProp());
1875:       assertFalse(node1.hasOneChild());
1876:       assertFalse(node1.isString());
1877:       assertFalse(node1.isScript());
1878:       assertFalse(node1.isGetElem());
1879:       assertFalse(node1.isAssign());
1880:       assertFalse(node1.isGetterDef());
1881:       assertFalse(node1.isLabelName());
1882:       assertFalse(node1.isDec());
1883:       assertFalse(node1.hasChildren());
1884:       assertFalse(node1.isLabel());
1885:       assertFalse(node1.isVoid());
1886:       assertFalse(node1.isTypeOf());
1887:       assertFalse(node1.isArrayLit());
1888:       assertFalse(node1.isExprResult());
1889:       assertFalse(node1.isDo());
1890:       assertFalse(node1.isDefaultCase());
1891:       assertFalse(node1.isTrue());
1892:       assertFalse(node1.isNew());
1893:       assertFalse(node1.isAssignAdd());
1894:       assertFalse(node1.isOr());
1895:       assertFalse(node1.isEmpty());
1896:       assertFalse(node1.isAdd());
1897:       assertNotSame(node1, node2);
1898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1899:       assertEquals(57, Node.LAST_PROP);
1900:       assertEquals(30, Node.VAR_ARGS_NAME);
1901:       assertEquals(49, Node.DIRECT_EVAL);
1902:       assertEquals(52, Node.LENGTH);
1903:       assertEquals(32, Node.INCRDECR_PROP);
1904:       assertEquals(1, Node.DECR_FLAG);
1905:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1906:       assertEquals(12, Node.COLUMN_BITS);
1907:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1908:       assertEquals(47, Node.IS_DISPATCHER);
1909:       assertEquals(2, Node.POST_FLAG);
1910:       assertEquals(50, Node.FREE_CALL);
1911:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1912:       assertEquals(40, Node.ORIGINALNAME_PROP);
1913:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1914:       assertEquals(46, Node.IS_NAMESPACE);
1915:       assertEquals(54, Node.SLASH_V);
1916:       assertEquals(43, Node.IS_CONSTANT_NAME);
1917:       assertEquals(36, Node.QUOTED_PROP);
1918:       assertEquals(53, Node.INPUT_ID);
1919:       assertEquals(55, Node.INFERRED_FUNCTION);
1920:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1921:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1922:       assertEquals(4095, Node.COLUMN_MASK);
1923:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1924:       assertEquals(56, Node.CHANGE_TIME);
1925:       assertEquals(37, Node.OPT_ARG_NAME);
1926:       assertEquals(8, Node.FLAG_NO_THROWS);
1927:       assertEquals(48, Node.DIRECTIVES);
1928:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1929:       assertEquals(39, Node.EMPTY_BLOCK);
1930:       assertEquals(29, Node.JSDOC_INFO_PROP);
1931:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1932:       assertEquals(57, Node.REFLECTED_OBJECT);
1933:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1934:       assertFalse(iterable0.contains(node0));
1935:       assertFalse(node1.equals((Object)node0));
1936:       assertFalse(node1.equals((Object)node3));
1937:       assertFalse(node1.equals((Object)node2));
1938:       
1939:       boolean boolean3 = node3.isTrue();
1940:       assertFalse(node0.isNot());
1941:       assertFalse(node0.isObjectLit());
1942:       assertFalse(node0.isScript());
1943:       assertFalse(node0.isAssignAdd());
1944:       assertEquals((-1), node0.getSourcePosition());
1945:       assertFalse(node0.isNumber());
1946:       assertFalse(node0.isLabel());
1947:       assertFalse(node0.isLabelName());
1948:       assertFalse(node0.isAnd());
1949:       assertFalse(node0.isFalse());
1950:       assertFalse(node0.isContinue());
1951:       assertFalse(node0.isCast());
1952:       assertFalse(node0.isAdd());
1953:       assertFalse(node0.isNew());
1954:       assertFalse(node0.isVar());
1955:       assertFalse(node0.isDo());
1956:       assertFalse(node0.isWhile());
1957:       assertFalse(node0.isGetProp());
1958:       assertFalse(node0.isOr());
1959:       assertFalse(node0.isTypeOf());
1960:       assertFalse(node0.isNull());
1961:       assertFalse(node0.isDec());
1962:       assertFalse(node0.isReturn());
1963:       assertFalse(node0.isComma());
1964:       assertTrue(node0.hasOneChild());
1965:       assertFalse(node0.isGetElem());
1966:       assertFalse(node0.isName());
1967:       assertFalse(node0.isAssign());
1968:       assertFalse(node0.isDelProp());
1969:       assertFalse(node0.isExprResult());
1970:       assertFalse(node0.isCall());
1971:       assertFalse(node0.isBreak());
1972:       assertFalse(node0.isVoid());
1973:       assertFalse(node0.isTry());
1974:       assertFalse(node0.isFunction());
1975:       assertFalse(node0.isRegExp());
1976:       assertFalse(node0.isDebugger());
1977:       assertFalse(node0.isTrue());
1978:       assertEquals(40, node0.getType());
1979:       assertFalse(node0.isFor());
1980:       assertFalse(node0.isEmpty());
1981:       assertFalse(node0.isGetterDef());
1982:       assertFalse(node0.isDefaultCase());
1983:       assertFalse(node0.isParamList());
1984:       assertFalse(node0.isStringKey());
1985:       assertFalse(node0.isArrayLit());
1986:       assertTrue(node0.isString());
1987:       assertFalse(node0.isBlock());
1988:       assertFalse(node0.isSwitch());
1989:       assertFalse(node0.isHook());
1990:       assertEquals((-1), node0.getCharno());
1991:       assertFalse(node0.isCase());
1992:       assertFalse(node0.isThrow());
1993:       assertFalse(node0.isInc());
1994:       assertFalse(node0.isSetterDef());
1995:       assertTrue(node0.hasChildren());
1996:       assertFalse(node0.isIn());
1997:       assertFalse(node0.isNE());
1998:       assertEquals(1, node0.getChildCount());
1999:       assertFalse(node0.isThis());
2000:       assertFalse(node0.isIf());
2001:       assertFalse(node0.hasMoreThanOneChild());
2002:       assertFalse(node0.isWith());
2003:       assertFalse(node0.isCatch());
2004:       assertFalse(node0.isInstanceOf());
2005:       assertEquals((-1), node0.getLineno());
2006:       assertEquals(40, node3.getType());
2007:       assertFalse(node3.isVoid());
2008:       assertFalse(node3.isDefaultCase());
2009:       assertFalse(node3.isTry());
2010:       assertFalse(node3.isTrue());
2011:       assertFalse(node3.isSetterDef());
2012:       assertFalse(node3.isDebugger());
2013:       assertFalse(node3.isEmpty());
2014:       assertFalse(node3.isStringKey());
2015:       assertFalse(node3.isVar());
2016:       assertFalse(node3.isParamList());
2017:       assertFalse(node3.isArrayLit());
2018:       assertFalse(node3.isFunction());
2019:       assertFalse(node3.isCase());
2020:       assertFalse(node3.isSwitch());
2021:       assertTrue(node3.isString());
2022:       assertEquals((-1), node3.getCharno());
2023:       assertFalse(node3.isInc());
2024:       assertFalse(node3.isIn());
2025:       assertFalse(node3.isGetterDef());
2026:       assertFalse(node3.isNumber());
2027:       assertFalse(node3.isFor());
2028:       assertFalse(node3.isNE());
2029:       assertFalse(node3.isIf());
2030:       assertTrue(node3.hasChildren());
2031:       assertEquals(1, node3.getChildCount());
2032:       assertEquals((-1), node3.getLineno());
2033:       assertFalse(node3.isHook());
2034:       assertFalse(node3.isThis());
2035:       assertFalse(node3.isBlock());
2036:       assertFalse(node3.isCatch());
2037:       assertFalse(node3.hasMoreThanOneChild());
2038:       assertFalse(node3.isInstanceOf());
2039:       assertFalse(node3.isRegExp());
2040:       assertFalse(node3.isNot());
2041:       assertFalse(node3.isWith());
2042:       assertFalse(node3.isAnd());
2043:       assertFalse(node3.isGetProp());
2044:       assertFalse(node3.isScript());
2045:       assertFalse(node3.isObjectLit());
2046:       assertFalse(node3.isLabelName());
2047:       assertFalse(node3.isThrow());
2048:       assertFalse(node3.isLabel());
2049:       assertFalse(node3.isAssignAdd());
2050:       assertFalse(node3.isCast());
2051:       assertFalse(node3.isContinue());
2052:       assertFalse(node3.isFalse());
2053:       assertFalse(node3.isDo());
2054:       assertFalse(node3.isWhile());
2055:       assertFalse(node3.isOr());
2056:       assertFalse(node3.isNew());
2057:       assertFalse(node3.isAdd());
2058:       assertEquals((-1), node3.getSourcePosition());
2059:       assertFalse(node3.isAssign());
2060:       assertFalse(node3.isBreak());
2061:       assertFalse(node3.isGetElem());
2062:       assertFalse(node3.isCall());
2063:       assertFalse(node3.isNull());
2064:       assertTrue(node3.hasOneChild());
2065:       assertFalse(node3.isDelProp());
2066:       assertFalse(node3.isName());
2067:       assertFalse(node3.isExprResult());
2068:       assertFalse(node3.isReturn());
2069:       assertFalse(node3.isComma());
2070:       assertFalse(node3.isDec());
2071:       assertFalse(node3.isTypeOf());
2072:       assertFalse(boolean3);
2073:       assertSame(node0, node3);
2074:       assertSame(node3, node0);
2075:       assertEquals(55, Node.INFERRED_FUNCTION);
2076:       assertEquals(4095, Node.COLUMN_MASK);
2077:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2078:       assertEquals(48, Node.DIRECTIVES);
2079:       assertEquals(39, Node.EMPTY_BLOCK);
2080:       assertEquals(43, Node.IS_CONSTANT_NAME);
2081:       assertEquals(36, Node.QUOTED_PROP);
2082:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2083:       assertEquals(8, Node.FLAG_NO_THROWS);
2084:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2085:       assertEquals(50, Node.FREE_CALL);
2086:       assertEquals(52, Node.LENGTH);
2087:       assertEquals(53, Node.INPUT_ID);
2088:       assertEquals(29, Node.JSDOC_INFO_PROP);
2089:       assertEquals(40, Node.ORIGINALNAME_PROP);
2090:       assertEquals(2, Node.POST_FLAG);
2091:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2092:       assertEquals(57, Node.LAST_PROP);
2093:       assertEquals(30, Node.VAR_ARGS_NAME);
2094:       assertEquals(47, Node.IS_DISPATCHER);
2095:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2096:       assertEquals(12, Node.COLUMN_BITS);
2097:       assertEquals(46, Node.IS_NAMESPACE);
2098:       assertEquals(32, Node.INCRDECR_PROP);
2099:       assertEquals(49, Node.DIRECT_EVAL);
2100:       assertEquals(1, Node.DECR_FLAG);
2101:       assertEquals(37, Node.OPT_ARG_NAME);
2102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2104:       assertEquals(56, Node.CHANGE_TIME);
2105:       assertEquals(54, Node.SLASH_V);
2106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2107:       assertEquals(57, Node.REFLECTED_OBJECT);
2108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2112:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2113:       assertEquals(39, Node.EMPTY_BLOCK);
2114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2115:       assertEquals(50, Node.FREE_CALL);
2116:       assertEquals(8, Node.FLAG_NO_THROWS);
2117:       assertEquals(4095, Node.COLUMN_MASK);
2118:       assertEquals(40, Node.ORIGINALNAME_PROP);
2119:       assertEquals(57, Node.REFLECTED_OBJECT);
2120:       assertEquals(48, Node.DIRECTIVES);
2121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2122:       assertEquals(36, Node.QUOTED_PROP);
2123:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2124:       assertEquals(53, Node.INPUT_ID);
2125:       assertEquals(30, Node.VAR_ARGS_NAME);
2126:       assertEquals(52, Node.LENGTH);
2127:       assertEquals(55, Node.INFERRED_FUNCTION);
2128:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2129:       assertEquals(57, Node.LAST_PROP);
2130:       assertEquals(2, Node.POST_FLAG);
2131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2132:       assertEquals(37, Node.OPT_ARG_NAME);
2133:       assertEquals(56, Node.CHANGE_TIME);
2134:       assertEquals(47, Node.IS_DISPATCHER);
2135:       assertEquals(29, Node.JSDOC_INFO_PROP);
2136:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2139:       assertEquals(46, Node.IS_NAMESPACE);
2140:       assertEquals(49, Node.DIRECT_EVAL);
2141:       assertEquals(43, Node.IS_CONSTANT_NAME);
2142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2143:       assertEquals(54, Node.SLASH_V);
2144:       assertEquals(12, Node.COLUMN_BITS);
2145:       assertEquals(32, Node.INCRDECR_PROP);
2146:       assertEquals(1, Node.DECR_FLAG);
2147:       assertFalse(node0.equals((Object)node1));
2148:       assertFalse(node0.equals((Object)node2));
2149:       assertFalse(node3.equals((Object)node2));
2150:       assertFalse(node3.equals((Object)node1));
2151:       assertTrue(boolean3 == boolean0);
2152:       assertTrue(boolean3 == boolean1);
2153:       assertTrue(boolean3 == boolean2);
2154:       
2155:       Node node4 = node3.copyInformationFromForTree(node0);
2156:       assertNotNull(node4);
2157:       assertFalse(node0.isNot());
2158:       assertFalse(node0.isObjectLit());
2159:       assertFalse(node0.isScript());
2160:       assertFalse(node0.isAssignAdd());
2161:       assertEquals((-1), node0.getSourcePosition());
2162:       assertFalse(node0.isNumber());
2163:       assertFalse(node0.isLabel());
2164:       assertFalse(node0.isLabelName());
2165:       assertFalse(node0.isAnd());
2166:       assertFalse(node0.isFalse());
2167:       assertFalse(node0.isContinue());
2168:       assertFalse(node0.isCast());
2169:       assertFalse(node0.isAdd());
2170:       assertFalse(node0.isNew());
2171:       assertFalse(node0.isVar());
2172:       assertFalse(node0.isDo());
2173:       assertFalse(node0.isWhile());
2174:       assertFalse(node0.isGetProp());
2175:       assertFalse(node0.isOr());
2176:       assertFalse(node0.isTypeOf());
2177:       assertFalse(node0.isNull());
2178:       assertFalse(node0.isDec());
2179:       assertFalse(node0.isReturn());
2180:       assertFalse(node0.isComma());
2181:       assertTrue(node0.hasOneChild());
2182:       assertFalse(node0.isGetElem());
2183:       assertFalse(node0.isName());
2184:       assertFalse(node0.isAssign());
2185:       assertFalse(node0.isDelProp());
2186:       assertFalse(node0.isExprResult());
2187:       assertFalse(node0.isCall());
2188:       assertFalse(node0.isBreak());
2189:       assertFalse(node0.isVoid());
2190:       assertFalse(node0.isTry());
2191:       assertFalse(node0.isFunction());
2192:       assertFalse(node0.isRegExp());
2193:       assertFalse(node0.isDebugger());
2194:       assertFalse(node0.isTrue());
2195:       assertEquals(40, node0.getType());
2196:       assertFalse(node0.isFor());
2197:       assertFalse(node0.isEmpty());
2198:       assertFalse(node0.isGetterDef());
2199:       assertFalse(node0.isDefaultCase());
2200:       assertFalse(node0.isParamList());
2201:       assertFalse(node0.isStringKey());
2202:       assertFalse(node0.isArrayLit());
2203:       assertTrue(node0.isString());
2204:       assertFalse(node0.isBlock());
2205:       assertFalse(node0.isSwitch());
2206:       assertFalse(node0.isHook());
2207:       assertEquals((-1), node0.getCharno());
2208:       assertFalse(node0.isCase());
2209:       assertFalse(node0.isThrow());
2210:       assertFalse(node0.isInc());
2211:       assertFalse(node0.isSetterDef());
2212:       assertTrue(node0.hasChildren());
2213:       assertFalse(node0.isIn());
2214:       assertFalse(node0.isNE());
2215:       assertEquals(1, node0.getChildCount());
2216:       assertFalse(node0.isThis());
2217:       assertFalse(node0.isIf());
2218:       assertFalse(node0.hasMoreThanOneChild());
2219:       assertFalse(node0.isWith());
2220:       assertFalse(node0.isCatch());
2221:       assertFalse(node0.isInstanceOf());
2222:       assertEquals((-1), node0.getLineno());
2223:       assertEquals(40, node3.getType());
2224:       assertFalse(node3.isVoid());
2225:       assertFalse(node3.isDefaultCase());
2226:       assertFalse(node3.isTry());
2227:       assertFalse(node3.isTrue());
2228:       assertFalse(node3.isSetterDef());
2229:       assertFalse(node3.isDebugger());
2230:       assertFalse(node3.isEmpty());
2231:       assertFalse(node3.isStringKey());
2232:       assertFalse(node3.isVar());
2233:       assertFalse(node3.isParamList());
2234:       assertFalse(node3.isArrayLit());
2235:       assertFalse(node3.isFunction());
2236:       assertFalse(node3.isCase());
2237:       assertFalse(node3.isSwitch());
2238:       assertTrue(node3.isString());
2239:       assertEquals((-1), node3.getCharno());
2240:       assertFalse(node3.isInc());
2241:       assertFalse(node3.isIn());
2242:       assertFalse(node3.isGetterDef());
2243:       assertFalse(node3.isNumber());
2244:       assertFalse(node3.isFor());
2245:       assertFalse(node3.isNE());
2246:       assertFalse(node3.isIf());
2247:       assertTrue(node3.hasChildren());
2248:       assertEquals(1, node3.getChildCount());
2249:       assertEquals((-1), node3.getLineno());
2250:       assertFalse(node3.isHook());
2251:       assertFalse(node3.isThis());
2252:       assertFalse(node3.isBlock());
2253:       assertFalse(node3.isCatch());
2254:       assertFalse(node3.hasMoreThanOneChild());
2255:       assertFalse(node3.isInstanceOf());
2256:       assertFalse(node3.isRegExp());
2257:       assertFalse(node3.isNot());
2258:       assertFalse(node3.isWith());
2259:       assertFalse(node3.isAnd());
2260:       assertFalse(node3.isGetProp());
2261:       assertFalse(node3.isScript());
2262:       assertFalse(node3.isObjectLit());
2263:       assertFalse(node3.isLabelName());
2264:       assertFalse(node3.isThrow());
2265:       assertFalse(node3.isLabel());
2266:       assertFalse(node3.isAssignAdd());
2267:       assertFalse(node3.isCast());
2268:       assertFalse(node3.isContinue());
2269:       assertFalse(node3.isFalse());
2270:       assertFalse(node3.isDo());
2271:       assertFalse(node3.isWhile());
2272:       assertFalse(node3.isOr());
2273:       assertFalse(node3.isNew());
2274:       assertFalse(node3.isAdd());
2275:       assertEquals((-1), node3.getSourcePosition());
2276:       assertFalse(node3.isAssign());
2277:       assertFalse(node3.isBreak());
2278:       assertFalse(node3.isGetElem());
2279:       assertFalse(node3.isCall());
2280:       assertFalse(node3.isNull());
2281:       assertTrue(node3.hasOneChild());
2282:       assertFalse(node3.isDelProp());
2283:       assertFalse(node3.isName());
2284:       assertFalse(node3.isExprResult());
2285:       assertFalse(node3.isReturn());
2286:       assertFalse(node3.isComma());
2287:       assertFalse(node3.isDec());
2288:       assertFalse(node3.isTypeOf());
2289:       assertFalse(node4.isWhile());
2290:       assertFalse(node4.isContinue());
2291:       assertFalse(node4.isBlock());
2292:       assertFalse(node4.isReturn());
2293:       assertFalse(node4.isVar());
2294:       assertFalse(node4.isAdd());
2295:       assertFalse(node4.isAssignAdd());
2296:       assertTrue(node4.isString());
2297:       assertFalse(node4.isDo());
2298:       assertFalse(node4.isNew());
2299:       assertFalse(node4.isTypeOf());
2300:       assertFalse(node4.isNull());
2301:       assertFalse(node4.isAssign());
2302:       assertFalse(node4.isOr());
2303:       assertFalse(node4.isDec());
2304:       assertFalse(node4.hasMoreThanOneChild());
2305:       assertFalse(node4.isCatch());
2306:       assertFalse(node4.isGetElem());
2307:       assertFalse(node4.isExprResult());
2308:       assertFalse(node4.isCall());
2309:       assertFalse(node4.isName());
2310:       assertEquals((-1), node4.getLineno());
2311:       assertFalse(node4.isDefaultCase());
2312:       assertFalse(node4.isWith());
2313:       assertFalse(node4.isScript());
2314:       assertFalse(node4.isTrue());
2315:       assertFalse(node4.isRegExp());
2316:       assertFalse(node4.isTry());
2317:       assertFalse(node4.isGetterDef());
2318:       assertFalse(node4.isNumber());
2319:       assertFalse(node4.isStringKey());
2320:       assertFalse(node4.isParamList());
2321:       assertFalse(node4.isLabel());
2322:       assertFalse(node4.isArrayLit());
2323:       assertFalse(node4.isLabelName());
2324:       assertFalse(node4.isSwitch());
2325:       assertEquals((-1), node4.getCharno());
2326:       assertFalse(node4.isIn());
2327:       assertFalse(node4.isHook());
2328:       assertFalse(node4.isInc());
2329:       assertFalse(node4.isCase());
2330:       assertFalse(node4.isBreak());
2331:       assertFalse(node4.isDelProp());
2332:       assertFalse(node4.isIf());
2333:       assertTrue(node4.hasOneChild());
2334:       assertFalse(node4.isEmpty());
2335:       assertFalse(node4.isNE());
2336:       assertFalse(node4.isFor());
2337:       assertFalse(node4.isThis());
2338:       assertEquals(1, node4.getChildCount());
2339:       assertFalse(node4.isComma());
2340:       assertTrue(node4.hasChildren());
2341:       assertFalse(node4.isInstanceOf());
2342:       assertFalse(node4.isVoid());
2343:       assertFalse(node4.isDebugger());
2344:       assertFalse(node4.isFunction());
2345:       assertFalse(node4.isObjectLit());
2346:       assertEquals(40, node4.getType());
2347:       assertFalse(node4.isNot());
2348:       assertFalse(node4.isGetProp());
2349:       assertFalse(node4.isSetterDef());
2350:       assertFalse(node4.isThrow());
2351:       assertFalse(node4.isFalse());
2352:       assertEquals((-1), node4.getSourcePosition());
2353:       assertFalse(node4.isCast());
2354:       assertFalse(node4.isAnd());
2355:       assertSame(node0, node4);
2356:       assertSame(node0, node3);
2357:       assertSame(node3, node0);
2358:       assertSame(node3, node4);
2359:       assertSame(node4, node0);
2360:       assertSame(node4, node3);
2361:       assertEquals(55, Node.INFERRED_FUNCTION);
2362:       assertEquals(4095, Node.COLUMN_MASK);
2363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2364:       assertEquals(48, Node.DIRECTIVES);
2365:       assertEquals(39, Node.EMPTY_BLOCK);
2366:       assertEquals(43, Node.IS_CONSTANT_NAME);
2367:       assertEquals(36, Node.QUOTED_PROP);
2368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2369:       assertEquals(8, Node.FLAG_NO_THROWS);
2370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2371:       assertEquals(50, Node.FREE_CALL);
2372:       assertEquals(52, Node.LENGTH);
2373:       assertEquals(53, Node.INPUT_ID);
2374:       assertEquals(29, Node.JSDOC_INFO_PROP);
2375:       assertEquals(40, Node.ORIGINALNAME_PROP);
2376:       assertEquals(2, Node.POST_FLAG);
2377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2378:       assertEquals(57, Node.LAST_PROP);
2379:       assertEquals(30, Node.VAR_ARGS_NAME);
2380:       assertEquals(47, Node.IS_DISPATCHER);
2381:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2382:       assertEquals(12, Node.COLUMN_BITS);
2383:       assertEquals(46, Node.IS_NAMESPACE);
2384:       assertEquals(32, Node.INCRDECR_PROP);
2385:       assertEquals(49, Node.DIRECT_EVAL);
2386:       assertEquals(1, Node.DECR_FLAG);
2387:       assertEquals(37, Node.OPT_ARG_NAME);
2388:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2389:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2390:       assertEquals(56, Node.CHANGE_TIME);
2391:       assertEquals(54, Node.SLASH_V);
2392:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2393:       assertEquals(57, Node.REFLECTED_OBJECT);
2394:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2395:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2396:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2397:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2398:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2399:       assertEquals(39, Node.EMPTY_BLOCK);
2400:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2401:       assertEquals(50, Node.FREE_CALL);
2402:       assertEquals(8, Node.FLAG_NO_THROWS);
2403:       assertEquals(4095, Node.COLUMN_MASK);
2404:       assertEquals(40, Node.ORIGINALNAME_PROP);
2405:       assertEquals(57, Node.REFLECTED_OBJECT);
2406:       assertEquals(48, Node.DIRECTIVES);
2407:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2408:       assertEquals(36, Node.QUOTED_PROP);
2409:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2410:       assertEquals(53, Node.INPUT_ID);
2411:       assertEquals(30, Node.VAR_ARGS_NAME);
2412:       assertEquals(52, Node.LENGTH);
2413:       assertEquals(55, Node.INFERRED_FUNCTION);
2414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2415:       assertEquals(57, Node.LAST_PROP);
2416:       assertEquals(2, Node.POST_FLAG);
2417:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2418:       assertEquals(37, Node.OPT_ARG_NAME);
2419:       assertEquals(56, Node.CHANGE_TIME);
2420:       assertEquals(47, Node.IS_DISPATCHER);
2421:       assertEquals(29, Node.JSDOC_INFO_PROP);
2422:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2423:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2424:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2425:       assertEquals(46, Node.IS_NAMESPACE);
2426:       assertEquals(49, Node.DIRECT_EVAL);
2427:       assertEquals(43, Node.IS_CONSTANT_NAME);
2428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2429:       assertEquals(54, Node.SLASH_V);
2430:       assertEquals(12, Node.COLUMN_BITS);
2431:       assertEquals(32, Node.INCRDECR_PROP);
2432:       assertEquals(1, Node.DECR_FLAG);
2433:       assertEquals(56, Node.CHANGE_TIME);
2434:       assertEquals(32, Node.INCRDECR_PROP);
2435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2436:       assertEquals(37, Node.OPT_ARG_NAME);
2437:       assertEquals(29, Node.JSDOC_INFO_PROP);
2438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2439:       assertEquals(46, Node.IS_NAMESPACE);
2440:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2442:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2443:       assertEquals(49, Node.DIRECT_EVAL);
2444:       assertEquals(1, Node.DECR_FLAG);
2445:       assertEquals(12, Node.COLUMN_BITS);
2446:       assertEquals(4095, Node.COLUMN_MASK);
2447:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2448:       assertEquals(48, Node.DIRECTIVES);
2449:       assertEquals(8, Node.FLAG_NO_THROWS);
2450:       assertEquals(39, Node.EMPTY_BLOCK);
2451:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2453:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2454:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2455:       assertEquals(55, Node.INFERRED_FUNCTION);
2456:       assertEquals(52, Node.LENGTH);
2457:       assertEquals(57, Node.REFLECTED_OBJECT);
2458:       assertEquals(50, Node.FREE_CALL);
2459:       assertEquals(36, Node.QUOTED_PROP);
2460:       assertEquals(54, Node.SLASH_V);
2461:       assertEquals(53, Node.INPUT_ID);
2462:       assertEquals(43, Node.IS_CONSTANT_NAME);
2463:       assertEquals(57, Node.LAST_PROP);
2464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2465:       assertEquals(40, Node.ORIGINALNAME_PROP);
2466:       assertEquals(47, Node.IS_DISPATCHER);
2467:       assertEquals(2, Node.POST_FLAG);
2468:       assertEquals(30, Node.VAR_ARGS_NAME);
2469:       assertFalse(node0.equals((Object)node1));
2470:       assertFalse(node0.equals((Object)node2));
2471:       assertFalse(node3.equals((Object)node2));
2472:       assertFalse(node3.equals((Object)node1));
2473:       assertFalse(node4.equals((Object)node1));
2474:       assertFalse(node4.equals((Object)node2));
2475:       
2476:       // Undeclared exception!
2477:       try { 
2478:         node4.checkTreeEquals(node2);
2479:         fail("Expecting exception: IllegalStateException");
2480:       
2481:       } catch(IllegalStateException e) {
2482:          //
2483:          // -900
2484:          //
2485:          verifyException("com.google.javascript.rhino.Token", e);
2486:       }
2487:   }
2488: }
RegularFileObject[/tmp/EvoSuite_415_1628160754622/com/google/javascript/rhino/Node_415_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:52:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_415_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_415_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_415_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
268:       "com.google.javascript.rhino.jstype.JSType$1",
269:       "com.google.javascript.rhino.jstype.JSType",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Preconditions",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.javascript.rhino.SimpleErrorReporter",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.base.Objects",
352:       "com.google.common.collect.Sets",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.TemplatizedType",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.Iterators$11",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.jstype.NamespaceType",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 10:52:35.317 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("d");
assertNotNull(node0);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node1 = new Node(31);
assertNotNull(node1);
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertTrue(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node0.isEquivalentTo(node1, false, false, false);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertTrue(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

InputId inputId0 = node0.getInputId();
assertNull(inputId0);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));

Node node2 = new Node((-900), node0);
assertNotNull(node2);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isCast());
assertFalse(node2.isParamList());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertEquals((-900), node2.getType());
assertFalse(node2.isNull());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
assertNotNull(node_AncestorIterable0);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isCast());
assertFalse(node2.isParamList());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertEquals((-900), node2.getType());
assertFalse(node2.isNull());
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

node0.addChildToBack(node1);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertTrue(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertTrue(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotSame(node1, node2);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

String string0 = node1.getQualifiedName();
assertNull(string0);
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertTrue(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotSame(node1, node2);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

boolean boolean2 = node1.isOptionalArg();
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertTrue(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(boolean2);
assertNotSame(node1, node2);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

node2.setVarArgs(false);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertTrue(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isCast());
assertFalse(node2.isParamList());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertEquals((-900), node2.getType());
assertFalse(node2.isNull());
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node3 = node0.getLastSibling();
assertNotNull(node3);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertTrue(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertEquals(40, node3.getType());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isTrue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isEmpty());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFunction());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertTrue(node3.isString());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertTrue(node3.hasChildren());
assertEquals(1, node3.getChildCount());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isThrow());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAssign());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isExprResult());
assertFalse(node3.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertSame(node0, node3);
assertSame(node3, node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertTrue(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotSame(node1, node2);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(iterable0.contains(node0));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));

boolean boolean3 = node3.isTrue();
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertTrue(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertEquals(40, node3.getType());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isTrue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isEmpty());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFunction());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertTrue(node3.isString());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertTrue(node3.hasChildren());
assertEquals(1, node3.getChildCount());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isThrow());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAssign());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isExprResult());
assertFalse(node3.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(boolean3);
assertSame(node0, node3);
assertSame(node3, node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);

Node node4 = node3.copyInformationFromForTree(node0);
assertNotNull(node4);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertTrue(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertEquals(40, node3.getType());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isTrue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isEmpty());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFunction());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertTrue(node3.isString());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertTrue(node3.hasChildren());
assertEquals(1, node3.getChildCount());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isThrow());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAssign());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isExprResult());
assertFalse(node3.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.isBlock());
assertFalse(node4.isReturn());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isAssignAdd());
assertTrue(node4.isString());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNull());
assertFalse(node4.isAssign());
assertFalse(node4.isOr());
assertFalse(node4.isDec());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isWith());
assertFalse(node4.isScript());
assertFalse(node4.isTrue());
assertFalse(node4.isRegExp());
assertFalse(node4.isTry());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isLabel());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isIn());
assertFalse(node4.isHook());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isBreak());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertTrue(node4.hasOneChild());
assertFalse(node4.isEmpty());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isComma());
assertTrue(node4.hasChildren());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isObjectLit());
assertEquals(40, node4.getType());
assertFalse(node4.isNot());
assertFalse(node4.isGetProp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isCast());
assertFalse(node4.isAnd());
assertSame(node0, node4);
assertSame(node0, node3);
assertSame(node3, node0);
assertSame(node3, node4);
assertSame(node4, node0);
assertSame(node4, node3);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));

node4.checkTreeEquals(node2);

* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/22
* Done!

* Computation finished
