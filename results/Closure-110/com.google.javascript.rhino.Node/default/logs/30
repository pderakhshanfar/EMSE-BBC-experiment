* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 15353
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3122876128
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:59:32.406 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:59:41.318 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 11:02:19.211 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 644 generations, 276243 statements, best individual has fitness: 2826.0
* Minimizing test suite
[MASTER] 11:10:55.471 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 798
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 626
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 107
* Number of covered goals: 107
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 462
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2210
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 591
* Generated 1126 tests with total length 10550
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:12:06.422 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6776% of time used, but only 77/1126 tests minimized), falling back to using all assertions
[MASTER] 11:12:25.929 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
[MASTER] 11:12:39.342 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 11:13:07.001 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_443_1628161986971/com/google/javascript/rhino/Node_443_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_443_1628161986971/com/google/javascript/rhino/Node_443_tmp__ESTest_scaffolding.java]]
[MASTER] 11:13:07.001 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:13:07.001 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:13:07.005 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 409
[MASTER] 11:13:07.006 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_443_1628161986971/com/google/javascript/rhino/Node_443_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:13:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_443_tmp__ESTest extends Node_443_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("[tYZ_Vddutv0?<+bB$\"", 2287, 2287);
23:       assertNotNull(node0);
24:       assertEquals(2287, node0.getLineno());
25:       assertFalse(node0.isNew());
26:       assertFalse(node0.isBlock());
27:       assertFalse(node0.isName());
28:       assertTrue(node0.isString());
29:       assertFalse(node0.isVar());
30:       assertFalse(node0.isStringKey());
31:       assertFalse(node0.isNull());
32:       assertFalse(node0.isDo());
33:       assertFalse(node0.isSetterDef());
34:       assertFalse(node0.isAdd());
35:       assertFalse(node0.isReturn());
36:       assertFalse(node0.isOr());
37:       assertFalse(node0.isWhile());
38:       assertFalse(node0.hasChildren());
39:       assertFalse(node0.isTypeOf());
40:       assertFalse(node0.isAssign());
41:       assertFalse(node0.isRegExp());
42:       assertFalse(node0.isDec());
43:       assertFalse(node0.isGetElem());
44:       assertFalse(node0.isCall());
45:       assertFalse(node0.hasMoreThanOneChild());
46:       assertFalse(node0.isCatch());
47:       assertFalse(node0.isDebugger());
48:       assertFalse(node0.isNot());
49:       assertEquals(9369839, node0.getSourcePosition());
50:       assertFalse(node0.isObjectLit());
51:       assertFalse(node0.isAnd());
52:       assertEquals(40, node0.getType());
53:       assertFalse(node0.isContinue());
54:       assertFalse(node0.isFalse());
55:       assertFalse(node0.isFunction());
56:       assertFalse(node0.isCast());
57:       assertFalse(node0.isHook());
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isCase());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isIn());
64:       assertFalse(node0.isThis());
65:       assertFalse(node0.isNE());
66:       assertFalse(node0.isBreak());
67:       assertFalse(node0.isDelProp());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isComma());
70:       assertEquals(2287, node0.getCharno());
71:       assertFalse(node0.isExprResult());
72:       assertFalse(node0.isWith());
73:       assertFalse(node0.isInstanceOf());
74:       assertFalse(node0.isArrayLit());
75:       assertFalse(node0.isTry());
76:       assertFalse(node0.hasOneChild());
77:       assertFalse(node0.isVoid());
78:       assertFalse(node0.isTrue());
79:       assertFalse(node0.isFor());
80:       assertFalse(node0.isDefaultCase());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isNumber());
83:       assertFalse(node0.isScript());
84:       assertFalse(node0.isEmpty());
85:       assertEquals(0, node0.getChildCount());
86:       assertFalse(node0.isLabel());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isParamList());
89:       assertFalse(node0.isLabelName());
90:       assertEquals(4095, Node.COLUMN_MASK);
91:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
92:       assertEquals(55, Node.INFERRED_FUNCTION);
93:       assertEquals(36, Node.QUOTED_PROP);
94:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
95:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
96:       assertEquals(43, Node.IS_CONSTANT_NAME);
97:       assertEquals(48, Node.DIRECTIVES);
98:       assertEquals(40, Node.ORIGINALNAME_PROP);
99:       assertEquals(57, Node.REFLECTED_OBJECT);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(52, Node.LENGTH);
102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
103:       assertEquals(8, Node.FLAG_NO_THROWS);
104:       assertEquals(39, Node.EMPTY_BLOCK);
105:       assertEquals(47, Node.IS_DISPATCHER);
106:       assertEquals(57, Node.LAST_PROP);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(53, Node.INPUT_ID);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(46, Node.IS_NAMESPACE);
112:       assertEquals(30, Node.VAR_ARGS_NAME);
113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(54, Node.SLASH_V);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(49, Node.DIRECT_EVAL);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
124:       assertEquals(32, Node.INCRDECR_PROP);
125:       assertEquals(1, Node.DECR_FLAG);
126:       
127:       Node node1 = Node.newString(39, ",AF", 2, 1422);
128:       assertNotNull(node1);
129:       assertFalse(node1.isDelProp());
130:       assertFalse(node1.isEmpty());
131:       assertFalse(node1.isTry());
132:       assertFalse(node1.isArrayLit());
133:       assertFalse(node1.isNE());
134:       assertFalse(node1.isVoid());
135:       assertFalse(node1.isTrue());
136:       assertFalse(node1.isIf());
137:       assertFalse(node1.isGetterDef());
138:       assertFalse(node1.isDebugger());
139:       assertFalse(node1.isIn());
140:       assertFalse(node1.isFunction());
141:       assertFalse(node1.isDefaultCase());
142:       assertEquals(0, node1.getChildCount());
143:       assertFalse(node1.isStringKey());
144:       assertFalse(node1.isThrow());
145:       assertFalse(node1.isSwitch());
146:       assertFalse(node1.isSetterDef());
147:       assertFalse(node1.isInc());
148:       assertFalse(node1.isParamList());
149:       assertFalse(node1.hasMoreThanOneChild());
150:       assertFalse(node1.isCatch());
151:       assertFalse(node1.isInstanceOf());
152:       assertEquals(9614, node1.getSourcePosition());
153:       assertFalse(node1.isCase());
154:       assertFalse(node1.isThis());
155:       assertFalse(node1.isRegExp());
156:       assertFalse(node1.isWith());
157:       assertEquals(39, node1.getType());
158:       assertFalse(node1.isBlock());
159:       assertFalse(node1.isFor());
160:       assertFalse(node1.isHook());
161:       assertFalse(node1.isCast());
162:       assertFalse(node1.isLabelName());
163:       assertFalse(node1.hasOneChild());
164:       assertFalse(node1.isGetElem());
165:       assertFalse(node1.isScript());
166:       assertFalse(node1.isNot());
167:       assertFalse(node1.isOr());
168:       assertFalse(node1.isAnd());
169:       assertFalse(node1.isContinue());
170:       assertFalse(node1.isDo());
171:       assertFalse(node1.isAssignAdd());
172:       assertEquals(2, node1.getLineno());
173:       assertFalse(node1.isLabel());
174:       assertFalse(node1.isCall());
175:       assertFalse(node1.isVar());
176:       assertFalse(node1.isFalse());
177:       assertFalse(node1.isName());
178:       assertFalse(node1.isAdd());
179:       assertFalse(node1.isBreak());
180:       assertFalse(node1.isNew());
181:       assertFalse(node1.isNull());
182:       assertFalse(node1.isString());
183:       assertFalse(node1.isObjectLit());
184:       assertTrue(node1.isNumber());
185:       assertFalse(node1.isGetProp());
186:       assertFalse(node1.isComma());
187:       assertFalse(node1.isExprResult());
188:       assertFalse(node1.isTypeOf());
189:       assertFalse(node1.isWhile());
190:       assertFalse(node1.isAssign());
191:       assertFalse(node1.isReturn());
192:       assertFalse(node1.isDec());
193:       assertFalse(node1.hasChildren());
194:       assertEquals(1422, node1.getCharno());
195:       assertEquals(1, Node.DECR_FLAG);
196:       assertEquals(30, Node.VAR_ARGS_NAME);
197:       assertEquals(49, Node.DIRECT_EVAL);
198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
199:       assertEquals(57, Node.LAST_PROP);
200:       assertEquals(12, Node.COLUMN_BITS);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(46, Node.IS_NAMESPACE);
203:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
204:       assertEquals(2, Node.POST_FLAG);
205:       assertEquals(37, Node.OPT_ARG_NAME);
206:       assertEquals(40, Node.ORIGINALNAME_PROP);
207:       assertEquals(50, Node.FREE_CALL);
208:       assertEquals(54, Node.SLASH_V);
209:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
210:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(43, Node.IS_CONSTANT_NAME);
214:       assertEquals(48, Node.DIRECTIVES);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
217:       assertEquals(4095, Node.COLUMN_MASK);
218:       assertEquals(47, Node.IS_DISPATCHER);
219:       assertEquals(57, Node.REFLECTED_OBJECT);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(53, Node.INPUT_ID);
223:       assertEquals(39, Node.EMPTY_BLOCK);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(15, Node.NO_SIDE_EFFECTS);
226:       assertEquals(55, Node.INFERRED_FUNCTION);
227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
228:       assertEquals(29, Node.JSDOC_INFO_PROP);
229:       assertEquals(52, Node.LENGTH);
230:       assertEquals(8, Node.FLAG_NO_THROWS);
231:       assertFalse(node1.equals((Object)node0));
232:       assertNotSame(node1, node0);
233:       
234:       Node node2 = Node.newNumber(287.52491767231, 51, 30);
235:       assertNotNull(node2);
236:       assertFalse(node2.isAssignAdd());
237:       assertFalse(node2.isLabelName());
238:       assertFalse(node2.isOr());
239:       assertFalse(node2.isAdd());
240:       assertFalse(node2.isNew());
241:       assertFalse(node2.isDo());
242:       assertFalse(node2.isCast());
243:       assertFalse(node2.isContinue());
244:       assertFalse(node2.isVar());
245:       assertFalse(node2.isLabel());
246:       assertFalse(node2.isComma());
247:       assertFalse(node2.isGetProp());
248:       assertFalse(node2.isNull());
249:       assertFalse(node2.isBreak());
250:       assertFalse(node2.isName());
251:       assertFalse(node2.isAnd());
252:       assertEquals(208926, node2.getSourcePosition());
253:       assertEquals(30, node2.getCharno());
254:       assertFalse(node2.isNot());
255:       assertFalse(node2.isObjectLit());
256:       assertFalse(node2.isExprResult());
257:       assertFalse(node2.isTrue());
258:       assertFalse(node2.isWhile());
259:       assertFalse(node2.isVoid());
260:       assertFalse(node2.isGetElem());
261:       assertFalse(node2.isCall());
262:       assertFalse(node2.isReturn());
263:       assertFalse(node2.hasChildren());
264:       assertFalse(node2.isDec());
265:       assertFalse(node2.isTypeOf());
266:       assertFalse(node2.isAssign());
267:       assertFalse(node2.isNE());
268:       assertTrue(node2.isNumber());
269:       assertFalse(node2.isIf());
270:       assertFalse(node2.isDelProp());
271:       assertFalse(node2.isEmpty());
272:       assertFalse(node2.isString());
273:       assertFalse(node2.isIn());
274:       assertFalse(node2.isGetterDef());
275:       assertEquals(51, node2.getLineno());
276:       assertFalse(node2.isSwitch());
277:       assertFalse(node2.isInc());
278:       assertFalse(node2.isFunction());
279:       assertFalse(node2.isDebugger());
280:       assertFalse(node2.isDefaultCase());
281:       assertFalse(node2.isArrayLit());
282:       assertFalse(node2.isThrow());
283:       assertEquals(0, node2.getChildCount());
284:       assertFalse(node2.isFalse());
285:       assertFalse(node2.isThis());
286:       assertFalse(node2.isParamList());
287:       assertFalse(node2.isSetterDef());
288:       assertFalse(node2.isStringKey());
289:       assertFalse(node2.isBlock());
290:       assertFalse(node2.isScript());
291:       assertFalse(node2.isCase());
292:       assertFalse(node2.hasOneChild());
293:       assertFalse(node2.isTry());
294:       assertFalse(node2.hasMoreThanOneChild());
295:       assertFalse(node2.isCatch());
296:       assertFalse(node2.isInstanceOf());
297:       assertFalse(node2.isHook());
298:       assertFalse(node2.isFor());
299:       assertFalse(node2.isWith());
300:       assertEquals(39, node2.getType());
301:       assertFalse(node2.isRegExp());
302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
303:       assertEquals(52, Node.LENGTH);
304:       assertEquals(57, Node.LAST_PROP);
305:       assertEquals(57, Node.REFLECTED_OBJECT);
306:       assertEquals(54, Node.SLASH_V);
307:       assertEquals(30, Node.VAR_ARGS_NAME);
308:       assertEquals(49, Node.DIRECT_EVAL);
309:       assertEquals(40, Node.ORIGINALNAME_PROP);
310:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
311:       assertEquals(32, Node.INCRDECR_PROP);
312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(46, Node.IS_NAMESPACE);
315:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
316:       assertEquals(1, Node.DECR_FLAG);
317:       assertEquals(50, Node.FREE_CALL);
318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
319:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
320:       assertEquals(43, Node.IS_CONSTANT_NAME);
321:       assertEquals(36, Node.QUOTED_PROP);
322:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
323:       assertEquals(4095, Node.COLUMN_MASK);
324:       assertEquals(48, Node.DIRECTIVES);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(2, Node.POST_FLAG);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(56, Node.CHANGE_TIME);
329:       assertEquals(47, Node.IS_DISPATCHER);
330:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
331:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
333:       assertEquals(55, Node.INFERRED_FUNCTION);
334:       assertEquals(39, Node.EMPTY_BLOCK);
335:       assertEquals(29, Node.JSDOC_INFO_PROP);
336:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
337:       assertEquals(53, Node.INPUT_ID);
338:       assertFalse(node2.equals((Object)node1));
339:       assertFalse(node2.equals((Object)node0));
340:       
341:       Iterable<Node> iterable0 = node2.children();
342:       assertNotNull(iterable0);
343:       assertFalse(node2.isAssignAdd());
344:       assertFalse(node2.isLabelName());
345:       assertFalse(node2.isOr());
346:       assertFalse(node2.isAdd());
347:       assertFalse(node2.isNew());
348:       assertFalse(node2.isDo());
349:       assertFalse(node2.isCast());
350:       assertFalse(node2.isContinue());
351:       assertFalse(node2.isVar());
352:       assertFalse(node2.isLabel());
353:       assertFalse(node2.isComma());
354:       assertFalse(node2.isGetProp());
355:       assertFalse(node2.isNull());
356:       assertFalse(node2.isBreak());
357:       assertFalse(node2.isName());
358:       assertFalse(node2.isAnd());
359:       assertEquals(208926, node2.getSourcePosition());
360:       assertEquals(30, node2.getCharno());
361:       assertFalse(node2.isNot());
362:       assertFalse(node2.isObjectLit());
363:       assertFalse(node2.isExprResult());
364:       assertFalse(node2.isTrue());
365:       assertFalse(node2.isWhile());
366:       assertFalse(node2.isVoid());
367:       assertFalse(node2.isGetElem());
368:       assertFalse(node2.isCall());
369:       assertFalse(node2.isReturn());
370:       assertFalse(node2.hasChildren());
371:       assertFalse(node2.isDec());
372:       assertFalse(node2.isTypeOf());
373:       assertFalse(node2.isAssign());
374:       assertFalse(node2.isNE());
375:       assertTrue(node2.isNumber());
376:       assertFalse(node2.isIf());
377:       assertFalse(node2.isDelProp());
378:       assertFalse(node2.isEmpty());
379:       assertFalse(node2.isString());
380:       assertFalse(node2.isIn());
381:       assertFalse(node2.isGetterDef());
382:       assertEquals(51, node2.getLineno());
383:       assertFalse(node2.isSwitch());
384:       assertFalse(node2.isInc());
385:       assertFalse(node2.isFunction());
386:       assertFalse(node2.isDebugger());
387:       assertFalse(node2.isDefaultCase());
388:       assertFalse(node2.isArrayLit());
389:       assertFalse(node2.isThrow());
390:       assertEquals(0, node2.getChildCount());
391:       assertFalse(node2.isFalse());
392:       assertFalse(node2.isThis());
393:       assertFalse(node2.isParamList());
394:       assertFalse(node2.isSetterDef());
395:       assertFalse(node2.isStringKey());
396:       assertFalse(node2.isBlock());
397:       assertFalse(node2.isScript());
398:       assertFalse(node2.isCase());
399:       assertFalse(node2.hasOneChild());
400:       assertFalse(node2.isTry());
401:       assertFalse(node2.hasMoreThanOneChild());
402:       assertFalse(node2.isCatch());
403:       assertFalse(node2.isInstanceOf());
404:       assertFalse(node2.isHook());
405:       assertFalse(node2.isFor());
406:       assertFalse(node2.isWith());
407:       assertEquals(39, node2.getType());
408:       assertFalse(node2.isRegExp());
409:       assertFalse(iterable0.contains(node2));
410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
411:       assertEquals(52, Node.LENGTH);
412:       assertEquals(57, Node.LAST_PROP);
413:       assertEquals(57, Node.REFLECTED_OBJECT);
414:       assertEquals(54, Node.SLASH_V);
415:       assertEquals(30, Node.VAR_ARGS_NAME);
416:       assertEquals(49, Node.DIRECT_EVAL);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
419:       assertEquals(32, Node.INCRDECR_PROP);
420:       assertEquals(51, Node.STATIC_SOURCE_FILE);
421:       assertEquals(12, Node.COLUMN_BITS);
422:       assertEquals(46, Node.IS_NAMESPACE);
423:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
424:       assertEquals(1, Node.DECR_FLAG);
425:       assertEquals(50, Node.FREE_CALL);
426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(36, Node.QUOTED_PROP);
430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
431:       assertEquals(4095, Node.COLUMN_MASK);
432:       assertEquals(48, Node.DIRECTIVES);
433:       assertEquals(37, Node.OPT_ARG_NAME);
434:       assertEquals(2, Node.POST_FLAG);
435:       assertEquals(8, Node.FLAG_NO_THROWS);
436:       assertEquals(56, Node.CHANGE_TIME);
437:       assertEquals(47, Node.IS_DISPATCHER);
438:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
441:       assertEquals(55, Node.INFERRED_FUNCTION);
442:       assertEquals(39, Node.EMPTY_BLOCK);
443:       assertEquals(29, Node.JSDOC_INFO_PROP);
444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
445:       assertEquals(53, Node.INPUT_ID);
446:       assertFalse(node2.equals((Object)node1));
447:       assertFalse(node2.equals((Object)node0));
448:       
449:       try { 
450:         node0.setDouble(1.0);
451:         fail("Expecting exception: UnsupportedOperationException");
452:       
453:       } catch(UnsupportedOperationException e) {
454:          //
455:          // STRING [tYZ_Vddutv0?<+bB$\" 2287 is not a string node
456:          //
457:          verifyException("com.google.javascript.rhino.Node", e);
458:       }
459:   }
460: }
RegularFileObject[/tmp/EvoSuite_443_1628161986971/com/google/javascript/rhino/Node_443_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:13:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_443_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_443_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.javascript.rhino.jstype.NoType",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_443_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.JSDocInfo",
269:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
270:       "com.google.javascript.rhino.SimpleErrorReporter",
271:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
272:       "com.google.common.base.Joiner",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
302:       "com.google.javascript.rhino.jstype.JSType$1",
303:       "com.google.javascript.rhino.jstype.JSType",
304:       "com.google.javascript.rhino.jstype.ObjectType",
305:       "com.google.javascript.rhino.jstype.ProxyObjectType",
306:       "com.google.javascript.rhino.jstype.TemplateType",
307:       "com.google.javascript.rhino.jstype.ValueType",
308:       "com.google.javascript.rhino.jstype.BooleanType",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.rhino.jstype.NumberType",
311:       "com.google.javascript.rhino.jstype.StringType",
312:       "com.google.javascript.rhino.jstype.UnknownType",
313:       "com.google.javascript.rhino.jstype.VoidType",
314:       "com.google.javascript.rhino.jstype.AllType",
315:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
316:       "com.google.common.collect.ImmutableMap",
317:       "com.google.common.collect.ImmutableBiMap",
318:       "com.google.common.collect.EmptyImmutableBiMap",
319:       "com.google.javascript.rhino.jstype.PropertyMap$1",
320:       "com.google.javascript.rhino.jstype.PropertyMap",
321:       "com.google.javascript.rhino.jstype.FunctionType",
322:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.common.base.Objects",
350:       "com.google.common.collect.Sets",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.common.collect.ImmutableList$1",
353:       "com.google.common.collect.Platform",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.Iterables",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.javascript.rhino.jstype.JSType$TypePair",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.common.collect.AbstractMultimap$Values",
368:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
369:       "com.google.common.collect.AbstractMapBasedMultimap$1",
370:       "com.google.common.collect.Multimaps$Entries",
371:       "com.google.common.collect.AbstractMultimap$Entries",
372:       "com.google.common.collect.AbstractMapBasedMultimap$2",
373:       "com.google.javascript.rhino.JSDocInfo$Visibility",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 11:13:07.010 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("[tYZ_Vddutv0?<+bB$\"", 2287, 2287);
assertNotNull(node0);
assertEquals(2287, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals(9369839, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isComma());
assertEquals(2287, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Node node1 = Node.newString(39, ",AF", 2, 1422);
assertNotNull(node1);
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(9614, node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertEquals(2, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(1422, node1.getCharno());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);

Node node2 = Node.newNumber(287.52491767231, 51, 30);
assertNotNull(node2);
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertEquals(208926, node2.getSourcePosition());
assertEquals(30, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isNE());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertEquals(51, node2.getLineno());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertEquals(39, node2.getType());
assertFalse(node2.isRegExp());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

Iterable<Node> iterable0 = node2.children();
assertNotNull(iterable0);
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertEquals(208926, node2.getSourcePosition());
assertEquals(30, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isNE());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertEquals(51, node2.getLineno());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertEquals(39, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(iterable0.contains(node2));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

node0.setDouble(1.0);

[MASTER] 11:13:07.033 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_444_1628161987010/com/google/javascript/rhino/Node_444_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_444_1628161987010/com/google/javascript/rhino/Node_444_tmp__ESTest_scaffolding.java]]
[MASTER] 11:13:07.033 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:13:07.033 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:13:07.034 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 193
[MASTER] 11:13:07.034 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_444_1628161987010/com/google/javascript/rhino/Node_444_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:13:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_444_tmp__ESTest extends Node_444_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(75);
21:       assertNotNull(node0);
22:       assertFalse(node0.isArrayLit());
23:       assertFalse(node0.isEmpty());
24:       assertFalse(node0.isFunction());
25:       assertFalse(node0.isRegExp());
26:       assertFalse(node0.isTry());
27:       assertFalse(node0.isDefaultCase());
28:       assertFalse(node0.isFor());
29:       assertFalse(node0.isIn());
30:       assertFalse(node0.isCatch());
31:       assertFalse(node0.isTrue());
32:       assertFalse(node0.isVoid());
33:       assertFalse(node0.isDelProp());
34:       assertFalse(node0.isIf());
35:       assertFalse(node0.isNull());
36:       assertFalse(node0.isNE());
37:       assertFalse(node0.isCall());
38:       assertFalse(node0.isName());
39:       assertFalse(node0.isFalse());
40:       assertFalse(node0.isBreak());
41:       assertFalse(node0.isComma());
42:       assertFalse(node0.isInc());
43:       assertFalse(node0.isGetProp());
44:       assertFalse(node0.isSetterDef());
45:       assertFalse(node0.isWhile());
46:       assertFalse(node0.isThrow());
47:       assertFalse(node0.isObjectLit());
48:       assertFalse(node0.isAnd());
49:       assertFalse(node0.isContinue());
50:       assertFalse(node0.isNot());
51:       assertFalse(node0.isString());
52:       assertFalse(node0.isDebugger());
53:       assertEquals((-1), node0.getSourcePosition());
54:       assertFalse(node0.hasOneChild());
55:       assertFalse(node0.isLabelName());
56:       assertFalse(node0.isAssign());
57:       assertFalse(node0.isGetElem());
58:       assertFalse(node0.isCast());
59:       assertFalse(node0.isTypeOf());
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.isReturn());
62:       assertFalse(node0.hasChildren());
63:       assertFalse(node0.isAssignAdd());
64:       assertFalse(node0.isLabel());
65:       assertFalse(node0.hasMoreThanOneChild());
66:       assertEquals(75, node0.getType());
67:       assertFalse(node0.isDo());
68:       assertEquals((-1), node0.getLineno());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isExprResult());
72:       assertFalse(node0.isOr());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isBlock());
77:       assertFalse(node0.isHook());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isCase());
80:       assertEquals(0, node0.getChildCount());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isSwitch());
84:       assertEquals((-1), node0.getCharno());
85:       assertFalse(node0.isNumber());
86:       assertFalse(node0.isGetterDef());
87:       assertFalse(node0.isStringKey());
88:       assertEquals(15, Node.NO_SIDE_EFFECTS);
89:       assertEquals(57, Node.LAST_PROP);
90:       assertEquals(49, Node.DIRECT_EVAL);
91:       assertEquals(32, Node.INCRDECR_PROP);
92:       assertEquals(1, Node.DECR_FLAG);
93:       assertEquals(52, Node.LENGTH);
94:       assertEquals(46, Node.IS_NAMESPACE);
95:       assertEquals(54, Node.SLASH_V);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(57, Node.REFLECTED_OBJECT);
98:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
99:       assertEquals(40, Node.ORIGINALNAME_PROP);
100:       assertEquals(29, Node.JSDOC_INFO_PROP);
101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
102:       assertEquals(47, Node.IS_DISPATCHER);
103:       assertEquals(2, Node.POST_FLAG);
104:       assertEquals(30, Node.VAR_ARGS_NAME);
105:       assertEquals(55, Node.INFERRED_FUNCTION);
106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
107:       assertEquals(43, Node.IS_CONSTANT_NAME);
108:       assertEquals(53, Node.INPUT_ID);
109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
110:       assertEquals(39, Node.EMPTY_BLOCK);
111:       assertEquals(36, Node.QUOTED_PROP);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(50, Node.FREE_CALL);
114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
122:       assertEquals(12, Node.COLUMN_BITS);
123:       assertEquals(4095, Node.COLUMN_MASK);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertNotNull(iterable0);
127:       assertFalse(node0.isArrayLit());
128:       assertFalse(node0.isEmpty());
129:       assertFalse(node0.isFunction());
130:       assertFalse(node0.isRegExp());
131:       assertFalse(node0.isTry());
132:       assertFalse(node0.isDefaultCase());
133:       assertFalse(node0.isFor());
134:       assertFalse(node0.isIn());
135:       assertFalse(node0.isCatch());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isVoid());
138:       assertFalse(node0.isDelProp());
139:       assertFalse(node0.isIf());
140:       assertFalse(node0.isNull());
141:       assertFalse(node0.isNE());
142:       assertFalse(node0.isCall());
143:       assertFalse(node0.isName());
144:       assertFalse(node0.isFalse());
145:       assertFalse(node0.isBreak());
146:       assertFalse(node0.isComma());
147:       assertFalse(node0.isInc());
148:       assertFalse(node0.isGetProp());
149:       assertFalse(node0.isSetterDef());
150:       assertFalse(node0.isWhile());
151:       assertFalse(node0.isThrow());
152:       assertFalse(node0.isObjectLit());
153:       assertFalse(node0.isAnd());
154:       assertFalse(node0.isContinue());
155:       assertFalse(node0.isNot());
156:       assertFalse(node0.isString());
157:       assertFalse(node0.isDebugger());
158:       assertEquals((-1), node0.getSourcePosition());
159:       assertFalse(node0.hasOneChild());
160:       assertFalse(node0.isLabelName());
161:       assertFalse(node0.isAssign());
162:       assertFalse(node0.isGetElem());
163:       assertFalse(node0.isCast());
164:       assertFalse(node0.isTypeOf());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.isReturn());
167:       assertFalse(node0.hasChildren());
168:       assertFalse(node0.isAssignAdd());
169:       assertFalse(node0.isLabel());
170:       assertFalse(node0.hasMoreThanOneChild());
171:       assertEquals(75, node0.getType());
172:       assertFalse(node0.isDo());
173:       assertEquals((-1), node0.getLineno());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.isInstanceOf());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isOr());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isNew());
181:       assertFalse(node0.isBlock());
182:       assertFalse(node0.isHook());
183:       assertFalse(node0.isVar());
184:       assertFalse(node0.isCase());
185:       assertEquals(0, node0.getChildCount());
186:       assertFalse(node0.isScript());
187:       assertFalse(node0.isParamList());
188:       assertFalse(node0.isSwitch());
189:       assertEquals((-1), node0.getCharno());
190:       assertFalse(node0.isNumber());
191:       assertFalse(node0.isGetterDef());
192:       assertFalse(node0.isStringKey());
193:       assertFalse(iterable0.contains(node0));
194:       assertEquals(15, Node.NO_SIDE_EFFECTS);
195:       assertEquals(57, Node.LAST_PROP);
196:       assertEquals(49, Node.DIRECT_EVAL);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(1, Node.DECR_FLAG);
199:       assertEquals(52, Node.LENGTH);
200:       assertEquals(46, Node.IS_NAMESPACE);
201:       assertEquals(54, Node.SLASH_V);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertEquals(57, Node.REFLECTED_OBJECT);
204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
205:       assertEquals(40, Node.ORIGINALNAME_PROP);
206:       assertEquals(29, Node.JSDOC_INFO_PROP);
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(47, Node.IS_DISPATCHER);
209:       assertEquals(2, Node.POST_FLAG);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(55, Node.INFERRED_FUNCTION);
212:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
213:       assertEquals(43, Node.IS_CONSTANT_NAME);
214:       assertEquals(53, Node.INPUT_ID);
215:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
216:       assertEquals(39, Node.EMPTY_BLOCK);
217:       assertEquals(36, Node.QUOTED_PROP);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
221:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
222:       assertEquals(56, Node.CHANGE_TIME);
223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
224:       assertEquals(37, Node.OPT_ARG_NAME);
225:       assertEquals(48, Node.DIRECTIVES);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
228:       assertEquals(12, Node.COLUMN_BITS);
229:       assertEquals(4095, Node.COLUMN_MASK);
230:       
231:       boolean boolean0 = node0.isTry();
232:       assertFalse(boolean0);
233:       assertFalse(node0.isArrayLit());
234:       assertFalse(node0.isEmpty());
235:       assertFalse(node0.isFunction());
236:       assertFalse(node0.isRegExp());
237:       assertFalse(node0.isTry());
238:       assertFalse(node0.isDefaultCase());
239:       assertFalse(node0.isFor());
240:       assertFalse(node0.isIn());
241:       assertFalse(node0.isCatch());
242:       assertFalse(node0.isTrue());
243:       assertFalse(node0.isVoid());
244:       assertFalse(node0.isDelProp());
245:       assertFalse(node0.isIf());
246:       assertFalse(node0.isNull());
247:       assertFalse(node0.isNE());
248:       assertFalse(node0.isCall());
249:       assertFalse(node0.isName());
250:       assertFalse(node0.isFalse());
251:       assertFalse(node0.isBreak());
252:       assertFalse(node0.isComma());
253:       assertFalse(node0.isInc());
254:       assertFalse(node0.isGetProp());
255:       assertFalse(node0.isSetterDef());
256:       assertFalse(node0.isWhile());
257:       assertFalse(node0.isThrow());
258:       assertFalse(node0.isObjectLit());
259:       assertFalse(node0.isAnd());
260:       assertFalse(node0.isContinue());
261:       assertFalse(node0.isNot());
262:       assertFalse(node0.isString());
263:       assertFalse(node0.isDebugger());
264:       assertEquals((-1), node0.getSourcePosition());
265:       assertFalse(node0.hasOneChild());
266:       assertFalse(node0.isLabelName());
267:       assertFalse(node0.isAssign());
268:       assertFalse(node0.isGetElem());
269:       assertFalse(node0.isCast());
270:       assertFalse(node0.isTypeOf());
271:       assertFalse(node0.isDec());
272:       assertFalse(node0.isReturn());
273:       assertFalse(node0.hasChildren());
274:       assertFalse(node0.isAssignAdd());
275:       assertFalse(node0.isLabel());
276:       assertFalse(node0.hasMoreThanOneChild());
277:       assertEquals(75, node0.getType());
278:       assertFalse(node0.isDo());
279:       assertEquals((-1), node0.getLineno());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isInstanceOf());
282:       assertFalse(node0.isExprResult());
283:       assertFalse(node0.isOr());
284:       assertFalse(node0.isAdd());
285:       assertFalse(node0.isThis());
286:       assertFalse(node0.isNew());
287:       assertFalse(node0.isBlock());
288:       assertFalse(node0.isHook());
289:       assertFalse(node0.isVar());
290:       assertFalse(node0.isCase());
291:       assertEquals(0, node0.getChildCount());
292:       assertFalse(node0.isScript());
293:       assertFalse(node0.isParamList());
294:       assertFalse(node0.isSwitch());
295:       assertEquals((-1), node0.getCharno());
296:       assertFalse(node0.isNumber());
297:       assertFalse(node0.isGetterDef());
298:       assertFalse(node0.isStringKey());
299:       assertEquals(15, Node.NO_SIDE_EFFECTS);
300:       assertEquals(57, Node.LAST_PROP);
301:       assertEquals(49, Node.DIRECT_EVAL);
302:       assertEquals(32, Node.INCRDECR_PROP);
303:       assertEquals(1, Node.DECR_FLAG);
304:       assertEquals(52, Node.LENGTH);
305:       assertEquals(46, Node.IS_NAMESPACE);
306:       assertEquals(54, Node.SLASH_V);
307:       assertEquals(51, Node.STATIC_SOURCE_FILE);
308:       assertEquals(57, Node.REFLECTED_OBJECT);
309:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
310:       assertEquals(40, Node.ORIGINALNAME_PROP);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
313:       assertEquals(47, Node.IS_DISPATCHER);
314:       assertEquals(2, Node.POST_FLAG);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(55, Node.INFERRED_FUNCTION);
317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
318:       assertEquals(43, Node.IS_CONSTANT_NAME);
319:       assertEquals(53, Node.INPUT_ID);
320:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
321:       assertEquals(39, Node.EMPTY_BLOCK);
322:       assertEquals(36, Node.QUOTED_PROP);
323:       assertEquals(8, Node.FLAG_NO_THROWS);
324:       assertEquals(50, Node.FREE_CALL);
325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
327:       assertEquals(56, Node.CHANGE_TIME);
328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
329:       assertEquals(37, Node.OPT_ARG_NAME);
330:       assertEquals(48, Node.DIRECTIVES);
331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
333:       assertEquals(12, Node.COLUMN_BITS);
334:       assertEquals(4095, Node.COLUMN_MASK);
335:   }
336: }
RegularFileObject[/tmp/EvoSuite_444_1628161987010/com/google/javascript/rhino/Node_444_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:13:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_444_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_444_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.javascript.rhino.jstype.NoType",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_444_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.JSDocInfo",
269:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
270:       "com.google.javascript.rhino.SimpleErrorReporter",
271:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
272:       "com.google.common.base.Joiner",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
302:       "com.google.javascript.rhino.jstype.JSType$1",
303:       "com.google.javascript.rhino.jstype.JSType",
304:       "com.google.javascript.rhino.jstype.ObjectType",
305:       "com.google.javascript.rhino.jstype.ProxyObjectType",
306:       "com.google.javascript.rhino.jstype.TemplateType",
307:       "com.google.javascript.rhino.jstype.ValueType",
308:       "com.google.javascript.rhino.jstype.BooleanType",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.rhino.jstype.NumberType",
311:       "com.google.javascript.rhino.jstype.StringType",
312:       "com.google.javascript.rhino.jstype.UnknownType",
313:       "com.google.javascript.rhino.jstype.VoidType",
314:       "com.google.javascript.rhino.jstype.AllType",
315:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
316:       "com.google.common.collect.ImmutableMap",
317:       "com.google.common.collect.ImmutableBiMap",
318:       "com.google.common.collect.EmptyImmutableBiMap",
319:       "com.google.javascript.rhino.jstype.PropertyMap$1",
320:       "com.google.javascript.rhino.jstype.PropertyMap",
321:       "com.google.javascript.rhino.jstype.FunctionType",
322:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.common.base.Objects",
350:       "com.google.common.collect.Sets",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.common.collect.ImmutableList$1",
353:       "com.google.common.collect.Platform",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.Iterables",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.javascript.rhino.jstype.JSType$TypePair",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.common.collect.AbstractMultimap$Values",
368:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
369:       "com.google.common.collect.AbstractMapBasedMultimap$1",
370:       "com.google.common.collect.Multimaps$Entries",
371:       "com.google.common.collect.AbstractMultimap$Entries",
372:       "com.google.common.collect.AbstractMapBasedMultimap$2",
373:       "com.google.javascript.rhino.JSDocInfo$Visibility",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 11:13:07.037 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(75);
assertNotNull(node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(75, node0.getType());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(75, node0.getType());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(iterable0.contains(node0));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean0 = node0.isTry();
assertFalse(boolean0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(75, node0.getType());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);


[MASTER] 11:13:13.322 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_506_1628161993278/com/google/javascript/rhino/Node_506_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_506_1628161993278/com/google/javascript/rhino/Node_506_tmp__ESTest_scaffolding.java]]
[MASTER] 11:13:13.322 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:13:13.322 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:13:13.323 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 510
[MASTER] 11:13:13.324 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_506_1628161993278/com/google/javascript/rhino/Node_506_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:13:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_506_tmp__ESTest extends Node_506_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(100);
22:       assertNotNull(node0);
23:       assertFalse(node0.isAdd());
24:       assertFalse(node0.isNew());
25:       assertFalse(node0.isCall());
26:       assertFalse(node0.isDo());
27:       assertFalse(node0.isWhile());
28:       assertFalse(node0.isContinue());
29:       assertFalse(node0.hasMoreThanOneChild());
30:       assertFalse(node0.isVar());
31:       assertFalse(node0.isBlock());
32:       assertFalse(node0.isReturn());
33:       assertFalse(node0.isLabel());
34:       assertFalse(node0.isLabelName());
35:       assertFalse(node0.isStringKey());
36:       assertFalse(node0.isNumber());
37:       assertFalse(node0.isParamList());
38:       assertEquals((-1), node0.getSourcePosition());
39:       assertFalse(node0.isDebugger());
40:       assertFalse(node0.isTry());
41:       assertFalse(node0.isFunction());
42:       assertFalse(node0.isScript());
43:       assertFalse(node0.isCast());
44:       assertFalse(node0.hasOneChild());
45:       assertFalse(node0.isFor());
46:       assertFalse(node0.isWith());
47:       assertFalse(node0.isRegExp());
48:       assertEquals((-1), node0.getLineno());
49:       assertFalse(node0.isIn());
50:       assertFalse(node0.isInstanceOf());
51:       assertFalse(node0.isCatch());
52:       assertTrue(node0.isOr());
53:       assertFalse(node0.isSetterDef());
54:       assertFalse(node0.isIf());
55:       assertFalse(node0.isNE());
56:       assertFalse(node0.isSwitch());
57:       assertFalse(node0.isInc());
58:       assertFalse(node0.isCase());
59:       assertFalse(node0.isThrow());
60:       assertFalse(node0.isFalse());
61:       assertFalse(node0.isComma());
62:       assertFalse(node0.isThis());
63:       assertFalse(node0.isHook());
64:       assertFalse(node0.isGetProp());
65:       assertFalse(node0.isNot());
66:       assertFalse(node0.isObjectLit());
67:       assertFalse(node0.isGetterDef());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isAnd());
70:       assertEquals((-1), node0.getCharno());
71:       assertFalse(node0.isVoid());
72:       assertFalse(node0.isArrayLit());
73:       assertFalse(node0.isExprResult());
74:       assertFalse(node0.isGetElem());
75:       assertFalse(node0.isAssign());
76:       assertFalse(node0.isDefaultCase());
77:       assertFalse(node0.isTypeOf());
78:       assertEquals(100, node0.getType());
79:       assertEquals(0, node0.getChildCount());
80:       assertFalse(node0.isDec());
81:       assertFalse(node0.hasChildren());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.isName());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isNull());
88:       assertFalse(node0.isTrue());
89:       assertEquals(48, Node.DIRECTIVES);
90:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(39, Node.EMPTY_BLOCK);
93:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
94:       assertEquals(55, Node.INFERRED_FUNCTION);
95:       assertEquals(50, Node.FREE_CALL);
96:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
97:       assertEquals(8, Node.FLAG_NO_THROWS);
98:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
99:       assertEquals(57, Node.REFLECTED_OBJECT);
100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
103:       assertEquals(4095, Node.COLUMN_MASK);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(46, Node.IS_NAMESPACE);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(12, Node.COLUMN_BITS);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(1, Node.DECR_FLAG);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
113:       assertEquals(29, Node.JSDOC_INFO_PROP);
114:       assertEquals(15, Node.NO_SIDE_EFFECTS);
115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
116:       assertEquals(52, Node.LENGTH);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(54, Node.SLASH_V);
119:       assertEquals(43, Node.IS_CONSTANT_NAME);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       assertEquals(2, Node.POST_FLAG);
125:       
126:       Node node1 = Node.newString("unknown", 53, 46);
127:       assertNotNull(node1);
128:       assertFalse(node1.isDelProp());
129:       assertFalse(node1.isGetterDef());
130:       assertFalse(node1.isIn());
131:       assertFalse(node1.isEmpty());
132:       assertFalse(node1.isArrayLit());
133:       assertEquals(217134, node1.getSourcePosition());
134:       assertFalse(node1.isIf());
135:       assertFalse(node1.isNE());
136:       assertFalse(node1.isDebugger());
137:       assertFalse(node1.isVoid());
138:       assertFalse(node1.isRegExp());
139:       assertFalse(node1.isTry());
140:       assertFalse(node1.isCatch());
141:       assertFalse(node1.isCase());
142:       assertFalse(node1.isHook());
143:       assertFalse(node1.isFor());
144:       assertFalse(node1.isThis());
145:       assertFalse(node1.isSetterDef());
146:       assertFalse(node1.isGetProp());
147:       assertFalse(node1.isInstanceOf());
148:       assertFalse(node1.isAnd());
149:       assertFalse(node1.isNot());
150:       assertFalse(node1.isObjectLit());
151:       assertFalse(node1.isInc());
152:       assertFalse(node1.isFunction());
153:       assertEquals(53, node1.getLineno());
154:       assertFalse(node1.isCast());
155:       assertFalse(node1.isContinue());
156:       assertFalse(node1.isFalse());
157:       assertEquals(40, node1.getType());
158:       assertFalse(node1.isThrow());
159:       assertFalse(node1.isNumber());
160:       assertFalse(node1.isTypeOf());
161:       assertFalse(node1.isDec());
162:       assertEquals(46, node1.getCharno());
163:       assertFalse(node1.isOr());
164:       assertFalse(node1.isGetElem());
165:       assertFalse(node1.isLabelName());
166:       assertFalse(node1.isExprResult());
167:       assertTrue(node1.isString());
168:       assertFalse(node1.isWith());
169:       assertFalse(node1.isScript());
170:       assertFalse(node1.hasMoreThanOneChild());
171:       assertFalse(node1.hasOneChild());
172:       assertFalse(node1.isAssign());
173:       assertFalse(node1.isWhile());
174:       assertFalse(node1.isReturn());
175:       assertFalse(node1.hasChildren());
176:       assertFalse(node1.isBlock());
177:       assertFalse(node1.isComma());
178:       assertFalse(node1.isParamList());
179:       assertFalse(node1.isBreak());
180:       assertFalse(node1.isCall());
181:       assertFalse(node1.isName());
182:       assertFalse(node1.isStringKey());
183:       assertFalse(node1.isNull());
184:       assertFalse(node1.isTrue());
185:       assertFalse(node1.isSwitch());
186:       assertFalse(node1.isNew());
187:       assertFalse(node1.isAdd());
188:       assertEquals(0, node1.getChildCount());
189:       assertFalse(node1.isDo());
190:       assertFalse(node1.isDefaultCase());
191:       assertFalse(node1.isAssignAdd());
192:       assertFalse(node1.isLabel());
193:       assertFalse(node1.isVar());
194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
195:       assertEquals(54, Node.SLASH_V);
196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
197:       assertEquals(57, Node.LAST_PROP);
198:       assertEquals(49, Node.DIRECT_EVAL);
199:       assertEquals(40, Node.ORIGINALNAME_PROP);
200:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
201:       assertEquals(12, Node.COLUMN_BITS);
202:       assertEquals(30, Node.VAR_ARGS_NAME);
203:       assertEquals(37, Node.OPT_ARG_NAME);
204:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
205:       assertEquals(39, Node.EMPTY_BLOCK);
206:       assertEquals(56, Node.CHANGE_TIME);
207:       assertEquals(48, Node.DIRECTIVES);
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(29, Node.JSDOC_INFO_PROP);
211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
212:       assertEquals(36, Node.QUOTED_PROP);
213:       assertEquals(57, Node.REFLECTED_OBJECT);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(8, Node.FLAG_NO_THROWS);
216:       assertEquals(53, Node.INPUT_ID);
217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
218:       assertEquals(43, Node.IS_CONSTANT_NAME);
219:       assertEquals(47, Node.IS_DISPATCHER);
220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
221:       assertEquals(4095, Node.COLUMN_MASK);
222:       assertEquals(2, Node.POST_FLAG);
223:       assertEquals(46, Node.IS_NAMESPACE);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(32, Node.INCRDECR_PROP);
226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
227:       assertEquals(1, Node.DECR_FLAG);
228:       assertEquals(51, Node.STATIC_SOURCE_FILE);
229:       assertEquals(50, Node.FREE_CALL);
230:       assertFalse(node1.equals((Object)node0));
231:       
232:       String string0 = node0.checkTreeEquals(node1);
233:       assertNotNull(string0);
234:       assertEquals("Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nSTRING unknown 53\n\n\nSubtree1: OR\n\n\nSubtree2: STRING unknown 53\n", string0);
235:       assertFalse(node0.isAdd());
236:       assertFalse(node0.isNew());
237:       assertFalse(node0.isCall());
238:       assertFalse(node0.isDo());
239:       assertFalse(node0.isWhile());
240:       assertFalse(node0.isContinue());
241:       assertFalse(node0.hasMoreThanOneChild());
242:       assertFalse(node0.isVar());
243:       assertFalse(node0.isBlock());
244:       assertFalse(node0.isReturn());
245:       assertFalse(node0.isLabel());
246:       assertFalse(node0.isLabelName());
247:       assertFalse(node0.isStringKey());
248:       assertFalse(node0.isNumber());
249:       assertFalse(node0.isParamList());
250:       assertEquals((-1), node0.getSourcePosition());
251:       assertFalse(node0.isDebugger());
252:       assertFalse(node0.isTry());
253:       assertFalse(node0.isFunction());
254:       assertFalse(node0.isScript());
255:       assertFalse(node0.isCast());
256:       assertFalse(node0.hasOneChild());
257:       assertFalse(node0.isFor());
258:       assertFalse(node0.isWith());
259:       assertFalse(node0.isRegExp());
260:       assertEquals((-1), node0.getLineno());
261:       assertFalse(node0.isIn());
262:       assertFalse(node0.isInstanceOf());
263:       assertFalse(node0.isCatch());
264:       assertTrue(node0.isOr());
265:       assertFalse(node0.isSetterDef());
266:       assertFalse(node0.isIf());
267:       assertFalse(node0.isNE());
268:       assertFalse(node0.isSwitch());
269:       assertFalse(node0.isInc());
270:       assertFalse(node0.isCase());
271:       assertFalse(node0.isThrow());
272:       assertFalse(node0.isFalse());
273:       assertFalse(node0.isComma());
274:       assertFalse(node0.isThis());
275:       assertFalse(node0.isHook());
276:       assertFalse(node0.isGetProp());
277:       assertFalse(node0.isNot());
278:       assertFalse(node0.isObjectLit());
279:       assertFalse(node0.isGetterDef());
280:       assertFalse(node0.isString());
281:       assertFalse(node0.isAnd());
282:       assertEquals((-1), node0.getCharno());
283:       assertFalse(node0.isVoid());
284:       assertFalse(node0.isArrayLit());
285:       assertFalse(node0.isExprResult());
286:       assertFalse(node0.isGetElem());
287:       assertFalse(node0.isAssign());
288:       assertFalse(node0.isDefaultCase());
289:       assertFalse(node0.isTypeOf());
290:       assertEquals(100, node0.getType());
291:       assertEquals(0, node0.getChildCount());
292:       assertFalse(node0.isDec());
293:       assertFalse(node0.hasChildren());
294:       assertFalse(node0.isAssignAdd());
295:       assertFalse(node0.isBreak());
296:       assertFalse(node0.isName());
297:       assertFalse(node0.isEmpty());
298:       assertFalse(node0.isDelProp());
299:       assertFalse(node0.isNull());
300:       assertFalse(node0.isTrue());
301:       assertFalse(node1.isDelProp());
302:       assertFalse(node1.isGetterDef());
303:       assertFalse(node1.isIn());
304:       assertFalse(node1.isEmpty());
305:       assertFalse(node1.isArrayLit());
306:       assertEquals(217134, node1.getSourcePosition());
307:       assertFalse(node1.isIf());
308:       assertFalse(node1.isNE());
309:       assertFalse(node1.isDebugger());
310:       assertFalse(node1.isVoid());
311:       assertFalse(node1.isRegExp());
312:       assertFalse(node1.isTry());
313:       assertFalse(node1.isCatch());
314:       assertFalse(node1.isCase());
315:       assertFalse(node1.isHook());
316:       assertFalse(node1.isFor());
317:       assertFalse(node1.isThis());
318:       assertFalse(node1.isSetterDef());
319:       assertFalse(node1.isGetProp());
320:       assertFalse(node1.isInstanceOf());
321:       assertFalse(node1.isAnd());
322:       assertFalse(node1.isNot());
323:       assertFalse(node1.isObjectLit());
324:       assertFalse(node1.isInc());
325:       assertFalse(node1.isFunction());
326:       assertEquals(53, node1.getLineno());
327:       assertFalse(node1.isCast());
328:       assertFalse(node1.isContinue());
329:       assertFalse(node1.isFalse());
330:       assertEquals(40, node1.getType());
331:       assertFalse(node1.isThrow());
332:       assertFalse(node1.isNumber());
333:       assertFalse(node1.isTypeOf());
334:       assertFalse(node1.isDec());
335:       assertEquals(46, node1.getCharno());
336:       assertFalse(node1.isOr());
337:       assertFalse(node1.isGetElem());
338:       assertFalse(node1.isLabelName());
339:       assertFalse(node1.isExprResult());
340:       assertTrue(node1.isString());
341:       assertFalse(node1.isWith());
342:       assertFalse(node1.isScript());
343:       assertFalse(node1.hasMoreThanOneChild());
344:       assertFalse(node1.hasOneChild());
345:       assertFalse(node1.isAssign());
346:       assertFalse(node1.isWhile());
347:       assertFalse(node1.isReturn());
348:       assertFalse(node1.hasChildren());
349:       assertFalse(node1.isBlock());
350:       assertFalse(node1.isComma());
351:       assertFalse(node1.isParamList());
352:       assertFalse(node1.isBreak());
353:       assertFalse(node1.isCall());
354:       assertFalse(node1.isName());
355:       assertFalse(node1.isStringKey());
356:       assertFalse(node1.isNull());
357:       assertFalse(node1.isTrue());
358:       assertFalse(node1.isSwitch());
359:       assertFalse(node1.isNew());
360:       assertFalse(node1.isAdd());
361:       assertEquals(0, node1.getChildCount());
362:       assertFalse(node1.isDo());
363:       assertFalse(node1.isDefaultCase());
364:       assertFalse(node1.isAssignAdd());
365:       assertFalse(node1.isLabel());
366:       assertFalse(node1.isVar());
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
369:       assertEquals(36, Node.QUOTED_PROP);
370:       assertEquals(39, Node.EMPTY_BLOCK);
371:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
372:       assertEquals(55, Node.INFERRED_FUNCTION);
373:       assertEquals(50, Node.FREE_CALL);
374:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
375:       assertEquals(8, Node.FLAG_NO_THROWS);
376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
377:       assertEquals(57, Node.REFLECTED_OBJECT);
378:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
379:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
380:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
381:       assertEquals(4095, Node.COLUMN_MASK);
382:       assertEquals(32, Node.INCRDECR_PROP);
383:       assertEquals(46, Node.IS_NAMESPACE);
384:       assertEquals(51, Node.STATIC_SOURCE_FILE);
385:       assertEquals(12, Node.COLUMN_BITS);
386:       assertEquals(37, Node.OPT_ARG_NAME);
387:       assertEquals(1, Node.DECR_FLAG);
388:       assertEquals(49, Node.DIRECT_EVAL);
389:       assertEquals(56, Node.CHANGE_TIME);
390:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
391:       assertEquals(29, Node.JSDOC_INFO_PROP);
392:       assertEquals(15, Node.NO_SIDE_EFFECTS);
393:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
394:       assertEquals(52, Node.LENGTH);
395:       assertEquals(53, Node.INPUT_ID);
396:       assertEquals(54, Node.SLASH_V);
397:       assertEquals(43, Node.IS_CONSTANT_NAME);
398:       assertEquals(57, Node.LAST_PROP);
399:       assertEquals(30, Node.VAR_ARGS_NAME);
400:       assertEquals(47, Node.IS_DISPATCHER);
401:       assertEquals(40, Node.ORIGINALNAME_PROP);
402:       assertEquals(2, Node.POST_FLAG);
403:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
404:       assertEquals(54, Node.SLASH_V);
405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
406:       assertEquals(57, Node.LAST_PROP);
407:       assertEquals(49, Node.DIRECT_EVAL);
408:       assertEquals(40, Node.ORIGINALNAME_PROP);
409:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
410:       assertEquals(12, Node.COLUMN_BITS);
411:       assertEquals(30, Node.VAR_ARGS_NAME);
412:       assertEquals(37, Node.OPT_ARG_NAME);
413:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
414:       assertEquals(39, Node.EMPTY_BLOCK);
415:       assertEquals(56, Node.CHANGE_TIME);
416:       assertEquals(48, Node.DIRECTIVES);
417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
418:       assertEquals(55, Node.INFERRED_FUNCTION);
419:       assertEquals(29, Node.JSDOC_INFO_PROP);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(36, Node.QUOTED_PROP);
422:       assertEquals(57, Node.REFLECTED_OBJECT);
423:       assertEquals(52, Node.LENGTH);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(47, Node.IS_DISPATCHER);
429:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
430:       assertEquals(4095, Node.COLUMN_MASK);
431:       assertEquals(2, Node.POST_FLAG);
432:       assertEquals(46, Node.IS_NAMESPACE);
433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
434:       assertEquals(32, Node.INCRDECR_PROP);
435:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
436:       assertEquals(1, Node.DECR_FLAG);
437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
438:       assertEquals(50, Node.FREE_CALL);
439:       assertFalse(node0.equals((Object)node1));
440:       assertFalse(node1.equals((Object)node0));
441:       
442:       Iterable<Node> iterable0 = node1.children();
443:       assertNotNull(iterable0);
444:       assertFalse(node1.isDelProp());
445:       assertFalse(node1.isGetterDef());
446:       assertFalse(node1.isIn());
447:       assertFalse(node1.isEmpty());
448:       assertFalse(node1.isArrayLit());
449:       assertEquals(217134, node1.getSourcePosition());
450:       assertFalse(node1.isIf());
451:       assertFalse(node1.isNE());
452:       assertFalse(node1.isDebugger());
453:       assertFalse(node1.isVoid());
454:       assertFalse(node1.isRegExp());
455:       assertFalse(node1.isTry());
456:       assertFalse(node1.isCatch());
457:       assertFalse(node1.isCase());
458:       assertFalse(node1.isHook());
459:       assertFalse(node1.isFor());
460:       assertFalse(node1.isThis());
461:       assertFalse(node1.isSetterDef());
462:       assertFalse(node1.isGetProp());
463:       assertFalse(node1.isInstanceOf());
464:       assertFalse(node1.isAnd());
465:       assertFalse(node1.isNot());
466:       assertFalse(node1.isObjectLit());
467:       assertFalse(node1.isInc());
468:       assertFalse(node1.isFunction());
469:       assertEquals(53, node1.getLineno());
470:       assertFalse(node1.isCast());
471:       assertFalse(node1.isContinue());
472:       assertFalse(node1.isFalse());
473:       assertEquals(40, node1.getType());
474:       assertFalse(node1.isThrow());
475:       assertFalse(node1.isNumber());
476:       assertFalse(node1.isTypeOf());
477:       assertFalse(node1.isDec());
478:       assertEquals(46, node1.getCharno());
479:       assertFalse(node1.isOr());
480:       assertFalse(node1.isGetElem());
481:       assertFalse(node1.isLabelName());
482:       assertFalse(node1.isExprResult());
483:       assertTrue(node1.isString());
484:       assertFalse(node1.isWith());
485:       assertFalse(node1.isScript());
486:       assertFalse(node1.hasMoreThanOneChild());
487:       assertFalse(node1.hasOneChild());
488:       assertFalse(node1.isAssign());
489:       assertFalse(node1.isWhile());
490:       assertFalse(node1.isReturn());
491:       assertFalse(node1.hasChildren());
492:       assertFalse(node1.isBlock());
493:       assertFalse(node1.isComma());
494:       assertFalse(node1.isParamList());
495:       assertFalse(node1.isBreak());
496:       assertFalse(node1.isCall());
497:       assertFalse(node1.isName());
498:       assertFalse(node1.isStringKey());
499:       assertFalse(node1.isNull());
500:       assertFalse(node1.isTrue());
501:       assertFalse(node1.isSwitch());
502:       assertFalse(node1.isNew());
503:       assertFalse(node1.isAdd());
504:       assertEquals(0, node1.getChildCount());
505:       assertFalse(node1.isDo());
506:       assertFalse(node1.isDefaultCase());
507:       assertFalse(node1.isAssignAdd());
508:       assertFalse(node1.isLabel());
509:       assertFalse(node1.isVar());
510:       assertFalse(iterable0.contains(node0));
511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
512:       assertEquals(54, Node.SLASH_V);
513:       assertEquals(15, Node.NO_SIDE_EFFECTS);
514:       assertEquals(57, Node.LAST_PROP);
515:       assertEquals(49, Node.DIRECT_EVAL);
516:       assertEquals(40, Node.ORIGINALNAME_PROP);
517:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
518:       assertEquals(12, Node.COLUMN_BITS);
519:       assertEquals(30, Node.VAR_ARGS_NAME);
520:       assertEquals(37, Node.OPT_ARG_NAME);
521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
522:       assertEquals(39, Node.EMPTY_BLOCK);
523:       assertEquals(56, Node.CHANGE_TIME);
524:       assertEquals(48, Node.DIRECTIVES);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(55, Node.INFERRED_FUNCTION);
527:       assertEquals(29, Node.JSDOC_INFO_PROP);
528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
529:       assertEquals(36, Node.QUOTED_PROP);
530:       assertEquals(57, Node.REFLECTED_OBJECT);
531:       assertEquals(52, Node.LENGTH);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(53, Node.INPUT_ID);
534:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
535:       assertEquals(43, Node.IS_CONSTANT_NAME);
536:       assertEquals(47, Node.IS_DISPATCHER);
537:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
538:       assertEquals(4095, Node.COLUMN_MASK);
539:       assertEquals(2, Node.POST_FLAG);
540:       assertEquals(46, Node.IS_NAMESPACE);
541:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
542:       assertEquals(32, Node.INCRDECR_PROP);
543:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
544:       assertEquals(1, Node.DECR_FLAG);
545:       assertEquals(51, Node.STATIC_SOURCE_FILE);
546:       assertEquals(50, Node.FREE_CALL);
547:       assertFalse(node1.equals((Object)node0));
548:       
549:       boolean boolean0 = node0.isOr();
550:       assertTrue(boolean0);
551:       assertFalse(node0.isAdd());
552:       assertFalse(node0.isNew());
553:       assertFalse(node0.isCall());
554:       assertFalse(node0.isDo());
555:       assertFalse(node0.isWhile());
556:       assertFalse(node0.isContinue());
557:       assertFalse(node0.hasMoreThanOneChild());
558:       assertFalse(node0.isVar());
559:       assertFalse(node0.isBlock());
560:       assertFalse(node0.isReturn());
561:       assertFalse(node0.isLabel());
562:       assertFalse(node0.isLabelName());
563:       assertFalse(node0.isStringKey());
564:       assertFalse(node0.isNumber());
565:       assertFalse(node0.isParamList());
566:       assertEquals((-1), node0.getSourcePosition());
567:       assertFalse(node0.isDebugger());
568:       assertFalse(node0.isTry());
569:       assertFalse(node0.isFunction());
570:       assertFalse(node0.isScript());
571:       assertFalse(node0.isCast());
572:       assertFalse(node0.hasOneChild());
573:       assertFalse(node0.isFor());
574:       assertFalse(node0.isWith());
575:       assertFalse(node0.isRegExp());
576:       assertEquals((-1), node0.getLineno());
577:       assertFalse(node0.isIn());
578:       assertFalse(node0.isInstanceOf());
579:       assertFalse(node0.isCatch());
580:       assertTrue(node0.isOr());
581:       assertFalse(node0.isSetterDef());
582:       assertFalse(node0.isIf());
583:       assertFalse(node0.isNE());
584:       assertFalse(node0.isSwitch());
585:       assertFalse(node0.isInc());
586:       assertFalse(node0.isCase());
587:       assertFalse(node0.isThrow());
588:       assertFalse(node0.isFalse());
589:       assertFalse(node0.isComma());
590:       assertFalse(node0.isThis());
591:       assertFalse(node0.isHook());
592:       assertFalse(node0.isGetProp());
593:       assertFalse(node0.isNot());
594:       assertFalse(node0.isObjectLit());
595:       assertFalse(node0.isGetterDef());
596:       assertFalse(node0.isString());
597:       assertFalse(node0.isAnd());
598:       assertEquals((-1), node0.getCharno());
599:       assertFalse(node0.isVoid());
600:       assertFalse(node0.isArrayLit());
601:       assertFalse(node0.isExprResult());
602:       assertFalse(node0.isGetElem());
603:       assertFalse(node0.isAssign());
604:       assertFalse(node0.isDefaultCase());
605:       assertFalse(node0.isTypeOf());
606:       assertEquals(100, node0.getType());
607:       assertEquals(0, node0.getChildCount());
608:       assertFalse(node0.isDec());
609:       assertFalse(node0.hasChildren());
610:       assertFalse(node0.isAssignAdd());
611:       assertFalse(node0.isBreak());
612:       assertFalse(node0.isName());
613:       assertFalse(node0.isEmpty());
614:       assertFalse(node0.isDelProp());
615:       assertFalse(node0.isNull());
616:       assertFalse(node0.isTrue());
617:       assertEquals(48, Node.DIRECTIVES);
618:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
619:       assertEquals(36, Node.QUOTED_PROP);
620:       assertEquals(39, Node.EMPTY_BLOCK);
621:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
622:       assertEquals(55, Node.INFERRED_FUNCTION);
623:       assertEquals(50, Node.FREE_CALL);
624:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
625:       assertEquals(8, Node.FLAG_NO_THROWS);
626:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
627:       assertEquals(57, Node.REFLECTED_OBJECT);
628:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
629:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
630:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
631:       assertEquals(4095, Node.COLUMN_MASK);
632:       assertEquals(32, Node.INCRDECR_PROP);
633:       assertEquals(46, Node.IS_NAMESPACE);
634:       assertEquals(51, Node.STATIC_SOURCE_FILE);
635:       assertEquals(12, Node.COLUMN_BITS);
636:       assertEquals(37, Node.OPT_ARG_NAME);
637:       assertEquals(1, Node.DECR_FLAG);
638:       assertEquals(49, Node.DIRECT_EVAL);
639:       assertEquals(56, Node.CHANGE_TIME);
640:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
641:       assertEquals(29, Node.JSDOC_INFO_PROP);
642:       assertEquals(15, Node.NO_SIDE_EFFECTS);
643:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
644:       assertEquals(52, Node.LENGTH);
645:       assertEquals(53, Node.INPUT_ID);
646:       assertEquals(54, Node.SLASH_V);
647:       assertEquals(43, Node.IS_CONSTANT_NAME);
648:       assertEquals(57, Node.LAST_PROP);
649:       assertEquals(30, Node.VAR_ARGS_NAME);
650:       assertEquals(47, Node.IS_DISPATCHER);
651:       assertEquals(40, Node.ORIGINALNAME_PROP);
652:       assertEquals(2, Node.POST_FLAG);
653:       assertFalse(node0.equals((Object)node1));
654:       
655:       boolean boolean1 = node1.isCast();
656:       assertFalse(boolean1);
657:       assertFalse(node1.isDelProp());
658:       assertFalse(node1.isGetterDef());
659:       assertFalse(node1.isIn());
660:       assertFalse(node1.isEmpty());
661:       assertFalse(node1.isArrayLit());
662:       assertEquals(217134, node1.getSourcePosition());
663:       assertFalse(node1.isIf());
664:       assertFalse(node1.isNE());
665:       assertFalse(node1.isDebugger());
666:       assertFalse(node1.isVoid());
667:       assertFalse(node1.isRegExp());
668:       assertFalse(node1.isTry());
669:       assertFalse(node1.isCatch());
670:       assertFalse(node1.isCase());
671:       assertFalse(node1.isHook());
672:       assertFalse(node1.isFor());
673:       assertFalse(node1.isThis());
674:       assertFalse(node1.isSetterDef());
675:       assertFalse(node1.isGetProp());
676:       assertFalse(node1.isInstanceOf());
677:       assertFalse(node1.isAnd());
678:       assertFalse(node1.isNot());
679:       assertFalse(node1.isObjectLit());
680:       assertFalse(node1.isInc());
681:       assertFalse(node1.isFunction());
682:       assertEquals(53, node1.getLineno());
683:       assertFalse(node1.isCast());
684:       assertFalse(node1.isContinue());
685:       assertFalse(node1.isFalse());
686:       assertEquals(40, node1.getType());
687:       assertFalse(node1.isThrow());
688:       assertFalse(node1.isNumber());
689:       assertFalse(node1.isTypeOf());
690:       assertFalse(node1.isDec());
691:       assertEquals(46, node1.getCharno());
692:       assertFalse(node1.isOr());
693:       assertFalse(node1.isGetElem());
694:       assertFalse(node1.isLabelName());
695:       assertFalse(node1.isExprResult());
696:       assertTrue(node1.isString());
697:       assertFalse(node1.isWith());
698:       assertFalse(node1.isScript());
699:       assertFalse(node1.hasMoreThanOneChild());
700:       assertFalse(node1.hasOneChild());
701:       assertFalse(node1.isAssign());
702:       assertFalse(node1.isWhile());
703:       assertFalse(node1.isReturn());
704:       assertFalse(node1.hasChildren());
705:       assertFalse(node1.isBlock());
706:       assertFalse(node1.isComma());
707:       assertFalse(node1.isParamList());
708:       assertFalse(node1.isBreak());
709:       assertFalse(node1.isCall());
710:       assertFalse(node1.isName());
711:       assertFalse(node1.isStringKey());
712:       assertFalse(node1.isNull());
713:       assertFalse(node1.isTrue());
714:       assertFalse(node1.isSwitch());
715:       assertFalse(node1.isNew());
716:       assertFalse(node1.isAdd());
717:       assertEquals(0, node1.getChildCount());
718:       assertFalse(node1.isDo());
719:       assertFalse(node1.isDefaultCase());
720:       assertFalse(node1.isAssignAdd());
721:       assertFalse(node1.isLabel());
722:       assertFalse(node1.isVar());
723:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
724:       assertEquals(54, Node.SLASH_V);
725:       assertEquals(15, Node.NO_SIDE_EFFECTS);
726:       assertEquals(57, Node.LAST_PROP);
727:       assertEquals(49, Node.DIRECT_EVAL);
728:       assertEquals(40, Node.ORIGINALNAME_PROP);
729:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
730:       assertEquals(12, Node.COLUMN_BITS);
731:       assertEquals(30, Node.VAR_ARGS_NAME);
732:       assertEquals(37, Node.OPT_ARG_NAME);
733:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
734:       assertEquals(39, Node.EMPTY_BLOCK);
735:       assertEquals(56, Node.CHANGE_TIME);
736:       assertEquals(48, Node.DIRECTIVES);
737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
738:       assertEquals(55, Node.INFERRED_FUNCTION);
739:       assertEquals(29, Node.JSDOC_INFO_PROP);
740:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
741:       assertEquals(36, Node.QUOTED_PROP);
742:       assertEquals(57, Node.REFLECTED_OBJECT);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(8, Node.FLAG_NO_THROWS);
745:       assertEquals(53, Node.INPUT_ID);
746:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
747:       assertEquals(43, Node.IS_CONSTANT_NAME);
748:       assertEquals(47, Node.IS_DISPATCHER);
749:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
750:       assertEquals(4095, Node.COLUMN_MASK);
751:       assertEquals(2, Node.POST_FLAG);
752:       assertEquals(46, Node.IS_NAMESPACE);
753:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
754:       assertEquals(32, Node.INCRDECR_PROP);
755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
756:       assertEquals(1, Node.DECR_FLAG);
757:       assertEquals(51, Node.STATIC_SOURCE_FILE);
758:       assertEquals(50, Node.FREE_CALL);
759:       assertFalse(node1.equals((Object)node0));
760:       assertFalse(boolean1 == boolean0);
761:       
762:       try { 
763:         node0.getDouble();
764:         fail("Expecting exception: UnsupportedOperationException");
765:       
766:       } catch(UnsupportedOperationException e) {
767:          //
768:          // OR is not a number node
769:          //
770:          verifyException("com.google.javascript.rhino.Node", e);
771:       }
772:   }
773: }
RegularFileObject[/tmp/EvoSuite_506_1628161993278/com/google/javascript/rhino/Node_506_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:13:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_506_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_506_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.javascript.rhino.jstype.NoType",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_506_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.JSDocInfo",
269:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
270:       "com.google.javascript.rhino.SimpleErrorReporter",
271:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
272:       "com.google.common.base.Joiner",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
302:       "com.google.javascript.rhino.jstype.JSType$1",
303:       "com.google.javascript.rhino.jstype.JSType",
304:       "com.google.javascript.rhino.jstype.ObjectType",
305:       "com.google.javascript.rhino.jstype.ProxyObjectType",
306:       "com.google.javascript.rhino.jstype.TemplateType",
307:       "com.google.javascript.rhino.jstype.ValueType",
308:       "com.google.javascript.rhino.jstype.BooleanType",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.rhino.jstype.NumberType",
311:       "com.google.javascript.rhino.jstype.StringType",
312:       "com.google.javascript.rhino.jstype.UnknownType",
313:       "com.google.javascript.rhino.jstype.VoidType",
314:       "com.google.javascript.rhino.jstype.AllType",
315:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
316:       "com.google.common.collect.ImmutableMap",
317:       "com.google.common.collect.ImmutableBiMap",
318:       "com.google.common.collect.EmptyImmutableBiMap",
319:       "com.google.javascript.rhino.jstype.PropertyMap$1",
320:       "com.google.javascript.rhino.jstype.PropertyMap",
321:       "com.google.javascript.rhino.jstype.FunctionType",
322:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.common.base.Objects",
350:       "com.google.common.collect.Sets",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.common.collect.ImmutableList$1",
353:       "com.google.common.collect.Platform",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.Iterables",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.javascript.rhino.jstype.JSType$TypePair",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.common.collect.AbstractMultimap$Values",
368:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
369:       "com.google.common.collect.AbstractMapBasedMultimap$1",
370:       "com.google.common.collect.Multimaps$Entries",
371:       "com.google.common.collect.AbstractMultimap$Entries",
372:       "com.google.common.collect.AbstractMapBasedMultimap$2",
373:       "com.google.javascript.rhino.JSDocInfo$Visibility",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 11:13:13.336 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(100);
assertNotNull(node0);
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertTrue(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTypeOf());
assertEquals(100, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

Node node1 = Node.newString("unknown", 53, 46);
assertNotNull(node1);
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertEquals(217134, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(53, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node1.equals((Object)node0));

String string0 = node0.checkTreeEquals(node1);
assertNotNull(string0);
assertEquals("Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nSTRING unknown 53\n\n\nSubtree1: OR\n\n\nSubtree2: STRING unknown 53\n", string0);
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertTrue(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTypeOf());
assertEquals(100, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertEquals(217134, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(53, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertEquals(217134, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(53, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(iterable0.contains(node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node0.isOr();
assertTrue(boolean0);
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertTrue(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTypeOf());
assertEquals(100, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.equals((Object)node1));

boolean boolean1 = node1.isCast();
assertFalse(boolean1);
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertEquals(217134, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(53, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);

node0.getDouble();

[MASTER] 11:13:31.436 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:31.701 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:31.947 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.176 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.381 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.604 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.804 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.994 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.185 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.366 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.542 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.721 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.894 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:34.103 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:34.279 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:34.468 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:34.672 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:34.878 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:35.065 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:36.370 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/30
* Done!

* Computation finished
