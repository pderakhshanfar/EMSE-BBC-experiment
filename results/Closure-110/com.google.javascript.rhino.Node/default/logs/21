* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 17703
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 4151659254
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:34:37.008 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:38:22.154 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:39:31.123 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 652 generations, 305313 statements, best individual has fitness: 2725.0
* Minimizing test suite
[MASTER] 10:46:01.107 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 853
* Number of covered goals: 817
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 714
* Number of covered goals: 642
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 530
* Number of covered goals: 483
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 4536
* Number of covered goals: 2253
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 598
* Generated 1121 tests with total length 12045
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:47:20.951 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7366% of time used, but only 78/1121 tests minimized), falling back to using all assertions
[MASTER] 10:47:36.855 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
[MASTER] 10:47:49.120 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 10:47:53.071 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_93_1628160472684/com/google/javascript/rhino/Node_93_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_93_1628160472684/com/google/javascript/rhino/Node_93_tmp__ESTest_scaffolding.java]]
[MASTER] 10:47:53.071 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:47:53.071 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:47:53.075 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 894
[MASTER] 10:47:53.078 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_93_1628160472684/com/google/javascript/rhino/Node_93_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:47:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.SimpleErrorReporter;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import java.util.ArrayList;
17: import java.util.List;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_93_tmp__ESTest extends Node_93_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
28:       assertNotNull(simpleErrorReporter0);
29:       
30:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
31:       assertNotNull(jSTypeRegistry0);
32:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
33:       
34:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
35:       assertNotNull(arrayList0);
36:       assertEquals(0, arrayList0.size());
37:       assertTrue(arrayList0.isEmpty());
38:       
39:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
40:       assertNotNull(node0);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(8, Node.FLAG_NO_THROWS);
43:       assertEquals(39, Node.EMPTY_BLOCK);
44:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(40, Node.ORIGINALNAME_PROP);
47:       assertEquals(4095, Node.COLUMN_MASK);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(15, Node.NO_SIDE_EFFECTS);
50:       assertEquals(53, Node.INPUT_ID);
51:       assertEquals(57, Node.LAST_PROP);
52:       assertEquals(49, Node.DIRECT_EVAL);
53:       assertEquals(57, Node.REFLECTED_OBJECT);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(29, Node.JSDOC_INFO_PROP);
56:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
57:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
58:       assertEquals(52, Node.LENGTH);
59:       assertEquals(36, Node.QUOTED_PROP);
60:       assertEquals(37, Node.OPT_ARG_NAME);
61:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
62:       assertEquals(56, Node.CHANGE_TIME);
63:       assertEquals(32, Node.INCRDECR_PROP);
64:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
65:       assertEquals(12, Node.COLUMN_BITS);
66:       assertEquals(47, Node.IS_DISPATCHER);
67:       assertEquals(2, Node.POST_FLAG);
68:       assertEquals(30, Node.VAR_ARGS_NAME);
69:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
70:       assertEquals(43, Node.IS_CONSTANT_NAME);
71:       assertEquals(54, Node.SLASH_V);
72:       assertEquals(1, Node.DECR_FLAG);
73:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
74:       assertEquals(46, Node.IS_NAMESPACE);
75:       assertEquals(51, Node.STATIC_SOURCE_FILE);
76:       assertEquals(50, Node.FREE_CALL);
77:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
78:       assertEquals(0, arrayList0.size());
79:       assertTrue(arrayList0.isEmpty());
80:       assertFalse(node0.isCase());
81:       assertFalse(node0.isIn());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isString());
84:       assertEquals((-1), node0.getCharno());
85:       assertFalse(node0.isIf());
86:       assertFalse(node0.isSwitch());
87:       assertFalse(node0.isNE());
88:       assertFalse(node0.isFor());
89:       assertFalse(node0.isDelProp());
90:       assertFalse(node0.isGetterDef());
91:       assertFalse(node0.isBreak());
92:       assertFalse(node0.isGetProp());
93:       assertFalse(node0.isComma());
94:       assertFalse(node0.isTry());
95:       assertFalse(node0.isHook());
96:       assertFalse(node0.isThis());
97:       assertFalse(node0.isScript());
98:       assertFalse(node0.isExprResult());
99:       assertFalse(node0.isVoid());
100:       assertFalse(node0.isNull());
101:       assertFalse(node0.isTrue());
102:       assertFalse(node0.isLabelName());
103:       assertFalse(node0.isArrayLit());
104:       assertEquals(83, node0.getType());
105:       assertFalse(node0.isEmpty());
106:       assertFalse(node0.isNew());
107:       assertFalse(node0.isAdd());
108:       assertFalse(node0.isAssignAdd());
109:       assertFalse(node0.isLabel());
110:       assertEquals(0, node0.getChildCount());
111:       assertFalse(node0.isDefaultCase());
112:       assertFalse(node0.isVar());
113:       assertFalse(node0.isDo());
114:       assertFalse(node0.hasMoreThanOneChild());
115:       assertFalse(node0.isContinue());
116:       assertEquals((-1), node0.getLineno());
117:       assertFalse(node0.isOr());
118:       assertEquals((-1), node0.getSourcePosition());
119:       assertFalse(node0.isStringKey());
120:       assertFalse(node0.isGetElem());
121:       assertFalse(node0.isName());
122:       assertFalse(node0.isAssign());
123:       assertFalse(node0.isDec());
124:       assertFalse(node0.hasOneChild());
125:       assertFalse(node0.isTypeOf());
126:       assertFalse(node0.isNumber());
127:       assertFalse(node0.isCall());
128:       assertFalse(node0.isBlock());
129:       assertFalse(node0.hasChildren());
130:       assertFalse(node0.isWhile());
131:       assertFalse(node0.isReturn());
132:       assertFalse(node0.isWith());
133:       assertFalse(node0.isObjectLit());
134:       assertFalse(node0.isNot());
135:       assertFalse(node0.isRegExp());
136:       assertTrue(node0.isParamList());
137:       assertFalse(node0.isCatch());
138:       assertFalse(node0.isInstanceOf());
139:       assertFalse(node0.isDebugger());
140:       assertFalse(node0.isAnd());
141:       assertFalse(node0.isFalse());
142:       assertFalse(node0.isSetterDef());
143:       assertFalse(node0.isCast());
144:       assertFalse(node0.isFunction());
145:       assertFalse(node0.isThrow());
146:       
147:       Node node1 = node0.cloneNode();
148:       assertNotNull(node1);
149:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(39, Node.EMPTY_BLOCK);
152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
153:       assertEquals(48, Node.DIRECTIVES);
154:       assertEquals(40, Node.ORIGINALNAME_PROP);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(53, Node.INPUT_ID);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(49, Node.DIRECT_EVAL);
161:       assertEquals(57, Node.REFLECTED_OBJECT);
162:       assertEquals(55, Node.INFERRED_FUNCTION);
163:       assertEquals(29, Node.JSDOC_INFO_PROP);
164:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
165:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
166:       assertEquals(52, Node.LENGTH);
167:       assertEquals(36, Node.QUOTED_PROP);
168:       assertEquals(37, Node.OPT_ARG_NAME);
169:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
170:       assertEquals(56, Node.CHANGE_TIME);
171:       assertEquals(32, Node.INCRDECR_PROP);
172:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
173:       assertEquals(12, Node.COLUMN_BITS);
174:       assertEquals(47, Node.IS_DISPATCHER);
175:       assertEquals(2, Node.POST_FLAG);
176:       assertEquals(30, Node.VAR_ARGS_NAME);
177:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
178:       assertEquals(43, Node.IS_CONSTANT_NAME);
179:       assertEquals(54, Node.SLASH_V);
180:       assertEquals(1, Node.DECR_FLAG);
181:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
182:       assertEquals(46, Node.IS_NAMESPACE);
183:       assertEquals(51, Node.STATIC_SOURCE_FILE);
184:       assertEquals(50, Node.FREE_CALL);
185:       assertEquals(40, Node.ORIGINALNAME_PROP);
186:       assertEquals(50, Node.FREE_CALL);
187:       assertEquals(57, Node.REFLECTED_OBJECT);
188:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
189:       assertEquals(54, Node.SLASH_V);
190:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
191:       assertEquals(48, Node.DIRECTIVES);
192:       assertEquals(4095, Node.COLUMN_MASK);
193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
195:       assertEquals(30, Node.VAR_ARGS_NAME);
196:       assertEquals(49, Node.DIRECT_EVAL);
197:       assertEquals(57, Node.LAST_PROP);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(36, Node.QUOTED_PROP);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(52, Node.LENGTH);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(53, Node.INPUT_ID);
205:       assertEquals(55, Node.INFERRED_FUNCTION);
206:       assertEquals(29, Node.JSDOC_INFO_PROP);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(56, Node.CHANGE_TIME);
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(37, Node.OPT_ARG_NAME);
211:       assertEquals(2, Node.POST_FLAG);
212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
214:       assertEquals(1, Node.DECR_FLAG);
215:       assertEquals(32, Node.INCRDECR_PROP);
216:       assertEquals(43, Node.IS_CONSTANT_NAME);
217:       assertEquals(12, Node.COLUMN_BITS);
218:       assertEquals(46, Node.IS_NAMESPACE);
219:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
221:       assertNotSame(node0, node1);
222:       assertNotSame(node1, node0);
223:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
224:       assertEquals(0, arrayList0.size());
225:       assertTrue(arrayList0.isEmpty());
226:       assertFalse(node0.isCase());
227:       assertFalse(node0.isIn());
228:       assertFalse(node0.isInc());
229:       assertFalse(node0.isString());
230:       assertEquals((-1), node0.getCharno());
231:       assertFalse(node0.isIf());
232:       assertFalse(node0.isSwitch());
233:       assertFalse(node0.isNE());
234:       assertFalse(node0.isFor());
235:       assertFalse(node0.isDelProp());
236:       assertFalse(node0.isGetterDef());
237:       assertFalse(node0.isBreak());
238:       assertFalse(node0.isGetProp());
239:       assertFalse(node0.isComma());
240:       assertFalse(node0.isTry());
241:       assertFalse(node0.isHook());
242:       assertFalse(node0.isThis());
243:       assertFalse(node0.isScript());
244:       assertFalse(node0.isExprResult());
245:       assertFalse(node0.isVoid());
246:       assertFalse(node0.isNull());
247:       assertFalse(node0.isTrue());
248:       assertFalse(node0.isLabelName());
249:       assertFalse(node0.isArrayLit());
250:       assertEquals(83, node0.getType());
251:       assertFalse(node0.isEmpty());
252:       assertFalse(node0.isNew());
253:       assertFalse(node0.isAdd());
254:       assertFalse(node0.isAssignAdd());
255:       assertFalse(node0.isLabel());
256:       assertEquals(0, node0.getChildCount());
257:       assertFalse(node0.isDefaultCase());
258:       assertFalse(node0.isVar());
259:       assertFalse(node0.isDo());
260:       assertFalse(node0.hasMoreThanOneChild());
261:       assertFalse(node0.isContinue());
262:       assertEquals((-1), node0.getLineno());
263:       assertFalse(node0.isOr());
264:       assertEquals((-1), node0.getSourcePosition());
265:       assertFalse(node0.isStringKey());
266:       assertFalse(node0.isGetElem());
267:       assertFalse(node0.isName());
268:       assertFalse(node0.isAssign());
269:       assertFalse(node0.isDec());
270:       assertFalse(node0.hasOneChild());
271:       assertFalse(node0.isTypeOf());
272:       assertFalse(node0.isNumber());
273:       assertFalse(node0.isCall());
274:       assertFalse(node0.isBlock());
275:       assertFalse(node0.hasChildren());
276:       assertFalse(node0.isWhile());
277:       assertFalse(node0.isReturn());
278:       assertFalse(node0.isWith());
279:       assertFalse(node0.isObjectLit());
280:       assertFalse(node0.isNot());
281:       assertFalse(node0.isRegExp());
282:       assertTrue(node0.isParamList());
283:       assertFalse(node0.isCatch());
284:       assertFalse(node0.isInstanceOf());
285:       assertFalse(node0.isDebugger());
286:       assertFalse(node0.isAnd());
287:       assertFalse(node0.isFalse());
288:       assertFalse(node0.isSetterDef());
289:       assertFalse(node0.isCast());
290:       assertFalse(node0.isFunction());
291:       assertFalse(node0.isThrow());
292:       assertFalse(node1.isNE());
293:       assertFalse(node1.isIf());
294:       assertFalse(node1.isDelProp());
295:       assertFalse(node1.isEmpty());
296:       assertFalse(node1.isCase());
297:       assertFalse(node1.isString());
298:       assertFalse(node1.isIn());
299:       assertFalse(node1.isGetterDef());
300:       assertEquals((-1), node1.getCharno());
301:       assertFalse(node1.isTry());
302:       assertFalse(node1.isTrue());
303:       assertFalse(node1.isVoid());
304:       assertFalse(node1.isFor());
305:       assertFalse(node1.isCatch());
306:       assertFalse(node1.isRegExp());
307:       assertFalse(node1.isHook());
308:       assertFalse(node1.isThis());
309:       assertFalse(node1.isComma());
310:       assertFalse(node1.isGetProp());
311:       assertFalse(node1.isInstanceOf());
312:       assertFalse(node1.isSetterDef());
313:       assertFalse(node1.isAnd());
314:       assertTrue(node1.isParamList());
315:       assertFalse(node1.isDebugger());
316:       assertFalse(node1.isObjectLit());
317:       assertFalse(node1.isNot());
318:       assertFalse(node1.isInc());
319:       assertFalse(node1.isFalse());
320:       assertFalse(node1.isContinue());
321:       assertFalse(node1.isThrow());
322:       assertFalse(node1.isCast());
323:       assertFalse(node1.isFunction());
324:       assertFalse(node1.isLabel());
325:       assertFalse(node1.isReturn());
326:       assertFalse(node1.isAssignAdd());
327:       assertFalse(node1.isLabelName());
328:       assertEquals((-1), node1.getLineno());
329:       assertEquals((-1), node1.getSourcePosition());
330:       assertFalse(node1.isNumber());
331:       assertFalse(node1.isOr());
332:       assertFalse(node1.isBlock());
333:       assertFalse(node1.isExprResult());
334:       assertFalse(node1.isScript());
335:       assertFalse(node1.hasOneChild());
336:       assertFalse(node1.isGetElem());
337:       assertFalse(node1.isWith());
338:       assertFalse(node1.isWhile());
339:       assertFalse(node1.isCall());
340:       assertFalse(node1.isTypeOf());
341:       assertFalse(node1.hasMoreThanOneChild());
342:       assertFalse(node1.hasChildren());
343:       assertFalse(node1.isAssign());
344:       assertFalse(node1.isDec());
345:       assertFalse(node1.isBreak());
346:       assertFalse(node1.isName());
347:       assertFalse(node1.isStringKey());
348:       assertFalse(node1.isNull());
349:       assertEquals(83, node1.getType());
350:       assertFalse(node1.isNew());
351:       assertFalse(node1.isAdd());
352:       assertFalse(node1.isArrayLit());
353:       assertFalse(node1.isSwitch());
354:       assertFalse(node1.isDefaultCase());
355:       assertFalse(node1.isDo());
356:       assertFalse(node1.isVar());
357:       assertEquals(0, node1.getChildCount());
358:       assertFalse(node1.equals((Object)node0));
359:       
360:       boolean boolean0 = node1.isWhile();
361:       assertFalse(boolean0);
362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
363:       assertEquals(8, Node.FLAG_NO_THROWS);
364:       assertEquals(39, Node.EMPTY_BLOCK);
365:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
366:       assertEquals(48, Node.DIRECTIVES);
367:       assertEquals(40, Node.ORIGINALNAME_PROP);
368:       assertEquals(4095, Node.COLUMN_MASK);
369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
370:       assertEquals(15, Node.NO_SIDE_EFFECTS);
371:       assertEquals(53, Node.INPUT_ID);
372:       assertEquals(57, Node.LAST_PROP);
373:       assertEquals(49, Node.DIRECT_EVAL);
374:       assertEquals(57, Node.REFLECTED_OBJECT);
375:       assertEquals(55, Node.INFERRED_FUNCTION);
376:       assertEquals(29, Node.JSDOC_INFO_PROP);
377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
378:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
379:       assertEquals(52, Node.LENGTH);
380:       assertEquals(36, Node.QUOTED_PROP);
381:       assertEquals(37, Node.OPT_ARG_NAME);
382:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
383:       assertEquals(56, Node.CHANGE_TIME);
384:       assertEquals(32, Node.INCRDECR_PROP);
385:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
386:       assertEquals(12, Node.COLUMN_BITS);
387:       assertEquals(47, Node.IS_DISPATCHER);
388:       assertEquals(2, Node.POST_FLAG);
389:       assertEquals(30, Node.VAR_ARGS_NAME);
390:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
391:       assertEquals(43, Node.IS_CONSTANT_NAME);
392:       assertEquals(54, Node.SLASH_V);
393:       assertEquals(1, Node.DECR_FLAG);
394:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
395:       assertEquals(46, Node.IS_NAMESPACE);
396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
397:       assertEquals(50, Node.FREE_CALL);
398:       assertEquals(40, Node.ORIGINALNAME_PROP);
399:       assertEquals(50, Node.FREE_CALL);
400:       assertEquals(57, Node.REFLECTED_OBJECT);
401:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
402:       assertEquals(54, Node.SLASH_V);
403:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
404:       assertEquals(48, Node.DIRECTIVES);
405:       assertEquals(4095, Node.COLUMN_MASK);
406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
407:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
408:       assertEquals(30, Node.VAR_ARGS_NAME);
409:       assertEquals(49, Node.DIRECT_EVAL);
410:       assertEquals(57, Node.LAST_PROP);
411:       assertEquals(8, Node.FLAG_NO_THROWS);
412:       assertEquals(39, Node.EMPTY_BLOCK);
413:       assertEquals(36, Node.QUOTED_PROP);
414:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
415:       assertEquals(52, Node.LENGTH);
416:       assertEquals(15, Node.NO_SIDE_EFFECTS);
417:       assertEquals(53, Node.INPUT_ID);
418:       assertEquals(55, Node.INFERRED_FUNCTION);
419:       assertEquals(29, Node.JSDOC_INFO_PROP);
420:       assertEquals(47, Node.IS_DISPATCHER);
421:       assertEquals(56, Node.CHANGE_TIME);
422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
423:       assertEquals(37, Node.OPT_ARG_NAME);
424:       assertEquals(2, Node.POST_FLAG);
425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
426:       assertEquals(51, Node.STATIC_SOURCE_FILE);
427:       assertEquals(1, Node.DECR_FLAG);
428:       assertEquals(32, Node.INCRDECR_PROP);
429:       assertEquals(43, Node.IS_CONSTANT_NAME);
430:       assertEquals(12, Node.COLUMN_BITS);
431:       assertEquals(46, Node.IS_NAMESPACE);
432:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
434:       assertNotSame(node0, node1);
435:       assertNotSame(node1, node0);
436:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
437:       assertEquals(0, arrayList0.size());
438:       assertTrue(arrayList0.isEmpty());
439:       assertFalse(node0.isCase());
440:       assertFalse(node0.isIn());
441:       assertFalse(node0.isInc());
442:       assertFalse(node0.isString());
443:       assertEquals((-1), node0.getCharno());
444:       assertFalse(node0.isIf());
445:       assertFalse(node0.isSwitch());
446:       assertFalse(node0.isNE());
447:       assertFalse(node0.isFor());
448:       assertFalse(node0.isDelProp());
449:       assertFalse(node0.isGetterDef());
450:       assertFalse(node0.isBreak());
451:       assertFalse(node0.isGetProp());
452:       assertFalse(node0.isComma());
453:       assertFalse(node0.isTry());
454:       assertFalse(node0.isHook());
455:       assertFalse(node0.isThis());
456:       assertFalse(node0.isScript());
457:       assertFalse(node0.isExprResult());
458:       assertFalse(node0.isVoid());
459:       assertFalse(node0.isNull());
460:       assertFalse(node0.isTrue());
461:       assertFalse(node0.isLabelName());
462:       assertFalse(node0.isArrayLit());
463:       assertEquals(83, node0.getType());
464:       assertFalse(node0.isEmpty());
465:       assertFalse(node0.isNew());
466:       assertFalse(node0.isAdd());
467:       assertFalse(node0.isAssignAdd());
468:       assertFalse(node0.isLabel());
469:       assertEquals(0, node0.getChildCount());
470:       assertFalse(node0.isDefaultCase());
471:       assertFalse(node0.isVar());
472:       assertFalse(node0.isDo());
473:       assertFalse(node0.hasMoreThanOneChild());
474:       assertFalse(node0.isContinue());
475:       assertEquals((-1), node0.getLineno());
476:       assertFalse(node0.isOr());
477:       assertEquals((-1), node0.getSourcePosition());
478:       assertFalse(node0.isStringKey());
479:       assertFalse(node0.isGetElem());
480:       assertFalse(node0.isName());
481:       assertFalse(node0.isAssign());
482:       assertFalse(node0.isDec());
483:       assertFalse(node0.hasOneChild());
484:       assertFalse(node0.isTypeOf());
485:       assertFalse(node0.isNumber());
486:       assertFalse(node0.isCall());
487:       assertFalse(node0.isBlock());
488:       assertFalse(node0.hasChildren());
489:       assertFalse(node0.isWhile());
490:       assertFalse(node0.isReturn());
491:       assertFalse(node0.isWith());
492:       assertFalse(node0.isObjectLit());
493:       assertFalse(node0.isNot());
494:       assertFalse(node0.isRegExp());
495:       assertTrue(node0.isParamList());
496:       assertFalse(node0.isCatch());
497:       assertFalse(node0.isInstanceOf());
498:       assertFalse(node0.isDebugger());
499:       assertFalse(node0.isAnd());
500:       assertFalse(node0.isFalse());
501:       assertFalse(node0.isSetterDef());
502:       assertFalse(node0.isCast());
503:       assertFalse(node0.isFunction());
504:       assertFalse(node0.isThrow());
505:       assertFalse(node1.isNE());
506:       assertFalse(node1.isIf());
507:       assertFalse(node1.isDelProp());
508:       assertFalse(node1.isEmpty());
509:       assertFalse(node1.isCase());
510:       assertFalse(node1.isString());
511:       assertFalse(node1.isIn());
512:       assertFalse(node1.isGetterDef());
513:       assertEquals((-1), node1.getCharno());
514:       assertFalse(node1.isTry());
515:       assertFalse(node1.isTrue());
516:       assertFalse(node1.isVoid());
517:       assertFalse(node1.isFor());
518:       assertFalse(node1.isCatch());
519:       assertFalse(node1.isRegExp());
520:       assertFalse(node1.isHook());
521:       assertFalse(node1.isThis());
522:       assertFalse(node1.isComma());
523:       assertFalse(node1.isGetProp());
524:       assertFalse(node1.isInstanceOf());
525:       assertFalse(node1.isSetterDef());
526:       assertFalse(node1.isAnd());
527:       assertTrue(node1.isParamList());
528:       assertFalse(node1.isDebugger());
529:       assertFalse(node1.isObjectLit());
530:       assertFalse(node1.isNot());
531:       assertFalse(node1.isInc());
532:       assertFalse(node1.isFalse());
533:       assertFalse(node1.isContinue());
534:       assertFalse(node1.isThrow());
535:       assertFalse(node1.isCast());
536:       assertFalse(node1.isFunction());
537:       assertFalse(node1.isLabel());
538:       assertFalse(node1.isReturn());
539:       assertFalse(node1.isAssignAdd());
540:       assertFalse(node1.isLabelName());
541:       assertEquals((-1), node1.getLineno());
542:       assertEquals((-1), node1.getSourcePosition());
543:       assertFalse(node1.isNumber());
544:       assertFalse(node1.isOr());
545:       assertFalse(node1.isBlock());
546:       assertFalse(node1.isExprResult());
547:       assertFalse(node1.isScript());
548:       assertFalse(node1.hasOneChild());
549:       assertFalse(node1.isGetElem());
550:       assertFalse(node1.isWith());
551:       assertFalse(node1.isWhile());
552:       assertFalse(node1.isCall());
553:       assertFalse(node1.isTypeOf());
554:       assertFalse(node1.hasMoreThanOneChild());
555:       assertFalse(node1.hasChildren());
556:       assertFalse(node1.isAssign());
557:       assertFalse(node1.isDec());
558:       assertFalse(node1.isBreak());
559:       assertFalse(node1.isName());
560:       assertFalse(node1.isStringKey());
561:       assertFalse(node1.isNull());
562:       assertEquals(83, node1.getType());
563:       assertFalse(node1.isNew());
564:       assertFalse(node1.isAdd());
565:       assertFalse(node1.isArrayLit());
566:       assertFalse(node1.isSwitch());
567:       assertFalse(node1.isDefaultCase());
568:       assertFalse(node1.isDo());
569:       assertFalse(node1.isVar());
570:       assertEquals(0, node1.getChildCount());
571:       assertFalse(node0.equals((Object)node1));
572:       assertFalse(node1.equals((Object)node0));
573:       
574:       node0.setIsSyntheticBlock(false);
575:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
576:       assertEquals(8, Node.FLAG_NO_THROWS);
577:       assertEquals(39, Node.EMPTY_BLOCK);
578:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
579:       assertEquals(48, Node.DIRECTIVES);
580:       assertEquals(40, Node.ORIGINALNAME_PROP);
581:       assertEquals(4095, Node.COLUMN_MASK);
582:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
583:       assertEquals(15, Node.NO_SIDE_EFFECTS);
584:       assertEquals(53, Node.INPUT_ID);
585:       assertEquals(57, Node.LAST_PROP);
586:       assertEquals(49, Node.DIRECT_EVAL);
587:       assertEquals(57, Node.REFLECTED_OBJECT);
588:       assertEquals(55, Node.INFERRED_FUNCTION);
589:       assertEquals(29, Node.JSDOC_INFO_PROP);
590:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
591:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
592:       assertEquals(52, Node.LENGTH);
593:       assertEquals(36, Node.QUOTED_PROP);
594:       assertEquals(37, Node.OPT_ARG_NAME);
595:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
596:       assertEquals(56, Node.CHANGE_TIME);
597:       assertEquals(32, Node.INCRDECR_PROP);
598:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
599:       assertEquals(12, Node.COLUMN_BITS);
600:       assertEquals(47, Node.IS_DISPATCHER);
601:       assertEquals(2, Node.POST_FLAG);
602:       assertEquals(30, Node.VAR_ARGS_NAME);
603:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
604:       assertEquals(43, Node.IS_CONSTANT_NAME);
605:       assertEquals(54, Node.SLASH_V);
606:       assertEquals(1, Node.DECR_FLAG);
607:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
608:       assertEquals(46, Node.IS_NAMESPACE);
609:       assertEquals(51, Node.STATIC_SOURCE_FILE);
610:       assertEquals(50, Node.FREE_CALL);
611:       assertNotSame(node0, node1);
612:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
613:       assertEquals(0, arrayList0.size());
614:       assertTrue(arrayList0.isEmpty());
615:       assertFalse(node0.isCase());
616:       assertFalse(node0.isIn());
617:       assertFalse(node0.isInc());
618:       assertFalse(node0.isString());
619:       assertEquals((-1), node0.getCharno());
620:       assertFalse(node0.isIf());
621:       assertFalse(node0.isSwitch());
622:       assertFalse(node0.isNE());
623:       assertFalse(node0.isFor());
624:       assertFalse(node0.isDelProp());
625:       assertFalse(node0.isGetterDef());
626:       assertFalse(node0.isBreak());
627:       assertFalse(node0.isGetProp());
628:       assertFalse(node0.isComma());
629:       assertFalse(node0.isTry());
630:       assertFalse(node0.isHook());
631:       assertFalse(node0.isThis());
632:       assertFalse(node0.isScript());
633:       assertFalse(node0.isExprResult());
634:       assertFalse(node0.isVoid());
635:       assertFalse(node0.isNull());
636:       assertFalse(node0.isTrue());
637:       assertFalse(node0.isLabelName());
638:       assertFalse(node0.isArrayLit());
639:       assertEquals(83, node0.getType());
640:       assertFalse(node0.isEmpty());
641:       assertFalse(node0.isNew());
642:       assertFalse(node0.isAdd());
643:       assertFalse(node0.isAssignAdd());
644:       assertFalse(node0.isLabel());
645:       assertEquals(0, node0.getChildCount());
646:       assertFalse(node0.isDefaultCase());
647:       assertFalse(node0.isVar());
648:       assertFalse(node0.isDo());
649:       assertFalse(node0.hasMoreThanOneChild());
650:       assertFalse(node0.isContinue());
651:       assertEquals((-1), node0.getLineno());
652:       assertFalse(node0.isOr());
653:       assertEquals((-1), node0.getSourcePosition());
654:       assertFalse(node0.isStringKey());
655:       assertFalse(node0.isGetElem());
656:       assertFalse(node0.isName());
657:       assertFalse(node0.isAssign());
658:       assertFalse(node0.isDec());
659:       assertFalse(node0.hasOneChild());
660:       assertFalse(node0.isTypeOf());
661:       assertFalse(node0.isNumber());
662:       assertFalse(node0.isCall());
663:       assertFalse(node0.isBlock());
664:       assertFalse(node0.hasChildren());
665:       assertFalse(node0.isWhile());
666:       assertFalse(node0.isReturn());
667:       assertFalse(node0.isWith());
668:       assertFalse(node0.isObjectLit());
669:       assertFalse(node0.isNot());
670:       assertFalse(node0.isRegExp());
671:       assertTrue(node0.isParamList());
672:       assertFalse(node0.isCatch());
673:       assertFalse(node0.isInstanceOf());
674:       assertFalse(node0.isDebugger());
675:       assertFalse(node0.isAnd());
676:       assertFalse(node0.isFalse());
677:       assertFalse(node0.isSetterDef());
678:       assertFalse(node0.isCast());
679:       assertFalse(node0.isFunction());
680:       assertFalse(node0.isThrow());
681:       assertFalse(node0.equals((Object)node1));
682:       
683:       Iterable<Node> iterable0 = node1.children();
684:       assertNotNull(iterable0);
685:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
686:       assertEquals(8, Node.FLAG_NO_THROWS);
687:       assertEquals(39, Node.EMPTY_BLOCK);
688:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
689:       assertEquals(48, Node.DIRECTIVES);
690:       assertEquals(40, Node.ORIGINALNAME_PROP);
691:       assertEquals(4095, Node.COLUMN_MASK);
692:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
693:       assertEquals(15, Node.NO_SIDE_EFFECTS);
694:       assertEquals(53, Node.INPUT_ID);
695:       assertEquals(57, Node.LAST_PROP);
696:       assertEquals(49, Node.DIRECT_EVAL);
697:       assertEquals(57, Node.REFLECTED_OBJECT);
698:       assertEquals(55, Node.INFERRED_FUNCTION);
699:       assertEquals(29, Node.JSDOC_INFO_PROP);
700:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
701:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
702:       assertEquals(52, Node.LENGTH);
703:       assertEquals(36, Node.QUOTED_PROP);
704:       assertEquals(37, Node.OPT_ARG_NAME);
705:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
706:       assertEquals(56, Node.CHANGE_TIME);
707:       assertEquals(32, Node.INCRDECR_PROP);
708:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
709:       assertEquals(12, Node.COLUMN_BITS);
710:       assertEquals(47, Node.IS_DISPATCHER);
711:       assertEquals(2, Node.POST_FLAG);
712:       assertEquals(30, Node.VAR_ARGS_NAME);
713:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
714:       assertEquals(43, Node.IS_CONSTANT_NAME);
715:       assertEquals(54, Node.SLASH_V);
716:       assertEquals(1, Node.DECR_FLAG);
717:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
718:       assertEquals(46, Node.IS_NAMESPACE);
719:       assertEquals(51, Node.STATIC_SOURCE_FILE);
720:       assertEquals(50, Node.FREE_CALL);
721:       assertEquals(40, Node.ORIGINALNAME_PROP);
722:       assertEquals(50, Node.FREE_CALL);
723:       assertEquals(57, Node.REFLECTED_OBJECT);
724:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
725:       assertEquals(54, Node.SLASH_V);
726:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
727:       assertEquals(48, Node.DIRECTIVES);
728:       assertEquals(4095, Node.COLUMN_MASK);
729:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
731:       assertEquals(30, Node.VAR_ARGS_NAME);
732:       assertEquals(49, Node.DIRECT_EVAL);
733:       assertEquals(57, Node.LAST_PROP);
734:       assertEquals(8, Node.FLAG_NO_THROWS);
735:       assertEquals(39, Node.EMPTY_BLOCK);
736:       assertEquals(36, Node.QUOTED_PROP);
737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(15, Node.NO_SIDE_EFFECTS);
740:       assertEquals(53, Node.INPUT_ID);
741:       assertEquals(55, Node.INFERRED_FUNCTION);
742:       assertEquals(29, Node.JSDOC_INFO_PROP);
743:       assertEquals(47, Node.IS_DISPATCHER);
744:       assertEquals(56, Node.CHANGE_TIME);
745:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
746:       assertEquals(37, Node.OPT_ARG_NAME);
747:       assertEquals(2, Node.POST_FLAG);
748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
750:       assertEquals(1, Node.DECR_FLAG);
751:       assertEquals(32, Node.INCRDECR_PROP);
752:       assertEquals(43, Node.IS_CONSTANT_NAME);
753:       assertEquals(12, Node.COLUMN_BITS);
754:       assertEquals(46, Node.IS_NAMESPACE);
755:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
756:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
757:       assertNotSame(node0, node1);
758:       assertNotSame(node1, node0);
759:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
760:       assertEquals(0, arrayList0.size());
761:       assertTrue(arrayList0.isEmpty());
762:       assertFalse(node0.isCase());
763:       assertFalse(node0.isIn());
764:       assertFalse(node0.isInc());
765:       assertFalse(node0.isString());
766:       assertEquals((-1), node0.getCharno());
767:       assertFalse(node0.isIf());
768:       assertFalse(node0.isSwitch());
769:       assertFalse(node0.isNE());
770:       assertFalse(node0.isFor());
771:       assertFalse(node0.isDelProp());
772:       assertFalse(node0.isGetterDef());
773:       assertFalse(node0.isBreak());
774:       assertFalse(node0.isGetProp());
775:       assertFalse(node0.isComma());
776:       assertFalse(node0.isTry());
777:       assertFalse(node0.isHook());
778:       assertFalse(node0.isThis());
779:       assertFalse(node0.isScript());
780:       assertFalse(node0.isExprResult());
781:       assertFalse(node0.isVoid());
782:       assertFalse(node0.isNull());
783:       assertFalse(node0.isTrue());
784:       assertFalse(node0.isLabelName());
785:       assertFalse(node0.isArrayLit());
786:       assertEquals(83, node0.getType());
787:       assertFalse(node0.isEmpty());
788:       assertFalse(node0.isNew());
789:       assertFalse(node0.isAdd());
790:       assertFalse(node0.isAssignAdd());
791:       assertFalse(node0.isLabel());
792:       assertEquals(0, node0.getChildCount());
793:       assertFalse(node0.isDefaultCase());
794:       assertFalse(node0.isVar());
795:       assertFalse(node0.isDo());
796:       assertFalse(node0.hasMoreThanOneChild());
797:       assertFalse(node0.isContinue());
798:       assertEquals((-1), node0.getLineno());
799:       assertFalse(node0.isOr());
800:       assertEquals((-1), node0.getSourcePosition());
801:       assertFalse(node0.isStringKey());
802:       assertFalse(node0.isGetElem());
803:       assertFalse(node0.isName());
804:       assertFalse(node0.isAssign());
805:       assertFalse(node0.isDec());
806:       assertFalse(node0.hasOneChild());
807:       assertFalse(node0.isTypeOf());
808:       assertFalse(node0.isNumber());
809:       assertFalse(node0.isCall());
810:       assertFalse(node0.isBlock());
811:       assertFalse(node0.hasChildren());
812:       assertFalse(node0.isWhile());
813:       assertFalse(node0.isReturn());
814:       assertFalse(node0.isWith());
815:       assertFalse(node0.isObjectLit());
816:       assertFalse(node0.isNot());
817:       assertFalse(node0.isRegExp());
818:       assertTrue(node0.isParamList());
819:       assertFalse(node0.isCatch());
820:       assertFalse(node0.isInstanceOf());
821:       assertFalse(node0.isDebugger());
822:       assertFalse(node0.isAnd());
823:       assertFalse(node0.isFalse());
824:       assertFalse(node0.isSetterDef());
825:       assertFalse(node0.isCast());
826:       assertFalse(node0.isFunction());
827:       assertFalse(node0.isThrow());
828:       assertFalse(node1.isNE());
829:       assertFalse(node1.isIf());
830:       assertFalse(node1.isDelProp());
831:       assertFalse(node1.isEmpty());
832:       assertFalse(node1.isCase());
833:       assertFalse(node1.isString());
834:       assertFalse(node1.isIn());
835:       assertFalse(node1.isGetterDef());
836:       assertEquals((-1), node1.getCharno());
837:       assertFalse(node1.isTry());
838:       assertFalse(node1.isTrue());
839:       assertFalse(node1.isVoid());
840:       assertFalse(node1.isFor());
841:       assertFalse(node1.isCatch());
842:       assertFalse(node1.isRegExp());
843:       assertFalse(node1.isHook());
844:       assertFalse(node1.isThis());
845:       assertFalse(node1.isComma());
846:       assertFalse(node1.isGetProp());
847:       assertFalse(node1.isInstanceOf());
848:       assertFalse(node1.isSetterDef());
849:       assertFalse(node1.isAnd());
850:       assertTrue(node1.isParamList());
851:       assertFalse(node1.isDebugger());
852:       assertFalse(node1.isObjectLit());
853:       assertFalse(node1.isNot());
854:       assertFalse(node1.isInc());
855:       assertFalse(node1.isFalse());
856:       assertFalse(node1.isContinue());
857:       assertFalse(node1.isThrow());
858:       assertFalse(node1.isCast());
859:       assertFalse(node1.isFunction());
860:       assertFalse(node1.isLabel());
861:       assertFalse(node1.isReturn());
862:       assertFalse(node1.isAssignAdd());
863:       assertFalse(node1.isLabelName());
864:       assertEquals((-1), node1.getLineno());
865:       assertEquals((-1), node1.getSourcePosition());
866:       assertFalse(node1.isNumber());
867:       assertFalse(node1.isOr());
868:       assertFalse(node1.isBlock());
869:       assertFalse(node1.isExprResult());
870:       assertFalse(node1.isScript());
871:       assertFalse(node1.hasOneChild());
872:       assertFalse(node1.isGetElem());
873:       assertFalse(node1.isWith());
874:       assertFalse(node1.isWhile());
875:       assertFalse(node1.isCall());
876:       assertFalse(node1.isTypeOf());
877:       assertFalse(node1.hasMoreThanOneChild());
878:       assertFalse(node1.hasChildren());
879:       assertFalse(node1.isAssign());
880:       assertFalse(node1.isDec());
881:       assertFalse(node1.isBreak());
882:       assertFalse(node1.isName());
883:       assertFalse(node1.isStringKey());
884:       assertFalse(node1.isNull());
885:       assertEquals(83, node1.getType());
886:       assertFalse(node1.isNew());
887:       assertFalse(node1.isAdd());
888:       assertFalse(node1.isArrayLit());
889:       assertFalse(node1.isSwitch());
890:       assertFalse(node1.isDefaultCase());
891:       assertFalse(node1.isDo());
892:       assertFalse(node1.isVar());
893:       assertEquals(0, node1.getChildCount());
894:       assertFalse(iterable0.contains(node0));
895:       assertFalse(node0.equals((Object)node1));
896:       assertFalse(node1.equals((Object)node0));
897:       
898:       boolean boolean1 = node0.hasMoreThanOneChild();
899:       assertFalse(boolean1);
900:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
901:       assertEquals(8, Node.FLAG_NO_THROWS);
902:       assertEquals(39, Node.EMPTY_BLOCK);
903:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
904:       assertEquals(48, Node.DIRECTIVES);
905:       assertEquals(40, Node.ORIGINALNAME_PROP);
906:       assertEquals(4095, Node.COLUMN_MASK);
907:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
908:       assertEquals(15, Node.NO_SIDE_EFFECTS);
909:       assertEquals(53, Node.INPUT_ID);
910:       assertEquals(57, Node.LAST_PROP);
911:       assertEquals(49, Node.DIRECT_EVAL);
912:       assertEquals(57, Node.REFLECTED_OBJECT);
913:       assertEquals(55, Node.INFERRED_FUNCTION);
914:       assertEquals(29, Node.JSDOC_INFO_PROP);
915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
916:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
917:       assertEquals(52, Node.LENGTH);
918:       assertEquals(36, Node.QUOTED_PROP);
919:       assertEquals(37, Node.OPT_ARG_NAME);
920:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
921:       assertEquals(56, Node.CHANGE_TIME);
922:       assertEquals(32, Node.INCRDECR_PROP);
923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
924:       assertEquals(12, Node.COLUMN_BITS);
925:       assertEquals(47, Node.IS_DISPATCHER);
926:       assertEquals(2, Node.POST_FLAG);
927:       assertEquals(30, Node.VAR_ARGS_NAME);
928:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
929:       assertEquals(43, Node.IS_CONSTANT_NAME);
930:       assertEquals(54, Node.SLASH_V);
931:       assertEquals(1, Node.DECR_FLAG);
932:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
933:       assertEquals(46, Node.IS_NAMESPACE);
934:       assertEquals(51, Node.STATIC_SOURCE_FILE);
935:       assertEquals(50, Node.FREE_CALL);
936:       assertNotSame(node0, node1);
937:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
938:       assertEquals(0, arrayList0.size());
939:       assertTrue(arrayList0.isEmpty());
940:       assertFalse(node0.isCase());
941:       assertFalse(node0.isIn());
942:       assertFalse(node0.isInc());
943:       assertFalse(node0.isString());
944:       assertEquals((-1), node0.getCharno());
945:       assertFalse(node0.isIf());
946:       assertFalse(node0.isSwitch());
947:       assertFalse(node0.isNE());
948:       assertFalse(node0.isFor());
949:       assertFalse(node0.isDelProp());
950:       assertFalse(node0.isGetterDef());
951:       assertFalse(node0.isBreak());
952:       assertFalse(node0.isGetProp());
953:       assertFalse(node0.isComma());
954:       assertFalse(node0.isTry());
955:       assertFalse(node0.isHook());
956:       assertFalse(node0.isThis());
957:       assertFalse(node0.isScript());
958:       assertFalse(node0.isExprResult());
959:       assertFalse(node0.isVoid());
960:       assertFalse(node0.isNull());
961:       assertFalse(node0.isTrue());
962:       assertFalse(node0.isLabelName());
963:       assertFalse(node0.isArrayLit());
964:       assertEquals(83, node0.getType());
965:       assertFalse(node0.isEmpty());
966:       assertFalse(node0.isNew());
967:       assertFalse(node0.isAdd());
968:       assertFalse(node0.isAssignAdd());
969:       assertFalse(node0.isLabel());
970:       assertEquals(0, node0.getChildCount());
971:       assertFalse(node0.isDefaultCase());
972:       assertFalse(node0.isVar());
973:       assertFalse(node0.isDo());
974:       assertFalse(node0.hasMoreThanOneChild());
975:       assertFalse(node0.isContinue());
976:       assertEquals((-1), node0.getLineno());
977:       assertFalse(node0.isOr());
978:       assertEquals((-1), node0.getSourcePosition());
979:       assertFalse(node0.isStringKey());
980:       assertFalse(node0.isGetElem());
981:       assertFalse(node0.isName());
982:       assertFalse(node0.isAssign());
983:       assertFalse(node0.isDec());
984:       assertFalse(node0.hasOneChild());
985:       assertFalse(node0.isTypeOf());
986:       assertFalse(node0.isNumber());
987:       assertFalse(node0.isCall());
988:       assertFalse(node0.isBlock());
989:       assertFalse(node0.hasChildren());
990:       assertFalse(node0.isWhile());
991:       assertFalse(node0.isReturn());
992:       assertFalse(node0.isWith());
993:       assertFalse(node0.isObjectLit());
994:       assertFalse(node0.isNot());
995:       assertFalse(node0.isRegExp());
996:       assertTrue(node0.isParamList());
997:       assertFalse(node0.isCatch());
998:       assertFalse(node0.isInstanceOf());
999:       assertFalse(node0.isDebugger());
1000:       assertFalse(node0.isAnd());
1001:       assertFalse(node0.isFalse());
1002:       assertFalse(node0.isSetterDef());
1003:       assertFalse(node0.isCast());
1004:       assertFalse(node0.isFunction());
1005:       assertFalse(node0.isThrow());
1006:       assertFalse(node0.equals((Object)node1));
1007:       assertTrue(boolean1 == boolean0);
1008:       
1009:       simpleErrorReporter0.error("Object#Key", "Object#Key", (-129), 36);
1010:       JSDocInfo jSDocInfo0 = new JSDocInfo(false);
1011:       assertNotNull(jSDocInfo0);
1012:       assertFalse(jSDocInfo0.hasEnumParameterType());
1013:       assertFalse(jSDocInfo0.hasModifies());
1014:       assertFalse(jSDocInfo0.isConstructor());
1015:       assertFalse(jSDocInfo0.isJaggerInject());
1016:       assertFalse(jSDocInfo0.isNoTypeCheck());
1017:       assertFalse(jSDocInfo0.hasReturnType());
1018:       assertFalse(jSDocInfo0.isNoAlias());
1019:       assertFalse(jSDocInfo0.hasBaseType());
1020:       assertFalse(jSDocInfo0.hasThisType());
1021:       assertNull(jSDocInfo0.getVisibility());
1022:       assertNull(jSDocInfo0.getFileOverview());
1023:       assertNull(jSDocInfo0.getReturnDescription());
1024:       assertFalse(jSDocInfo0.isDefine());
1025:       assertNull(jSDocInfo0.getDescription());
1026:       assertFalse(jSDocInfo0.hasTypedefType());
1027:       assertEquals(0, jSDocInfo0.getParameterCount());
1028:       assertFalse(jSDocInfo0.isImplicitCast());
1029:       assertFalse(jSDocInfo0.isStableIdGenerator());
1030:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1031:       assertNull(jSDocInfo0.getLicense());
1032:       assertNull(jSDocInfo0.getVersion());
1033:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1034:       assertFalse(jSDocInfo0.hasFileOverview());
1035:       assertNull(jSDocInfo0.getBlockDescription());
1036:       assertFalse(jSDocInfo0.isInterface());
1037:       assertFalse(jSDocInfo0.isConstant());
1038:       assertFalse(jSDocInfo0.isWizaction());
1039:       assertFalse(jSDocInfo0.isOverride());
1040:       assertFalse(jSDocInfo0.isJavaDispatch());
1041:       assertFalse(jSDocInfo0.isExport());
1042:       assertFalse(jSDocInfo0.isDeprecated());
1043:       assertFalse(jSDocInfo0.isNoCompile());
1044:       assertFalse(jSDocInfo0.isJaggerModule());
1045:       assertNull(jSDocInfo0.getDeprecationReason());
1046:       assertFalse(jSDocInfo0.isExterns());
1047:       assertFalse(jSDocInfo0.isHidden());
1048:       assertFalse(jSDocInfo0.isIdGenerator());
1049:       assertFalse(jSDocInfo0.makesStructs());
1050:       assertFalse(jSDocInfo0.isJaggerProvide());
1051:       assertFalse(jSDocInfo0.isDisposes());
1052:       assertFalse(jSDocInfo0.hasType());
1053:       assertNull(jSDocInfo0.getOriginalCommentString());
1054:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1055:       assertNull(jSDocInfo0.getMeaning());
1056:       assertNull(jSDocInfo0.getLendsName());
1057:       assertFalse(jSDocInfo0.shouldPreserveTry());
1058:       assertFalse(jSDocInfo0.isExpose());
1059:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1060:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1061:       assertFalse(jSDocInfo0.isNoShadow());
1062:       assertFalse(jSDocInfo0.isNoSideEffects());
1063:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1064:       assertFalse(jSDocInfo0.containsDeclaration());
1065:       assertFalse(jSDocInfo0.makesDicts());
1066:       assertFalse(jSDocInfo0.isNgInject());
1067:       
1068:       node1.addChildToFront(node0);
1069:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1070:       assertEquals(8, Node.FLAG_NO_THROWS);
1071:       assertEquals(39, Node.EMPTY_BLOCK);
1072:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1073:       assertEquals(48, Node.DIRECTIVES);
1074:       assertEquals(40, Node.ORIGINALNAME_PROP);
1075:       assertEquals(4095, Node.COLUMN_MASK);
1076:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1077:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1078:       assertEquals(53, Node.INPUT_ID);
1079:       assertEquals(57, Node.LAST_PROP);
1080:       assertEquals(49, Node.DIRECT_EVAL);
1081:       assertEquals(57, Node.REFLECTED_OBJECT);
1082:       assertEquals(55, Node.INFERRED_FUNCTION);
1083:       assertEquals(29, Node.JSDOC_INFO_PROP);
1084:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1085:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1086:       assertEquals(52, Node.LENGTH);
1087:       assertEquals(36, Node.QUOTED_PROP);
1088:       assertEquals(37, Node.OPT_ARG_NAME);
1089:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1090:       assertEquals(56, Node.CHANGE_TIME);
1091:       assertEquals(32, Node.INCRDECR_PROP);
1092:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1093:       assertEquals(12, Node.COLUMN_BITS);
1094:       assertEquals(47, Node.IS_DISPATCHER);
1095:       assertEquals(2, Node.POST_FLAG);
1096:       assertEquals(30, Node.VAR_ARGS_NAME);
1097:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1098:       assertEquals(43, Node.IS_CONSTANT_NAME);
1099:       assertEquals(54, Node.SLASH_V);
1100:       assertEquals(1, Node.DECR_FLAG);
1101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1102:       assertEquals(46, Node.IS_NAMESPACE);
1103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1104:       assertEquals(50, Node.FREE_CALL);
1105:       assertEquals(40, Node.ORIGINALNAME_PROP);
1106:       assertEquals(50, Node.FREE_CALL);
1107:       assertEquals(57, Node.REFLECTED_OBJECT);
1108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1109:       assertEquals(54, Node.SLASH_V);
1110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1111:       assertEquals(48, Node.DIRECTIVES);
1112:       assertEquals(4095, Node.COLUMN_MASK);
1113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1115:       assertEquals(30, Node.VAR_ARGS_NAME);
1116:       assertEquals(49, Node.DIRECT_EVAL);
1117:       assertEquals(57, Node.LAST_PROP);
1118:       assertEquals(8, Node.FLAG_NO_THROWS);
1119:       assertEquals(39, Node.EMPTY_BLOCK);
1120:       assertEquals(36, Node.QUOTED_PROP);
1121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1122:       assertEquals(52, Node.LENGTH);
1123:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1124:       assertEquals(53, Node.INPUT_ID);
1125:       assertEquals(55, Node.INFERRED_FUNCTION);
1126:       assertEquals(29, Node.JSDOC_INFO_PROP);
1127:       assertEquals(47, Node.IS_DISPATCHER);
1128:       assertEquals(56, Node.CHANGE_TIME);
1129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1130:       assertEquals(37, Node.OPT_ARG_NAME);
1131:       assertEquals(2, Node.POST_FLAG);
1132:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1134:       assertEquals(1, Node.DECR_FLAG);
1135:       assertEquals(32, Node.INCRDECR_PROP);
1136:       assertEquals(43, Node.IS_CONSTANT_NAME);
1137:       assertEquals(12, Node.COLUMN_BITS);
1138:       assertEquals(46, Node.IS_NAMESPACE);
1139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1140:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1141:       assertNotSame(node0, node1);
1142:       assertNotSame(node1, node0);
1143:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1144:       assertEquals(0, arrayList0.size());
1145:       assertTrue(arrayList0.isEmpty());
1146:       assertFalse(node0.isCase());
1147:       assertFalse(node0.isIn());
1148:       assertFalse(node0.isInc());
1149:       assertFalse(node0.isString());
1150:       assertEquals((-1), node0.getCharno());
1151:       assertFalse(node0.isIf());
1152:       assertFalse(node0.isSwitch());
1153:       assertFalse(node0.isNE());
1154:       assertFalse(node0.isFor());
1155:       assertFalse(node0.isDelProp());
1156:       assertFalse(node0.isGetterDef());
1157:       assertFalse(node0.isBreak());
1158:       assertFalse(node0.isGetProp());
1159:       assertFalse(node0.isComma());
1160:       assertFalse(node0.isTry());
1161:       assertFalse(node0.isHook());
1162:       assertFalse(node0.isThis());
1163:       assertFalse(node0.isScript());
1164:       assertFalse(node0.isExprResult());
1165:       assertFalse(node0.isVoid());
1166:       assertFalse(node0.isNull());
1167:       assertFalse(node0.isTrue());
1168:       assertFalse(node0.isLabelName());
1169:       assertFalse(node0.isArrayLit());
1170:       assertEquals(83, node0.getType());
1171:       assertFalse(node0.isEmpty());
1172:       assertFalse(node0.isNew());
1173:       assertFalse(node0.isAdd());
1174:       assertFalse(node0.isAssignAdd());
1175:       assertFalse(node0.isLabel());
1176:       assertEquals(0, node0.getChildCount());
1177:       assertFalse(node0.isDefaultCase());
1178:       assertFalse(node0.isVar());
1179:       assertFalse(node0.isDo());
1180:       assertFalse(node0.hasMoreThanOneChild());
1181:       assertFalse(node0.isContinue());
1182:       assertEquals((-1), node0.getLineno());
1183:       assertFalse(node0.isOr());
1184:       assertEquals((-1), node0.getSourcePosition());
1185:       assertFalse(node0.isStringKey());
1186:       assertFalse(node0.isGetElem());
1187:       assertFalse(node0.isName());
1188:       assertFalse(node0.isAssign());
1189:       assertFalse(node0.isDec());
1190:       assertFalse(node0.hasOneChild());
1191:       assertFalse(node0.isTypeOf());
1192:       assertFalse(node0.isNumber());
1193:       assertFalse(node0.isCall());
1194:       assertFalse(node0.isBlock());
1195:       assertFalse(node0.hasChildren());
1196:       assertFalse(node0.isWhile());
1197:       assertFalse(node0.isReturn());
1198:       assertFalse(node0.isWith());
1199:       assertFalse(node0.isObjectLit());
1200:       assertFalse(node0.isNot());
1201:       assertFalse(node0.isRegExp());
1202:       assertTrue(node0.isParamList());
1203:       assertFalse(node0.isCatch());
1204:       assertFalse(node0.isInstanceOf());
1205:       assertFalse(node0.isDebugger());
1206:       assertFalse(node0.isAnd());
1207:       assertFalse(node0.isFalse());
1208:       assertFalse(node0.isSetterDef());
1209:       assertFalse(node0.isCast());
1210:       assertFalse(node0.isFunction());
1211:       assertFalse(node0.isThrow());
1212:       assertFalse(node1.isNE());
1213:       assertTrue(node1.hasChildren());
1214:       assertFalse(node1.isIf());
1215:       assertFalse(node1.isDelProp());
1216:       assertFalse(node1.isEmpty());
1217:       assertFalse(node1.isCase());
1218:       assertFalse(node1.isString());
1219:       assertFalse(node1.isIn());
1220:       assertFalse(node1.isGetterDef());
1221:       assertEquals((-1), node1.getCharno());
1222:       assertFalse(node1.isTry());
1223:       assertFalse(node1.isTrue());
1224:       assertFalse(node1.isVoid());
1225:       assertFalse(node1.isFor());
1226:       assertTrue(node1.hasOneChild());
1227:       assertFalse(node1.isCatch());
1228:       assertFalse(node1.isRegExp());
1229:       assertFalse(node1.isHook());
1230:       assertFalse(node1.isThis());
1231:       assertEquals(1, node1.getChildCount());
1232:       assertFalse(node1.isComma());
1233:       assertFalse(node1.isGetProp());
1234:       assertFalse(node1.isInstanceOf());
1235:       assertFalse(node1.isSetterDef());
1236:       assertFalse(node1.isAnd());
1237:       assertTrue(node1.isParamList());
1238:       assertFalse(node1.isDebugger());
1239:       assertFalse(node1.isObjectLit());
1240:       assertFalse(node1.isNot());
1241:       assertFalse(node1.isInc());
1242:       assertFalse(node1.isFalse());
1243:       assertFalse(node1.isContinue());
1244:       assertFalse(node1.isThrow());
1245:       assertFalse(node1.isCast());
1246:       assertFalse(node1.isFunction());
1247:       assertFalse(node1.isLabel());
1248:       assertFalse(node1.isReturn());
1249:       assertFalse(node1.isAssignAdd());
1250:       assertFalse(node1.isLabelName());
1251:       assertEquals((-1), node1.getLineno());
1252:       assertEquals((-1), node1.getSourcePosition());
1253:       assertFalse(node1.isNumber());
1254:       assertFalse(node1.isOr());
1255:       assertFalse(node1.isBlock());
1256:       assertFalse(node1.isExprResult());
1257:       assertFalse(node1.isScript());
1258:       assertFalse(node1.isGetElem());
1259:       assertFalse(node1.isWith());
1260:       assertFalse(node1.isWhile());
1261:       assertFalse(node1.isCall());
1262:       assertFalse(node1.isTypeOf());
1263:       assertFalse(node1.hasMoreThanOneChild());
1264:       assertFalse(node1.isAssign());
1265:       assertFalse(node1.isDec());
1266:       assertFalse(node1.isBreak());
1267:       assertFalse(node1.isName());
1268:       assertFalse(node1.isStringKey());
1269:       assertFalse(node1.isNull());
1270:       assertEquals(83, node1.getType());
1271:       assertFalse(node1.isNew());
1272:       assertFalse(node1.isAdd());
1273:       assertFalse(node1.isArrayLit());
1274:       assertFalse(node1.isSwitch());
1275:       assertFalse(node1.isDefaultCase());
1276:       assertFalse(node1.isDo());
1277:       assertFalse(node1.isVar());
1278:       assertFalse(node0.equals((Object)node1));
1279:       assertFalse(node1.equals((Object)node0));
1280:       
1281:       int int0 = node1.getSideEffectFlags();
1282:       assertEquals(0, int0);
1283:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1284:       assertEquals(8, Node.FLAG_NO_THROWS);
1285:       assertEquals(39, Node.EMPTY_BLOCK);
1286:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1287:       assertEquals(48, Node.DIRECTIVES);
1288:       assertEquals(40, Node.ORIGINALNAME_PROP);
1289:       assertEquals(4095, Node.COLUMN_MASK);
1290:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1291:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1292:       assertEquals(53, Node.INPUT_ID);
1293:       assertEquals(57, Node.LAST_PROP);
1294:       assertEquals(49, Node.DIRECT_EVAL);
1295:       assertEquals(57, Node.REFLECTED_OBJECT);
1296:       assertEquals(55, Node.INFERRED_FUNCTION);
1297:       assertEquals(29, Node.JSDOC_INFO_PROP);
1298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1299:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1300:       assertEquals(52, Node.LENGTH);
1301:       assertEquals(36, Node.QUOTED_PROP);
1302:       assertEquals(37, Node.OPT_ARG_NAME);
1303:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1304:       assertEquals(56, Node.CHANGE_TIME);
1305:       assertEquals(32, Node.INCRDECR_PROP);
1306:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1307:       assertEquals(12, Node.COLUMN_BITS);
1308:       assertEquals(47, Node.IS_DISPATCHER);
1309:       assertEquals(2, Node.POST_FLAG);
1310:       assertEquals(30, Node.VAR_ARGS_NAME);
1311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1312:       assertEquals(43, Node.IS_CONSTANT_NAME);
1313:       assertEquals(54, Node.SLASH_V);
1314:       assertEquals(1, Node.DECR_FLAG);
1315:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1316:       assertEquals(46, Node.IS_NAMESPACE);
1317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1318:       assertEquals(50, Node.FREE_CALL);
1319:       assertEquals(40, Node.ORIGINALNAME_PROP);
1320:       assertEquals(50, Node.FREE_CALL);
1321:       assertEquals(57, Node.REFLECTED_OBJECT);
1322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1323:       assertEquals(54, Node.SLASH_V);
1324:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1325:       assertEquals(48, Node.DIRECTIVES);
1326:       assertEquals(4095, Node.COLUMN_MASK);
1327:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1328:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1329:       assertEquals(30, Node.VAR_ARGS_NAME);
1330:       assertEquals(49, Node.DIRECT_EVAL);
1331:       assertEquals(57, Node.LAST_PROP);
1332:       assertEquals(8, Node.FLAG_NO_THROWS);
1333:       assertEquals(39, Node.EMPTY_BLOCK);
1334:       assertEquals(36, Node.QUOTED_PROP);
1335:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1336:       assertEquals(52, Node.LENGTH);
1337:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1338:       assertEquals(53, Node.INPUT_ID);
1339:       assertEquals(55, Node.INFERRED_FUNCTION);
1340:       assertEquals(29, Node.JSDOC_INFO_PROP);
1341:       assertEquals(47, Node.IS_DISPATCHER);
1342:       assertEquals(56, Node.CHANGE_TIME);
1343:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1344:       assertEquals(37, Node.OPT_ARG_NAME);
1345:       assertEquals(2, Node.POST_FLAG);
1346:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1348:       assertEquals(1, Node.DECR_FLAG);
1349:       assertEquals(32, Node.INCRDECR_PROP);
1350:       assertEquals(43, Node.IS_CONSTANT_NAME);
1351:       assertEquals(12, Node.COLUMN_BITS);
1352:       assertEquals(46, Node.IS_NAMESPACE);
1353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1354:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1355:       assertNotSame(node0, node1);
1356:       assertNotSame(node1, node0);
1357:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1358:       assertEquals(0, arrayList0.size());
1359:       assertTrue(arrayList0.isEmpty());
1360:       assertFalse(node0.isCase());
1361:       assertFalse(node0.isIn());
1362:       assertFalse(node0.isInc());
1363:       assertFalse(node0.isString());
1364:       assertEquals((-1), node0.getCharno());
1365:       assertFalse(node0.isIf());
1366:       assertFalse(node0.isSwitch());
1367:       assertFalse(node0.isNE());
1368:       assertFalse(node0.isFor());
1369:       assertFalse(node0.isDelProp());
1370:       assertFalse(node0.isGetterDef());
1371:       assertFalse(node0.isBreak());
1372:       assertFalse(node0.isGetProp());
1373:       assertFalse(node0.isComma());
1374:       assertFalse(node0.isTry());
1375:       assertFalse(node0.isHook());
1376:       assertFalse(node0.isThis());
1377:       assertFalse(node0.isScript());
1378:       assertFalse(node0.isExprResult());
1379:       assertFalse(node0.isVoid());
1380:       assertFalse(node0.isNull());
1381:       assertFalse(node0.isTrue());
1382:       assertFalse(node0.isLabelName());
1383:       assertFalse(node0.isArrayLit());
1384:       assertEquals(83, node0.getType());
1385:       assertFalse(node0.isEmpty());
1386:       assertFalse(node0.isNew());
1387:       assertFalse(node0.isAdd());
1388:       assertFalse(node0.isAssignAdd());
1389:       assertFalse(node0.isLabel());
1390:       assertEquals(0, node0.getChildCount());
1391:       assertFalse(node0.isDefaultCase());
1392:       assertFalse(node0.isVar());
1393:       assertFalse(node0.isDo());
1394:       assertFalse(node0.hasMoreThanOneChild());
1395:       assertFalse(node0.isContinue());
1396:       assertEquals((-1), node0.getLineno());
1397:       assertFalse(node0.isOr());
1398:       assertEquals((-1), node0.getSourcePosition());
1399:       assertFalse(node0.isStringKey());
1400:       assertFalse(node0.isGetElem());
1401:       assertFalse(node0.isName());
1402:       assertFalse(node0.isAssign());
1403:       assertFalse(node0.isDec());
1404:       assertFalse(node0.hasOneChild());
1405:       assertFalse(node0.isTypeOf());
1406:       assertFalse(node0.isNumber());
1407:       assertFalse(node0.isCall());
1408:       assertFalse(node0.isBlock());
1409:       assertFalse(node0.hasChildren());
1410:       assertFalse(node0.isWhile());
1411:       assertFalse(node0.isReturn());
1412:       assertFalse(node0.isWith());
1413:       assertFalse(node0.isObjectLit());
1414:       assertFalse(node0.isNot());
1415:       assertFalse(node0.isRegExp());
1416:       assertTrue(node0.isParamList());
1417:       assertFalse(node0.isCatch());
1418:       assertFalse(node0.isInstanceOf());
1419:       assertFalse(node0.isDebugger());
1420:       assertFalse(node0.isAnd());
1421:       assertFalse(node0.isFalse());
1422:       assertFalse(node0.isSetterDef());
1423:       assertFalse(node0.isCast());
1424:       assertFalse(node0.isFunction());
1425:       assertFalse(node0.isThrow());
1426:       assertFalse(node1.isNE());
1427:       assertTrue(node1.hasChildren());
1428:       assertFalse(node1.isIf());
1429:       assertFalse(node1.isDelProp());
1430:       assertFalse(node1.isEmpty());
1431:       assertFalse(node1.isCase());
1432:       assertFalse(node1.isString());
1433:       assertFalse(node1.isIn());
1434:       assertFalse(node1.isGetterDef());
1435:       assertEquals((-1), node1.getCharno());
1436:       assertFalse(node1.isTry());
1437:       assertFalse(node1.isTrue());
1438:       assertFalse(node1.isVoid());
1439:       assertFalse(node1.isFor());
1440:       assertTrue(node1.hasOneChild());
1441:       assertFalse(node1.isCatch());
1442:       assertFalse(node1.isRegExp());
1443:       assertFalse(node1.isHook());
1444:       assertFalse(node1.isThis());
1445:       assertEquals(1, node1.getChildCount());
1446:       assertFalse(node1.isComma());
1447:       assertFalse(node1.isGetProp());
1448:       assertFalse(node1.isInstanceOf());
1449:       assertFalse(node1.isSetterDef());
1450:       assertFalse(node1.isAnd());
1451:       assertTrue(node1.isParamList());
1452:       assertFalse(node1.isDebugger());
1453:       assertFalse(node1.isObjectLit());
1454:       assertFalse(node1.isNot());
1455:       assertFalse(node1.isInc());
1456:       assertFalse(node1.isFalse());
1457:       assertFalse(node1.isContinue());
1458:       assertFalse(node1.isThrow());
1459:       assertFalse(node1.isCast());
1460:       assertFalse(node1.isFunction());
1461:       assertFalse(node1.isLabel());
1462:       assertFalse(node1.isReturn());
1463:       assertFalse(node1.isAssignAdd());
1464:       assertFalse(node1.isLabelName());
1465:       assertEquals((-1), node1.getLineno());
1466:       assertEquals((-1), node1.getSourcePosition());
1467:       assertFalse(node1.isNumber());
1468:       assertFalse(node1.isOr());
1469:       assertFalse(node1.isBlock());
1470:       assertFalse(node1.isExprResult());
1471:       assertFalse(node1.isScript());
1472:       assertFalse(node1.isGetElem());
1473:       assertFalse(node1.isWith());
1474:       assertFalse(node1.isWhile());
1475:       assertFalse(node1.isCall());
1476:       assertFalse(node1.isTypeOf());
1477:       assertFalse(node1.hasMoreThanOneChild());
1478:       assertFalse(node1.isAssign());
1479:       assertFalse(node1.isDec());
1480:       assertFalse(node1.isBreak());
1481:       assertFalse(node1.isName());
1482:       assertFalse(node1.isStringKey());
1483:       assertFalse(node1.isNull());
1484:       assertEquals(83, node1.getType());
1485:       assertFalse(node1.isNew());
1486:       assertFalse(node1.isAdd());
1487:       assertFalse(node1.isArrayLit());
1488:       assertFalse(node1.isSwitch());
1489:       assertFalse(node1.isDefaultCase());
1490:       assertFalse(node1.isDo());
1491:       assertFalse(node1.isVar());
1492:       assertFalse(node0.equals((Object)node1));
1493:       assertFalse(node1.equals((Object)node0));
1494:       
1495:       boolean boolean2 = node1.isName();
1496:       assertFalse(boolean2);
1497:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1498:       assertEquals(8, Node.FLAG_NO_THROWS);
1499:       assertEquals(39, Node.EMPTY_BLOCK);
1500:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1501:       assertEquals(48, Node.DIRECTIVES);
1502:       assertEquals(40, Node.ORIGINALNAME_PROP);
1503:       assertEquals(4095, Node.COLUMN_MASK);
1504:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1505:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1506:       assertEquals(53, Node.INPUT_ID);
1507:       assertEquals(57, Node.LAST_PROP);
1508:       assertEquals(49, Node.DIRECT_EVAL);
1509:       assertEquals(57, Node.REFLECTED_OBJECT);
1510:       assertEquals(55, Node.INFERRED_FUNCTION);
1511:       assertEquals(29, Node.JSDOC_INFO_PROP);
1512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1513:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1514:       assertEquals(52, Node.LENGTH);
1515:       assertEquals(36, Node.QUOTED_PROP);
1516:       assertEquals(37, Node.OPT_ARG_NAME);
1517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1518:       assertEquals(56, Node.CHANGE_TIME);
1519:       assertEquals(32, Node.INCRDECR_PROP);
1520:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1521:       assertEquals(12, Node.COLUMN_BITS);
1522:       assertEquals(47, Node.IS_DISPATCHER);
1523:       assertEquals(2, Node.POST_FLAG);
1524:       assertEquals(30, Node.VAR_ARGS_NAME);
1525:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1526:       assertEquals(43, Node.IS_CONSTANT_NAME);
1527:       assertEquals(54, Node.SLASH_V);
1528:       assertEquals(1, Node.DECR_FLAG);
1529:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1530:       assertEquals(46, Node.IS_NAMESPACE);
1531:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1532:       assertEquals(50, Node.FREE_CALL);
1533:       assertEquals(40, Node.ORIGINALNAME_PROP);
1534:       assertEquals(50, Node.FREE_CALL);
1535:       assertEquals(57, Node.REFLECTED_OBJECT);
1536:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1537:       assertEquals(54, Node.SLASH_V);
1538:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1539:       assertEquals(48, Node.DIRECTIVES);
1540:       assertEquals(4095, Node.COLUMN_MASK);
1541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1542:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1543:       assertEquals(30, Node.VAR_ARGS_NAME);
1544:       assertEquals(49, Node.DIRECT_EVAL);
1545:       assertEquals(57, Node.LAST_PROP);
1546:       assertEquals(8, Node.FLAG_NO_THROWS);
1547:       assertEquals(39, Node.EMPTY_BLOCK);
1548:       assertEquals(36, Node.QUOTED_PROP);
1549:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1550:       assertEquals(52, Node.LENGTH);
1551:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1552:       assertEquals(53, Node.INPUT_ID);
1553:       assertEquals(55, Node.INFERRED_FUNCTION);
1554:       assertEquals(29, Node.JSDOC_INFO_PROP);
1555:       assertEquals(47, Node.IS_DISPATCHER);
1556:       assertEquals(56, Node.CHANGE_TIME);
1557:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1558:       assertEquals(37, Node.OPT_ARG_NAME);
1559:       assertEquals(2, Node.POST_FLAG);
1560:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1561:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1562:       assertEquals(1, Node.DECR_FLAG);
1563:       assertEquals(32, Node.INCRDECR_PROP);
1564:       assertEquals(43, Node.IS_CONSTANT_NAME);
1565:       assertEquals(12, Node.COLUMN_BITS);
1566:       assertEquals(46, Node.IS_NAMESPACE);
1567:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1568:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1569:       assertNotSame(node0, node1);
1570:       assertNotSame(node1, node0);
1571:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1572:       assertEquals(0, arrayList0.size());
1573:       assertTrue(arrayList0.isEmpty());
1574:       assertFalse(node0.isCase());
1575:       assertFalse(node0.isIn());
1576:       assertFalse(node0.isInc());
1577:       assertFalse(node0.isString());
1578:       assertEquals((-1), node0.getCharno());
1579:       assertFalse(node0.isIf());
1580:       assertFalse(node0.isSwitch());
1581:       assertFalse(node0.isNE());
1582:       assertFalse(node0.isFor());
1583:       assertFalse(node0.isDelProp());
1584:       assertFalse(node0.isGetterDef());
1585:       assertFalse(node0.isBreak());
1586:       assertFalse(node0.isGetProp());
1587:       assertFalse(node0.isComma());
1588:       assertFalse(node0.isTry());
1589:       assertFalse(node0.isHook());
1590:       assertFalse(node0.isThis());
1591:       assertFalse(node0.isScript());
1592:       assertFalse(node0.isExprResult());
1593:       assertFalse(node0.isVoid());
1594:       assertFalse(node0.isNull());
1595:       assertFalse(node0.isTrue());
1596:       assertFalse(node0.isLabelName());
1597:       assertFalse(node0.isArrayLit());
1598:       assertEquals(83, node0.getType());
1599:       assertFalse(node0.isEmpty());
1600:       assertFalse(node0.isNew());
1601:       assertFalse(node0.isAdd());
1602:       assertFalse(node0.isAssignAdd());
1603:       assertFalse(node0.isLabel());
1604:       assertEquals(0, node0.getChildCount());
1605:       assertFalse(node0.isDefaultCase());
1606:       assertFalse(node0.isVar());
1607:       assertFalse(node0.isDo());
1608:       assertFalse(node0.hasMoreThanOneChild());
1609:       assertFalse(node0.isContinue());
1610:       assertEquals((-1), node0.getLineno());
1611:       assertFalse(node0.isOr());
1612:       assertEquals((-1), node0.getSourcePosition());
1613:       assertFalse(node0.isStringKey());
1614:       assertFalse(node0.isGetElem());
1615:       assertFalse(node0.isName());
1616:       assertFalse(node0.isAssign());
1617:       assertFalse(node0.isDec());
1618:       assertFalse(node0.hasOneChild());
1619:       assertFalse(node0.isTypeOf());
1620:       assertFalse(node0.isNumber());
1621:       assertFalse(node0.isCall());
1622:       assertFalse(node0.isBlock());
1623:       assertFalse(node0.hasChildren());
1624:       assertFalse(node0.isWhile());
1625:       assertFalse(node0.isReturn());
1626:       assertFalse(node0.isWith());
1627:       assertFalse(node0.isObjectLit());
1628:       assertFalse(node0.isNot());
1629:       assertFalse(node0.isRegExp());
1630:       assertTrue(node0.isParamList());
1631:       assertFalse(node0.isCatch());
1632:       assertFalse(node0.isInstanceOf());
1633:       assertFalse(node0.isDebugger());
1634:       assertFalse(node0.isAnd());
1635:       assertFalse(node0.isFalse());
1636:       assertFalse(node0.isSetterDef());
1637:       assertFalse(node0.isCast());
1638:       assertFalse(node0.isFunction());
1639:       assertFalse(node0.isThrow());
1640:       assertFalse(node1.isNE());
1641:       assertTrue(node1.hasChildren());
1642:       assertFalse(node1.isIf());
1643:       assertFalse(node1.isDelProp());
1644:       assertFalse(node1.isEmpty());
1645:       assertFalse(node1.isCase());
1646:       assertFalse(node1.isString());
1647:       assertFalse(node1.isIn());
1648:       assertFalse(node1.isGetterDef());
1649:       assertEquals((-1), node1.getCharno());
1650:       assertFalse(node1.isTry());
1651:       assertFalse(node1.isTrue());
1652:       assertFalse(node1.isVoid());
1653:       assertFalse(node1.isFor());
1654:       assertTrue(node1.hasOneChild());
1655:       assertFalse(node1.isCatch());
1656:       assertFalse(node1.isRegExp());
1657:       assertFalse(node1.isHook());
1658:       assertFalse(node1.isThis());
1659:       assertEquals(1, node1.getChildCount());
1660:       assertFalse(node1.isComma());
1661:       assertFalse(node1.isGetProp());
1662:       assertFalse(node1.isInstanceOf());
1663:       assertFalse(node1.isSetterDef());
1664:       assertFalse(node1.isAnd());
1665:       assertTrue(node1.isParamList());
1666:       assertFalse(node1.isDebugger());
1667:       assertFalse(node1.isObjectLit());
1668:       assertFalse(node1.isNot());
1669:       assertFalse(node1.isInc());
1670:       assertFalse(node1.isFalse());
1671:       assertFalse(node1.isContinue());
1672:       assertFalse(node1.isThrow());
1673:       assertFalse(node1.isCast());
1674:       assertFalse(node1.isFunction());
1675:       assertFalse(node1.isLabel());
1676:       assertFalse(node1.isReturn());
1677:       assertFalse(node1.isAssignAdd());
1678:       assertFalse(node1.isLabelName());
1679:       assertEquals((-1), node1.getLineno());
1680:       assertEquals((-1), node1.getSourcePosition());
1681:       assertFalse(node1.isNumber());
1682:       assertFalse(node1.isOr());
1683:       assertFalse(node1.isBlock());
1684:       assertFalse(node1.isExprResult());
1685:       assertFalse(node1.isScript());
1686:       assertFalse(node1.isGetElem());
1687:       assertFalse(node1.isWith());
1688:       assertFalse(node1.isWhile());
1689:       assertFalse(node1.isCall());
1690:       assertFalse(node1.isTypeOf());
1691:       assertFalse(node1.hasMoreThanOneChild());
1692:       assertFalse(node1.isAssign());
1693:       assertFalse(node1.isDec());
1694:       assertFalse(node1.isBreak());
1695:       assertFalse(node1.isName());
1696:       assertFalse(node1.isStringKey());
1697:       assertFalse(node1.isNull());
1698:       assertEquals(83, node1.getType());
1699:       assertFalse(node1.isNew());
1700:       assertFalse(node1.isAdd());
1701:       assertFalse(node1.isArrayLit());
1702:       assertFalse(node1.isSwitch());
1703:       assertFalse(node1.isDefaultCase());
1704:       assertFalse(node1.isDo());
1705:       assertFalse(node1.isVar());
1706:       assertFalse(node0.equals((Object)node1));
1707:       assertFalse(node1.equals((Object)node0));
1708:       assertTrue(boolean2 == boolean0);
1709:       assertTrue(boolean2 == boolean1);
1710:       
1711:       Node node2 = Node.newString(130, "Object#Key");
1712:       assertNotNull(node2);
1713:       assertEquals(54, Node.SLASH_V);
1714:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1715:       assertEquals(52, Node.LENGTH);
1716:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1717:       assertEquals(40, Node.ORIGINALNAME_PROP);
1718:       assertEquals(49, Node.DIRECT_EVAL);
1719:       assertEquals(50, Node.FREE_CALL);
1720:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1721:       assertEquals(46, Node.IS_NAMESPACE);
1722:       assertEquals(57, Node.REFLECTED_OBJECT);
1723:       assertEquals(8, Node.FLAG_NO_THROWS);
1724:       assertEquals(39, Node.EMPTY_BLOCK);
1725:       assertEquals(2, Node.POST_FLAG);
1726:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1727:       assertEquals(29, Node.JSDOC_INFO_PROP);
1728:       assertEquals(55, Node.INFERRED_FUNCTION);
1729:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1730:       assertEquals(30, Node.VAR_ARGS_NAME);
1731:       assertEquals(57, Node.LAST_PROP);
1732:       assertEquals(47, Node.IS_DISPATCHER);
1733:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1734:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1735:       assertEquals(36, Node.QUOTED_PROP);
1736:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1737:       assertEquals(53, Node.INPUT_ID);
1738:       assertEquals(43, Node.IS_CONSTANT_NAME);
1739:       assertEquals(56, Node.CHANGE_TIME);
1740:       assertEquals(37, Node.OPT_ARG_NAME);
1741:       assertEquals(48, Node.DIRECTIVES);
1742:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1743:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1744:       assertEquals(4095, Node.COLUMN_MASK);
1745:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1746:       assertEquals(1, Node.DECR_FLAG);
1747:       assertEquals(32, Node.INCRDECR_PROP);
1748:       assertEquals(12, Node.COLUMN_BITS);
1749:       assertFalse(node2.isLabelName());
1750:       assertFalse(node2.isAssign());
1751:       assertFalse(node2.isGetElem());
1752:       assertFalse(node2.isNumber());
1753:       assertFalse(node2.isTypeOf());
1754:       assertFalse(node2.hasChildren());
1755:       assertEquals((-1), node2.getSourcePosition());
1756:       assertFalse(node2.isDec());
1757:       assertFalse(node2.isOr());
1758:       assertFalse(node2.isAssignAdd());
1759:       assertFalse(node2.isLabel());
1760:       assertFalse(node2.isReturn());
1761:       assertFalse(node2.isScript());
1762:       assertFalse(node2.hasOneChild());
1763:       assertFalse(node2.isWith());
1764:       assertFalse(node2.isWhile());
1765:       assertFalse(node2.hasMoreThanOneChild());
1766:       assertEquals(130, node2.getType());
1767:       assertFalse(node2.isInstanceOf());
1768:       assertFalse(node2.isCall());
1769:       assertFalse(node2.isBreak());
1770:       assertEquals((-1), node2.getLineno());
1771:       assertFalse(node2.isName());
1772:       assertFalse(node2.isStringKey());
1773:       assertFalse(node2.isVar());
1774:       assertFalse(node2.isHook());
1775:       assertFalse(node2.isThis());
1776:       assertFalse(node2.isNull());
1777:       assertFalse(node2.isAdd());
1778:       assertFalse(node2.isBlock());
1779:       assertFalse(node2.isNew());
1780:       assertFalse(node2.isDo());
1781:       assertFalse(node2.isDefaultCase());
1782:       assertEquals(0, node2.getChildCount());
1783:       assertEquals((-1), node2.getCharno());
1784:       assertFalse(node2.isParamList());
1785:       assertFalse(node2.isArrayLit());
1786:       assertFalse(node2.isSwitch());
1787:       assertFalse(node2.isEmpty());
1788:       assertFalse(node2.isFor());
1789:       assertFalse(node2.isIf());
1790:       assertFalse(node2.isNE());
1791:       assertFalse(node2.isGetterDef());
1792:       assertFalse(node2.isTry());
1793:       assertFalse(node2.isIn());
1794:       assertFalse(node2.isCase());
1795:       assertFalse(node2.isCatch());
1796:       assertFalse(node2.isRegExp());
1797:       assertFalse(node2.isTrue());
1798:       assertTrue(node2.isExprResult());
1799:       assertFalse(node2.isVoid());
1800:       assertFalse(node2.isDelProp());
1801:       assertFalse(node2.isFalse());
1802:       assertFalse(node2.isThrow());
1803:       assertFalse(node2.isComma());
1804:       assertFalse(node2.isInc());
1805:       assertFalse(node2.isSetterDef());
1806:       assertFalse(node2.isGetProp());
1807:       assertFalse(node2.isNot());
1808:       assertFalse(node2.isContinue());
1809:       assertFalse(node2.isAnd());
1810:       assertFalse(node2.isString());
1811:       assertFalse(node2.isFunction());
1812:       assertFalse(node2.isDebugger());
1813:       assertFalse(node2.isObjectLit());
1814:       assertFalse(node2.isCast());
1815:       assertFalse(node2.equals((Object)node0));
1816:       assertFalse(node2.equals((Object)node1));
1817:       
1818:       boolean boolean3 = node0.isNew();
1819:       assertFalse(boolean3);
1820:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1821:       assertEquals(8, Node.FLAG_NO_THROWS);
1822:       assertEquals(39, Node.EMPTY_BLOCK);
1823:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1824:       assertEquals(48, Node.DIRECTIVES);
1825:       assertEquals(40, Node.ORIGINALNAME_PROP);
1826:       assertEquals(4095, Node.COLUMN_MASK);
1827:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1828:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1829:       assertEquals(53, Node.INPUT_ID);
1830:       assertEquals(57, Node.LAST_PROP);
1831:       assertEquals(49, Node.DIRECT_EVAL);
1832:       assertEquals(57, Node.REFLECTED_OBJECT);
1833:       assertEquals(55, Node.INFERRED_FUNCTION);
1834:       assertEquals(29, Node.JSDOC_INFO_PROP);
1835:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1836:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1837:       assertEquals(52, Node.LENGTH);
1838:       assertEquals(36, Node.QUOTED_PROP);
1839:       assertEquals(37, Node.OPT_ARG_NAME);
1840:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1841:       assertEquals(56, Node.CHANGE_TIME);
1842:       assertEquals(32, Node.INCRDECR_PROP);
1843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1844:       assertEquals(12, Node.COLUMN_BITS);
1845:       assertEquals(47, Node.IS_DISPATCHER);
1846:       assertEquals(2, Node.POST_FLAG);
1847:       assertEquals(30, Node.VAR_ARGS_NAME);
1848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1849:       assertEquals(43, Node.IS_CONSTANT_NAME);
1850:       assertEquals(54, Node.SLASH_V);
1851:       assertEquals(1, Node.DECR_FLAG);
1852:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1853:       assertEquals(46, Node.IS_NAMESPACE);
1854:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1855:       assertEquals(50, Node.FREE_CALL);
1856:       assertNotSame(node0, node1);
1857:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1858:       assertEquals(0, arrayList0.size());
1859:       assertTrue(arrayList0.isEmpty());
1860:       assertFalse(node0.isCase());
1861:       assertFalse(node0.isIn());
1862:       assertFalse(node0.isInc());
1863:       assertFalse(node0.isString());
1864:       assertEquals((-1), node0.getCharno());
1865:       assertFalse(node0.isIf());
1866:       assertFalse(node0.isSwitch());
1867:       assertFalse(node0.isNE());
1868:       assertFalse(node0.isFor());
1869:       assertFalse(node0.isDelProp());
1870:       assertFalse(node0.isGetterDef());
1871:       assertFalse(node0.isBreak());
1872:       assertFalse(node0.isGetProp());
1873:       assertFalse(node0.isComma());
1874:       assertFalse(node0.isTry());
1875:       assertFalse(node0.isHook());
1876:       assertFalse(node0.isThis());
1877:       assertFalse(node0.isScript());
1878:       assertFalse(node0.isExprResult());
1879:       assertFalse(node0.isVoid());
1880:       assertFalse(node0.isNull());
1881:       assertFalse(node0.isTrue());
1882:       assertFalse(node0.isLabelName());
1883:       assertFalse(node0.isArrayLit());
1884:       assertEquals(83, node0.getType());
1885:       assertFalse(node0.isEmpty());
1886:       assertFalse(node0.isNew());
1887:       assertFalse(node0.isAdd());
1888:       assertFalse(node0.isAssignAdd());
1889:       assertFalse(node0.isLabel());
1890:       assertEquals(0, node0.getChildCount());
1891:       assertFalse(node0.isDefaultCase());
1892:       assertFalse(node0.isVar());
1893:       assertFalse(node0.isDo());
1894:       assertFalse(node0.hasMoreThanOneChild());
1895:       assertFalse(node0.isContinue());
1896:       assertEquals((-1), node0.getLineno());
1897:       assertFalse(node0.isOr());
1898:       assertEquals((-1), node0.getSourcePosition());
1899:       assertFalse(node0.isStringKey());
1900:       assertFalse(node0.isGetElem());
1901:       assertFalse(node0.isName());
1902:       assertFalse(node0.isAssign());
1903:       assertFalse(node0.isDec());
1904:       assertFalse(node0.hasOneChild());
1905:       assertFalse(node0.isTypeOf());
1906:       assertFalse(node0.isNumber());
1907:       assertFalse(node0.isCall());
1908:       assertFalse(node0.isBlock());
1909:       assertFalse(node0.hasChildren());
1910:       assertFalse(node0.isWhile());
1911:       assertFalse(node0.isReturn());
1912:       assertFalse(node0.isWith());
1913:       assertFalse(node0.isObjectLit());
1914:       assertFalse(node0.isNot());
1915:       assertFalse(node0.isRegExp());
1916:       assertTrue(node0.isParamList());
1917:       assertFalse(node0.isCatch());
1918:       assertFalse(node0.isInstanceOf());
1919:       assertFalse(node0.isDebugger());
1920:       assertFalse(node0.isAnd());
1921:       assertFalse(node0.isFalse());
1922:       assertFalse(node0.isSetterDef());
1923:       assertFalse(node0.isCast());
1924:       assertFalse(node0.isFunction());
1925:       assertFalse(node0.isThrow());
1926:       assertFalse(node0.equals((Object)node2));
1927:       assertFalse(node0.equals((Object)node1));
1928:       assertTrue(boolean3 == boolean1);
1929:       assertTrue(boolean3 == boolean0);
1930:       assertTrue(boolean3 == boolean2);
1931:       
1932:       Node node3 = Node.newString(155, "NEG");
1933:       assertNotNull(node3);
1934:       assertEquals(48, Node.DIRECTIVES);
1935:       assertEquals(8, Node.FLAG_NO_THROWS);
1936:       assertEquals(39, Node.EMPTY_BLOCK);
1937:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1938:       assertEquals(40, Node.ORIGINALNAME_PROP);
1939:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1940:       assertEquals(4095, Node.COLUMN_MASK);
1941:       assertEquals(53, Node.INPUT_ID);
1942:       assertEquals(36, Node.QUOTED_PROP);
1943:       assertEquals(57, Node.LAST_PROP);
1944:       assertEquals(57, Node.REFLECTED_OBJECT);
1945:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1946:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1947:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1948:       assertEquals(55, Node.INFERRED_FUNCTION);
1949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1950:       assertEquals(29, Node.JSDOC_INFO_PROP);
1951:       assertEquals(52, Node.LENGTH);
1952:       assertEquals(2, Node.POST_FLAG);
1953:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1954:       assertEquals(37, Node.OPT_ARG_NAME);
1955:       assertEquals(46, Node.IS_NAMESPACE);
1956:       assertEquals(47, Node.IS_DISPATCHER);
1957:       assertEquals(12, Node.COLUMN_BITS);
1958:       assertEquals(32, Node.INCRDECR_PROP);
1959:       assertEquals(56, Node.CHANGE_TIME);
1960:       assertEquals(30, Node.VAR_ARGS_NAME);
1961:       assertEquals(49, Node.DIRECT_EVAL);
1962:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1963:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1964:       assertEquals(54, Node.SLASH_V);
1965:       assertEquals(43, Node.IS_CONSTANT_NAME);
1966:       assertEquals(1, Node.DECR_FLAG);
1967:       assertEquals(50, Node.FREE_CALL);
1968:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1969:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1970:       assertNotSame(node3, node2);
1971:       assertFalse(node3.isDo());
1972:       assertFalse(node3.isContinue());
1973:       assertFalse(node3.isWhile());
1974:       assertFalse(node3.isNew());
1975:       assertEquals((-1), node3.getLineno());
1976:       assertFalse(node3.isOr());
1977:       assertFalse(node3.isAdd());
1978:       assertEquals((-1), node3.getSourcePosition());
1979:       assertFalse(node3.isAssign());
1980:       assertFalse(node3.isName());
1981:       assertFalse(node3.isNumber());
1982:       assertEquals(155, node3.getType());
1983:       assertFalse(node3.isCall());
1984:       assertFalse(node3.hasOneChild());
1985:       assertFalse(node3.isGetElem());
1986:       assertFalse(node3.isReturn());
1987:       assertFalse(node3.isBlock());
1988:       assertFalse(node3.hasMoreThanOneChild());
1989:       assertFalse(node3.isTypeOf());
1990:       assertFalse(node3.hasChildren());
1991:       assertFalse(node3.isDec());
1992:       assertFalse(node3.isNot());
1993:       assertFalse(node3.isWith());
1994:       assertFalse(node3.isAnd());
1995:       assertFalse(node3.isCatch());
1996:       assertFalse(node3.isObjectLit());
1997:       assertFalse(node3.isDebugger());
1998:       assertFalse(node3.isFalse());
1999:       assertFalse(node3.isThrow());
2000:       assertFalse(node3.isSetterDef());
2001:       assertFalse(node3.isFunction());
2002:       assertFalse(node3.isString());
2003:       assertFalse(node3.isInc());
2004:       assertFalse(node3.isSwitch());
2005:       assertFalse(node3.isCase());
2006:       assertFalse(node3.isIn());
2007:       assertFalse(node3.isNE());
2008:       assertEquals((-1), node3.getCharno());
2009:       assertFalse(node3.isDelProp());
2010:       assertFalse(node3.isGetterDef());
2011:       assertFalse(node3.isFor());
2012:       assertFalse(node3.isIf());
2013:       assertFalse(node3.isGetProp());
2014:       assertFalse(node3.isBreak());
2015:       assertFalse(node3.isTry());
2016:       assertFalse(node3.isInstanceOf());
2017:       assertFalse(node3.isComma());
2018:       assertFalse(node3.isThis());
2019:       assertFalse(node3.isRegExp());
2020:       assertFalse(node3.isHook());
2021:       assertFalse(node3.isDefaultCase());
2022:       assertFalse(node3.isVoid());
2023:       assertFalse(node3.isExprResult());
2024:       assertFalse(node3.isScript());
2025:       assertFalse(node3.isParamList());
2026:       assertFalse(node3.isTrue());
2027:       assertFalse(node3.isNull());
2028:       assertFalse(node3.isLabelName());
2029:       assertFalse(node3.isEmpty());
2030:       assertTrue(node3.isCast());
2031:       assertFalse(node3.isStringKey());
2032:       assertFalse(node3.isArrayLit());
2033:       assertFalse(node3.isAssignAdd());
2034:       assertFalse(node3.isVar());
2035:       assertEquals(0, node3.getChildCount());
2036:       assertFalse(node3.isLabel());
2037:       assertFalse(node3.equals((Object)node0));
2038:       assertFalse(node3.equals((Object)node2));
2039:       assertFalse(node3.equals((Object)node1));
2040:       
2041:       Node node4 = null;
2042:       try {
2043:         node4 = new Node((-2107), node0, node3, 2, 2058);
2044:         fail("Expecting exception: IllegalArgumentException");
2045:       
2046:       } catch(IllegalArgumentException e) {
2047:          //
2048:          // first new child has existing parent
2049:          //
2050:          verifyException("com.google.common.base.Preconditions", e);
2051:       }
2052:   }
2053: }
RegularFileObject[/tmp/EvoSuite_93_1628160472684/com/google/javascript/rhino/Node_93_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:47:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_93_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_93_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_93_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.common.base.Preconditions",
262:       "com.google.javascript.rhino.JSDocInfo",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.Node$AncestorIterable$1",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.AbstractMultimap$Values",
346:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
347:       "com.google.common.collect.AbstractMapBasedMultimap$1",
348:       "com.google.common.collect.Multimaps$Entries",
349:       "com.google.common.collect.AbstractMultimap$Entries",
350:       "com.google.common.collect.AbstractMapBasedMultimap$2",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
356:       "com.google.javascript.rhino.JSDocInfo$Visibility",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.Platform",
359:       "com.google.javascript.rhino.jstype.TemplatizedType",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.NamespaceType",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.Iterators$12"
373:     );
374:   }
375: }

[MASTER] 10:47:53.202 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertNotNull(arrayList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertNotNull(node0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());

Node node1 = node0.cloneNode();
assertNotNull(node1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(83, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node1.isWhile();
assertFalse(boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(83, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

node0.setIsSyntheticBlock(false);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node0, node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.equals((Object)node1));

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(83, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node0.hasMoreThanOneChild();
assertFalse(boolean1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node0, node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);

simpleErrorReporter0.error("Object#Key", "Object#Key", (-129), 36);
JSDocInfo jSDocInfo0 = new JSDocInfo(false);
assertNotNull(jSDocInfo0);
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasTypedefType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertNull(jSDocInfo0.getVersion());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getOriginalCommentString());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isExpose());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isNoSideEffects());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isNgInject());

node1.addChildToFront(node0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(83, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

int int0 = node1.getSideEffectFlags();
assertEquals(0, int0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(83, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean2 = node1.isName();
assertFalse(boolean2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertTrue(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(83, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Node node2 = Node.newString(130, "Object#Key");
assertNotNull(node2);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(130, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertTrue(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean3 = node0.isNew();
assertFalse(boolean3);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node0, node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);

Node node3 = Node.newString(155, "NEG");
assertNotNull(node3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node3, node2);
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isNew());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isNumber());
assertEquals(155, node3.getType());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isCatch());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isTry());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isParamList());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertTrue(node3.isCast());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

Node node4 = new Node((-2107), node0, node3, 2, 2058);

[MASTER] 10:48:06.819 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_245_1628160486482/com/google/javascript/rhino/Node_245_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_245_1628160486482/com/google/javascript/rhino/Node_245_tmp__ESTest_scaffolding.java]]
[MASTER] 10:48:06.819 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:06.819 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:06.821 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 892
[MASTER] 10:48:06.823 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_245_1628160486482/com/google/javascript/rhino/Node_245_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:48:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.ArrayList;
15: import java.util.List;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_245_tmp__ESTest extends Node_245_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
26:       assertNotNull(simpleErrorReporter0);
27:       
28:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
29:       assertNotNull(jSTypeRegistry0);
30:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
31:       
32:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
33:       assertNotNull(arrayList0);
34:       assertEquals(0, arrayList0.size());
35:       assertTrue(arrayList0.isEmpty());
36:       
37:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
38:       assertNotNull(node0);
39:       assertEquals(56, Node.CHANGE_TIME);
40:       assertEquals(2, Node.POST_FLAG);
41:       assertEquals(37, Node.OPT_ARG_NAME);
42:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
43:       assertEquals(47, Node.IS_DISPATCHER);
44:       assertEquals(32, Node.INCRDECR_PROP);
45:       assertEquals(51, Node.STATIC_SOURCE_FILE);
46:       assertEquals(46, Node.IS_NAMESPACE);
47:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
48:       assertEquals(53, Node.INPUT_ID);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(43, Node.IS_CONSTANT_NAME);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(54, Node.SLASH_V);
53:       assertEquals(57, Node.LAST_PROP);
54:       assertEquals(40, Node.ORIGINALNAME_PROP);
55:       assertEquals(30, Node.VAR_ARGS_NAME);
56:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
57:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
58:       assertEquals(39, Node.EMPTY_BLOCK);
59:       assertEquals(48, Node.DIRECTIVES);
60:       assertEquals(57, Node.REFLECTED_OBJECT);
61:       assertEquals(55, Node.INFERRED_FUNCTION);
62:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
63:       assertEquals(50, Node.FREE_CALL);
64:       assertEquals(8, Node.FLAG_NO_THROWS);
65:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
66:       assertEquals(52, Node.LENGTH);
67:       assertEquals(36, Node.QUOTED_PROP);
68:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
69:       assertEquals(49, Node.DIRECT_EVAL);
70:       assertEquals(1, Node.DECR_FLAG);
71:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
72:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
73:       assertEquals(12, Node.COLUMN_BITS);
74:       assertEquals(4095, Node.COLUMN_MASK);
75:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
76:       assertEquals(0, arrayList0.size());
77:       assertTrue(arrayList0.isEmpty());
78:       assertFalse(node0.isAnd());
79:       assertFalse(node0.isObjectLit());
80:       assertTrue(node0.isParamList());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isInstanceOf());
83:       assertFalse(node0.isScript());
84:       assertFalse(node0.isGetProp());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isComma());
87:       assertFalse(node0.isThis());
88:       assertFalse(node0.isThrow());
89:       assertFalse(node0.isBreak());
90:       assertFalse(node0.isGetElem());
91:       assertEquals(83, node0.getType());
92:       assertFalse(node0.isOr());
93:       assertFalse(node0.isContinue());
94:       assertFalse(node0.isIn());
95:       assertFalse(node0.isString());
96:       assertFalse(node0.isInc());
97:       assertFalse(node0.isTypeOf());
98:       assertFalse(node0.isWhile());
99:       assertFalse(node0.isAssign());
100:       assertFalse(node0.isDec());
101:       assertFalse(node0.hasChildren());
102:       assertFalse(node0.isReturn());
103:       assertFalse(node0.isCast());
104:       assertFalse(node0.isFalse());
105:       assertFalse(node0.isDebugger());
106:       assertFalse(node0.isNot());
107:       assertEquals((-1), node0.getSourcePosition());
108:       assertFalse(node0.isCatch());
109:       assertFalse(node0.isFunction());
110:       assertFalse(node0.isTry());
111:       assertFalse(node0.isRegExp());
112:       assertFalse(node0.isDefaultCase());
113:       assertEquals(0, node0.getChildCount());
114:       assertFalse(node0.isCall());
115:       assertFalse(node0.isName());
116:       assertFalse(node0.isDelProp());
117:       assertFalse(node0.isEmpty());
118:       assertFalse(node0.isNew());
119:       assertFalse(node0.isAdd());
120:       assertFalse(node0.isSetterDef());
121:       assertFalse(node0.isVoid());
122:       assertFalse(node0.isTrue());
123:       assertFalse(node0.isNE());
124:       assertFalse(node0.isIf());
125:       assertFalse(node0.isNull());
126:       assertFalse(node0.hasMoreThanOneChild());
127:       assertEquals((-1), node0.getLineno());
128:       assertFalse(node0.isDo());
129:       assertFalse(node0.isCase());
130:       assertFalse(node0.isAssignAdd());
131:       assertFalse(node0.isFor());
132:       assertFalse(node0.isBlock());
133:       assertFalse(node0.isLabel());
134:       assertFalse(node0.isVar());
135:       assertFalse(node0.isHook());
136:       assertFalse(node0.isStringKey());
137:       assertFalse(node0.hasOneChild());
138:       assertFalse(node0.isLabelName());
139:       assertFalse(node0.isArrayLit());
140:       assertEquals((-1), node0.getCharno());
141:       assertFalse(node0.isNumber());
142:       assertFalse(node0.isSwitch());
143:       assertFalse(node0.isGetterDef());
144:       
145:       Node node1 = node0.cloneNode();
146:       assertNotNull(node1);
147:       assertEquals(56, Node.CHANGE_TIME);
148:       assertEquals(2, Node.POST_FLAG);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(32, Node.INCRDECR_PROP);
153:       assertEquals(51, Node.STATIC_SOURCE_FILE);
154:       assertEquals(46, Node.IS_NAMESPACE);
155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
156:       assertEquals(53, Node.INPUT_ID);
157:       assertEquals(29, Node.JSDOC_INFO_PROP);
158:       assertEquals(43, Node.IS_CONSTANT_NAME);
159:       assertEquals(15, Node.NO_SIDE_EFFECTS);
160:       assertEquals(54, Node.SLASH_V);
161:       assertEquals(57, Node.LAST_PROP);
162:       assertEquals(40, Node.ORIGINALNAME_PROP);
163:       assertEquals(30, Node.VAR_ARGS_NAME);
164:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
165:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
166:       assertEquals(39, Node.EMPTY_BLOCK);
167:       assertEquals(48, Node.DIRECTIVES);
168:       assertEquals(57, Node.REFLECTED_OBJECT);
169:       assertEquals(55, Node.INFERRED_FUNCTION);
170:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
171:       assertEquals(50, Node.FREE_CALL);
172:       assertEquals(8, Node.FLAG_NO_THROWS);
173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
174:       assertEquals(52, Node.LENGTH);
175:       assertEquals(36, Node.QUOTED_PROP);
176:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
177:       assertEquals(49, Node.DIRECT_EVAL);
178:       assertEquals(1, Node.DECR_FLAG);
179:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
180:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
181:       assertEquals(12, Node.COLUMN_BITS);
182:       assertEquals(4095, Node.COLUMN_MASK);
183:       assertEquals(29, Node.JSDOC_INFO_PROP);
184:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
185:       assertEquals(53, Node.INPUT_ID);
186:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
187:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
188:       assertEquals(2, Node.POST_FLAG);
189:       assertEquals(32, Node.INCRDECR_PROP);
190:       assertEquals(47, Node.IS_DISPATCHER);
191:       assertEquals(12, Node.COLUMN_BITS);
192:       assertEquals(51, Node.STATIC_SOURCE_FILE);
193:       assertEquals(30, Node.VAR_ARGS_NAME);
194:       assertEquals(1, Node.DECR_FLAG);
195:       assertEquals(54, Node.SLASH_V);
196:       assertEquals(46, Node.IS_NAMESPACE);
197:       assertEquals(43, Node.IS_CONSTANT_NAME);
198:       assertEquals(40, Node.ORIGINALNAME_PROP);
199:       assertEquals(50, Node.FREE_CALL);
200:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(52, Node.LENGTH);
203:       assertEquals(39, Node.EMPTY_BLOCK);
204:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
205:       assertEquals(57, Node.LAST_PROP);
206:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
207:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
208:       assertEquals(49, Node.DIRECT_EVAL);
209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
210:       assertEquals(4095, Node.COLUMN_MASK);
211:       assertEquals(55, Node.INFERRED_FUNCTION);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(37, Node.OPT_ARG_NAME);
214:       assertEquals(8, Node.FLAG_NO_THROWS);
215:       assertEquals(36, Node.QUOTED_PROP);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(56, Node.CHANGE_TIME);
219:       assertNotSame(node0, node1);
220:       assertNotSame(node1, node0);
221:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
222:       assertEquals(0, arrayList0.size());
223:       assertTrue(arrayList0.isEmpty());
224:       assertFalse(node0.isAnd());
225:       assertFalse(node0.isObjectLit());
226:       assertTrue(node0.isParamList());
227:       assertFalse(node0.isWith());
228:       assertFalse(node0.isInstanceOf());
229:       assertFalse(node0.isScript());
230:       assertFalse(node0.isGetProp());
231:       assertFalse(node0.isExprResult());
232:       assertFalse(node0.isComma());
233:       assertFalse(node0.isThis());
234:       assertFalse(node0.isThrow());
235:       assertFalse(node0.isBreak());
236:       assertFalse(node0.isGetElem());
237:       assertEquals(83, node0.getType());
238:       assertFalse(node0.isOr());
239:       assertFalse(node0.isContinue());
240:       assertFalse(node0.isIn());
241:       assertFalse(node0.isString());
242:       assertFalse(node0.isInc());
243:       assertFalse(node0.isTypeOf());
244:       assertFalse(node0.isWhile());
245:       assertFalse(node0.isAssign());
246:       assertFalse(node0.isDec());
247:       assertFalse(node0.hasChildren());
248:       assertFalse(node0.isReturn());
249:       assertFalse(node0.isCast());
250:       assertFalse(node0.isFalse());
251:       assertFalse(node0.isDebugger());
252:       assertFalse(node0.isNot());
253:       assertEquals((-1), node0.getSourcePosition());
254:       assertFalse(node0.isCatch());
255:       assertFalse(node0.isFunction());
256:       assertFalse(node0.isTry());
257:       assertFalse(node0.isRegExp());
258:       assertFalse(node0.isDefaultCase());
259:       assertEquals(0, node0.getChildCount());
260:       assertFalse(node0.isCall());
261:       assertFalse(node0.isName());
262:       assertFalse(node0.isDelProp());
263:       assertFalse(node0.isEmpty());
264:       assertFalse(node0.isNew());
265:       assertFalse(node0.isAdd());
266:       assertFalse(node0.isSetterDef());
267:       assertFalse(node0.isVoid());
268:       assertFalse(node0.isTrue());
269:       assertFalse(node0.isNE());
270:       assertFalse(node0.isIf());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.hasMoreThanOneChild());
273:       assertEquals((-1), node0.getLineno());
274:       assertFalse(node0.isDo());
275:       assertFalse(node0.isCase());
276:       assertFalse(node0.isAssignAdd());
277:       assertFalse(node0.isFor());
278:       assertFalse(node0.isBlock());
279:       assertFalse(node0.isLabel());
280:       assertFalse(node0.isVar());
281:       assertFalse(node0.isHook());
282:       assertFalse(node0.isStringKey());
283:       assertFalse(node0.hasOneChild());
284:       assertFalse(node0.isLabelName());
285:       assertFalse(node0.isArrayLit());
286:       assertEquals((-1), node0.getCharno());
287:       assertFalse(node0.isNumber());
288:       assertFalse(node0.isSwitch());
289:       assertFalse(node0.isGetterDef());
290:       assertFalse(node1.isNull());
291:       assertEquals(0, node1.getChildCount());
292:       assertFalse(node1.isName());
293:       assertFalse(node1.isCatch());
294:       assertFalse(node1.isStringKey());
295:       assertFalse(node1.isCall());
296:       assertFalse(node1.isVoid());
297:       assertFalse(node1.isAdd());
298:       assertFalse(node1.isVar());
299:       assertFalse(node1.isTrue());
300:       assertFalse(node1.isFunction());
301:       assertFalse(node1.isEmpty());
302:       assertFalse(node1.isDo());
303:       assertFalse(node1.isSetterDef());
304:       assertFalse(node1.isDefaultCase());
305:       assertFalse(node1.isNew());
306:       assertFalse(node1.isOr());
307:       assertFalse(node1.isReturn());
308:       assertFalse(node1.isTypeOf());
309:       assertFalse(node1.hasChildren());
310:       assertEquals((-1), node1.getSourcePosition());
311:       assertFalse(node1.isDec());
312:       assertFalse(node1.isAssign());
313:       assertFalse(node1.isGetElem());
314:       assertFalse(node1.isContinue());
315:       assertFalse(node1.isCast());
316:       assertFalse(node1.isDelProp());
317:       assertFalse(node1.isExprResult());
318:       assertFalse(node1.isDebugger());
319:       assertFalse(node1.isNot());
320:       assertFalse(node1.isString());
321:       assertFalse(node1.isWhile());
322:       assertFalse(node1.isGetProp());
323:       assertFalse(node1.isInstanceOf());
324:       assertEquals(83, node1.getType());
325:       assertFalse(node1.isThis());
326:       assertTrue(node1.isParamList());
327:       assertFalse(node1.isObjectLit());
328:       assertFalse(node1.isComma());
329:       assertFalse(node1.isFalse());
330:       assertFalse(node1.isWith());
331:       assertFalse(node1.isAnd());
332:       assertFalse(node1.isBreak());
333:       assertFalse(node1.isThrow());
334:       assertFalse(node1.isInc());
335:       assertFalse(node1.isAssignAdd());
336:       assertFalse(node1.isLabel());
337:       assertFalse(node1.isIn());
338:       assertFalse(node1.isNE());
339:       assertFalse(node1.isNumber());
340:       assertFalse(node1.hasMoreThanOneChild());
341:       assertFalse(node1.isGetterDef());
342:       assertFalse(node1.isLabelName());
343:       assertFalse(node1.isIf());
344:       assertFalse(node1.isArrayLit());
345:       assertFalse(node1.isSwitch());
346:       assertEquals((-1), node1.getLineno());
347:       assertFalse(node1.isTry());
348:       assertFalse(node1.isBlock());
349:       assertFalse(node1.isRegExp());
350:       assertFalse(node1.isHook());
351:       assertEquals((-1), node1.getCharno());
352:       assertFalse(node1.isFor());
353:       assertFalse(node1.isScript());
354:       assertFalse(node1.isCase());
355:       assertFalse(node1.hasOneChild());
356:       assertFalse(node1.equals((Object)node0));
357:       
358:       boolean boolean0 = node1.isGetProp();
359:       assertFalse(boolean0);
360:       assertEquals(56, Node.CHANGE_TIME);
361:       assertEquals(2, Node.POST_FLAG);
362:       assertEquals(37, Node.OPT_ARG_NAME);
363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(32, Node.INCRDECR_PROP);
366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
367:       assertEquals(46, Node.IS_NAMESPACE);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(53, Node.INPUT_ID);
370:       assertEquals(29, Node.JSDOC_INFO_PROP);
371:       assertEquals(43, Node.IS_CONSTANT_NAME);
372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
373:       assertEquals(54, Node.SLASH_V);
374:       assertEquals(57, Node.LAST_PROP);
375:       assertEquals(40, Node.ORIGINALNAME_PROP);
376:       assertEquals(30, Node.VAR_ARGS_NAME);
377:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
379:       assertEquals(39, Node.EMPTY_BLOCK);
380:       assertEquals(48, Node.DIRECTIVES);
381:       assertEquals(57, Node.REFLECTED_OBJECT);
382:       assertEquals(55, Node.INFERRED_FUNCTION);
383:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
384:       assertEquals(50, Node.FREE_CALL);
385:       assertEquals(8, Node.FLAG_NO_THROWS);
386:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
387:       assertEquals(52, Node.LENGTH);
388:       assertEquals(36, Node.QUOTED_PROP);
389:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
390:       assertEquals(49, Node.DIRECT_EVAL);
391:       assertEquals(1, Node.DECR_FLAG);
392:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
393:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
394:       assertEquals(12, Node.COLUMN_BITS);
395:       assertEquals(4095, Node.COLUMN_MASK);
396:       assertEquals(29, Node.JSDOC_INFO_PROP);
397:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
398:       assertEquals(53, Node.INPUT_ID);
399:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
400:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
401:       assertEquals(2, Node.POST_FLAG);
402:       assertEquals(32, Node.INCRDECR_PROP);
403:       assertEquals(47, Node.IS_DISPATCHER);
404:       assertEquals(12, Node.COLUMN_BITS);
405:       assertEquals(51, Node.STATIC_SOURCE_FILE);
406:       assertEquals(30, Node.VAR_ARGS_NAME);
407:       assertEquals(1, Node.DECR_FLAG);
408:       assertEquals(54, Node.SLASH_V);
409:       assertEquals(46, Node.IS_NAMESPACE);
410:       assertEquals(43, Node.IS_CONSTANT_NAME);
411:       assertEquals(40, Node.ORIGINALNAME_PROP);
412:       assertEquals(50, Node.FREE_CALL);
413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
414:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
415:       assertEquals(52, Node.LENGTH);
416:       assertEquals(39, Node.EMPTY_BLOCK);
417:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
418:       assertEquals(57, Node.LAST_PROP);
419:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(49, Node.DIRECT_EVAL);
422:       assertEquals(15, Node.NO_SIDE_EFFECTS);
423:       assertEquals(4095, Node.COLUMN_MASK);
424:       assertEquals(55, Node.INFERRED_FUNCTION);
425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(36, Node.QUOTED_PROP);
429:       assertEquals(48, Node.DIRECTIVES);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(56, Node.CHANGE_TIME);
432:       assertNotSame(node0, node1);
433:       assertNotSame(node1, node0);
434:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
435:       assertEquals(0, arrayList0.size());
436:       assertTrue(arrayList0.isEmpty());
437:       assertFalse(node0.isAnd());
438:       assertFalse(node0.isObjectLit());
439:       assertTrue(node0.isParamList());
440:       assertFalse(node0.isWith());
441:       assertFalse(node0.isInstanceOf());
442:       assertFalse(node0.isScript());
443:       assertFalse(node0.isGetProp());
444:       assertFalse(node0.isExprResult());
445:       assertFalse(node0.isComma());
446:       assertFalse(node0.isThis());
447:       assertFalse(node0.isThrow());
448:       assertFalse(node0.isBreak());
449:       assertFalse(node0.isGetElem());
450:       assertEquals(83, node0.getType());
451:       assertFalse(node0.isOr());
452:       assertFalse(node0.isContinue());
453:       assertFalse(node0.isIn());
454:       assertFalse(node0.isString());
455:       assertFalse(node0.isInc());
456:       assertFalse(node0.isTypeOf());
457:       assertFalse(node0.isWhile());
458:       assertFalse(node0.isAssign());
459:       assertFalse(node0.isDec());
460:       assertFalse(node0.hasChildren());
461:       assertFalse(node0.isReturn());
462:       assertFalse(node0.isCast());
463:       assertFalse(node0.isFalse());
464:       assertFalse(node0.isDebugger());
465:       assertFalse(node0.isNot());
466:       assertEquals((-1), node0.getSourcePosition());
467:       assertFalse(node0.isCatch());
468:       assertFalse(node0.isFunction());
469:       assertFalse(node0.isTry());
470:       assertFalse(node0.isRegExp());
471:       assertFalse(node0.isDefaultCase());
472:       assertEquals(0, node0.getChildCount());
473:       assertFalse(node0.isCall());
474:       assertFalse(node0.isName());
475:       assertFalse(node0.isDelProp());
476:       assertFalse(node0.isEmpty());
477:       assertFalse(node0.isNew());
478:       assertFalse(node0.isAdd());
479:       assertFalse(node0.isSetterDef());
480:       assertFalse(node0.isVoid());
481:       assertFalse(node0.isTrue());
482:       assertFalse(node0.isNE());
483:       assertFalse(node0.isIf());
484:       assertFalse(node0.isNull());
485:       assertFalse(node0.hasMoreThanOneChild());
486:       assertEquals((-1), node0.getLineno());
487:       assertFalse(node0.isDo());
488:       assertFalse(node0.isCase());
489:       assertFalse(node0.isAssignAdd());
490:       assertFalse(node0.isFor());
491:       assertFalse(node0.isBlock());
492:       assertFalse(node0.isLabel());
493:       assertFalse(node0.isVar());
494:       assertFalse(node0.isHook());
495:       assertFalse(node0.isStringKey());
496:       assertFalse(node0.hasOneChild());
497:       assertFalse(node0.isLabelName());
498:       assertFalse(node0.isArrayLit());
499:       assertEquals((-1), node0.getCharno());
500:       assertFalse(node0.isNumber());
501:       assertFalse(node0.isSwitch());
502:       assertFalse(node0.isGetterDef());
503:       assertFalse(node1.isNull());
504:       assertEquals(0, node1.getChildCount());
505:       assertFalse(node1.isName());
506:       assertFalse(node1.isCatch());
507:       assertFalse(node1.isStringKey());
508:       assertFalse(node1.isCall());
509:       assertFalse(node1.isVoid());
510:       assertFalse(node1.isAdd());
511:       assertFalse(node1.isVar());
512:       assertFalse(node1.isTrue());
513:       assertFalse(node1.isFunction());
514:       assertFalse(node1.isEmpty());
515:       assertFalse(node1.isDo());
516:       assertFalse(node1.isSetterDef());
517:       assertFalse(node1.isDefaultCase());
518:       assertFalse(node1.isNew());
519:       assertFalse(node1.isOr());
520:       assertFalse(node1.isReturn());
521:       assertFalse(node1.isTypeOf());
522:       assertFalse(node1.hasChildren());
523:       assertEquals((-1), node1.getSourcePosition());
524:       assertFalse(node1.isDec());
525:       assertFalse(node1.isAssign());
526:       assertFalse(node1.isGetElem());
527:       assertFalse(node1.isContinue());
528:       assertFalse(node1.isCast());
529:       assertFalse(node1.isDelProp());
530:       assertFalse(node1.isExprResult());
531:       assertFalse(node1.isDebugger());
532:       assertFalse(node1.isNot());
533:       assertFalse(node1.isString());
534:       assertFalse(node1.isWhile());
535:       assertFalse(node1.isGetProp());
536:       assertFalse(node1.isInstanceOf());
537:       assertEquals(83, node1.getType());
538:       assertFalse(node1.isThis());
539:       assertTrue(node1.isParamList());
540:       assertFalse(node1.isObjectLit());
541:       assertFalse(node1.isComma());
542:       assertFalse(node1.isFalse());
543:       assertFalse(node1.isWith());
544:       assertFalse(node1.isAnd());
545:       assertFalse(node1.isBreak());
546:       assertFalse(node1.isThrow());
547:       assertFalse(node1.isInc());
548:       assertFalse(node1.isAssignAdd());
549:       assertFalse(node1.isLabel());
550:       assertFalse(node1.isIn());
551:       assertFalse(node1.isNE());
552:       assertFalse(node1.isNumber());
553:       assertFalse(node1.hasMoreThanOneChild());
554:       assertFalse(node1.isGetterDef());
555:       assertFalse(node1.isLabelName());
556:       assertFalse(node1.isIf());
557:       assertFalse(node1.isArrayLit());
558:       assertFalse(node1.isSwitch());
559:       assertEquals((-1), node1.getLineno());
560:       assertFalse(node1.isTry());
561:       assertFalse(node1.isBlock());
562:       assertFalse(node1.isRegExp());
563:       assertFalse(node1.isHook());
564:       assertEquals((-1), node1.getCharno());
565:       assertFalse(node1.isFor());
566:       assertFalse(node1.isScript());
567:       assertFalse(node1.isCase());
568:       assertFalse(node1.hasOneChild());
569:       assertFalse(node0.equals((Object)node1));
570:       assertFalse(node1.equals((Object)node0));
571:       
572:       node0.setIsSyntheticBlock(false);
573:       assertEquals(56, Node.CHANGE_TIME);
574:       assertEquals(2, Node.POST_FLAG);
575:       assertEquals(37, Node.OPT_ARG_NAME);
576:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(51, Node.STATIC_SOURCE_FILE);
580:       assertEquals(46, Node.IS_NAMESPACE);
581:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
582:       assertEquals(53, Node.INPUT_ID);
583:       assertEquals(29, Node.JSDOC_INFO_PROP);
584:       assertEquals(43, Node.IS_CONSTANT_NAME);
585:       assertEquals(15, Node.NO_SIDE_EFFECTS);
586:       assertEquals(54, Node.SLASH_V);
587:       assertEquals(57, Node.LAST_PROP);
588:       assertEquals(40, Node.ORIGINALNAME_PROP);
589:       assertEquals(30, Node.VAR_ARGS_NAME);
590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
591:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
592:       assertEquals(39, Node.EMPTY_BLOCK);
593:       assertEquals(48, Node.DIRECTIVES);
594:       assertEquals(57, Node.REFLECTED_OBJECT);
595:       assertEquals(55, Node.INFERRED_FUNCTION);
596:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
597:       assertEquals(50, Node.FREE_CALL);
598:       assertEquals(8, Node.FLAG_NO_THROWS);
599:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
600:       assertEquals(52, Node.LENGTH);
601:       assertEquals(36, Node.QUOTED_PROP);
602:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
603:       assertEquals(49, Node.DIRECT_EVAL);
604:       assertEquals(1, Node.DECR_FLAG);
605:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
606:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
607:       assertEquals(12, Node.COLUMN_BITS);
608:       assertEquals(4095, Node.COLUMN_MASK);
609:       assertNotSame(node0, node1);
610:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
611:       assertEquals(0, arrayList0.size());
612:       assertTrue(arrayList0.isEmpty());
613:       assertFalse(node0.isAnd());
614:       assertFalse(node0.isObjectLit());
615:       assertTrue(node0.isParamList());
616:       assertFalse(node0.isWith());
617:       assertFalse(node0.isInstanceOf());
618:       assertFalse(node0.isScript());
619:       assertFalse(node0.isGetProp());
620:       assertFalse(node0.isExprResult());
621:       assertFalse(node0.isComma());
622:       assertFalse(node0.isThis());
623:       assertFalse(node0.isThrow());
624:       assertFalse(node0.isBreak());
625:       assertFalse(node0.isGetElem());
626:       assertEquals(83, node0.getType());
627:       assertFalse(node0.isOr());
628:       assertFalse(node0.isContinue());
629:       assertFalse(node0.isIn());
630:       assertFalse(node0.isString());
631:       assertFalse(node0.isInc());
632:       assertFalse(node0.isTypeOf());
633:       assertFalse(node0.isWhile());
634:       assertFalse(node0.isAssign());
635:       assertFalse(node0.isDec());
636:       assertFalse(node0.hasChildren());
637:       assertFalse(node0.isReturn());
638:       assertFalse(node0.isCast());
639:       assertFalse(node0.isFalse());
640:       assertFalse(node0.isDebugger());
641:       assertFalse(node0.isNot());
642:       assertEquals((-1), node0.getSourcePosition());
643:       assertFalse(node0.isCatch());
644:       assertFalse(node0.isFunction());
645:       assertFalse(node0.isTry());
646:       assertFalse(node0.isRegExp());
647:       assertFalse(node0.isDefaultCase());
648:       assertEquals(0, node0.getChildCount());
649:       assertFalse(node0.isCall());
650:       assertFalse(node0.isName());
651:       assertFalse(node0.isDelProp());
652:       assertFalse(node0.isEmpty());
653:       assertFalse(node0.isNew());
654:       assertFalse(node0.isAdd());
655:       assertFalse(node0.isSetterDef());
656:       assertFalse(node0.isVoid());
657:       assertFalse(node0.isTrue());
658:       assertFalse(node0.isNE());
659:       assertFalse(node0.isIf());
660:       assertFalse(node0.isNull());
661:       assertFalse(node0.hasMoreThanOneChild());
662:       assertEquals((-1), node0.getLineno());
663:       assertFalse(node0.isDo());
664:       assertFalse(node0.isCase());
665:       assertFalse(node0.isAssignAdd());
666:       assertFalse(node0.isFor());
667:       assertFalse(node0.isBlock());
668:       assertFalse(node0.isLabel());
669:       assertFalse(node0.isVar());
670:       assertFalse(node0.isHook());
671:       assertFalse(node0.isStringKey());
672:       assertFalse(node0.hasOneChild());
673:       assertFalse(node0.isLabelName());
674:       assertFalse(node0.isArrayLit());
675:       assertEquals((-1), node0.getCharno());
676:       assertFalse(node0.isNumber());
677:       assertFalse(node0.isSwitch());
678:       assertFalse(node0.isGetterDef());
679:       assertFalse(node0.equals((Object)node1));
680:       
681:       Iterable<Node> iterable0 = node1.children();
682:       assertNotNull(iterable0);
683:       assertEquals(56, Node.CHANGE_TIME);
684:       assertEquals(2, Node.POST_FLAG);
685:       assertEquals(37, Node.OPT_ARG_NAME);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(32, Node.INCRDECR_PROP);
689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
690:       assertEquals(46, Node.IS_NAMESPACE);
691:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
692:       assertEquals(53, Node.INPUT_ID);
693:       assertEquals(29, Node.JSDOC_INFO_PROP);
694:       assertEquals(43, Node.IS_CONSTANT_NAME);
695:       assertEquals(15, Node.NO_SIDE_EFFECTS);
696:       assertEquals(54, Node.SLASH_V);
697:       assertEquals(57, Node.LAST_PROP);
698:       assertEquals(40, Node.ORIGINALNAME_PROP);
699:       assertEquals(30, Node.VAR_ARGS_NAME);
700:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
701:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
702:       assertEquals(39, Node.EMPTY_BLOCK);
703:       assertEquals(48, Node.DIRECTIVES);
704:       assertEquals(57, Node.REFLECTED_OBJECT);
705:       assertEquals(55, Node.INFERRED_FUNCTION);
706:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
707:       assertEquals(50, Node.FREE_CALL);
708:       assertEquals(8, Node.FLAG_NO_THROWS);
709:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
710:       assertEquals(52, Node.LENGTH);
711:       assertEquals(36, Node.QUOTED_PROP);
712:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
713:       assertEquals(49, Node.DIRECT_EVAL);
714:       assertEquals(1, Node.DECR_FLAG);
715:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
716:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
717:       assertEquals(12, Node.COLUMN_BITS);
718:       assertEquals(4095, Node.COLUMN_MASK);
719:       assertEquals(29, Node.JSDOC_INFO_PROP);
720:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
721:       assertEquals(53, Node.INPUT_ID);
722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
723:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
724:       assertEquals(2, Node.POST_FLAG);
725:       assertEquals(32, Node.INCRDECR_PROP);
726:       assertEquals(47, Node.IS_DISPATCHER);
727:       assertEquals(12, Node.COLUMN_BITS);
728:       assertEquals(51, Node.STATIC_SOURCE_FILE);
729:       assertEquals(30, Node.VAR_ARGS_NAME);
730:       assertEquals(1, Node.DECR_FLAG);
731:       assertEquals(54, Node.SLASH_V);
732:       assertEquals(46, Node.IS_NAMESPACE);
733:       assertEquals(43, Node.IS_CONSTANT_NAME);
734:       assertEquals(40, Node.ORIGINALNAME_PROP);
735:       assertEquals(50, Node.FREE_CALL);
736:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(39, Node.EMPTY_BLOCK);
740:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
741:       assertEquals(57, Node.LAST_PROP);
742:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
743:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
744:       assertEquals(49, Node.DIRECT_EVAL);
745:       assertEquals(15, Node.NO_SIDE_EFFECTS);
746:       assertEquals(4095, Node.COLUMN_MASK);
747:       assertEquals(55, Node.INFERRED_FUNCTION);
748:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
749:       assertEquals(37, Node.OPT_ARG_NAME);
750:       assertEquals(8, Node.FLAG_NO_THROWS);
751:       assertEquals(36, Node.QUOTED_PROP);
752:       assertEquals(48, Node.DIRECTIVES);
753:       assertEquals(57, Node.REFLECTED_OBJECT);
754:       assertEquals(56, Node.CHANGE_TIME);
755:       assertNotSame(node0, node1);
756:       assertNotSame(node1, node0);
757:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
758:       assertEquals(0, arrayList0.size());
759:       assertTrue(arrayList0.isEmpty());
760:       assertFalse(node0.isAnd());
761:       assertFalse(node0.isObjectLit());
762:       assertTrue(node0.isParamList());
763:       assertFalse(node0.isWith());
764:       assertFalse(node0.isInstanceOf());
765:       assertFalse(node0.isScript());
766:       assertFalse(node0.isGetProp());
767:       assertFalse(node0.isExprResult());
768:       assertFalse(node0.isComma());
769:       assertFalse(node0.isThis());
770:       assertFalse(node0.isThrow());
771:       assertFalse(node0.isBreak());
772:       assertFalse(node0.isGetElem());
773:       assertEquals(83, node0.getType());
774:       assertFalse(node0.isOr());
775:       assertFalse(node0.isContinue());
776:       assertFalse(node0.isIn());
777:       assertFalse(node0.isString());
778:       assertFalse(node0.isInc());
779:       assertFalse(node0.isTypeOf());
780:       assertFalse(node0.isWhile());
781:       assertFalse(node0.isAssign());
782:       assertFalse(node0.isDec());
783:       assertFalse(node0.hasChildren());
784:       assertFalse(node0.isReturn());
785:       assertFalse(node0.isCast());
786:       assertFalse(node0.isFalse());
787:       assertFalse(node0.isDebugger());
788:       assertFalse(node0.isNot());
789:       assertEquals((-1), node0.getSourcePosition());
790:       assertFalse(node0.isCatch());
791:       assertFalse(node0.isFunction());
792:       assertFalse(node0.isTry());
793:       assertFalse(node0.isRegExp());
794:       assertFalse(node0.isDefaultCase());
795:       assertEquals(0, node0.getChildCount());
796:       assertFalse(node0.isCall());
797:       assertFalse(node0.isName());
798:       assertFalse(node0.isDelProp());
799:       assertFalse(node0.isEmpty());
800:       assertFalse(node0.isNew());
801:       assertFalse(node0.isAdd());
802:       assertFalse(node0.isSetterDef());
803:       assertFalse(node0.isVoid());
804:       assertFalse(node0.isTrue());
805:       assertFalse(node0.isNE());
806:       assertFalse(node0.isIf());
807:       assertFalse(node0.isNull());
808:       assertFalse(node0.hasMoreThanOneChild());
809:       assertEquals((-1), node0.getLineno());
810:       assertFalse(node0.isDo());
811:       assertFalse(node0.isCase());
812:       assertFalse(node0.isAssignAdd());
813:       assertFalse(node0.isFor());
814:       assertFalse(node0.isBlock());
815:       assertFalse(node0.isLabel());
816:       assertFalse(node0.isVar());
817:       assertFalse(node0.isHook());
818:       assertFalse(node0.isStringKey());
819:       assertFalse(node0.hasOneChild());
820:       assertFalse(node0.isLabelName());
821:       assertFalse(node0.isArrayLit());
822:       assertEquals((-1), node0.getCharno());
823:       assertFalse(node0.isNumber());
824:       assertFalse(node0.isSwitch());
825:       assertFalse(node0.isGetterDef());
826:       assertFalse(node1.isNull());
827:       assertEquals(0, node1.getChildCount());
828:       assertFalse(node1.isName());
829:       assertFalse(node1.isCatch());
830:       assertFalse(node1.isStringKey());
831:       assertFalse(node1.isCall());
832:       assertFalse(node1.isVoid());
833:       assertFalse(node1.isAdd());
834:       assertFalse(node1.isVar());
835:       assertFalse(node1.isTrue());
836:       assertFalse(node1.isFunction());
837:       assertFalse(node1.isEmpty());
838:       assertFalse(node1.isDo());
839:       assertFalse(node1.isSetterDef());
840:       assertFalse(node1.isDefaultCase());
841:       assertFalse(node1.isNew());
842:       assertFalse(node1.isOr());
843:       assertFalse(node1.isReturn());
844:       assertFalse(node1.isTypeOf());
845:       assertFalse(node1.hasChildren());
846:       assertEquals((-1), node1.getSourcePosition());
847:       assertFalse(node1.isDec());
848:       assertFalse(node1.isAssign());
849:       assertFalse(node1.isGetElem());
850:       assertFalse(node1.isContinue());
851:       assertFalse(node1.isCast());
852:       assertFalse(node1.isDelProp());
853:       assertFalse(node1.isExprResult());
854:       assertFalse(node1.isDebugger());
855:       assertFalse(node1.isNot());
856:       assertFalse(node1.isString());
857:       assertFalse(node1.isWhile());
858:       assertFalse(node1.isGetProp());
859:       assertFalse(node1.isInstanceOf());
860:       assertEquals(83, node1.getType());
861:       assertFalse(node1.isThis());
862:       assertTrue(node1.isParamList());
863:       assertFalse(node1.isObjectLit());
864:       assertFalse(node1.isComma());
865:       assertFalse(node1.isFalse());
866:       assertFalse(node1.isWith());
867:       assertFalse(node1.isAnd());
868:       assertFalse(node1.isBreak());
869:       assertFalse(node1.isThrow());
870:       assertFalse(node1.isInc());
871:       assertFalse(node1.isAssignAdd());
872:       assertFalse(node1.isLabel());
873:       assertFalse(node1.isIn());
874:       assertFalse(node1.isNE());
875:       assertFalse(node1.isNumber());
876:       assertFalse(node1.hasMoreThanOneChild());
877:       assertFalse(node1.isGetterDef());
878:       assertFalse(node1.isLabelName());
879:       assertFalse(node1.isIf());
880:       assertFalse(node1.isArrayLit());
881:       assertFalse(node1.isSwitch());
882:       assertEquals((-1), node1.getLineno());
883:       assertFalse(node1.isTry());
884:       assertFalse(node1.isBlock());
885:       assertFalse(node1.isRegExp());
886:       assertFalse(node1.isHook());
887:       assertEquals((-1), node1.getCharno());
888:       assertFalse(node1.isFor());
889:       assertFalse(node1.isScript());
890:       assertFalse(node1.isCase());
891:       assertFalse(node1.hasOneChild());
892:       assertFalse(iterable0.contains(node0));
893:       assertFalse(node0.equals((Object)node1));
894:       assertFalse(node1.equals((Object)node0));
895:       
896:       node1.setCharno(31);
897:       assertEquals(56, Node.CHANGE_TIME);
898:       assertEquals(2, Node.POST_FLAG);
899:       assertEquals(37, Node.OPT_ARG_NAME);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(47, Node.IS_DISPATCHER);
902:       assertEquals(32, Node.INCRDECR_PROP);
903:       assertEquals(51, Node.STATIC_SOURCE_FILE);
904:       assertEquals(46, Node.IS_NAMESPACE);
905:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
906:       assertEquals(53, Node.INPUT_ID);
907:       assertEquals(29, Node.JSDOC_INFO_PROP);
908:       assertEquals(43, Node.IS_CONSTANT_NAME);
909:       assertEquals(15, Node.NO_SIDE_EFFECTS);
910:       assertEquals(54, Node.SLASH_V);
911:       assertEquals(57, Node.LAST_PROP);
912:       assertEquals(40, Node.ORIGINALNAME_PROP);
913:       assertEquals(30, Node.VAR_ARGS_NAME);
914:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
915:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
916:       assertEquals(39, Node.EMPTY_BLOCK);
917:       assertEquals(48, Node.DIRECTIVES);
918:       assertEquals(57, Node.REFLECTED_OBJECT);
919:       assertEquals(55, Node.INFERRED_FUNCTION);
920:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
921:       assertEquals(50, Node.FREE_CALL);
922:       assertEquals(8, Node.FLAG_NO_THROWS);
923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
924:       assertEquals(52, Node.LENGTH);
925:       assertEquals(36, Node.QUOTED_PROP);
926:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
927:       assertEquals(49, Node.DIRECT_EVAL);
928:       assertEquals(1, Node.DECR_FLAG);
929:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
930:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
931:       assertEquals(12, Node.COLUMN_BITS);
932:       assertEquals(4095, Node.COLUMN_MASK);
933:       assertEquals(29, Node.JSDOC_INFO_PROP);
934:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
935:       assertEquals(53, Node.INPUT_ID);
936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
937:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
938:       assertEquals(2, Node.POST_FLAG);
939:       assertEquals(32, Node.INCRDECR_PROP);
940:       assertEquals(47, Node.IS_DISPATCHER);
941:       assertEquals(12, Node.COLUMN_BITS);
942:       assertEquals(51, Node.STATIC_SOURCE_FILE);
943:       assertEquals(30, Node.VAR_ARGS_NAME);
944:       assertEquals(1, Node.DECR_FLAG);
945:       assertEquals(54, Node.SLASH_V);
946:       assertEquals(46, Node.IS_NAMESPACE);
947:       assertEquals(43, Node.IS_CONSTANT_NAME);
948:       assertEquals(40, Node.ORIGINALNAME_PROP);
949:       assertEquals(50, Node.FREE_CALL);
950:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
951:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
952:       assertEquals(52, Node.LENGTH);
953:       assertEquals(39, Node.EMPTY_BLOCK);
954:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
955:       assertEquals(57, Node.LAST_PROP);
956:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
957:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
958:       assertEquals(49, Node.DIRECT_EVAL);
959:       assertEquals(15, Node.NO_SIDE_EFFECTS);
960:       assertEquals(4095, Node.COLUMN_MASK);
961:       assertEquals(55, Node.INFERRED_FUNCTION);
962:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
963:       assertEquals(37, Node.OPT_ARG_NAME);
964:       assertEquals(8, Node.FLAG_NO_THROWS);
965:       assertEquals(36, Node.QUOTED_PROP);
966:       assertEquals(48, Node.DIRECTIVES);
967:       assertEquals(57, Node.REFLECTED_OBJECT);
968:       assertEquals(56, Node.CHANGE_TIME);
969:       assertNotSame(node0, node1);
970:       assertNotSame(node1, node0);
971:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
972:       assertEquals(0, arrayList0.size());
973:       assertTrue(arrayList0.isEmpty());
974:       assertFalse(node0.isAnd());
975:       assertFalse(node0.isObjectLit());
976:       assertTrue(node0.isParamList());
977:       assertFalse(node0.isWith());
978:       assertFalse(node0.isInstanceOf());
979:       assertFalse(node0.isScript());
980:       assertFalse(node0.isGetProp());
981:       assertFalse(node0.isExprResult());
982:       assertFalse(node0.isComma());
983:       assertFalse(node0.isThis());
984:       assertFalse(node0.isThrow());
985:       assertFalse(node0.isBreak());
986:       assertFalse(node0.isGetElem());
987:       assertEquals(83, node0.getType());
988:       assertFalse(node0.isOr());
989:       assertFalse(node0.isContinue());
990:       assertFalse(node0.isIn());
991:       assertFalse(node0.isString());
992:       assertFalse(node0.isInc());
993:       assertFalse(node0.isTypeOf());
994:       assertFalse(node0.isWhile());
995:       assertFalse(node0.isAssign());
996:       assertFalse(node0.isDec());
997:       assertFalse(node0.hasChildren());
998:       assertFalse(node0.isReturn());
999:       assertFalse(node0.isCast());
1000:       assertFalse(node0.isFalse());
1001:       assertFalse(node0.isDebugger());
1002:       assertFalse(node0.isNot());
1003:       assertEquals((-1), node0.getSourcePosition());
1004:       assertFalse(node0.isCatch());
1005:       assertFalse(node0.isFunction());
1006:       assertFalse(node0.isTry());
1007:       assertFalse(node0.isRegExp());
1008:       assertFalse(node0.isDefaultCase());
1009:       assertEquals(0, node0.getChildCount());
1010:       assertFalse(node0.isCall());
1011:       assertFalse(node0.isName());
1012:       assertFalse(node0.isDelProp());
1013:       assertFalse(node0.isEmpty());
1014:       assertFalse(node0.isNew());
1015:       assertFalse(node0.isAdd());
1016:       assertFalse(node0.isSetterDef());
1017:       assertFalse(node0.isVoid());
1018:       assertFalse(node0.isTrue());
1019:       assertFalse(node0.isNE());
1020:       assertFalse(node0.isIf());
1021:       assertFalse(node0.isNull());
1022:       assertFalse(node0.hasMoreThanOneChild());
1023:       assertEquals((-1), node0.getLineno());
1024:       assertFalse(node0.isDo());
1025:       assertFalse(node0.isCase());
1026:       assertFalse(node0.isAssignAdd());
1027:       assertFalse(node0.isFor());
1028:       assertFalse(node0.isBlock());
1029:       assertFalse(node0.isLabel());
1030:       assertFalse(node0.isVar());
1031:       assertFalse(node0.isHook());
1032:       assertFalse(node0.isStringKey());
1033:       assertFalse(node0.hasOneChild());
1034:       assertFalse(node0.isLabelName());
1035:       assertFalse(node0.isArrayLit());
1036:       assertEquals((-1), node0.getCharno());
1037:       assertFalse(node0.isNumber());
1038:       assertFalse(node0.isSwitch());
1039:       assertFalse(node0.isGetterDef());
1040:       assertFalse(node1.isNull());
1041:       assertEquals(0, node1.getChildCount());
1042:       assertFalse(node1.isName());
1043:       assertFalse(node1.isCatch());
1044:       assertFalse(node1.isStringKey());
1045:       assertFalse(node1.isCall());
1046:       assertFalse(node1.isVoid());
1047:       assertFalse(node1.isAdd());
1048:       assertFalse(node1.isVar());
1049:       assertFalse(node1.isTrue());
1050:       assertFalse(node1.isFunction());
1051:       assertFalse(node1.isEmpty());
1052:       assertFalse(node1.isDo());
1053:       assertFalse(node1.isSetterDef());
1054:       assertFalse(node1.isDefaultCase());
1055:       assertFalse(node1.isNew());
1056:       assertFalse(node1.isOr());
1057:       assertFalse(node1.isReturn());
1058:       assertFalse(node1.isTypeOf());
1059:       assertFalse(node1.hasChildren());
1060:       assertEquals((-1), node1.getSourcePosition());
1061:       assertFalse(node1.isDec());
1062:       assertFalse(node1.isAssign());
1063:       assertFalse(node1.isGetElem());
1064:       assertFalse(node1.isContinue());
1065:       assertFalse(node1.isCast());
1066:       assertFalse(node1.isDelProp());
1067:       assertFalse(node1.isExprResult());
1068:       assertFalse(node1.isDebugger());
1069:       assertFalse(node1.isNot());
1070:       assertFalse(node1.isString());
1071:       assertFalse(node1.isWhile());
1072:       assertFalse(node1.isGetProp());
1073:       assertFalse(node1.isInstanceOf());
1074:       assertEquals(83, node1.getType());
1075:       assertFalse(node1.isThis());
1076:       assertTrue(node1.isParamList());
1077:       assertFalse(node1.isObjectLit());
1078:       assertFalse(node1.isComma());
1079:       assertFalse(node1.isFalse());
1080:       assertFalse(node1.isWith());
1081:       assertFalse(node1.isAnd());
1082:       assertFalse(node1.isBreak());
1083:       assertFalse(node1.isThrow());
1084:       assertFalse(node1.isInc());
1085:       assertFalse(node1.isAssignAdd());
1086:       assertFalse(node1.isLabel());
1087:       assertFalse(node1.isIn());
1088:       assertFalse(node1.isNE());
1089:       assertFalse(node1.isNumber());
1090:       assertFalse(node1.hasMoreThanOneChild());
1091:       assertFalse(node1.isGetterDef());
1092:       assertFalse(node1.isLabelName());
1093:       assertFalse(node1.isIf());
1094:       assertFalse(node1.isArrayLit());
1095:       assertFalse(node1.isSwitch());
1096:       assertEquals((-1), node1.getLineno());
1097:       assertFalse(node1.isTry());
1098:       assertFalse(node1.isBlock());
1099:       assertFalse(node1.isRegExp());
1100:       assertFalse(node1.isHook());
1101:       assertEquals((-1), node1.getCharno());
1102:       assertFalse(node1.isFor());
1103:       assertFalse(node1.isScript());
1104:       assertFalse(node1.isCase());
1105:       assertFalse(node1.hasOneChild());
1106:       assertFalse(node0.equals((Object)node1));
1107:       assertFalse(node1.equals((Object)node0));
1108:       
1109:       boolean boolean1 = node1.hasChild(node0);
1110:       assertFalse(boolean1);
1111:       assertEquals(56, Node.CHANGE_TIME);
1112:       assertEquals(2, Node.POST_FLAG);
1113:       assertEquals(37, Node.OPT_ARG_NAME);
1114:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1115:       assertEquals(47, Node.IS_DISPATCHER);
1116:       assertEquals(32, Node.INCRDECR_PROP);
1117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1118:       assertEquals(46, Node.IS_NAMESPACE);
1119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1120:       assertEquals(53, Node.INPUT_ID);
1121:       assertEquals(29, Node.JSDOC_INFO_PROP);
1122:       assertEquals(43, Node.IS_CONSTANT_NAME);
1123:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1124:       assertEquals(54, Node.SLASH_V);
1125:       assertEquals(57, Node.LAST_PROP);
1126:       assertEquals(40, Node.ORIGINALNAME_PROP);
1127:       assertEquals(30, Node.VAR_ARGS_NAME);
1128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1130:       assertEquals(39, Node.EMPTY_BLOCK);
1131:       assertEquals(48, Node.DIRECTIVES);
1132:       assertEquals(57, Node.REFLECTED_OBJECT);
1133:       assertEquals(55, Node.INFERRED_FUNCTION);
1134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1135:       assertEquals(50, Node.FREE_CALL);
1136:       assertEquals(8, Node.FLAG_NO_THROWS);
1137:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1138:       assertEquals(52, Node.LENGTH);
1139:       assertEquals(36, Node.QUOTED_PROP);
1140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1141:       assertEquals(49, Node.DIRECT_EVAL);
1142:       assertEquals(1, Node.DECR_FLAG);
1143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1144:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1145:       assertEquals(12, Node.COLUMN_BITS);
1146:       assertEquals(4095, Node.COLUMN_MASK);
1147:       assertEquals(29, Node.JSDOC_INFO_PROP);
1148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1149:       assertEquals(53, Node.INPUT_ID);
1150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1151:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1152:       assertEquals(2, Node.POST_FLAG);
1153:       assertEquals(32, Node.INCRDECR_PROP);
1154:       assertEquals(47, Node.IS_DISPATCHER);
1155:       assertEquals(12, Node.COLUMN_BITS);
1156:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1157:       assertEquals(30, Node.VAR_ARGS_NAME);
1158:       assertEquals(1, Node.DECR_FLAG);
1159:       assertEquals(54, Node.SLASH_V);
1160:       assertEquals(46, Node.IS_NAMESPACE);
1161:       assertEquals(43, Node.IS_CONSTANT_NAME);
1162:       assertEquals(40, Node.ORIGINALNAME_PROP);
1163:       assertEquals(50, Node.FREE_CALL);
1164:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1165:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1166:       assertEquals(52, Node.LENGTH);
1167:       assertEquals(39, Node.EMPTY_BLOCK);
1168:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1169:       assertEquals(57, Node.LAST_PROP);
1170:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1171:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1172:       assertEquals(49, Node.DIRECT_EVAL);
1173:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1174:       assertEquals(4095, Node.COLUMN_MASK);
1175:       assertEquals(55, Node.INFERRED_FUNCTION);
1176:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1177:       assertEquals(37, Node.OPT_ARG_NAME);
1178:       assertEquals(8, Node.FLAG_NO_THROWS);
1179:       assertEquals(36, Node.QUOTED_PROP);
1180:       assertEquals(48, Node.DIRECTIVES);
1181:       assertEquals(57, Node.REFLECTED_OBJECT);
1182:       assertEquals(56, Node.CHANGE_TIME);
1183:       assertNotSame(node0, node1);
1184:       assertNotSame(node1, node0);
1185:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1186:       assertEquals(0, arrayList0.size());
1187:       assertTrue(arrayList0.isEmpty());
1188:       assertFalse(node0.isAnd());
1189:       assertFalse(node0.isObjectLit());
1190:       assertTrue(node0.isParamList());
1191:       assertFalse(node0.isWith());
1192:       assertFalse(node0.isInstanceOf());
1193:       assertFalse(node0.isScript());
1194:       assertFalse(node0.isGetProp());
1195:       assertFalse(node0.isExprResult());
1196:       assertFalse(node0.isComma());
1197:       assertFalse(node0.isThis());
1198:       assertFalse(node0.isThrow());
1199:       assertFalse(node0.isBreak());
1200:       assertFalse(node0.isGetElem());
1201:       assertEquals(83, node0.getType());
1202:       assertFalse(node0.isOr());
1203:       assertFalse(node0.isContinue());
1204:       assertFalse(node0.isIn());
1205:       assertFalse(node0.isString());
1206:       assertFalse(node0.isInc());
1207:       assertFalse(node0.isTypeOf());
1208:       assertFalse(node0.isWhile());
1209:       assertFalse(node0.isAssign());
1210:       assertFalse(node0.isDec());
1211:       assertFalse(node0.hasChildren());
1212:       assertFalse(node0.isReturn());
1213:       assertFalse(node0.isCast());
1214:       assertFalse(node0.isFalse());
1215:       assertFalse(node0.isDebugger());
1216:       assertFalse(node0.isNot());
1217:       assertEquals((-1), node0.getSourcePosition());
1218:       assertFalse(node0.isCatch());
1219:       assertFalse(node0.isFunction());
1220:       assertFalse(node0.isTry());
1221:       assertFalse(node0.isRegExp());
1222:       assertFalse(node0.isDefaultCase());
1223:       assertEquals(0, node0.getChildCount());
1224:       assertFalse(node0.isCall());
1225:       assertFalse(node0.isName());
1226:       assertFalse(node0.isDelProp());
1227:       assertFalse(node0.isEmpty());
1228:       assertFalse(node0.isNew());
1229:       assertFalse(node0.isAdd());
1230:       assertFalse(node0.isSetterDef());
1231:       assertFalse(node0.isVoid());
1232:       assertFalse(node0.isTrue());
1233:       assertFalse(node0.isNE());
1234:       assertFalse(node0.isIf());
1235:       assertFalse(node0.isNull());
1236:       assertFalse(node0.hasMoreThanOneChild());
1237:       assertEquals((-1), node0.getLineno());
1238:       assertFalse(node0.isDo());
1239:       assertFalse(node0.isCase());
1240:       assertFalse(node0.isAssignAdd());
1241:       assertFalse(node0.isFor());
1242:       assertFalse(node0.isBlock());
1243:       assertFalse(node0.isLabel());
1244:       assertFalse(node0.isVar());
1245:       assertFalse(node0.isHook());
1246:       assertFalse(node0.isStringKey());
1247:       assertFalse(node0.hasOneChild());
1248:       assertFalse(node0.isLabelName());
1249:       assertFalse(node0.isArrayLit());
1250:       assertEquals((-1), node0.getCharno());
1251:       assertFalse(node0.isNumber());
1252:       assertFalse(node0.isSwitch());
1253:       assertFalse(node0.isGetterDef());
1254:       assertFalse(node1.isNull());
1255:       assertEquals(0, node1.getChildCount());
1256:       assertFalse(node1.isName());
1257:       assertFalse(node1.isCatch());
1258:       assertFalse(node1.isStringKey());
1259:       assertFalse(node1.isCall());
1260:       assertFalse(node1.isVoid());
1261:       assertFalse(node1.isAdd());
1262:       assertFalse(node1.isVar());
1263:       assertFalse(node1.isTrue());
1264:       assertFalse(node1.isFunction());
1265:       assertFalse(node1.isEmpty());
1266:       assertFalse(node1.isDo());
1267:       assertFalse(node1.isSetterDef());
1268:       assertFalse(node1.isDefaultCase());
1269:       assertFalse(node1.isNew());
1270:       assertFalse(node1.isOr());
1271:       assertFalse(node1.isReturn());
1272:       assertFalse(node1.isTypeOf());
1273:       assertFalse(node1.hasChildren());
1274:       assertEquals((-1), node1.getSourcePosition());
1275:       assertFalse(node1.isDec());
1276:       assertFalse(node1.isAssign());
1277:       assertFalse(node1.isGetElem());
1278:       assertFalse(node1.isContinue());
1279:       assertFalse(node1.isCast());
1280:       assertFalse(node1.isDelProp());
1281:       assertFalse(node1.isExprResult());
1282:       assertFalse(node1.isDebugger());
1283:       assertFalse(node1.isNot());
1284:       assertFalse(node1.isString());
1285:       assertFalse(node1.isWhile());
1286:       assertFalse(node1.isGetProp());
1287:       assertFalse(node1.isInstanceOf());
1288:       assertEquals(83, node1.getType());
1289:       assertFalse(node1.isThis());
1290:       assertTrue(node1.isParamList());
1291:       assertFalse(node1.isObjectLit());
1292:       assertFalse(node1.isComma());
1293:       assertFalse(node1.isFalse());
1294:       assertFalse(node1.isWith());
1295:       assertFalse(node1.isAnd());
1296:       assertFalse(node1.isBreak());
1297:       assertFalse(node1.isThrow());
1298:       assertFalse(node1.isInc());
1299:       assertFalse(node1.isAssignAdd());
1300:       assertFalse(node1.isLabel());
1301:       assertFalse(node1.isIn());
1302:       assertFalse(node1.isNE());
1303:       assertFalse(node1.isNumber());
1304:       assertFalse(node1.hasMoreThanOneChild());
1305:       assertFalse(node1.isGetterDef());
1306:       assertFalse(node1.isLabelName());
1307:       assertFalse(node1.isIf());
1308:       assertFalse(node1.isArrayLit());
1309:       assertFalse(node1.isSwitch());
1310:       assertEquals((-1), node1.getLineno());
1311:       assertFalse(node1.isTry());
1312:       assertFalse(node1.isBlock());
1313:       assertFalse(node1.isRegExp());
1314:       assertFalse(node1.isHook());
1315:       assertEquals((-1), node1.getCharno());
1316:       assertFalse(node1.isFor());
1317:       assertFalse(node1.isScript());
1318:       assertFalse(node1.isCase());
1319:       assertFalse(node1.hasOneChild());
1320:       assertFalse(node0.equals((Object)node1));
1321:       assertFalse(node1.equals((Object)node0));
1322:       assertTrue(boolean1 == boolean0);
1323:       
1324:       boolean boolean2 = node0.isContinue();
1325:       assertFalse(boolean2);
1326:       assertEquals(56, Node.CHANGE_TIME);
1327:       assertEquals(2, Node.POST_FLAG);
1328:       assertEquals(37, Node.OPT_ARG_NAME);
1329:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1330:       assertEquals(47, Node.IS_DISPATCHER);
1331:       assertEquals(32, Node.INCRDECR_PROP);
1332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1333:       assertEquals(46, Node.IS_NAMESPACE);
1334:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1335:       assertEquals(53, Node.INPUT_ID);
1336:       assertEquals(29, Node.JSDOC_INFO_PROP);
1337:       assertEquals(43, Node.IS_CONSTANT_NAME);
1338:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1339:       assertEquals(54, Node.SLASH_V);
1340:       assertEquals(57, Node.LAST_PROP);
1341:       assertEquals(40, Node.ORIGINALNAME_PROP);
1342:       assertEquals(30, Node.VAR_ARGS_NAME);
1343:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1344:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1345:       assertEquals(39, Node.EMPTY_BLOCK);
1346:       assertEquals(48, Node.DIRECTIVES);
1347:       assertEquals(57, Node.REFLECTED_OBJECT);
1348:       assertEquals(55, Node.INFERRED_FUNCTION);
1349:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1350:       assertEquals(50, Node.FREE_CALL);
1351:       assertEquals(8, Node.FLAG_NO_THROWS);
1352:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1353:       assertEquals(52, Node.LENGTH);
1354:       assertEquals(36, Node.QUOTED_PROP);
1355:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1356:       assertEquals(49, Node.DIRECT_EVAL);
1357:       assertEquals(1, Node.DECR_FLAG);
1358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1359:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1360:       assertEquals(12, Node.COLUMN_BITS);
1361:       assertEquals(4095, Node.COLUMN_MASK);
1362:       assertNotSame(node0, node1);
1363:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1364:       assertEquals(0, arrayList0.size());
1365:       assertTrue(arrayList0.isEmpty());
1366:       assertFalse(node0.isAnd());
1367:       assertFalse(node0.isObjectLit());
1368:       assertTrue(node0.isParamList());
1369:       assertFalse(node0.isWith());
1370:       assertFalse(node0.isInstanceOf());
1371:       assertFalse(node0.isScript());
1372:       assertFalse(node0.isGetProp());
1373:       assertFalse(node0.isExprResult());
1374:       assertFalse(node0.isComma());
1375:       assertFalse(node0.isThis());
1376:       assertFalse(node0.isThrow());
1377:       assertFalse(node0.isBreak());
1378:       assertFalse(node0.isGetElem());
1379:       assertEquals(83, node0.getType());
1380:       assertFalse(node0.isOr());
1381:       assertFalse(node0.isContinue());
1382:       assertFalse(node0.isIn());
1383:       assertFalse(node0.isString());
1384:       assertFalse(node0.isInc());
1385:       assertFalse(node0.isTypeOf());
1386:       assertFalse(node0.isWhile());
1387:       assertFalse(node0.isAssign());
1388:       assertFalse(node0.isDec());
1389:       assertFalse(node0.hasChildren());
1390:       assertFalse(node0.isReturn());
1391:       assertFalse(node0.isCast());
1392:       assertFalse(node0.isFalse());
1393:       assertFalse(node0.isDebugger());
1394:       assertFalse(node0.isNot());
1395:       assertEquals((-1), node0.getSourcePosition());
1396:       assertFalse(node0.isCatch());
1397:       assertFalse(node0.isFunction());
1398:       assertFalse(node0.isTry());
1399:       assertFalse(node0.isRegExp());
1400:       assertFalse(node0.isDefaultCase());
1401:       assertEquals(0, node0.getChildCount());
1402:       assertFalse(node0.isCall());
1403:       assertFalse(node0.isName());
1404:       assertFalse(node0.isDelProp());
1405:       assertFalse(node0.isEmpty());
1406:       assertFalse(node0.isNew());
1407:       assertFalse(node0.isAdd());
1408:       assertFalse(node0.isSetterDef());
1409:       assertFalse(node0.isVoid());
1410:       assertFalse(node0.isTrue());
1411:       assertFalse(node0.isNE());
1412:       assertFalse(node0.isIf());
1413:       assertFalse(node0.isNull());
1414:       assertFalse(node0.hasMoreThanOneChild());
1415:       assertEquals((-1), node0.getLineno());
1416:       assertFalse(node0.isDo());
1417:       assertFalse(node0.isCase());
1418:       assertFalse(node0.isAssignAdd());
1419:       assertFalse(node0.isFor());
1420:       assertFalse(node0.isBlock());
1421:       assertFalse(node0.isLabel());
1422:       assertFalse(node0.isVar());
1423:       assertFalse(node0.isHook());
1424:       assertFalse(node0.isStringKey());
1425:       assertFalse(node0.hasOneChild());
1426:       assertFalse(node0.isLabelName());
1427:       assertFalse(node0.isArrayLit());
1428:       assertEquals((-1), node0.getCharno());
1429:       assertFalse(node0.isNumber());
1430:       assertFalse(node0.isSwitch());
1431:       assertFalse(node0.isGetterDef());
1432:       assertFalse(node0.equals((Object)node1));
1433:       assertTrue(boolean2 == boolean1);
1434:       assertTrue(boolean2 == boolean0);
1435:       
1436:       Node node2 = node1.clonePropsFrom(node0);
1437:       assertNotNull(node2);
1438:       assertEquals(56, Node.CHANGE_TIME);
1439:       assertEquals(2, Node.POST_FLAG);
1440:       assertEquals(37, Node.OPT_ARG_NAME);
1441:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1442:       assertEquals(47, Node.IS_DISPATCHER);
1443:       assertEquals(32, Node.INCRDECR_PROP);
1444:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1445:       assertEquals(46, Node.IS_NAMESPACE);
1446:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1447:       assertEquals(53, Node.INPUT_ID);
1448:       assertEquals(29, Node.JSDOC_INFO_PROP);
1449:       assertEquals(43, Node.IS_CONSTANT_NAME);
1450:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1451:       assertEquals(54, Node.SLASH_V);
1452:       assertEquals(57, Node.LAST_PROP);
1453:       assertEquals(40, Node.ORIGINALNAME_PROP);
1454:       assertEquals(30, Node.VAR_ARGS_NAME);
1455:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1457:       assertEquals(39, Node.EMPTY_BLOCK);
1458:       assertEquals(48, Node.DIRECTIVES);
1459:       assertEquals(57, Node.REFLECTED_OBJECT);
1460:       assertEquals(55, Node.INFERRED_FUNCTION);
1461:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1462:       assertEquals(50, Node.FREE_CALL);
1463:       assertEquals(8, Node.FLAG_NO_THROWS);
1464:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1465:       assertEquals(52, Node.LENGTH);
1466:       assertEquals(36, Node.QUOTED_PROP);
1467:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1468:       assertEquals(49, Node.DIRECT_EVAL);
1469:       assertEquals(1, Node.DECR_FLAG);
1470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1472:       assertEquals(12, Node.COLUMN_BITS);
1473:       assertEquals(4095, Node.COLUMN_MASK);
1474:       assertEquals(29, Node.JSDOC_INFO_PROP);
1475:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1476:       assertEquals(53, Node.INPUT_ID);
1477:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1479:       assertEquals(2, Node.POST_FLAG);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(47, Node.IS_DISPATCHER);
1482:       assertEquals(12, Node.COLUMN_BITS);
1483:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1484:       assertEquals(30, Node.VAR_ARGS_NAME);
1485:       assertEquals(1, Node.DECR_FLAG);
1486:       assertEquals(54, Node.SLASH_V);
1487:       assertEquals(46, Node.IS_NAMESPACE);
1488:       assertEquals(43, Node.IS_CONSTANT_NAME);
1489:       assertEquals(40, Node.ORIGINALNAME_PROP);
1490:       assertEquals(50, Node.FREE_CALL);
1491:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1492:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1493:       assertEquals(52, Node.LENGTH);
1494:       assertEquals(39, Node.EMPTY_BLOCK);
1495:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1496:       assertEquals(57, Node.LAST_PROP);
1497:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1499:       assertEquals(49, Node.DIRECT_EVAL);
1500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1501:       assertEquals(4095, Node.COLUMN_MASK);
1502:       assertEquals(55, Node.INFERRED_FUNCTION);
1503:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1504:       assertEquals(37, Node.OPT_ARG_NAME);
1505:       assertEquals(8, Node.FLAG_NO_THROWS);
1506:       assertEquals(36, Node.QUOTED_PROP);
1507:       assertEquals(48, Node.DIRECTIVES);
1508:       assertEquals(57, Node.REFLECTED_OBJECT);
1509:       assertEquals(56, Node.CHANGE_TIME);
1510:       assertEquals(48, Node.DIRECTIVES);
1511:       assertEquals(39, Node.EMPTY_BLOCK);
1512:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1513:       assertEquals(55, Node.INFERRED_FUNCTION);
1514:       assertEquals(8, Node.FLAG_NO_THROWS);
1515:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1516:       assertEquals(4095, Node.COLUMN_MASK);
1517:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1518:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1519:       assertEquals(54, Node.SLASH_V);
1520:       assertEquals(40, Node.ORIGINALNAME_PROP);
1521:       assertEquals(50, Node.FREE_CALL);
1522:       assertEquals(43, Node.IS_CONSTANT_NAME);
1523:       assertEquals(46, Node.IS_NAMESPACE);
1524:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1525:       assertEquals(37, Node.OPT_ARG_NAME);
1526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1527:       assertEquals(2, Node.POST_FLAG);
1528:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1529:       assertEquals(1, Node.DECR_FLAG);
1530:       assertEquals(29, Node.JSDOC_INFO_PROP);
1531:       assertEquals(30, Node.VAR_ARGS_NAME);
1532:       assertEquals(57, Node.LAST_PROP);
1533:       assertEquals(47, Node.IS_DISPATCHER);
1534:       assertEquals(12, Node.COLUMN_BITS);
1535:       assertEquals(32, Node.INCRDECR_PROP);
1536:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1537:       assertEquals(53, Node.INPUT_ID);
1538:       assertEquals(36, Node.QUOTED_PROP);
1539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1540:       assertEquals(52, Node.LENGTH);
1541:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1542:       assertEquals(49, Node.DIRECT_EVAL);
1543:       assertEquals(56, Node.CHANGE_TIME);
1544:       assertEquals(57, Node.REFLECTED_OBJECT);
1545:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1546:       assertNotSame(node0, node2);
1547:       assertNotSame(node0, node1);
1548:       assertSame(node1, node2);
1549:       assertNotSame(node1, node0);
1550:       assertSame(node2, node1);
1551:       assertNotSame(node2, node0);
1552:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1553:       assertEquals(0, arrayList0.size());
1554:       assertTrue(arrayList0.isEmpty());
1555:       assertFalse(node0.isAnd());
1556:       assertFalse(node0.isObjectLit());
1557:       assertTrue(node0.isParamList());
1558:       assertFalse(node0.isWith());
1559:       assertFalse(node0.isInstanceOf());
1560:       assertFalse(node0.isScript());
1561:       assertFalse(node0.isGetProp());
1562:       assertFalse(node0.isExprResult());
1563:       assertFalse(node0.isComma());
1564:       assertFalse(node0.isThis());
1565:       assertFalse(node0.isThrow());
1566:       assertFalse(node0.isBreak());
1567:       assertFalse(node0.isGetElem());
1568:       assertEquals(83, node0.getType());
1569:       assertFalse(node0.isOr());
1570:       assertFalse(node0.isContinue());
1571:       assertFalse(node0.isIn());
1572:       assertFalse(node0.isString());
1573:       assertFalse(node0.isInc());
1574:       assertFalse(node0.isTypeOf());
1575:       assertFalse(node0.isWhile());
1576:       assertFalse(node0.isAssign());
1577:       assertFalse(node0.isDec());
1578:       assertFalse(node0.hasChildren());
1579:       assertFalse(node0.isReturn());
1580:       assertFalse(node0.isCast());
1581:       assertFalse(node0.isFalse());
1582:       assertFalse(node0.isDebugger());
1583:       assertFalse(node0.isNot());
1584:       assertEquals((-1), node0.getSourcePosition());
1585:       assertFalse(node0.isCatch());
1586:       assertFalse(node0.isFunction());
1587:       assertFalse(node0.isTry());
1588:       assertFalse(node0.isRegExp());
1589:       assertFalse(node0.isDefaultCase());
1590:       assertEquals(0, node0.getChildCount());
1591:       assertFalse(node0.isCall());
1592:       assertFalse(node0.isName());
1593:       assertFalse(node0.isDelProp());
1594:       assertFalse(node0.isEmpty());
1595:       assertFalse(node0.isNew());
1596:       assertFalse(node0.isAdd());
1597:       assertFalse(node0.isSetterDef());
1598:       assertFalse(node0.isVoid());
1599:       assertFalse(node0.isTrue());
1600:       assertFalse(node0.isNE());
1601:       assertFalse(node0.isIf());
1602:       assertFalse(node0.isNull());
1603:       assertFalse(node0.hasMoreThanOneChild());
1604:       assertEquals((-1), node0.getLineno());
1605:       assertFalse(node0.isDo());
1606:       assertFalse(node0.isCase());
1607:       assertFalse(node0.isAssignAdd());
1608:       assertFalse(node0.isFor());
1609:       assertFalse(node0.isBlock());
1610:       assertFalse(node0.isLabel());
1611:       assertFalse(node0.isVar());
1612:       assertFalse(node0.isHook());
1613:       assertFalse(node0.isStringKey());
1614:       assertFalse(node0.hasOneChild());
1615:       assertFalse(node0.isLabelName());
1616:       assertFalse(node0.isArrayLit());
1617:       assertEquals((-1), node0.getCharno());
1618:       assertFalse(node0.isNumber());
1619:       assertFalse(node0.isSwitch());
1620:       assertFalse(node0.isGetterDef());
1621:       assertFalse(node1.isNull());
1622:       assertEquals(0, node1.getChildCount());
1623:       assertFalse(node1.isName());
1624:       assertFalse(node1.isCatch());
1625:       assertFalse(node1.isStringKey());
1626:       assertFalse(node1.isCall());
1627:       assertFalse(node1.isVoid());
1628:       assertFalse(node1.isAdd());
1629:       assertFalse(node1.isVar());
1630:       assertFalse(node1.isTrue());
1631:       assertFalse(node1.isFunction());
1632:       assertFalse(node1.isEmpty());
1633:       assertFalse(node1.isDo());
1634:       assertFalse(node1.isSetterDef());
1635:       assertFalse(node1.isDefaultCase());
1636:       assertFalse(node1.isNew());
1637:       assertFalse(node1.isOr());
1638:       assertFalse(node1.isReturn());
1639:       assertFalse(node1.isTypeOf());
1640:       assertFalse(node1.hasChildren());
1641:       assertEquals((-1), node1.getSourcePosition());
1642:       assertFalse(node1.isDec());
1643:       assertFalse(node1.isAssign());
1644:       assertFalse(node1.isGetElem());
1645:       assertFalse(node1.isContinue());
1646:       assertFalse(node1.isCast());
1647:       assertFalse(node1.isDelProp());
1648:       assertFalse(node1.isExprResult());
1649:       assertFalse(node1.isDebugger());
1650:       assertFalse(node1.isNot());
1651:       assertFalse(node1.isString());
1652:       assertFalse(node1.isWhile());
1653:       assertFalse(node1.isGetProp());
1654:       assertFalse(node1.isInstanceOf());
1655:       assertEquals(83, node1.getType());
1656:       assertFalse(node1.isThis());
1657:       assertTrue(node1.isParamList());
1658:       assertFalse(node1.isObjectLit());
1659:       assertFalse(node1.isComma());
1660:       assertFalse(node1.isFalse());
1661:       assertFalse(node1.isWith());
1662:       assertFalse(node1.isAnd());
1663:       assertFalse(node1.isBreak());
1664:       assertFalse(node1.isThrow());
1665:       assertFalse(node1.isInc());
1666:       assertFalse(node1.isAssignAdd());
1667:       assertFalse(node1.isLabel());
1668:       assertFalse(node1.isIn());
1669:       assertFalse(node1.isNE());
1670:       assertFalse(node1.isNumber());
1671:       assertFalse(node1.hasMoreThanOneChild());
1672:       assertFalse(node1.isGetterDef());
1673:       assertFalse(node1.isLabelName());
1674:       assertFalse(node1.isIf());
1675:       assertFalse(node1.isArrayLit());
1676:       assertFalse(node1.isSwitch());
1677:       assertEquals((-1), node1.getLineno());
1678:       assertFalse(node1.isTry());
1679:       assertFalse(node1.isBlock());
1680:       assertFalse(node1.isRegExp());
1681:       assertFalse(node1.isHook());
1682:       assertEquals((-1), node1.getCharno());
1683:       assertFalse(node1.isFor());
1684:       assertFalse(node1.isScript());
1685:       assertFalse(node1.isCase());
1686:       assertFalse(node1.hasOneChild());
1687:       assertFalse(node2.isWhile());
1688:       assertFalse(node2.isDo());
1689:       assertFalse(node2.isContinue());
1690:       assertFalse(node2.isBlock());
1691:       assertEquals((-1), node2.getLineno());
1692:       assertFalse(node2.hasMoreThanOneChild());
1693:       assertFalse(node2.isCall());
1694:       assertFalse(node2.isName());
1695:       assertFalse(node2.isVar());
1696:       assertFalse(node2.isNull());
1697:       assertFalse(node2.isLabel());
1698:       assertFalse(node2.isAdd());
1699:       assertFalse(node2.isOr());
1700:       assertFalse(node2.isAssignAdd());
1701:       assertFalse(node2.isSetterDef());
1702:       assertFalse(node2.isNew());
1703:       assertFalse(node2.isWith());
1704:       assertFalse(node2.isDefaultCase());
1705:       assertFalse(node2.isRegExp());
1706:       assertEquals(0, node2.getChildCount());
1707:       assertFalse(node2.isInstanceOf());
1708:       assertFalse(node2.isCatch());
1709:       assertFalse(node2.isArrayLit());
1710:       assertFalse(node2.isGetterDef());
1711:       assertFalse(node2.isFor());
1712:       assertFalse(node2.isLabelName());
1713:       assertFalse(node2.isNumber());
1714:       assertFalse(node2.isStringKey());
1715:       assertFalse(node2.isThis());
1716:       assertFalse(node2.isHook());
1717:       assertFalse(node2.isTry());
1718:       assertFalse(node2.isScript());
1719:       assertFalse(node2.isCase());
1720:       assertFalse(node2.hasOneChild());
1721:       assertFalse(node2.isString());
1722:       assertFalse(node2.isSwitch());
1723:       assertEquals((-1), node2.getCharno());
1724:       assertFalse(node2.isEmpty());
1725:       assertFalse(node2.isDelProp());
1726:       assertFalse(node2.isFalse());
1727:       assertFalse(node2.isIf());
1728:       assertEquals(83, node2.getType());
1729:       assertFalse(node2.isNE());
1730:       assertFalse(node2.isThrow());
1731:       assertFalse(node2.isIn());
1732:       assertFalse(node2.isInc());
1733:       assertFalse(node2.isNot());
1734:       assertFalse(node2.isAnd());
1735:       assertFalse(node2.isTrue());
1736:       assertFalse(node2.isFunction());
1737:       assertFalse(node2.isObjectLit());
1738:       assertFalse(node2.isDebugger());
1739:       assertFalse(node2.isExprResult());
1740:       assertFalse(node2.isVoid());
1741:       assertFalse(node2.isCast());
1742:       assertFalse(node2.isGetElem());
1743:       assertFalse(node2.isBreak());
1744:       assertFalse(node2.isAssign());
1745:       assertFalse(node2.isTypeOf());
1746:       assertFalse(node2.isComma());
1747:       assertEquals((-1), node2.getSourcePosition());
1748:       assertFalse(node2.isDec());
1749:       assertFalse(node2.hasChildren());
1750:       assertFalse(node2.isReturn());
1751:       assertTrue(node2.isParamList());
1752:       assertFalse(node2.isGetProp());
1753:       assertFalse(node0.equals((Object)node1));
1754:       assertFalse(node1.equals((Object)node0));
1755:       assertFalse(node2.equals((Object)node0));
1756:       
1757:       Node node3 = node1.getLastChild();
1758:       assertNull(node3);
1759:       assertEquals(56, Node.CHANGE_TIME);
1760:       assertEquals(2, Node.POST_FLAG);
1761:       assertEquals(37, Node.OPT_ARG_NAME);
1762:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1763:       assertEquals(47, Node.IS_DISPATCHER);
1764:       assertEquals(32, Node.INCRDECR_PROP);
1765:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1766:       assertEquals(46, Node.IS_NAMESPACE);
1767:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1768:       assertEquals(53, Node.INPUT_ID);
1769:       assertEquals(29, Node.JSDOC_INFO_PROP);
1770:       assertEquals(43, Node.IS_CONSTANT_NAME);
1771:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1772:       assertEquals(54, Node.SLASH_V);
1773:       assertEquals(57, Node.LAST_PROP);
1774:       assertEquals(40, Node.ORIGINALNAME_PROP);
1775:       assertEquals(30, Node.VAR_ARGS_NAME);
1776:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1777:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1778:       assertEquals(39, Node.EMPTY_BLOCK);
1779:       assertEquals(48, Node.DIRECTIVES);
1780:       assertEquals(57, Node.REFLECTED_OBJECT);
1781:       assertEquals(55, Node.INFERRED_FUNCTION);
1782:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1783:       assertEquals(50, Node.FREE_CALL);
1784:       assertEquals(8, Node.FLAG_NO_THROWS);
1785:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1786:       assertEquals(52, Node.LENGTH);
1787:       assertEquals(36, Node.QUOTED_PROP);
1788:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1789:       assertEquals(49, Node.DIRECT_EVAL);
1790:       assertEquals(1, Node.DECR_FLAG);
1791:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1792:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1793:       assertEquals(12, Node.COLUMN_BITS);
1794:       assertEquals(4095, Node.COLUMN_MASK);
1795:       assertEquals(29, Node.JSDOC_INFO_PROP);
1796:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1797:       assertEquals(53, Node.INPUT_ID);
1798:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1799:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1800:       assertEquals(2, Node.POST_FLAG);
1801:       assertEquals(32, Node.INCRDECR_PROP);
1802:       assertEquals(47, Node.IS_DISPATCHER);
1803:       assertEquals(12, Node.COLUMN_BITS);
1804:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1805:       assertEquals(30, Node.VAR_ARGS_NAME);
1806:       assertEquals(1, Node.DECR_FLAG);
1807:       assertEquals(54, Node.SLASH_V);
1808:       assertEquals(46, Node.IS_NAMESPACE);
1809:       assertEquals(43, Node.IS_CONSTANT_NAME);
1810:       assertEquals(40, Node.ORIGINALNAME_PROP);
1811:       assertEquals(50, Node.FREE_CALL);
1812:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1813:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1814:       assertEquals(52, Node.LENGTH);
1815:       assertEquals(39, Node.EMPTY_BLOCK);
1816:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1817:       assertEquals(57, Node.LAST_PROP);
1818:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1819:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1820:       assertEquals(49, Node.DIRECT_EVAL);
1821:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1822:       assertEquals(4095, Node.COLUMN_MASK);
1823:       assertEquals(55, Node.INFERRED_FUNCTION);
1824:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1825:       assertEquals(37, Node.OPT_ARG_NAME);
1826:       assertEquals(8, Node.FLAG_NO_THROWS);
1827:       assertEquals(36, Node.QUOTED_PROP);
1828:       assertEquals(48, Node.DIRECTIVES);
1829:       assertEquals(57, Node.REFLECTED_OBJECT);
1830:       assertEquals(56, Node.CHANGE_TIME);
1831:       assertNotSame(node0, node2);
1832:       assertNotSame(node0, node1);
1833:       assertSame(node1, node2);
1834:       assertNotSame(node1, node0);
1835:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1836:       assertEquals(0, arrayList0.size());
1837:       assertTrue(arrayList0.isEmpty());
1838:       assertFalse(node0.isAnd());
1839:       assertFalse(node0.isObjectLit());
1840:       assertTrue(node0.isParamList());
1841:       assertFalse(node0.isWith());
1842:       assertFalse(node0.isInstanceOf());
1843:       assertFalse(node0.isScript());
1844:       assertFalse(node0.isGetProp());
1845:       assertFalse(node0.isExprResult());
1846:       assertFalse(node0.isComma());
1847:       assertFalse(node0.isThis());
1848:       assertFalse(node0.isThrow());
1849:       assertFalse(node0.isBreak());
1850:       assertFalse(node0.isGetElem());
1851:       assertEquals(83, node0.getType());
1852:       assertFalse(node0.isOr());
1853:       assertFalse(node0.isContinue());
1854:       assertFalse(node0.isIn());
1855:       assertFalse(node0.isString());
1856:       assertFalse(node0.isInc());
1857:       assertFalse(node0.isTypeOf());
1858:       assertFalse(node0.isWhile());
1859:       assertFalse(node0.isAssign());
1860:       assertFalse(node0.isDec());
1861:       assertFalse(node0.hasChildren());
1862:       assertFalse(node0.isReturn());
1863:       assertFalse(node0.isCast());
1864:       assertFalse(node0.isFalse());
1865:       assertFalse(node0.isDebugger());
1866:       assertFalse(node0.isNot());
1867:       assertEquals((-1), node0.getSourcePosition());
1868:       assertFalse(node0.isCatch());
1869:       assertFalse(node0.isFunction());
1870:       assertFalse(node0.isTry());
1871:       assertFalse(node0.isRegExp());
1872:       assertFalse(node0.isDefaultCase());
1873:       assertEquals(0, node0.getChildCount());
1874:       assertFalse(node0.isCall());
1875:       assertFalse(node0.isName());
1876:       assertFalse(node0.isDelProp());
1877:       assertFalse(node0.isEmpty());
1878:       assertFalse(node0.isNew());
1879:       assertFalse(node0.isAdd());
1880:       assertFalse(node0.isSetterDef());
1881:       assertFalse(node0.isVoid());
1882:       assertFalse(node0.isTrue());
1883:       assertFalse(node0.isNE());
1884:       assertFalse(node0.isIf());
1885:       assertFalse(node0.isNull());
1886:       assertFalse(node0.hasMoreThanOneChild());
1887:       assertEquals((-1), node0.getLineno());
1888:       assertFalse(node0.isDo());
1889:       assertFalse(node0.isCase());
1890:       assertFalse(node0.isAssignAdd());
1891:       assertFalse(node0.isFor());
1892:       assertFalse(node0.isBlock());
1893:       assertFalse(node0.isLabel());
1894:       assertFalse(node0.isVar());
1895:       assertFalse(node0.isHook());
1896:       assertFalse(node0.isStringKey());
1897:       assertFalse(node0.hasOneChild());
1898:       assertFalse(node0.isLabelName());
1899:       assertFalse(node0.isArrayLit());
1900:       assertEquals((-1), node0.getCharno());
1901:       assertFalse(node0.isNumber());
1902:       assertFalse(node0.isSwitch());
1903:       assertFalse(node0.isGetterDef());
1904:       assertFalse(node1.isNull());
1905:       assertEquals(0, node1.getChildCount());
1906:       assertFalse(node1.isName());
1907:       assertFalse(node1.isCatch());
1908:       assertFalse(node1.isStringKey());
1909:       assertFalse(node1.isCall());
1910:       assertFalse(node1.isVoid());
1911:       assertFalse(node1.isAdd());
1912:       assertFalse(node1.isVar());
1913:       assertFalse(node1.isTrue());
1914:       assertFalse(node1.isFunction());
1915:       assertFalse(node1.isEmpty());
1916:       assertFalse(node1.isDo());
1917:       assertFalse(node1.isSetterDef());
1918:       assertFalse(node1.isDefaultCase());
1919:       assertFalse(node1.isNew());
1920:       assertFalse(node1.isOr());
1921:       assertFalse(node1.isReturn());
1922:       assertFalse(node1.isTypeOf());
1923:       assertFalse(node1.hasChildren());
1924:       assertEquals((-1), node1.getSourcePosition());
1925:       assertFalse(node1.isDec());
1926:       assertFalse(node1.isAssign());
1927:       assertFalse(node1.isGetElem());
1928:       assertFalse(node1.isContinue());
1929:       assertFalse(node1.isCast());
1930:       assertFalse(node1.isDelProp());
1931:       assertFalse(node1.isExprResult());
1932:       assertFalse(node1.isDebugger());
1933:       assertFalse(node1.isNot());
1934:       assertFalse(node1.isString());
1935:       assertFalse(node1.isWhile());
1936:       assertFalse(node1.isGetProp());
1937:       assertFalse(node1.isInstanceOf());
1938:       assertEquals(83, node1.getType());
1939:       assertFalse(node1.isThis());
1940:       assertTrue(node1.isParamList());
1941:       assertFalse(node1.isObjectLit());
1942:       assertFalse(node1.isComma());
1943:       assertFalse(node1.isFalse());
1944:       assertFalse(node1.isWith());
1945:       assertFalse(node1.isAnd());
1946:       assertFalse(node1.isBreak());
1947:       assertFalse(node1.isThrow());
1948:       assertFalse(node1.isInc());
1949:       assertFalse(node1.isAssignAdd());
1950:       assertFalse(node1.isLabel());
1951:       assertFalse(node1.isIn());
1952:       assertFalse(node1.isNE());
1953:       assertFalse(node1.isNumber());
1954:       assertFalse(node1.hasMoreThanOneChild());
1955:       assertFalse(node1.isGetterDef());
1956:       assertFalse(node1.isLabelName());
1957:       assertFalse(node1.isIf());
1958:       assertFalse(node1.isArrayLit());
1959:       assertFalse(node1.isSwitch());
1960:       assertEquals((-1), node1.getLineno());
1961:       assertFalse(node1.isTry());
1962:       assertFalse(node1.isBlock());
1963:       assertFalse(node1.isRegExp());
1964:       assertFalse(node1.isHook());
1965:       assertEquals((-1), node1.getCharno());
1966:       assertFalse(node1.isFor());
1967:       assertFalse(node1.isScript());
1968:       assertFalse(node1.isCase());
1969:       assertFalse(node1.hasOneChild());
1970:       assertFalse(node0.equals((Object)node2));
1971:       assertFalse(node0.equals((Object)node1));
1972:       assertFalse(node1.equals((Object)node0));
1973:   }
1974: }
RegularFileObject[/tmp/EvoSuite_245_1628160486482/com/google/javascript/rhino/Node_245_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:48:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_245_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_245_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_245_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.common.base.Preconditions",
262:       "com.google.javascript.rhino.JSDocInfo",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.Node$AncestorIterable$1",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.AbstractMultimap$Values",
346:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
347:       "com.google.common.collect.AbstractMapBasedMultimap$1",
348:       "com.google.common.collect.Multimaps$Entries",
349:       "com.google.common.collect.AbstractMultimap$Entries",
350:       "com.google.common.collect.AbstractMapBasedMultimap$2",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
356:       "com.google.javascript.rhino.JSDocInfo$Visibility",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.Platform",
359:       "com.google.javascript.rhino.jstype.TemplatizedType",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.NamespaceType",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.Iterators$12"
373:     );
374:   }
375: }

[MASTER] 10:48:06.910 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertNotNull(arrayList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertNotNull(node0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());

Node node1 = node0.cloneNode();
assertNotNull(node1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertEquals(83, node1.getType());
assertFalse(node1.isThis());
assertTrue(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node1.isGetProp();
assertFalse(boolean0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertEquals(83, node1.getType());
assertFalse(node1.isThis());
assertTrue(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

node0.setIsSyntheticBlock(false);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.equals((Object)node1));

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertEquals(83, node1.getType());
assertFalse(node1.isThis());
assertTrue(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

node1.setCharno(31);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertEquals(83, node1.getType());
assertFalse(node1.isThis());
assertTrue(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node1.hasChild(node0);
assertFalse(boolean1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertEquals(83, node1.getType());
assertFalse(node1.isThis());
assertTrue(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node0.isContinue();
assertFalse(boolean2);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Node node2 = node1.clonePropsFrom(node0);
assertNotNull(node2);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node2, node1);
assertNotSame(node2, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertEquals(83, node1.getType());
assertFalse(node1.isThis());
assertTrue(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isStringKey());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isFalse());
assertFalse(node2.isIf());
assertEquals(83, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertTrue(node2.isParamList());
assertFalse(node2.isGetProp());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

Node node3 = node1.getLastChild();
assertNull(node3);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertEquals(83, node1.getType());
assertFalse(node1.isThis());
assertTrue(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));


[MASTER] 10:48:06.928 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_246_1628160486910/com/google/javascript/rhino/Node_246_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_246_1628160486910/com/google/javascript/rhino/Node_246_tmp__ESTest_scaffolding.java]]
[MASTER] 10:48:06.928 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:06.928 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:06.928 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 10:48:06.928 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_246_1628160486910/com/google/javascript/rhino/Node_246_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:48:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_246_tmp__ESTest extends Node_246_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(29.0);
21:       assertNotNull(node0);
22:       assertEquals(43, Node.IS_CONSTANT_NAME);
23:       assertEquals(36, Node.QUOTED_PROP);
24:       assertEquals(53, Node.INPUT_ID);
25:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
26:       assertEquals(4095, Node.COLUMN_MASK);
27:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
28:       assertEquals(48, Node.DIRECTIVES);
29:       assertEquals(2, Node.POST_FLAG);
30:       assertEquals(56, Node.CHANGE_TIME);
31:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
32:       assertEquals(39, Node.EMPTY_BLOCK);
33:       assertEquals(47, Node.IS_DISPATCHER);
34:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(8, Node.FLAG_NO_THROWS);
37:       assertEquals(55, Node.INFERRED_FUNCTION);
38:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
39:       assertEquals(57, Node.LAST_PROP);
40:       assertEquals(54, Node.SLASH_V);
41:       assertEquals(15, Node.NO_SIDE_EFFECTS);
42:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
43:       assertEquals(30, Node.VAR_ARGS_NAME);
44:       assertEquals(52, Node.LENGTH);
45:       assertEquals(51, Node.STATIC_SOURCE_FILE);
46:       assertEquals(46, Node.IS_NAMESPACE);
47:       assertEquals(40, Node.ORIGINALNAME_PROP);
48:       assertEquals(57, Node.REFLECTED_OBJECT);
49:       assertEquals(49, Node.DIRECT_EVAL);
50:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
51:       assertEquals(37, Node.OPT_ARG_NAME);
52:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertEquals(32, Node.INCRDECR_PROP);
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isHook());
61:       assertFalse(node0.isThis());
62:       assertFalse(node0.isGetProp());
63:       assertEquals((-1), node0.getCharno());
64:       assertFalse(node0.isString());
65:       assertFalse(node0.isInc());
66:       assertFalse(node0.isCase());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isComma());
69:       assertFalse(node0.isBreak());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isExprResult());
72:       assertFalse(node0.isAssign());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.hasChildren());
75:       assertEquals((-1), node0.getSourcePosition());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.isNE());
78:       assertFalse(node0.isDebugger());
79:       assertFalse(node0.isIn());
80:       assertTrue(node0.isNumber());
81:       assertFalse(node0.isContinue());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isObjectLit());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isCast());
87:       assertFalse(node0.isStringKey());
88:       assertFalse(node0.isName());
89:       assertFalse(node0.isVar());
90:       assertFalse(node0.isBlock());
91:       assertFalse(node0.isNull());
92:       assertFalse(node0.isNew());
93:       assertFalse(node0.isSetterDef());
94:       assertFalse(node0.isAdd());
95:       assertFalse(node0.hasMoreThanOneChild());
96:       assertFalse(node0.isWhile());
97:       assertEquals(39, node0.getType());
98:       assertFalse(node0.isTrue());
99:       assertFalse(node0.isReturn());
100:       assertFalse(node0.isVoid());
101:       assertFalse(node0.isRegExp());
102:       assertFalse(node0.isTypeOf());
103:       assertEquals((-1), node0.getLineno());
104:       assertFalse(node0.isCatch());
105:       assertFalse(node0.isGetElem());
106:       assertFalse(node0.isCall());
107:       assertFalse(node0.isLabelName());
108:       assertFalse(node0.isDelProp());
109:       assertFalse(node0.isGetterDef());
110:       assertFalse(node0.isFor());
111:       assertFalse(node0.isTry());
112:       assertFalse(node0.isOr());
113:       assertFalse(node0.isAssignAdd());
114:       assertFalse(node0.hasOneChild());
115:       assertFalse(node0.isEmpty());
116:       assertFalse(node0.isScript());
117:       assertFalse(node0.isDo());
118:       assertEquals(0, node0.getChildCount());
119:       assertFalse(node0.isDefaultCase());
120:       assertFalse(node0.isLabel());
121:       assertFalse(node0.isParamList());
122:       assertFalse(node0.isSwitch());
123:       assertFalse(node0.isArrayLit());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertNotNull(iterable0);
127:       assertEquals(43, Node.IS_CONSTANT_NAME);
128:       assertEquals(36, Node.QUOTED_PROP);
129:       assertEquals(53, Node.INPUT_ID);
130:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
131:       assertEquals(4095, Node.COLUMN_MASK);
132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
133:       assertEquals(48, Node.DIRECTIVES);
134:       assertEquals(2, Node.POST_FLAG);
135:       assertEquals(56, Node.CHANGE_TIME);
136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
137:       assertEquals(39, Node.EMPTY_BLOCK);
138:       assertEquals(47, Node.IS_DISPATCHER);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(8, Node.FLAG_NO_THROWS);
142:       assertEquals(55, Node.INFERRED_FUNCTION);
143:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
144:       assertEquals(57, Node.LAST_PROP);
145:       assertEquals(54, Node.SLASH_V);
146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(52, Node.LENGTH);
150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
151:       assertEquals(46, Node.IS_NAMESPACE);
152:       assertEquals(40, Node.ORIGINALNAME_PROP);
153:       assertEquals(57, Node.REFLECTED_OBJECT);
154:       assertEquals(49, Node.DIRECT_EVAL);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(37, Node.OPT_ARG_NAME);
157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
160:       assertEquals(12, Node.COLUMN_BITS);
161:       assertEquals(1, Node.DECR_FLAG);
162:       assertEquals(32, Node.INCRDECR_PROP);
163:       assertFalse(node0.isThrow());
164:       assertFalse(node0.isFalse());
165:       assertFalse(node0.isHook());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isGetProp());
168:       assertEquals((-1), node0.getCharno());
169:       assertFalse(node0.isString());
170:       assertFalse(node0.isInc());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.isWith());
173:       assertFalse(node0.isComma());
174:       assertFalse(node0.isBreak());
175:       assertFalse(node0.isInstanceOf());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isAssign());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.hasChildren());
180:       assertEquals((-1), node0.getSourcePosition());
181:       assertFalse(node0.isDec());
182:       assertFalse(node0.isNE());
183:       assertFalse(node0.isDebugger());
184:       assertFalse(node0.isIn());
185:       assertTrue(node0.isNumber());
186:       assertFalse(node0.isContinue());
187:       assertFalse(node0.isAnd());
188:       assertFalse(node0.isNot());
189:       assertFalse(node0.isObjectLit());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isCast());
192:       assertFalse(node0.isStringKey());
193:       assertFalse(node0.isName());
194:       assertFalse(node0.isVar());
195:       assertFalse(node0.isBlock());
196:       assertFalse(node0.isNull());
197:       assertFalse(node0.isNew());
198:       assertFalse(node0.isSetterDef());
199:       assertFalse(node0.isAdd());
200:       assertFalse(node0.hasMoreThanOneChild());
201:       assertFalse(node0.isWhile());
202:       assertEquals(39, node0.getType());
203:       assertFalse(node0.isTrue());
204:       assertFalse(node0.isReturn());
205:       assertFalse(node0.isVoid());
206:       assertFalse(node0.isRegExp());
207:       assertFalse(node0.isTypeOf());
208:       assertEquals((-1), node0.getLineno());
209:       assertFalse(node0.isCatch());
210:       assertFalse(node0.isGetElem());
211:       assertFalse(node0.isCall());
212:       assertFalse(node0.isLabelName());
213:       assertFalse(node0.isDelProp());
214:       assertFalse(node0.isGetterDef());
215:       assertFalse(node0.isFor());
216:       assertFalse(node0.isTry());
217:       assertFalse(node0.isOr());
218:       assertFalse(node0.isAssignAdd());
219:       assertFalse(node0.hasOneChild());
220:       assertFalse(node0.isEmpty());
221:       assertFalse(node0.isScript());
222:       assertFalse(node0.isDo());
223:       assertEquals(0, node0.getChildCount());
224:       assertFalse(node0.isDefaultCase());
225:       assertFalse(node0.isLabel());
226:       assertFalse(node0.isParamList());
227:       assertFalse(node0.isSwitch());
228:       assertFalse(node0.isArrayLit());
229:       assertFalse(iterable0.contains(node0));
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_246_1628160486910/com/google/javascript/rhino/Node_246_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:48:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_246_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_246_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_246_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.common.base.Preconditions",
262:       "com.google.javascript.rhino.JSDocInfo",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.Node$AncestorIterable$1",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.AbstractMultimap$Values",
346:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
347:       "com.google.common.collect.AbstractMapBasedMultimap$1",
348:       "com.google.common.collect.Multimaps$Entries",
349:       "com.google.common.collect.AbstractMultimap$Entries",
350:       "com.google.common.collect.AbstractMapBasedMultimap$2",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
356:       "com.google.javascript.rhino.JSDocInfo$Visibility",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.Platform",
359:       "com.google.javascript.rhino.jstype.TemplatizedType",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.NamespaceType",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.Iterators$12"
373:     );
374:   }
375: }

[MASTER] 10:48:06.930 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(29.0);
assertNotNull(node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(iterable0.contains(node0));


[MASTER] 10:48:07.038 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_249_1628160487001/com/google/javascript/rhino/Node_249_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_249_1628160487001/com/google/javascript/rhino/Node_249_tmp__ESTest_scaffolding.java]]
[MASTER] 10:48:07.038 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:07.038 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:07.039 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 544
[MASTER] 10:48:07.039 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_249_1628160487001/com/google/javascript/rhino/Node_249_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:48:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_249_tmp__ESTest extends Node_249_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((double) 121);
21:       assertNotNull(node0);
22:       assertEquals(15, Node.NO_SIDE_EFFECTS);
23:       assertEquals(57, Node.LAST_PROP);
24:       assertEquals(54, Node.SLASH_V);
25:       assertEquals(49, Node.DIRECT_EVAL);
26:       assertEquals(1, Node.DECR_FLAG);
27:       assertEquals(51, Node.STATIC_SOURCE_FILE);
28:       assertEquals(57, Node.REFLECTED_OBJECT);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(50, Node.FREE_CALL);
31:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
32:       assertEquals(52, Node.LENGTH);
33:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
34:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
35:       assertEquals(56, Node.CHANGE_TIME);
36:       assertEquals(37, Node.OPT_ARG_NAME);
37:       assertEquals(32, Node.INCRDECR_PROP);
38:       assertEquals(48, Node.DIRECTIVES);
39:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
40:       assertEquals(12, Node.COLUMN_BITS);
41:       assertEquals(4095, Node.COLUMN_MASK);
42:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
43:       assertEquals(43, Node.IS_CONSTANT_NAME);
44:       assertEquals(36, Node.QUOTED_PROP);
45:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
46:       assertEquals(53, Node.INPUT_ID);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(47, Node.IS_DISPATCHER);
53:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
54:       assertEquals(29, Node.JSDOC_INFO_PROP);
55:       assertEquals(40, Node.ORIGINALNAME_PROP);
56:       assertEquals(2, Node.POST_FLAG);
57:       assertEquals(30, Node.VAR_ARGS_NAME);
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isGetterDef());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isTry());
63:       assertFalse(node0.isRegExp());
64:       assertTrue(node0.isNumber());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isFor());
67:       assertFalse(node0.isCase());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isString());
70:       assertFalse(node0.isDebugger());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isSwitch());
73:       assertFalse(node0.isParamList());
74:       assertFalse(node0.isStringKey());
75:       assertFalse(node0.isThrow());
76:       assertFalse(node0.isFalse());
77:       assertFalse(node0.isInc());
78:       assertFalse(node0.isSetterDef());
79:       assertFalse(node0.isBlock());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isHook());
82:       assertFalse(node0.hasMoreThanOneChild());
83:       assertEquals(39, node0.getType());
84:       assertFalse(node0.isIn());
85:       assertFalse(node0.isWith());
86:       assertFalse(node0.isCatch());
87:       assertFalse(node0.isInstanceOf());
88:       assertEquals((-1), node0.getLineno());
89:       assertFalse(node0.isIf());
90:       assertFalse(node0.isNE());
91:       assertFalse(node0.isGetElem());
92:       assertFalse(node0.isLabelName());
93:       assertFalse(node0.isAssign());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isCast());
96:       assertFalse(node0.isTypeOf());
97:       assertFalse(node0.isLabel());
98:       assertFalse(node0.isDec());
99:       assertFalse(node0.hasChildren());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isAssignAdd());
102:       assertFalse(node0.isContinue());
103:       assertFalse(node0.isAnd());
104:       assertFalse(node0.isObjectLit());
105:       assertFalse(node0.isNot());
106:       assertFalse(node0.isScript());
107:       assertEquals((-1), node0.getSourcePosition());
108:       assertFalse(node0.isCall());
109:       assertFalse(node0.isName());
110:       assertFalse(node0.isBreak());
111:       assertFalse(node0.isAdd());
112:       assertFalse(node0.isGetProp());
113:       assertFalse(node0.isComma());
114:       assertFalse(node0.isNew());
115:       assertFalse(node0.isVar());
116:       assertFalse(node0.isWhile());
117:       assertFalse(node0.isDo());
118:       assertFalse(node0.isVoid());
119:       assertFalse(node0.isExprResult());
120:       assertFalse(node0.isTrue());
121:       assertFalse(node0.isOr());
122:       assertFalse(node0.isDelProp());
123:       assertFalse(node0.isNull());
124:       
125:       Node node1 = new Node(39);
126:       assertNotNull(node1);
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(43, Node.IS_CONSTANT_NAME);
130:       assertEquals(29, Node.JSDOC_INFO_PROP);
131:       assertEquals(36, Node.QUOTED_PROP);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
134:       assertEquals(55, Node.INFERRED_FUNCTION);
135:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(37, Node.OPT_ARG_NAME);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(1, Node.DECR_FLAG);
141:       assertEquals(56, Node.CHANGE_TIME);
142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
143:       assertEquals(49, Node.DIRECT_EVAL);
144:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
145:       assertEquals(4095, Node.COLUMN_MASK);
146:       assertEquals(57, Node.REFLECTED_OBJECT);
147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
148:       assertEquals(54, Node.SLASH_V);
149:       assertEquals(57, Node.LAST_PROP);
150:       assertEquals(50, Node.FREE_CALL);
151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
152:       assertEquals(8, Node.FLAG_NO_THROWS);
153:       assertEquals(39, Node.EMPTY_BLOCK);
154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
155:       assertEquals(52, Node.LENGTH);
156:       assertEquals(46, Node.IS_NAMESPACE);
157:       assertEquals(51, Node.STATIC_SOURCE_FILE);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(30, Node.VAR_ARGS_NAME);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertEquals(2, Node.POST_FLAG);
163:       assertFalse(node1.isNull());
164:       assertFalse(node1.isParamList());
165:       assertFalse(node1.isName());
166:       assertFalse(node1.isCall());
167:       assertFalse(node1.isSetterDef());
168:       assertFalse(node1.isVar());
169:       assertFalse(node1.isCatch());
170:       assertEquals(0, node1.getChildCount());
171:       assertFalse(node1.isBlock());
172:       assertFalse(node1.isFunction());
173:       assertFalse(node1.isWhile());
174:       assertFalse(node1.isTry());
175:       assertFalse(node1.isArrayLit());
176:       assertFalse(node1.isStringKey());
177:       assertFalse(node1.isDebugger());
178:       assertEquals((-1), node1.getSourcePosition());
179:       assertFalse(node1.isTypeOf());
180:       assertFalse(node1.isDec());
181:       assertFalse(node1.isDelProp());
182:       assertFalse(node1.isEmpty());
183:       assertFalse(node1.isLabelName());
184:       assertTrue(node1.isNumber());
185:       assertFalse(node1.isGetElem());
186:       assertFalse(node1.isAssignAdd());
187:       assertFalse(node1.isLabel());
188:       assertFalse(node1.isAssign());
189:       assertFalse(node1.hasChildren());
190:       assertFalse(node1.isReturn());
191:       assertFalse(node1.isVoid());
192:       assertFalse(node1.isDefaultCase());
193:       assertFalse(node1.isNew());
194:       assertFalse(node1.isAdd());
195:       assertFalse(node1.isDo());
196:       assertFalse(node1.isExprResult());
197:       assertFalse(node1.isOr());
198:       assertFalse(node1.isTrue());
199:       assertFalse(node1.isComma());
200:       assertFalse(node1.isGetProp());
201:       assertFalse(node1.isBreak());
202:       assertFalse(node1.isInstanceOf());
203:       assertFalse(node1.isFalse());
204:       assertFalse(node1.isThrow());
205:       assertFalse(node1.isHook());
206:       assertFalse(node1.isThis());
207:       assertFalse(node1.isScript());
208:       assertFalse(node1.isString());
209:       assertFalse(node1.isSwitch());
210:       assertFalse(node1.isCase());
211:       assertFalse(node1.isAnd());
212:       assertFalse(node1.isObjectLit());
213:       assertFalse(node1.isNot());
214:       assertEquals((-1), node1.getCharno());
215:       assertFalse(node1.isNE());
216:       assertFalse(node1.isGetterDef());
217:       assertFalse(node1.isIf());
218:       assertEquals((-1), node1.getLineno());
219:       assertFalse(node1.hasOneChild());
220:       assertFalse(node1.isCast());
221:       assertFalse(node1.isContinue());
222:       assertFalse(node1.hasMoreThanOneChild());
223:       assertFalse(node1.isFor());
224:       assertEquals(39, node1.getType());
225:       assertFalse(node1.isRegExp());
226:       assertFalse(node1.isWith());
227:       assertFalse(node1.isInc());
228:       assertFalse(node1.isIn());
229:       assertFalse(node1.equals((Object)node0));
230:       
231:       boolean boolean0 = node0.isEquivalentTo(node1);
232:       assertFalse(boolean0);
233:       assertEquals(15, Node.NO_SIDE_EFFECTS);
234:       assertEquals(57, Node.LAST_PROP);
235:       assertEquals(54, Node.SLASH_V);
236:       assertEquals(49, Node.DIRECT_EVAL);
237:       assertEquals(1, Node.DECR_FLAG);
238:       assertEquals(51, Node.STATIC_SOURCE_FILE);
239:       assertEquals(57, Node.REFLECTED_OBJECT);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
243:       assertEquals(52, Node.LENGTH);
244:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
245:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
246:       assertEquals(56, Node.CHANGE_TIME);
247:       assertEquals(37, Node.OPT_ARG_NAME);
248:       assertEquals(32, Node.INCRDECR_PROP);
249:       assertEquals(48, Node.DIRECTIVES);
250:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
251:       assertEquals(12, Node.COLUMN_BITS);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
254:       assertEquals(43, Node.IS_CONSTANT_NAME);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
257:       assertEquals(53, Node.INPUT_ID);
258:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
261:       assertEquals(8, Node.FLAG_NO_THROWS);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
265:       assertEquals(29, Node.JSDOC_INFO_PROP);
266:       assertEquals(40, Node.ORIGINALNAME_PROP);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertEquals(30, Node.VAR_ARGS_NAME);
269:       assertEquals(53, Node.INPUT_ID);
270:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
271:       assertEquals(43, Node.IS_CONSTANT_NAME);
272:       assertEquals(29, Node.JSDOC_INFO_PROP);
273:       assertEquals(36, Node.QUOTED_PROP);
274:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
275:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
276:       assertEquals(55, Node.INFERRED_FUNCTION);
277:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
278:       assertEquals(32, Node.INCRDECR_PROP);
279:       assertEquals(12, Node.COLUMN_BITS);
280:       assertEquals(37, Node.OPT_ARG_NAME);
281:       assertEquals(48, Node.DIRECTIVES);
282:       assertEquals(1, Node.DECR_FLAG);
283:       assertEquals(56, Node.CHANGE_TIME);
284:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
285:       assertEquals(49, Node.DIRECT_EVAL);
286:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
287:       assertEquals(4095, Node.COLUMN_MASK);
288:       assertEquals(57, Node.REFLECTED_OBJECT);
289:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
290:       assertEquals(54, Node.SLASH_V);
291:       assertEquals(57, Node.LAST_PROP);
292:       assertEquals(50, Node.FREE_CALL);
293:       assertEquals(15, Node.NO_SIDE_EFFECTS);
294:       assertEquals(8, Node.FLAG_NO_THROWS);
295:       assertEquals(39, Node.EMPTY_BLOCK);
296:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
297:       assertEquals(52, Node.LENGTH);
298:       assertEquals(46, Node.IS_NAMESPACE);
299:       assertEquals(51, Node.STATIC_SOURCE_FILE);
300:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
301:       assertEquals(30, Node.VAR_ARGS_NAME);
302:       assertEquals(47, Node.IS_DISPATCHER);
303:       assertEquals(40, Node.ORIGINALNAME_PROP);
304:       assertEquals(2, Node.POST_FLAG);
305:       assertFalse(node0.isArrayLit());
306:       assertFalse(node0.isGetterDef());
307:       assertFalse(node0.isEmpty());
308:       assertFalse(node0.isFunction());
309:       assertFalse(node0.isTry());
310:       assertFalse(node0.isRegExp());
311:       assertTrue(node0.isNumber());
312:       assertFalse(node0.isDefaultCase());
313:       assertFalse(node0.isFor());
314:       assertFalse(node0.isCase());
315:       assertEquals(0, node0.getChildCount());
316:       assertFalse(node0.isString());
317:       assertFalse(node0.isDebugger());
318:       assertEquals((-1), node0.getCharno());
319:       assertFalse(node0.isSwitch());
320:       assertFalse(node0.isParamList());
321:       assertFalse(node0.isStringKey());
322:       assertFalse(node0.isThrow());
323:       assertFalse(node0.isFalse());
324:       assertFalse(node0.isInc());
325:       assertFalse(node0.isSetterDef());
326:       assertFalse(node0.isBlock());
327:       assertFalse(node0.isThis());
328:       assertFalse(node0.isHook());
329:       assertFalse(node0.hasMoreThanOneChild());
330:       assertEquals(39, node0.getType());
331:       assertFalse(node0.isIn());
332:       assertFalse(node0.isWith());
333:       assertFalse(node0.isCatch());
334:       assertFalse(node0.isInstanceOf());
335:       assertEquals((-1), node0.getLineno());
336:       assertFalse(node0.isIf());
337:       assertFalse(node0.isNE());
338:       assertFalse(node0.isGetElem());
339:       assertFalse(node0.isLabelName());
340:       assertFalse(node0.isAssign());
341:       assertFalse(node0.hasOneChild());
342:       assertFalse(node0.isCast());
343:       assertFalse(node0.isTypeOf());
344:       assertFalse(node0.isLabel());
345:       assertFalse(node0.isDec());
346:       assertFalse(node0.hasChildren());
347:       assertFalse(node0.isReturn());
348:       assertFalse(node0.isAssignAdd());
349:       assertFalse(node0.isContinue());
350:       assertFalse(node0.isAnd());
351:       assertFalse(node0.isObjectLit());
352:       assertFalse(node0.isNot());
353:       assertFalse(node0.isScript());
354:       assertEquals((-1), node0.getSourcePosition());
355:       assertFalse(node0.isCall());
356:       assertFalse(node0.isName());
357:       assertFalse(node0.isBreak());
358:       assertFalse(node0.isAdd());
359:       assertFalse(node0.isGetProp());
360:       assertFalse(node0.isComma());
361:       assertFalse(node0.isNew());
362:       assertFalse(node0.isVar());
363:       assertFalse(node0.isWhile());
364:       assertFalse(node0.isDo());
365:       assertFalse(node0.isVoid());
366:       assertFalse(node0.isExprResult());
367:       assertFalse(node0.isTrue());
368:       assertFalse(node0.isOr());
369:       assertFalse(node0.isDelProp());
370:       assertFalse(node0.isNull());
371:       assertFalse(node1.isNull());
372:       assertFalse(node1.isParamList());
373:       assertFalse(node1.isName());
374:       assertFalse(node1.isCall());
375:       assertFalse(node1.isSetterDef());
376:       assertFalse(node1.isVar());
377:       assertFalse(node1.isCatch());
378:       assertEquals(0, node1.getChildCount());
379:       assertFalse(node1.isBlock());
380:       assertFalse(node1.isFunction());
381:       assertFalse(node1.isWhile());
382:       assertFalse(node1.isTry());
383:       assertFalse(node1.isArrayLit());
384:       assertFalse(node1.isStringKey());
385:       assertFalse(node1.isDebugger());
386:       assertEquals((-1), node1.getSourcePosition());
387:       assertFalse(node1.isTypeOf());
388:       assertFalse(node1.isDec());
389:       assertFalse(node1.isDelProp());
390:       assertFalse(node1.isEmpty());
391:       assertFalse(node1.isLabelName());
392:       assertTrue(node1.isNumber());
393:       assertFalse(node1.isGetElem());
394:       assertFalse(node1.isAssignAdd());
395:       assertFalse(node1.isLabel());
396:       assertFalse(node1.isAssign());
397:       assertFalse(node1.hasChildren());
398:       assertFalse(node1.isReturn());
399:       assertFalse(node1.isVoid());
400:       assertFalse(node1.isDefaultCase());
401:       assertFalse(node1.isNew());
402:       assertFalse(node1.isAdd());
403:       assertFalse(node1.isDo());
404:       assertFalse(node1.isExprResult());
405:       assertFalse(node1.isOr());
406:       assertFalse(node1.isTrue());
407:       assertFalse(node1.isComma());
408:       assertFalse(node1.isGetProp());
409:       assertFalse(node1.isBreak());
410:       assertFalse(node1.isInstanceOf());
411:       assertFalse(node1.isFalse());
412:       assertFalse(node1.isThrow());
413:       assertFalse(node1.isHook());
414:       assertFalse(node1.isThis());
415:       assertFalse(node1.isScript());
416:       assertFalse(node1.isString());
417:       assertFalse(node1.isSwitch());
418:       assertFalse(node1.isCase());
419:       assertFalse(node1.isAnd());
420:       assertFalse(node1.isObjectLit());
421:       assertFalse(node1.isNot());
422:       assertEquals((-1), node1.getCharno());
423:       assertFalse(node1.isNE());
424:       assertFalse(node1.isGetterDef());
425:       assertFalse(node1.isIf());
426:       assertEquals((-1), node1.getLineno());
427:       assertFalse(node1.hasOneChild());
428:       assertFalse(node1.isCast());
429:       assertFalse(node1.isContinue());
430:       assertFalse(node1.hasMoreThanOneChild());
431:       assertFalse(node1.isFor());
432:       assertEquals(39, node1.getType());
433:       assertFalse(node1.isRegExp());
434:       assertFalse(node1.isWith());
435:       assertFalse(node1.isInc());
436:       assertFalse(node1.isIn());
437:       assertFalse(node0.equals((Object)node1));
438:       assertFalse(node1.equals((Object)node0));
439:       
440:       Iterable<Node> iterable0 = node1.children();
441:       assertNotNull(iterable0);
442:       assertEquals(53, Node.INPUT_ID);
443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
444:       assertEquals(43, Node.IS_CONSTANT_NAME);
445:       assertEquals(29, Node.JSDOC_INFO_PROP);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
448:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
449:       assertEquals(55, Node.INFERRED_FUNCTION);
450:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
451:       assertEquals(32, Node.INCRDECR_PROP);
452:       assertEquals(12, Node.COLUMN_BITS);
453:       assertEquals(37, Node.OPT_ARG_NAME);
454:       assertEquals(48, Node.DIRECTIVES);
455:       assertEquals(1, Node.DECR_FLAG);
456:       assertEquals(56, Node.CHANGE_TIME);
457:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
458:       assertEquals(49, Node.DIRECT_EVAL);
459:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
460:       assertEquals(4095, Node.COLUMN_MASK);
461:       assertEquals(57, Node.REFLECTED_OBJECT);
462:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
463:       assertEquals(54, Node.SLASH_V);
464:       assertEquals(57, Node.LAST_PROP);
465:       assertEquals(50, Node.FREE_CALL);
466:       assertEquals(15, Node.NO_SIDE_EFFECTS);
467:       assertEquals(8, Node.FLAG_NO_THROWS);
468:       assertEquals(39, Node.EMPTY_BLOCK);
469:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
470:       assertEquals(52, Node.LENGTH);
471:       assertEquals(46, Node.IS_NAMESPACE);
472:       assertEquals(51, Node.STATIC_SOURCE_FILE);
473:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
474:       assertEquals(30, Node.VAR_ARGS_NAME);
475:       assertEquals(47, Node.IS_DISPATCHER);
476:       assertEquals(40, Node.ORIGINALNAME_PROP);
477:       assertEquals(2, Node.POST_FLAG);
478:       assertFalse(node1.isNull());
479:       assertFalse(node1.isParamList());
480:       assertFalse(node1.isName());
481:       assertFalse(node1.isCall());
482:       assertFalse(node1.isSetterDef());
483:       assertFalse(node1.isVar());
484:       assertFalse(node1.isCatch());
485:       assertEquals(0, node1.getChildCount());
486:       assertFalse(node1.isBlock());
487:       assertFalse(node1.isFunction());
488:       assertFalse(node1.isWhile());
489:       assertFalse(node1.isTry());
490:       assertFalse(node1.isArrayLit());
491:       assertFalse(node1.isStringKey());
492:       assertFalse(node1.isDebugger());
493:       assertEquals((-1), node1.getSourcePosition());
494:       assertFalse(node1.isTypeOf());
495:       assertFalse(node1.isDec());
496:       assertFalse(node1.isDelProp());
497:       assertFalse(node1.isEmpty());
498:       assertFalse(node1.isLabelName());
499:       assertTrue(node1.isNumber());
500:       assertFalse(node1.isGetElem());
501:       assertFalse(node1.isAssignAdd());
502:       assertFalse(node1.isLabel());
503:       assertFalse(node1.isAssign());
504:       assertFalse(node1.hasChildren());
505:       assertFalse(node1.isReturn());
506:       assertFalse(node1.isVoid());
507:       assertFalse(node1.isDefaultCase());
508:       assertFalse(node1.isNew());
509:       assertFalse(node1.isAdd());
510:       assertFalse(node1.isDo());
511:       assertFalse(node1.isExprResult());
512:       assertFalse(node1.isOr());
513:       assertFalse(node1.isTrue());
514:       assertFalse(node1.isComma());
515:       assertFalse(node1.isGetProp());
516:       assertFalse(node1.isBreak());
517:       assertFalse(node1.isInstanceOf());
518:       assertFalse(node1.isFalse());
519:       assertFalse(node1.isThrow());
520:       assertFalse(node1.isHook());
521:       assertFalse(node1.isThis());
522:       assertFalse(node1.isScript());
523:       assertFalse(node1.isString());
524:       assertFalse(node1.isSwitch());
525:       assertFalse(node1.isCase());
526:       assertFalse(node1.isAnd());
527:       assertFalse(node1.isObjectLit());
528:       assertFalse(node1.isNot());
529:       assertEquals((-1), node1.getCharno());
530:       assertFalse(node1.isNE());
531:       assertFalse(node1.isGetterDef());
532:       assertFalse(node1.isIf());
533:       assertEquals((-1), node1.getLineno());
534:       assertFalse(node1.hasOneChild());
535:       assertFalse(node1.isCast());
536:       assertFalse(node1.isContinue());
537:       assertFalse(node1.hasMoreThanOneChild());
538:       assertFalse(node1.isFor());
539:       assertEquals(39, node1.getType());
540:       assertFalse(node1.isRegExp());
541:       assertFalse(node1.isWith());
542:       assertFalse(node1.isInc());
543:       assertFalse(node1.isIn());
544:       assertFalse(iterable0.contains(node1));
545:       assertFalse(node1.equals((Object)node0));
546:   }
547: }
RegularFileObject[/tmp/EvoSuite_249_1628160487001/com/google/javascript/rhino/Node_249_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:48:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_249_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_249_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_249_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.common.base.Preconditions",
262:       "com.google.javascript.rhino.JSDocInfo",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.Node$AncestorIterable$1",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.AbstractMultimap$Values",
346:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
347:       "com.google.common.collect.AbstractMapBasedMultimap$1",
348:       "com.google.common.collect.Multimaps$Entries",
349:       "com.google.common.collect.AbstractMultimap$Entries",
350:       "com.google.common.collect.AbstractMapBasedMultimap$2",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
356:       "com.google.javascript.rhino.JSDocInfo$Visibility",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.Platform",
359:       "com.google.javascript.rhino.jstype.TemplatizedType",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.NamespaceType",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.Iterators$12"
373:     );
374:   }
375: }

[MASTER] 10:48:07.048 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) 121);
assertNotNull(node0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());

Node node1 = new Node(39);
assertNotNull(node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertTrue(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node0.isEquivalentTo(node1);
assertFalse(boolean0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertTrue(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertTrue(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(iterable0.contains(node1));
assertFalse(node1.equals((Object)node0));


[MASTER] 10:48:07.101 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_250_1628160487049/com/google/javascript/rhino/Node_250_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_250_1628160487049/com/google/javascript/rhino/Node_250_tmp__ESTest_scaffolding.java]]
[MASTER] 10:48:07.101 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:07.101 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:07.102 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 337
[MASTER] 10:48:07.102 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_250_1628160487049/com/google/javascript/rhino/Node_250_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:48:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_250_tmp__ESTest extends Node_250_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((-1.0));
21:       assertNotNull(node0);
22:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
23:       assertEquals(8, Node.FLAG_NO_THROWS);
24:       assertEquals(39, Node.EMPTY_BLOCK);
25:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
26:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
27:       assertEquals(50, Node.FREE_CALL);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(57, Node.REFLECTED_OBJECT);
30:       assertEquals(4095, Node.COLUMN_MASK);
31:       assertEquals(48, Node.DIRECTIVES);
32:       assertEquals(57, Node.LAST_PROP);
33:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
34:       assertEquals(30, Node.VAR_ARGS_NAME);
35:       assertEquals(52, Node.LENGTH);
36:       assertEquals(36, Node.QUOTED_PROP);
37:       assertEquals(55, Node.INFERRED_FUNCTION);
38:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
39:       assertEquals(29, Node.JSDOC_INFO_PROP);
40:       assertEquals(53, Node.INPUT_ID);
41:       assertEquals(15, Node.NO_SIDE_EFFECTS);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(46, Node.IS_NAMESPACE);
46:       assertEquals(47, Node.IS_DISPATCHER);
47:       assertEquals(51, Node.STATIC_SOURCE_FILE);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(49, Node.DIRECT_EVAL);
50:       assertEquals(37, Node.OPT_ARG_NAME);
51:       assertEquals(54, Node.SLASH_V);
52:       assertEquals(43, Node.IS_CONSTANT_NAME);
53:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
54:       assertEquals(12, Node.COLUMN_BITS);
55:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
56:       assertEquals(32, Node.INCRDECR_PROP);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertFalse(node0.isCase());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isInc());
61:       assertTrue(node0.isNumber());
62:       assertEquals((-1), node0.getCharno());
63:       assertFalse(node0.isIn());
64:       assertFalse(node0.isGetterDef());
65:       assertFalse(node0.isString());
66:       assertFalse(node0.isFor());
67:       assertFalse(node0.isBreak());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isHook());
70:       assertFalse(node0.isDelProp());
71:       assertFalse(node0.isNE());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isComma());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isInstanceOf());
76:       assertFalse(node0.isRegExp());
77:       assertFalse(node0.isDefaultCase());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isTrue());
80:       assertFalse(node0.isScript());
81:       assertFalse(node0.isStringKey());
82:       assertFalse(node0.isEmpty());
83:       assertFalse(node0.isLabelName());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isParamList());
87:       assertFalse(node0.isLabel());
88:       assertEquals(0, node0.getChildCount());
89:       assertEquals(39, node0.getType());
90:       assertFalse(node0.isDo());
91:       assertFalse(node0.isWhile());
92:       assertFalse(node0.isAssignAdd());
93:       assertFalse(node0.isNew());
94:       assertFalse(node0.isAdd());
95:       assertFalse(node0.isOr());
96:       assertEquals((-1), node0.getSourcePosition());
97:       assertFalse(node0.isGetElem());
98:       assertFalse(node0.isCall());
99:       assertFalse(node0.isName());
100:       assertFalse(node0.isAssign());
101:       assertFalse(node0.hasChildren());
102:       assertFalse(node0.hasOneChild());
103:       assertFalse(node0.isNull());
104:       assertFalse(node0.isExprResult());
105:       assertFalse(node0.isBlock());
106:       assertEquals((-1), node0.getLineno());
107:       assertFalse(node0.isReturn());
108:       assertFalse(node0.isDec());
109:       assertFalse(node0.isTypeOf());
110:       assertFalse(node0.isCatch());
111:       assertFalse(node0.hasMoreThanOneChild());
112:       assertFalse(node0.isWith());
113:       assertFalse(node0.isNot());
114:       assertFalse(node0.isObjectLit());
115:       assertFalse(node0.isAnd());
116:       assertFalse(node0.isGetProp());
117:       assertFalse(node0.isSetterDef());
118:       assertFalse(node0.isDebugger());
119:       assertFalse(node0.isFalse());
120:       assertFalse(node0.isThrow());
121:       assertFalse(node0.isFunction());
122:       assertFalse(node0.isCast());
123:       assertFalse(node0.isContinue());
124:       
125:       Node node1 = Node.newNumber(1.2, 43, 48);
126:       assertNotNull(node1);
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(43, Node.IS_CONSTANT_NAME);
130:       assertEquals(47, Node.IS_DISPATCHER);
131:       assertEquals(2, Node.POST_FLAG);
132:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
133:       assertEquals(4095, Node.COLUMN_MASK);
134:       assertEquals(32, Node.INCRDECR_PROP);
135:       assertEquals(46, Node.IS_NAMESPACE);
136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(1, Node.DECR_FLAG);
139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
140:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
141:       assertEquals(50, Node.FREE_CALL);
142:       assertEquals(57, Node.REFLECTED_OBJECT);
143:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
144:       assertEquals(54, Node.SLASH_V);
145:       assertEquals(57, Node.LAST_PROP);
146:       assertEquals(30, Node.VAR_ARGS_NAME);
147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
148:       assertEquals(40, Node.ORIGINALNAME_PROP);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
152:       assertEquals(49, Node.DIRECT_EVAL);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(29, Node.JSDOC_INFO_PROP);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
159:       assertEquals(55, Node.INFERRED_FUNCTION);
160:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
161:       assertEquals(52, Node.LENGTH);
162:       assertEquals(8, Node.FLAG_NO_THROWS);
163:       assertNotSame(node1, node0);
164:       assertFalse(node1.isComma());
165:       assertFalse(node1.isBreak());
166:       assertFalse(node1.isGetProp());
167:       assertFalse(node1.isAnd());
168:       assertFalse(node1.isObjectLit());
169:       assertFalse(node1.isNot());
170:       assertFalse(node1.isSwitch());
171:       assertFalse(node1.isInc());
172:       assertFalse(node1.isCast());
173:       assertEquals(43, node1.getLineno());
174:       assertFalse(node1.isFalse());
175:       assertFalse(node1.isThrow());
176:       assertEquals(48, node1.getCharno());
177:       assertFalse(node1.isNE());
178:       assertFalse(node1.isGetterDef());
179:       assertFalse(node1.isIf());
180:       assertFalse(node1.isLabelName());
181:       assertFalse(node1.isArrayLit());
182:       assertFalse(node1.isIn());
183:       assertFalse(node1.isRegExp());
184:       assertFalse(node1.isScript());
185:       assertFalse(node1.isWith());
186:       assertFalse(node1.isTry());
187:       assertFalse(node1.isCase());
188:       assertFalse(node1.isCatch());
189:       assertFalse(node1.hasOneChild());
190:       assertFalse(node1.isInstanceOf());
191:       assertFalse(node1.hasMoreThanOneChild());
192:       assertFalse(node1.isFor());
193:       assertEquals(39, node1.getType());
194:       assertFalse(node1.isBlock());
195:       assertFalse(node1.isHook());
196:       assertFalse(node1.isThis());
197:       assertFalse(node1.isNull());
198:       assertFalse(node1.isParamList());
199:       assertFalse(node1.isName());
200:       assertFalse(node1.isCall());
201:       assertFalse(node1.isSetterDef());
202:       assertEquals(176176, node1.getSourcePosition());
203:       assertFalse(node1.isStringKey());
204:       assertFalse(node1.isFunction());
205:       assertFalse(node1.isDefaultCase());
206:       assertFalse(node1.isAdd());
207:       assertFalse(node1.isDo());
208:       assertFalse(node1.isNew());
209:       assertFalse(node1.isVar());
210:       assertEquals(0, node1.getChildCount());
211:       assertFalse(node1.isContinue());
212:       assertFalse(node1.isAssignAdd());
213:       assertFalse(node1.isLabel());
214:       assertFalse(node1.isTypeOf());
215:       assertFalse(node1.isDec());
216:       assertFalse(node1.isDelProp());
217:       assertFalse(node1.isEmpty());
218:       assertTrue(node1.isNumber());
219:       assertFalse(node1.isGetElem());
220:       assertFalse(node1.isOr());
221:       assertFalse(node1.isDebugger());
222:       assertFalse(node1.isTrue());
223:       assertFalse(node1.isVoid());
224:       assertFalse(node1.isString());
225:       assertFalse(node1.isExprResult());
226:       assertFalse(node1.isAssign());
227:       assertFalse(node1.isWhile());
228:       assertFalse(node1.hasChildren());
229:       assertFalse(node1.isReturn());
230:       assertFalse(node1.equals((Object)node0));
231:       
232:       Iterable<Node> iterable0 = node0.children();
233:       assertNotNull(iterable0);
234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
235:       assertEquals(8, Node.FLAG_NO_THROWS);
236:       assertEquals(39, Node.EMPTY_BLOCK);
237:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
238:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
239:       assertEquals(50, Node.FREE_CALL);
240:       assertEquals(40, Node.ORIGINALNAME_PROP);
241:       assertEquals(57, Node.REFLECTED_OBJECT);
242:       assertEquals(4095, Node.COLUMN_MASK);
243:       assertEquals(48, Node.DIRECTIVES);
244:       assertEquals(57, Node.LAST_PROP);
245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
246:       assertEquals(30, Node.VAR_ARGS_NAME);
247:       assertEquals(52, Node.LENGTH);
248:       assertEquals(36, Node.QUOTED_PROP);
249:       assertEquals(55, Node.INFERRED_FUNCTION);
250:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
251:       assertEquals(29, Node.JSDOC_INFO_PROP);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
256:       assertEquals(56, Node.CHANGE_TIME);
257:       assertEquals(46, Node.IS_NAMESPACE);
258:       assertEquals(47, Node.IS_DISPATCHER);
259:       assertEquals(51, Node.STATIC_SOURCE_FILE);
260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
261:       assertEquals(49, Node.DIRECT_EVAL);
262:       assertEquals(37, Node.OPT_ARG_NAME);
263:       assertEquals(54, Node.SLASH_V);
264:       assertEquals(43, Node.IS_CONSTANT_NAME);
265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
268:       assertEquals(32, Node.INCRDECR_PROP);
269:       assertEquals(1, Node.DECR_FLAG);
270:       assertNotSame(node0, node1);
271:       assertFalse(node0.isCase());
272:       assertFalse(node0.isSwitch());
273:       assertFalse(node0.isInc());
274:       assertTrue(node0.isNumber());
275:       assertEquals((-1), node0.getCharno());
276:       assertFalse(node0.isIn());
277:       assertFalse(node0.isGetterDef());
278:       assertFalse(node0.isString());
279:       assertFalse(node0.isFor());
280:       assertFalse(node0.isBreak());
281:       assertFalse(node0.isIf());
282:       assertFalse(node0.isHook());
283:       assertFalse(node0.isDelProp());
284:       assertFalse(node0.isNE());
285:       assertFalse(node0.isVoid());
286:       assertFalse(node0.isComma());
287:       assertFalse(node0.isThis());
288:       assertFalse(node0.isInstanceOf());
289:       assertFalse(node0.isRegExp());
290:       assertFalse(node0.isDefaultCase());
291:       assertFalse(node0.isTry());
292:       assertFalse(node0.isTrue());
293:       assertFalse(node0.isScript());
294:       assertFalse(node0.isStringKey());
295:       assertFalse(node0.isEmpty());
296:       assertFalse(node0.isLabelName());
297:       assertFalse(node0.isArrayLit());
298:       assertFalse(node0.isVar());
299:       assertFalse(node0.isParamList());
300:       assertFalse(node0.isLabel());
301:       assertEquals(0, node0.getChildCount());
302:       assertEquals(39, node0.getType());
303:       assertFalse(node0.isDo());
304:       assertFalse(node0.isWhile());
305:       assertFalse(node0.isAssignAdd());
306:       assertFalse(node0.isNew());
307:       assertFalse(node0.isAdd());
308:       assertFalse(node0.isOr());
309:       assertEquals((-1), node0.getSourcePosition());
310:       assertFalse(node0.isGetElem());
311:       assertFalse(node0.isCall());
312:       assertFalse(node0.isName());
313:       assertFalse(node0.isAssign());
314:       assertFalse(node0.hasChildren());
315:       assertFalse(node0.hasOneChild());
316:       assertFalse(node0.isNull());
317:       assertFalse(node0.isExprResult());
318:       assertFalse(node0.isBlock());
319:       assertEquals((-1), node0.getLineno());
320:       assertFalse(node0.isReturn());
321:       assertFalse(node0.isDec());
322:       assertFalse(node0.isTypeOf());
323:       assertFalse(node0.isCatch());
324:       assertFalse(node0.hasMoreThanOneChild());
325:       assertFalse(node0.isWith());
326:       assertFalse(node0.isNot());
327:       assertFalse(node0.isObjectLit());
328:       assertFalse(node0.isAnd());
329:       assertFalse(node0.isGetProp());
330:       assertFalse(node0.isSetterDef());
331:       assertFalse(node0.isDebugger());
332:       assertFalse(node0.isFalse());
333:       assertFalse(node0.isThrow());
334:       assertFalse(node0.isFunction());
335:       assertFalse(node0.isCast());
336:       assertFalse(node0.isContinue());
337:       assertFalse(iterable0.contains(node0));
338:       assertFalse(node0.equals((Object)node1));
339:       
340:       boolean boolean0 = node1.isOnlyModifiesThisCall();
341:       assertFalse(boolean0);
342:       assertEquals(53, Node.INPUT_ID);
343:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
344:       assertEquals(43, Node.IS_CONSTANT_NAME);
345:       assertEquals(47, Node.IS_DISPATCHER);
346:       assertEquals(2, Node.POST_FLAG);
347:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
348:       assertEquals(4095, Node.COLUMN_MASK);
349:       assertEquals(32, Node.INCRDECR_PROP);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(51, Node.STATIC_SOURCE_FILE);
352:       assertEquals(12, Node.COLUMN_BITS);
353:       assertEquals(1, Node.DECR_FLAG);
354:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
355:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
356:       assertEquals(50, Node.FREE_CALL);
357:       assertEquals(57, Node.REFLECTED_OBJECT);
358:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
359:       assertEquals(54, Node.SLASH_V);
360:       assertEquals(57, Node.LAST_PROP);
361:       assertEquals(30, Node.VAR_ARGS_NAME);
362:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
363:       assertEquals(40, Node.ORIGINALNAME_PROP);
364:       assertEquals(37, Node.OPT_ARG_NAME);
365:       assertEquals(48, Node.DIRECTIVES);
366:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(56, Node.CHANGE_TIME);
369:       assertEquals(29, Node.JSDOC_INFO_PROP);
370:       assertEquals(36, Node.QUOTED_PROP);
371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
372:       assertEquals(39, Node.EMPTY_BLOCK);
373:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
374:       assertEquals(55, Node.INFERRED_FUNCTION);
375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
376:       assertEquals(52, Node.LENGTH);
377:       assertEquals(8, Node.FLAG_NO_THROWS);
378:       assertNotSame(node1, node0);
379:       assertFalse(node1.isComma());
380:       assertFalse(node1.isBreak());
381:       assertFalse(node1.isGetProp());
382:       assertFalse(node1.isAnd());
383:       assertFalse(node1.isObjectLit());
384:       assertFalse(node1.isNot());
385:       assertFalse(node1.isSwitch());
386:       assertFalse(node1.isInc());
387:       assertFalse(node1.isCast());
388:       assertEquals(43, node1.getLineno());
389:       assertFalse(node1.isFalse());
390:       assertFalse(node1.isThrow());
391:       assertEquals(48, node1.getCharno());
392:       assertFalse(node1.isNE());
393:       assertFalse(node1.isGetterDef());
394:       assertFalse(node1.isIf());
395:       assertFalse(node1.isLabelName());
396:       assertFalse(node1.isArrayLit());
397:       assertFalse(node1.isIn());
398:       assertFalse(node1.isRegExp());
399:       assertFalse(node1.isScript());
400:       assertFalse(node1.isWith());
401:       assertFalse(node1.isTry());
402:       assertFalse(node1.isCase());
403:       assertFalse(node1.isCatch());
404:       assertFalse(node1.hasOneChild());
405:       assertFalse(node1.isInstanceOf());
406:       assertFalse(node1.hasMoreThanOneChild());
407:       assertFalse(node1.isFor());
408:       assertEquals(39, node1.getType());
409:       assertFalse(node1.isBlock());
410:       assertFalse(node1.isHook());
411:       assertFalse(node1.isThis());
412:       assertFalse(node1.isNull());
413:       assertFalse(node1.isParamList());
414:       assertFalse(node1.isName());
415:       assertFalse(node1.isCall());
416:       assertFalse(node1.isSetterDef());
417:       assertEquals(176176, node1.getSourcePosition());
418:       assertFalse(node1.isStringKey());
419:       assertFalse(node1.isFunction());
420:       assertFalse(node1.isDefaultCase());
421:       assertFalse(node1.isAdd());
422:       assertFalse(node1.isDo());
423:       assertFalse(node1.isNew());
424:       assertFalse(node1.isVar());
425:       assertEquals(0, node1.getChildCount());
426:       assertFalse(node1.isContinue());
427:       assertFalse(node1.isAssignAdd());
428:       assertFalse(node1.isLabel());
429:       assertFalse(node1.isTypeOf());
430:       assertFalse(node1.isDec());
431:       assertFalse(node1.isDelProp());
432:       assertFalse(node1.isEmpty());
433:       assertTrue(node1.isNumber());
434:       assertFalse(node1.isGetElem());
435:       assertFalse(node1.isOr());
436:       assertFalse(node1.isDebugger());
437:       assertFalse(node1.isTrue());
438:       assertFalse(node1.isVoid());
439:       assertFalse(node1.isString());
440:       assertFalse(node1.isExprResult());
441:       assertFalse(node1.isAssign());
442:       assertFalse(node1.isWhile());
443:       assertFalse(node1.hasChildren());
444:       assertFalse(node1.isReturn());
445:       assertFalse(node1.equals((Object)node0));
446:       
447:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
448:       assertNotNull(node_NodeMismatch0);
449:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
450:       assertEquals(8, Node.FLAG_NO_THROWS);
451:       assertEquals(39, Node.EMPTY_BLOCK);
452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
454:       assertEquals(50, Node.FREE_CALL);
455:       assertEquals(40, Node.ORIGINALNAME_PROP);
456:       assertEquals(57, Node.REFLECTED_OBJECT);
457:       assertEquals(4095, Node.COLUMN_MASK);
458:       assertEquals(48, Node.DIRECTIVES);
459:       assertEquals(57, Node.LAST_PROP);
460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
461:       assertEquals(30, Node.VAR_ARGS_NAME);
462:       assertEquals(52, Node.LENGTH);
463:       assertEquals(36, Node.QUOTED_PROP);
464:       assertEquals(55, Node.INFERRED_FUNCTION);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(29, Node.JSDOC_INFO_PROP);
467:       assertEquals(53, Node.INPUT_ID);
468:       assertEquals(15, Node.NO_SIDE_EFFECTS);
469:       assertEquals(2, Node.POST_FLAG);
470:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
471:       assertEquals(56, Node.CHANGE_TIME);
472:       assertEquals(46, Node.IS_NAMESPACE);
473:       assertEquals(47, Node.IS_DISPATCHER);
474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
475:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
476:       assertEquals(49, Node.DIRECT_EVAL);
477:       assertEquals(37, Node.OPT_ARG_NAME);
478:       assertEquals(54, Node.SLASH_V);
479:       assertEquals(43, Node.IS_CONSTANT_NAME);
480:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
481:       assertEquals(12, Node.COLUMN_BITS);
482:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
483:       assertEquals(32, Node.INCRDECR_PROP);
484:       assertEquals(1, Node.DECR_FLAG);
485:       assertEquals(53, Node.INPUT_ID);
486:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
487:       assertEquals(43, Node.IS_CONSTANT_NAME);
488:       assertEquals(47, Node.IS_DISPATCHER);
489:       assertEquals(2, Node.POST_FLAG);
490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
491:       assertEquals(4095, Node.COLUMN_MASK);
492:       assertEquals(32, Node.INCRDECR_PROP);
493:       assertEquals(46, Node.IS_NAMESPACE);
494:       assertEquals(51, Node.STATIC_SOURCE_FILE);
495:       assertEquals(12, Node.COLUMN_BITS);
496:       assertEquals(1, Node.DECR_FLAG);
497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
498:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
499:       assertEquals(50, Node.FREE_CALL);
500:       assertEquals(57, Node.REFLECTED_OBJECT);
501:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
502:       assertEquals(54, Node.SLASH_V);
503:       assertEquals(57, Node.LAST_PROP);
504:       assertEquals(30, Node.VAR_ARGS_NAME);
505:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
506:       assertEquals(40, Node.ORIGINALNAME_PROP);
507:       assertEquals(37, Node.OPT_ARG_NAME);
508:       assertEquals(48, Node.DIRECTIVES);
509:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
510:       assertEquals(49, Node.DIRECT_EVAL);
511:       assertEquals(56, Node.CHANGE_TIME);
512:       assertEquals(29, Node.JSDOC_INFO_PROP);
513:       assertEquals(36, Node.QUOTED_PROP);
514:       assertEquals(15, Node.NO_SIDE_EFFECTS);
515:       assertEquals(39, Node.EMPTY_BLOCK);
516:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
517:       assertEquals(55, Node.INFERRED_FUNCTION);
518:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
519:       assertEquals(52, Node.LENGTH);
520:       assertEquals(8, Node.FLAG_NO_THROWS);
521:       assertNotSame(node0, node1);
522:       assertNotSame(node1, node0);
523:       assertFalse(node0.isCase());
524:       assertFalse(node0.isSwitch());
525:       assertFalse(node0.isInc());
526:       assertTrue(node0.isNumber());
527:       assertEquals((-1), node0.getCharno());
528:       assertFalse(node0.isIn());
529:       assertFalse(node0.isGetterDef());
530:       assertFalse(node0.isString());
531:       assertFalse(node0.isFor());
532:       assertFalse(node0.isBreak());
533:       assertFalse(node0.isIf());
534:       assertFalse(node0.isHook());
535:       assertFalse(node0.isDelProp());
536:       assertFalse(node0.isNE());
537:       assertFalse(node0.isVoid());
538:       assertFalse(node0.isComma());
539:       assertFalse(node0.isThis());
540:       assertFalse(node0.isInstanceOf());
541:       assertFalse(node0.isRegExp());
542:       assertFalse(node0.isDefaultCase());
543:       assertFalse(node0.isTry());
544:       assertFalse(node0.isTrue());
545:       assertFalse(node0.isScript());
546:       assertFalse(node0.isStringKey());
547:       assertFalse(node0.isEmpty());
548:       assertFalse(node0.isLabelName());
549:       assertFalse(node0.isArrayLit());
550:       assertFalse(node0.isVar());
551:       assertFalse(node0.isParamList());
552:       assertFalse(node0.isLabel());
553:       assertEquals(0, node0.getChildCount());
554:       assertEquals(39, node0.getType());
555:       assertFalse(node0.isDo());
556:       assertFalse(node0.isWhile());
557:       assertFalse(node0.isAssignAdd());
558:       assertFalse(node0.isNew());
559:       assertFalse(node0.isAdd());
560:       assertFalse(node0.isOr());
561:       assertEquals((-1), node0.getSourcePosition());
562:       assertFalse(node0.isGetElem());
563:       assertFalse(node0.isCall());
564:       assertFalse(node0.isName());
565:       assertFalse(node0.isAssign());
566:       assertFalse(node0.hasChildren());
567:       assertFalse(node0.hasOneChild());
568:       assertFalse(node0.isNull());
569:       assertFalse(node0.isExprResult());
570:       assertFalse(node0.isBlock());
571:       assertEquals((-1), node0.getLineno());
572:       assertFalse(node0.isReturn());
573:       assertFalse(node0.isDec());
574:       assertFalse(node0.isTypeOf());
575:       assertFalse(node0.isCatch());
576:       assertFalse(node0.hasMoreThanOneChild());
577:       assertFalse(node0.isWith());
578:       assertFalse(node0.isNot());
579:       assertFalse(node0.isObjectLit());
580:       assertFalse(node0.isAnd());
581:       assertFalse(node0.isGetProp());
582:       assertFalse(node0.isSetterDef());
583:       assertFalse(node0.isDebugger());
584:       assertFalse(node0.isFalse());
585:       assertFalse(node0.isThrow());
586:       assertFalse(node0.isFunction());
587:       assertFalse(node0.isCast());
588:       assertFalse(node0.isContinue());
589:       assertFalse(node1.isComma());
590:       assertFalse(node1.isBreak());
591:       assertFalse(node1.isGetProp());
592:       assertFalse(node1.isAnd());
593:       assertFalse(node1.isObjectLit());
594:       assertFalse(node1.isNot());
595:       assertFalse(node1.isSwitch());
596:       assertFalse(node1.isInc());
597:       assertFalse(node1.isCast());
598:       assertEquals(43, node1.getLineno());
599:       assertFalse(node1.isFalse());
600:       assertFalse(node1.isThrow());
601:       assertEquals(48, node1.getCharno());
602:       assertFalse(node1.isNE());
603:       assertFalse(node1.isGetterDef());
604:       assertFalse(node1.isIf());
605:       assertFalse(node1.isLabelName());
606:       assertFalse(node1.isArrayLit());
607:       assertFalse(node1.isIn());
608:       assertFalse(node1.isRegExp());
609:       assertFalse(node1.isScript());
610:       assertFalse(node1.isWith());
611:       assertFalse(node1.isTry());
612:       assertFalse(node1.isCase());
613:       assertFalse(node1.isCatch());
614:       assertFalse(node1.hasOneChild());
615:       assertFalse(node1.isInstanceOf());
616:       assertFalse(node1.hasMoreThanOneChild());
617:       assertFalse(node1.isFor());
618:       assertEquals(39, node1.getType());
619:       assertFalse(node1.isBlock());
620:       assertFalse(node1.isHook());
621:       assertFalse(node1.isThis());
622:       assertFalse(node1.isNull());
623:       assertFalse(node1.isParamList());
624:       assertFalse(node1.isName());
625:       assertFalse(node1.isCall());
626:       assertFalse(node1.isSetterDef());
627:       assertEquals(176176, node1.getSourcePosition());
628:       assertFalse(node1.isStringKey());
629:       assertFalse(node1.isFunction());
630:       assertFalse(node1.isDefaultCase());
631:       assertFalse(node1.isAdd());
632:       assertFalse(node1.isDo());
633:       assertFalse(node1.isNew());
634:       assertFalse(node1.isVar());
635:       assertEquals(0, node1.getChildCount());
636:       assertFalse(node1.isContinue());
637:       assertFalse(node1.isAssignAdd());
638:       assertFalse(node1.isLabel());
639:       assertFalse(node1.isTypeOf());
640:       assertFalse(node1.isDec());
641:       assertFalse(node1.isDelProp());
642:       assertFalse(node1.isEmpty());
643:       assertTrue(node1.isNumber());
644:       assertFalse(node1.isGetElem());
645:       assertFalse(node1.isOr());
646:       assertFalse(node1.isDebugger());
647:       assertFalse(node1.isTrue());
648:       assertFalse(node1.isVoid());
649:       assertFalse(node1.isString());
650:       assertFalse(node1.isExprResult());
651:       assertFalse(node1.isAssign());
652:       assertFalse(node1.isWhile());
653:       assertFalse(node1.hasChildren());
654:       assertFalse(node1.isReturn());
655:       assertFalse(node0.equals((Object)node1));
656:       assertFalse(node1.equals((Object)node0));
657:       
658:       boolean boolean1 = node0.isGetElem();
659:       assertFalse(boolean1);
660:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
661:       assertEquals(8, Node.FLAG_NO_THROWS);
662:       assertEquals(39, Node.EMPTY_BLOCK);
663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
664:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
665:       assertEquals(50, Node.FREE_CALL);
666:       assertEquals(40, Node.ORIGINALNAME_PROP);
667:       assertEquals(57, Node.REFLECTED_OBJECT);
668:       assertEquals(4095, Node.COLUMN_MASK);
669:       assertEquals(48, Node.DIRECTIVES);
670:       assertEquals(57, Node.LAST_PROP);
671:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(52, Node.LENGTH);
674:       assertEquals(36, Node.QUOTED_PROP);
675:       assertEquals(55, Node.INFERRED_FUNCTION);
676:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(53, Node.INPUT_ID);
679:       assertEquals(15, Node.NO_SIDE_EFFECTS);
680:       assertEquals(2, Node.POST_FLAG);
681:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
682:       assertEquals(56, Node.CHANGE_TIME);
683:       assertEquals(46, Node.IS_NAMESPACE);
684:       assertEquals(47, Node.IS_DISPATCHER);
685:       assertEquals(51, Node.STATIC_SOURCE_FILE);
686:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertEquals(37, Node.OPT_ARG_NAME);
689:       assertEquals(54, Node.SLASH_V);
690:       assertEquals(43, Node.IS_CONSTANT_NAME);
691:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
692:       assertEquals(12, Node.COLUMN_BITS);
693:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
694:       assertEquals(32, Node.INCRDECR_PROP);
695:       assertEquals(1, Node.DECR_FLAG);
696:       assertNotSame(node0, node1);
697:       assertFalse(node0.isCase());
698:       assertFalse(node0.isSwitch());
699:       assertFalse(node0.isInc());
700:       assertTrue(node0.isNumber());
701:       assertEquals((-1), node0.getCharno());
702:       assertFalse(node0.isIn());
703:       assertFalse(node0.isGetterDef());
704:       assertFalse(node0.isString());
705:       assertFalse(node0.isFor());
706:       assertFalse(node0.isBreak());
707:       assertFalse(node0.isIf());
708:       assertFalse(node0.isHook());
709:       assertFalse(node0.isDelProp());
710:       assertFalse(node0.isNE());
711:       assertFalse(node0.isVoid());
712:       assertFalse(node0.isComma());
713:       assertFalse(node0.isThis());
714:       assertFalse(node0.isInstanceOf());
715:       assertFalse(node0.isRegExp());
716:       assertFalse(node0.isDefaultCase());
717:       assertFalse(node0.isTry());
718:       assertFalse(node0.isTrue());
719:       assertFalse(node0.isScript());
720:       assertFalse(node0.isStringKey());
721:       assertFalse(node0.isEmpty());
722:       assertFalse(node0.isLabelName());
723:       assertFalse(node0.isArrayLit());
724:       assertFalse(node0.isVar());
725:       assertFalse(node0.isParamList());
726:       assertFalse(node0.isLabel());
727:       assertEquals(0, node0.getChildCount());
728:       assertEquals(39, node0.getType());
729:       assertFalse(node0.isDo());
730:       assertFalse(node0.isWhile());
731:       assertFalse(node0.isAssignAdd());
732:       assertFalse(node0.isNew());
733:       assertFalse(node0.isAdd());
734:       assertFalse(node0.isOr());
735:       assertEquals((-1), node0.getSourcePosition());
736:       assertFalse(node0.isGetElem());
737:       assertFalse(node0.isCall());
738:       assertFalse(node0.isName());
739:       assertFalse(node0.isAssign());
740:       assertFalse(node0.hasChildren());
741:       assertFalse(node0.hasOneChild());
742:       assertFalse(node0.isNull());
743:       assertFalse(node0.isExprResult());
744:       assertFalse(node0.isBlock());
745:       assertEquals((-1), node0.getLineno());
746:       assertFalse(node0.isReturn());
747:       assertFalse(node0.isDec());
748:       assertFalse(node0.isTypeOf());
749:       assertFalse(node0.isCatch());
750:       assertFalse(node0.hasMoreThanOneChild());
751:       assertFalse(node0.isWith());
752:       assertFalse(node0.isNot());
753:       assertFalse(node0.isObjectLit());
754:       assertFalse(node0.isAnd());
755:       assertFalse(node0.isGetProp());
756:       assertFalse(node0.isSetterDef());
757:       assertFalse(node0.isDebugger());
758:       assertFalse(node0.isFalse());
759:       assertFalse(node0.isThrow());
760:       assertFalse(node0.isFunction());
761:       assertFalse(node0.isCast());
762:       assertFalse(node0.isContinue());
763:       assertFalse(node0.equals((Object)node1));
764:       assertTrue(boolean1 == boolean0);
765:   }
766: }
RegularFileObject[/tmp/EvoSuite_250_1628160487049/com/google/javascript/rhino/Node_250_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:48:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_250_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_250_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_250_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.common.base.Preconditions",
262:       "com.google.javascript.rhino.JSDocInfo",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.Node$AncestorIterable$1",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.AbstractMultimap$Values",
346:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
347:       "com.google.common.collect.AbstractMapBasedMultimap$1",
348:       "com.google.common.collect.Multimaps$Entries",
349:       "com.google.common.collect.AbstractMultimap$Entries",
350:       "com.google.common.collect.AbstractMapBasedMultimap$2",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
356:       "com.google.javascript.rhino.JSDocInfo$Visibility",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.Platform",
359:       "com.google.javascript.rhino.jstype.TemplatizedType",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.NamespaceType",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.Iterators$12"
373:     );
374:   }
375: }

[MASTER] 10:48:07.115 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-1.0));
assertNotNull(node0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());

Node node1 = Node.newNumber(1.2, 43, 48);
assertNotNull(node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node1, node0);
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertEquals(43, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertEquals(176176, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertTrue(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.equals((Object)node0));

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node1));

boolean boolean0 = node1.isOnlyModifiesThisCall();
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node1, node0);
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertEquals(43, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertEquals(176176, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertTrue(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.equals((Object)node0));

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertNotNull(node_NodeMismatch0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertEquals(43, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertEquals(176176, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertTrue(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node0.isGetElem();
assertFalse(boolean1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);


[MASTER] 10:48:14.255 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_311_1628160494160/com/google/javascript/rhino/Node_311_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_311_1628160494160/com/google/javascript/rhino/Node_311_tmp__ESTest_scaffolding.java]]
[MASTER] 10:48:14.255 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:14.255 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:14.256 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 253
[MASTER] 10:48:14.256 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_311_1628160494160/com/google/javascript/rhino/Node_311_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:48:14 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.ArrayList;
16: import java.util.List;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_311_tmp__ESTest extends Node_311_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
27:       assertNotNull(simpleErrorReporter0);
28:       
29:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
30:       assertNotNull(jSTypeRegistry0);
31:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
32:       
33:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
34:       assertNotNull(arrayList0);
35:       assertEquals(0, arrayList0.size());
36:       assertTrue(arrayList0.isEmpty());
37:       
38:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
39:       assertNotNull(node0);
40:       assertEquals(39, Node.EMPTY_BLOCK);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(48, Node.DIRECTIVES);
43:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
44:       assertEquals(50, Node.FREE_CALL);
45:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
46:       assertEquals(55, Node.INFERRED_FUNCTION);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(52, Node.LENGTH);
49:       assertEquals(8, Node.FLAG_NO_THROWS);
50:       assertEquals(54, Node.SLASH_V);
51:       assertEquals(53, Node.INPUT_ID);
52:       assertEquals(43, Node.IS_CONSTANT_NAME);
53:       assertEquals(57, Node.LAST_PROP);
54:       assertEquals(30, Node.VAR_ARGS_NAME);
55:       assertEquals(47, Node.IS_DISPATCHER);
56:       assertEquals(40, Node.ORIGINALNAME_PROP);
57:       assertEquals(2, Node.POST_FLAG);
58:       assertEquals(46, Node.IS_NAMESPACE);
59:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
60:       assertEquals(12, Node.COLUMN_BITS);
61:       assertEquals(37, Node.OPT_ARG_NAME);
62:       assertEquals(56, Node.CHANGE_TIME);
63:       assertEquals(32, Node.INCRDECR_PROP);
64:       assertEquals(29, Node.JSDOC_INFO_PROP);
65:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
66:       assertEquals(1, Node.DECR_FLAG);
67:       assertEquals(15, Node.NO_SIDE_EFFECTS);
68:       assertEquals(51, Node.STATIC_SOURCE_FILE);
69:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
70:       assertEquals(57, Node.REFLECTED_OBJECT);
71:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
72:       assertEquals(49, Node.DIRECT_EVAL);
73:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
74:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
75:       assertEquals(4095, Node.COLUMN_MASK);
76:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
77:       assertEquals(0, arrayList0.size());
78:       assertTrue(arrayList0.isEmpty());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isSwitch());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isThrow());
84:       assertFalse(node0.isHook());
85:       assertFalse(node0.isIf());
86:       assertFalse(node0.isBreak());
87:       assertEquals(83, node0.getType());
88:       assertFalse(node0.isDelProp());
89:       assertFalse(node0.isEmpty());
90:       assertFalse(node0.isIn());
91:       assertFalse(node0.isNE());
92:       assertFalse(node0.isTrue());
93:       assertFalse(node0.isNot());
94:       assertFalse(node0.isFunction());
95:       assertFalse(node0.isVoid());
96:       assertFalse(node0.isExprResult());
97:       assertFalse(node0.isComma());
98:       assertEquals((-1), node0.getSourcePosition());
99:       assertFalse(node0.isFalse());
100:       assertFalse(node0.isGetProp());
101:       assertFalse(node0.isCast());
102:       assertFalse(node0.isObjectLit());
103:       assertTrue(node0.isParamList());
104:       assertFalse(node0.isDebugger());
105:       assertFalse(node0.isAnd());
106:       assertFalse(node0.isWhile());
107:       assertFalse(node0.isDo());
108:       assertFalse(node0.isContinue());
109:       assertFalse(node0.isNew());
110:       assertFalse(node0.isAdd());
111:       assertFalse(node0.hasMoreThanOneChild());
112:       assertFalse(node0.isAssignAdd());
113:       assertFalse(node0.isLabel());
114:       assertFalse(node0.isVar());
115:       assertFalse(node0.isBlock());
116:       assertFalse(node0.isReturn());
117:       assertFalse(node0.hasChildren());
118:       assertFalse(node0.isDec());
119:       assertFalse(node0.isAssign());
120:       assertFalse(node0.isTypeOf());
121:       assertFalse(node0.isName());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isGetElem());
124:       assertFalse(node0.isCall());
125:       assertEquals((-1), node0.getLineno());
126:       assertFalse(node0.isOr());
127:       assertFalse(node0.isNull());
128:       assertFalse(node0.isDefaultCase());
129:       assertFalse(node0.isWith());
130:       assertFalse(node0.isRegExp());
131:       assertFalse(node0.isCatch());
132:       assertFalse(node0.isScript());
133:       assertEquals(0, node0.getChildCount());
134:       assertFalse(node0.hasOneChild());
135:       assertFalse(node0.isInstanceOf());
136:       assertFalse(node0.isTry());
137:       assertFalse(node0.isFor());
138:       assertFalse(node0.isThis());
139:       assertFalse(node0.isGetterDef());
140:       assertFalse(node0.isLabelName());
141:       assertFalse(node0.isNumber());
142:       assertFalse(node0.isArrayLit());
143:       assertEquals((-1), node0.getCharno());
144:       assertFalse(node0.isStringKey());
145:       
146:       Iterable<Node> iterable0 = node0.children();
147:       assertNotNull(iterable0);
148:       assertEquals(39, Node.EMPTY_BLOCK);
149:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
152:       assertEquals(50, Node.FREE_CALL);
153:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(52, Node.LENGTH);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(54, Node.SLASH_V);
159:       assertEquals(53, Node.INPUT_ID);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(57, Node.LAST_PROP);
162:       assertEquals(30, Node.VAR_ARGS_NAME);
163:       assertEquals(47, Node.IS_DISPATCHER);
164:       assertEquals(40, Node.ORIGINALNAME_PROP);
165:       assertEquals(2, Node.POST_FLAG);
166:       assertEquals(46, Node.IS_NAMESPACE);
167:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
168:       assertEquals(12, Node.COLUMN_BITS);
169:       assertEquals(37, Node.OPT_ARG_NAME);
170:       assertEquals(56, Node.CHANGE_TIME);
171:       assertEquals(32, Node.INCRDECR_PROP);
172:       assertEquals(29, Node.JSDOC_INFO_PROP);
173:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
174:       assertEquals(1, Node.DECR_FLAG);
175:       assertEquals(15, Node.NO_SIDE_EFFECTS);
176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
177:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
178:       assertEquals(57, Node.REFLECTED_OBJECT);
179:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
180:       assertEquals(49, Node.DIRECT_EVAL);
181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
182:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
183:       assertEquals(4095, Node.COLUMN_MASK);
184:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
185:       assertEquals(0, arrayList0.size());
186:       assertTrue(arrayList0.isEmpty());
187:       assertFalse(node0.isString());
188:       assertFalse(node0.isSwitch());
189:       assertFalse(node0.isCase());
190:       assertFalse(node0.isInc());
191:       assertFalse(node0.isThrow());
192:       assertFalse(node0.isHook());
193:       assertFalse(node0.isIf());
194:       assertFalse(node0.isBreak());
195:       assertEquals(83, node0.getType());
196:       assertFalse(node0.isDelProp());
197:       assertFalse(node0.isEmpty());
198:       assertFalse(node0.isIn());
199:       assertFalse(node0.isNE());
200:       assertFalse(node0.isTrue());
201:       assertFalse(node0.isNot());
202:       assertFalse(node0.isFunction());
203:       assertFalse(node0.isVoid());
204:       assertFalse(node0.isExprResult());
205:       assertFalse(node0.isComma());
206:       assertEquals((-1), node0.getSourcePosition());
207:       assertFalse(node0.isFalse());
208:       assertFalse(node0.isGetProp());
209:       assertFalse(node0.isCast());
210:       assertFalse(node0.isObjectLit());
211:       assertTrue(node0.isParamList());
212:       assertFalse(node0.isDebugger());
213:       assertFalse(node0.isAnd());
214:       assertFalse(node0.isWhile());
215:       assertFalse(node0.isDo());
216:       assertFalse(node0.isContinue());
217:       assertFalse(node0.isNew());
218:       assertFalse(node0.isAdd());
219:       assertFalse(node0.hasMoreThanOneChild());
220:       assertFalse(node0.isAssignAdd());
221:       assertFalse(node0.isLabel());
222:       assertFalse(node0.isVar());
223:       assertFalse(node0.isBlock());
224:       assertFalse(node0.isReturn());
225:       assertFalse(node0.hasChildren());
226:       assertFalse(node0.isDec());
227:       assertFalse(node0.isAssign());
228:       assertFalse(node0.isTypeOf());
229:       assertFalse(node0.isName());
230:       assertFalse(node0.isSetterDef());
231:       assertFalse(node0.isGetElem());
232:       assertFalse(node0.isCall());
233:       assertEquals((-1), node0.getLineno());
234:       assertFalse(node0.isOr());
235:       assertFalse(node0.isNull());
236:       assertFalse(node0.isDefaultCase());
237:       assertFalse(node0.isWith());
238:       assertFalse(node0.isRegExp());
239:       assertFalse(node0.isCatch());
240:       assertFalse(node0.isScript());
241:       assertEquals(0, node0.getChildCount());
242:       assertFalse(node0.hasOneChild());
243:       assertFalse(node0.isInstanceOf());
244:       assertFalse(node0.isTry());
245:       assertFalse(node0.isFor());
246:       assertFalse(node0.isThis());
247:       assertFalse(node0.isGetterDef());
248:       assertFalse(node0.isLabelName());
249:       assertFalse(node0.isNumber());
250:       assertFalse(node0.isArrayLit());
251:       assertEquals((-1), node0.getCharno());
252:       assertFalse(node0.isStringKey());
253:       assertFalse(iterable0.contains(node0));
254:       
255:       boolean boolean0 = node0.isAssign();
256:       assertFalse(boolean0);
257:       assertEquals(39, Node.EMPTY_BLOCK);
258:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
259:       assertEquals(48, Node.DIRECTIVES);
260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
261:       assertEquals(50, Node.FREE_CALL);
262:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
263:       assertEquals(55, Node.INFERRED_FUNCTION);
264:       assertEquals(36, Node.QUOTED_PROP);
265:       assertEquals(52, Node.LENGTH);
266:       assertEquals(8, Node.FLAG_NO_THROWS);
267:       assertEquals(54, Node.SLASH_V);
268:       assertEquals(53, Node.INPUT_ID);
269:       assertEquals(43, Node.IS_CONSTANT_NAME);
270:       assertEquals(57, Node.LAST_PROP);
271:       assertEquals(30, Node.VAR_ARGS_NAME);
272:       assertEquals(47, Node.IS_DISPATCHER);
273:       assertEquals(40, Node.ORIGINALNAME_PROP);
274:       assertEquals(2, Node.POST_FLAG);
275:       assertEquals(46, Node.IS_NAMESPACE);
276:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
277:       assertEquals(12, Node.COLUMN_BITS);
278:       assertEquals(37, Node.OPT_ARG_NAME);
279:       assertEquals(56, Node.CHANGE_TIME);
280:       assertEquals(32, Node.INCRDECR_PROP);
281:       assertEquals(29, Node.JSDOC_INFO_PROP);
282:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
283:       assertEquals(1, Node.DECR_FLAG);
284:       assertEquals(15, Node.NO_SIDE_EFFECTS);
285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
286:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
287:       assertEquals(57, Node.REFLECTED_OBJECT);
288:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
289:       assertEquals(49, Node.DIRECT_EVAL);
290:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
291:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
292:       assertEquals(4095, Node.COLUMN_MASK);
293:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
294:       assertEquals(0, arrayList0.size());
295:       assertTrue(arrayList0.isEmpty());
296:       assertFalse(node0.isString());
297:       assertFalse(node0.isSwitch());
298:       assertFalse(node0.isCase());
299:       assertFalse(node0.isInc());
300:       assertFalse(node0.isThrow());
301:       assertFalse(node0.isHook());
302:       assertFalse(node0.isIf());
303:       assertFalse(node0.isBreak());
304:       assertEquals(83, node0.getType());
305:       assertFalse(node0.isDelProp());
306:       assertFalse(node0.isEmpty());
307:       assertFalse(node0.isIn());
308:       assertFalse(node0.isNE());
309:       assertFalse(node0.isTrue());
310:       assertFalse(node0.isNot());
311:       assertFalse(node0.isFunction());
312:       assertFalse(node0.isVoid());
313:       assertFalse(node0.isExprResult());
314:       assertFalse(node0.isComma());
315:       assertEquals((-1), node0.getSourcePosition());
316:       assertFalse(node0.isFalse());
317:       assertFalse(node0.isGetProp());
318:       assertFalse(node0.isCast());
319:       assertFalse(node0.isObjectLit());
320:       assertTrue(node0.isParamList());
321:       assertFalse(node0.isDebugger());
322:       assertFalse(node0.isAnd());
323:       assertFalse(node0.isWhile());
324:       assertFalse(node0.isDo());
325:       assertFalse(node0.isContinue());
326:       assertFalse(node0.isNew());
327:       assertFalse(node0.isAdd());
328:       assertFalse(node0.hasMoreThanOneChild());
329:       assertFalse(node0.isAssignAdd());
330:       assertFalse(node0.isLabel());
331:       assertFalse(node0.isVar());
332:       assertFalse(node0.isBlock());
333:       assertFalse(node0.isReturn());
334:       assertFalse(node0.hasChildren());
335:       assertFalse(node0.isDec());
336:       assertFalse(node0.isAssign());
337:       assertFalse(node0.isTypeOf());
338:       assertFalse(node0.isName());
339:       assertFalse(node0.isSetterDef());
340:       assertFalse(node0.isGetElem());
341:       assertFalse(node0.isCall());
342:       assertEquals((-1), node0.getLineno());
343:       assertFalse(node0.isOr());
344:       assertFalse(node0.isNull());
345:       assertFalse(node0.isDefaultCase());
346:       assertFalse(node0.isWith());
347:       assertFalse(node0.isRegExp());
348:       assertFalse(node0.isCatch());
349:       assertFalse(node0.isScript());
350:       assertEquals(0, node0.getChildCount());
351:       assertFalse(node0.hasOneChild());
352:       assertFalse(node0.isInstanceOf());
353:       assertFalse(node0.isTry());
354:       assertFalse(node0.isFor());
355:       assertFalse(node0.isThis());
356:       assertFalse(node0.isGetterDef());
357:       assertFalse(node0.isLabelName());
358:       assertFalse(node0.isNumber());
359:       assertFalse(node0.isArrayLit());
360:       assertEquals((-1), node0.getCharno());
361:       assertFalse(node0.isStringKey());
362:       
363:       node0.addChildToFront(node0);
364:       assertEquals(39, Node.EMPTY_BLOCK);
365:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
366:       assertEquals(48, Node.DIRECTIVES);
367:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
368:       assertEquals(50, Node.FREE_CALL);
369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
370:       assertEquals(55, Node.INFERRED_FUNCTION);
371:       assertEquals(36, Node.QUOTED_PROP);
372:       assertEquals(52, Node.LENGTH);
373:       assertEquals(8, Node.FLAG_NO_THROWS);
374:       assertEquals(54, Node.SLASH_V);
375:       assertEquals(53, Node.INPUT_ID);
376:       assertEquals(43, Node.IS_CONSTANT_NAME);
377:       assertEquals(57, Node.LAST_PROP);
378:       assertEquals(30, Node.VAR_ARGS_NAME);
379:       assertEquals(47, Node.IS_DISPATCHER);
380:       assertEquals(40, Node.ORIGINALNAME_PROP);
381:       assertEquals(2, Node.POST_FLAG);
382:       assertEquals(46, Node.IS_NAMESPACE);
383:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
384:       assertEquals(12, Node.COLUMN_BITS);
385:       assertEquals(37, Node.OPT_ARG_NAME);
386:       assertEquals(56, Node.CHANGE_TIME);
387:       assertEquals(32, Node.INCRDECR_PROP);
388:       assertEquals(29, Node.JSDOC_INFO_PROP);
389:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
390:       assertEquals(1, Node.DECR_FLAG);
391:       assertEquals(15, Node.NO_SIDE_EFFECTS);
392:       assertEquals(51, Node.STATIC_SOURCE_FILE);
393:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
394:       assertEquals(57, Node.REFLECTED_OBJECT);
395:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
396:       assertEquals(49, Node.DIRECT_EVAL);
397:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
398:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
399:       assertEquals(4095, Node.COLUMN_MASK);
400:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
401:       assertEquals(0, arrayList0.size());
402:       assertTrue(arrayList0.isEmpty());
403:       assertFalse(node0.isString());
404:       assertFalse(node0.isSwitch());
405:       assertFalse(node0.isCase());
406:       assertFalse(node0.isInc());
407:       assertEquals(1, node0.getChildCount());
408:       assertFalse(node0.isThrow());
409:       assertFalse(node0.isHook());
410:       assertFalse(node0.isIf());
411:       assertFalse(node0.isBreak());
412:       assertEquals(83, node0.getType());
413:       assertFalse(node0.isDelProp());
414:       assertFalse(node0.isEmpty());
415:       assertTrue(node0.hasChildren());
416:       assertFalse(node0.isIn());
417:       assertFalse(node0.isNE());
418:       assertFalse(node0.isTrue());
419:       assertFalse(node0.isNot());
420:       assertFalse(node0.isFunction());
421:       assertFalse(node0.isVoid());
422:       assertFalse(node0.isExprResult());
423:       assertFalse(node0.isComma());
424:       assertTrue(node0.hasOneChild());
425:       assertEquals((-1), node0.getSourcePosition());
426:       assertFalse(node0.isFalse());
427:       assertFalse(node0.isGetProp());
428:       assertFalse(node0.isCast());
429:       assertFalse(node0.isObjectLit());
430:       assertTrue(node0.isParamList());
431:       assertFalse(node0.isDebugger());
432:       assertFalse(node0.isAnd());
433:       assertFalse(node0.isWhile());
434:       assertFalse(node0.isDo());
435:       assertFalse(node0.isContinue());
436:       assertFalse(node0.isNew());
437:       assertFalse(node0.isAdd());
438:       assertFalse(node0.hasMoreThanOneChild());
439:       assertFalse(node0.isAssignAdd());
440:       assertFalse(node0.isLabel());
441:       assertFalse(node0.isVar());
442:       assertFalse(node0.isBlock());
443:       assertFalse(node0.isReturn());
444:       assertFalse(node0.isDec());
445:       assertFalse(node0.isAssign());
446:       assertFalse(node0.isTypeOf());
447:       assertFalse(node0.isName());
448:       assertFalse(node0.isSetterDef());
449:       assertFalse(node0.isGetElem());
450:       assertFalse(node0.isCall());
451:       assertEquals((-1), node0.getLineno());
452:       assertFalse(node0.isOr());
453:       assertFalse(node0.isNull());
454:       assertFalse(node0.isDefaultCase());
455:       assertFalse(node0.isWith());
456:       assertFalse(node0.isRegExp());
457:       assertFalse(node0.isCatch());
458:       assertFalse(node0.isScript());
459:       assertFalse(node0.isInstanceOf());
460:       assertFalse(node0.isTry());
461:       assertFalse(node0.isFor());
462:       assertFalse(node0.isThis());
463:       assertFalse(node0.isGetterDef());
464:       assertFalse(node0.isLabelName());
465:       assertFalse(node0.isNumber());
466:       assertFalse(node0.isArrayLit());
467:       assertEquals((-1), node0.getCharno());
468:       assertFalse(node0.isStringKey());
469:       
470:       boolean boolean1 = node0.isName();
471:       assertFalse(boolean1);
472:       assertEquals(39, Node.EMPTY_BLOCK);
473:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
474:       assertEquals(48, Node.DIRECTIVES);
475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
476:       assertEquals(50, Node.FREE_CALL);
477:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
478:       assertEquals(55, Node.INFERRED_FUNCTION);
479:       assertEquals(36, Node.QUOTED_PROP);
480:       assertEquals(52, Node.LENGTH);
481:       assertEquals(8, Node.FLAG_NO_THROWS);
482:       assertEquals(54, Node.SLASH_V);
483:       assertEquals(53, Node.INPUT_ID);
484:       assertEquals(43, Node.IS_CONSTANT_NAME);
485:       assertEquals(57, Node.LAST_PROP);
486:       assertEquals(30, Node.VAR_ARGS_NAME);
487:       assertEquals(47, Node.IS_DISPATCHER);
488:       assertEquals(40, Node.ORIGINALNAME_PROP);
489:       assertEquals(2, Node.POST_FLAG);
490:       assertEquals(46, Node.IS_NAMESPACE);
491:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
492:       assertEquals(12, Node.COLUMN_BITS);
493:       assertEquals(37, Node.OPT_ARG_NAME);
494:       assertEquals(56, Node.CHANGE_TIME);
495:       assertEquals(32, Node.INCRDECR_PROP);
496:       assertEquals(29, Node.JSDOC_INFO_PROP);
497:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
498:       assertEquals(1, Node.DECR_FLAG);
499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
500:       assertEquals(51, Node.STATIC_SOURCE_FILE);
501:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
502:       assertEquals(57, Node.REFLECTED_OBJECT);
503:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
504:       assertEquals(49, Node.DIRECT_EVAL);
505:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
506:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
507:       assertEquals(4095, Node.COLUMN_MASK);
508:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
509:       assertEquals(0, arrayList0.size());
510:       assertTrue(arrayList0.isEmpty());
511:       assertFalse(node0.isString());
512:       assertFalse(node0.isSwitch());
513:       assertFalse(node0.isCase());
514:       assertFalse(node0.isInc());
515:       assertEquals(1, node0.getChildCount());
516:       assertFalse(node0.isThrow());
517:       assertFalse(node0.isHook());
518:       assertFalse(node0.isIf());
519:       assertFalse(node0.isBreak());
520:       assertEquals(83, node0.getType());
521:       assertFalse(node0.isDelProp());
522:       assertFalse(node0.isEmpty());
523:       assertTrue(node0.hasChildren());
524:       assertFalse(node0.isIn());
525:       assertFalse(node0.isNE());
526:       assertFalse(node0.isTrue());
527:       assertFalse(node0.isNot());
528:       assertFalse(node0.isFunction());
529:       assertFalse(node0.isVoid());
530:       assertFalse(node0.isExprResult());
531:       assertFalse(node0.isComma());
532:       assertTrue(node0.hasOneChild());
533:       assertEquals((-1), node0.getSourcePosition());
534:       assertFalse(node0.isFalse());
535:       assertFalse(node0.isGetProp());
536:       assertFalse(node0.isCast());
537:       assertFalse(node0.isObjectLit());
538:       assertTrue(node0.isParamList());
539:       assertFalse(node0.isDebugger());
540:       assertFalse(node0.isAnd());
541:       assertFalse(node0.isWhile());
542:       assertFalse(node0.isDo());
543:       assertFalse(node0.isContinue());
544:       assertFalse(node0.isNew());
545:       assertFalse(node0.isAdd());
546:       assertFalse(node0.hasMoreThanOneChild());
547:       assertFalse(node0.isAssignAdd());
548:       assertFalse(node0.isLabel());
549:       assertFalse(node0.isVar());
550:       assertFalse(node0.isBlock());
551:       assertFalse(node0.isReturn());
552:       assertFalse(node0.isDec());
553:       assertFalse(node0.isAssign());
554:       assertFalse(node0.isTypeOf());
555:       assertFalse(node0.isName());
556:       assertFalse(node0.isSetterDef());
557:       assertFalse(node0.isGetElem());
558:       assertFalse(node0.isCall());
559:       assertEquals((-1), node0.getLineno());
560:       assertFalse(node0.isOr());
561:       assertFalse(node0.isNull());
562:       assertFalse(node0.isDefaultCase());
563:       assertFalse(node0.isWith());
564:       assertFalse(node0.isRegExp());
565:       assertFalse(node0.isCatch());
566:       assertFalse(node0.isScript());
567:       assertFalse(node0.isInstanceOf());
568:       assertFalse(node0.isTry());
569:       assertFalse(node0.isFor());
570:       assertFalse(node0.isThis());
571:       assertFalse(node0.isGetterDef());
572:       assertFalse(node0.isLabelName());
573:       assertFalse(node0.isNumber());
574:       assertFalse(node0.isArrayLit());
575:       assertEquals((-1), node0.getCharno());
576:       assertFalse(node0.isStringKey());
577:       assertTrue(boolean1 == boolean0);
578:       
579:       node0.setWasEmptyNode(false);
580:       assertEquals(39, Node.EMPTY_BLOCK);
581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
582:       assertEquals(48, Node.DIRECTIVES);
583:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
584:       assertEquals(50, Node.FREE_CALL);
585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
586:       assertEquals(55, Node.INFERRED_FUNCTION);
587:       assertEquals(36, Node.QUOTED_PROP);
588:       assertEquals(52, Node.LENGTH);
589:       assertEquals(8, Node.FLAG_NO_THROWS);
590:       assertEquals(54, Node.SLASH_V);
591:       assertEquals(53, Node.INPUT_ID);
592:       assertEquals(43, Node.IS_CONSTANT_NAME);
593:       assertEquals(57, Node.LAST_PROP);
594:       assertEquals(30, Node.VAR_ARGS_NAME);
595:       assertEquals(47, Node.IS_DISPATCHER);
596:       assertEquals(40, Node.ORIGINALNAME_PROP);
597:       assertEquals(2, Node.POST_FLAG);
598:       assertEquals(46, Node.IS_NAMESPACE);
599:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
600:       assertEquals(12, Node.COLUMN_BITS);
601:       assertEquals(37, Node.OPT_ARG_NAME);
602:       assertEquals(56, Node.CHANGE_TIME);
603:       assertEquals(32, Node.INCRDECR_PROP);
604:       assertEquals(29, Node.JSDOC_INFO_PROP);
605:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
606:       assertEquals(1, Node.DECR_FLAG);
607:       assertEquals(15, Node.NO_SIDE_EFFECTS);
608:       assertEquals(51, Node.STATIC_SOURCE_FILE);
609:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
610:       assertEquals(57, Node.REFLECTED_OBJECT);
611:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
612:       assertEquals(49, Node.DIRECT_EVAL);
613:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
614:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
615:       assertEquals(4095, Node.COLUMN_MASK);
616:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
617:       assertEquals(0, arrayList0.size());
618:       assertTrue(arrayList0.isEmpty());
619:       assertFalse(node0.isString());
620:       assertFalse(node0.isSwitch());
621:       assertFalse(node0.isCase());
622:       assertFalse(node0.isInc());
623:       assertEquals(1, node0.getChildCount());
624:       assertFalse(node0.isThrow());
625:       assertFalse(node0.isHook());
626:       assertFalse(node0.isIf());
627:       assertFalse(node0.isBreak());
628:       assertEquals(83, node0.getType());
629:       assertFalse(node0.isDelProp());
630:       assertFalse(node0.isEmpty());
631:       assertTrue(node0.hasChildren());
632:       assertFalse(node0.isIn());
633:       assertFalse(node0.isNE());
634:       assertFalse(node0.isTrue());
635:       assertFalse(node0.isNot());
636:       assertFalse(node0.isFunction());
637:       assertFalse(node0.isVoid());
638:       assertFalse(node0.isExprResult());
639:       assertFalse(node0.isComma());
640:       assertTrue(node0.hasOneChild());
641:       assertEquals((-1), node0.getSourcePosition());
642:       assertFalse(node0.isFalse());
643:       assertFalse(node0.isGetProp());
644:       assertFalse(node0.isCast());
645:       assertFalse(node0.isObjectLit());
646:       assertTrue(node0.isParamList());
647:       assertFalse(node0.isDebugger());
648:       assertFalse(node0.isAnd());
649:       assertFalse(node0.isWhile());
650:       assertFalse(node0.isDo());
651:       assertFalse(node0.isContinue());
652:       assertFalse(node0.isNew());
653:       assertFalse(node0.isAdd());
654:       assertFalse(node0.hasMoreThanOneChild());
655:       assertFalse(node0.isAssignAdd());
656:       assertFalse(node0.isLabel());
657:       assertFalse(node0.isVar());
658:       assertFalse(node0.isBlock());
659:       assertFalse(node0.isReturn());
660:       assertFalse(node0.isDec());
661:       assertFalse(node0.isAssign());
662:       assertFalse(node0.isTypeOf());
663:       assertFalse(node0.isName());
664:       assertFalse(node0.isSetterDef());
665:       assertFalse(node0.isGetElem());
666:       assertFalse(node0.isCall());
667:       assertEquals((-1), node0.getLineno());
668:       assertFalse(node0.isOr());
669:       assertFalse(node0.isNull());
670:       assertFalse(node0.isDefaultCase());
671:       assertFalse(node0.isWith());
672:       assertFalse(node0.isRegExp());
673:       assertFalse(node0.isCatch());
674:       assertFalse(node0.isScript());
675:       assertFalse(node0.isInstanceOf());
676:       assertFalse(node0.isTry());
677:       assertFalse(node0.isFor());
678:       assertFalse(node0.isThis());
679:       assertFalse(node0.isGetterDef());
680:       assertFalse(node0.isLabelName());
681:       assertFalse(node0.isNumber());
682:       assertFalse(node0.isArrayLit());
683:       assertEquals((-1), node0.getCharno());
684:       assertFalse(node0.isStringKey());
685:       
686:       Node node1 = Node.newString(50, "Object#Key");
687:       assertNotNull(node1);
688:       assertEquals(51, Node.STATIC_SOURCE_FILE);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(30, Node.VAR_ARGS_NAME);
691:       assertEquals(49, Node.DIRECT_EVAL);
692:       assertEquals(32, Node.INCRDECR_PROP);
693:       assertEquals(57, Node.LAST_PROP);
694:       assertEquals(12, Node.COLUMN_BITS);
695:       assertEquals(46, Node.IS_NAMESPACE);
696:       assertEquals(37, Node.OPT_ARG_NAME);
697:       assertEquals(2, Node.POST_FLAG);
698:       assertEquals(47, Node.IS_DISPATCHER);
699:       assertEquals(56, Node.CHANGE_TIME);
700:       assertEquals(57, Node.REFLECTED_OBJECT);
701:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
702:       assertEquals(8, Node.FLAG_NO_THROWS);
703:       assertEquals(39, Node.EMPTY_BLOCK);
704:       assertEquals(36, Node.QUOTED_PROP);
705:       assertEquals(52, Node.LENGTH);
706:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
707:       assertEquals(15, Node.NO_SIDE_EFFECTS);
708:       assertEquals(53, Node.INPUT_ID);
709:       assertEquals(29, Node.JSDOC_INFO_PROP);
710:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
711:       assertEquals(55, Node.INFERRED_FUNCTION);
712:       assertEquals(4095, Node.COLUMN_MASK);
713:       assertEquals(43, Node.IS_CONSTANT_NAME);
714:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
715:       assertEquals(48, Node.DIRECTIVES);
716:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
717:       assertEquals(40, Node.ORIGINALNAME_PROP);
718:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
719:       assertEquals(50, Node.FREE_CALL);
720:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
721:       assertEquals(54, Node.SLASH_V);
722:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
723:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
724:       assertFalse(node1.isTrue());
725:       assertFalse(node1.isArrayLit());
726:       assertFalse(node1.isDefaultCase());
727:       assertFalse(node1.isTry());
728:       assertFalse(node1.isVoid());
729:       assertFalse(node1.isEmpty());
730:       assertFalse(node1.isDebugger());
731:       assertFalse(node1.isGetterDef());
732:       assertFalse(node1.isNE());
733:       assertFalse(node1.isIf());
734:       assertFalse(node1.isDelProp());
735:       assertFalse(node1.isFor());
736:       assertFalse(node1.isCall());
737:       assertFalse(node1.isCatch());
738:       assertFalse(node1.isRegExp());
739:       assertFalse(node1.isBlock());
740:       assertFalse(node1.isNew());
741:       assertFalse(node1.isAdd());
742:       assertEquals((-1), node1.getCharno());
743:       assertFalse(node1.isSwitch());
744:       assertFalse(node1.isDo());
745:       assertFalse(node1.isCase());
746:       assertFalse(node1.isName());
747:       assertFalse(node1.isStringKey());
748:       assertFalse(node1.isNull());
749:       assertFalse(node1.isOr());
750:       assertFalse(node1.isAssignAdd());
751:       assertFalse(node1.isLabel());
752:       assertEquals(50, node1.getType());
753:       assertFalse(node1.isParamList());
754:       assertFalse(node1.isLabelName());
755:       assertFalse(node1.isVar());
756:       assertEquals(0, node1.getChildCount());
757:       assertFalse(node1.isExprResult());
758:       assertFalse(node1.isScript());
759:       assertFalse(node1.hasOneChild());
760:       assertFalse(node1.isAnd());
761:       assertEquals((-1), node1.getSourcePosition());
762:       assertFalse(node1.isNumber());
763:       assertFalse(node1.isObjectLit());
764:       assertFalse(node1.isNot());
765:       assertFalse(node1.isGetProp());
766:       assertFalse(node1.isReturn());
767:       assertFalse(node1.isThis());
768:       assertFalse(node1.isBreak());
769:       assertEquals((-1), node1.getLineno());
770:       assertFalse(node1.isGetElem());
771:       assertFalse(node1.isWith());
772:       assertFalse(node1.isWhile());
773:       assertFalse(node1.isInstanceOf());
774:       assertFalse(node1.isTypeOf());
775:       assertFalse(node1.isHook());
776:       assertFalse(node1.hasMoreThanOneChild());
777:       assertFalse(node1.hasChildren());
778:       assertFalse(node1.isComma());
779:       assertFalse(node1.isAssign());
780:       assertFalse(node1.isDec());
781:       assertFalse(node1.isInc());
782:       assertFalse(node1.isString());
783:       assertFalse(node1.isIn());
784:       assertFalse(node1.isSetterDef());
785:       assertFalse(node1.isFalse());
786:       assertFalse(node1.isContinue());
787:       assertFalse(node1.isThrow());
788:       assertFalse(node1.isCast());
789:       assertFalse(node1.isFunction());
790:       assertFalse(node1.equals((Object)node0));
791:       
792:       boolean boolean2 = node0.hasChildren();
793:       assertTrue(boolean2);
794:       assertEquals(39, Node.EMPTY_BLOCK);
795:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
796:       assertEquals(48, Node.DIRECTIVES);
797:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
798:       assertEquals(50, Node.FREE_CALL);
799:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
800:       assertEquals(55, Node.INFERRED_FUNCTION);
801:       assertEquals(36, Node.QUOTED_PROP);
802:       assertEquals(52, Node.LENGTH);
803:       assertEquals(8, Node.FLAG_NO_THROWS);
804:       assertEquals(54, Node.SLASH_V);
805:       assertEquals(53, Node.INPUT_ID);
806:       assertEquals(43, Node.IS_CONSTANT_NAME);
807:       assertEquals(57, Node.LAST_PROP);
808:       assertEquals(30, Node.VAR_ARGS_NAME);
809:       assertEquals(47, Node.IS_DISPATCHER);
810:       assertEquals(40, Node.ORIGINALNAME_PROP);
811:       assertEquals(2, Node.POST_FLAG);
812:       assertEquals(46, Node.IS_NAMESPACE);
813:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
814:       assertEquals(12, Node.COLUMN_BITS);
815:       assertEquals(37, Node.OPT_ARG_NAME);
816:       assertEquals(56, Node.CHANGE_TIME);
817:       assertEquals(32, Node.INCRDECR_PROP);
818:       assertEquals(29, Node.JSDOC_INFO_PROP);
819:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
820:       assertEquals(1, Node.DECR_FLAG);
821:       assertEquals(15, Node.NO_SIDE_EFFECTS);
822:       assertEquals(51, Node.STATIC_SOURCE_FILE);
823:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
824:       assertEquals(57, Node.REFLECTED_OBJECT);
825:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
826:       assertEquals(49, Node.DIRECT_EVAL);
827:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
828:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
829:       assertEquals(4095, Node.COLUMN_MASK);
830:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
831:       assertEquals(0, arrayList0.size());
832:       assertTrue(arrayList0.isEmpty());
833:       assertFalse(node0.isString());
834:       assertFalse(node0.isSwitch());
835:       assertFalse(node0.isCase());
836:       assertFalse(node0.isInc());
837:       assertEquals(1, node0.getChildCount());
838:       assertFalse(node0.isThrow());
839:       assertFalse(node0.isHook());
840:       assertFalse(node0.isIf());
841:       assertFalse(node0.isBreak());
842:       assertEquals(83, node0.getType());
843:       assertFalse(node0.isDelProp());
844:       assertFalse(node0.isEmpty());
845:       assertTrue(node0.hasChildren());
846:       assertFalse(node0.isIn());
847:       assertFalse(node0.isNE());
848:       assertFalse(node0.isTrue());
849:       assertFalse(node0.isNot());
850:       assertFalse(node0.isFunction());
851:       assertFalse(node0.isVoid());
852:       assertFalse(node0.isExprResult());
853:       assertFalse(node0.isComma());
854:       assertTrue(node0.hasOneChild());
855:       assertEquals((-1), node0.getSourcePosition());
856:       assertFalse(node0.isFalse());
857:       assertFalse(node0.isGetProp());
858:       assertFalse(node0.isCast());
859:       assertFalse(node0.isObjectLit());
860:       assertTrue(node0.isParamList());
861:       assertFalse(node0.isDebugger());
862:       assertFalse(node0.isAnd());
863:       assertFalse(node0.isWhile());
864:       assertFalse(node0.isDo());
865:       assertFalse(node0.isContinue());
866:       assertFalse(node0.isNew());
867:       assertFalse(node0.isAdd());
868:       assertFalse(node0.hasMoreThanOneChild());
869:       assertFalse(node0.isAssignAdd());
870:       assertFalse(node0.isLabel());
871:       assertFalse(node0.isVar());
872:       assertFalse(node0.isBlock());
873:       assertFalse(node0.isReturn());
874:       assertFalse(node0.isDec());
875:       assertFalse(node0.isAssign());
876:       assertFalse(node0.isTypeOf());
877:       assertFalse(node0.isName());
878:       assertFalse(node0.isSetterDef());
879:       assertFalse(node0.isGetElem());
880:       assertFalse(node0.isCall());
881:       assertEquals((-1), node0.getLineno());
882:       assertFalse(node0.isOr());
883:       assertFalse(node0.isNull());
884:       assertFalse(node0.isDefaultCase());
885:       assertFalse(node0.isWith());
886:       assertFalse(node0.isRegExp());
887:       assertFalse(node0.isCatch());
888:       assertFalse(node0.isScript());
889:       assertFalse(node0.isInstanceOf());
890:       assertFalse(node0.isTry());
891:       assertFalse(node0.isFor());
892:       assertFalse(node0.isThis());
893:       assertFalse(node0.isGetterDef());
894:       assertFalse(node0.isLabelName());
895:       assertFalse(node0.isNumber());
896:       assertFalse(node0.isArrayLit());
897:       assertEquals((-1), node0.getCharno());
898:       assertFalse(node0.isStringKey());
899:       assertFalse(node0.equals((Object)node1));
900:       assertFalse(boolean2 == boolean1);
901:       assertFalse(boolean2 == boolean0);
902:       
903:       node0.addChildAfter(node1, node0);
904:       assertEquals(39, Node.EMPTY_BLOCK);
905:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
906:       assertEquals(48, Node.DIRECTIVES);
907:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
908:       assertEquals(50, Node.FREE_CALL);
909:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
910:       assertEquals(55, Node.INFERRED_FUNCTION);
911:       assertEquals(36, Node.QUOTED_PROP);
912:       assertEquals(52, Node.LENGTH);
913:       assertEquals(8, Node.FLAG_NO_THROWS);
914:       assertEquals(54, Node.SLASH_V);
915:       assertEquals(53, Node.INPUT_ID);
916:       assertEquals(43, Node.IS_CONSTANT_NAME);
917:       assertEquals(57, Node.LAST_PROP);
918:       assertEquals(30, Node.VAR_ARGS_NAME);
919:       assertEquals(47, Node.IS_DISPATCHER);
920:       assertEquals(40, Node.ORIGINALNAME_PROP);
921:       assertEquals(2, Node.POST_FLAG);
922:       assertEquals(46, Node.IS_NAMESPACE);
923:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
924:       assertEquals(12, Node.COLUMN_BITS);
925:       assertEquals(37, Node.OPT_ARG_NAME);
926:       assertEquals(56, Node.CHANGE_TIME);
927:       assertEquals(32, Node.INCRDECR_PROP);
928:       assertEquals(29, Node.JSDOC_INFO_PROP);
929:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
930:       assertEquals(1, Node.DECR_FLAG);
931:       assertEquals(15, Node.NO_SIDE_EFFECTS);
932:       assertEquals(51, Node.STATIC_SOURCE_FILE);
933:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
934:       assertEquals(57, Node.REFLECTED_OBJECT);
935:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
936:       assertEquals(49, Node.DIRECT_EVAL);
937:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
938:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
939:       assertEquals(4095, Node.COLUMN_MASK);
940:       assertEquals(51, Node.STATIC_SOURCE_FILE);
941:       assertEquals(1, Node.DECR_FLAG);
942:       assertEquals(30, Node.VAR_ARGS_NAME);
943:       assertEquals(49, Node.DIRECT_EVAL);
944:       assertEquals(32, Node.INCRDECR_PROP);
945:       assertEquals(57, Node.LAST_PROP);
946:       assertEquals(12, Node.COLUMN_BITS);
947:       assertEquals(46, Node.IS_NAMESPACE);
948:       assertEquals(37, Node.OPT_ARG_NAME);
949:       assertEquals(2, Node.POST_FLAG);
950:       assertEquals(47, Node.IS_DISPATCHER);
951:       assertEquals(56, Node.CHANGE_TIME);
952:       assertEquals(57, Node.REFLECTED_OBJECT);
953:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
954:       assertEquals(8, Node.FLAG_NO_THROWS);
955:       assertEquals(39, Node.EMPTY_BLOCK);
956:       assertEquals(36, Node.QUOTED_PROP);
957:       assertEquals(52, Node.LENGTH);
958:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
959:       assertEquals(15, Node.NO_SIDE_EFFECTS);
960:       assertEquals(53, Node.INPUT_ID);
961:       assertEquals(29, Node.JSDOC_INFO_PROP);
962:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
963:       assertEquals(55, Node.INFERRED_FUNCTION);
964:       assertEquals(4095, Node.COLUMN_MASK);
965:       assertEquals(43, Node.IS_CONSTANT_NAME);
966:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
967:       assertEquals(48, Node.DIRECTIVES);
968:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
969:       assertEquals(40, Node.ORIGINALNAME_PROP);
970:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
971:       assertEquals(50, Node.FREE_CALL);
972:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
973:       assertEquals(54, Node.SLASH_V);
974:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
975:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
976:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
977:       assertEquals(0, arrayList0.size());
978:       assertTrue(arrayList0.isEmpty());
979:       assertTrue(node0.hasMoreThanOneChild());
980:       assertFalse(node0.isString());
981:       assertFalse(node0.isSwitch());
982:       assertFalse(node0.isCase());
983:       assertFalse(node0.isInc());
984:       assertFalse(node0.isThrow());
985:       assertFalse(node0.isHook());
986:       assertFalse(node0.isIf());
987:       assertFalse(node0.isBreak());
988:       assertEquals(83, node0.getType());
989:       assertFalse(node0.isDelProp());
990:       assertFalse(node0.isEmpty());
991:       assertTrue(node0.hasChildren());
992:       assertFalse(node0.isIn());
993:       assertFalse(node0.isNE());
994:       assertFalse(node0.isTrue());
995:       assertFalse(node0.isNot());
996:       assertFalse(node0.isFunction());
997:       assertFalse(node0.isVoid());
998:       assertFalse(node0.isExprResult());
999:       assertFalse(node0.isComma());
1000:       assertEquals(2, node0.getChildCount());
1001:       assertEquals((-1), node0.getSourcePosition());
1002:       assertFalse(node0.isFalse());
1003:       assertFalse(node0.isGetProp());
1004:       assertFalse(node0.isCast());
1005:       assertFalse(node0.isObjectLit());
1006:       assertTrue(node0.isParamList());
1007:       assertFalse(node0.isDebugger());
1008:       assertFalse(node0.isAnd());
1009:       assertFalse(node0.isWhile());
1010:       assertFalse(node0.isDo());
1011:       assertFalse(node0.isContinue());
1012:       assertFalse(node0.isNew());
1013:       assertFalse(node0.isAdd());
1014:       assertFalse(node0.isAssignAdd());
1015:       assertFalse(node0.isLabel());
1016:       assertFalse(node0.isVar());
1017:       assertFalse(node0.isBlock());
1018:       assertFalse(node0.isReturn());
1019:       assertFalse(node0.isDec());
1020:       assertFalse(node0.isAssign());
1021:       assertFalse(node0.isTypeOf());
1022:       assertFalse(node0.isName());
1023:       assertFalse(node0.isSetterDef());
1024:       assertFalse(node0.isGetElem());
1025:       assertFalse(node0.isCall());
1026:       assertEquals((-1), node0.getLineno());
1027:       assertFalse(node0.isOr());
1028:       assertFalse(node0.isNull());
1029:       assertFalse(node0.isDefaultCase());
1030:       assertFalse(node0.isWith());
1031:       assertFalse(node0.isRegExp());
1032:       assertFalse(node0.isCatch());
1033:       assertFalse(node0.isScript());
1034:       assertFalse(node0.hasOneChild());
1035:       assertFalse(node0.isInstanceOf());
1036:       assertFalse(node0.isTry());
1037:       assertFalse(node0.isFor());
1038:       assertFalse(node0.isThis());
1039:       assertFalse(node0.isGetterDef());
1040:       assertFalse(node0.isLabelName());
1041:       assertFalse(node0.isNumber());
1042:       assertFalse(node0.isArrayLit());
1043:       assertEquals((-1), node0.getCharno());
1044:       assertFalse(node0.isStringKey());
1045:       assertFalse(node1.isTrue());
1046:       assertFalse(node1.isArrayLit());
1047:       assertFalse(node1.isDefaultCase());
1048:       assertFalse(node1.isTry());
1049:       assertFalse(node1.isVoid());
1050:       assertFalse(node1.isEmpty());
1051:       assertFalse(node1.isDebugger());
1052:       assertFalse(node1.isGetterDef());
1053:       assertFalse(node1.isNE());
1054:       assertFalse(node1.isIf());
1055:       assertFalse(node1.isDelProp());
1056:       assertFalse(node1.isFor());
1057:       assertFalse(node1.isCall());
1058:       assertFalse(node1.isCatch());
1059:       assertFalse(node1.isRegExp());
1060:       assertFalse(node1.isBlock());
1061:       assertFalse(node1.isNew());
1062:       assertFalse(node1.isAdd());
1063:       assertEquals((-1), node1.getCharno());
1064:       assertFalse(node1.isSwitch());
1065:       assertFalse(node1.isDo());
1066:       assertFalse(node1.isCase());
1067:       assertFalse(node1.isName());
1068:       assertFalse(node1.isStringKey());
1069:       assertFalse(node1.isNull());
1070:       assertFalse(node1.isOr());
1071:       assertFalse(node1.isAssignAdd());
1072:       assertFalse(node1.isLabel());
1073:       assertEquals(50, node1.getType());
1074:       assertFalse(node1.isParamList());
1075:       assertFalse(node1.isLabelName());
1076:       assertFalse(node1.isVar());
1077:       assertEquals(0, node1.getChildCount());
1078:       assertFalse(node1.isExprResult());
1079:       assertFalse(node1.isScript());
1080:       assertFalse(node1.hasOneChild());
1081:       assertFalse(node1.isAnd());
1082:       assertEquals((-1), node1.getSourcePosition());
1083:       assertFalse(node1.isNumber());
1084:       assertFalse(node1.isObjectLit());
1085:       assertFalse(node1.isNot());
1086:       assertFalse(node1.isGetProp());
1087:       assertFalse(node1.isReturn());
1088:       assertFalse(node1.isThis());
1089:       assertFalse(node1.isBreak());
1090:       assertEquals((-1), node1.getLineno());
1091:       assertFalse(node1.isGetElem());
1092:       assertFalse(node1.isWith());
1093:       assertFalse(node1.isWhile());
1094:       assertFalse(node1.isInstanceOf());
1095:       assertFalse(node1.isTypeOf());
1096:       assertFalse(node1.isHook());
1097:       assertFalse(node1.hasMoreThanOneChild());
1098:       assertFalse(node1.hasChildren());
1099:       assertFalse(node1.isComma());
1100:       assertFalse(node1.isAssign());
1101:       assertFalse(node1.isDec());
1102:       assertFalse(node1.isInc());
1103:       assertFalse(node1.isString());
1104:       assertFalse(node1.isIn());
1105:       assertFalse(node1.isSetterDef());
1106:       assertFalse(node1.isFalse());
1107:       assertFalse(node1.isContinue());
1108:       assertFalse(node1.isThrow());
1109:       assertFalse(node1.isCast());
1110:       assertFalse(node1.isFunction());
1111:       assertFalse(node0.equals((Object)node1));
1112:       assertFalse(node1.equals((Object)node0));
1113:       
1114:       boolean boolean3 = node1.isVoid();
1115:       assertFalse(boolean3);
1116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1117:       assertEquals(1, Node.DECR_FLAG);
1118:       assertEquals(30, Node.VAR_ARGS_NAME);
1119:       assertEquals(49, Node.DIRECT_EVAL);
1120:       assertEquals(32, Node.INCRDECR_PROP);
1121:       assertEquals(57, Node.LAST_PROP);
1122:       assertEquals(12, Node.COLUMN_BITS);
1123:       assertEquals(46, Node.IS_NAMESPACE);
1124:       assertEquals(37, Node.OPT_ARG_NAME);
1125:       assertEquals(2, Node.POST_FLAG);
1126:       assertEquals(47, Node.IS_DISPATCHER);
1127:       assertEquals(56, Node.CHANGE_TIME);
1128:       assertEquals(57, Node.REFLECTED_OBJECT);
1129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1130:       assertEquals(8, Node.FLAG_NO_THROWS);
1131:       assertEquals(39, Node.EMPTY_BLOCK);
1132:       assertEquals(36, Node.QUOTED_PROP);
1133:       assertEquals(52, Node.LENGTH);
1134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1136:       assertEquals(53, Node.INPUT_ID);
1137:       assertEquals(29, Node.JSDOC_INFO_PROP);
1138:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1139:       assertEquals(55, Node.INFERRED_FUNCTION);
1140:       assertEquals(4095, Node.COLUMN_MASK);
1141:       assertEquals(43, Node.IS_CONSTANT_NAME);
1142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1143:       assertEquals(48, Node.DIRECTIVES);
1144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1145:       assertEquals(40, Node.ORIGINALNAME_PROP);
1146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1147:       assertEquals(50, Node.FREE_CALL);
1148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1149:       assertEquals(54, Node.SLASH_V);
1150:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1151:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1152:       assertFalse(node1.isTrue());
1153:       assertFalse(node1.isArrayLit());
1154:       assertFalse(node1.isDefaultCase());
1155:       assertFalse(node1.isTry());
1156:       assertFalse(node1.isVoid());
1157:       assertFalse(node1.isEmpty());
1158:       assertFalse(node1.isDebugger());
1159:       assertFalse(node1.isGetterDef());
1160:       assertFalse(node1.isNE());
1161:       assertFalse(node1.isIf());
1162:       assertFalse(node1.isDelProp());
1163:       assertFalse(node1.isFor());
1164:       assertFalse(node1.isCall());
1165:       assertFalse(node1.isCatch());
1166:       assertFalse(node1.isRegExp());
1167:       assertFalse(node1.isBlock());
1168:       assertFalse(node1.isNew());
1169:       assertFalse(node1.isAdd());
1170:       assertEquals((-1), node1.getCharno());
1171:       assertFalse(node1.isSwitch());
1172:       assertFalse(node1.isDo());
1173:       assertFalse(node1.isCase());
1174:       assertFalse(node1.isName());
1175:       assertFalse(node1.isStringKey());
1176:       assertFalse(node1.isNull());
1177:       assertFalse(node1.isOr());
1178:       assertFalse(node1.isAssignAdd());
1179:       assertFalse(node1.isLabel());
1180:       assertEquals(50, node1.getType());
1181:       assertFalse(node1.isParamList());
1182:       assertFalse(node1.isLabelName());
1183:       assertFalse(node1.isVar());
1184:       assertEquals(0, node1.getChildCount());
1185:       assertFalse(node1.isExprResult());
1186:       assertFalse(node1.isScript());
1187:       assertFalse(node1.hasOneChild());
1188:       assertFalse(node1.isAnd());
1189:       assertEquals((-1), node1.getSourcePosition());
1190:       assertFalse(node1.isNumber());
1191:       assertFalse(node1.isObjectLit());
1192:       assertFalse(node1.isNot());
1193:       assertFalse(node1.isGetProp());
1194:       assertFalse(node1.isReturn());
1195:       assertFalse(node1.isThis());
1196:       assertFalse(node1.isBreak());
1197:       assertEquals((-1), node1.getLineno());
1198:       assertFalse(node1.isGetElem());
1199:       assertFalse(node1.isWith());
1200:       assertFalse(node1.isWhile());
1201:       assertFalse(node1.isInstanceOf());
1202:       assertFalse(node1.isTypeOf());
1203:       assertFalse(node1.isHook());
1204:       assertFalse(node1.hasMoreThanOneChild());
1205:       assertFalse(node1.hasChildren());
1206:       assertFalse(node1.isComma());
1207:       assertFalse(node1.isAssign());
1208:       assertFalse(node1.isDec());
1209:       assertFalse(node1.isInc());
1210:       assertFalse(node1.isString());
1211:       assertFalse(node1.isIn());
1212:       assertFalse(node1.isSetterDef());
1213:       assertFalse(node1.isFalse());
1214:       assertFalse(node1.isContinue());
1215:       assertFalse(node1.isThrow());
1216:       assertFalse(node1.isCast());
1217:       assertFalse(node1.isFunction());
1218:       assertFalse(node1.equals((Object)node0));
1219:       assertTrue(boolean3 == boolean0);
1220:       assertFalse(boolean3 == boolean2);
1221:       assertTrue(boolean3 == boolean1);
1222:       
1223:       // Undeclared exception!
1224:       try { 
1225:         node1.replaceChild(node0, node0);
1226:         fail("Expecting exception: IllegalArgumentException");
1227:       
1228:       } catch(IllegalArgumentException e) {
1229:          //
1230:          // The new child node has siblings.
1231:          //
1232:          verifyException("com.google.common.base.Preconditions", e);
1233:       }
1234:   }
1235: }
RegularFileObject[/tmp/EvoSuite_311_1628160494160/com/google/javascript/rhino/Node_311_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:48:14 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_311_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_311_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_311_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.common.base.Preconditions",
262:       "com.google.javascript.rhino.JSDocInfo",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.Node$AncestorIterable$1",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.AbstractMultimap$Values",
346:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
347:       "com.google.common.collect.AbstractMapBasedMultimap$1",
348:       "com.google.common.collect.Multimaps$Entries",
349:       "com.google.common.collect.AbstractMultimap$Entries",
350:       "com.google.common.collect.AbstractMapBasedMultimap$2",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
356:       "com.google.javascript.rhino.JSDocInfo$Visibility",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.Platform",
359:       "com.google.javascript.rhino.jstype.TemplatizedType",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.NamespaceType",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.Iterators$12"
373:     );
374:   }
375: }

[MASTER] 10:48:14.332 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertNotNull(arrayList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertNotNull(node0);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isAssign();
assertFalse(boolean0);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());

node0.addChildToFront(node0);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertTrue(node0.hasOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());

boolean boolean1 = node0.isName();
assertFalse(boolean1);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertTrue(node0.hasOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertTrue(boolean1 == boolean0);

node0.setWasEmptyNode(false);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertTrue(node0.hasOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());

Node node1 = Node.newString(50, "Object#Key");
assertNotNull(node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(50, node1.getType());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.equals((Object)node0));

boolean boolean2 = node0.hasChildren();
assertTrue(boolean2);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertTrue(node0.hasOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.equals((Object)node1));
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);

node0.addChildAfter(node1, node0);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertTrue(node0.hasMoreThanOneChild());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertEquals(2, node0.getChildCount());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(50, node1.getType());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean3 = node1.isVoid();
assertFalse(boolean3);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(50, node1.getType());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertFalse(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);

node1.replaceChild(node0, node0);

[MASTER] 10:48:39.994 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:40.294 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:40.666 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:40.857 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:41.570 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:41.779 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:41.977 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:42.194 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:42.443 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:42.659 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:42.864 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:43.160 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:43.339 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:43.583 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:43.823 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:44.013 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:44.277 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:44.485 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:44.703 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:44.959 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:45.151 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:45.346 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:45.519 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:45.690 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:45.889 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:46.076 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:48:46.289 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/21
* Done!

* Computation finished
