* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 2078
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1114546791
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:45:28.151 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:45:30.123 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V
[MASTER] 09:45:53.959 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 510 generations, 220202 statements, best individual has fitness: 2827.0
* Minimizing test suite
[MASTER] 09:56:56.149 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 798
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 620
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 101
* Number of covered goals: 101
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 464
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2223
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 580
* Generated 1089 tests with total length 11203
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:58:08.686 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6673833333333333% of time used, but only 67/1089 tests minimized), falling back to using all assertions
[MASTER] 09:58:28.867 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 09:58:40.937 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 09:58:49.518 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_189_1628157529453/com/google/javascript/rhino/Node_189_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_189_1628157529453/com/google/javascript/rhino/Node_189_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:49.518 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:49.518 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:49.521 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 09:58:49.523 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_189_1628157529453/com/google/javascript/rhino/Node_189_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:49 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_189_tmp__ESTest extends Node_189_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((double) (-1272));
21:       assertNotNull(node0);
22:       assertEquals(32, Node.INCRDECR_PROP);
23:       assertEquals(46, Node.IS_NAMESPACE);
24:       assertEquals(37, Node.OPT_ARG_NAME);
25:       assertEquals(1, Node.DECR_FLAG);
26:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
27:       assertEquals(30, Node.VAR_ARGS_NAME);
28:       assertEquals(57, Node.LAST_PROP);
29:       assertEquals(2, Node.POST_FLAG);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
32:       assertEquals(47, Node.IS_DISPATCHER);
33:       assertEquals(52, Node.LENGTH);
34:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
35:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
36:       assertEquals(15, Node.NO_SIDE_EFFECTS);
37:       assertEquals(53, Node.INPUT_ID);
38:       assertEquals(29, Node.JSDOC_INFO_PROP);
39:       assertEquals(49, Node.DIRECT_EVAL);
40:       assertEquals(56, Node.CHANGE_TIME);
41:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
42:       assertEquals(8, Node.FLAG_NO_THROWS);
43:       assertEquals(36, Node.QUOTED_PROP);
44:       assertEquals(57, Node.REFLECTED_OBJECT);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(55, Node.INFERRED_FUNCTION);
47:       assertEquals(39, Node.EMPTY_BLOCK);
48:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
52:       assertEquals(40, Node.ORIGINALNAME_PROP);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(54, Node.SLASH_V);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertFalse(node0.isAssignAdd());
59:       assertFalse(node0.isOr());
60:       assertFalse(node0.isTypeOf());
61:       assertEquals((-1), node0.getLineno());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.isContinue());
64:       assertFalse(node0.hasMoreThanOneChild());
65:       assertFalse(node0.isDo());
66:       assertFalse(node0.isAssign());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isDec());
69:       assertFalse(node0.isWhile());
70:       assertFalse(node0.isLabel());
71:       assertEquals(39, node0.getType());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isAdd());
76:       assertFalse(node0.isExprResult());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isNull());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isWith());
83:       assertEquals(0, node0.getChildCount());
84:       assertFalse(node0.isDefaultCase());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isThis());
88:       assertFalse(node0.isHook());
89:       assertEquals((-1), node0.getCharno());
90:       assertFalse(node0.isTry());
91:       assertFalse(node0.isSwitch());
92:       assertFalse(node0.isArrayLit());
93:       assertFalse(node0.hasOneChild());
94:       assertFalse(node0.isScript());
95:       assertFalse(node0.isStringKey());
96:       assertFalse(node0.isLabelName());
97:       assertFalse(node0.isGetterDef());
98:       assertTrue(node0.isNumber());
99:       assertFalse(node0.isIn());
100:       assertFalse(node0.isEmpty());
101:       assertFalse(node0.isCase());
102:       assertFalse(node0.isFor());
103:       assertFalse(node0.isVoid());
104:       assertFalse(node0.isRegExp());
105:       assertFalse(node0.isInc());
106:       assertFalse(node0.isDelProp());
107:       assertFalse(node0.isIf());
108:       assertFalse(node0.isNE());
109:       assertFalse(node0.isTrue());
110:       assertFalse(node0.isGetProp());
111:       assertFalse(node0.isComma());
112:       assertFalse(node0.isBreak());
113:       assertFalse(node0.isSetterDef());
114:       assertFalse(node0.isFalse());
115:       assertFalse(node0.isThrow());
116:       assertFalse(node0.isDebugger());
117:       assertFalse(node0.isFunction());
118:       assertFalse(node0.isString());
119:       assertFalse(node0.isCast());
120:       assertFalse(node0.isAnd());
121:       assertFalse(node0.isNot());
122:       assertFalse(node0.isObjectLit());
123:       assertEquals((-1), node0.getSourcePosition());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertNotNull(iterable0);
128:       assertEquals(32, Node.INCRDECR_PROP);
129:       assertEquals(46, Node.IS_NAMESPACE);
130:       assertEquals(37, Node.OPT_ARG_NAME);
131:       assertEquals(1, Node.DECR_FLAG);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(30, Node.VAR_ARGS_NAME);
134:       assertEquals(57, Node.LAST_PROP);
135:       assertEquals(2, Node.POST_FLAG);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
138:       assertEquals(47, Node.IS_DISPATCHER);
139:       assertEquals(52, Node.LENGTH);
140:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
141:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
142:       assertEquals(15, Node.NO_SIDE_EFFECTS);
143:       assertEquals(53, Node.INPUT_ID);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(49, Node.DIRECT_EVAL);
146:       assertEquals(56, Node.CHANGE_TIME);
147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
148:       assertEquals(8, Node.FLAG_NO_THROWS);
149:       assertEquals(36, Node.QUOTED_PROP);
150:       assertEquals(57, Node.REFLECTED_OBJECT);
151:       assertEquals(4095, Node.COLUMN_MASK);
152:       assertEquals(55, Node.INFERRED_FUNCTION);
153:       assertEquals(39, Node.EMPTY_BLOCK);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
157:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
158:       assertEquals(40, Node.ORIGINALNAME_PROP);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
161:       assertEquals(43, Node.IS_CONSTANT_NAME);
162:       assertEquals(54, Node.SLASH_V);
163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
164:       assertFalse(node0.isAssignAdd());
165:       assertFalse(node0.isOr());
166:       assertFalse(node0.isTypeOf());
167:       assertEquals((-1), node0.getLineno());
168:       assertFalse(node0.isGetElem());
169:       assertFalse(node0.isContinue());
170:       assertFalse(node0.hasMoreThanOneChild());
171:       assertFalse(node0.isDo());
172:       assertFalse(node0.isAssign());
173:       assertFalse(node0.hasChildren());
174:       assertFalse(node0.isDec());
175:       assertFalse(node0.isWhile());
176:       assertFalse(node0.isLabel());
177:       assertEquals(39, node0.getType());
178:       assertFalse(node0.isReturn());
179:       assertFalse(node0.isNew());
180:       assertFalse(node0.isCall());
181:       assertFalse(node0.isAdd());
182:       assertFalse(node0.isExprResult());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isNull());
185:       assertFalse(node0.isParamList());
186:       assertFalse(node0.isInstanceOf());
187:       assertFalse(node0.isCatch());
188:       assertFalse(node0.isWith());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isDefaultCase());
191:       assertFalse(node0.isVar());
192:       assertFalse(node0.isBlock());
193:       assertFalse(node0.isThis());
194:       assertFalse(node0.isHook());
195:       assertEquals((-1), node0.getCharno());
196:       assertFalse(node0.isTry());
197:       assertFalse(node0.isSwitch());
198:       assertFalse(node0.isArrayLit());
199:       assertFalse(node0.hasOneChild());
200:       assertFalse(node0.isScript());
201:       assertFalse(node0.isStringKey());
202:       assertFalse(node0.isLabelName());
203:       assertFalse(node0.isGetterDef());
204:       assertTrue(node0.isNumber());
205:       assertFalse(node0.isIn());
206:       assertFalse(node0.isEmpty());
207:       assertFalse(node0.isCase());
208:       assertFalse(node0.isFor());
209:       assertFalse(node0.isVoid());
210:       assertFalse(node0.isRegExp());
211:       assertFalse(node0.isInc());
212:       assertFalse(node0.isDelProp());
213:       assertFalse(node0.isIf());
214:       assertFalse(node0.isNE());
215:       assertFalse(node0.isTrue());
216:       assertFalse(node0.isGetProp());
217:       assertFalse(node0.isComma());
218:       assertFalse(node0.isBreak());
219:       assertFalse(node0.isSetterDef());
220:       assertFalse(node0.isFalse());
221:       assertFalse(node0.isThrow());
222:       assertFalse(node0.isDebugger());
223:       assertFalse(node0.isFunction());
224:       assertFalse(node0.isString());
225:       assertFalse(node0.isCast());
226:       assertFalse(node0.isAnd());
227:       assertFalse(node0.isNot());
228:       assertFalse(node0.isObjectLit());
229:       assertEquals((-1), node0.getSourcePosition());
230:       
231:       Node node1 = new Node(155, node0, (-1272), 39);
232:       assertFalse(node1.equals((Object)node0));
233:       assertNotNull(node1);
234:       assertEquals(32, Node.INCRDECR_PROP);
235:       assertEquals(46, Node.IS_NAMESPACE);
236:       assertEquals(37, Node.OPT_ARG_NAME);
237:       assertEquals(1, Node.DECR_FLAG);
238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
239:       assertEquals(30, Node.VAR_ARGS_NAME);
240:       assertEquals(57, Node.LAST_PROP);
241:       assertEquals(2, Node.POST_FLAG);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
244:       assertEquals(47, Node.IS_DISPATCHER);
245:       assertEquals(52, Node.LENGTH);
246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
247:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
248:       assertEquals(15, Node.NO_SIDE_EFFECTS);
249:       assertEquals(53, Node.INPUT_ID);
250:       assertEquals(29, Node.JSDOC_INFO_PROP);
251:       assertEquals(49, Node.DIRECT_EVAL);
252:       assertEquals(56, Node.CHANGE_TIME);
253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
254:       assertEquals(8, Node.FLAG_NO_THROWS);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(57, Node.REFLECTED_OBJECT);
257:       assertEquals(4095, Node.COLUMN_MASK);
258:       assertEquals(55, Node.INFERRED_FUNCTION);
259:       assertEquals(39, Node.EMPTY_BLOCK);
260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
261:       assertEquals(48, Node.DIRECTIVES);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
264:       assertEquals(40, Node.ORIGINALNAME_PROP);
265:       assertEquals(50, Node.FREE_CALL);
266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
267:       assertEquals(43, Node.IS_CONSTANT_NAME);
268:       assertEquals(54, Node.SLASH_V);
269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
270:       assertEquals(30, Node.VAR_ARGS_NAME);
271:       assertEquals(49, Node.DIRECT_EVAL);
272:       assertEquals(15, Node.NO_SIDE_EFFECTS);
273:       assertEquals(51, Node.STATIC_SOURCE_FILE);
274:       assertEquals(52, Node.LENGTH);
275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
276:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
277:       assertEquals(12, Node.COLUMN_BITS);
278:       assertEquals(57, Node.LAST_PROP);
279:       assertEquals(32, Node.INCRDECR_PROP);
280:       assertEquals(1, Node.DECR_FLAG);
281:       assertEquals(50, Node.FREE_CALL);
282:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
283:       assertEquals(47, Node.IS_DISPATCHER);
284:       assertEquals(40, Node.ORIGINALNAME_PROP);
285:       assertEquals(2, Node.POST_FLAG);
286:       assertEquals(46, Node.IS_NAMESPACE);
287:       assertEquals(54, Node.SLASH_V);
288:       assertEquals(43, Node.IS_CONSTANT_NAME);
289:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
290:       assertEquals(55, Node.INFERRED_FUNCTION);
291:       assertEquals(4095, Node.COLUMN_MASK);
292:       assertEquals(36, Node.QUOTED_PROP);
293:       assertEquals(39, Node.EMPTY_BLOCK);
294:       assertEquals(53, Node.INPUT_ID);
295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
296:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
297:       assertEquals(29, Node.JSDOC_INFO_PROP);
298:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
300:       assertEquals(8, Node.FLAG_NO_THROWS);
301:       assertEquals(57, Node.REFLECTED_OBJECT);
302:       assertEquals(37, Node.OPT_ARG_NAME);
303:       assertEquals(56, Node.CHANGE_TIME);
304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertFalse(node0.isAssignAdd());
307:       assertFalse(node0.isOr());
308:       assertFalse(node0.isTypeOf());
309:       assertEquals((-1), node0.getLineno());
310:       assertFalse(node0.isGetElem());
311:       assertFalse(node0.isContinue());
312:       assertFalse(node0.hasMoreThanOneChild());
313:       assertFalse(node0.isDo());
314:       assertFalse(node0.isAssign());
315:       assertFalse(node0.hasChildren());
316:       assertFalse(node0.isDec());
317:       assertFalse(node0.isWhile());
318:       assertFalse(node0.isLabel());
319:       assertEquals(39, node0.getType());
320:       assertFalse(node0.isReturn());
321:       assertFalse(node0.isNew());
322:       assertFalse(node0.isCall());
323:       assertFalse(node0.isAdd());
324:       assertFalse(node0.isExprResult());
325:       assertFalse(node0.isName());
326:       assertFalse(node0.isNull());
327:       assertFalse(node0.isParamList());
328:       assertFalse(node0.isInstanceOf());
329:       assertFalse(node0.isCatch());
330:       assertFalse(node0.isWith());
331:       assertEquals(0, node0.getChildCount());
332:       assertFalse(node0.isDefaultCase());
333:       assertFalse(node0.isVar());
334:       assertFalse(node0.isBlock());
335:       assertFalse(node0.isThis());
336:       assertFalse(node0.isHook());
337:       assertEquals((-1), node0.getCharno());
338:       assertFalse(node0.isTry());
339:       assertFalse(node0.isSwitch());
340:       assertFalse(node0.isArrayLit());
341:       assertFalse(node0.hasOneChild());
342:       assertFalse(node0.isScript());
343:       assertFalse(node0.isStringKey());
344:       assertFalse(node0.isLabelName());
345:       assertFalse(node0.isGetterDef());
346:       assertTrue(node0.isNumber());
347:       assertFalse(node0.isIn());
348:       assertFalse(node0.isEmpty());
349:       assertFalse(node0.isCase());
350:       assertFalse(node0.isFor());
351:       assertFalse(node0.isVoid());
352:       assertFalse(node0.isRegExp());
353:       assertFalse(node0.isInc());
354:       assertFalse(node0.isDelProp());
355:       assertFalse(node0.isIf());
356:       assertFalse(node0.isNE());
357:       assertFalse(node0.isTrue());
358:       assertFalse(node0.isGetProp());
359:       assertFalse(node0.isComma());
360:       assertFalse(node0.isBreak());
361:       assertFalse(node0.isSetterDef());
362:       assertFalse(node0.isFalse());
363:       assertFalse(node0.isThrow());
364:       assertFalse(node0.isDebugger());
365:       assertFalse(node0.isFunction());
366:       assertFalse(node0.isString());
367:       assertFalse(node0.isCast());
368:       assertFalse(node0.isAnd());
369:       assertFalse(node0.isNot());
370:       assertFalse(node0.isObjectLit());
371:       assertEquals((-1), node0.getSourcePosition());
372:       assertFalse(node1.isContinue());
373:       assertFalse(node1.hasMoreThanOneChild());
374:       assertFalse(node1.isReturn());
375:       assertFalse(node1.isLabel());
376:       assertFalse(node1.isOr());
377:       assertFalse(node1.isBlock());
378:       assertFalse(node1.isAdd());
379:       assertFalse(node1.isWhile());
380:       assertFalse(node1.isAssignAdd());
381:       assertFalse(node1.isNew());
382:       assertFalse(node1.isDo());
383:       assertFalse(node1.isVar());
384:       assertFalse(node1.isStringKey());
385:       assertFalse(node1.isNumber());
386:       assertEquals((-1), node1.getSourcePosition());
387:       assertFalse(node1.isParamList());
388:       assertFalse(node1.isLabelName());
389:       assertFalse(node1.isAnd());
390:       assertFalse(node1.isObjectLit());
391:       assertFalse(node1.isNot());
392:       assertFalse(node1.isGetProp());
393:       assertFalse(node1.isDefaultCase());
394:       assertFalse(node1.isCall());
395:       assertFalse(node1.isGetElem());
396:       assertFalse(node1.isEmpty());
397:       assertTrue(node1.hasOneChild());
398:       assertFalse(node1.isTypeOf());
399:       assertFalse(node1.isDec());
400:       assertFalse(node1.isAssign());
401:       assertFalse(node1.isComma());
402:       assertFalse(node1.isExprResult());
403:       assertFalse(node1.isTrue());
404:       assertFalse(node1.isNull());
405:       assertFalse(node1.isDelProp());
406:       assertFalse(node1.isBreak());
407:       assertFalse(node1.isName());
408:       assertFalse(node1.isVoid());
409:       assertEquals(1, node1.getChildCount());
410:       assertFalse(node1.isString());
411:       assertFalse(node1.isIn());
412:       assertFalse(node1.isInc());
413:       assertFalse(node1.isCase());
414:       assertFalse(node1.isFalse());
415:       assertFalse(node1.isThrow());
416:       assertFalse(node1.isGetterDef());
417:       assertFalse(node1.isFunction());
418:       assertFalse(node1.isDebugger());
419:       assertEquals((-1), node1.getCharno());
420:       assertFalse(node1.isSwitch());
421:       assertTrue(node1.isCast());
422:       assertFalse(node1.isArrayLit());
423:       assertFalse(node1.isCatch());
424:       assertFalse(node1.isInstanceOf());
425:       assertFalse(node1.isWith());
426:       assertFalse(node1.isRegExp());
427:       assertFalse(node1.isThis());
428:       assertFalse(node1.isSetterDef());
429:       assertFalse(node1.isScript());
430:       assertFalse(node1.isTry());
431:       assertEquals(155, node1.getType());
432:       assertFalse(node1.isFor());
433:       assertFalse(node1.isHook());
434:       assertTrue(node1.hasChildren());
435:       assertFalse(node1.isNE());
436:       assertEquals((-1), node1.getLineno());
437:       assertFalse(node1.isIf());
438:       
439:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
440:       assertFalse(node0.equals((Object)node1));
441:       assertFalse(node1.equals((Object)node0));
442:       assertNotNull(node_NodeMismatch0);
443:       assertEquals(32, Node.INCRDECR_PROP);
444:       assertEquals(46, Node.IS_NAMESPACE);
445:       assertEquals(37, Node.OPT_ARG_NAME);
446:       assertEquals(1, Node.DECR_FLAG);
447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
448:       assertEquals(30, Node.VAR_ARGS_NAME);
449:       assertEquals(57, Node.LAST_PROP);
450:       assertEquals(2, Node.POST_FLAG);
451:       assertEquals(12, Node.COLUMN_BITS);
452:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
453:       assertEquals(47, Node.IS_DISPATCHER);
454:       assertEquals(52, Node.LENGTH);
455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
456:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
457:       assertEquals(15, Node.NO_SIDE_EFFECTS);
458:       assertEquals(53, Node.INPUT_ID);
459:       assertEquals(29, Node.JSDOC_INFO_PROP);
460:       assertEquals(49, Node.DIRECT_EVAL);
461:       assertEquals(56, Node.CHANGE_TIME);
462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
463:       assertEquals(8, Node.FLAG_NO_THROWS);
464:       assertEquals(36, Node.QUOTED_PROP);
465:       assertEquals(57, Node.REFLECTED_OBJECT);
466:       assertEquals(4095, Node.COLUMN_MASK);
467:       assertEquals(55, Node.INFERRED_FUNCTION);
468:       assertEquals(39, Node.EMPTY_BLOCK);
469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
470:       assertEquals(48, Node.DIRECTIVES);
471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
472:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
473:       assertEquals(40, Node.ORIGINALNAME_PROP);
474:       assertEquals(50, Node.FREE_CALL);
475:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
476:       assertEquals(43, Node.IS_CONSTANT_NAME);
477:       assertEquals(54, Node.SLASH_V);
478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
479:       assertEquals(30, Node.VAR_ARGS_NAME);
480:       assertEquals(49, Node.DIRECT_EVAL);
481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
482:       assertEquals(51, Node.STATIC_SOURCE_FILE);
483:       assertEquals(52, Node.LENGTH);
484:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
485:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
486:       assertEquals(12, Node.COLUMN_BITS);
487:       assertEquals(57, Node.LAST_PROP);
488:       assertEquals(32, Node.INCRDECR_PROP);
489:       assertEquals(1, Node.DECR_FLAG);
490:       assertEquals(50, Node.FREE_CALL);
491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
492:       assertEquals(47, Node.IS_DISPATCHER);
493:       assertEquals(40, Node.ORIGINALNAME_PROP);
494:       assertEquals(2, Node.POST_FLAG);
495:       assertEquals(46, Node.IS_NAMESPACE);
496:       assertEquals(54, Node.SLASH_V);
497:       assertEquals(43, Node.IS_CONSTANT_NAME);
498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
499:       assertEquals(55, Node.INFERRED_FUNCTION);
500:       assertEquals(4095, Node.COLUMN_MASK);
501:       assertEquals(36, Node.QUOTED_PROP);
502:       assertEquals(39, Node.EMPTY_BLOCK);
503:       assertEquals(53, Node.INPUT_ID);
504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
506:       assertEquals(29, Node.JSDOC_INFO_PROP);
507:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
508:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
509:       assertEquals(8, Node.FLAG_NO_THROWS);
510:       assertEquals(57, Node.REFLECTED_OBJECT);
511:       assertEquals(37, Node.OPT_ARG_NAME);
512:       assertEquals(56, Node.CHANGE_TIME);
513:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
514:       assertEquals(48, Node.DIRECTIVES);
515:       assertFalse(node0.isAssignAdd());
516:       assertFalse(node0.isOr());
517:       assertFalse(node0.isTypeOf());
518:       assertEquals((-1), node0.getLineno());
519:       assertFalse(node0.isGetElem());
520:       assertFalse(node0.isContinue());
521:       assertFalse(node0.hasMoreThanOneChild());
522:       assertFalse(node0.isDo());
523:       assertFalse(node0.isAssign());
524:       assertFalse(node0.hasChildren());
525:       assertFalse(node0.isDec());
526:       assertFalse(node0.isWhile());
527:       assertFalse(node0.isLabel());
528:       assertEquals(39, node0.getType());
529:       assertFalse(node0.isReturn());
530:       assertFalse(node0.isNew());
531:       assertFalse(node0.isCall());
532:       assertFalse(node0.isAdd());
533:       assertFalse(node0.isExprResult());
534:       assertFalse(node0.isName());
535:       assertFalse(node0.isNull());
536:       assertFalse(node0.isParamList());
537:       assertFalse(node0.isInstanceOf());
538:       assertFalse(node0.isCatch());
539:       assertFalse(node0.isWith());
540:       assertEquals(0, node0.getChildCount());
541:       assertFalse(node0.isDefaultCase());
542:       assertFalse(node0.isVar());
543:       assertFalse(node0.isBlock());
544:       assertFalse(node0.isThis());
545:       assertFalse(node0.isHook());
546:       assertEquals((-1), node0.getCharno());
547:       assertFalse(node0.isTry());
548:       assertFalse(node0.isSwitch());
549:       assertFalse(node0.isArrayLit());
550:       assertFalse(node0.hasOneChild());
551:       assertFalse(node0.isScript());
552:       assertFalse(node0.isStringKey());
553:       assertFalse(node0.isLabelName());
554:       assertFalse(node0.isGetterDef());
555:       assertTrue(node0.isNumber());
556:       assertFalse(node0.isIn());
557:       assertFalse(node0.isEmpty());
558:       assertFalse(node0.isCase());
559:       assertFalse(node0.isFor());
560:       assertFalse(node0.isVoid());
561:       assertFalse(node0.isRegExp());
562:       assertFalse(node0.isInc());
563:       assertFalse(node0.isDelProp());
564:       assertFalse(node0.isIf());
565:       assertFalse(node0.isNE());
566:       assertFalse(node0.isTrue());
567:       assertFalse(node0.isGetProp());
568:       assertFalse(node0.isComma());
569:       assertFalse(node0.isBreak());
570:       assertFalse(node0.isSetterDef());
571:       assertFalse(node0.isFalse());
572:       assertFalse(node0.isThrow());
573:       assertFalse(node0.isDebugger());
574:       assertFalse(node0.isFunction());
575:       assertFalse(node0.isString());
576:       assertFalse(node0.isCast());
577:       assertFalse(node0.isAnd());
578:       assertFalse(node0.isNot());
579:       assertFalse(node0.isObjectLit());
580:       assertEquals((-1), node0.getSourcePosition());
581:       assertFalse(node1.isContinue());
582:       assertFalse(node1.hasMoreThanOneChild());
583:       assertFalse(node1.isReturn());
584:       assertFalse(node1.isLabel());
585:       assertFalse(node1.isOr());
586:       assertFalse(node1.isBlock());
587:       assertFalse(node1.isAdd());
588:       assertFalse(node1.isWhile());
589:       assertFalse(node1.isAssignAdd());
590:       assertFalse(node1.isNew());
591:       assertFalse(node1.isDo());
592:       assertFalse(node1.isVar());
593:       assertFalse(node1.isStringKey());
594:       assertFalse(node1.isNumber());
595:       assertEquals((-1), node1.getSourcePosition());
596:       assertFalse(node1.isParamList());
597:       assertFalse(node1.isLabelName());
598:       assertFalse(node1.isAnd());
599:       assertFalse(node1.isObjectLit());
600:       assertFalse(node1.isNot());
601:       assertFalse(node1.isGetProp());
602:       assertFalse(node1.isDefaultCase());
603:       assertFalse(node1.isCall());
604:       assertFalse(node1.isGetElem());
605:       assertFalse(node1.isEmpty());
606:       assertTrue(node1.hasOneChild());
607:       assertFalse(node1.isTypeOf());
608:       assertFalse(node1.isDec());
609:       assertFalse(node1.isAssign());
610:       assertFalse(node1.isComma());
611:       assertFalse(node1.isExprResult());
612:       assertFalse(node1.isTrue());
613:       assertFalse(node1.isNull());
614:       assertFalse(node1.isDelProp());
615:       assertFalse(node1.isBreak());
616:       assertFalse(node1.isName());
617:       assertFalse(node1.isVoid());
618:       assertEquals(1, node1.getChildCount());
619:       assertFalse(node1.isString());
620:       assertFalse(node1.isIn());
621:       assertFalse(node1.isInc());
622:       assertFalse(node1.isCase());
623:       assertFalse(node1.isFalse());
624:       assertFalse(node1.isThrow());
625:       assertFalse(node1.isGetterDef());
626:       assertFalse(node1.isFunction());
627:       assertFalse(node1.isDebugger());
628:       assertEquals((-1), node1.getCharno());
629:       assertFalse(node1.isSwitch());
630:       assertTrue(node1.isCast());
631:       assertFalse(node1.isArrayLit());
632:       assertFalse(node1.isCatch());
633:       assertFalse(node1.isInstanceOf());
634:       assertFalse(node1.isWith());
635:       assertFalse(node1.isRegExp());
636:       assertFalse(node1.isThis());
637:       assertFalse(node1.isSetterDef());
638:       assertFalse(node1.isScript());
639:       assertFalse(node1.isTry());
640:       assertEquals(155, node1.getType());
641:       assertFalse(node1.isFor());
642:       assertFalse(node1.isHook());
643:       assertTrue(node1.hasChildren());
644:       assertFalse(node1.isNE());
645:       assertEquals((-1), node1.getLineno());
646:       assertFalse(node1.isIf());
647:       
648:       boolean boolean0 = node_NodeMismatch0.equals("F~f/O5[<");
649:       assertFalse(boolean0);
650:       assertFalse(node0.equals((Object)node1));
651:       assertFalse(node1.equals((Object)node0));
652:       assertEquals(32, Node.INCRDECR_PROP);
653:       assertEquals(46, Node.IS_NAMESPACE);
654:       assertEquals(37, Node.OPT_ARG_NAME);
655:       assertEquals(1, Node.DECR_FLAG);
656:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
657:       assertEquals(30, Node.VAR_ARGS_NAME);
658:       assertEquals(57, Node.LAST_PROP);
659:       assertEquals(2, Node.POST_FLAG);
660:       assertEquals(12, Node.COLUMN_BITS);
661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
662:       assertEquals(47, Node.IS_DISPATCHER);
663:       assertEquals(52, Node.LENGTH);
664:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
665:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
666:       assertEquals(15, Node.NO_SIDE_EFFECTS);
667:       assertEquals(53, Node.INPUT_ID);
668:       assertEquals(29, Node.JSDOC_INFO_PROP);
669:       assertEquals(49, Node.DIRECT_EVAL);
670:       assertEquals(56, Node.CHANGE_TIME);
671:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
672:       assertEquals(8, Node.FLAG_NO_THROWS);
673:       assertEquals(36, Node.QUOTED_PROP);
674:       assertEquals(57, Node.REFLECTED_OBJECT);
675:       assertEquals(4095, Node.COLUMN_MASK);
676:       assertEquals(55, Node.INFERRED_FUNCTION);
677:       assertEquals(39, Node.EMPTY_BLOCK);
678:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
679:       assertEquals(48, Node.DIRECTIVES);
680:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
681:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
682:       assertEquals(40, Node.ORIGINALNAME_PROP);
683:       assertEquals(50, Node.FREE_CALL);
684:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
685:       assertEquals(43, Node.IS_CONSTANT_NAME);
686:       assertEquals(54, Node.SLASH_V);
687:       assertEquals(51, Node.STATIC_SOURCE_FILE);
688:       assertEquals(30, Node.VAR_ARGS_NAME);
689:       assertEquals(49, Node.DIRECT_EVAL);
690:       assertEquals(15, Node.NO_SIDE_EFFECTS);
691:       assertEquals(51, Node.STATIC_SOURCE_FILE);
692:       assertEquals(52, Node.LENGTH);
693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
694:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
695:       assertEquals(12, Node.COLUMN_BITS);
696:       assertEquals(57, Node.LAST_PROP);
697:       assertEquals(32, Node.INCRDECR_PROP);
698:       assertEquals(1, Node.DECR_FLAG);
699:       assertEquals(50, Node.FREE_CALL);
700:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
701:       assertEquals(47, Node.IS_DISPATCHER);
702:       assertEquals(40, Node.ORIGINALNAME_PROP);
703:       assertEquals(2, Node.POST_FLAG);
704:       assertEquals(46, Node.IS_NAMESPACE);
705:       assertEquals(54, Node.SLASH_V);
706:       assertEquals(43, Node.IS_CONSTANT_NAME);
707:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
708:       assertEquals(55, Node.INFERRED_FUNCTION);
709:       assertEquals(4095, Node.COLUMN_MASK);
710:       assertEquals(36, Node.QUOTED_PROP);
711:       assertEquals(39, Node.EMPTY_BLOCK);
712:       assertEquals(53, Node.INPUT_ID);
713:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
714:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
715:       assertEquals(29, Node.JSDOC_INFO_PROP);
716:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
717:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
718:       assertEquals(8, Node.FLAG_NO_THROWS);
719:       assertEquals(57, Node.REFLECTED_OBJECT);
720:       assertEquals(37, Node.OPT_ARG_NAME);
721:       assertEquals(56, Node.CHANGE_TIME);
722:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
723:       assertEquals(48, Node.DIRECTIVES);
724:       assertFalse(node0.isAssignAdd());
725:       assertFalse(node0.isOr());
726:       assertFalse(node0.isTypeOf());
727:       assertEquals((-1), node0.getLineno());
728:       assertFalse(node0.isGetElem());
729:       assertFalse(node0.isContinue());
730:       assertFalse(node0.hasMoreThanOneChild());
731:       assertFalse(node0.isDo());
732:       assertFalse(node0.isAssign());
733:       assertFalse(node0.hasChildren());
734:       assertFalse(node0.isDec());
735:       assertFalse(node0.isWhile());
736:       assertFalse(node0.isLabel());
737:       assertEquals(39, node0.getType());
738:       assertFalse(node0.isReturn());
739:       assertFalse(node0.isNew());
740:       assertFalse(node0.isCall());
741:       assertFalse(node0.isAdd());
742:       assertFalse(node0.isExprResult());
743:       assertFalse(node0.isName());
744:       assertFalse(node0.isNull());
745:       assertFalse(node0.isParamList());
746:       assertFalse(node0.isInstanceOf());
747:       assertFalse(node0.isCatch());
748:       assertFalse(node0.isWith());
749:       assertEquals(0, node0.getChildCount());
750:       assertFalse(node0.isDefaultCase());
751:       assertFalse(node0.isVar());
752:       assertFalse(node0.isBlock());
753:       assertFalse(node0.isThis());
754:       assertFalse(node0.isHook());
755:       assertEquals((-1), node0.getCharno());
756:       assertFalse(node0.isTry());
757:       assertFalse(node0.isSwitch());
758:       assertFalse(node0.isArrayLit());
759:       assertFalse(node0.hasOneChild());
760:       assertFalse(node0.isScript());
761:       assertFalse(node0.isStringKey());
762:       assertFalse(node0.isLabelName());
763:       assertFalse(node0.isGetterDef());
764:       assertTrue(node0.isNumber());
765:       assertFalse(node0.isIn());
766:       assertFalse(node0.isEmpty());
767:       assertFalse(node0.isCase());
768:       assertFalse(node0.isFor());
769:       assertFalse(node0.isVoid());
770:       assertFalse(node0.isRegExp());
771:       assertFalse(node0.isInc());
772:       assertFalse(node0.isDelProp());
773:       assertFalse(node0.isIf());
774:       assertFalse(node0.isNE());
775:       assertFalse(node0.isTrue());
776:       assertFalse(node0.isGetProp());
777:       assertFalse(node0.isComma());
778:       assertFalse(node0.isBreak());
779:       assertFalse(node0.isSetterDef());
780:       assertFalse(node0.isFalse());
781:       assertFalse(node0.isThrow());
782:       assertFalse(node0.isDebugger());
783:       assertFalse(node0.isFunction());
784:       assertFalse(node0.isString());
785:       assertFalse(node0.isCast());
786:       assertFalse(node0.isAnd());
787:       assertFalse(node0.isNot());
788:       assertFalse(node0.isObjectLit());
789:       assertEquals((-1), node0.getSourcePosition());
790:       assertFalse(node1.isContinue());
791:       assertFalse(node1.hasMoreThanOneChild());
792:       assertFalse(node1.isReturn());
793:       assertFalse(node1.isLabel());
794:       assertFalse(node1.isOr());
795:       assertFalse(node1.isBlock());
796:       assertFalse(node1.isAdd());
797:       assertFalse(node1.isWhile());
798:       assertFalse(node1.isAssignAdd());
799:       assertFalse(node1.isNew());
800:       assertFalse(node1.isDo());
801:       assertFalse(node1.isVar());
802:       assertFalse(node1.isStringKey());
803:       assertFalse(node1.isNumber());
804:       assertEquals((-1), node1.getSourcePosition());
805:       assertFalse(node1.isParamList());
806:       assertFalse(node1.isLabelName());
807:       assertFalse(node1.isAnd());
808:       assertFalse(node1.isObjectLit());
809:       assertFalse(node1.isNot());
810:       assertFalse(node1.isGetProp());
811:       assertFalse(node1.isDefaultCase());
812:       assertFalse(node1.isCall());
813:       assertFalse(node1.isGetElem());
814:       assertFalse(node1.isEmpty());
815:       assertTrue(node1.hasOneChild());
816:       assertFalse(node1.isTypeOf());
817:       assertFalse(node1.isDec());
818:       assertFalse(node1.isAssign());
819:       assertFalse(node1.isComma());
820:       assertFalse(node1.isExprResult());
821:       assertFalse(node1.isTrue());
822:       assertFalse(node1.isNull());
823:       assertFalse(node1.isDelProp());
824:       assertFalse(node1.isBreak());
825:       assertFalse(node1.isName());
826:       assertFalse(node1.isVoid());
827:       assertEquals(1, node1.getChildCount());
828:       assertFalse(node1.isString());
829:       assertFalse(node1.isIn());
830:       assertFalse(node1.isInc());
831:       assertFalse(node1.isCase());
832:       assertFalse(node1.isFalse());
833:       assertFalse(node1.isThrow());
834:       assertFalse(node1.isGetterDef());
835:       assertFalse(node1.isFunction());
836:       assertFalse(node1.isDebugger());
837:       assertEquals((-1), node1.getCharno());
838:       assertFalse(node1.isSwitch());
839:       assertTrue(node1.isCast());
840:       assertFalse(node1.isArrayLit());
841:       assertFalse(node1.isCatch());
842:       assertFalse(node1.isInstanceOf());
843:       assertFalse(node1.isWith());
844:       assertFalse(node1.isRegExp());
845:       assertFalse(node1.isThis());
846:       assertFalse(node1.isSetterDef());
847:       assertFalse(node1.isScript());
848:       assertFalse(node1.isTry());
849:       assertEquals(155, node1.getType());
850:       assertFalse(node1.isFor());
851:       assertFalse(node1.isHook());
852:       assertTrue(node1.hasChildren());
853:       assertFalse(node1.isNE());
854:       assertEquals((-1), node1.getLineno());
855:       assertFalse(node1.isIf());
856:   }
857: }
RegularFileObject[/tmp/EvoSuite_189_1628157529453/com/google/javascript/rhino/Node_189_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:49 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_189_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_189_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_189_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 09:58:49.540 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-1272));
assertNotNull(node0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());

Node node1 = new Node(155, node0, (-1272), 39);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertTrue(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertTrue(node1.isCast());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertEquals(155, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertTrue(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertTrue(node1.isCast());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertEquals(155, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());

boolean boolean0 = node_NodeMismatch0.equals("F~f/O5[<");
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertTrue(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertTrue(node1.isCast());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertEquals(155, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());


[MASTER] 09:58:49.677 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_193_1628157529658/com/google/javascript/rhino/Node_193_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_193_1628157529658/com/google/javascript/rhino/Node_193_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:49.677 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:49.677 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:49.677 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 09:58:49.680 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_193_1628157529658/com/google/javascript/rhino/Node_193_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:49 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_193_tmp__ESTest extends Node_193_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((double) (-1272));
21:       assertNotNull(node0);
22:       assertEquals(15, Node.NO_SIDE_EFFECTS);
23:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
24:       assertEquals(54, Node.SLASH_V);
25:       assertEquals(30, Node.VAR_ARGS_NAME);
26:       assertEquals(52, Node.LENGTH);
27:       assertEquals(51, Node.STATIC_SOURCE_FILE);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(57, Node.REFLECTED_OBJECT);
31:       assertEquals(49, Node.DIRECT_EVAL);
32:       assertEquals(2, Node.POST_FLAG);
33:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
34:       assertEquals(8, Node.FLAG_NO_THROWS);
35:       assertEquals(39, Node.EMPTY_BLOCK);
36:       assertEquals(56, Node.CHANGE_TIME);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
39:       assertEquals(55, Node.INFERRED_FUNCTION);
40:       assertEquals(29, Node.JSDOC_INFO_PROP);
41:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
42:       assertEquals(57, Node.LAST_PROP);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(43, Node.IS_CONSTANT_NAME);
45:       assertEquals(36, Node.QUOTED_PROP);
46:       assertEquals(53, Node.INPUT_ID);
47:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
48:       assertEquals(4095, Node.COLUMN_MASK);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
51:       assertEquals(37, Node.OPT_ARG_NAME);
52:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(50, Node.FREE_CALL);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertEquals(32, Node.INCRDECR_PROP);
58:       assertFalse(node0.isWhile());
59:       assertFalse(node0.isContinue());
60:       assertFalse(node0.hasMoreThanOneChild());
61:       assertFalse(node0.isBlock());
62:       assertEquals(39, node0.getType());
63:       assertFalse(node0.isCall());
64:       assertFalse(node0.isName());
65:       assertEquals((-1), node0.getLineno());
66:       assertFalse(node0.isNull());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isOr());
69:       assertFalse(node0.isAssignAdd());
70:       assertFalse(node0.isVar());
71:       assertFalse(node0.isAdd());
72:       assertFalse(node0.isSetterDef());
73:       assertFalse(node0.isDo());
74:       assertFalse(node0.isNew());
75:       assertFalse(node0.isDefaultCase());
76:       assertFalse(node0.isWith());
77:       assertFalse(node0.isScript());
78:       assertFalse(node0.isRegExp());
79:       assertEquals(0, node0.getChildCount());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.isInstanceOf());
82:       assertFalse(node0.isArrayLit());
83:       assertFalse(node0.isLabelName());
84:       assertFalse(node0.isGetterDef());
85:       assertFalse(node0.isFor());
86:       assertFalse(node0.isStringKey());
87:       assertFalse(node0.isParamList());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isHook());
90:       assertFalse(node0.isCase());
91:       assertFalse(node0.isTry());
92:       assertFalse(node0.hasOneChild());
93:       assertFalse(node0.isString());
94:       assertEquals((-1), node0.getCharno());
95:       assertFalse(node0.isSwitch());
96:       assertFalse(node0.isIf());
97:       assertFalse(node0.isDelProp());
98:       assertFalse(node0.isEmpty());
99:       assertFalse(node0.isNE());
100:       assertFalse(node0.isThrow());
101:       assertFalse(node0.isFalse());
102:       assertFalse(node0.isIn());
103:       assertFalse(node0.isInc());
104:       assertFalse(node0.isDebugger());
105:       assertFalse(node0.isObjectLit());
106:       assertFalse(node0.isTrue());
107:       assertFalse(node0.isFunction());
108:       assertFalse(node0.isNot());
109:       assertFalse(node0.isCast());
110:       assertFalse(node0.isAnd());
111:       assertFalse(node0.isExprResult());
112:       assertFalse(node0.isVoid());
113:       assertFalse(node0.isGetElem());
114:       assertFalse(node0.hasChildren());
115:       assertFalse(node0.isBreak());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.isTypeOf());
118:       assertFalse(node0.isDec());
119:       assertEquals((-1), node0.getSourcePosition());
120:       assertFalse(node0.isComma());
121:       assertFalse(node0.isReturn());
122:       assertFalse(node0.isGetProp());
123:       assertTrue(node0.isNumber());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertNotNull(iterable0);
128:       assertEquals(15, Node.NO_SIDE_EFFECTS);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(54, Node.SLASH_V);
131:       assertEquals(30, Node.VAR_ARGS_NAME);
132:       assertEquals(52, Node.LENGTH);
133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
134:       assertEquals(40, Node.ORIGINALNAME_PROP);
135:       assertEquals(46, Node.IS_NAMESPACE);
136:       assertEquals(57, Node.REFLECTED_OBJECT);
137:       assertEquals(49, Node.DIRECT_EVAL);
138:       assertEquals(2, Node.POST_FLAG);
139:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
140:       assertEquals(8, Node.FLAG_NO_THROWS);
141:       assertEquals(39, Node.EMPTY_BLOCK);
142:       assertEquals(56, Node.CHANGE_TIME);
143:       assertEquals(47, Node.IS_DISPATCHER);
144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
145:       assertEquals(55, Node.INFERRED_FUNCTION);
146:       assertEquals(29, Node.JSDOC_INFO_PROP);
147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
148:       assertEquals(57, Node.LAST_PROP);
149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
150:       assertEquals(43, Node.IS_CONSTANT_NAME);
151:       assertEquals(36, Node.QUOTED_PROP);
152:       assertEquals(53, Node.INPUT_ID);
153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
154:       assertEquals(4095, Node.COLUMN_MASK);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
157:       assertEquals(37, Node.OPT_ARG_NAME);
158:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(32, Node.INCRDECR_PROP);
164:       assertFalse(node0.isWhile());
165:       assertFalse(node0.isContinue());
166:       assertFalse(node0.hasMoreThanOneChild());
167:       assertFalse(node0.isBlock());
168:       assertEquals(39, node0.getType());
169:       assertFalse(node0.isCall());
170:       assertFalse(node0.isName());
171:       assertEquals((-1), node0.getLineno());
172:       assertFalse(node0.isNull());
173:       assertFalse(node0.isLabel());
174:       assertFalse(node0.isOr());
175:       assertFalse(node0.isAssignAdd());
176:       assertFalse(node0.isVar());
177:       assertFalse(node0.isAdd());
178:       assertFalse(node0.isSetterDef());
179:       assertFalse(node0.isDo());
180:       assertFalse(node0.isNew());
181:       assertFalse(node0.isDefaultCase());
182:       assertFalse(node0.isWith());
183:       assertFalse(node0.isScript());
184:       assertFalse(node0.isRegExp());
185:       assertEquals(0, node0.getChildCount());
186:       assertFalse(node0.isCatch());
187:       assertFalse(node0.isInstanceOf());
188:       assertFalse(node0.isArrayLit());
189:       assertFalse(node0.isLabelName());
190:       assertFalse(node0.isGetterDef());
191:       assertFalse(node0.isFor());
192:       assertFalse(node0.isStringKey());
193:       assertFalse(node0.isParamList());
194:       assertFalse(node0.isThis());
195:       assertFalse(node0.isHook());
196:       assertFalse(node0.isCase());
197:       assertFalse(node0.isTry());
198:       assertFalse(node0.hasOneChild());
199:       assertFalse(node0.isString());
200:       assertEquals((-1), node0.getCharno());
201:       assertFalse(node0.isSwitch());
202:       assertFalse(node0.isIf());
203:       assertFalse(node0.isDelProp());
204:       assertFalse(node0.isEmpty());
205:       assertFalse(node0.isNE());
206:       assertFalse(node0.isThrow());
207:       assertFalse(node0.isFalse());
208:       assertFalse(node0.isIn());
209:       assertFalse(node0.isInc());
210:       assertFalse(node0.isDebugger());
211:       assertFalse(node0.isObjectLit());
212:       assertFalse(node0.isTrue());
213:       assertFalse(node0.isFunction());
214:       assertFalse(node0.isNot());
215:       assertFalse(node0.isCast());
216:       assertFalse(node0.isAnd());
217:       assertFalse(node0.isExprResult());
218:       assertFalse(node0.isVoid());
219:       assertFalse(node0.isGetElem());
220:       assertFalse(node0.hasChildren());
221:       assertFalse(node0.isBreak());
222:       assertFalse(node0.isAssign());
223:       assertFalse(node0.isTypeOf());
224:       assertFalse(node0.isDec());
225:       assertEquals((-1), node0.getSourcePosition());
226:       assertFalse(node0.isComma());
227:       assertFalse(node0.isReturn());
228:       assertFalse(node0.isGetProp());
229:       assertTrue(node0.isNumber());
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_193_1628157529658/com/google/javascript/rhino/Node_193_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:49 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_193_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_193_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_193_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 09:58:49.681 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-1272));
assertNotNull(node0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());


[MASTER] 09:58:53.162 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_235_1628157533049/com/google/javascript/rhino/Node_235_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_235_1628157533049/com/google/javascript/rhino/Node_235_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:53.162 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:53.162 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:53.163 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 09:58:53.164 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_235_1628157533049/com/google/javascript/rhino/Node_235_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_235_tmp__ESTest extends Node_235_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((double) (-1272));
21:       assertNotNull(node0);
22:       assertEquals(57, Node.REFLECTED_OBJECT);
23:       assertEquals(50, Node.FREE_CALL);
24:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
25:       assertEquals(52, Node.LENGTH);
26:       assertEquals(40, Node.ORIGINALNAME_PROP);
27:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
28:       assertEquals(15, Node.NO_SIDE_EFFECTS);
29:       assertEquals(39, Node.EMPTY_BLOCK);
30:       assertEquals(57, Node.LAST_PROP);
31:       assertEquals(30, Node.VAR_ARGS_NAME);
32:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
33:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
34:       assertEquals(12, Node.COLUMN_BITS);
35:       assertEquals(4095, Node.COLUMN_MASK);
36:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
37:       assertEquals(55, Node.INFERRED_FUNCTION);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(8, Node.FLAG_NO_THROWS);
40:       assertEquals(37, Node.OPT_ARG_NAME);
41:       assertEquals(48, Node.DIRECTIVES);
42:       assertEquals(49, Node.DIRECT_EVAL);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
46:       assertEquals(29, Node.JSDOC_INFO_PROP);
47:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
48:       assertEquals(53, Node.INPUT_ID);
49:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
50:       assertEquals(47, Node.IS_DISPATCHER);
51:       assertEquals(2, Node.POST_FLAG);
52:       assertEquals(51, Node.STATIC_SOURCE_FILE);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(46, Node.IS_NAMESPACE);
57:       assertEquals(54, Node.SLASH_V);
58:       assertFalse(node0.isAdd());
59:       assertFalse(node0.isBlock());
60:       assertFalse(node0.isNew());
61:       assertFalse(node0.isCall());
62:       assertFalse(node0.isWhile());
63:       assertFalse(node0.isDo());
64:       assertEquals(39, node0.getType());
65:       assertFalse(node0.isVar());
66:       assertFalse(node0.isReturn());
67:       assertEquals((-1), node0.getLineno());
68:       assertFalse(node0.isOr());
69:       assertFalse(node0.hasMoreThanOneChild());
70:       assertFalse(node0.isSetterDef());
71:       assertFalse(node0.isCatch());
72:       assertFalse(node0.isTypeOf());
73:       assertFalse(node0.isGetElem());
74:       assertFalse(node0.isTrue());
75:       assertFalse(node0.isNull());
76:       assertFalse(node0.isVoid());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isDebugger());
79:       assertFalse(node0.isFunction());
80:       assertFalse(node0.isExprResult());
81:       assertFalse(node0.isCast());
82:       assertFalse(node0.isAssign());
83:       assertFalse(node0.isDec());
84:       assertFalse(node0.hasChildren());
85:       assertTrue(node0.isNumber());
86:       assertFalse(node0.isGetProp());
87:       assertFalse(node0.isObjectLit());
88:       assertFalse(node0.isContinue());
89:       assertFalse(node0.isNot());
90:       assertEquals((-1), node0.getSourcePosition());
91:       assertFalse(node0.isAnd());
92:       assertFalse(node0.isHook());
93:       assertEquals((-1), node0.getCharno());
94:       assertFalse(node0.isInc());
95:       assertFalse(node0.isFalse());
96:       assertFalse(node0.isString());
97:       assertFalse(node0.isCase());
98:       assertFalse(node0.isThis());
99:       assertFalse(node0.isThrow());
100:       assertFalse(node0.isComma());
101:       assertFalse(node0.isInstanceOf());
102:       assertFalse(node0.isIn());
103:       assertFalse(node0.isDelProp());
104:       assertFalse(node0.isBreak());
105:       assertFalse(node0.isNE());
106:       assertFalse(node0.isIf());
107:       assertFalse(node0.isTry());
108:       assertFalse(node0.hasOneChild());
109:       assertFalse(node0.isArrayLit());
110:       assertFalse(node0.isRegExp());
111:       assertFalse(node0.isScript());
112:       assertFalse(node0.isWith());
113:       assertFalse(node0.isEmpty());
114:       assertFalse(node0.isFor());
115:       assertFalse(node0.isAssignAdd());
116:       assertFalse(node0.isDefaultCase());
117:       assertEquals(0, node0.getChildCount());
118:       assertFalse(node0.isLabel());
119:       assertFalse(node0.isLabelName());
120:       assertFalse(node0.isGetterDef());
121:       assertFalse(node0.isSwitch());
122:       assertFalse(node0.isParamList());
123:       assertFalse(node0.isStringKey());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertNotNull(iterable0);
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       assertEquals(50, Node.FREE_CALL);
130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
131:       assertEquals(52, Node.LENGTH);
132:       assertEquals(40, Node.ORIGINALNAME_PROP);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(15, Node.NO_SIDE_EFFECTS);
135:       assertEquals(39, Node.EMPTY_BLOCK);
136:       assertEquals(57, Node.LAST_PROP);
137:       assertEquals(30, Node.VAR_ARGS_NAME);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(4095, Node.COLUMN_MASK);
142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
143:       assertEquals(55, Node.INFERRED_FUNCTION);
144:       assertEquals(36, Node.QUOTED_PROP);
145:       assertEquals(8, Node.FLAG_NO_THROWS);
146:       assertEquals(37, Node.OPT_ARG_NAME);
147:       assertEquals(48, Node.DIRECTIVES);
148:       assertEquals(49, Node.DIRECT_EVAL);
149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
150:       assertEquals(56, Node.CHANGE_TIME);
151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
152:       assertEquals(29, Node.JSDOC_INFO_PROP);
153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
154:       assertEquals(53, Node.INPUT_ID);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(47, Node.IS_DISPATCHER);
157:       assertEquals(2, Node.POST_FLAG);
158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(1, Node.DECR_FLAG);
161:       assertEquals(43, Node.IS_CONSTANT_NAME);
162:       assertEquals(46, Node.IS_NAMESPACE);
163:       assertEquals(54, Node.SLASH_V);
164:       assertFalse(node0.isAdd());
165:       assertFalse(node0.isBlock());
166:       assertFalse(node0.isNew());
167:       assertFalse(node0.isCall());
168:       assertFalse(node0.isWhile());
169:       assertFalse(node0.isDo());
170:       assertEquals(39, node0.getType());
171:       assertFalse(node0.isVar());
172:       assertFalse(node0.isReturn());
173:       assertEquals((-1), node0.getLineno());
174:       assertFalse(node0.isOr());
175:       assertFalse(node0.hasMoreThanOneChild());
176:       assertFalse(node0.isSetterDef());
177:       assertFalse(node0.isCatch());
178:       assertFalse(node0.isTypeOf());
179:       assertFalse(node0.isGetElem());
180:       assertFalse(node0.isTrue());
181:       assertFalse(node0.isNull());
182:       assertFalse(node0.isVoid());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isDebugger());
185:       assertFalse(node0.isFunction());
186:       assertFalse(node0.isExprResult());
187:       assertFalse(node0.isCast());
188:       assertFalse(node0.isAssign());
189:       assertFalse(node0.isDec());
190:       assertFalse(node0.hasChildren());
191:       assertTrue(node0.isNumber());
192:       assertFalse(node0.isGetProp());
193:       assertFalse(node0.isObjectLit());
194:       assertFalse(node0.isContinue());
195:       assertFalse(node0.isNot());
196:       assertEquals((-1), node0.getSourcePosition());
197:       assertFalse(node0.isAnd());
198:       assertFalse(node0.isHook());
199:       assertEquals((-1), node0.getCharno());
200:       assertFalse(node0.isInc());
201:       assertFalse(node0.isFalse());
202:       assertFalse(node0.isString());
203:       assertFalse(node0.isCase());
204:       assertFalse(node0.isThis());
205:       assertFalse(node0.isThrow());
206:       assertFalse(node0.isComma());
207:       assertFalse(node0.isInstanceOf());
208:       assertFalse(node0.isIn());
209:       assertFalse(node0.isDelProp());
210:       assertFalse(node0.isBreak());
211:       assertFalse(node0.isNE());
212:       assertFalse(node0.isIf());
213:       assertFalse(node0.isTry());
214:       assertFalse(node0.hasOneChild());
215:       assertFalse(node0.isArrayLit());
216:       assertFalse(node0.isRegExp());
217:       assertFalse(node0.isScript());
218:       assertFalse(node0.isWith());
219:       assertFalse(node0.isEmpty());
220:       assertFalse(node0.isFor());
221:       assertFalse(node0.isAssignAdd());
222:       assertFalse(node0.isDefaultCase());
223:       assertEquals(0, node0.getChildCount());
224:       assertFalse(node0.isLabel());
225:       assertFalse(node0.isLabelName());
226:       assertFalse(node0.isGetterDef());
227:       assertFalse(node0.isSwitch());
228:       assertFalse(node0.isParamList());
229:       assertFalse(node0.isStringKey());
230:       
231:       Node node1 = new Node(155, node0, (-1272), 39);
232:       assertFalse(node1.equals((Object)node0));
233:       assertNotNull(node1);
234:       assertEquals(57, Node.REFLECTED_OBJECT);
235:       assertEquals(50, Node.FREE_CALL);
236:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
237:       assertEquals(52, Node.LENGTH);
238:       assertEquals(40, Node.ORIGINALNAME_PROP);
239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
240:       assertEquals(15, Node.NO_SIDE_EFFECTS);
241:       assertEquals(39, Node.EMPTY_BLOCK);
242:       assertEquals(57, Node.LAST_PROP);
243:       assertEquals(30, Node.VAR_ARGS_NAME);
244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
245:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
246:       assertEquals(12, Node.COLUMN_BITS);
247:       assertEquals(4095, Node.COLUMN_MASK);
248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
249:       assertEquals(55, Node.INFERRED_FUNCTION);
250:       assertEquals(36, Node.QUOTED_PROP);
251:       assertEquals(8, Node.FLAG_NO_THROWS);
252:       assertEquals(37, Node.OPT_ARG_NAME);
253:       assertEquals(48, Node.DIRECTIVES);
254:       assertEquals(49, Node.DIRECT_EVAL);
255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
256:       assertEquals(56, Node.CHANGE_TIME);
257:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
258:       assertEquals(29, Node.JSDOC_INFO_PROP);
259:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
260:       assertEquals(53, Node.INPUT_ID);
261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
262:       assertEquals(47, Node.IS_DISPATCHER);
263:       assertEquals(2, Node.POST_FLAG);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(32, Node.INCRDECR_PROP);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(43, Node.IS_CONSTANT_NAME);
268:       assertEquals(46, Node.IS_NAMESPACE);
269:       assertEquals(54, Node.SLASH_V);
270:       assertEquals(49, Node.DIRECT_EVAL);
271:       assertEquals(30, Node.VAR_ARGS_NAME);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
274:       assertEquals(12, Node.COLUMN_BITS);
275:       assertEquals(32, Node.INCRDECR_PROP);
276:       assertEquals(57, Node.LAST_PROP);
277:       assertEquals(37, Node.OPT_ARG_NAME);
278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
279:       assertEquals(2, Node.POST_FLAG);
280:       assertEquals(29, Node.JSDOC_INFO_PROP);
281:       assertEquals(47, Node.IS_DISPATCHER);
282:       assertEquals(57, Node.REFLECTED_OBJECT);
283:       assertEquals(56, Node.CHANGE_TIME);
284:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
285:       assertEquals(53, Node.INPUT_ID);
286:       assertEquals(39, Node.EMPTY_BLOCK);
287:       assertEquals(36, Node.QUOTED_PROP);
288:       assertEquals(55, Node.INFERRED_FUNCTION);
289:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
290:       assertEquals(52, Node.LENGTH);
291:       assertEquals(8, Node.FLAG_NO_THROWS);
292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
293:       assertEquals(43, Node.IS_CONSTANT_NAME);
294:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
295:       assertEquals(48, Node.DIRECTIVES);
296:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
297:       assertEquals(4095, Node.COLUMN_MASK);
298:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
299:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
300:       assertEquals(50, Node.FREE_CALL);
301:       assertEquals(40, Node.ORIGINALNAME_PROP);
302:       assertEquals(46, Node.IS_NAMESPACE);
303:       assertEquals(54, Node.SLASH_V);
304:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
305:       assertEquals(51, Node.STATIC_SOURCE_FILE);
306:       assertFalse(node0.isAdd());
307:       assertFalse(node0.isBlock());
308:       assertFalse(node0.isNew());
309:       assertFalse(node0.isCall());
310:       assertFalse(node0.isWhile());
311:       assertFalse(node0.isDo());
312:       assertEquals(39, node0.getType());
313:       assertFalse(node0.isVar());
314:       assertFalse(node0.isReturn());
315:       assertEquals((-1), node0.getLineno());
316:       assertFalse(node0.isOr());
317:       assertFalse(node0.hasMoreThanOneChild());
318:       assertFalse(node0.isSetterDef());
319:       assertFalse(node0.isCatch());
320:       assertFalse(node0.isTypeOf());
321:       assertFalse(node0.isGetElem());
322:       assertFalse(node0.isTrue());
323:       assertFalse(node0.isNull());
324:       assertFalse(node0.isVoid());
325:       assertFalse(node0.isName());
326:       assertFalse(node0.isDebugger());
327:       assertFalse(node0.isFunction());
328:       assertFalse(node0.isExprResult());
329:       assertFalse(node0.isCast());
330:       assertFalse(node0.isAssign());
331:       assertFalse(node0.isDec());
332:       assertFalse(node0.hasChildren());
333:       assertTrue(node0.isNumber());
334:       assertFalse(node0.isGetProp());
335:       assertFalse(node0.isObjectLit());
336:       assertFalse(node0.isContinue());
337:       assertFalse(node0.isNot());
338:       assertEquals((-1), node0.getSourcePosition());
339:       assertFalse(node0.isAnd());
340:       assertFalse(node0.isHook());
341:       assertEquals((-1), node0.getCharno());
342:       assertFalse(node0.isInc());
343:       assertFalse(node0.isFalse());
344:       assertFalse(node0.isString());
345:       assertFalse(node0.isCase());
346:       assertFalse(node0.isThis());
347:       assertFalse(node0.isThrow());
348:       assertFalse(node0.isComma());
349:       assertFalse(node0.isInstanceOf());
350:       assertFalse(node0.isIn());
351:       assertFalse(node0.isDelProp());
352:       assertFalse(node0.isBreak());
353:       assertFalse(node0.isNE());
354:       assertFalse(node0.isIf());
355:       assertFalse(node0.isTry());
356:       assertFalse(node0.hasOneChild());
357:       assertFalse(node0.isArrayLit());
358:       assertFalse(node0.isRegExp());
359:       assertFalse(node0.isScript());
360:       assertFalse(node0.isWith());
361:       assertFalse(node0.isEmpty());
362:       assertFalse(node0.isFor());
363:       assertFalse(node0.isAssignAdd());
364:       assertFalse(node0.isDefaultCase());
365:       assertEquals(0, node0.getChildCount());
366:       assertFalse(node0.isLabel());
367:       assertFalse(node0.isLabelName());
368:       assertFalse(node0.isGetterDef());
369:       assertFalse(node0.isSwitch());
370:       assertFalse(node0.isParamList());
371:       assertFalse(node0.isStringKey());
372:       assertFalse(node1.isCase());
373:       assertTrue(node1.hasChildren());
374:       assertEquals(1, node1.getChildCount());
375:       assertTrue(node1.hasOneChild());
376:       assertFalse(node1.isThrow());
377:       assertFalse(node1.isEmpty());
378:       assertFalse(node1.isBreak());
379:       assertFalse(node1.isIf());
380:       assertFalse(node1.isDelProp());
381:       assertFalse(node1.isVoid());
382:       assertFalse(node1.isInc());
383:       assertFalse(node1.isTrue());
384:       assertFalse(node1.isNE());
385:       assertFalse(node1.isIn());
386:       assertFalse(node1.isAnd());
387:       assertFalse(node1.isComma());
388:       assertFalse(node1.isFunction());
389:       assertFalse(node1.isExprResult());
390:       assertFalse(node1.isFalse());
391:       assertFalse(node1.isDebugger());
392:       assertFalse(node1.isGetProp());
393:       assertFalse(node1.isString());
394:       assertEquals((-1), node1.getSourcePosition());
395:       assertFalse(node1.isNot());
396:       assertFalse(node1.isObjectLit());
397:       assertFalse(node1.hasMoreThanOneChild());
398:       assertFalse(node1.isContinue());
399:       assertFalse(node1.isWhile());
400:       assertEquals((-1), node1.getLineno());
401:       assertFalse(node1.isAssignAdd());
402:       assertFalse(node1.isDo());
403:       assertFalse(node1.isBlock());
404:       assertFalse(node1.isReturn());
405:       assertFalse(node1.isLabel());
406:       assertFalse(node1.isDec());
407:       assertFalse(node1.isAssign());
408:       assertFalse(node1.isTypeOf());
409:       assertEquals(155, node1.getType());
410:       assertFalse(node1.isGetElem());
411:       assertFalse(node1.isCall());
412:       assertFalse(node1.isVar());
413:       assertFalse(node1.isNew());
414:       assertFalse(node1.isName());
415:       assertFalse(node1.isSetterDef());
416:       assertFalse(node1.isAdd());
417:       assertFalse(node1.isNull());
418:       assertFalse(node1.isOr());
419:       assertFalse(node1.isCatch());
420:       assertFalse(node1.isInstanceOf());
421:       assertFalse(node1.isDefaultCase());
422:       assertFalse(node1.isThis());
423:       assertFalse(node1.isWith());
424:       assertFalse(node1.isRegExp());
425:       assertFalse(node1.isArrayLit());
426:       assertFalse(node1.isHook());
427:       assertFalse(node1.isStringKey());
428:       assertFalse(node1.isFor());
429:       assertTrue(node1.isCast());
430:       assertFalse(node1.isLabelName());
431:       assertFalse(node1.isTry());
432:       assertFalse(node1.isSwitch());
433:       assertFalse(node1.isParamList());
434:       assertEquals((-1), node1.getCharno());
435:       assertFalse(node1.isScript());
436:       assertFalse(node1.isNumber());
437:       assertFalse(node1.isGetterDef());
438:       
439:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
440:       assertFalse(node0.equals((Object)node1));
441:       assertFalse(node1.equals((Object)node0));
442:       assertNotNull(node_NodeMismatch0);
443:       assertEquals(57, Node.REFLECTED_OBJECT);
444:       assertEquals(50, Node.FREE_CALL);
445:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
446:       assertEquals(52, Node.LENGTH);
447:       assertEquals(40, Node.ORIGINALNAME_PROP);
448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
449:       assertEquals(15, Node.NO_SIDE_EFFECTS);
450:       assertEquals(39, Node.EMPTY_BLOCK);
451:       assertEquals(57, Node.LAST_PROP);
452:       assertEquals(30, Node.VAR_ARGS_NAME);
453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
455:       assertEquals(12, Node.COLUMN_BITS);
456:       assertEquals(4095, Node.COLUMN_MASK);
457:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
458:       assertEquals(55, Node.INFERRED_FUNCTION);
459:       assertEquals(36, Node.QUOTED_PROP);
460:       assertEquals(8, Node.FLAG_NO_THROWS);
461:       assertEquals(37, Node.OPT_ARG_NAME);
462:       assertEquals(48, Node.DIRECTIVES);
463:       assertEquals(49, Node.DIRECT_EVAL);
464:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
465:       assertEquals(56, Node.CHANGE_TIME);
466:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
467:       assertEquals(29, Node.JSDOC_INFO_PROP);
468:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
469:       assertEquals(53, Node.INPUT_ID);
470:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
471:       assertEquals(47, Node.IS_DISPATCHER);
472:       assertEquals(2, Node.POST_FLAG);
473:       assertEquals(51, Node.STATIC_SOURCE_FILE);
474:       assertEquals(32, Node.INCRDECR_PROP);
475:       assertEquals(1, Node.DECR_FLAG);
476:       assertEquals(43, Node.IS_CONSTANT_NAME);
477:       assertEquals(46, Node.IS_NAMESPACE);
478:       assertEquals(54, Node.SLASH_V);
479:       assertEquals(49, Node.DIRECT_EVAL);
480:       assertEquals(30, Node.VAR_ARGS_NAME);
481:       assertEquals(1, Node.DECR_FLAG);
482:       assertEquals(15, Node.NO_SIDE_EFFECTS);
483:       assertEquals(12, Node.COLUMN_BITS);
484:       assertEquals(32, Node.INCRDECR_PROP);
485:       assertEquals(57, Node.LAST_PROP);
486:       assertEquals(37, Node.OPT_ARG_NAME);
487:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
488:       assertEquals(2, Node.POST_FLAG);
489:       assertEquals(29, Node.JSDOC_INFO_PROP);
490:       assertEquals(47, Node.IS_DISPATCHER);
491:       assertEquals(57, Node.REFLECTED_OBJECT);
492:       assertEquals(56, Node.CHANGE_TIME);
493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
494:       assertEquals(53, Node.INPUT_ID);
495:       assertEquals(39, Node.EMPTY_BLOCK);
496:       assertEquals(36, Node.QUOTED_PROP);
497:       assertEquals(55, Node.INFERRED_FUNCTION);
498:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
499:       assertEquals(52, Node.LENGTH);
500:       assertEquals(8, Node.FLAG_NO_THROWS);
501:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
502:       assertEquals(43, Node.IS_CONSTANT_NAME);
503:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
504:       assertEquals(48, Node.DIRECTIVES);
505:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
506:       assertEquals(4095, Node.COLUMN_MASK);
507:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
508:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
509:       assertEquals(50, Node.FREE_CALL);
510:       assertEquals(40, Node.ORIGINALNAME_PROP);
511:       assertEquals(46, Node.IS_NAMESPACE);
512:       assertEquals(54, Node.SLASH_V);
513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
515:       assertFalse(node0.isAdd());
516:       assertFalse(node0.isBlock());
517:       assertFalse(node0.isNew());
518:       assertFalse(node0.isCall());
519:       assertFalse(node0.isWhile());
520:       assertFalse(node0.isDo());
521:       assertEquals(39, node0.getType());
522:       assertFalse(node0.isVar());
523:       assertFalse(node0.isReturn());
524:       assertEquals((-1), node0.getLineno());
525:       assertFalse(node0.isOr());
526:       assertFalse(node0.hasMoreThanOneChild());
527:       assertFalse(node0.isSetterDef());
528:       assertFalse(node0.isCatch());
529:       assertFalse(node0.isTypeOf());
530:       assertFalse(node0.isGetElem());
531:       assertFalse(node0.isTrue());
532:       assertFalse(node0.isNull());
533:       assertFalse(node0.isVoid());
534:       assertFalse(node0.isName());
535:       assertFalse(node0.isDebugger());
536:       assertFalse(node0.isFunction());
537:       assertFalse(node0.isExprResult());
538:       assertFalse(node0.isCast());
539:       assertFalse(node0.isAssign());
540:       assertFalse(node0.isDec());
541:       assertFalse(node0.hasChildren());
542:       assertTrue(node0.isNumber());
543:       assertFalse(node0.isGetProp());
544:       assertFalse(node0.isObjectLit());
545:       assertFalse(node0.isContinue());
546:       assertFalse(node0.isNot());
547:       assertEquals((-1), node0.getSourcePosition());
548:       assertFalse(node0.isAnd());
549:       assertFalse(node0.isHook());
550:       assertEquals((-1), node0.getCharno());
551:       assertFalse(node0.isInc());
552:       assertFalse(node0.isFalse());
553:       assertFalse(node0.isString());
554:       assertFalse(node0.isCase());
555:       assertFalse(node0.isThis());
556:       assertFalse(node0.isThrow());
557:       assertFalse(node0.isComma());
558:       assertFalse(node0.isInstanceOf());
559:       assertFalse(node0.isIn());
560:       assertFalse(node0.isDelProp());
561:       assertFalse(node0.isBreak());
562:       assertFalse(node0.isNE());
563:       assertFalse(node0.isIf());
564:       assertFalse(node0.isTry());
565:       assertFalse(node0.hasOneChild());
566:       assertFalse(node0.isArrayLit());
567:       assertFalse(node0.isRegExp());
568:       assertFalse(node0.isScript());
569:       assertFalse(node0.isWith());
570:       assertFalse(node0.isEmpty());
571:       assertFalse(node0.isFor());
572:       assertFalse(node0.isAssignAdd());
573:       assertFalse(node0.isDefaultCase());
574:       assertEquals(0, node0.getChildCount());
575:       assertFalse(node0.isLabel());
576:       assertFalse(node0.isLabelName());
577:       assertFalse(node0.isGetterDef());
578:       assertFalse(node0.isSwitch());
579:       assertFalse(node0.isParamList());
580:       assertFalse(node0.isStringKey());
581:       assertFalse(node1.isCase());
582:       assertTrue(node1.hasChildren());
583:       assertEquals(1, node1.getChildCount());
584:       assertTrue(node1.hasOneChild());
585:       assertFalse(node1.isThrow());
586:       assertFalse(node1.isEmpty());
587:       assertFalse(node1.isBreak());
588:       assertFalse(node1.isIf());
589:       assertFalse(node1.isDelProp());
590:       assertFalse(node1.isVoid());
591:       assertFalse(node1.isInc());
592:       assertFalse(node1.isTrue());
593:       assertFalse(node1.isNE());
594:       assertFalse(node1.isIn());
595:       assertFalse(node1.isAnd());
596:       assertFalse(node1.isComma());
597:       assertFalse(node1.isFunction());
598:       assertFalse(node1.isExprResult());
599:       assertFalse(node1.isFalse());
600:       assertFalse(node1.isDebugger());
601:       assertFalse(node1.isGetProp());
602:       assertFalse(node1.isString());
603:       assertEquals((-1), node1.getSourcePosition());
604:       assertFalse(node1.isNot());
605:       assertFalse(node1.isObjectLit());
606:       assertFalse(node1.hasMoreThanOneChild());
607:       assertFalse(node1.isContinue());
608:       assertFalse(node1.isWhile());
609:       assertEquals((-1), node1.getLineno());
610:       assertFalse(node1.isAssignAdd());
611:       assertFalse(node1.isDo());
612:       assertFalse(node1.isBlock());
613:       assertFalse(node1.isReturn());
614:       assertFalse(node1.isLabel());
615:       assertFalse(node1.isDec());
616:       assertFalse(node1.isAssign());
617:       assertFalse(node1.isTypeOf());
618:       assertEquals(155, node1.getType());
619:       assertFalse(node1.isGetElem());
620:       assertFalse(node1.isCall());
621:       assertFalse(node1.isVar());
622:       assertFalse(node1.isNew());
623:       assertFalse(node1.isName());
624:       assertFalse(node1.isSetterDef());
625:       assertFalse(node1.isAdd());
626:       assertFalse(node1.isNull());
627:       assertFalse(node1.isOr());
628:       assertFalse(node1.isCatch());
629:       assertFalse(node1.isInstanceOf());
630:       assertFalse(node1.isDefaultCase());
631:       assertFalse(node1.isThis());
632:       assertFalse(node1.isWith());
633:       assertFalse(node1.isRegExp());
634:       assertFalse(node1.isArrayLit());
635:       assertFalse(node1.isHook());
636:       assertFalse(node1.isStringKey());
637:       assertFalse(node1.isFor());
638:       assertTrue(node1.isCast());
639:       assertFalse(node1.isLabelName());
640:       assertFalse(node1.isTry());
641:       assertFalse(node1.isSwitch());
642:       assertFalse(node1.isParamList());
643:       assertEquals((-1), node1.getCharno());
644:       assertFalse(node1.isScript());
645:       assertFalse(node1.isNumber());
646:       assertFalse(node1.isGetterDef());
647:       
648:       Node node2 = node1.removeFirstChild();
649:       assertFalse(node0.equals((Object)node1));
650:       assertFalse(node1.equals((Object)node0));
651:       assertFalse(node2.equals((Object)node1));
652:       assertNotNull(node2);
653:       assertEquals(57, Node.REFLECTED_OBJECT);
654:       assertEquals(50, Node.FREE_CALL);
655:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
656:       assertEquals(52, Node.LENGTH);
657:       assertEquals(40, Node.ORIGINALNAME_PROP);
658:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
659:       assertEquals(15, Node.NO_SIDE_EFFECTS);
660:       assertEquals(39, Node.EMPTY_BLOCK);
661:       assertEquals(57, Node.LAST_PROP);
662:       assertEquals(30, Node.VAR_ARGS_NAME);
663:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
665:       assertEquals(12, Node.COLUMN_BITS);
666:       assertEquals(4095, Node.COLUMN_MASK);
667:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
668:       assertEquals(55, Node.INFERRED_FUNCTION);
669:       assertEquals(36, Node.QUOTED_PROP);
670:       assertEquals(8, Node.FLAG_NO_THROWS);
671:       assertEquals(37, Node.OPT_ARG_NAME);
672:       assertEquals(48, Node.DIRECTIVES);
673:       assertEquals(49, Node.DIRECT_EVAL);
674:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
675:       assertEquals(56, Node.CHANGE_TIME);
676:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
679:       assertEquals(53, Node.INPUT_ID);
680:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
681:       assertEquals(47, Node.IS_DISPATCHER);
682:       assertEquals(2, Node.POST_FLAG);
683:       assertEquals(51, Node.STATIC_SOURCE_FILE);
684:       assertEquals(32, Node.INCRDECR_PROP);
685:       assertEquals(1, Node.DECR_FLAG);
686:       assertEquals(43, Node.IS_CONSTANT_NAME);
687:       assertEquals(46, Node.IS_NAMESPACE);
688:       assertEquals(54, Node.SLASH_V);
689:       assertEquals(49, Node.DIRECT_EVAL);
690:       assertEquals(30, Node.VAR_ARGS_NAME);
691:       assertEquals(1, Node.DECR_FLAG);
692:       assertEquals(15, Node.NO_SIDE_EFFECTS);
693:       assertEquals(12, Node.COLUMN_BITS);
694:       assertEquals(32, Node.INCRDECR_PROP);
695:       assertEquals(57, Node.LAST_PROP);
696:       assertEquals(37, Node.OPT_ARG_NAME);
697:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
698:       assertEquals(2, Node.POST_FLAG);
699:       assertEquals(29, Node.JSDOC_INFO_PROP);
700:       assertEquals(47, Node.IS_DISPATCHER);
701:       assertEquals(57, Node.REFLECTED_OBJECT);
702:       assertEquals(56, Node.CHANGE_TIME);
703:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
704:       assertEquals(53, Node.INPUT_ID);
705:       assertEquals(39, Node.EMPTY_BLOCK);
706:       assertEquals(36, Node.QUOTED_PROP);
707:       assertEquals(55, Node.INFERRED_FUNCTION);
708:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
709:       assertEquals(52, Node.LENGTH);
710:       assertEquals(8, Node.FLAG_NO_THROWS);
711:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
712:       assertEquals(43, Node.IS_CONSTANT_NAME);
713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
714:       assertEquals(48, Node.DIRECTIVES);
715:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
716:       assertEquals(4095, Node.COLUMN_MASK);
717:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
718:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
719:       assertEquals(50, Node.FREE_CALL);
720:       assertEquals(40, Node.ORIGINALNAME_PROP);
721:       assertEquals(46, Node.IS_NAMESPACE);
722:       assertEquals(54, Node.SLASH_V);
723:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
724:       assertEquals(51, Node.STATIC_SOURCE_FILE);
725:       assertEquals(36, Node.QUOTED_PROP);
726:       assertEquals(53, Node.INPUT_ID);
727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
728:       assertEquals(43, Node.IS_CONSTANT_NAME);
729:       assertEquals(56, Node.CHANGE_TIME);
730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
731:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
732:       assertEquals(8, Node.FLAG_NO_THROWS);
733:       assertEquals(39, Node.EMPTY_BLOCK);
734:       assertEquals(2, Node.POST_FLAG);
735:       assertEquals(47, Node.IS_DISPATCHER);
736:       assertEquals(29, Node.JSDOC_INFO_PROP);
737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
738:       assertEquals(55, Node.INFERRED_FUNCTION);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(57, Node.LAST_PROP);
741:       assertEquals(54, Node.SLASH_V);
742:       assertEquals(15, Node.NO_SIDE_EFFECTS);
743:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
744:       assertEquals(52, Node.LENGTH);
745:       assertEquals(30, Node.VAR_ARGS_NAME);
746:       assertEquals(40, Node.ORIGINALNAME_PROP);
747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
748:       assertEquals(57, Node.REFLECTED_OBJECT);
749:       assertEquals(49, Node.DIRECT_EVAL);
750:       assertEquals(46, Node.IS_NAMESPACE);
751:       assertEquals(37, Node.OPT_ARG_NAME);
752:       assertEquals(48, Node.DIRECTIVES);
753:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
754:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
755:       assertEquals(50, Node.FREE_CALL);
756:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
757:       assertEquals(4095, Node.COLUMN_MASK);
758:       assertEquals(12, Node.COLUMN_BITS);
759:       assertEquals(1, Node.DECR_FLAG);
760:       assertEquals(32, Node.INCRDECR_PROP);
761:       assertFalse(node0.isAdd());
762:       assertFalse(node0.isBlock());
763:       assertFalse(node0.isNew());
764:       assertFalse(node0.isCall());
765:       assertFalse(node0.isWhile());
766:       assertFalse(node0.isDo());
767:       assertEquals(39, node0.getType());
768:       assertFalse(node0.isVar());
769:       assertFalse(node0.isReturn());
770:       assertEquals((-1), node0.getLineno());
771:       assertFalse(node0.isOr());
772:       assertFalse(node0.hasMoreThanOneChild());
773:       assertFalse(node0.isSetterDef());
774:       assertFalse(node0.isCatch());
775:       assertFalse(node0.isTypeOf());
776:       assertFalse(node0.isGetElem());
777:       assertFalse(node0.isTrue());
778:       assertFalse(node0.isNull());
779:       assertFalse(node0.isVoid());
780:       assertFalse(node0.isName());
781:       assertFalse(node0.isDebugger());
782:       assertFalse(node0.isFunction());
783:       assertFalse(node0.isExprResult());
784:       assertFalse(node0.isCast());
785:       assertFalse(node0.isAssign());
786:       assertFalse(node0.isDec());
787:       assertFalse(node0.hasChildren());
788:       assertTrue(node0.isNumber());
789:       assertFalse(node0.isGetProp());
790:       assertFalse(node0.isObjectLit());
791:       assertFalse(node0.isContinue());
792:       assertFalse(node0.isNot());
793:       assertEquals((-1), node0.getSourcePosition());
794:       assertFalse(node0.isAnd());
795:       assertFalse(node0.isHook());
796:       assertEquals((-1), node0.getCharno());
797:       assertFalse(node0.isInc());
798:       assertFalse(node0.isFalse());
799:       assertFalse(node0.isString());
800:       assertFalse(node0.isCase());
801:       assertFalse(node0.isThis());
802:       assertFalse(node0.isThrow());
803:       assertFalse(node0.isComma());
804:       assertFalse(node0.isInstanceOf());
805:       assertFalse(node0.isIn());
806:       assertFalse(node0.isDelProp());
807:       assertFalse(node0.isBreak());
808:       assertFalse(node0.isNE());
809:       assertFalse(node0.isIf());
810:       assertFalse(node0.isTry());
811:       assertFalse(node0.hasOneChild());
812:       assertFalse(node0.isArrayLit());
813:       assertFalse(node0.isRegExp());
814:       assertFalse(node0.isScript());
815:       assertFalse(node0.isWith());
816:       assertFalse(node0.isEmpty());
817:       assertFalse(node0.isFor());
818:       assertFalse(node0.isAssignAdd());
819:       assertFalse(node0.isDefaultCase());
820:       assertEquals(0, node0.getChildCount());
821:       assertFalse(node0.isLabel());
822:       assertFalse(node0.isLabelName());
823:       assertFalse(node0.isGetterDef());
824:       assertFalse(node0.isSwitch());
825:       assertFalse(node0.isParamList());
826:       assertFalse(node0.isStringKey());
827:       assertFalse(node1.isCase());
828:       assertFalse(node1.isThrow());
829:       assertFalse(node1.isEmpty());
830:       assertFalse(node1.isBreak());
831:       assertFalse(node1.isIf());
832:       assertFalse(node1.isDelProp());
833:       assertFalse(node1.isVoid());
834:       assertFalse(node1.isInc());
835:       assertFalse(node1.isTrue());
836:       assertFalse(node1.isNE());
837:       assertFalse(node1.isIn());
838:       assertFalse(node1.isAnd());
839:       assertFalse(node1.isComma());
840:       assertFalse(node1.isFunction());
841:       assertFalse(node1.isExprResult());
842:       assertFalse(node1.isFalse());
843:       assertFalse(node1.isDebugger());
844:       assertFalse(node1.isGetProp());
845:       assertFalse(node1.isString());
846:       assertEquals((-1), node1.getSourcePosition());
847:       assertFalse(node1.isNot());
848:       assertFalse(node1.isObjectLit());
849:       assertFalse(node1.hasMoreThanOneChild());
850:       assertFalse(node1.isContinue());
851:       assertFalse(node1.isWhile());
852:       assertEquals((-1), node1.getLineno());
853:       assertFalse(node1.isAssignAdd());
854:       assertFalse(node1.isDo());
855:       assertFalse(node1.isBlock());
856:       assertFalse(node1.isReturn());
857:       assertFalse(node1.isLabel());
858:       assertFalse(node1.hasChildren());
859:       assertFalse(node1.isDec());
860:       assertFalse(node1.isAssign());
861:       assertFalse(node1.isTypeOf());
862:       assertEquals(155, node1.getType());
863:       assertFalse(node1.isGetElem());
864:       assertFalse(node1.isCall());
865:       assertFalse(node1.isVar());
866:       assertFalse(node1.isNew());
867:       assertFalse(node1.isName());
868:       assertFalse(node1.isSetterDef());
869:       assertFalse(node1.isAdd());
870:       assertFalse(node1.isNull());
871:       assertFalse(node1.isOr());
872:       assertFalse(node1.isCatch());
873:       assertFalse(node1.isInstanceOf());
874:       assertFalse(node1.isDefaultCase());
875:       assertFalse(node1.isThis());
876:       assertFalse(node1.isWith());
877:       assertEquals(0, node1.getChildCount());
878:       assertFalse(node1.isRegExp());
879:       assertFalse(node1.isArrayLit());
880:       assertFalse(node1.isHook());
881:       assertFalse(node1.isStringKey());
882:       assertFalse(node1.isFor());
883:       assertTrue(node1.isCast());
884:       assertFalse(node1.hasOneChild());
885:       assertFalse(node1.isLabelName());
886:       assertFalse(node1.isTry());
887:       assertFalse(node1.isSwitch());
888:       assertFalse(node1.isParamList());
889:       assertEquals((-1), node1.getCharno());
890:       assertFalse(node1.isScript());
891:       assertFalse(node1.isNumber());
892:       assertFalse(node1.isGetterDef());
893:       assertFalse(node2.isExprResult());
894:       assertFalse(node2.isScript());
895:       assertFalse(node2.isNot());
896:       assertFalse(node2.isWith());
897:       assertFalse(node2.isObjectLit());
898:       assertFalse(node2.isInstanceOf());
899:       assertFalse(node2.isCast());
900:       assertFalse(node2.isAnd());
901:       assertFalse(node2.isLabelName());
902:       assertFalse(node2.isFalse());
903:       assertFalse(node2.isOr());
904:       assertFalse(node2.isLabel());
905:       assertFalse(node2.isThrow());
906:       assertFalse(node2.isAssignAdd());
907:       assertFalse(node2.isDo());
908:       assertEquals(39, node2.getType());
909:       assertFalse(node2.isInc());
910:       assertEquals((-1), node2.getCharno());
911:       assertFalse(node2.hasMoreThanOneChild());
912:       assertEquals((-1), node2.getLineno());
913:       assertFalse(node2.isStringKey());
914:       assertFalse(node2.isSwitch());
915:       assertFalse(node2.isThis());
916:       assertFalse(node2.isFor());
917:       assertFalse(node2.isGetterDef());
918:       assertFalse(node2.isHook());
919:       assertFalse(node2.hasOneChild());
920:       assertFalse(node2.isBlock());
921:       assertFalse(node2.isCase());
922:       assertFalse(node2.isTry());
923:       assertFalse(node2.isDefaultCase());
924:       assertFalse(node2.isTrue());
925:       assertFalse(node2.isDebugger());
926:       assertFalse(node2.isFunction());
927:       assertFalse(node2.isRegExp());
928:       assertFalse(node2.isArrayLit());
929:       assertFalse(node2.isCatch());
930:       assertFalse(node2.isVoid());
931:       assertFalse(node2.isParamList());
932:       assertFalse(node2.isDelProp());
933:       assertFalse(node2.isIf());
934:       assertFalse(node2.isSetterDef());
935:       assertFalse(node2.isEmpty());
936:       assertFalse(node2.isNE());
937:       assertFalse(node2.isNull());
938:       assertEquals(0, node2.getChildCount());
939:       assertFalse(node2.isIn());
940:       assertFalse(node2.isVar());
941:       assertFalse(node2.isAdd());
942:       assertFalse(node2.isNew());
943:       assertFalse(node2.isWhile());
944:       assertFalse(node2.isString());
945:       assertFalse(node2.isContinue());
946:       assertFalse(node2.isCall());
947:       assertFalse(node2.isName());
948:       assertFalse(node2.hasChildren());
949:       assertFalse(node2.isDec());
950:       assertFalse(node2.isBreak());
951:       assertEquals((-1), node2.getSourcePosition());
952:       assertFalse(node2.isGetElem());
953:       assertFalse(node2.isComma());
954:       assertFalse(node2.isAssign());
955:       assertFalse(node2.isTypeOf());
956:       assertFalse(node2.isReturn());
957:       assertFalse(node2.isGetProp());
958:       assertTrue(node2.isNumber());
959:       assertSame(node0, node2);
960:       assertSame(node2, node0);
961:       
962:       boolean boolean0 = node_NodeMismatch0.equals("F~f/O5[<");
963:       assertFalse(boolean0);
964:       assertFalse(node0.equals((Object)node1));
965:       assertFalse(node1.equals((Object)node0));
966:       assertFalse(node1.equals((Object)node2));
967:       assertEquals(57, Node.REFLECTED_OBJECT);
968:       assertEquals(50, Node.FREE_CALL);
969:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
970:       assertEquals(52, Node.LENGTH);
971:       assertEquals(40, Node.ORIGINALNAME_PROP);
972:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
973:       assertEquals(15, Node.NO_SIDE_EFFECTS);
974:       assertEquals(39, Node.EMPTY_BLOCK);
975:       assertEquals(57, Node.LAST_PROP);
976:       assertEquals(30, Node.VAR_ARGS_NAME);
977:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
978:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
979:       assertEquals(12, Node.COLUMN_BITS);
980:       assertEquals(4095, Node.COLUMN_MASK);
981:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
982:       assertEquals(55, Node.INFERRED_FUNCTION);
983:       assertEquals(36, Node.QUOTED_PROP);
984:       assertEquals(8, Node.FLAG_NO_THROWS);
985:       assertEquals(37, Node.OPT_ARG_NAME);
986:       assertEquals(48, Node.DIRECTIVES);
987:       assertEquals(49, Node.DIRECT_EVAL);
988:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
989:       assertEquals(56, Node.CHANGE_TIME);
990:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
991:       assertEquals(29, Node.JSDOC_INFO_PROP);
992:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
993:       assertEquals(53, Node.INPUT_ID);
994:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
995:       assertEquals(47, Node.IS_DISPATCHER);
996:       assertEquals(2, Node.POST_FLAG);
997:       assertEquals(51, Node.STATIC_SOURCE_FILE);
998:       assertEquals(32, Node.INCRDECR_PROP);
999:       assertEquals(1, Node.DECR_FLAG);
1000:       assertEquals(43, Node.IS_CONSTANT_NAME);
1001:       assertEquals(46, Node.IS_NAMESPACE);
1002:       assertEquals(54, Node.SLASH_V);
1003:       assertEquals(49, Node.DIRECT_EVAL);
1004:       assertEquals(30, Node.VAR_ARGS_NAME);
1005:       assertEquals(1, Node.DECR_FLAG);
1006:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1007:       assertEquals(12, Node.COLUMN_BITS);
1008:       assertEquals(32, Node.INCRDECR_PROP);
1009:       assertEquals(57, Node.LAST_PROP);
1010:       assertEquals(37, Node.OPT_ARG_NAME);
1011:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1012:       assertEquals(2, Node.POST_FLAG);
1013:       assertEquals(29, Node.JSDOC_INFO_PROP);
1014:       assertEquals(47, Node.IS_DISPATCHER);
1015:       assertEquals(57, Node.REFLECTED_OBJECT);
1016:       assertEquals(56, Node.CHANGE_TIME);
1017:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1018:       assertEquals(53, Node.INPUT_ID);
1019:       assertEquals(39, Node.EMPTY_BLOCK);
1020:       assertEquals(36, Node.QUOTED_PROP);
1021:       assertEquals(55, Node.INFERRED_FUNCTION);
1022:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1023:       assertEquals(52, Node.LENGTH);
1024:       assertEquals(8, Node.FLAG_NO_THROWS);
1025:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1026:       assertEquals(43, Node.IS_CONSTANT_NAME);
1027:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1028:       assertEquals(48, Node.DIRECTIVES);
1029:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1030:       assertEquals(4095, Node.COLUMN_MASK);
1031:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1032:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1033:       assertEquals(50, Node.FREE_CALL);
1034:       assertEquals(40, Node.ORIGINALNAME_PROP);
1035:       assertEquals(46, Node.IS_NAMESPACE);
1036:       assertEquals(54, Node.SLASH_V);
1037:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1038:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1039:       assertFalse(node0.isAdd());
1040:       assertFalse(node0.isBlock());
1041:       assertFalse(node0.isNew());
1042:       assertFalse(node0.isCall());
1043:       assertFalse(node0.isWhile());
1044:       assertFalse(node0.isDo());
1045:       assertEquals(39, node0.getType());
1046:       assertFalse(node0.isVar());
1047:       assertFalse(node0.isReturn());
1048:       assertEquals((-1), node0.getLineno());
1049:       assertFalse(node0.isOr());
1050:       assertFalse(node0.hasMoreThanOneChild());
1051:       assertFalse(node0.isSetterDef());
1052:       assertFalse(node0.isCatch());
1053:       assertFalse(node0.isTypeOf());
1054:       assertFalse(node0.isGetElem());
1055:       assertFalse(node0.isTrue());
1056:       assertFalse(node0.isNull());
1057:       assertFalse(node0.isVoid());
1058:       assertFalse(node0.isName());
1059:       assertFalse(node0.isDebugger());
1060:       assertFalse(node0.isFunction());
1061:       assertFalse(node0.isExprResult());
1062:       assertFalse(node0.isCast());
1063:       assertFalse(node0.isAssign());
1064:       assertFalse(node0.isDec());
1065:       assertFalse(node0.hasChildren());
1066:       assertTrue(node0.isNumber());
1067:       assertFalse(node0.isGetProp());
1068:       assertFalse(node0.isObjectLit());
1069:       assertFalse(node0.isContinue());
1070:       assertFalse(node0.isNot());
1071:       assertEquals((-1), node0.getSourcePosition());
1072:       assertFalse(node0.isAnd());
1073:       assertFalse(node0.isHook());
1074:       assertEquals((-1), node0.getCharno());
1075:       assertFalse(node0.isInc());
1076:       assertFalse(node0.isFalse());
1077:       assertFalse(node0.isString());
1078:       assertFalse(node0.isCase());
1079:       assertFalse(node0.isThis());
1080:       assertFalse(node0.isThrow());
1081:       assertFalse(node0.isComma());
1082:       assertFalse(node0.isInstanceOf());
1083:       assertFalse(node0.isIn());
1084:       assertFalse(node0.isDelProp());
1085:       assertFalse(node0.isBreak());
1086:       assertFalse(node0.isNE());
1087:       assertFalse(node0.isIf());
1088:       assertFalse(node0.isTry());
1089:       assertFalse(node0.hasOneChild());
1090:       assertFalse(node0.isArrayLit());
1091:       assertFalse(node0.isRegExp());
1092:       assertFalse(node0.isScript());
1093:       assertFalse(node0.isWith());
1094:       assertFalse(node0.isEmpty());
1095:       assertFalse(node0.isFor());
1096:       assertFalse(node0.isAssignAdd());
1097:       assertFalse(node0.isDefaultCase());
1098:       assertEquals(0, node0.getChildCount());
1099:       assertFalse(node0.isLabel());
1100:       assertFalse(node0.isLabelName());
1101:       assertFalse(node0.isGetterDef());
1102:       assertFalse(node0.isSwitch());
1103:       assertFalse(node0.isParamList());
1104:       assertFalse(node0.isStringKey());
1105:       assertFalse(node1.isCase());
1106:       assertFalse(node1.isThrow());
1107:       assertFalse(node1.isEmpty());
1108:       assertFalse(node1.isBreak());
1109:       assertFalse(node1.isIf());
1110:       assertFalse(node1.isDelProp());
1111:       assertFalse(node1.isVoid());
1112:       assertFalse(node1.isInc());
1113:       assertFalse(node1.isTrue());
1114:       assertFalse(node1.isNE());
1115:       assertFalse(node1.isIn());
1116:       assertFalse(node1.isAnd());
1117:       assertFalse(node1.isComma());
1118:       assertFalse(node1.isFunction());
1119:       assertFalse(node1.isExprResult());
1120:       assertFalse(node1.isFalse());
1121:       assertFalse(node1.isDebugger());
1122:       assertFalse(node1.isGetProp());
1123:       assertFalse(node1.isString());
1124:       assertEquals((-1), node1.getSourcePosition());
1125:       assertFalse(node1.isNot());
1126:       assertFalse(node1.isObjectLit());
1127:       assertFalse(node1.hasMoreThanOneChild());
1128:       assertFalse(node1.isContinue());
1129:       assertFalse(node1.isWhile());
1130:       assertEquals((-1), node1.getLineno());
1131:       assertFalse(node1.isAssignAdd());
1132:       assertFalse(node1.isDo());
1133:       assertFalse(node1.isBlock());
1134:       assertFalse(node1.isReturn());
1135:       assertFalse(node1.isLabel());
1136:       assertFalse(node1.hasChildren());
1137:       assertFalse(node1.isDec());
1138:       assertFalse(node1.isAssign());
1139:       assertFalse(node1.isTypeOf());
1140:       assertEquals(155, node1.getType());
1141:       assertFalse(node1.isGetElem());
1142:       assertFalse(node1.isCall());
1143:       assertFalse(node1.isVar());
1144:       assertFalse(node1.isNew());
1145:       assertFalse(node1.isName());
1146:       assertFalse(node1.isSetterDef());
1147:       assertFalse(node1.isAdd());
1148:       assertFalse(node1.isNull());
1149:       assertFalse(node1.isOr());
1150:       assertFalse(node1.isCatch());
1151:       assertFalse(node1.isInstanceOf());
1152:       assertFalse(node1.isDefaultCase());
1153:       assertFalse(node1.isThis());
1154:       assertFalse(node1.isWith());
1155:       assertEquals(0, node1.getChildCount());
1156:       assertFalse(node1.isRegExp());
1157:       assertFalse(node1.isArrayLit());
1158:       assertFalse(node1.isHook());
1159:       assertFalse(node1.isStringKey());
1160:       assertFalse(node1.isFor());
1161:       assertTrue(node1.isCast());
1162:       assertFalse(node1.hasOneChild());
1163:       assertFalse(node1.isLabelName());
1164:       assertFalse(node1.isTry());
1165:       assertFalse(node1.isSwitch());
1166:       assertFalse(node1.isParamList());
1167:       assertEquals((-1), node1.getCharno());
1168:       assertFalse(node1.isScript());
1169:       assertFalse(node1.isNumber());
1170:       assertFalse(node1.isGetterDef());
1171:       assertSame(node0, node2);
1172:   }
1173: }
RegularFileObject[/tmp/EvoSuite_235_1628157533049/com/google/javascript/rhino/Node_235_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_235_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_235_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_235_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 09:58:53.195 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-1272));
assertNotNull(node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Node node1 = new Node(155, node0, (-1272), 39);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(155, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertTrue(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(155, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertTrue(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());

Node node2 = node1.removeFirstChild();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(155, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertTrue(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isVoid());
assertFalse(node2.isParamList());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertSame(node0, node2);
assertSame(node2, node0);

boolean boolean0 = node_NodeMismatch0.equals("F~f/O5[<");
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(155, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertTrue(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertSame(node0, node2);


[MASTER] 09:59:01.427 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_309_1628157541401/com/google/javascript/rhino/Node_309_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_309_1628157541401/com/google/javascript/rhino/Node_309_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:01.427 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:01.427 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:01.427 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 09:59:01.428 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_309_1628157541401/com/google/javascript/rhino/Node_309_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:01 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_309_tmp__ESTest extends Node_309_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber((double) (-1272));
22:       assertNotNull(node0);
23:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
24:       assertEquals(29, Node.JSDOC_INFO_PROP);
25:       assertEquals(2, Node.POST_FLAG);
26:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
27:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
28:       assertEquals(47, Node.IS_DISPATCHER);
29:       assertEquals(53, Node.INPUT_ID);
30:       assertEquals(32, Node.INCRDECR_PROP);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(51, Node.STATIC_SOURCE_FILE);
33:       assertEquals(30, Node.VAR_ARGS_NAME);
34:       assertEquals(54, Node.SLASH_V);
35:       assertEquals(46, Node.IS_NAMESPACE);
36:       assertEquals(43, Node.IS_CONSTANT_NAME);
37:       assertEquals(40, Node.ORIGINALNAME_PROP);
38:       assertEquals(57, Node.REFLECTED_OBJECT);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
41:       assertEquals(50, Node.FREE_CALL);
42:       assertEquals(52, Node.LENGTH);
43:       assertEquals(8, Node.FLAG_NO_THROWS);
44:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
45:       assertEquals(15, Node.NO_SIDE_EFFECTS);
46:       assertEquals(39, Node.EMPTY_BLOCK);
47:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(55, Node.INFERRED_FUNCTION);
51:       assertEquals(12, Node.COLUMN_BITS);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(4095, Node.COLUMN_MASK);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(37, Node.OPT_ARG_NAME);
56:       assertEquals(48, Node.DIRECTIVES);
57:       assertEquals(56, Node.CHANGE_TIME);
58:       assertEquals(49, Node.DIRECT_EVAL);
59:       assertFalse(node0.isArrayLit());
60:       assertFalse(node0.isFor());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isDebugger());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isEmpty());
66:       assertTrue(node0.isNumber());
67:       assertFalse(node0.isTry());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isParamList());
71:       assertFalse(node0.isHook());
72:       assertFalse(node0.isThrow());
73:       assertFalse(node0.isStringKey());
74:       assertFalse(node0.isBlock());
75:       assertFalse(node0.isFalse());
76:       assertEquals((-1), node0.getCharno());
77:       assertFalse(node0.isSetterDef());
78:       assertFalse(node0.isInc());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isCase());
81:       assertFalse(node0.isInstanceOf());
82:       assertFalse(node0.hasMoreThanOneChild());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isCatch());
85:       assertEquals(39, node0.getType());
86:       assertFalse(node0.isWith());
87:       assertFalse(node0.isRegExp());
88:       assertFalse(node0.isIf());
89:       assertFalse(node0.isNE());
90:       assertEquals((-1), node0.getLineno());
91:       assertFalse(node0.hasOneChild());
92:       assertFalse(node0.isCast());
93:       assertFalse(node0.isDec());
94:       assertFalse(node0.isAssign());
95:       assertFalse(node0.isScript());
96:       assertFalse(node0.hasChildren());
97:       assertFalse(node0.isAssignAdd());
98:       assertFalse(node0.isAnd());
99:       assertFalse(node0.isContinue());
100:       assertFalse(node0.isLabel());
101:       assertFalse(node0.isObjectLit());
102:       assertFalse(node0.isNot());
103:       assertEquals((-1), node0.getSourcePosition());
104:       assertFalse(node0.isLabelName());
105:       assertFalse(node0.isCall());
106:       assertFalse(node0.isVar());
107:       assertFalse(node0.isWhile());
108:       assertFalse(node0.isString());
109:       assertFalse(node0.isNew());
110:       assertFalse(node0.isAdd());
111:       assertFalse(node0.isGetProp());
112:       assertFalse(node0.isDo());
113:       assertFalse(node0.isReturn());
114:       assertFalse(node0.isComma());
115:       assertFalse(node0.isOr());
116:       assertFalse(node0.isTypeOf());
117:       assertFalse(node0.isNull());
118:       assertFalse(node0.isBreak());
119:       assertFalse(node0.isExprResult());
120:       assertFalse(node0.isTrue());
121:       assertFalse(node0.isGetElem());
122:       assertFalse(node0.isName());
123:       assertFalse(node0.isDelProp());
124:       assertFalse(node0.isVoid());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertNotNull(iterable0);
129:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
130:       assertEquals(29, Node.JSDOC_INFO_PROP);
131:       assertEquals(2, Node.POST_FLAG);
132:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
133:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
134:       assertEquals(47, Node.IS_DISPATCHER);
135:       assertEquals(53, Node.INPUT_ID);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(1, Node.DECR_FLAG);
138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
139:       assertEquals(30, Node.VAR_ARGS_NAME);
140:       assertEquals(54, Node.SLASH_V);
141:       assertEquals(46, Node.IS_NAMESPACE);
142:       assertEquals(43, Node.IS_CONSTANT_NAME);
143:       assertEquals(40, Node.ORIGINALNAME_PROP);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
147:       assertEquals(50, Node.FREE_CALL);
148:       assertEquals(52, Node.LENGTH);
149:       assertEquals(8, Node.FLAG_NO_THROWS);
150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
152:       assertEquals(39, Node.EMPTY_BLOCK);
153:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
154:       assertEquals(57, Node.LAST_PROP);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(55, Node.INFERRED_FUNCTION);
157:       assertEquals(12, Node.COLUMN_BITS);
158:       assertEquals(36, Node.QUOTED_PROP);
159:       assertEquals(4095, Node.COLUMN_MASK);
160:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
161:       assertEquals(37, Node.OPT_ARG_NAME);
162:       assertEquals(48, Node.DIRECTIVES);
163:       assertEquals(56, Node.CHANGE_TIME);
164:       assertEquals(49, Node.DIRECT_EVAL);
165:       assertFalse(node0.isArrayLit());
166:       assertFalse(node0.isFor());
167:       assertFalse(node0.isFunction());
168:       assertFalse(node0.isDebugger());
169:       assertFalse(node0.isGetterDef());
170:       assertFalse(node0.isDefaultCase());
171:       assertFalse(node0.isEmpty());
172:       assertTrue(node0.isNumber());
173:       assertFalse(node0.isTry());
174:       assertEquals(0, node0.getChildCount());
175:       assertFalse(node0.isSwitch());
176:       assertFalse(node0.isParamList());
177:       assertFalse(node0.isHook());
178:       assertFalse(node0.isThrow());
179:       assertFalse(node0.isStringKey());
180:       assertFalse(node0.isBlock());
181:       assertFalse(node0.isFalse());
182:       assertEquals((-1), node0.getCharno());
183:       assertFalse(node0.isSetterDef());
184:       assertFalse(node0.isInc());
185:       assertFalse(node0.isThis());
186:       assertFalse(node0.isCase());
187:       assertFalse(node0.isInstanceOf());
188:       assertFalse(node0.hasMoreThanOneChild());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isCatch());
191:       assertEquals(39, node0.getType());
192:       assertFalse(node0.isWith());
193:       assertFalse(node0.isRegExp());
194:       assertFalse(node0.isIf());
195:       assertFalse(node0.isNE());
196:       assertEquals((-1), node0.getLineno());
197:       assertFalse(node0.hasOneChild());
198:       assertFalse(node0.isCast());
199:       assertFalse(node0.isDec());
200:       assertFalse(node0.isAssign());
201:       assertFalse(node0.isScript());
202:       assertFalse(node0.hasChildren());
203:       assertFalse(node0.isAssignAdd());
204:       assertFalse(node0.isAnd());
205:       assertFalse(node0.isContinue());
206:       assertFalse(node0.isLabel());
207:       assertFalse(node0.isObjectLit());
208:       assertFalse(node0.isNot());
209:       assertEquals((-1), node0.getSourcePosition());
210:       assertFalse(node0.isLabelName());
211:       assertFalse(node0.isCall());
212:       assertFalse(node0.isVar());
213:       assertFalse(node0.isWhile());
214:       assertFalse(node0.isString());
215:       assertFalse(node0.isNew());
216:       assertFalse(node0.isAdd());
217:       assertFalse(node0.isGetProp());
218:       assertFalse(node0.isDo());
219:       assertFalse(node0.isReturn());
220:       assertFalse(node0.isComma());
221:       assertFalse(node0.isOr());
222:       assertFalse(node0.isTypeOf());
223:       assertFalse(node0.isNull());
224:       assertFalse(node0.isBreak());
225:       assertFalse(node0.isExprResult());
226:       assertFalse(node0.isTrue());
227:       assertFalse(node0.isGetElem());
228:       assertFalse(node0.isName());
229:       assertFalse(node0.isDelProp());
230:       assertFalse(node0.isVoid());
231:       
232:       Node node1 = new Node(8199, node0, 11, 36);
233:       assertFalse(node1.equals((Object)node0));
234:       assertNotNull(node1);
235:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
236:       assertEquals(29, Node.JSDOC_INFO_PROP);
237:       assertEquals(2, Node.POST_FLAG);
238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
239:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
240:       assertEquals(47, Node.IS_DISPATCHER);
241:       assertEquals(53, Node.INPUT_ID);
242:       assertEquals(32, Node.INCRDECR_PROP);
243:       assertEquals(1, Node.DECR_FLAG);
244:       assertEquals(51, Node.STATIC_SOURCE_FILE);
245:       assertEquals(30, Node.VAR_ARGS_NAME);
246:       assertEquals(54, Node.SLASH_V);
247:       assertEquals(46, Node.IS_NAMESPACE);
248:       assertEquals(43, Node.IS_CONSTANT_NAME);
249:       assertEquals(40, Node.ORIGINALNAME_PROP);
250:       assertEquals(57, Node.REFLECTED_OBJECT);
251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
252:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
253:       assertEquals(50, Node.FREE_CALL);
254:       assertEquals(52, Node.LENGTH);
255:       assertEquals(8, Node.FLAG_NO_THROWS);
256:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
257:       assertEquals(15, Node.NO_SIDE_EFFECTS);
258:       assertEquals(39, Node.EMPTY_BLOCK);
259:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
260:       assertEquals(57, Node.LAST_PROP);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(55, Node.INFERRED_FUNCTION);
263:       assertEquals(12, Node.COLUMN_BITS);
264:       assertEquals(36, Node.QUOTED_PROP);
265:       assertEquals(4095, Node.COLUMN_MASK);
266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
267:       assertEquals(37, Node.OPT_ARG_NAME);
268:       assertEquals(48, Node.DIRECTIVES);
269:       assertEquals(56, Node.CHANGE_TIME);
270:       assertEquals(49, Node.DIRECT_EVAL);
271:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
272:       assertEquals(50, Node.FREE_CALL);
273:       assertEquals(40, Node.ORIGINALNAME_PROP);
274:       assertEquals(8, Node.FLAG_NO_THROWS);
275:       assertEquals(39, Node.EMPTY_BLOCK);
276:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
277:       assertEquals(52, Node.LENGTH);
278:       assertEquals(48, Node.DIRECTIVES);
279:       assertEquals(57, Node.REFLECTED_OBJECT);
280:       assertEquals(54, Node.SLASH_V);
281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
282:       assertEquals(57, Node.LAST_PROP);
283:       assertEquals(36, Node.QUOTED_PROP);
284:       assertEquals(30, Node.VAR_ARGS_NAME);
285:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
286:       assertEquals(53, Node.INPUT_ID);
287:       assertEquals(55, Node.INFERRED_FUNCTION);
288:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
289:       assertEquals(47, Node.IS_DISPATCHER);
290:       assertEquals(2, Node.POST_FLAG);
291:       assertEquals(37, Node.OPT_ARG_NAME);
292:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
294:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
295:       assertEquals(29, Node.JSDOC_INFO_PROP);
296:       assertEquals(51, Node.STATIC_SOURCE_FILE);
297:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
298:       assertEquals(43, Node.IS_CONSTANT_NAME);
299:       assertEquals(56, Node.CHANGE_TIME);
300:       assertEquals(46, Node.IS_NAMESPACE);
301:       assertEquals(49, Node.DIRECT_EVAL);
302:       assertEquals(1, Node.DECR_FLAG);
303:       assertEquals(4095, Node.COLUMN_MASK);
304:       assertEquals(32, Node.INCRDECR_PROP);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(12, Node.COLUMN_BITS);
307:       assertFalse(node0.isArrayLit());
308:       assertFalse(node0.isFor());
309:       assertFalse(node0.isFunction());
310:       assertFalse(node0.isDebugger());
311:       assertFalse(node0.isGetterDef());
312:       assertFalse(node0.isDefaultCase());
313:       assertFalse(node0.isEmpty());
314:       assertTrue(node0.isNumber());
315:       assertFalse(node0.isTry());
316:       assertEquals(0, node0.getChildCount());
317:       assertFalse(node0.isSwitch());
318:       assertFalse(node0.isParamList());
319:       assertFalse(node0.isHook());
320:       assertFalse(node0.isThrow());
321:       assertFalse(node0.isStringKey());
322:       assertFalse(node0.isBlock());
323:       assertFalse(node0.isFalse());
324:       assertEquals((-1), node0.getCharno());
325:       assertFalse(node0.isSetterDef());
326:       assertFalse(node0.isInc());
327:       assertFalse(node0.isThis());
328:       assertFalse(node0.isCase());
329:       assertFalse(node0.isInstanceOf());
330:       assertFalse(node0.hasMoreThanOneChild());
331:       assertFalse(node0.isIn());
332:       assertFalse(node0.isCatch());
333:       assertEquals(39, node0.getType());
334:       assertFalse(node0.isWith());
335:       assertFalse(node0.isRegExp());
336:       assertFalse(node0.isIf());
337:       assertFalse(node0.isNE());
338:       assertEquals((-1), node0.getLineno());
339:       assertFalse(node0.hasOneChild());
340:       assertFalse(node0.isCast());
341:       assertFalse(node0.isDec());
342:       assertFalse(node0.isAssign());
343:       assertFalse(node0.isScript());
344:       assertFalse(node0.hasChildren());
345:       assertFalse(node0.isAssignAdd());
346:       assertFalse(node0.isAnd());
347:       assertFalse(node0.isContinue());
348:       assertFalse(node0.isLabel());
349:       assertFalse(node0.isObjectLit());
350:       assertFalse(node0.isNot());
351:       assertEquals((-1), node0.getSourcePosition());
352:       assertFalse(node0.isLabelName());
353:       assertFalse(node0.isCall());
354:       assertFalse(node0.isVar());
355:       assertFalse(node0.isWhile());
356:       assertFalse(node0.isString());
357:       assertFalse(node0.isNew());
358:       assertFalse(node0.isAdd());
359:       assertFalse(node0.isGetProp());
360:       assertFalse(node0.isDo());
361:       assertFalse(node0.isReturn());
362:       assertFalse(node0.isComma());
363:       assertFalse(node0.isOr());
364:       assertFalse(node0.isTypeOf());
365:       assertFalse(node0.isNull());
366:       assertFalse(node0.isBreak());
367:       assertFalse(node0.isExprResult());
368:       assertFalse(node0.isTrue());
369:       assertFalse(node0.isGetElem());
370:       assertFalse(node0.isName());
371:       assertFalse(node0.isDelProp());
372:       assertFalse(node0.isVoid());
373:       assertFalse(node1.isStringKey());
374:       assertFalse(node1.isCall());
375:       assertFalse(node1.isName());
376:       assertFalse(node1.isNull());
377:       assertFalse(node1.isParamList());
378:       assertFalse(node1.isDo());
379:       assertEquals(8199, node1.getType());
380:       assertFalse(node1.isFunction());
381:       assertFalse(node1.isContinue());
382:       assertFalse(node1.isNew());
383:       assertFalse(node1.isAdd());
384:       assertFalse(node1.isSetterDef());
385:       assertFalse(node1.isLabel());
386:       assertFalse(node1.isDefaultCase());
387:       assertFalse(node1.isVar());
388:       assertFalse(node1.isAssignAdd());
389:       assertFalse(node1.isFor());
390:       assertFalse(node1.isLabelName());
391:       assertFalse(node1.isArrayLit());
392:       assertFalse(node1.isNumber());
393:       assertFalse(node1.isGetterDef());
394:       assertTrue(node1.hasChildren());
395:       assertFalse(node1.isIf());
396:       assertFalse(node1.isNE());
397:       assertFalse(node1.isCase());
398:       assertFalse(node1.isInstanceOf());
399:       assertFalse(node1.isRegExp());
400:       assertFalse(node1.isScript());
401:       assertFalse(node1.hasMoreThanOneChild());
402:       assertFalse(node1.isCatch());
403:       assertFalse(node1.isWith());
404:       assertFalse(node1.isBlock());
405:       assertFalse(node1.isTry());
406:       assertFalse(node1.isThis());
407:       assertEquals(1, node1.getChildCount());
408:       assertFalse(node1.isHook());
409:       assertEquals(11, node1.getLineno());
410:       assertFalse(node1.isFalse());
411:       assertFalse(node1.isThrow());
412:       assertFalse(node1.isBreak());
413:       assertEquals(36, node1.getCharno());
414:       assertFalse(node1.isSwitch());
415:       assertFalse(node1.isAnd());
416:       assertFalse(node1.isIn());
417:       assertFalse(node1.isInc());
418:       assertFalse(node1.isGetElem());
419:       assertFalse(node1.isEmpty());
420:       assertFalse(node1.isAssign());
421:       assertTrue(node1.hasOneChild());
422:       assertFalse(node1.isDec());
423:       assertFalse(node1.isTypeOf());
424:       assertFalse(node1.isCast());
425:       assertFalse(node1.isExprResult());
426:       assertFalse(node1.isVoid());
427:       assertFalse(node1.isTrue());
428:       assertFalse(node1.isOr());
429:       assertFalse(node1.isDebugger());
430:       assertFalse(node1.isDelProp());
431:       assertFalse(node1.isNot());
432:       assertFalse(node1.isObjectLit());
433:       assertFalse(node1.isString());
434:       assertFalse(node1.isGetProp());
435:       assertFalse(node1.isReturn());
436:       assertEquals(45092, node1.getSourcePosition());
437:       assertFalse(node1.isComma());
438:       assertFalse(node1.isWhile());
439:       
440:       // Undeclared exception!
441:       try { 
442:         node1.getString();
443:         fail("Expecting exception: IllegalStateException");
444:       
445:       } catch(IllegalStateException e) {
446:          //
447:          // 8199
448:          //
449:          verifyException("com.google.javascript.rhino.Token", e);
450:       }
451:   }
452: }
RegularFileObject[/tmp/EvoSuite_309_1628157541401/com/google/javascript/rhino/Node_309_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:01 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_309_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_309_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_309_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 09:59:01.433 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-1272));
assertNotNull(node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());

Node node1 = new Node(8199, node0, 11, 36);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertEquals(8199, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertEquals(11, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertEquals(36, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertEquals(45092, node1.getSourcePosition());
assertFalse(node1.isComma());
assertFalse(node1.isWhile());

node1.getString();

[MASTER] 09:59:04.241 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_333_1628157544165/com/google/javascript/rhino/Node_333_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_333_1628157544165/com/google/javascript/rhino/Node_333_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:04.241 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:04.241 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:04.241 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 09:59:04.242 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_333_1628157544165/com/google/javascript/rhino/Node_333_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_333_tmp__ESTest extends Node_333_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node((-1272), (-1272), (-1272));
22:       assertNotNull(node0);
23:       assertEquals(1, Node.DECR_FLAG);
24:       assertEquals(30, Node.VAR_ARGS_NAME);
25:       assertEquals(49, Node.DIRECT_EVAL);
26:       assertEquals(15, Node.NO_SIDE_EFFECTS);
27:       assertEquals(37, Node.OPT_ARG_NAME);
28:       assertEquals(52, Node.LENGTH);
29:       assertEquals(56, Node.CHANGE_TIME);
30:       assertEquals(51, Node.STATIC_SOURCE_FILE);
31:       assertEquals(57, Node.REFLECTED_OBJECT);
32:       assertEquals(46, Node.IS_NAMESPACE);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
35:       assertEquals(40, Node.ORIGINALNAME_PROP);
36:       assertEquals(39, Node.EMPTY_BLOCK);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(53, Node.INPUT_ID);
39:       assertEquals(2, Node.POST_FLAG);
40:       assertEquals(47, Node.IS_DISPATCHER);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(4095, Node.COLUMN_MASK);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
46:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
47:       assertEquals(8, Node.FLAG_NO_THROWS);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(43, Node.IS_CONSTANT_NAME);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
52:       assertEquals(50, Node.FREE_CALL);
53:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertEquals(32, Node.INCRDECR_PROP);
58:       assertEquals(12, Node.COLUMN_BITS);
59:       assertFalse(node0.hasMoreThanOneChild());
60:       assertEquals((-1), node0.getLineno());
61:       assertFalse(node0.isOr());
62:       assertFalse(node0.isContinue());
63:       assertFalse(node0.isNumber());
64:       assertEquals((-1), node0.getSourcePosition());
65:       assertFalse(node0.isLabelName());
66:       assertFalse(node0.isVar());
67:       assertFalse(node0.isCast());
68:       assertFalse(node0.isAdd());
69:       assertFalse(node0.isSetterDef());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isLabel());
74:       assertFalse(node0.isCatch());
75:       assertEquals(0, node0.getChildCount());
76:       assertFalse(node0.isWith());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isStringKey());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isThis());
83:       assertFalse(node0.isRegExp());
84:       assertFalse(node0.isScript());
85:       assertFalse(node0.isTry());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isFor());
88:       assertFalse(node0.isCase());
89:       assertFalse(node0.isIn());
90:       assertFalse(node0.isString());
91:       assertFalse(node0.isNE());
92:       assertFalse(node0.isSwitch());
93:       assertEquals((-1), node0.getCharno());
94:       assertFalse(node0.isGetterDef());
95:       assertFalse(node0.isDelProp());
96:       assertFalse(node0.isIf());
97:       assertFalse(node0.isArrayLit());
98:       assertFalse(node0.isEmpty());
99:       assertFalse(node0.isFalse());
100:       assertFalse(node0.isFunction());
101:       assertFalse(node0.isInc());
102:       assertFalse(node0.isThrow());
103:       assertFalse(node0.isDefaultCase());
104:       assertFalse(node0.isObjectLit());
105:       assertFalse(node0.isNot());
106:       assertFalse(node0.isNull());
107:       assertFalse(node0.isExprResult());
108:       assertFalse(node0.isTrue());
109:       assertFalse(node0.isBreak());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isDebugger());
112:       assertFalse(node0.isName());
113:       assertFalse(node0.isAnd());
114:       assertFalse(node0.isCall());
115:       assertFalse(node0.isAssign());
116:       assertFalse(node0.isGetElem());
117:       assertFalse(node0.isTypeOf());
118:       assertFalse(node0.hasChildren());
119:       assertFalse(node0.isDec());
120:       assertFalse(node0.isGetProp());
121:       assertFalse(node0.isComma());
122:       assertEquals((-1272), node0.getType());
123:       assertFalse(node0.isReturn());
124:       assertFalse(node0.isWhile());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertNotNull(iterable0);
129:       assertEquals(1, Node.DECR_FLAG);
130:       assertEquals(30, Node.VAR_ARGS_NAME);
131:       assertEquals(49, Node.DIRECT_EVAL);
132:       assertEquals(15, Node.NO_SIDE_EFFECTS);
133:       assertEquals(37, Node.OPT_ARG_NAME);
134:       assertEquals(52, Node.LENGTH);
135:       assertEquals(56, Node.CHANGE_TIME);
136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
137:       assertEquals(57, Node.REFLECTED_OBJECT);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(39, Node.EMPTY_BLOCK);
143:       assertEquals(29, Node.JSDOC_INFO_PROP);
144:       assertEquals(53, Node.INPUT_ID);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(57, Node.LAST_PROP);
148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
149:       assertEquals(4095, Node.COLUMN_MASK);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
153:       assertEquals(8, Node.FLAG_NO_THROWS);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(43, Node.IS_CONSTANT_NAME);
156:       assertEquals(36, Node.QUOTED_PROP);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
161:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
163:       assertEquals(32, Node.INCRDECR_PROP);
164:       assertEquals(12, Node.COLUMN_BITS);
165:       assertFalse(node0.hasMoreThanOneChild());
166:       assertEquals((-1), node0.getLineno());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isContinue());
169:       assertFalse(node0.isNumber());
170:       assertEquals((-1), node0.getSourcePosition());
171:       assertFalse(node0.isLabelName());
172:       assertFalse(node0.isVar());
173:       assertFalse(node0.isCast());
174:       assertFalse(node0.isAdd());
175:       assertFalse(node0.isSetterDef());
176:       assertFalse(node0.isNew());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isDo());
179:       assertFalse(node0.isLabel());
180:       assertFalse(node0.isCatch());
181:       assertEquals(0, node0.getChildCount());
182:       assertFalse(node0.isWith());
183:       assertFalse(node0.isInstanceOf());
184:       assertFalse(node0.isStringKey());
185:       assertFalse(node0.isParamList());
186:       assertFalse(node0.isHook());
187:       assertFalse(node0.hasOneChild());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isRegExp());
190:       assertFalse(node0.isScript());
191:       assertFalse(node0.isTry());
192:       assertFalse(node0.isBlock());
193:       assertFalse(node0.isFor());
194:       assertFalse(node0.isCase());
195:       assertFalse(node0.isIn());
196:       assertFalse(node0.isString());
197:       assertFalse(node0.isNE());
198:       assertFalse(node0.isSwitch());
199:       assertEquals((-1), node0.getCharno());
200:       assertFalse(node0.isGetterDef());
201:       assertFalse(node0.isDelProp());
202:       assertFalse(node0.isIf());
203:       assertFalse(node0.isArrayLit());
204:       assertFalse(node0.isEmpty());
205:       assertFalse(node0.isFalse());
206:       assertFalse(node0.isFunction());
207:       assertFalse(node0.isInc());
208:       assertFalse(node0.isThrow());
209:       assertFalse(node0.isDefaultCase());
210:       assertFalse(node0.isObjectLit());
211:       assertFalse(node0.isNot());
212:       assertFalse(node0.isNull());
213:       assertFalse(node0.isExprResult());
214:       assertFalse(node0.isTrue());
215:       assertFalse(node0.isBreak());
216:       assertFalse(node0.isVoid());
217:       assertFalse(node0.isDebugger());
218:       assertFalse(node0.isName());
219:       assertFalse(node0.isAnd());
220:       assertFalse(node0.isCall());
221:       assertFalse(node0.isAssign());
222:       assertFalse(node0.isGetElem());
223:       assertFalse(node0.isTypeOf());
224:       assertFalse(node0.hasChildren());
225:       assertFalse(node0.isDec());
226:       assertFalse(node0.isGetProp());
227:       assertFalse(node0.isComma());
228:       assertEquals((-1272), node0.getType());
229:       assertFalse(node0.isReturn());
230:       assertFalse(node0.isWhile());
231:       
232:       node0.removeProp(47);
233:       assertEquals(1, Node.DECR_FLAG);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertEquals(49, Node.DIRECT_EVAL);
236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
237:       assertEquals(37, Node.OPT_ARG_NAME);
238:       assertEquals(52, Node.LENGTH);
239:       assertEquals(56, Node.CHANGE_TIME);
240:       assertEquals(51, Node.STATIC_SOURCE_FILE);
241:       assertEquals(57, Node.REFLECTED_OBJECT);
242:       assertEquals(46, Node.IS_NAMESPACE);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(39, Node.EMPTY_BLOCK);
247:       assertEquals(29, Node.JSDOC_INFO_PROP);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(2, Node.POST_FLAG);
250:       assertEquals(47, Node.IS_DISPATCHER);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
253:       assertEquals(4095, Node.COLUMN_MASK);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
257:       assertEquals(8, Node.FLAG_NO_THROWS);
258:       assertEquals(48, Node.DIRECTIVES);
259:       assertEquals(43, Node.IS_CONSTANT_NAME);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(50, Node.FREE_CALL);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
265:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
267:       assertEquals(32, Node.INCRDECR_PROP);
268:       assertEquals(12, Node.COLUMN_BITS);
269:       assertFalse(node0.hasMoreThanOneChild());
270:       assertEquals((-1), node0.getLineno());
271:       assertFalse(node0.isOr());
272:       assertFalse(node0.isContinue());
273:       assertFalse(node0.isNumber());
274:       assertEquals((-1), node0.getSourcePosition());
275:       assertFalse(node0.isLabelName());
276:       assertFalse(node0.isVar());
277:       assertFalse(node0.isCast());
278:       assertFalse(node0.isAdd());
279:       assertFalse(node0.isSetterDef());
280:       assertFalse(node0.isNew());
281:       assertFalse(node0.isAssignAdd());
282:       assertFalse(node0.isDo());
283:       assertFalse(node0.isLabel());
284:       assertFalse(node0.isCatch());
285:       assertEquals(0, node0.getChildCount());
286:       assertFalse(node0.isWith());
287:       assertFalse(node0.isInstanceOf());
288:       assertFalse(node0.isStringKey());
289:       assertFalse(node0.isParamList());
290:       assertFalse(node0.isHook());
291:       assertFalse(node0.hasOneChild());
292:       assertFalse(node0.isThis());
293:       assertFalse(node0.isRegExp());
294:       assertFalse(node0.isScript());
295:       assertFalse(node0.isTry());
296:       assertFalse(node0.isBlock());
297:       assertFalse(node0.isFor());
298:       assertFalse(node0.isCase());
299:       assertFalse(node0.isIn());
300:       assertFalse(node0.isString());
301:       assertFalse(node0.isNE());
302:       assertFalse(node0.isSwitch());
303:       assertEquals((-1), node0.getCharno());
304:       assertFalse(node0.isGetterDef());
305:       assertFalse(node0.isDelProp());
306:       assertFalse(node0.isIf());
307:       assertFalse(node0.isArrayLit());
308:       assertFalse(node0.isEmpty());
309:       assertFalse(node0.isFalse());
310:       assertFalse(node0.isFunction());
311:       assertFalse(node0.isInc());
312:       assertFalse(node0.isThrow());
313:       assertFalse(node0.isDefaultCase());
314:       assertFalse(node0.isObjectLit());
315:       assertFalse(node0.isNot());
316:       assertFalse(node0.isNull());
317:       assertFalse(node0.isExprResult());
318:       assertFalse(node0.isTrue());
319:       assertFalse(node0.isBreak());
320:       assertFalse(node0.isVoid());
321:       assertFalse(node0.isDebugger());
322:       assertFalse(node0.isName());
323:       assertFalse(node0.isAnd());
324:       assertFalse(node0.isCall());
325:       assertFalse(node0.isAssign());
326:       assertFalse(node0.isGetElem());
327:       assertFalse(node0.isTypeOf());
328:       assertFalse(node0.hasChildren());
329:       assertFalse(node0.isDec());
330:       assertFalse(node0.isGetProp());
331:       assertFalse(node0.isComma());
332:       assertEquals((-1272), node0.getType());
333:       assertFalse(node0.isReturn());
334:       assertFalse(node0.isWhile());
335:       
336:       Node node1 = new Node(8199, node0, 11, 36);
337:       assertFalse(node1.equals((Object)node0));
338:       assertNotNull(node1);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       assertEquals(49, Node.DIRECT_EVAL);
342:       assertEquals(15, Node.NO_SIDE_EFFECTS);
343:       assertEquals(37, Node.OPT_ARG_NAME);
344:       assertEquals(52, Node.LENGTH);
345:       assertEquals(56, Node.CHANGE_TIME);
346:       assertEquals(51, Node.STATIC_SOURCE_FILE);
347:       assertEquals(57, Node.REFLECTED_OBJECT);
348:       assertEquals(46, Node.IS_NAMESPACE);
349:       assertEquals(54, Node.SLASH_V);
350:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(39, Node.EMPTY_BLOCK);
353:       assertEquals(29, Node.JSDOC_INFO_PROP);
354:       assertEquals(53, Node.INPUT_ID);
355:       assertEquals(2, Node.POST_FLAG);
356:       assertEquals(47, Node.IS_DISPATCHER);
357:       assertEquals(57, Node.LAST_PROP);
358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
359:       assertEquals(4095, Node.COLUMN_MASK);
360:       assertEquals(55, Node.INFERRED_FUNCTION);
361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
363:       assertEquals(8, Node.FLAG_NO_THROWS);
364:       assertEquals(48, Node.DIRECTIVES);
365:       assertEquals(43, Node.IS_CONSTANT_NAME);
366:       assertEquals(36, Node.QUOTED_PROP);
367:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
368:       assertEquals(50, Node.FREE_CALL);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
373:       assertEquals(32, Node.INCRDECR_PROP);
374:       assertEquals(12, Node.COLUMN_BITS);
375:       assertEquals(29, Node.JSDOC_INFO_PROP);
376:       assertEquals(56, Node.CHANGE_TIME);
377:       assertEquals(37, Node.OPT_ARG_NAME);
378:       assertEquals(2, Node.POST_FLAG);
379:       assertEquals(47, Node.IS_DISPATCHER);
380:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
381:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
382:       assertEquals(55, Node.INFERRED_FUNCTION);
383:       assertEquals(49, Node.DIRECT_EVAL);
384:       assertEquals(57, Node.LAST_PROP);
385:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
386:       assertEquals(36, Node.QUOTED_PROP);
387:       assertEquals(53, Node.INPUT_ID);
388:       assertEquals(15, Node.NO_SIDE_EFFECTS);
389:       assertEquals(39, Node.EMPTY_BLOCK);
390:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
391:       assertEquals(52, Node.LENGTH);
392:       assertEquals(8, Node.FLAG_NO_THROWS);
393:       assertEquals(40, Node.ORIGINALNAME_PROP);
394:       assertEquals(57, Node.REFLECTED_OBJECT);
395:       assertEquals(48, Node.DIRECTIVES);
396:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
398:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
399:       assertEquals(30, Node.VAR_ARGS_NAME);
400:       assertEquals(4095, Node.COLUMN_MASK);
401:       assertEquals(1, Node.DECR_FLAG);
402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
403:       assertEquals(12, Node.COLUMN_BITS);
404:       assertEquals(32, Node.INCRDECR_PROP);
405:       assertEquals(46, Node.IS_NAMESPACE);
406:       assertEquals(43, Node.IS_CONSTANT_NAME);
407:       assertEquals(54, Node.SLASH_V);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
410:       assertEquals(50, Node.FREE_CALL);
411:       assertFalse(node0.hasMoreThanOneChild());
412:       assertEquals((-1), node0.getLineno());
413:       assertFalse(node0.isOr());
414:       assertFalse(node0.isContinue());
415:       assertFalse(node0.isNumber());
416:       assertEquals((-1), node0.getSourcePosition());
417:       assertFalse(node0.isLabelName());
418:       assertFalse(node0.isVar());
419:       assertFalse(node0.isCast());
420:       assertFalse(node0.isAdd());
421:       assertFalse(node0.isSetterDef());
422:       assertFalse(node0.isNew());
423:       assertFalse(node0.isAssignAdd());
424:       assertFalse(node0.isDo());
425:       assertFalse(node0.isLabel());
426:       assertFalse(node0.isCatch());
427:       assertEquals(0, node0.getChildCount());
428:       assertFalse(node0.isWith());
429:       assertFalse(node0.isInstanceOf());
430:       assertFalse(node0.isStringKey());
431:       assertFalse(node0.isParamList());
432:       assertFalse(node0.isHook());
433:       assertFalse(node0.hasOneChild());
434:       assertFalse(node0.isThis());
435:       assertFalse(node0.isRegExp());
436:       assertFalse(node0.isScript());
437:       assertFalse(node0.isTry());
438:       assertFalse(node0.isBlock());
439:       assertFalse(node0.isFor());
440:       assertFalse(node0.isCase());
441:       assertFalse(node0.isIn());
442:       assertFalse(node0.isString());
443:       assertFalse(node0.isNE());
444:       assertFalse(node0.isSwitch());
445:       assertEquals((-1), node0.getCharno());
446:       assertFalse(node0.isGetterDef());
447:       assertFalse(node0.isDelProp());
448:       assertFalse(node0.isIf());
449:       assertFalse(node0.isArrayLit());
450:       assertFalse(node0.isEmpty());
451:       assertFalse(node0.isFalse());
452:       assertFalse(node0.isFunction());
453:       assertFalse(node0.isInc());
454:       assertFalse(node0.isThrow());
455:       assertFalse(node0.isDefaultCase());
456:       assertFalse(node0.isObjectLit());
457:       assertFalse(node0.isNot());
458:       assertFalse(node0.isNull());
459:       assertFalse(node0.isExprResult());
460:       assertFalse(node0.isTrue());
461:       assertFalse(node0.isBreak());
462:       assertFalse(node0.isVoid());
463:       assertFalse(node0.isDebugger());
464:       assertFalse(node0.isName());
465:       assertFalse(node0.isAnd());
466:       assertFalse(node0.isCall());
467:       assertFalse(node0.isAssign());
468:       assertFalse(node0.isGetElem());
469:       assertFalse(node0.isTypeOf());
470:       assertFalse(node0.hasChildren());
471:       assertFalse(node0.isDec());
472:       assertFalse(node0.isGetProp());
473:       assertFalse(node0.isComma());
474:       assertEquals((-1272), node0.getType());
475:       assertFalse(node0.isReturn());
476:       assertFalse(node0.isWhile());
477:       assertEquals(11, node1.getLineno());
478:       assertFalse(node1.isCast());
479:       assertFalse(node1.isGetElem());
480:       assertFalse(node1.isLabelName());
481:       assertFalse(node1.isDec());
482:       assertFalse(node1.isExprResult());
483:       assertFalse(node1.isLabel());
484:       assertFalse(node1.isWith());
485:       assertFalse(node1.isAssign());
486:       assertFalse(node1.isTypeOf());
487:       assertFalse(node1.isInstanceOf());
488:       assertFalse(node1.isAssignAdd());
489:       assertFalse(node1.isDo());
490:       assertFalse(node1.isOr());
491:       assertFalse(node1.isHook());
492:       assertFalse(node1.isVar());
493:       assertFalse(node1.isAdd());
494:       assertFalse(node1.isNew());
495:       assertFalse(node1.isStringKey());
496:       assertFalse(node1.isSwitch());
497:       assertFalse(node1.isThis());
498:       assertFalse(node1.isBlock());
499:       assertFalse(node1.hasMoreThanOneChild());
500:       assertFalse(node1.isCase());
501:       assertEquals(36, node1.getCharno());
502:       assertFalse(node1.isNumber());
503:       assertFalse(node1.isParamList());
504:       assertFalse(node1.isScript());
505:       assertFalse(node1.isGetterDef());
506:       assertFalse(node1.isArrayLit());
507:       assertFalse(node1.isDelProp());
508:       assertFalse(node1.isVoid());
509:       assertFalse(node1.isTry());
510:       assertFalse(node1.isDefaultCase());
511:       assertTrue(node1.hasOneChild());
512:       assertFalse(node1.isFor());
513:       assertEquals(8199, node1.getType());
514:       assertFalse(node1.isFunction());
515:       assertEquals(1, node1.getChildCount());
516:       assertFalse(node1.isRegExp());
517:       assertFalse(node1.isIn());
518:       assertFalse(node1.isCatch());
519:       assertTrue(node1.hasChildren());
520:       assertFalse(node1.isIf());
521:       assertFalse(node1.isSetterDef());
522:       assertFalse(node1.isInc());
523:       assertFalse(node1.isTrue());
524:       assertFalse(node1.isNull());
525:       assertFalse(node1.isEmpty());
526:       assertFalse(node1.isNE());
527:       assertFalse(node1.isCall());
528:       assertFalse(node1.isThrow());
529:       assertFalse(node1.isName());
530:       assertFalse(node1.isBreak());
531:       assertFalse(node1.isWhile());
532:       assertFalse(node1.isFalse());
533:       assertFalse(node1.isContinue());
534:       assertEquals(45092, node1.getSourcePosition());
535:       assertFalse(node1.isComma());
536:       assertFalse(node1.isReturn());
537:       assertFalse(node1.isAnd());
538:       assertFalse(node1.isGetProp());
539:       assertFalse(node1.isString());
540:       assertFalse(node1.isDebugger());
541:       assertFalse(node1.isNot());
542:       assertFalse(node1.isObjectLit());
543:       
544:       boolean boolean0 = node1.isNoSideEffectsCall();
545:       assertFalse(boolean0);
546:       assertFalse(node0.equals((Object)node1));
547:       assertFalse(node1.equals((Object)node0));
548:       assertEquals(1, Node.DECR_FLAG);
549:       assertEquals(30, Node.VAR_ARGS_NAME);
550:       assertEquals(49, Node.DIRECT_EVAL);
551:       assertEquals(15, Node.NO_SIDE_EFFECTS);
552:       assertEquals(37, Node.OPT_ARG_NAME);
553:       assertEquals(52, Node.LENGTH);
554:       assertEquals(56, Node.CHANGE_TIME);
555:       assertEquals(51, Node.STATIC_SOURCE_FILE);
556:       assertEquals(57, Node.REFLECTED_OBJECT);
557:       assertEquals(46, Node.IS_NAMESPACE);
558:       assertEquals(54, Node.SLASH_V);
559:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
560:       assertEquals(40, Node.ORIGINALNAME_PROP);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(29, Node.JSDOC_INFO_PROP);
563:       assertEquals(53, Node.INPUT_ID);
564:       assertEquals(2, Node.POST_FLAG);
565:       assertEquals(47, Node.IS_DISPATCHER);
566:       assertEquals(57, Node.LAST_PROP);
567:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
568:       assertEquals(4095, Node.COLUMN_MASK);
569:       assertEquals(55, Node.INFERRED_FUNCTION);
570:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
571:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
572:       assertEquals(8, Node.FLAG_NO_THROWS);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(43, Node.IS_CONSTANT_NAME);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
577:       assertEquals(50, Node.FREE_CALL);
578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
579:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
580:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
581:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
582:       assertEquals(32, Node.INCRDECR_PROP);
583:       assertEquals(12, Node.COLUMN_BITS);
584:       assertEquals(29, Node.JSDOC_INFO_PROP);
585:       assertEquals(56, Node.CHANGE_TIME);
586:       assertEquals(37, Node.OPT_ARG_NAME);
587:       assertEquals(2, Node.POST_FLAG);
588:       assertEquals(47, Node.IS_DISPATCHER);
589:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
590:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
591:       assertEquals(55, Node.INFERRED_FUNCTION);
592:       assertEquals(49, Node.DIRECT_EVAL);
593:       assertEquals(57, Node.LAST_PROP);
594:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
595:       assertEquals(36, Node.QUOTED_PROP);
596:       assertEquals(53, Node.INPUT_ID);
597:       assertEquals(15, Node.NO_SIDE_EFFECTS);
598:       assertEquals(39, Node.EMPTY_BLOCK);
599:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
600:       assertEquals(52, Node.LENGTH);
601:       assertEquals(8, Node.FLAG_NO_THROWS);
602:       assertEquals(40, Node.ORIGINALNAME_PROP);
603:       assertEquals(57, Node.REFLECTED_OBJECT);
604:       assertEquals(48, Node.DIRECTIVES);
605:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
606:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
607:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
608:       assertEquals(30, Node.VAR_ARGS_NAME);
609:       assertEquals(4095, Node.COLUMN_MASK);
610:       assertEquals(1, Node.DECR_FLAG);
611:       assertEquals(51, Node.STATIC_SOURCE_FILE);
612:       assertEquals(12, Node.COLUMN_BITS);
613:       assertEquals(32, Node.INCRDECR_PROP);
614:       assertEquals(46, Node.IS_NAMESPACE);
615:       assertEquals(43, Node.IS_CONSTANT_NAME);
616:       assertEquals(54, Node.SLASH_V);
617:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
618:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
619:       assertEquals(50, Node.FREE_CALL);
620:       assertFalse(node0.hasMoreThanOneChild());
621:       assertEquals((-1), node0.getLineno());
622:       assertFalse(node0.isOr());
623:       assertFalse(node0.isContinue());
624:       assertFalse(node0.isNumber());
625:       assertEquals((-1), node0.getSourcePosition());
626:       assertFalse(node0.isLabelName());
627:       assertFalse(node0.isVar());
628:       assertFalse(node0.isCast());
629:       assertFalse(node0.isAdd());
630:       assertFalse(node0.isSetterDef());
631:       assertFalse(node0.isNew());
632:       assertFalse(node0.isAssignAdd());
633:       assertFalse(node0.isDo());
634:       assertFalse(node0.isLabel());
635:       assertFalse(node0.isCatch());
636:       assertEquals(0, node0.getChildCount());
637:       assertFalse(node0.isWith());
638:       assertFalse(node0.isInstanceOf());
639:       assertFalse(node0.isStringKey());
640:       assertFalse(node0.isParamList());
641:       assertFalse(node0.isHook());
642:       assertFalse(node0.hasOneChild());
643:       assertFalse(node0.isThis());
644:       assertFalse(node0.isRegExp());
645:       assertFalse(node0.isScript());
646:       assertFalse(node0.isTry());
647:       assertFalse(node0.isBlock());
648:       assertFalse(node0.isFor());
649:       assertFalse(node0.isCase());
650:       assertFalse(node0.isIn());
651:       assertFalse(node0.isString());
652:       assertFalse(node0.isNE());
653:       assertFalse(node0.isSwitch());
654:       assertEquals((-1), node0.getCharno());
655:       assertFalse(node0.isGetterDef());
656:       assertFalse(node0.isDelProp());
657:       assertFalse(node0.isIf());
658:       assertFalse(node0.isArrayLit());
659:       assertFalse(node0.isEmpty());
660:       assertFalse(node0.isFalse());
661:       assertFalse(node0.isFunction());
662:       assertFalse(node0.isInc());
663:       assertFalse(node0.isThrow());
664:       assertFalse(node0.isDefaultCase());
665:       assertFalse(node0.isObjectLit());
666:       assertFalse(node0.isNot());
667:       assertFalse(node0.isNull());
668:       assertFalse(node0.isExprResult());
669:       assertFalse(node0.isTrue());
670:       assertFalse(node0.isBreak());
671:       assertFalse(node0.isVoid());
672:       assertFalse(node0.isDebugger());
673:       assertFalse(node0.isName());
674:       assertFalse(node0.isAnd());
675:       assertFalse(node0.isCall());
676:       assertFalse(node0.isAssign());
677:       assertFalse(node0.isGetElem());
678:       assertFalse(node0.isTypeOf());
679:       assertFalse(node0.hasChildren());
680:       assertFalse(node0.isDec());
681:       assertFalse(node0.isGetProp());
682:       assertFalse(node0.isComma());
683:       assertEquals((-1272), node0.getType());
684:       assertFalse(node0.isReturn());
685:       assertFalse(node0.isWhile());
686:       assertEquals(11, node1.getLineno());
687:       assertFalse(node1.isCast());
688:       assertFalse(node1.isGetElem());
689:       assertFalse(node1.isLabelName());
690:       assertFalse(node1.isDec());
691:       assertFalse(node1.isExprResult());
692:       assertFalse(node1.isLabel());
693:       assertFalse(node1.isWith());
694:       assertFalse(node1.isAssign());
695:       assertFalse(node1.isTypeOf());
696:       assertFalse(node1.isInstanceOf());
697:       assertFalse(node1.isAssignAdd());
698:       assertFalse(node1.isDo());
699:       assertFalse(node1.isOr());
700:       assertFalse(node1.isHook());
701:       assertFalse(node1.isVar());
702:       assertFalse(node1.isAdd());
703:       assertFalse(node1.isNew());
704:       assertFalse(node1.isStringKey());
705:       assertFalse(node1.isSwitch());
706:       assertFalse(node1.isThis());
707:       assertFalse(node1.isBlock());
708:       assertFalse(node1.hasMoreThanOneChild());
709:       assertFalse(node1.isCase());
710:       assertEquals(36, node1.getCharno());
711:       assertFalse(node1.isNumber());
712:       assertFalse(node1.isParamList());
713:       assertFalse(node1.isScript());
714:       assertFalse(node1.isGetterDef());
715:       assertFalse(node1.isArrayLit());
716:       assertFalse(node1.isDelProp());
717:       assertFalse(node1.isVoid());
718:       assertFalse(node1.isTry());
719:       assertFalse(node1.isDefaultCase());
720:       assertTrue(node1.hasOneChild());
721:       assertFalse(node1.isFor());
722:       assertEquals(8199, node1.getType());
723:       assertFalse(node1.isFunction());
724:       assertEquals(1, node1.getChildCount());
725:       assertFalse(node1.isRegExp());
726:       assertFalse(node1.isIn());
727:       assertFalse(node1.isCatch());
728:       assertTrue(node1.hasChildren());
729:       assertFalse(node1.isIf());
730:       assertFalse(node1.isSetterDef());
731:       assertFalse(node1.isInc());
732:       assertFalse(node1.isTrue());
733:       assertFalse(node1.isNull());
734:       assertFalse(node1.isEmpty());
735:       assertFalse(node1.isNE());
736:       assertFalse(node1.isCall());
737:       assertFalse(node1.isThrow());
738:       assertFalse(node1.isName());
739:       assertFalse(node1.isBreak());
740:       assertFalse(node1.isWhile());
741:       assertFalse(node1.isFalse());
742:       assertFalse(node1.isContinue());
743:       assertEquals(45092, node1.getSourcePosition());
744:       assertFalse(node1.isComma());
745:       assertFalse(node1.isReturn());
746:       assertFalse(node1.isAnd());
747:       assertFalse(node1.isGetProp());
748:       assertFalse(node1.isString());
749:       assertFalse(node1.isDebugger());
750:       assertFalse(node1.isNot());
751:       assertFalse(node1.isObjectLit());
752:       assertNotSame(node0, node1);
753:       assertNotSame(node1, node0);
754:       
755:       // Undeclared exception!
756:       try { 
757:         node1.getString();
758:         fail("Expecting exception: IllegalStateException");
759:       
760:       } catch(IllegalStateException e) {
761:          //
762:          // 8199
763:          //
764:          verifyException("com.google.javascript.rhino.Token", e);
765:       }
766:   }
767: }
RegularFileObject[/tmp/EvoSuite_333_1628157544165/com/google/javascript/rhino/Node_333_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_333_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_333_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_333_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 09:59:04.255 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node((-1272), (-1272), (-1272));
assertNotNull(node0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals((-1272), node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals((-1272), node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());

node0.removeProp(47);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals((-1272), node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());

Node node1 = new Node(8199, node0, 11, 36);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals((-1272), node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(11, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals(36, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(8199, node1.getType());
assertFalse(node1.isFunction());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertEquals(45092, node1.getSourcePosition());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());

boolean boolean0 = node1.isNoSideEffectsCall();
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals((-1272), node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(11, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals(36, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(8199, node1.getType());
assertFalse(node1.isFunction());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertEquals(45092, node1.getSourcePosition());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertNotSame(node0, node1);
assertNotSame(node1, node0);

node1.getString();

[MASTER] 09:59:07.506 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_360_1628157547441/com/google/javascript/rhino/Node_360_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_360_1628157547441/com/google/javascript/rhino/Node_360_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:07.506 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:07.506 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:07.506 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 09:59:07.507 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_360_1628157547441/com/google/javascript/rhino/Node_360_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_360_tmp__ESTest extends Node_360_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("hmD^~&Bf&P<Z_v~F");
21:       assertNotNull(node0);
22:       assertEquals(57, Node.REFLECTED_OBJECT);
23:       assertEquals(40, Node.ORIGINALNAME_PROP);
24:       assertEquals(50, Node.FREE_CALL);
25:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
26:       assertEquals(52, Node.LENGTH);
27:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
28:       assertEquals(48, Node.DIRECTIVES);
29:       assertEquals(49, Node.DIRECT_EVAL);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(51, Node.STATIC_SOURCE_FILE);
32:       assertEquals(12, Node.COLUMN_BITS);
33:       assertEquals(4095, Node.COLUMN_MASK);
34:       assertEquals(46, Node.IS_NAMESPACE);
35:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
36:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(32, Node.INCRDECR_PROP);
39:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
40:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
41:       assertEquals(53, Node.INPUT_ID);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(43, Node.IS_CONSTANT_NAME);
44:       assertEquals(36, Node.QUOTED_PROP);
45:       assertEquals(56, Node.CHANGE_TIME);
46:       assertEquals(37, Node.OPT_ARG_NAME);
47:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(30, Node.VAR_ARGS_NAME);
51:       assertEquals(8, Node.FLAG_NO_THROWS);
52:       assertEquals(2, Node.POST_FLAG);
53:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
54:       assertEquals(15, Node.NO_SIDE_EFFECTS);
55:       assertEquals(39, Node.EMPTY_BLOCK);
56:       assertEquals(47, Node.IS_DISPATCHER);
57:       assertEquals(57, Node.LAST_PROP);
58:       assertFalse(node0.isBlock());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isAdd());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isNull());
64:       assertFalse(node0.isParamList());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isReturn());
67:       assertEquals((-1), node0.getLineno());
68:       assertFalse(node0.hasMoreThanOneChild());
69:       assertFalse(node0.isCatch());
70:       assertFalse(node0.isDec());
71:       assertEquals((-1), node0.getSourcePosition());
72:       assertFalse(node0.isNumber());
73:       assertFalse(node0.isTypeOf());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.hasOneChild());
77:       assertTrue(node0.isString());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isExprResult());
80:       assertFalse(node0.isTrue());
81:       assertFalse(node0.isAssign());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isArrayLit());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isVoid());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isLabel());
89:       assertEquals(0, node0.getChildCount());
90:       assertFalse(node0.isOr());
91:       assertFalse(node0.isEmpty());
92:       assertFalse(node0.isNew());
93:       assertFalse(node0.isDefaultCase());
94:       assertFalse(node0.isDo());
95:       assertFalse(node0.isHook());
96:       assertEquals((-1), node0.getCharno());
97:       assertFalse(node0.isFalse());
98:       assertFalse(node0.isBreak());
99:       assertFalse(node0.isSwitch());
100:       assertFalse(node0.isGetProp());
101:       assertFalse(node0.isInstanceOf());
102:       assertFalse(node0.isComma());
103:       assertFalse(node0.isThis());
104:       assertFalse(node0.isNot());
105:       assertFalse(node0.isObjectLit());
106:       assertFalse(node0.isGetterDef());
107:       assertFalse(node0.isCase());
108:       assertFalse(node0.isFor());
109:       assertFalse(node0.isScript());
110:       assertFalse(node0.isFunction());
111:       assertFalse(node0.isCast());
112:       assertFalse(node0.isDebugger());
113:       assertFalse(node0.isRegExp());
114:       assertFalse(node0.isWith());
115:       assertFalse(node0.isIf());
116:       assertFalse(node0.isNE());
117:       assertFalse(node0.isAnd());
118:       assertFalse(node0.isIn());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isThrow());
121:       assertEquals(40, node0.getType());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isInc());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertNotNull(iterable0);
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       assertEquals(40, Node.ORIGINALNAME_PROP);
130:       assertEquals(50, Node.FREE_CALL);
131:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
132:       assertEquals(52, Node.LENGTH);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(48, Node.DIRECTIVES);
135:       assertEquals(49, Node.DIRECT_EVAL);
136:       assertEquals(54, Node.SLASH_V);
137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
138:       assertEquals(12, Node.COLUMN_BITS);
139:       assertEquals(4095, Node.COLUMN_MASK);
140:       assertEquals(46, Node.IS_NAMESPACE);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(32, Node.INCRDECR_PROP);
145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(43, Node.IS_CONSTANT_NAME);
150:       assertEquals(36, Node.QUOTED_PROP);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(30, Node.VAR_ARGS_NAME);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(2, Node.POST_FLAG);
159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(39, Node.EMPTY_BLOCK);
162:       assertEquals(47, Node.IS_DISPATCHER);
163:       assertEquals(57, Node.LAST_PROP);
164:       assertFalse(node0.isBlock());
165:       assertFalse(node0.isVar());
166:       assertFalse(node0.isAdd());
167:       assertFalse(node0.isStringKey());
168:       assertFalse(node0.isCall());
169:       assertFalse(node0.isNull());
170:       assertFalse(node0.isParamList());
171:       assertFalse(node0.isName());
172:       assertFalse(node0.isReturn());
173:       assertEquals((-1), node0.getLineno());
174:       assertFalse(node0.hasMoreThanOneChild());
175:       assertFalse(node0.isCatch());
176:       assertFalse(node0.isDec());
177:       assertEquals((-1), node0.getSourcePosition());
178:       assertFalse(node0.isNumber());
179:       assertFalse(node0.isTypeOf());
180:       assertFalse(node0.isWhile());
181:       assertFalse(node0.hasChildren());
182:       assertFalse(node0.hasOneChild());
183:       assertTrue(node0.isString());
184:       assertFalse(node0.isTry());
185:       assertFalse(node0.isExprResult());
186:       assertFalse(node0.isTrue());
187:       assertFalse(node0.isAssign());
188:       assertFalse(node0.isGetElem());
189:       assertFalse(node0.isArrayLit());
190:       assertFalse(node0.isDelProp());
191:       assertFalse(node0.isVoid());
192:       assertFalse(node0.isLabelName());
193:       assertFalse(node0.isAssignAdd());
194:       assertFalse(node0.isLabel());
195:       assertEquals(0, node0.getChildCount());
196:       assertFalse(node0.isOr());
197:       assertFalse(node0.isEmpty());
198:       assertFalse(node0.isNew());
199:       assertFalse(node0.isDefaultCase());
200:       assertFalse(node0.isDo());
201:       assertFalse(node0.isHook());
202:       assertEquals((-1), node0.getCharno());
203:       assertFalse(node0.isFalse());
204:       assertFalse(node0.isBreak());
205:       assertFalse(node0.isSwitch());
206:       assertFalse(node0.isGetProp());
207:       assertFalse(node0.isInstanceOf());
208:       assertFalse(node0.isComma());
209:       assertFalse(node0.isThis());
210:       assertFalse(node0.isNot());
211:       assertFalse(node0.isObjectLit());
212:       assertFalse(node0.isGetterDef());
213:       assertFalse(node0.isCase());
214:       assertFalse(node0.isFor());
215:       assertFalse(node0.isScript());
216:       assertFalse(node0.isFunction());
217:       assertFalse(node0.isCast());
218:       assertFalse(node0.isDebugger());
219:       assertFalse(node0.isRegExp());
220:       assertFalse(node0.isWith());
221:       assertFalse(node0.isIf());
222:       assertFalse(node0.isNE());
223:       assertFalse(node0.isAnd());
224:       assertFalse(node0.isIn());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isThrow());
227:       assertEquals(40, node0.getType());
228:       assertFalse(node0.isSetterDef());
229:       assertFalse(node0.isInc());
230:       
231:       Node node1 = new Node(31, node0, node0, node0);
232:       assertFalse(node1.equals((Object)node0));
233:       assertNotNull(node1);
234:       assertEquals(57, Node.REFLECTED_OBJECT);
235:       assertEquals(40, Node.ORIGINALNAME_PROP);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
238:       assertEquals(52, Node.LENGTH);
239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
240:       assertEquals(48, Node.DIRECTIVES);
241:       assertEquals(49, Node.DIRECT_EVAL);
242:       assertEquals(54, Node.SLASH_V);
243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
244:       assertEquals(12, Node.COLUMN_BITS);
245:       assertEquals(4095, Node.COLUMN_MASK);
246:       assertEquals(46, Node.IS_NAMESPACE);
247:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
248:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
249:       assertEquals(1, Node.DECR_FLAG);
250:       assertEquals(32, Node.INCRDECR_PROP);
251:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
252:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
253:       assertEquals(53, Node.INPUT_ID);
254:       assertEquals(29, Node.JSDOC_INFO_PROP);
255:       assertEquals(43, Node.IS_CONSTANT_NAME);
256:       assertEquals(36, Node.QUOTED_PROP);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(37, Node.OPT_ARG_NAME);
259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(30, Node.VAR_ARGS_NAME);
263:       assertEquals(8, Node.FLAG_NO_THROWS);
264:       assertEquals(2, Node.POST_FLAG);
265:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
266:       assertEquals(15, Node.NO_SIDE_EFFECTS);
267:       assertEquals(39, Node.EMPTY_BLOCK);
268:       assertEquals(47, Node.IS_DISPATCHER);
269:       assertEquals(57, Node.LAST_PROP);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertEquals(54, Node.SLASH_V);
272:       assertEquals(15, Node.NO_SIDE_EFFECTS);
273:       assertEquals(52, Node.LENGTH);
274:       assertEquals(1, Node.DECR_FLAG);
275:       assertEquals(30, Node.VAR_ARGS_NAME);
276:       assertEquals(57, Node.LAST_PROP);
277:       assertEquals(12, Node.COLUMN_BITS);
278:       assertEquals(32, Node.INCRDECR_PROP);
279:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
280:       assertEquals(48, Node.DIRECTIVES);
281:       assertEquals(39, Node.EMPTY_BLOCK);
282:       assertEquals(37, Node.OPT_ARG_NAME);
283:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
284:       assertEquals(55, Node.INFERRED_FUNCTION);
285:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
286:       assertEquals(29, Node.JSDOC_INFO_PROP);
287:       assertEquals(8, Node.FLAG_NO_THROWS);
288:       assertEquals(4095, Node.COLUMN_MASK);
289:       assertEquals(49, Node.DIRECT_EVAL);
290:       assertEquals(56, Node.CHANGE_TIME);
291:       assertEquals(57, Node.REFLECTED_OBJECT);
292:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
293:       assertEquals(53, Node.INPUT_ID);
294:       assertEquals(36, Node.QUOTED_PROP);
295:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
296:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
297:       assertEquals(47, Node.IS_DISPATCHER);
298:       assertEquals(2, Node.POST_FLAG);
299:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
300:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
301:       assertEquals(40, Node.ORIGINALNAME_PROP);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
304:       assertEquals(46, Node.IS_NAMESPACE);
305:       assertEquals(43, Node.IS_CONSTANT_NAME);
306:       assertFalse(node0.isBlock());
307:       assertFalse(node0.isVar());
308:       assertFalse(node0.isAdd());
309:       assertFalse(node0.isStringKey());
310:       assertFalse(node0.isCall());
311:       assertFalse(node0.isNull());
312:       assertFalse(node0.isParamList());
313:       assertFalse(node0.isName());
314:       assertFalse(node0.isReturn());
315:       assertEquals((-1), node0.getLineno());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isCatch());
318:       assertFalse(node0.isDec());
319:       assertEquals((-1), node0.getSourcePosition());
320:       assertFalse(node0.isNumber());
321:       assertFalse(node0.isTypeOf());
322:       assertFalse(node0.isWhile());
323:       assertFalse(node0.hasChildren());
324:       assertFalse(node0.hasOneChild());
325:       assertTrue(node0.isString());
326:       assertFalse(node0.isTry());
327:       assertFalse(node0.isExprResult());
328:       assertFalse(node0.isTrue());
329:       assertFalse(node0.isAssign());
330:       assertFalse(node0.isGetElem());
331:       assertFalse(node0.isArrayLit());
332:       assertFalse(node0.isDelProp());
333:       assertFalse(node0.isVoid());
334:       assertFalse(node0.isLabelName());
335:       assertFalse(node0.isAssignAdd());
336:       assertFalse(node0.isLabel());
337:       assertEquals(0, node0.getChildCount());
338:       assertFalse(node0.isOr());
339:       assertFalse(node0.isEmpty());
340:       assertFalse(node0.isNew());
341:       assertFalse(node0.isDefaultCase());
342:       assertFalse(node0.isDo());
343:       assertFalse(node0.isHook());
344:       assertEquals((-1), node0.getCharno());
345:       assertFalse(node0.isFalse());
346:       assertFalse(node0.isBreak());
347:       assertFalse(node0.isSwitch());
348:       assertFalse(node0.isGetProp());
349:       assertFalse(node0.isInstanceOf());
350:       assertFalse(node0.isComma());
351:       assertFalse(node0.isThis());
352:       assertFalse(node0.isNot());
353:       assertFalse(node0.isObjectLit());
354:       assertFalse(node0.isGetterDef());
355:       assertFalse(node0.isCase());
356:       assertFalse(node0.isFor());
357:       assertFalse(node0.isScript());
358:       assertFalse(node0.isFunction());
359:       assertFalse(node0.isCast());
360:       assertFalse(node0.isDebugger());
361:       assertFalse(node0.isRegExp());
362:       assertFalse(node0.isWith());
363:       assertFalse(node0.isIf());
364:       assertFalse(node0.isNE());
365:       assertFalse(node0.isAnd());
366:       assertFalse(node0.isIn());
367:       assertFalse(node0.isContinue());
368:       assertFalse(node0.isThrow());
369:       assertEquals(40, node0.getType());
370:       assertFalse(node0.isSetterDef());
371:       assertFalse(node0.isInc());
372:       assertFalse(node1.isBlock());
373:       assertFalse(node1.isAdd());
374:       assertFalse(node1.isContinue());
375:       assertFalse(node1.hasMoreThanOneChild());
376:       assertFalse(node1.isVar());
377:       assertFalse(node1.isReturn());
378:       assertFalse(node1.isAssignAdd());
379:       assertFalse(node1.isDo());
380:       assertFalse(node1.isWhile());
381:       assertFalse(node1.isNew());
382:       assertFalse(node1.isTypeOf());
383:       assertFalse(node1.isNull());
384:       assertFalse(node1.isDec());
385:       assertFalse(node1.isSetterDef());
386:       assertFalse(node1.isAssign());
387:       assertFalse(node1.isOr());
388:       assertTrue(node1.isDelProp());
389:       assertFalse(node1.isCatch());
390:       assertFalse(node1.isCall());
391:       assertFalse(node1.isGetElem());
392:       assertEquals(31, node1.getType());
393:       assertFalse(node1.isName());
394:       assertEquals((-1), node1.getLineno());
395:       assertFalse(node1.isExprResult());
396:       assertFalse(node1.isDebugger());
397:       assertFalse(node1.isNot());
398:       assertFalse(node1.isObjectLit());
399:       assertFalse(node1.isFunction());
400:       assertEquals((-1), node1.getSourcePosition());
401:       assertFalse(node1.isGetProp());
402:       assertFalse(node1.isFalse());
403:       assertFalse(node1.isCast());
404:       assertFalse(node1.isAnd());
405:       assertEquals((-1), node1.getCharno());
406:       assertFalse(node1.isInc());
407:       assertFalse(node1.isString());
408:       assertEquals(1, node1.getChildCount());
409:       assertFalse(node1.isHook());
410:       assertFalse(node1.isCase());
411:       assertFalse(node1.isThrow());
412:       assertFalse(node1.isNE());
413:       assertFalse(node1.isComma());
414:       assertFalse(node1.isBreak());
415:       assertFalse(node1.isThis());
416:       assertTrue(node1.hasOneChild());
417:       assertTrue(node1.hasChildren());
418:       assertFalse(node1.isEmpty());
419:       assertFalse(node1.isIn());
420:       assertFalse(node1.isInstanceOf());
421:       assertFalse(node1.isIf());
422:       assertFalse(node1.isVoid());
423:       assertFalse(node1.isRegExp());
424:       assertFalse(node1.isScript());
425:       assertFalse(node1.isTrue());
426:       assertFalse(node1.isWith());
427:       assertFalse(node1.isFor());
428:       assertFalse(node1.isTry());
429:       assertFalse(node1.isDefaultCase());
430:       assertFalse(node1.isParamList());
431:       assertFalse(node1.isLabel());
432:       assertFalse(node1.isGetterDef());
433:       assertFalse(node1.isNumber());
434:       assertFalse(node1.isArrayLit());
435:       assertFalse(node1.isLabelName());
436:       assertFalse(node1.isStringKey());
437:       assertFalse(node1.isSwitch());
438:       
439:       boolean boolean0 = node1.isWhile();
440:       assertFalse(boolean0);
441:       assertFalse(node0.equals((Object)node1));
442:       assertFalse(node1.equals((Object)node0));
443:       assertEquals(57, Node.REFLECTED_OBJECT);
444:       assertEquals(40, Node.ORIGINALNAME_PROP);
445:       assertEquals(50, Node.FREE_CALL);
446:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
447:       assertEquals(52, Node.LENGTH);
448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
449:       assertEquals(48, Node.DIRECTIVES);
450:       assertEquals(49, Node.DIRECT_EVAL);
451:       assertEquals(54, Node.SLASH_V);
452:       assertEquals(51, Node.STATIC_SOURCE_FILE);
453:       assertEquals(12, Node.COLUMN_BITS);
454:       assertEquals(4095, Node.COLUMN_MASK);
455:       assertEquals(46, Node.IS_NAMESPACE);
456:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
458:       assertEquals(1, Node.DECR_FLAG);
459:       assertEquals(32, Node.INCRDECR_PROP);
460:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
461:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
462:       assertEquals(53, Node.INPUT_ID);
463:       assertEquals(29, Node.JSDOC_INFO_PROP);
464:       assertEquals(43, Node.IS_CONSTANT_NAME);
465:       assertEquals(36, Node.QUOTED_PROP);
466:       assertEquals(56, Node.CHANGE_TIME);
467:       assertEquals(37, Node.OPT_ARG_NAME);
468:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
469:       assertEquals(55, Node.INFERRED_FUNCTION);
470:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
471:       assertEquals(30, Node.VAR_ARGS_NAME);
472:       assertEquals(8, Node.FLAG_NO_THROWS);
473:       assertEquals(2, Node.POST_FLAG);
474:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
475:       assertEquals(15, Node.NO_SIDE_EFFECTS);
476:       assertEquals(39, Node.EMPTY_BLOCK);
477:       assertEquals(47, Node.IS_DISPATCHER);
478:       assertEquals(57, Node.LAST_PROP);
479:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
480:       assertEquals(54, Node.SLASH_V);
481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
482:       assertEquals(52, Node.LENGTH);
483:       assertEquals(1, Node.DECR_FLAG);
484:       assertEquals(30, Node.VAR_ARGS_NAME);
485:       assertEquals(57, Node.LAST_PROP);
486:       assertEquals(12, Node.COLUMN_BITS);
487:       assertEquals(32, Node.INCRDECR_PROP);
488:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
489:       assertEquals(48, Node.DIRECTIVES);
490:       assertEquals(39, Node.EMPTY_BLOCK);
491:       assertEquals(37, Node.OPT_ARG_NAME);
492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
493:       assertEquals(55, Node.INFERRED_FUNCTION);
494:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
495:       assertEquals(29, Node.JSDOC_INFO_PROP);
496:       assertEquals(8, Node.FLAG_NO_THROWS);
497:       assertEquals(4095, Node.COLUMN_MASK);
498:       assertEquals(49, Node.DIRECT_EVAL);
499:       assertEquals(56, Node.CHANGE_TIME);
500:       assertEquals(57, Node.REFLECTED_OBJECT);
501:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
502:       assertEquals(53, Node.INPUT_ID);
503:       assertEquals(36, Node.QUOTED_PROP);
504:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
505:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
506:       assertEquals(47, Node.IS_DISPATCHER);
507:       assertEquals(2, Node.POST_FLAG);
508:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
509:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
510:       assertEquals(40, Node.ORIGINALNAME_PROP);
511:       assertEquals(50, Node.FREE_CALL);
512:       assertEquals(51, Node.STATIC_SOURCE_FILE);
513:       assertEquals(46, Node.IS_NAMESPACE);
514:       assertEquals(43, Node.IS_CONSTANT_NAME);
515:       assertFalse(node0.isBlock());
516:       assertFalse(node0.isVar());
517:       assertFalse(node0.isAdd());
518:       assertFalse(node0.isStringKey());
519:       assertFalse(node0.isCall());
520:       assertFalse(node0.isNull());
521:       assertFalse(node0.isParamList());
522:       assertFalse(node0.isName());
523:       assertFalse(node0.isReturn());
524:       assertEquals((-1), node0.getLineno());
525:       assertFalse(node0.hasMoreThanOneChild());
526:       assertFalse(node0.isCatch());
527:       assertFalse(node0.isDec());
528:       assertEquals((-1), node0.getSourcePosition());
529:       assertFalse(node0.isNumber());
530:       assertFalse(node0.isTypeOf());
531:       assertFalse(node0.isWhile());
532:       assertFalse(node0.hasChildren());
533:       assertFalse(node0.hasOneChild());
534:       assertTrue(node0.isString());
535:       assertFalse(node0.isTry());
536:       assertFalse(node0.isExprResult());
537:       assertFalse(node0.isTrue());
538:       assertFalse(node0.isAssign());
539:       assertFalse(node0.isGetElem());
540:       assertFalse(node0.isArrayLit());
541:       assertFalse(node0.isDelProp());
542:       assertFalse(node0.isVoid());
543:       assertFalse(node0.isLabelName());
544:       assertFalse(node0.isAssignAdd());
545:       assertFalse(node0.isLabel());
546:       assertEquals(0, node0.getChildCount());
547:       assertFalse(node0.isOr());
548:       assertFalse(node0.isEmpty());
549:       assertFalse(node0.isNew());
550:       assertFalse(node0.isDefaultCase());
551:       assertFalse(node0.isDo());
552:       assertFalse(node0.isHook());
553:       assertEquals((-1), node0.getCharno());
554:       assertFalse(node0.isFalse());
555:       assertFalse(node0.isBreak());
556:       assertFalse(node0.isSwitch());
557:       assertFalse(node0.isGetProp());
558:       assertFalse(node0.isInstanceOf());
559:       assertFalse(node0.isComma());
560:       assertFalse(node0.isThis());
561:       assertFalse(node0.isNot());
562:       assertFalse(node0.isObjectLit());
563:       assertFalse(node0.isGetterDef());
564:       assertFalse(node0.isCase());
565:       assertFalse(node0.isFor());
566:       assertFalse(node0.isScript());
567:       assertFalse(node0.isFunction());
568:       assertFalse(node0.isCast());
569:       assertFalse(node0.isDebugger());
570:       assertFalse(node0.isRegExp());
571:       assertFalse(node0.isWith());
572:       assertFalse(node0.isIf());
573:       assertFalse(node0.isNE());
574:       assertFalse(node0.isAnd());
575:       assertFalse(node0.isIn());
576:       assertFalse(node0.isContinue());
577:       assertFalse(node0.isThrow());
578:       assertEquals(40, node0.getType());
579:       assertFalse(node0.isSetterDef());
580:       assertFalse(node0.isInc());
581:       assertFalse(node1.isBlock());
582:       assertFalse(node1.isAdd());
583:       assertFalse(node1.isContinue());
584:       assertFalse(node1.hasMoreThanOneChild());
585:       assertFalse(node1.isVar());
586:       assertFalse(node1.isReturn());
587:       assertFalse(node1.isAssignAdd());
588:       assertFalse(node1.isDo());
589:       assertFalse(node1.isWhile());
590:       assertFalse(node1.isNew());
591:       assertFalse(node1.isTypeOf());
592:       assertFalse(node1.isNull());
593:       assertFalse(node1.isDec());
594:       assertFalse(node1.isSetterDef());
595:       assertFalse(node1.isAssign());
596:       assertFalse(node1.isOr());
597:       assertTrue(node1.isDelProp());
598:       assertFalse(node1.isCatch());
599:       assertFalse(node1.isCall());
600:       assertFalse(node1.isGetElem());
601:       assertEquals(31, node1.getType());
602:       assertFalse(node1.isName());
603:       assertEquals((-1), node1.getLineno());
604:       assertFalse(node1.isExprResult());
605:       assertFalse(node1.isDebugger());
606:       assertFalse(node1.isNot());
607:       assertFalse(node1.isObjectLit());
608:       assertFalse(node1.isFunction());
609:       assertEquals((-1), node1.getSourcePosition());
610:       assertFalse(node1.isGetProp());
611:       assertFalse(node1.isFalse());
612:       assertFalse(node1.isCast());
613:       assertFalse(node1.isAnd());
614:       assertEquals((-1), node1.getCharno());
615:       assertFalse(node1.isInc());
616:       assertFalse(node1.isString());
617:       assertEquals(1, node1.getChildCount());
618:       assertFalse(node1.isHook());
619:       assertFalse(node1.isCase());
620:       assertFalse(node1.isThrow());
621:       assertFalse(node1.isNE());
622:       assertFalse(node1.isComma());
623:       assertFalse(node1.isBreak());
624:       assertFalse(node1.isThis());
625:       assertTrue(node1.hasOneChild());
626:       assertTrue(node1.hasChildren());
627:       assertFalse(node1.isEmpty());
628:       assertFalse(node1.isIn());
629:       assertFalse(node1.isInstanceOf());
630:       assertFalse(node1.isIf());
631:       assertFalse(node1.isVoid());
632:       assertFalse(node1.isRegExp());
633:       assertFalse(node1.isScript());
634:       assertFalse(node1.isTrue());
635:       assertFalse(node1.isWith());
636:       assertFalse(node1.isFor());
637:       assertFalse(node1.isTry());
638:       assertFalse(node1.isDefaultCase());
639:       assertFalse(node1.isParamList());
640:       assertFalse(node1.isLabel());
641:       assertFalse(node1.isGetterDef());
642:       assertFalse(node1.isNumber());
643:       assertFalse(node1.isArrayLit());
644:       assertFalse(node1.isLabelName());
645:       assertFalse(node1.isStringKey());
646:       assertFalse(node1.isSwitch());
647:       
648:       boolean boolean1 = node1.hasChild(node0);
649:       assertTrue(boolean1);
650:       assertFalse(node0.equals((Object)node1));
651:       assertFalse(node1.equals((Object)node0));
652:       assertFalse(boolean1 == boolean0);
653:       assertEquals(57, Node.REFLECTED_OBJECT);
654:       assertEquals(40, Node.ORIGINALNAME_PROP);
655:       assertEquals(50, Node.FREE_CALL);
656:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
657:       assertEquals(52, Node.LENGTH);
658:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
659:       assertEquals(48, Node.DIRECTIVES);
660:       assertEquals(49, Node.DIRECT_EVAL);
661:       assertEquals(54, Node.SLASH_V);
662:       assertEquals(51, Node.STATIC_SOURCE_FILE);
663:       assertEquals(12, Node.COLUMN_BITS);
664:       assertEquals(4095, Node.COLUMN_MASK);
665:       assertEquals(46, Node.IS_NAMESPACE);
666:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
667:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
668:       assertEquals(1, Node.DECR_FLAG);
669:       assertEquals(32, Node.INCRDECR_PROP);
670:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
671:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
672:       assertEquals(53, Node.INPUT_ID);
673:       assertEquals(29, Node.JSDOC_INFO_PROP);
674:       assertEquals(43, Node.IS_CONSTANT_NAME);
675:       assertEquals(36, Node.QUOTED_PROP);
676:       assertEquals(56, Node.CHANGE_TIME);
677:       assertEquals(37, Node.OPT_ARG_NAME);
678:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
679:       assertEquals(55, Node.INFERRED_FUNCTION);
680:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
681:       assertEquals(30, Node.VAR_ARGS_NAME);
682:       assertEquals(8, Node.FLAG_NO_THROWS);
683:       assertEquals(2, Node.POST_FLAG);
684:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
685:       assertEquals(15, Node.NO_SIDE_EFFECTS);
686:       assertEquals(39, Node.EMPTY_BLOCK);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(57, Node.LAST_PROP);
689:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
690:       assertEquals(54, Node.SLASH_V);
691:       assertEquals(15, Node.NO_SIDE_EFFECTS);
692:       assertEquals(52, Node.LENGTH);
693:       assertEquals(1, Node.DECR_FLAG);
694:       assertEquals(30, Node.VAR_ARGS_NAME);
695:       assertEquals(57, Node.LAST_PROP);
696:       assertEquals(12, Node.COLUMN_BITS);
697:       assertEquals(32, Node.INCRDECR_PROP);
698:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
699:       assertEquals(48, Node.DIRECTIVES);
700:       assertEquals(39, Node.EMPTY_BLOCK);
701:       assertEquals(37, Node.OPT_ARG_NAME);
702:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
703:       assertEquals(55, Node.INFERRED_FUNCTION);
704:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
705:       assertEquals(29, Node.JSDOC_INFO_PROP);
706:       assertEquals(8, Node.FLAG_NO_THROWS);
707:       assertEquals(4095, Node.COLUMN_MASK);
708:       assertEquals(49, Node.DIRECT_EVAL);
709:       assertEquals(56, Node.CHANGE_TIME);
710:       assertEquals(57, Node.REFLECTED_OBJECT);
711:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
712:       assertEquals(53, Node.INPUT_ID);
713:       assertEquals(36, Node.QUOTED_PROP);
714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
716:       assertEquals(47, Node.IS_DISPATCHER);
717:       assertEquals(2, Node.POST_FLAG);
718:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
719:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
720:       assertEquals(40, Node.ORIGINALNAME_PROP);
721:       assertEquals(50, Node.FREE_CALL);
722:       assertEquals(51, Node.STATIC_SOURCE_FILE);
723:       assertEquals(46, Node.IS_NAMESPACE);
724:       assertEquals(43, Node.IS_CONSTANT_NAME);
725:       assertFalse(node0.isBlock());
726:       assertFalse(node0.isVar());
727:       assertFalse(node0.isAdd());
728:       assertFalse(node0.isStringKey());
729:       assertFalse(node0.isCall());
730:       assertFalse(node0.isNull());
731:       assertFalse(node0.isParamList());
732:       assertFalse(node0.isName());
733:       assertFalse(node0.isReturn());
734:       assertEquals((-1), node0.getLineno());
735:       assertFalse(node0.hasMoreThanOneChild());
736:       assertFalse(node0.isCatch());
737:       assertFalse(node0.isDec());
738:       assertEquals((-1), node0.getSourcePosition());
739:       assertFalse(node0.isNumber());
740:       assertFalse(node0.isTypeOf());
741:       assertFalse(node0.isWhile());
742:       assertFalse(node0.hasChildren());
743:       assertFalse(node0.hasOneChild());
744:       assertTrue(node0.isString());
745:       assertFalse(node0.isTry());
746:       assertFalse(node0.isExprResult());
747:       assertFalse(node0.isTrue());
748:       assertFalse(node0.isAssign());
749:       assertFalse(node0.isGetElem());
750:       assertFalse(node0.isArrayLit());
751:       assertFalse(node0.isDelProp());
752:       assertFalse(node0.isVoid());
753:       assertFalse(node0.isLabelName());
754:       assertFalse(node0.isAssignAdd());
755:       assertFalse(node0.isLabel());
756:       assertEquals(0, node0.getChildCount());
757:       assertFalse(node0.isOr());
758:       assertFalse(node0.isEmpty());
759:       assertFalse(node0.isNew());
760:       assertFalse(node0.isDefaultCase());
761:       assertFalse(node0.isDo());
762:       assertFalse(node0.isHook());
763:       assertEquals((-1), node0.getCharno());
764:       assertFalse(node0.isFalse());
765:       assertFalse(node0.isBreak());
766:       assertFalse(node0.isSwitch());
767:       assertFalse(node0.isGetProp());
768:       assertFalse(node0.isInstanceOf());
769:       assertFalse(node0.isComma());
770:       assertFalse(node0.isThis());
771:       assertFalse(node0.isNot());
772:       assertFalse(node0.isObjectLit());
773:       assertFalse(node0.isGetterDef());
774:       assertFalse(node0.isCase());
775:       assertFalse(node0.isFor());
776:       assertFalse(node0.isScript());
777:       assertFalse(node0.isFunction());
778:       assertFalse(node0.isCast());
779:       assertFalse(node0.isDebugger());
780:       assertFalse(node0.isRegExp());
781:       assertFalse(node0.isWith());
782:       assertFalse(node0.isIf());
783:       assertFalse(node0.isNE());
784:       assertFalse(node0.isAnd());
785:       assertFalse(node0.isIn());
786:       assertFalse(node0.isContinue());
787:       assertFalse(node0.isThrow());
788:       assertEquals(40, node0.getType());
789:       assertFalse(node0.isSetterDef());
790:       assertFalse(node0.isInc());
791:       assertFalse(node1.isBlock());
792:       assertFalse(node1.isAdd());
793:       assertFalse(node1.isContinue());
794:       assertFalse(node1.hasMoreThanOneChild());
795:       assertFalse(node1.isVar());
796:       assertFalse(node1.isReturn());
797:       assertFalse(node1.isAssignAdd());
798:       assertFalse(node1.isDo());
799:       assertFalse(node1.isWhile());
800:       assertFalse(node1.isNew());
801:       assertFalse(node1.isTypeOf());
802:       assertFalse(node1.isNull());
803:       assertFalse(node1.isDec());
804:       assertFalse(node1.isSetterDef());
805:       assertFalse(node1.isAssign());
806:       assertFalse(node1.isOr());
807:       assertTrue(node1.isDelProp());
808:       assertFalse(node1.isCatch());
809:       assertFalse(node1.isCall());
810:       assertFalse(node1.isGetElem());
811:       assertEquals(31, node1.getType());
812:       assertFalse(node1.isName());
813:       assertEquals((-1), node1.getLineno());
814:       assertFalse(node1.isExprResult());
815:       assertFalse(node1.isDebugger());
816:       assertFalse(node1.isNot());
817:       assertFalse(node1.isObjectLit());
818:       assertFalse(node1.isFunction());
819:       assertEquals((-1), node1.getSourcePosition());
820:       assertFalse(node1.isGetProp());
821:       assertFalse(node1.isFalse());
822:       assertFalse(node1.isCast());
823:       assertFalse(node1.isAnd());
824:       assertEquals((-1), node1.getCharno());
825:       assertFalse(node1.isInc());
826:       assertFalse(node1.isString());
827:       assertEquals(1, node1.getChildCount());
828:       assertFalse(node1.isHook());
829:       assertFalse(node1.isCase());
830:       assertFalse(node1.isThrow());
831:       assertFalse(node1.isNE());
832:       assertFalse(node1.isComma());
833:       assertFalse(node1.isBreak());
834:       assertFalse(node1.isThis());
835:       assertTrue(node1.hasOneChild());
836:       assertTrue(node1.hasChildren());
837:       assertFalse(node1.isEmpty());
838:       assertFalse(node1.isIn());
839:       assertFalse(node1.isInstanceOf());
840:       assertFalse(node1.isIf());
841:       assertFalse(node1.isVoid());
842:       assertFalse(node1.isRegExp());
843:       assertFalse(node1.isScript());
844:       assertFalse(node1.isTrue());
845:       assertFalse(node1.isWith());
846:       assertFalse(node1.isFor());
847:       assertFalse(node1.isTry());
848:       assertFalse(node1.isDefaultCase());
849:       assertFalse(node1.isParamList());
850:       assertFalse(node1.isLabel());
851:       assertFalse(node1.isGetterDef());
852:       assertFalse(node1.isNumber());
853:       assertFalse(node1.isArrayLit());
854:       assertFalse(node1.isLabelName());
855:       assertFalse(node1.isStringKey());
856:       assertFalse(node1.isSwitch());
857:       
858:       boolean boolean2 = node0.isThis();
859:       assertFalse(boolean2);
860:       assertFalse(node0.equals((Object)node1));
861:       assertTrue(boolean2 == boolean0);
862:       assertFalse(boolean2 == boolean1);
863:       assertEquals(57, Node.REFLECTED_OBJECT);
864:       assertEquals(40, Node.ORIGINALNAME_PROP);
865:       assertEquals(50, Node.FREE_CALL);
866:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
867:       assertEquals(52, Node.LENGTH);
868:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
869:       assertEquals(48, Node.DIRECTIVES);
870:       assertEquals(49, Node.DIRECT_EVAL);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(51, Node.STATIC_SOURCE_FILE);
873:       assertEquals(12, Node.COLUMN_BITS);
874:       assertEquals(4095, Node.COLUMN_MASK);
875:       assertEquals(46, Node.IS_NAMESPACE);
876:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
877:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
878:       assertEquals(1, Node.DECR_FLAG);
879:       assertEquals(32, Node.INCRDECR_PROP);
880:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
881:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
882:       assertEquals(53, Node.INPUT_ID);
883:       assertEquals(29, Node.JSDOC_INFO_PROP);
884:       assertEquals(43, Node.IS_CONSTANT_NAME);
885:       assertEquals(36, Node.QUOTED_PROP);
886:       assertEquals(56, Node.CHANGE_TIME);
887:       assertEquals(37, Node.OPT_ARG_NAME);
888:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
889:       assertEquals(55, Node.INFERRED_FUNCTION);
890:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
891:       assertEquals(30, Node.VAR_ARGS_NAME);
892:       assertEquals(8, Node.FLAG_NO_THROWS);
893:       assertEquals(2, Node.POST_FLAG);
894:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
895:       assertEquals(15, Node.NO_SIDE_EFFECTS);
896:       assertEquals(39, Node.EMPTY_BLOCK);
897:       assertEquals(47, Node.IS_DISPATCHER);
898:       assertEquals(57, Node.LAST_PROP);
899:       assertFalse(node0.isBlock());
900:       assertFalse(node0.isVar());
901:       assertFalse(node0.isAdd());
902:       assertFalse(node0.isStringKey());
903:       assertFalse(node0.isCall());
904:       assertFalse(node0.isNull());
905:       assertFalse(node0.isParamList());
906:       assertFalse(node0.isName());
907:       assertFalse(node0.isReturn());
908:       assertEquals((-1), node0.getLineno());
909:       assertFalse(node0.hasMoreThanOneChild());
910:       assertFalse(node0.isCatch());
911:       assertFalse(node0.isDec());
912:       assertEquals((-1), node0.getSourcePosition());
913:       assertFalse(node0.isNumber());
914:       assertFalse(node0.isTypeOf());
915:       assertFalse(node0.isWhile());
916:       assertFalse(node0.hasChildren());
917:       assertFalse(node0.hasOneChild());
918:       assertTrue(node0.isString());
919:       assertFalse(node0.isTry());
920:       assertFalse(node0.isExprResult());
921:       assertFalse(node0.isTrue());
922:       assertFalse(node0.isAssign());
923:       assertFalse(node0.isGetElem());
924:       assertFalse(node0.isArrayLit());
925:       assertFalse(node0.isDelProp());
926:       assertFalse(node0.isVoid());
927:       assertFalse(node0.isLabelName());
928:       assertFalse(node0.isAssignAdd());
929:       assertFalse(node0.isLabel());
930:       assertEquals(0, node0.getChildCount());
931:       assertFalse(node0.isOr());
932:       assertFalse(node0.isEmpty());
933:       assertFalse(node0.isNew());
934:       assertFalse(node0.isDefaultCase());
935:       assertFalse(node0.isDo());
936:       assertFalse(node0.isHook());
937:       assertEquals((-1), node0.getCharno());
938:       assertFalse(node0.isFalse());
939:       assertFalse(node0.isBreak());
940:       assertFalse(node0.isSwitch());
941:       assertFalse(node0.isGetProp());
942:       assertFalse(node0.isInstanceOf());
943:       assertFalse(node0.isComma());
944:       assertFalse(node0.isThis());
945:       assertFalse(node0.isNot());
946:       assertFalse(node0.isObjectLit());
947:       assertFalse(node0.isGetterDef());
948:       assertFalse(node0.isCase());
949:       assertFalse(node0.isFor());
950:       assertFalse(node0.isScript());
951:       assertFalse(node0.isFunction());
952:       assertFalse(node0.isCast());
953:       assertFalse(node0.isDebugger());
954:       assertFalse(node0.isRegExp());
955:       assertFalse(node0.isWith());
956:       assertFalse(node0.isIf());
957:       assertFalse(node0.isNE());
958:       assertFalse(node0.isAnd());
959:       assertFalse(node0.isIn());
960:       assertFalse(node0.isContinue());
961:       assertFalse(node0.isThrow());
962:       assertEquals(40, node0.getType());
963:       assertFalse(node0.isSetterDef());
964:       assertFalse(node0.isInc());
965:   }
966: }
RegularFileObject[/tmp/EvoSuite_360_1628157547441/com/google/javascript/rhino/Node_360_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_360_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_360_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_360_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 09:59:07.527 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("hmD^~&Bf&P<Z_v~F");
assertNotNull(node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());

Node node1 = new Node(31, node0, node0, node0);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isDec());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertTrue(node1.isDelProp());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());

boolean boolean0 = node1.isWhile();
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isDec());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertTrue(node1.isDelProp());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());

boolean boolean1 = node1.hasChild(node0);
assertTrue(boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isDec());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertTrue(node1.isDelProp());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());

boolean boolean2 = node0.isThis();
assertFalse(boolean2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());


[MASTER] 09:59:13.616 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_418_1628157553414/com/google/javascript/rhino/Node_418_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_418_1628157553414/com/google/javascript/rhino/Node_418_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:13.616 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:13.616 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:13.616 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 09:59:13.617 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_418_1628157553414/com/google/javascript/rhino/Node_418_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_418_tmp__ESTest extends Node_418_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("");
21:       assertNotNull(node0);
22:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
23:       assertEquals(39, Node.EMPTY_BLOCK);
24:       assertEquals(48, Node.DIRECTIVES);
25:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
26:       assertEquals(57, Node.REFLECTED_OBJECT);
27:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
28:       assertEquals(50, Node.FREE_CALL);
29:       assertEquals(55, Node.INFERRED_FUNCTION);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(52, Node.LENGTH);
32:       assertEquals(8, Node.FLAG_NO_THROWS);
33:       assertEquals(36, Node.QUOTED_PROP);
34:       assertEquals(1, Node.DECR_FLAG);
35:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
36:       assertEquals(49, Node.DIRECT_EVAL);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(12, Node.COLUMN_BITS);
39:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
40:       assertEquals(4095, Node.COLUMN_MASK);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(47, Node.IS_DISPATCHER);
43:       assertEquals(2, Node.POST_FLAG);
44:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(32, Node.INCRDECR_PROP);
47:       assertEquals(46, Node.IS_NAMESPACE);
48:       assertEquals(51, Node.STATIC_SOURCE_FILE);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(53, Node.INPUT_ID);
51:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
52:       assertEquals(15, Node.NO_SIDE_EFFECTS);
53:       assertEquals(57, Node.LAST_PROP);
54:       assertEquals(30, Node.VAR_ARGS_NAME);
55:       assertEquals(54, Node.SLASH_V);
56:       assertEquals(43, Node.IS_CONSTANT_NAME);
57:       assertEquals(40, Node.ORIGINALNAME_PROP);
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isBreak());
60:       assertFalse(node0.isGetProp());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isObjectLit());
64:       assertFalse(node0.isCase());
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isThis());
67:       assertFalse(node0.isHook());
68:       assertFalse(node0.isComma());
69:       assertFalse(node0.isInstanceOf());
70:       assertFalse(node0.isWith());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isFor());
73:       assertFalse(node0.isLabelName());
74:       assertFalse(node0.isGetElem());
75:       assertFalse(node0.isArrayLit());
76:       assertFalse(node0.hasOneChild());
77:       assertFalse(node0.isDelProp());
78:       assertFalse(node0.isOr());
79:       assertFalse(node0.isTry());
80:       assertFalse(node0.isTrue());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isGetterDef());
83:       assertFalse(node0.isNumber());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.isDefaultCase());
86:       assertFalse(node0.isSwitch());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isLabel());
89:       assertEquals(0, node0.getChildCount());
90:       assertFalse(node0.isStringKey());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isVar());
93:       assertFalse(node0.isNull());
94:       assertFalse(node0.isParamList());
95:       assertFalse(node0.isName());
96:       assertFalse(node0.isAdd());
97:       assertFalse(node0.isNew());
98:       assertFalse(node0.isSetterDef());
99:       assertFalse(node0.isWhile());
100:       assertFalse(node0.isVoid());
101:       assertTrue(node0.isString());
102:       assertEquals((-1), node0.getLineno());
103:       assertFalse(node0.isBlock());
104:       assertFalse(node0.isReturn());
105:       assertFalse(node0.isTypeOf());
106:       assertFalse(node0.isRegExp());
107:       assertFalse(node0.isDec());
108:       assertFalse(node0.isCatch());
109:       assertFalse(node0.hasMoreThanOneChild());
110:       assertFalse(node0.isAssign());
111:       assertFalse(node0.hasChildren());
112:       assertFalse(node0.isNE());
113:       assertFalse(node0.isIf());
114:       assertFalse(node0.isDebugger());
115:       assertEquals((-1), node0.getSourcePosition());
116:       assertFalse(node0.isIn());
117:       assertFalse(node0.isNot());
118:       assertEquals(40, node0.getType());
119:       assertFalse(node0.isAnd());
120:       assertFalse(node0.isCast());
121:       assertFalse(node0.isContinue());
122:       assertFalse(node0.isFunction());
123:       assertFalse(node0.isFalse());
124:       
125:       node0.setCharno(536870912);
126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
127:       assertEquals(39, Node.EMPTY_BLOCK);
128:       assertEquals(48, Node.DIRECTIVES);
129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
130:       assertEquals(57, Node.REFLECTED_OBJECT);
131:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
132:       assertEquals(50, Node.FREE_CALL);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
135:       assertEquals(52, Node.LENGTH);
136:       assertEquals(8, Node.FLAG_NO_THROWS);
137:       assertEquals(36, Node.QUOTED_PROP);
138:       assertEquals(1, Node.DECR_FLAG);
139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
140:       assertEquals(49, Node.DIRECT_EVAL);
141:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
142:       assertEquals(12, Node.COLUMN_BITS);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(56, Node.CHANGE_TIME);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(2, Node.POST_FLAG);
148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(32, Node.INCRDECR_PROP);
151:       assertEquals(46, Node.IS_NAMESPACE);
152:       assertEquals(51, Node.STATIC_SOURCE_FILE);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(53, Node.INPUT_ID);
155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(57, Node.LAST_PROP);
158:       assertEquals(30, Node.VAR_ARGS_NAME);
159:       assertEquals(54, Node.SLASH_V);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertFalse(node0.isThrow());
163:       assertFalse(node0.isBreak());
164:       assertFalse(node0.isGetProp());
165:       assertEquals((-1), node0.getCharno());
166:       assertFalse(node0.isInc());
167:       assertFalse(node0.isObjectLit());
168:       assertFalse(node0.isCase());
169:       assertFalse(node0.isExprResult());
170:       assertFalse(node0.isThis());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isInstanceOf());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.isEmpty());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isLabelName());
178:       assertFalse(node0.isGetElem());
179:       assertFalse(node0.isArrayLit());
180:       assertFalse(node0.hasOneChild());
181:       assertFalse(node0.isDelProp());
182:       assertFalse(node0.isOr());
183:       assertFalse(node0.isTry());
184:       assertFalse(node0.isTrue());
185:       assertFalse(node0.isScript());
186:       assertFalse(node0.isGetterDef());
187:       assertFalse(node0.isNumber());
188:       assertFalse(node0.isDo());
189:       assertFalse(node0.isDefaultCase());
190:       assertFalse(node0.isSwitch());
191:       assertFalse(node0.isAssignAdd());
192:       assertFalse(node0.isLabel());
193:       assertEquals(0, node0.getChildCount());
194:       assertFalse(node0.isStringKey());
195:       assertFalse(node0.isCall());
196:       assertFalse(node0.isVar());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isParamList());
199:       assertFalse(node0.isName());
200:       assertFalse(node0.isAdd());
201:       assertFalse(node0.isNew());
202:       assertFalse(node0.isSetterDef());
203:       assertFalse(node0.isWhile());
204:       assertFalse(node0.isVoid());
205:       assertTrue(node0.isString());
206:       assertEquals((-1), node0.getLineno());
207:       assertFalse(node0.isBlock());
208:       assertFalse(node0.isReturn());
209:       assertFalse(node0.isTypeOf());
210:       assertFalse(node0.isRegExp());
211:       assertFalse(node0.isDec());
212:       assertFalse(node0.isCatch());
213:       assertFalse(node0.hasMoreThanOneChild());
214:       assertFalse(node0.isAssign());
215:       assertFalse(node0.hasChildren());
216:       assertFalse(node0.isNE());
217:       assertFalse(node0.isIf());
218:       assertFalse(node0.isDebugger());
219:       assertEquals((-1), node0.getSourcePosition());
220:       assertFalse(node0.isIn());
221:       assertFalse(node0.isNot());
222:       assertEquals(40, node0.getType());
223:       assertFalse(node0.isAnd());
224:       assertFalse(node0.isCast());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isFunction());
227:       assertFalse(node0.isFalse());
228:       
229:       Iterable<Node> iterable0 = node0.children();
230:       assertFalse(iterable0.contains(node0));
231:       assertNotNull(iterable0);
232:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
233:       assertEquals(39, Node.EMPTY_BLOCK);
234:       assertEquals(48, Node.DIRECTIVES);
235:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
236:       assertEquals(57, Node.REFLECTED_OBJECT);
237:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
238:       assertEquals(50, Node.FREE_CALL);
239:       assertEquals(55, Node.INFERRED_FUNCTION);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(52, Node.LENGTH);
242:       assertEquals(8, Node.FLAG_NO_THROWS);
243:       assertEquals(36, Node.QUOTED_PROP);
244:       assertEquals(1, Node.DECR_FLAG);
245:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
246:       assertEquals(49, Node.DIRECT_EVAL);
247:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
248:       assertEquals(12, Node.COLUMN_BITS);
249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
250:       assertEquals(4095, Node.COLUMN_MASK);
251:       assertEquals(56, Node.CHANGE_TIME);
252:       assertEquals(47, Node.IS_DISPATCHER);
253:       assertEquals(2, Node.POST_FLAG);
254:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
255:       assertEquals(37, Node.OPT_ARG_NAME);
256:       assertEquals(32, Node.INCRDECR_PROP);
257:       assertEquals(46, Node.IS_NAMESPACE);
258:       assertEquals(51, Node.STATIC_SOURCE_FILE);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(53, Node.INPUT_ID);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(57, Node.LAST_PROP);
264:       assertEquals(30, Node.VAR_ARGS_NAME);
265:       assertEquals(54, Node.SLASH_V);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(40, Node.ORIGINALNAME_PROP);
268:       assertFalse(node0.isThrow());
269:       assertFalse(node0.isBreak());
270:       assertFalse(node0.isGetProp());
271:       assertEquals((-1), node0.getCharno());
272:       assertFalse(node0.isInc());
273:       assertFalse(node0.isObjectLit());
274:       assertFalse(node0.isCase());
275:       assertFalse(node0.isExprResult());
276:       assertFalse(node0.isThis());
277:       assertFalse(node0.isHook());
278:       assertFalse(node0.isComma());
279:       assertFalse(node0.isInstanceOf());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isEmpty());
282:       assertFalse(node0.isFor());
283:       assertFalse(node0.isLabelName());
284:       assertFalse(node0.isGetElem());
285:       assertFalse(node0.isArrayLit());
286:       assertFalse(node0.hasOneChild());
287:       assertFalse(node0.isDelProp());
288:       assertFalse(node0.isOr());
289:       assertFalse(node0.isTry());
290:       assertFalse(node0.isTrue());
291:       assertFalse(node0.isScript());
292:       assertFalse(node0.isGetterDef());
293:       assertFalse(node0.isNumber());
294:       assertFalse(node0.isDo());
295:       assertFalse(node0.isDefaultCase());
296:       assertFalse(node0.isSwitch());
297:       assertFalse(node0.isAssignAdd());
298:       assertFalse(node0.isLabel());
299:       assertEquals(0, node0.getChildCount());
300:       assertFalse(node0.isStringKey());
301:       assertFalse(node0.isCall());
302:       assertFalse(node0.isVar());
303:       assertFalse(node0.isNull());
304:       assertFalse(node0.isParamList());
305:       assertFalse(node0.isName());
306:       assertFalse(node0.isAdd());
307:       assertFalse(node0.isNew());
308:       assertFalse(node0.isSetterDef());
309:       assertFalse(node0.isWhile());
310:       assertFalse(node0.isVoid());
311:       assertTrue(node0.isString());
312:       assertEquals((-1), node0.getLineno());
313:       assertFalse(node0.isBlock());
314:       assertFalse(node0.isReturn());
315:       assertFalse(node0.isTypeOf());
316:       assertFalse(node0.isRegExp());
317:       assertFalse(node0.isDec());
318:       assertFalse(node0.isCatch());
319:       assertFalse(node0.hasMoreThanOneChild());
320:       assertFalse(node0.isAssign());
321:       assertFalse(node0.hasChildren());
322:       assertFalse(node0.isNE());
323:       assertFalse(node0.isIf());
324:       assertFalse(node0.isDebugger());
325:       assertEquals((-1), node0.getSourcePosition());
326:       assertFalse(node0.isIn());
327:       assertFalse(node0.isNot());
328:       assertEquals(40, node0.getType());
329:       assertFalse(node0.isAnd());
330:       assertFalse(node0.isCast());
331:       assertFalse(node0.isContinue());
332:       assertFalse(node0.isFunction());
333:       assertFalse(node0.isFalse());
334:       
335:       Node node1 = new Node(47, node0, 7, 37);
336:       assertFalse(node1.equals((Object)node0));
337:       assertNotNull(node1);
338:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
339:       assertEquals(39, Node.EMPTY_BLOCK);
340:       assertEquals(48, Node.DIRECTIVES);
341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
342:       assertEquals(57, Node.REFLECTED_OBJECT);
343:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
344:       assertEquals(50, Node.FREE_CALL);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
347:       assertEquals(52, Node.LENGTH);
348:       assertEquals(8, Node.FLAG_NO_THROWS);
349:       assertEquals(36, Node.QUOTED_PROP);
350:       assertEquals(1, Node.DECR_FLAG);
351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
352:       assertEquals(49, Node.DIRECT_EVAL);
353:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
354:       assertEquals(12, Node.COLUMN_BITS);
355:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(47, Node.IS_DISPATCHER);
359:       assertEquals(2, Node.POST_FLAG);
360:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
361:       assertEquals(37, Node.OPT_ARG_NAME);
362:       assertEquals(32, Node.INCRDECR_PROP);
363:       assertEquals(46, Node.IS_NAMESPACE);
364:       assertEquals(51, Node.STATIC_SOURCE_FILE);
365:       assertEquals(29, Node.JSDOC_INFO_PROP);
366:       assertEquals(53, Node.INPUT_ID);
367:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
368:       assertEquals(15, Node.NO_SIDE_EFFECTS);
369:       assertEquals(57, Node.LAST_PROP);
370:       assertEquals(30, Node.VAR_ARGS_NAME);
371:       assertEquals(54, Node.SLASH_V);
372:       assertEquals(43, Node.IS_CONSTANT_NAME);
373:       assertEquals(40, Node.ORIGINALNAME_PROP);
374:       assertEquals(51, Node.STATIC_SOURCE_FILE);
375:       assertEquals(12, Node.COLUMN_BITS);
376:       assertEquals(32, Node.INCRDECR_PROP);
377:       assertEquals(46, Node.IS_NAMESPACE);
378:       assertEquals(30, Node.VAR_ARGS_NAME);
379:       assertEquals(56, Node.CHANGE_TIME);
380:       assertEquals(37, Node.OPT_ARG_NAME);
381:       assertEquals(49, Node.DIRECT_EVAL);
382:       assertEquals(54, Node.SLASH_V);
383:       assertEquals(57, Node.REFLECTED_OBJECT);
384:       assertEquals(40, Node.ORIGINALNAME_PROP);
385:       assertEquals(53, Node.INPUT_ID);
386:       assertEquals(29, Node.JSDOC_INFO_PROP);
387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
388:       assertEquals(52, Node.LENGTH);
389:       assertEquals(2, Node.POST_FLAG);
390:       assertEquals(39, Node.EMPTY_BLOCK);
391:       assertEquals(15, Node.NO_SIDE_EFFECTS);
392:       assertEquals(47, Node.IS_DISPATCHER);
393:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
394:       assertEquals(57, Node.LAST_PROP);
395:       assertEquals(55, Node.INFERRED_FUNCTION);
396:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
397:       assertEquals(8, Node.FLAG_NO_THROWS);
398:       assertEquals(4095, Node.COLUMN_MASK);
399:       assertEquals(43, Node.IS_CONSTANT_NAME);
400:       assertEquals(36, Node.QUOTED_PROP);
401:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
402:       assertEquals(48, Node.DIRECTIVES);
403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
409:       assertEquals(1, Node.DECR_FLAG);
410:       assertFalse(node0.isThrow());
411:       assertFalse(node0.isBreak());
412:       assertFalse(node0.isGetProp());
413:       assertEquals((-1), node0.getCharno());
414:       assertFalse(node0.isInc());
415:       assertFalse(node0.isObjectLit());
416:       assertFalse(node0.isCase());
417:       assertFalse(node0.isExprResult());
418:       assertFalse(node0.isThis());
419:       assertFalse(node0.isHook());
420:       assertFalse(node0.isComma());
421:       assertFalse(node0.isInstanceOf());
422:       assertFalse(node0.isWith());
423:       assertFalse(node0.isEmpty());
424:       assertFalse(node0.isFor());
425:       assertFalse(node0.isLabelName());
426:       assertFalse(node0.isGetElem());
427:       assertFalse(node0.isArrayLit());
428:       assertFalse(node0.hasOneChild());
429:       assertFalse(node0.isDelProp());
430:       assertFalse(node0.isOr());
431:       assertFalse(node0.isTry());
432:       assertFalse(node0.isTrue());
433:       assertFalse(node0.isScript());
434:       assertFalse(node0.isGetterDef());
435:       assertFalse(node0.isNumber());
436:       assertFalse(node0.isDo());
437:       assertFalse(node0.isDefaultCase());
438:       assertFalse(node0.isSwitch());
439:       assertFalse(node0.isAssignAdd());
440:       assertFalse(node0.isLabel());
441:       assertEquals(0, node0.getChildCount());
442:       assertFalse(node0.isStringKey());
443:       assertFalse(node0.isCall());
444:       assertFalse(node0.isVar());
445:       assertFalse(node0.isNull());
446:       assertFalse(node0.isParamList());
447:       assertFalse(node0.isName());
448:       assertFalse(node0.isAdd());
449:       assertFalse(node0.isNew());
450:       assertFalse(node0.isSetterDef());
451:       assertFalse(node0.isWhile());
452:       assertFalse(node0.isVoid());
453:       assertTrue(node0.isString());
454:       assertEquals((-1), node0.getLineno());
455:       assertFalse(node0.isBlock());
456:       assertFalse(node0.isReturn());
457:       assertFalse(node0.isTypeOf());
458:       assertFalse(node0.isRegExp());
459:       assertFalse(node0.isDec());
460:       assertFalse(node0.isCatch());
461:       assertFalse(node0.hasMoreThanOneChild());
462:       assertFalse(node0.isAssign());
463:       assertFalse(node0.hasChildren());
464:       assertFalse(node0.isNE());
465:       assertFalse(node0.isIf());
466:       assertFalse(node0.isDebugger());
467:       assertEquals((-1), node0.getSourcePosition());
468:       assertFalse(node0.isIn());
469:       assertFalse(node0.isNot());
470:       assertEquals(40, node0.getType());
471:       assertFalse(node0.isAnd());
472:       assertFalse(node0.isCast());
473:       assertFalse(node0.isContinue());
474:       assertFalse(node0.isFunction());
475:       assertFalse(node0.isFalse());
476:       assertTrue(node1.hasChildren());
477:       assertEquals(1, node1.getChildCount());
478:       assertFalse(node1.isIn());
479:       assertFalse(node1.isGetterDef());
480:       assertFalse(node1.isNE());
481:       assertFalse(node1.isSwitch());
482:       assertFalse(node1.isArrayLit());
483:       assertFalse(node1.isIf());
484:       assertFalse(node1.isDelProp());
485:       assertFalse(node1.isInc());
486:       assertFalse(node1.isTrue());
487:       assertFalse(node1.isFalse());
488:       assertFalse(node1.isFunction());
489:       assertFalse(node1.isThrow());
490:       assertFalse(node1.isEmpty());
491:       assertFalse(node1.isDefaultCase());
492:       assertFalse(node1.isInstanceOf());
493:       assertFalse(node1.isCatch());
494:       assertFalse(node1.isThis());
495:       assertFalse(node1.isWith());
496:       assertFalse(node1.isStringKey());
497:       assertFalse(node1.isParamList());
498:       assertEquals(37, node1.getCharno());
499:       assertFalse(node1.isHook());
500:       assertFalse(node1.isBlock());
501:       assertFalse(node1.isCase());
502:       assertEquals(7, node1.getLineno());
503:       assertFalse(node1.isFor());
504:       assertFalse(node1.isScript());
505:       assertFalse(node1.isTry());
506:       assertFalse(node1.isAssignAdd());
507:       assertFalse(node1.isReturn());
508:       assertFalse(node1.isOr());
509:       assertEquals(47, node1.getType());
510:       assertFalse(node1.isLabel());
511:       assertFalse(node1.hasMoreThanOneChild());
512:       assertFalse(node1.isContinue());
513:       assertFalse(node1.isDec());
514:       assertFalse(node1.isNumber());
515:       assertFalse(node1.isTypeOf());
516:       assertFalse(node1.isLabelName());
517:       assertFalse(node1.isGetElem());
518:       assertFalse(node1.isNew());
519:       assertFalse(node1.isVar());
520:       assertFalse(node1.isAdd());
521:       assertFalse(node1.isCast());
522:       assertFalse(node1.isDo());
523:       assertEquals(28709, node1.getSourcePosition());
524:       assertFalse(node1.isSetterDef());
525:       assertFalse(node1.isGetProp());
526:       assertFalse(node1.isComma());
527:       assertFalse(node1.isObjectLit());
528:       assertFalse(node1.isNot());
529:       assertFalse(node1.isBreak());
530:       assertFalse(node1.isCall());
531:       assertFalse(node1.isNull());
532:       assertFalse(node1.isAnd());
533:       assertFalse(node1.isName());
534:       assertFalse(node1.isVoid());
535:       assertTrue(node1.isRegExp());
536:       assertFalse(node1.isExprResult());
537:       assertFalse(node1.isDebugger());
538:       assertFalse(node1.isAssign());
539:       assertTrue(node1.hasOneChild());
540:       assertFalse(node1.isWhile());
541:       assertFalse(node1.isString());
542:       
543:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
544:       assertFalse(node0.equals((Object)node1));
545:       assertFalse(node1.equals((Object)node0));
546:       assertNotNull(node_NodeMismatch0);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(39, Node.EMPTY_BLOCK);
549:       assertEquals(48, Node.DIRECTIVES);
550:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
551:       assertEquals(57, Node.REFLECTED_OBJECT);
552:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
553:       assertEquals(50, Node.FREE_CALL);
554:       assertEquals(55, Node.INFERRED_FUNCTION);
555:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
556:       assertEquals(52, Node.LENGTH);
557:       assertEquals(8, Node.FLAG_NO_THROWS);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(1, Node.DECR_FLAG);
560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
561:       assertEquals(49, Node.DIRECT_EVAL);
562:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
563:       assertEquals(12, Node.COLUMN_BITS);
564:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
565:       assertEquals(4095, Node.COLUMN_MASK);
566:       assertEquals(56, Node.CHANGE_TIME);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(2, Node.POST_FLAG);
569:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
570:       assertEquals(37, Node.OPT_ARG_NAME);
571:       assertEquals(32, Node.INCRDECR_PROP);
572:       assertEquals(46, Node.IS_NAMESPACE);
573:       assertEquals(51, Node.STATIC_SOURCE_FILE);
574:       assertEquals(29, Node.JSDOC_INFO_PROP);
575:       assertEquals(53, Node.INPUT_ID);
576:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
577:       assertEquals(15, Node.NO_SIDE_EFFECTS);
578:       assertEquals(57, Node.LAST_PROP);
579:       assertEquals(30, Node.VAR_ARGS_NAME);
580:       assertEquals(54, Node.SLASH_V);
581:       assertEquals(43, Node.IS_CONSTANT_NAME);
582:       assertEquals(40, Node.ORIGINALNAME_PROP);
583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
584:       assertEquals(12, Node.COLUMN_BITS);
585:       assertEquals(32, Node.INCRDECR_PROP);
586:       assertEquals(46, Node.IS_NAMESPACE);
587:       assertEquals(30, Node.VAR_ARGS_NAME);
588:       assertEquals(56, Node.CHANGE_TIME);
589:       assertEquals(37, Node.OPT_ARG_NAME);
590:       assertEquals(49, Node.DIRECT_EVAL);
591:       assertEquals(54, Node.SLASH_V);
592:       assertEquals(57, Node.REFLECTED_OBJECT);
593:       assertEquals(40, Node.ORIGINALNAME_PROP);
594:       assertEquals(53, Node.INPUT_ID);
595:       assertEquals(29, Node.JSDOC_INFO_PROP);
596:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
597:       assertEquals(52, Node.LENGTH);
598:       assertEquals(2, Node.POST_FLAG);
599:       assertEquals(39, Node.EMPTY_BLOCK);
600:       assertEquals(15, Node.NO_SIDE_EFFECTS);
601:       assertEquals(47, Node.IS_DISPATCHER);
602:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
603:       assertEquals(57, Node.LAST_PROP);
604:       assertEquals(55, Node.INFERRED_FUNCTION);
605:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
606:       assertEquals(8, Node.FLAG_NO_THROWS);
607:       assertEquals(4095, Node.COLUMN_MASK);
608:       assertEquals(43, Node.IS_CONSTANT_NAME);
609:       assertEquals(36, Node.QUOTED_PROP);
610:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
611:       assertEquals(48, Node.DIRECTIVES);
612:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
613:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
614:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
615:       assertEquals(50, Node.FREE_CALL);
616:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
617:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
618:       assertEquals(1, Node.DECR_FLAG);
619:       assertFalse(node0.isThrow());
620:       assertFalse(node0.isBreak());
621:       assertFalse(node0.isGetProp());
622:       assertEquals((-1), node0.getCharno());
623:       assertFalse(node0.isInc());
624:       assertFalse(node0.isObjectLit());
625:       assertFalse(node0.isCase());
626:       assertFalse(node0.isExprResult());
627:       assertFalse(node0.isThis());
628:       assertFalse(node0.isHook());
629:       assertFalse(node0.isComma());
630:       assertFalse(node0.isInstanceOf());
631:       assertFalse(node0.isWith());
632:       assertFalse(node0.isEmpty());
633:       assertFalse(node0.isFor());
634:       assertFalse(node0.isLabelName());
635:       assertFalse(node0.isGetElem());
636:       assertFalse(node0.isArrayLit());
637:       assertFalse(node0.hasOneChild());
638:       assertFalse(node0.isDelProp());
639:       assertFalse(node0.isOr());
640:       assertFalse(node0.isTry());
641:       assertFalse(node0.isTrue());
642:       assertFalse(node0.isScript());
643:       assertFalse(node0.isGetterDef());
644:       assertFalse(node0.isNumber());
645:       assertFalse(node0.isDo());
646:       assertFalse(node0.isDefaultCase());
647:       assertFalse(node0.isSwitch());
648:       assertFalse(node0.isAssignAdd());
649:       assertFalse(node0.isLabel());
650:       assertEquals(0, node0.getChildCount());
651:       assertFalse(node0.isStringKey());
652:       assertFalse(node0.isCall());
653:       assertFalse(node0.isVar());
654:       assertFalse(node0.isNull());
655:       assertFalse(node0.isParamList());
656:       assertFalse(node0.isName());
657:       assertFalse(node0.isAdd());
658:       assertFalse(node0.isNew());
659:       assertFalse(node0.isSetterDef());
660:       assertFalse(node0.isWhile());
661:       assertFalse(node0.isVoid());
662:       assertTrue(node0.isString());
663:       assertEquals((-1), node0.getLineno());
664:       assertFalse(node0.isBlock());
665:       assertFalse(node0.isReturn());
666:       assertFalse(node0.isTypeOf());
667:       assertFalse(node0.isRegExp());
668:       assertFalse(node0.isDec());
669:       assertFalse(node0.isCatch());
670:       assertFalse(node0.hasMoreThanOneChild());
671:       assertFalse(node0.isAssign());
672:       assertFalse(node0.hasChildren());
673:       assertFalse(node0.isNE());
674:       assertFalse(node0.isIf());
675:       assertFalse(node0.isDebugger());
676:       assertEquals((-1), node0.getSourcePosition());
677:       assertFalse(node0.isIn());
678:       assertFalse(node0.isNot());
679:       assertEquals(40, node0.getType());
680:       assertFalse(node0.isAnd());
681:       assertFalse(node0.isCast());
682:       assertFalse(node0.isContinue());
683:       assertFalse(node0.isFunction());
684:       assertFalse(node0.isFalse());
685:       assertTrue(node1.hasChildren());
686:       assertEquals(1, node1.getChildCount());
687:       assertFalse(node1.isIn());
688:       assertFalse(node1.isGetterDef());
689:       assertFalse(node1.isNE());
690:       assertFalse(node1.isSwitch());
691:       assertFalse(node1.isArrayLit());
692:       assertFalse(node1.isIf());
693:       assertFalse(node1.isDelProp());
694:       assertFalse(node1.isInc());
695:       assertFalse(node1.isTrue());
696:       assertFalse(node1.isFalse());
697:       assertFalse(node1.isFunction());
698:       assertFalse(node1.isThrow());
699:       assertFalse(node1.isEmpty());
700:       assertFalse(node1.isDefaultCase());
701:       assertFalse(node1.isInstanceOf());
702:       assertFalse(node1.isCatch());
703:       assertFalse(node1.isThis());
704:       assertFalse(node1.isWith());
705:       assertFalse(node1.isStringKey());
706:       assertFalse(node1.isParamList());
707:       assertEquals(37, node1.getCharno());
708:       assertFalse(node1.isHook());
709:       assertFalse(node1.isBlock());
710:       assertFalse(node1.isCase());
711:       assertEquals(7, node1.getLineno());
712:       assertFalse(node1.isFor());
713:       assertFalse(node1.isScript());
714:       assertFalse(node1.isTry());
715:       assertFalse(node1.isAssignAdd());
716:       assertFalse(node1.isReturn());
717:       assertFalse(node1.isOr());
718:       assertEquals(47, node1.getType());
719:       assertFalse(node1.isLabel());
720:       assertFalse(node1.hasMoreThanOneChild());
721:       assertFalse(node1.isContinue());
722:       assertFalse(node1.isDec());
723:       assertFalse(node1.isNumber());
724:       assertFalse(node1.isTypeOf());
725:       assertFalse(node1.isLabelName());
726:       assertFalse(node1.isGetElem());
727:       assertFalse(node1.isNew());
728:       assertFalse(node1.isVar());
729:       assertFalse(node1.isAdd());
730:       assertFalse(node1.isCast());
731:       assertFalse(node1.isDo());
732:       assertEquals(28709, node1.getSourcePosition());
733:       assertFalse(node1.isSetterDef());
734:       assertFalse(node1.isGetProp());
735:       assertFalse(node1.isComma());
736:       assertFalse(node1.isObjectLit());
737:       assertFalse(node1.isNot());
738:       assertFalse(node1.isBreak());
739:       assertFalse(node1.isCall());
740:       assertFalse(node1.isNull());
741:       assertFalse(node1.isAnd());
742:       assertFalse(node1.isName());
743:       assertFalse(node1.isVoid());
744:       assertTrue(node1.isRegExp());
745:       assertFalse(node1.isExprResult());
746:       assertFalse(node1.isDebugger());
747:       assertFalse(node1.isAssign());
748:       assertTrue(node1.hasOneChild());
749:       assertFalse(node1.isWhile());
750:       assertFalse(node1.isString());
751:       
752:       Node node2 = node1.removeFirstChild();
753:       assertFalse(node0.equals((Object)node1));
754:       assertFalse(node1.equals((Object)node0));
755:       assertFalse(node2.equals((Object)node1));
756:       assertNotNull(node2);
757:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
758:       assertEquals(39, Node.EMPTY_BLOCK);
759:       assertEquals(48, Node.DIRECTIVES);
760:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
761:       assertEquals(57, Node.REFLECTED_OBJECT);
762:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
763:       assertEquals(50, Node.FREE_CALL);
764:       assertEquals(55, Node.INFERRED_FUNCTION);
765:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
766:       assertEquals(52, Node.LENGTH);
767:       assertEquals(8, Node.FLAG_NO_THROWS);
768:       assertEquals(36, Node.QUOTED_PROP);
769:       assertEquals(1, Node.DECR_FLAG);
770:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
771:       assertEquals(49, Node.DIRECT_EVAL);
772:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
773:       assertEquals(12, Node.COLUMN_BITS);
774:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
775:       assertEquals(4095, Node.COLUMN_MASK);
776:       assertEquals(56, Node.CHANGE_TIME);
777:       assertEquals(47, Node.IS_DISPATCHER);
778:       assertEquals(2, Node.POST_FLAG);
779:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
780:       assertEquals(37, Node.OPT_ARG_NAME);
781:       assertEquals(32, Node.INCRDECR_PROP);
782:       assertEquals(46, Node.IS_NAMESPACE);
783:       assertEquals(51, Node.STATIC_SOURCE_FILE);
784:       assertEquals(29, Node.JSDOC_INFO_PROP);
785:       assertEquals(53, Node.INPUT_ID);
786:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
787:       assertEquals(15, Node.NO_SIDE_EFFECTS);
788:       assertEquals(57, Node.LAST_PROP);
789:       assertEquals(30, Node.VAR_ARGS_NAME);
790:       assertEquals(54, Node.SLASH_V);
791:       assertEquals(43, Node.IS_CONSTANT_NAME);
792:       assertEquals(40, Node.ORIGINALNAME_PROP);
793:       assertEquals(51, Node.STATIC_SOURCE_FILE);
794:       assertEquals(12, Node.COLUMN_BITS);
795:       assertEquals(32, Node.INCRDECR_PROP);
796:       assertEquals(46, Node.IS_NAMESPACE);
797:       assertEquals(30, Node.VAR_ARGS_NAME);
798:       assertEquals(56, Node.CHANGE_TIME);
799:       assertEquals(37, Node.OPT_ARG_NAME);
800:       assertEquals(49, Node.DIRECT_EVAL);
801:       assertEquals(54, Node.SLASH_V);
802:       assertEquals(57, Node.REFLECTED_OBJECT);
803:       assertEquals(40, Node.ORIGINALNAME_PROP);
804:       assertEquals(53, Node.INPUT_ID);
805:       assertEquals(29, Node.JSDOC_INFO_PROP);
806:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
807:       assertEquals(52, Node.LENGTH);
808:       assertEquals(2, Node.POST_FLAG);
809:       assertEquals(39, Node.EMPTY_BLOCK);
810:       assertEquals(15, Node.NO_SIDE_EFFECTS);
811:       assertEquals(47, Node.IS_DISPATCHER);
812:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
813:       assertEquals(57, Node.LAST_PROP);
814:       assertEquals(55, Node.INFERRED_FUNCTION);
815:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
816:       assertEquals(8, Node.FLAG_NO_THROWS);
817:       assertEquals(4095, Node.COLUMN_MASK);
818:       assertEquals(43, Node.IS_CONSTANT_NAME);
819:       assertEquals(36, Node.QUOTED_PROP);
820:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
821:       assertEquals(48, Node.DIRECTIVES);
822:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
823:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
824:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
825:       assertEquals(50, Node.FREE_CALL);
826:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
827:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
828:       assertEquals(1, Node.DECR_FLAG);
829:       assertEquals(29, Node.JSDOC_INFO_PROP);
830:       assertEquals(47, Node.IS_DISPATCHER);
831:       assertEquals(2, Node.POST_FLAG);
832:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
833:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
834:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
835:       assertEquals(46, Node.IS_NAMESPACE);
836:       assertEquals(37, Node.OPT_ARG_NAME);
837:       assertEquals(51, Node.STATIC_SOURCE_FILE);
838:       assertEquals(56, Node.CHANGE_TIME);
839:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
840:       assertEquals(43, Node.IS_CONSTANT_NAME);
841:       assertEquals(30, Node.VAR_ARGS_NAME);
842:       assertEquals(15, Node.NO_SIDE_EFFECTS);
843:       assertEquals(36, Node.QUOTED_PROP);
844:       assertEquals(55, Node.INFERRED_FUNCTION);
845:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
846:       assertEquals(53, Node.INPUT_ID);
847:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
848:       assertEquals(57, Node.LAST_PROP);
849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
850:       assertEquals(50, Node.FREE_CALL);
851:       assertEquals(8, Node.FLAG_NO_THROWS);
852:       assertEquals(39, Node.EMPTY_BLOCK);
853:       assertEquals(40, Node.ORIGINALNAME_PROP);
854:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
855:       assertEquals(52, Node.LENGTH);
856:       assertEquals(48, Node.DIRECTIVES);
857:       assertEquals(57, Node.REFLECTED_OBJECT);
858:       assertEquals(54, Node.SLASH_V);
859:       assertEquals(49, Node.DIRECT_EVAL);
860:       assertEquals(1, Node.DECR_FLAG);
861:       assertEquals(4095, Node.COLUMN_MASK);
862:       assertEquals(32, Node.INCRDECR_PROP);
863:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
864:       assertEquals(12, Node.COLUMN_BITS);
865:       assertFalse(node0.isThrow());
866:       assertFalse(node0.isBreak());
867:       assertFalse(node0.isGetProp());
868:       assertEquals((-1), node0.getCharno());
869:       assertFalse(node0.isInc());
870:       assertFalse(node0.isObjectLit());
871:       assertFalse(node0.isCase());
872:       assertFalse(node0.isExprResult());
873:       assertFalse(node0.isThis());
874:       assertFalse(node0.isHook());
875:       assertFalse(node0.isComma());
876:       assertFalse(node0.isInstanceOf());
877:       assertFalse(node0.isWith());
878:       assertFalse(node0.isEmpty());
879:       assertFalse(node0.isFor());
880:       assertFalse(node0.isLabelName());
881:       assertFalse(node0.isGetElem());
882:       assertFalse(node0.isArrayLit());
883:       assertFalse(node0.hasOneChild());
884:       assertFalse(node0.isDelProp());
885:       assertFalse(node0.isOr());
886:       assertFalse(node0.isTry());
887:       assertFalse(node0.isTrue());
888:       assertFalse(node0.isScript());
889:       assertFalse(node0.isGetterDef());
890:       assertFalse(node0.isNumber());
891:       assertFalse(node0.isDo());
892:       assertFalse(node0.isDefaultCase());
893:       assertFalse(node0.isSwitch());
894:       assertFalse(node0.isAssignAdd());
895:       assertFalse(node0.isLabel());
896:       assertEquals(0, node0.getChildCount());
897:       assertFalse(node0.isStringKey());
898:       assertFalse(node0.isCall());
899:       assertFalse(node0.isVar());
900:       assertFalse(node0.isNull());
901:       assertFalse(node0.isParamList());
902:       assertFalse(node0.isName());
903:       assertFalse(node0.isAdd());
904:       assertFalse(node0.isNew());
905:       assertFalse(node0.isSetterDef());
906:       assertFalse(node0.isWhile());
907:       assertFalse(node0.isVoid());
908:       assertTrue(node0.isString());
909:       assertEquals((-1), node0.getLineno());
910:       assertFalse(node0.isBlock());
911:       assertFalse(node0.isReturn());
912:       assertFalse(node0.isTypeOf());
913:       assertFalse(node0.isRegExp());
914:       assertFalse(node0.isDec());
915:       assertFalse(node0.isCatch());
916:       assertFalse(node0.hasMoreThanOneChild());
917:       assertFalse(node0.isAssign());
918:       assertFalse(node0.hasChildren());
919:       assertFalse(node0.isNE());
920:       assertFalse(node0.isIf());
921:       assertFalse(node0.isDebugger());
922:       assertEquals((-1), node0.getSourcePosition());
923:       assertFalse(node0.isIn());
924:       assertFalse(node0.isNot());
925:       assertEquals(40, node0.getType());
926:       assertFalse(node0.isAnd());
927:       assertFalse(node0.isCast());
928:       assertFalse(node0.isContinue());
929:       assertFalse(node0.isFunction());
930:       assertFalse(node0.isFalse());
931:       assertFalse(node1.isIn());
932:       assertFalse(node1.isGetterDef());
933:       assertFalse(node1.isNE());
934:       assertFalse(node1.isSwitch());
935:       assertFalse(node1.isArrayLit());
936:       assertFalse(node1.isIf());
937:       assertFalse(node1.isDelProp());
938:       assertFalse(node1.isInc());
939:       assertFalse(node1.isTrue());
940:       assertFalse(node1.isFalse());
941:       assertFalse(node1.isFunction());
942:       assertFalse(node1.isThrow());
943:       assertFalse(node1.isEmpty());
944:       assertFalse(node1.isDefaultCase());
945:       assertFalse(node1.isInstanceOf());
946:       assertFalse(node1.isCatch());
947:       assertFalse(node1.isThis());
948:       assertEquals(0, node1.getChildCount());
949:       assertFalse(node1.isWith());
950:       assertFalse(node1.isStringKey());
951:       assertFalse(node1.isParamList());
952:       assertEquals(37, node1.getCharno());
953:       assertFalse(node1.isHook());
954:       assertFalse(node1.isBlock());
955:       assertFalse(node1.isCase());
956:       assertEquals(7, node1.getLineno());
957:       assertFalse(node1.isFor());
958:       assertFalse(node1.isScript());
959:       assertFalse(node1.hasOneChild());
960:       assertFalse(node1.isTry());
961:       assertFalse(node1.isAssignAdd());
962:       assertFalse(node1.isReturn());
963:       assertFalse(node1.isOr());
964:       assertEquals(47, node1.getType());
965:       assertFalse(node1.isLabel());
966:       assertFalse(node1.hasMoreThanOneChild());
967:       assertFalse(node1.isContinue());
968:       assertFalse(node1.isDec());
969:       assertFalse(node1.isNumber());
970:       assertFalse(node1.isTypeOf());
971:       assertFalse(node1.isLabelName());
972:       assertFalse(node1.isGetElem());
973:       assertFalse(node1.isNew());
974:       assertFalse(node1.isVar());
975:       assertFalse(node1.isAdd());
976:       assertFalse(node1.isCast());
977:       assertFalse(node1.isDo());
978:       assertEquals(28709, node1.getSourcePosition());
979:       assertFalse(node1.isSetterDef());
980:       assertFalse(node1.isGetProp());
981:       assertFalse(node1.isComma());
982:       assertFalse(node1.isObjectLit());
983:       assertFalse(node1.isNot());
984:       assertFalse(node1.isBreak());
985:       assertFalse(node1.isCall());
986:       assertFalse(node1.isNull());
987:       assertFalse(node1.isAnd());
988:       assertFalse(node1.isName());
989:       assertFalse(node1.isVoid());
990:       assertTrue(node1.isRegExp());
991:       assertFalse(node1.isExprResult());
992:       assertFalse(node1.isDebugger());
993:       assertFalse(node1.isAssign());
994:       assertFalse(node1.isWhile());
995:       assertFalse(node1.isString());
996:       assertFalse(node1.hasChildren());
997:       assertFalse(node2.isCast());
998:       assertFalse(node2.isGetElem());
999:       assertFalse(node2.hasChildren());
1000:       assertFalse(node2.isDec());
1001:       assertEquals((-1), node2.getSourcePosition());
1002:       assertFalse(node2.isAssign());
1003:       assertFalse(node2.isTypeOf());
1004:       assertFalse(node2.isNumber());
1005:       assertFalse(node2.isExprResult());
1006:       assertEquals((-1), node2.getLineno());
1007:       assertFalse(node2.isLabelName());
1008:       assertFalse(node2.isContinue());
1009:       assertFalse(node2.isOr());
1010:       assertFalse(node2.isNew());
1011:       assertFalse(node2.isLabel());
1012:       assertFalse(node2.isAdd());
1013:       assertFalse(node2.isAssignAdd());
1014:       assertFalse(node2.isDo());
1015:       assertFalse(node2.isCall());
1016:       assertFalse(node2.isThrow());
1017:       assertFalse(node2.isFalse());
1018:       assertFalse(node2.isNull());
1019:       assertFalse(node2.isBreak());
1020:       assertFalse(node2.isName());
1021:       assertFalse(node2.isAnd());
1022:       assertFalse(node2.isObjectLit());
1023:       assertFalse(node2.isNot());
1024:       assertFalse(node2.isComma());
1025:       assertFalse(node2.isReturn());
1026:       assertFalse(node2.isGetProp());
1027:       assertFalse(node2.isWhile());
1028:       assertFalse(node2.isEmpty());
1029:       assertFalse(node2.isArrayLit());
1030:       assertFalse(node2.isFor());
1031:       assertFalse(node2.isGetterDef());
1032:       assertFalse(node2.isDebugger());
1033:       assertFalse(node2.isVoid());
1034:       assertFalse(node2.isTrue());
1035:       assertFalse(node2.isNE());
1036:       assertFalse(node2.isIf());
1037:       assertFalse(node2.isDelProp());
1038:       assertEquals(40, node2.getType());
1039:       assertFalse(node2.isIn());
1040:       assertEquals(0, node2.getChildCount());
1041:       assertFalse(node2.isFunction());
1042:       assertFalse(node2.isSetterDef());
1043:       assertFalse(node2.isInc());
1044:       assertFalse(node2.isDefaultCase());
1045:       assertFalse(node2.isStringKey());
1046:       assertFalse(node2.isVar());
1047:       assertFalse(node2.isHook());
1048:       assertEquals((-1), node2.getCharno());
1049:       assertFalse(node2.isParamList());
1050:       assertFalse(node2.isSwitch());
1051:       assertFalse(node2.isCatch());
1052:       assertFalse(node2.isCase());
1053:       assertFalse(node2.isInstanceOf());
1054:       assertFalse(node2.isRegExp());
1055:       assertFalse(node2.hasMoreThanOneChild());
1056:       assertFalse(node2.isWith());
1057:       assertFalse(node2.isScript());
1058:       assertFalse(node2.isBlock());
1059:       assertFalse(node2.isThis());
1060:       assertFalse(node2.hasOneChild());
1061:       assertTrue(node2.isString());
1062:       assertFalse(node2.isTry());
1063:       assertSame(node0, node2);
1064:       assertSame(node2, node0);
1065:       
1066:       boolean boolean0 = node2.isUnscopedQualifiedName();
1067:       assertFalse(boolean0);
1068:       assertFalse(node0.equals((Object)node1));
1069:       assertFalse(node1.equals((Object)node2));
1070:       assertFalse(node1.equals((Object)node0));
1071:       assertFalse(node2.equals((Object)node1));
1072:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1073:       assertEquals(39, Node.EMPTY_BLOCK);
1074:       assertEquals(48, Node.DIRECTIVES);
1075:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1076:       assertEquals(57, Node.REFLECTED_OBJECT);
1077:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1078:       assertEquals(50, Node.FREE_CALL);
1079:       assertEquals(55, Node.INFERRED_FUNCTION);
1080:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1081:       assertEquals(52, Node.LENGTH);
1082:       assertEquals(8, Node.FLAG_NO_THROWS);
1083:       assertEquals(36, Node.QUOTED_PROP);
1084:       assertEquals(1, Node.DECR_FLAG);
1085:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1086:       assertEquals(49, Node.DIRECT_EVAL);
1087:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1088:       assertEquals(12, Node.COLUMN_BITS);
1089:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1090:       assertEquals(4095, Node.COLUMN_MASK);
1091:       assertEquals(56, Node.CHANGE_TIME);
1092:       assertEquals(47, Node.IS_DISPATCHER);
1093:       assertEquals(2, Node.POST_FLAG);
1094:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1095:       assertEquals(37, Node.OPT_ARG_NAME);
1096:       assertEquals(32, Node.INCRDECR_PROP);
1097:       assertEquals(46, Node.IS_NAMESPACE);
1098:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1099:       assertEquals(29, Node.JSDOC_INFO_PROP);
1100:       assertEquals(53, Node.INPUT_ID);
1101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1103:       assertEquals(57, Node.LAST_PROP);
1104:       assertEquals(30, Node.VAR_ARGS_NAME);
1105:       assertEquals(54, Node.SLASH_V);
1106:       assertEquals(43, Node.IS_CONSTANT_NAME);
1107:       assertEquals(40, Node.ORIGINALNAME_PROP);
1108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1109:       assertEquals(12, Node.COLUMN_BITS);
1110:       assertEquals(32, Node.INCRDECR_PROP);
1111:       assertEquals(46, Node.IS_NAMESPACE);
1112:       assertEquals(30, Node.VAR_ARGS_NAME);
1113:       assertEquals(56, Node.CHANGE_TIME);
1114:       assertEquals(37, Node.OPT_ARG_NAME);
1115:       assertEquals(49, Node.DIRECT_EVAL);
1116:       assertEquals(54, Node.SLASH_V);
1117:       assertEquals(57, Node.REFLECTED_OBJECT);
1118:       assertEquals(40, Node.ORIGINALNAME_PROP);
1119:       assertEquals(53, Node.INPUT_ID);
1120:       assertEquals(29, Node.JSDOC_INFO_PROP);
1121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1122:       assertEquals(52, Node.LENGTH);
1123:       assertEquals(2, Node.POST_FLAG);
1124:       assertEquals(39, Node.EMPTY_BLOCK);
1125:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1126:       assertEquals(47, Node.IS_DISPATCHER);
1127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1128:       assertEquals(57, Node.LAST_PROP);
1129:       assertEquals(55, Node.INFERRED_FUNCTION);
1130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1131:       assertEquals(8, Node.FLAG_NO_THROWS);
1132:       assertEquals(4095, Node.COLUMN_MASK);
1133:       assertEquals(43, Node.IS_CONSTANT_NAME);
1134:       assertEquals(36, Node.QUOTED_PROP);
1135:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1136:       assertEquals(48, Node.DIRECTIVES);
1137:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1139:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1140:       assertEquals(50, Node.FREE_CALL);
1141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1143:       assertEquals(1, Node.DECR_FLAG);
1144:       assertEquals(29, Node.JSDOC_INFO_PROP);
1145:       assertEquals(47, Node.IS_DISPATCHER);
1146:       assertEquals(2, Node.POST_FLAG);
1147:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1148:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1149:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1150:       assertEquals(46, Node.IS_NAMESPACE);
1151:       assertEquals(37, Node.OPT_ARG_NAME);
1152:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1153:       assertEquals(56, Node.CHANGE_TIME);
1154:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1155:       assertEquals(43, Node.IS_CONSTANT_NAME);
1156:       assertEquals(30, Node.VAR_ARGS_NAME);
1157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1158:       assertEquals(36, Node.QUOTED_PROP);
1159:       assertEquals(55, Node.INFERRED_FUNCTION);
1160:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1161:       assertEquals(53, Node.INPUT_ID);
1162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1163:       assertEquals(57, Node.LAST_PROP);
1164:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1165:       assertEquals(50, Node.FREE_CALL);
1166:       assertEquals(8, Node.FLAG_NO_THROWS);
1167:       assertEquals(39, Node.EMPTY_BLOCK);
1168:       assertEquals(40, Node.ORIGINALNAME_PROP);
1169:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1170:       assertEquals(52, Node.LENGTH);
1171:       assertEquals(48, Node.DIRECTIVES);
1172:       assertEquals(57, Node.REFLECTED_OBJECT);
1173:       assertEquals(54, Node.SLASH_V);
1174:       assertEquals(49, Node.DIRECT_EVAL);
1175:       assertEquals(1, Node.DECR_FLAG);
1176:       assertEquals(4095, Node.COLUMN_MASK);
1177:       assertEquals(32, Node.INCRDECR_PROP);
1178:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1179:       assertEquals(12, Node.COLUMN_BITS);
1180:       assertFalse(node0.isThrow());
1181:       assertFalse(node0.isBreak());
1182:       assertFalse(node0.isGetProp());
1183:       assertEquals((-1), node0.getCharno());
1184:       assertFalse(node0.isInc());
1185:       assertFalse(node0.isObjectLit());
1186:       assertFalse(node0.isCase());
1187:       assertFalse(node0.isExprResult());
1188:       assertFalse(node0.isThis());
1189:       assertFalse(node0.isHook());
1190:       assertFalse(node0.isComma());
1191:       assertFalse(node0.isInstanceOf());
1192:       assertFalse(node0.isWith());
1193:       assertFalse(node0.isEmpty());
1194:       assertFalse(node0.isFor());
1195:       assertFalse(node0.isLabelName());
1196:       assertFalse(node0.isGetElem());
1197:       assertFalse(node0.isArrayLit());
1198:       assertFalse(node0.hasOneChild());
1199:       assertFalse(node0.isDelProp());
1200:       assertFalse(node0.isOr());
1201:       assertFalse(node0.isTry());
1202:       assertFalse(node0.isTrue());
1203:       assertFalse(node0.isScript());
1204:       assertFalse(node0.isGetterDef());
1205:       assertFalse(node0.isNumber());
1206:       assertFalse(node0.isDo());
1207:       assertFalse(node0.isDefaultCase());
1208:       assertFalse(node0.isSwitch());
1209:       assertFalse(node0.isAssignAdd());
1210:       assertFalse(node0.isLabel());
1211:       assertEquals(0, node0.getChildCount());
1212:       assertFalse(node0.isStringKey());
1213:       assertFalse(node0.isCall());
1214:       assertFalse(node0.isVar());
1215:       assertFalse(node0.isNull());
1216:       assertFalse(node0.isParamList());
1217:       assertFalse(node0.isName());
1218:       assertFalse(node0.isAdd());
1219:       assertFalse(node0.isNew());
1220:       assertFalse(node0.isSetterDef());
1221:       assertFalse(node0.isWhile());
1222:       assertFalse(node0.isVoid());
1223:       assertTrue(node0.isString());
1224:       assertEquals((-1), node0.getLineno());
1225:       assertFalse(node0.isBlock());
1226:       assertFalse(node0.isReturn());
1227:       assertFalse(node0.isTypeOf());
1228:       assertFalse(node0.isRegExp());
1229:       assertFalse(node0.isDec());
1230:       assertFalse(node0.isCatch());
1231:       assertFalse(node0.hasMoreThanOneChild());
1232:       assertFalse(node0.isAssign());
1233:       assertFalse(node0.hasChildren());
1234:       assertFalse(node0.isNE());
1235:       assertFalse(node0.isIf());
1236:       assertFalse(node0.isDebugger());
1237:       assertEquals((-1), node0.getSourcePosition());
1238:       assertFalse(node0.isIn());
1239:       assertFalse(node0.isNot());
1240:       assertEquals(40, node0.getType());
1241:       assertFalse(node0.isAnd());
1242:       assertFalse(node0.isCast());
1243:       assertFalse(node0.isContinue());
1244:       assertFalse(node0.isFunction());
1245:       assertFalse(node0.isFalse());
1246:       assertFalse(node1.isIn());
1247:       assertFalse(node1.isGetterDef());
1248:       assertFalse(node1.isNE());
1249:       assertFalse(node1.isSwitch());
1250:       assertFalse(node1.isArrayLit());
1251:       assertFalse(node1.isIf());
1252:       assertFalse(node1.isDelProp());
1253:       assertFalse(node1.isInc());
1254:       assertFalse(node1.isTrue());
1255:       assertFalse(node1.isFalse());
1256:       assertFalse(node1.isFunction());
1257:       assertFalse(node1.isThrow());
1258:       assertFalse(node1.isEmpty());
1259:       assertFalse(node1.isDefaultCase());
1260:       assertFalse(node1.isInstanceOf());
1261:       assertFalse(node1.isCatch());
1262:       assertFalse(node1.isThis());
1263:       assertEquals(0, node1.getChildCount());
1264:       assertFalse(node1.isWith());
1265:       assertFalse(node1.isStringKey());
1266:       assertFalse(node1.isParamList());
1267:       assertEquals(37, node1.getCharno());
1268:       assertFalse(node1.isHook());
1269:       assertFalse(node1.isBlock());
1270:       assertFalse(node1.isCase());
1271:       assertEquals(7, node1.getLineno());
1272:       assertFalse(node1.isFor());
1273:       assertFalse(node1.isScript());
1274:       assertFalse(node1.hasOneChild());
1275:       assertFalse(node1.isTry());
1276:       assertFalse(node1.isAssignAdd());
1277:       assertFalse(node1.isReturn());
1278:       assertFalse(node1.isOr());
1279:       assertEquals(47, node1.getType());
1280:       assertFalse(node1.isLabel());
1281:       assertFalse(node1.hasMoreThanOneChild());
1282:       assertFalse(node1.isContinue());
1283:       assertFalse(node1.isDec());
1284:       assertFalse(node1.isNumber());
1285:       assertFalse(node1.isTypeOf());
1286:       assertFalse(node1.isLabelName());
1287:       assertFalse(node1.isGetElem());
1288:       assertFalse(node1.isNew());
1289:       assertFalse(node1.isVar());
1290:       assertFalse(node1.isAdd());
1291:       assertFalse(node1.isCast());
1292:       assertFalse(node1.isDo());
1293:       assertEquals(28709, node1.getSourcePosition());
1294:       assertFalse(node1.isSetterDef());
1295:       assertFalse(node1.isGetProp());
1296:       assertFalse(node1.isComma());
1297:       assertFalse(node1.isObjectLit());
1298:       assertFalse(node1.isNot());
1299:       assertFalse(node1.isBreak());
1300:       assertFalse(node1.isCall());
1301:       assertFalse(node1.isNull());
1302:       assertFalse(node1.isAnd());
1303:       assertFalse(node1.isName());
1304:       assertFalse(node1.isVoid());
1305:       assertTrue(node1.isRegExp());
1306:       assertFalse(node1.isExprResult());
1307:       assertFalse(node1.isDebugger());
1308:       assertFalse(node1.isAssign());
1309:       assertFalse(node1.isWhile());
1310:       assertFalse(node1.isString());
1311:       assertFalse(node1.hasChildren());
1312:       assertFalse(node2.isCast());
1313:       assertFalse(node2.isGetElem());
1314:       assertFalse(node2.hasChildren());
1315:       assertFalse(node2.isDec());
1316:       assertEquals((-1), node2.getSourcePosition());
1317:       assertFalse(node2.isAssign());
1318:       assertFalse(node2.isTypeOf());
1319:       assertFalse(node2.isNumber());
1320:       assertFalse(node2.isExprResult());
1321:       assertEquals((-1), node2.getLineno());
1322:       assertFalse(node2.isLabelName());
1323:       assertFalse(node2.isContinue());
1324:       assertFalse(node2.isOr());
1325:       assertFalse(node2.isNew());
1326:       assertFalse(node2.isLabel());
1327:       assertFalse(node2.isAdd());
1328:       assertFalse(node2.isAssignAdd());
1329:       assertFalse(node2.isDo());
1330:       assertFalse(node2.isCall());
1331:       assertFalse(node2.isThrow());
1332:       assertFalse(node2.isFalse());
1333:       assertFalse(node2.isNull());
1334:       assertFalse(node2.isBreak());
1335:       assertFalse(node2.isName());
1336:       assertFalse(node2.isAnd());
1337:       assertFalse(node2.isObjectLit());
1338:       assertFalse(node2.isNot());
1339:       assertFalse(node2.isComma());
1340:       assertFalse(node2.isReturn());
1341:       assertFalse(node2.isGetProp());
1342:       assertFalse(node2.isWhile());
1343:       assertFalse(node2.isEmpty());
1344:       assertFalse(node2.isArrayLit());
1345:       assertFalse(node2.isFor());
1346:       assertFalse(node2.isGetterDef());
1347:       assertFalse(node2.isDebugger());
1348:       assertFalse(node2.isVoid());
1349:       assertFalse(node2.isTrue());
1350:       assertFalse(node2.isNE());
1351:       assertFalse(node2.isIf());
1352:       assertFalse(node2.isDelProp());
1353:       assertEquals(40, node2.getType());
1354:       assertFalse(node2.isIn());
1355:       assertEquals(0, node2.getChildCount());
1356:       assertFalse(node2.isFunction());
1357:       assertFalse(node2.isSetterDef());
1358:       assertFalse(node2.isInc());
1359:       assertFalse(node2.isDefaultCase());
1360:       assertFalse(node2.isStringKey());
1361:       assertFalse(node2.isVar());
1362:       assertFalse(node2.isHook());
1363:       assertEquals((-1), node2.getCharno());
1364:       assertFalse(node2.isParamList());
1365:       assertFalse(node2.isSwitch());
1366:       assertFalse(node2.isCatch());
1367:       assertFalse(node2.isCase());
1368:       assertFalse(node2.isInstanceOf());
1369:       assertFalse(node2.isRegExp());
1370:       assertFalse(node2.hasMoreThanOneChild());
1371:       assertFalse(node2.isWith());
1372:       assertFalse(node2.isScript());
1373:       assertFalse(node2.isBlock());
1374:       assertFalse(node2.isThis());
1375:       assertFalse(node2.hasOneChild());
1376:       assertTrue(node2.isString());
1377:       assertFalse(node2.isTry());
1378:       assertSame(node0, node2);
1379:       assertSame(node2, node0);
1380:       
1381:       boolean boolean1 = node_NodeMismatch0.equals("F~f/O5[<");
1382:       assertFalse(boolean1);
1383:       assertFalse(node0.equals((Object)node1));
1384:       assertFalse(node1.equals((Object)node2));
1385:       assertFalse(node1.equals((Object)node0));
1386:       assertTrue(boolean1 == boolean0);
1387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1388:       assertEquals(39, Node.EMPTY_BLOCK);
1389:       assertEquals(48, Node.DIRECTIVES);
1390:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1391:       assertEquals(57, Node.REFLECTED_OBJECT);
1392:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1393:       assertEquals(50, Node.FREE_CALL);
1394:       assertEquals(55, Node.INFERRED_FUNCTION);
1395:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1396:       assertEquals(52, Node.LENGTH);
1397:       assertEquals(8, Node.FLAG_NO_THROWS);
1398:       assertEquals(36, Node.QUOTED_PROP);
1399:       assertEquals(1, Node.DECR_FLAG);
1400:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1401:       assertEquals(49, Node.DIRECT_EVAL);
1402:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1403:       assertEquals(12, Node.COLUMN_BITS);
1404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1405:       assertEquals(4095, Node.COLUMN_MASK);
1406:       assertEquals(56, Node.CHANGE_TIME);
1407:       assertEquals(47, Node.IS_DISPATCHER);
1408:       assertEquals(2, Node.POST_FLAG);
1409:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1410:       assertEquals(37, Node.OPT_ARG_NAME);
1411:       assertEquals(32, Node.INCRDECR_PROP);
1412:       assertEquals(46, Node.IS_NAMESPACE);
1413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1414:       assertEquals(29, Node.JSDOC_INFO_PROP);
1415:       assertEquals(53, Node.INPUT_ID);
1416:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1418:       assertEquals(57, Node.LAST_PROP);
1419:       assertEquals(30, Node.VAR_ARGS_NAME);
1420:       assertEquals(54, Node.SLASH_V);
1421:       assertEquals(43, Node.IS_CONSTANT_NAME);
1422:       assertEquals(40, Node.ORIGINALNAME_PROP);
1423:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1424:       assertEquals(12, Node.COLUMN_BITS);
1425:       assertEquals(32, Node.INCRDECR_PROP);
1426:       assertEquals(46, Node.IS_NAMESPACE);
1427:       assertEquals(30, Node.VAR_ARGS_NAME);
1428:       assertEquals(56, Node.CHANGE_TIME);
1429:       assertEquals(37, Node.OPT_ARG_NAME);
1430:       assertEquals(49, Node.DIRECT_EVAL);
1431:       assertEquals(54, Node.SLASH_V);
1432:       assertEquals(57, Node.REFLECTED_OBJECT);
1433:       assertEquals(40, Node.ORIGINALNAME_PROP);
1434:       assertEquals(53, Node.INPUT_ID);
1435:       assertEquals(29, Node.JSDOC_INFO_PROP);
1436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1437:       assertEquals(52, Node.LENGTH);
1438:       assertEquals(2, Node.POST_FLAG);
1439:       assertEquals(39, Node.EMPTY_BLOCK);
1440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1441:       assertEquals(47, Node.IS_DISPATCHER);
1442:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1443:       assertEquals(57, Node.LAST_PROP);
1444:       assertEquals(55, Node.INFERRED_FUNCTION);
1445:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1446:       assertEquals(8, Node.FLAG_NO_THROWS);
1447:       assertEquals(4095, Node.COLUMN_MASK);
1448:       assertEquals(43, Node.IS_CONSTANT_NAME);
1449:       assertEquals(36, Node.QUOTED_PROP);
1450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1451:       assertEquals(48, Node.DIRECTIVES);
1452:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1455:       assertEquals(50, Node.FREE_CALL);
1456:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1458:       assertEquals(1, Node.DECR_FLAG);
1459:       assertFalse(node0.isThrow());
1460:       assertFalse(node0.isBreak());
1461:       assertFalse(node0.isGetProp());
1462:       assertEquals((-1), node0.getCharno());
1463:       assertFalse(node0.isInc());
1464:       assertFalse(node0.isObjectLit());
1465:       assertFalse(node0.isCase());
1466:       assertFalse(node0.isExprResult());
1467:       assertFalse(node0.isThis());
1468:       assertFalse(node0.isHook());
1469:       assertFalse(node0.isComma());
1470:       assertFalse(node0.isInstanceOf());
1471:       assertFalse(node0.isWith());
1472:       assertFalse(node0.isEmpty());
1473:       assertFalse(node0.isFor());
1474:       assertFalse(node0.isLabelName());
1475:       assertFalse(node0.isGetElem());
1476:       assertFalse(node0.isArrayLit());
1477:       assertFalse(node0.hasOneChild());
1478:       assertFalse(node0.isDelProp());
1479:       assertFalse(node0.isOr());
1480:       assertFalse(node0.isTry());
1481:       assertFalse(node0.isTrue());
1482:       assertFalse(node0.isScript());
1483:       assertFalse(node0.isGetterDef());
1484:       assertFalse(node0.isNumber());
1485:       assertFalse(node0.isDo());
1486:       assertFalse(node0.isDefaultCase());
1487:       assertFalse(node0.isSwitch());
1488:       assertFalse(node0.isAssignAdd());
1489:       assertFalse(node0.isLabel());
1490:       assertEquals(0, node0.getChildCount());
1491:       assertFalse(node0.isStringKey());
1492:       assertFalse(node0.isCall());
1493:       assertFalse(node0.isVar());
1494:       assertFalse(node0.isNull());
1495:       assertFalse(node0.isParamList());
1496:       assertFalse(node0.isName());
1497:       assertFalse(node0.isAdd());
1498:       assertFalse(node0.isNew());
1499:       assertFalse(node0.isSetterDef());
1500:       assertFalse(node0.isWhile());
1501:       assertFalse(node0.isVoid());
1502:       assertTrue(node0.isString());
1503:       assertEquals((-1), node0.getLineno());
1504:       assertFalse(node0.isBlock());
1505:       assertFalse(node0.isReturn());
1506:       assertFalse(node0.isTypeOf());
1507:       assertFalse(node0.isRegExp());
1508:       assertFalse(node0.isDec());
1509:       assertFalse(node0.isCatch());
1510:       assertFalse(node0.hasMoreThanOneChild());
1511:       assertFalse(node0.isAssign());
1512:       assertFalse(node0.hasChildren());
1513:       assertFalse(node0.isNE());
1514:       assertFalse(node0.isIf());
1515:       assertFalse(node0.isDebugger());
1516:       assertEquals((-1), node0.getSourcePosition());
1517:       assertFalse(node0.isIn());
1518:       assertFalse(node0.isNot());
1519:       assertEquals(40, node0.getType());
1520:       assertFalse(node0.isAnd());
1521:       assertFalse(node0.isCast());
1522:       assertFalse(node0.isContinue());
1523:       assertFalse(node0.isFunction());
1524:       assertFalse(node0.isFalse());
1525:       assertFalse(node1.isIn());
1526:       assertFalse(node1.isGetterDef());
1527:       assertFalse(node1.isNE());
1528:       assertFalse(node1.isSwitch());
1529:       assertFalse(node1.isArrayLit());
1530:       assertFalse(node1.isIf());
1531:       assertFalse(node1.isDelProp());
1532:       assertFalse(node1.isInc());
1533:       assertFalse(node1.isTrue());
1534:       assertFalse(node1.isFalse());
1535:       assertFalse(node1.isFunction());
1536:       assertFalse(node1.isThrow());
1537:       assertFalse(node1.isEmpty());
1538:       assertFalse(node1.isDefaultCase());
1539:       assertFalse(node1.isInstanceOf());
1540:       assertFalse(node1.isCatch());
1541:       assertFalse(node1.isThis());
1542:       assertEquals(0, node1.getChildCount());
1543:       assertFalse(node1.isWith());
1544:       assertFalse(node1.isStringKey());
1545:       assertFalse(node1.isParamList());
1546:       assertEquals(37, node1.getCharno());
1547:       assertFalse(node1.isHook());
1548:       assertFalse(node1.isBlock());
1549:       assertFalse(node1.isCase());
1550:       assertEquals(7, node1.getLineno());
1551:       assertFalse(node1.isFor());
1552:       assertFalse(node1.isScript());
1553:       assertFalse(node1.hasOneChild());
1554:       assertFalse(node1.isTry());
1555:       assertFalse(node1.isAssignAdd());
1556:       assertFalse(node1.isReturn());
1557:       assertFalse(node1.isOr());
1558:       assertEquals(47, node1.getType());
1559:       assertFalse(node1.isLabel());
1560:       assertFalse(node1.hasMoreThanOneChild());
1561:       assertFalse(node1.isContinue());
1562:       assertFalse(node1.isDec());
1563:       assertFalse(node1.isNumber());
1564:       assertFalse(node1.isTypeOf());
1565:       assertFalse(node1.isLabelName());
1566:       assertFalse(node1.isGetElem());
1567:       assertFalse(node1.isNew());
1568:       assertFalse(node1.isVar());
1569:       assertFalse(node1.isAdd());
1570:       assertFalse(node1.isCast());
1571:       assertFalse(node1.isDo());
1572:       assertEquals(28709, node1.getSourcePosition());
1573:       assertFalse(node1.isSetterDef());
1574:       assertFalse(node1.isGetProp());
1575:       assertFalse(node1.isComma());
1576:       assertFalse(node1.isObjectLit());
1577:       assertFalse(node1.isNot());
1578:       assertFalse(node1.isBreak());
1579:       assertFalse(node1.isCall());
1580:       assertFalse(node1.isNull());
1581:       assertFalse(node1.isAnd());
1582:       assertFalse(node1.isName());
1583:       assertFalse(node1.isVoid());
1584:       assertTrue(node1.isRegExp());
1585:       assertFalse(node1.isExprResult());
1586:       assertFalse(node1.isDebugger());
1587:       assertFalse(node1.isAssign());
1588:       assertFalse(node1.isWhile());
1589:       assertFalse(node1.isString());
1590:       assertFalse(node1.hasChildren());
1591:       assertSame(node0, node2);
1592:       
1593:       boolean boolean2 = node1.hasChildren();
1594:       assertFalse(boolean2);
1595:       assertFalse(node0.equals((Object)node1));
1596:       assertFalse(node1.equals((Object)node2));
1597:       assertFalse(node1.equals((Object)node0));
1598:       assertTrue(boolean2 == boolean0);
1599:       assertTrue(boolean2 == boolean1);
1600:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1601:       assertEquals(39, Node.EMPTY_BLOCK);
1602:       assertEquals(48, Node.DIRECTIVES);
1603:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1604:       assertEquals(57, Node.REFLECTED_OBJECT);
1605:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1606:       assertEquals(50, Node.FREE_CALL);
1607:       assertEquals(55, Node.INFERRED_FUNCTION);
1608:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1609:       assertEquals(52, Node.LENGTH);
1610:       assertEquals(8, Node.FLAG_NO_THROWS);
1611:       assertEquals(36, Node.QUOTED_PROP);
1612:       assertEquals(1, Node.DECR_FLAG);
1613:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1614:       assertEquals(49, Node.DIRECT_EVAL);
1615:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1616:       assertEquals(12, Node.COLUMN_BITS);
1617:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1618:       assertEquals(4095, Node.COLUMN_MASK);
1619:       assertEquals(56, Node.CHANGE_TIME);
1620:       assertEquals(47, Node.IS_DISPATCHER);
1621:       assertEquals(2, Node.POST_FLAG);
1622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1623:       assertEquals(37, Node.OPT_ARG_NAME);
1624:       assertEquals(32, Node.INCRDECR_PROP);
1625:       assertEquals(46, Node.IS_NAMESPACE);
1626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1627:       assertEquals(29, Node.JSDOC_INFO_PROP);
1628:       assertEquals(53, Node.INPUT_ID);
1629:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1631:       assertEquals(57, Node.LAST_PROP);
1632:       assertEquals(30, Node.VAR_ARGS_NAME);
1633:       assertEquals(54, Node.SLASH_V);
1634:       assertEquals(43, Node.IS_CONSTANT_NAME);
1635:       assertEquals(40, Node.ORIGINALNAME_PROP);
1636:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1637:       assertEquals(12, Node.COLUMN_BITS);
1638:       assertEquals(32, Node.INCRDECR_PROP);
1639:       assertEquals(46, Node.IS_NAMESPACE);
1640:       assertEquals(30, Node.VAR_ARGS_NAME);
1641:       assertEquals(56, Node.CHANGE_TIME);
1642:       assertEquals(37, Node.OPT_ARG_NAME);
1643:       assertEquals(49, Node.DIRECT_EVAL);
1644:       assertEquals(54, Node.SLASH_V);
1645:       assertEquals(57, Node.REFLECTED_OBJECT);
1646:       assertEquals(40, Node.ORIGINALNAME_PROP);
1647:       assertEquals(53, Node.INPUT_ID);
1648:       assertEquals(29, Node.JSDOC_INFO_PROP);
1649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1650:       assertEquals(52, Node.LENGTH);
1651:       assertEquals(2, Node.POST_FLAG);
1652:       assertEquals(39, Node.EMPTY_BLOCK);
1653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1654:       assertEquals(47, Node.IS_DISPATCHER);
1655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1656:       assertEquals(57, Node.LAST_PROP);
1657:       assertEquals(55, Node.INFERRED_FUNCTION);
1658:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1659:       assertEquals(8, Node.FLAG_NO_THROWS);
1660:       assertEquals(4095, Node.COLUMN_MASK);
1661:       assertEquals(43, Node.IS_CONSTANT_NAME);
1662:       assertEquals(36, Node.QUOTED_PROP);
1663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1664:       assertEquals(48, Node.DIRECTIVES);
1665:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1666:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1667:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1668:       assertEquals(50, Node.FREE_CALL);
1669:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1670:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1671:       assertEquals(1, Node.DECR_FLAG);
1672:       assertFalse(node0.isThrow());
1673:       assertFalse(node0.isBreak());
1674:       assertFalse(node0.isGetProp());
1675:       assertEquals((-1), node0.getCharno());
1676:       assertFalse(node0.isInc());
1677:       assertFalse(node0.isObjectLit());
1678:       assertFalse(node0.isCase());
1679:       assertFalse(node0.isExprResult());
1680:       assertFalse(node0.isThis());
1681:       assertFalse(node0.isHook());
1682:       assertFalse(node0.isComma());
1683:       assertFalse(node0.isInstanceOf());
1684:       assertFalse(node0.isWith());
1685:       assertFalse(node0.isEmpty());
1686:       assertFalse(node0.isFor());
1687:       assertFalse(node0.isLabelName());
1688:       assertFalse(node0.isGetElem());
1689:       assertFalse(node0.isArrayLit());
1690:       assertFalse(node0.hasOneChild());
1691:       assertFalse(node0.isDelProp());
1692:       assertFalse(node0.isOr());
1693:       assertFalse(node0.isTry());
1694:       assertFalse(node0.isTrue());
1695:       assertFalse(node0.isScript());
1696:       assertFalse(node0.isGetterDef());
1697:       assertFalse(node0.isNumber());
1698:       assertFalse(node0.isDo());
1699:       assertFalse(node0.isDefaultCase());
1700:       assertFalse(node0.isSwitch());
1701:       assertFalse(node0.isAssignAdd());
1702:       assertFalse(node0.isLabel());
1703:       assertEquals(0, node0.getChildCount());
1704:       assertFalse(node0.isStringKey());
1705:       assertFalse(node0.isCall());
1706:       assertFalse(node0.isVar());
1707:       assertFalse(node0.isNull());
1708:       assertFalse(node0.isParamList());
1709:       assertFalse(node0.isName());
1710:       assertFalse(node0.isAdd());
1711:       assertFalse(node0.isNew());
1712:       assertFalse(node0.isSetterDef());
1713:       assertFalse(node0.isWhile());
1714:       assertFalse(node0.isVoid());
1715:       assertTrue(node0.isString());
1716:       assertEquals((-1), node0.getLineno());
1717:       assertFalse(node0.isBlock());
1718:       assertFalse(node0.isReturn());
1719:       assertFalse(node0.isTypeOf());
1720:       assertFalse(node0.isRegExp());
1721:       assertFalse(node0.isDec());
1722:       assertFalse(node0.isCatch());
1723:       assertFalse(node0.hasMoreThanOneChild());
1724:       assertFalse(node0.isAssign());
1725:       assertFalse(node0.hasChildren());
1726:       assertFalse(node0.isNE());
1727:       assertFalse(node0.isIf());
1728:       assertFalse(node0.isDebugger());
1729:       assertEquals((-1), node0.getSourcePosition());
1730:       assertFalse(node0.isIn());
1731:       assertFalse(node0.isNot());
1732:       assertEquals(40, node0.getType());
1733:       assertFalse(node0.isAnd());
1734:       assertFalse(node0.isCast());
1735:       assertFalse(node0.isContinue());
1736:       assertFalse(node0.isFunction());
1737:       assertFalse(node0.isFalse());
1738:       assertFalse(node1.isIn());
1739:       assertFalse(node1.isGetterDef());
1740:       assertFalse(node1.isNE());
1741:       assertFalse(node1.isSwitch());
1742:       assertFalse(node1.isArrayLit());
1743:       assertFalse(node1.isIf());
1744:       assertFalse(node1.isDelProp());
1745:       assertFalse(node1.isInc());
1746:       assertFalse(node1.isTrue());
1747:       assertFalse(node1.isFalse());
1748:       assertFalse(node1.isFunction());
1749:       assertFalse(node1.isThrow());
1750:       assertFalse(node1.isEmpty());
1751:       assertFalse(node1.isDefaultCase());
1752:       assertFalse(node1.isInstanceOf());
1753:       assertFalse(node1.isCatch());
1754:       assertFalse(node1.isThis());
1755:       assertEquals(0, node1.getChildCount());
1756:       assertFalse(node1.isWith());
1757:       assertFalse(node1.isStringKey());
1758:       assertFalse(node1.isParamList());
1759:       assertEquals(37, node1.getCharno());
1760:       assertFalse(node1.isHook());
1761:       assertFalse(node1.isBlock());
1762:       assertFalse(node1.isCase());
1763:       assertEquals(7, node1.getLineno());
1764:       assertFalse(node1.isFor());
1765:       assertFalse(node1.isScript());
1766:       assertFalse(node1.hasOneChild());
1767:       assertFalse(node1.isTry());
1768:       assertFalse(node1.isAssignAdd());
1769:       assertFalse(node1.isReturn());
1770:       assertFalse(node1.isOr());
1771:       assertEquals(47, node1.getType());
1772:       assertFalse(node1.isLabel());
1773:       assertFalse(node1.hasMoreThanOneChild());
1774:       assertFalse(node1.isContinue());
1775:       assertFalse(node1.isDec());
1776:       assertFalse(node1.isNumber());
1777:       assertFalse(node1.isTypeOf());
1778:       assertFalse(node1.isLabelName());
1779:       assertFalse(node1.isGetElem());
1780:       assertFalse(node1.isNew());
1781:       assertFalse(node1.isVar());
1782:       assertFalse(node1.isAdd());
1783:       assertFalse(node1.isCast());
1784:       assertFalse(node1.isDo());
1785:       assertEquals(28709, node1.getSourcePosition());
1786:       assertFalse(node1.isSetterDef());
1787:       assertFalse(node1.isGetProp());
1788:       assertFalse(node1.isComma());
1789:       assertFalse(node1.isObjectLit());
1790:       assertFalse(node1.isNot());
1791:       assertFalse(node1.isBreak());
1792:       assertFalse(node1.isCall());
1793:       assertFalse(node1.isNull());
1794:       assertFalse(node1.isAnd());
1795:       assertFalse(node1.isName());
1796:       assertFalse(node1.isVoid());
1797:       assertTrue(node1.isRegExp());
1798:       assertFalse(node1.isExprResult());
1799:       assertFalse(node1.isDebugger());
1800:       assertFalse(node1.isAssign());
1801:       assertFalse(node1.isWhile());
1802:       assertFalse(node1.isString());
1803:       assertFalse(node1.hasChildren());
1804:       assertSame(node0, node2);
1805:   }
1806: }
RegularFileObject[/tmp/EvoSuite_418_1628157553414/com/google/javascript/rhino/Node_418_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_418_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_418_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_418_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 09:59:13.755 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());

node0.setCharno(536870912);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());

Node node1 = new Node(47, node0, 7, 37);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertEquals(7, node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertEquals(47, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertTrue(node1.isRegExp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertEquals(7, node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertEquals(47, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertTrue(node1.isRegExp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());

Node node2 = node1.removeFirstChild();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertEquals(7, node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertEquals(47, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertTrue(node1.isRegExp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.hasChildren());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertEquals(40, node2.getType());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertSame(node0, node2);
assertSame(node2, node0);

boolean boolean0 = node2.isUnscopedQualifiedName();
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertEquals(7, node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertEquals(47, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertTrue(node1.isRegExp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.hasChildren());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertEquals(40, node2.getType());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertSame(node0, node2);
assertSame(node2, node0);

boolean boolean1 = node_NodeMismatch0.equals("F~f/O5[<");
assertFalse(boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertEquals(7, node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertEquals(47, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertTrue(node1.isRegExp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.hasChildren());
assertSame(node0, node2);

boolean boolean2 = node1.hasChildren();
assertFalse(boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertEquals(7, node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertEquals(47, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertTrue(node1.isRegExp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.hasChildren());
assertSame(node0, node2);


[MASTER] 09:59:17.894 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_449_1628157557533/com/google/javascript/rhino/Node_449_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_449_1628157557533/com/google/javascript/rhino/Node_449_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:17.894 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:17.894 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:17.895 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 231
[MASTER] 09:59:17.896 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_449_1628157557533/com/google/javascript/rhino/Node_449_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:17 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_449_tmp__ESTest extends Node_449_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertNotNull(node0);
23:       assertEquals(51, Node.STATIC_SOURCE_FILE);
24:       assertEquals(30, Node.VAR_ARGS_NAME);
25:       assertEquals(49, Node.DIRECT_EVAL);
26:       assertEquals(1, Node.DECR_FLAG);
27:       assertEquals(15, Node.NO_SIDE_EFFECTS);
28:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
29:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
30:       assertEquals(2, Node.POST_FLAG);
31:       assertEquals(32, Node.INCRDECR_PROP);
32:       assertEquals(57, Node.LAST_PROP);
33:       assertEquals(47, Node.IS_DISPATCHER);
34:       assertEquals(12, Node.COLUMN_BITS);
35:       assertEquals(40, Node.ORIGINALNAME_PROP);
36:       assertEquals(50, Node.FREE_CALL);
37:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
38:       assertEquals(43, Node.IS_CONSTANT_NAME);
39:       assertEquals(46, Node.IS_NAMESPACE);
40:       assertEquals(54, Node.SLASH_V);
41:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
42:       assertEquals(4095, Node.COLUMN_MASK);
43:       assertEquals(55, Node.INFERRED_FUNCTION);
44:       assertEquals(39, Node.EMPTY_BLOCK);
45:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
46:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
47:       assertEquals(52, Node.LENGTH);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(53, Node.INPUT_ID);
50:       assertEquals(29, Node.JSDOC_INFO_PROP);
51:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
52:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
53:       assertEquals(37, Node.OPT_ARG_NAME);
54:       assertEquals(8, Node.FLAG_NO_THROWS);
55:       assertEquals(36, Node.QUOTED_PROP);
56:       assertEquals(48, Node.DIRECTIVES);
57:       assertEquals(56, Node.CHANGE_TIME);
58:       assertEquals(57, Node.REFLECTED_OBJECT);
59:       assertFalse(node0.isReturn());
60:       assertFalse(node0.isOr());
61:       assertEquals((-1), node0.getLineno());
62:       assertFalse(node0.isLabel());
63:       assertFalse(node0.hasMoreThanOneChild());
64:       assertFalse(node0.isContinue());
65:       assertFalse(node0.isDec());
66:       assertFalse(node0.isTypeOf());
67:       assertFalse(node0.isDo());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.hasChildren());
70:       assertFalse(node0.isBlock());
71:       assertTrue(node0.isString());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isWhile());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isVar());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.isNumber());
78:       assertFalse(node0.isNot());
79:       assertEquals((-1), node0.getSourcePosition());
80:       assertFalse(node0.isStringKey());
81:       assertFalse(node0.isLabelName());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isParamList());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isGetProp());
86:       assertFalse(node0.isObjectLit());
87:       assertFalse(node0.isDefaultCase());
88:       assertFalse(node0.isComma());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isGetElem());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isAdd());
93:       assertFalse(node0.isExprResult());
94:       assertFalse(node0.isEmpty());
95:       assertFalse(node0.isNull());
96:       assertFalse(node0.isDelProp());
97:       assertFalse(node0.isBreak());
98:       assertFalse(node0.isName());
99:       assertFalse(node0.isVoid());
100:       assertFalse(node0.isTrue());
101:       assertFalse(node0.isIn());
102:       assertFalse(node0.isInc());
103:       assertFalse(node0.isCase());
104:       assertFalse(node0.isFor());
105:       assertFalse(node0.isArrayLit());
106:       assertFalse(node0.isFalse());
107:       assertFalse(node0.isFunction());
108:       assertFalse(node0.isGetterDef());
109:       assertFalse(node0.isDebugger());
110:       assertEquals((-1), node0.getCharno());
111:       assertFalse(node0.isSwitch());
112:       assertFalse(node0.isInstanceOf());
113:       assertFalse(node0.isCatch());
114:       assertFalse(node0.isWith());
115:       assertFalse(node0.isRegExp());
116:       assertFalse(node0.isScript());
117:       assertFalse(node0.isSetterDef());
118:       assertFalse(node0.isThis());
119:       assertFalse(node0.isThrow());
120:       assertEquals(40, node0.getType());
121:       assertFalse(node0.isTry());
122:       assertFalse(node0.isHook());
123:       assertFalse(node0.isIf());
124:       assertFalse(node0.isNE());
125:       
126:       node0.setCharno(536870912);
127:       assertEquals(51, Node.STATIC_SOURCE_FILE);
128:       assertEquals(30, Node.VAR_ARGS_NAME);
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(1, Node.DECR_FLAG);
131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(2, Node.POST_FLAG);
135:       assertEquals(32, Node.INCRDECR_PROP);
136:       assertEquals(57, Node.LAST_PROP);
137:       assertEquals(47, Node.IS_DISPATCHER);
138:       assertEquals(12, Node.COLUMN_BITS);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(50, Node.FREE_CALL);
141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
142:       assertEquals(43, Node.IS_CONSTANT_NAME);
143:       assertEquals(46, Node.IS_NAMESPACE);
144:       assertEquals(54, Node.SLASH_V);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(4095, Node.COLUMN_MASK);
147:       assertEquals(55, Node.INFERRED_FUNCTION);
148:       assertEquals(39, Node.EMPTY_BLOCK);
149:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
151:       assertEquals(52, Node.LENGTH);
152:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
153:       assertEquals(53, Node.INPUT_ID);
154:       assertEquals(29, Node.JSDOC_INFO_PROP);
155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(37, Node.OPT_ARG_NAME);
158:       assertEquals(8, Node.FLAG_NO_THROWS);
159:       assertEquals(36, Node.QUOTED_PROP);
160:       assertEquals(48, Node.DIRECTIVES);
161:       assertEquals(56, Node.CHANGE_TIME);
162:       assertEquals(57, Node.REFLECTED_OBJECT);
163:       assertFalse(node0.isReturn());
164:       assertFalse(node0.isOr());
165:       assertEquals((-1), node0.getLineno());
166:       assertFalse(node0.isLabel());
167:       assertFalse(node0.hasMoreThanOneChild());
168:       assertFalse(node0.isContinue());
169:       assertFalse(node0.isDec());
170:       assertFalse(node0.isTypeOf());
171:       assertFalse(node0.isDo());
172:       assertFalse(node0.isAssign());
173:       assertFalse(node0.hasChildren());
174:       assertFalse(node0.isBlock());
175:       assertTrue(node0.isString());
176:       assertFalse(node0.isAssignAdd());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.hasOneChild());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isCast());
181:       assertFalse(node0.isNumber());
182:       assertFalse(node0.isNot());
183:       assertEquals((-1), node0.getSourcePosition());
184:       assertFalse(node0.isStringKey());
185:       assertFalse(node0.isLabelName());
186:       assertFalse(node0.isAnd());
187:       assertFalse(node0.isParamList());
188:       assertEquals(0, node0.getChildCount());
189:       assertFalse(node0.isGetProp());
190:       assertFalse(node0.isObjectLit());
191:       assertFalse(node0.isDefaultCase());
192:       assertFalse(node0.isComma());
193:       assertFalse(node0.isNew());
194:       assertFalse(node0.isGetElem());
195:       assertFalse(node0.isCall());
196:       assertFalse(node0.isAdd());
197:       assertFalse(node0.isExprResult());
198:       assertFalse(node0.isEmpty());
199:       assertFalse(node0.isNull());
200:       assertFalse(node0.isDelProp());
201:       assertFalse(node0.isBreak());
202:       assertFalse(node0.isName());
203:       assertFalse(node0.isVoid());
204:       assertFalse(node0.isTrue());
205:       assertFalse(node0.isIn());
206:       assertFalse(node0.isInc());
207:       assertFalse(node0.isCase());
208:       assertFalse(node0.isFor());
209:       assertFalse(node0.isArrayLit());
210:       assertFalse(node0.isFalse());
211:       assertFalse(node0.isFunction());
212:       assertFalse(node0.isGetterDef());
213:       assertFalse(node0.isDebugger());
214:       assertEquals((-1), node0.getCharno());
215:       assertFalse(node0.isSwitch());
216:       assertFalse(node0.isInstanceOf());
217:       assertFalse(node0.isCatch());
218:       assertFalse(node0.isWith());
219:       assertFalse(node0.isRegExp());
220:       assertFalse(node0.isScript());
221:       assertFalse(node0.isSetterDef());
222:       assertFalse(node0.isThis());
223:       assertFalse(node0.isThrow());
224:       assertEquals(40, node0.getType());
225:       assertFalse(node0.isTry());
226:       assertFalse(node0.isHook());
227:       assertFalse(node0.isIf());
228:       assertFalse(node0.isNE());
229:       
230:       Iterable<Node> iterable0 = node0.children();
231:       assertFalse(iterable0.contains(node0));
232:       assertNotNull(iterable0);
233:       assertEquals(51, Node.STATIC_SOURCE_FILE);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertEquals(49, Node.DIRECT_EVAL);
236:       assertEquals(1, Node.DECR_FLAG);
237:       assertEquals(15, Node.NO_SIDE_EFFECTS);
238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
240:       assertEquals(2, Node.POST_FLAG);
241:       assertEquals(32, Node.INCRDECR_PROP);
242:       assertEquals(57, Node.LAST_PROP);
243:       assertEquals(47, Node.IS_DISPATCHER);
244:       assertEquals(12, Node.COLUMN_BITS);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(50, Node.FREE_CALL);
247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
248:       assertEquals(43, Node.IS_CONSTANT_NAME);
249:       assertEquals(46, Node.IS_NAMESPACE);
250:       assertEquals(54, Node.SLASH_V);
251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(55, Node.INFERRED_FUNCTION);
254:       assertEquals(39, Node.EMPTY_BLOCK);
255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
257:       assertEquals(52, Node.LENGTH);
258:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(29, Node.JSDOC_INFO_PROP);
261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
263:       assertEquals(37, Node.OPT_ARG_NAME);
264:       assertEquals(8, Node.FLAG_NO_THROWS);
265:       assertEquals(36, Node.QUOTED_PROP);
266:       assertEquals(48, Node.DIRECTIVES);
267:       assertEquals(56, Node.CHANGE_TIME);
268:       assertEquals(57, Node.REFLECTED_OBJECT);
269:       assertFalse(node0.isReturn());
270:       assertFalse(node0.isOr());
271:       assertEquals((-1), node0.getLineno());
272:       assertFalse(node0.isLabel());
273:       assertFalse(node0.hasMoreThanOneChild());
274:       assertFalse(node0.isContinue());
275:       assertFalse(node0.isDec());
276:       assertFalse(node0.isTypeOf());
277:       assertFalse(node0.isDo());
278:       assertFalse(node0.isAssign());
279:       assertFalse(node0.hasChildren());
280:       assertFalse(node0.isBlock());
281:       assertTrue(node0.isString());
282:       assertFalse(node0.isAssignAdd());
283:       assertFalse(node0.isWhile());
284:       assertFalse(node0.hasOneChild());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isCast());
287:       assertFalse(node0.isNumber());
288:       assertFalse(node0.isNot());
289:       assertEquals((-1), node0.getSourcePosition());
290:       assertFalse(node0.isStringKey());
291:       assertFalse(node0.isLabelName());
292:       assertFalse(node0.isAnd());
293:       assertFalse(node0.isParamList());
294:       assertEquals(0, node0.getChildCount());
295:       assertFalse(node0.isGetProp());
296:       assertFalse(node0.isObjectLit());
297:       assertFalse(node0.isDefaultCase());
298:       assertFalse(node0.isComma());
299:       assertFalse(node0.isNew());
300:       assertFalse(node0.isGetElem());
301:       assertFalse(node0.isCall());
302:       assertFalse(node0.isAdd());
303:       assertFalse(node0.isExprResult());
304:       assertFalse(node0.isEmpty());
305:       assertFalse(node0.isNull());
306:       assertFalse(node0.isDelProp());
307:       assertFalse(node0.isBreak());
308:       assertFalse(node0.isName());
309:       assertFalse(node0.isVoid());
310:       assertFalse(node0.isTrue());
311:       assertFalse(node0.isIn());
312:       assertFalse(node0.isInc());
313:       assertFalse(node0.isCase());
314:       assertFalse(node0.isFor());
315:       assertFalse(node0.isArrayLit());
316:       assertFalse(node0.isFalse());
317:       assertFalse(node0.isFunction());
318:       assertFalse(node0.isGetterDef());
319:       assertFalse(node0.isDebugger());
320:       assertEquals((-1), node0.getCharno());
321:       assertFalse(node0.isSwitch());
322:       assertFalse(node0.isInstanceOf());
323:       assertFalse(node0.isCatch());
324:       assertFalse(node0.isWith());
325:       assertFalse(node0.isRegExp());
326:       assertFalse(node0.isScript());
327:       assertFalse(node0.isSetterDef());
328:       assertFalse(node0.isThis());
329:       assertFalse(node0.isThrow());
330:       assertEquals(40, node0.getType());
331:       assertFalse(node0.isTry());
332:       assertFalse(node0.isHook());
333:       assertFalse(node0.isIf());
334:       assertFalse(node0.isNE());
335:       
336:       Node node1 = new Node(47, node0, 7, 37);
337:       assertFalse(node1.equals((Object)node0));
338:       assertNotNull(node1);
339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       assertEquals(49, Node.DIRECT_EVAL);
342:       assertEquals(1, Node.DECR_FLAG);
343:       assertEquals(15, Node.NO_SIDE_EFFECTS);
344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
345:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
346:       assertEquals(2, Node.POST_FLAG);
347:       assertEquals(32, Node.INCRDECR_PROP);
348:       assertEquals(57, Node.LAST_PROP);
349:       assertEquals(47, Node.IS_DISPATCHER);
350:       assertEquals(12, Node.COLUMN_BITS);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(50, Node.FREE_CALL);
353:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
354:       assertEquals(43, Node.IS_CONSTANT_NAME);
355:       assertEquals(46, Node.IS_NAMESPACE);
356:       assertEquals(54, Node.SLASH_V);
357:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
358:       assertEquals(4095, Node.COLUMN_MASK);
359:       assertEquals(55, Node.INFERRED_FUNCTION);
360:       assertEquals(39, Node.EMPTY_BLOCK);
361:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
363:       assertEquals(52, Node.LENGTH);
364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(29, Node.JSDOC_INFO_PROP);
367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
369:       assertEquals(37, Node.OPT_ARG_NAME);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(36, Node.QUOTED_PROP);
372:       assertEquals(48, Node.DIRECTIVES);
373:       assertEquals(56, Node.CHANGE_TIME);
374:       assertEquals(57, Node.REFLECTED_OBJECT);
375:       assertEquals(52, Node.LENGTH);
376:       assertEquals(57, Node.REFLECTED_OBJECT);
377:       assertEquals(40, Node.ORIGINALNAME_PROP);
378:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
379:       assertEquals(57, Node.LAST_PROP);
380:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
382:       assertEquals(30, Node.VAR_ARGS_NAME);
383:       assertEquals(4095, Node.COLUMN_MASK);
384:       assertEquals(55, Node.INFERRED_FUNCTION);
385:       assertEquals(37, Node.OPT_ARG_NAME);
386:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
387:       assertEquals(39, Node.EMPTY_BLOCK);
388:       assertEquals(49, Node.DIRECT_EVAL);
389:       assertEquals(48, Node.DIRECTIVES);
390:       assertEquals(15, Node.NO_SIDE_EFFECTS);
391:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
392:       assertEquals(29, Node.JSDOC_INFO_PROP);
393:       assertEquals(56, Node.CHANGE_TIME);
394:       assertEquals(8, Node.FLAG_NO_THROWS);
395:       assertEquals(36, Node.QUOTED_PROP);
396:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
397:       assertEquals(53, Node.INPUT_ID);
398:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
399:       assertEquals(47, Node.IS_DISPATCHER);
400:       assertEquals(2, Node.POST_FLAG);
401:       assertEquals(32, Node.INCRDECR_PROP);
402:       assertEquals(46, Node.IS_NAMESPACE);
403:       assertEquals(12, Node.COLUMN_BITS);
404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
405:       assertEquals(1, Node.DECR_FLAG);
406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
407:       assertEquals(43, Node.IS_CONSTANT_NAME);
408:       assertEquals(54, Node.SLASH_V);
409:       assertEquals(50, Node.FREE_CALL);
410:       assertEquals(51, Node.STATIC_SOURCE_FILE);
411:       assertFalse(node0.isReturn());
412:       assertFalse(node0.isOr());
413:       assertEquals((-1), node0.getLineno());
414:       assertFalse(node0.isLabel());
415:       assertFalse(node0.hasMoreThanOneChild());
416:       assertFalse(node0.isContinue());
417:       assertFalse(node0.isDec());
418:       assertFalse(node0.isTypeOf());
419:       assertFalse(node0.isDo());
420:       assertFalse(node0.isAssign());
421:       assertFalse(node0.hasChildren());
422:       assertFalse(node0.isBlock());
423:       assertTrue(node0.isString());
424:       assertFalse(node0.isAssignAdd());
425:       assertFalse(node0.isWhile());
426:       assertFalse(node0.hasOneChild());
427:       assertFalse(node0.isVar());
428:       assertFalse(node0.isCast());
429:       assertFalse(node0.isNumber());
430:       assertFalse(node0.isNot());
431:       assertEquals((-1), node0.getSourcePosition());
432:       assertFalse(node0.isStringKey());
433:       assertFalse(node0.isLabelName());
434:       assertFalse(node0.isAnd());
435:       assertFalse(node0.isParamList());
436:       assertEquals(0, node0.getChildCount());
437:       assertFalse(node0.isGetProp());
438:       assertFalse(node0.isObjectLit());
439:       assertFalse(node0.isDefaultCase());
440:       assertFalse(node0.isComma());
441:       assertFalse(node0.isNew());
442:       assertFalse(node0.isGetElem());
443:       assertFalse(node0.isCall());
444:       assertFalse(node0.isAdd());
445:       assertFalse(node0.isExprResult());
446:       assertFalse(node0.isEmpty());
447:       assertFalse(node0.isNull());
448:       assertFalse(node0.isDelProp());
449:       assertFalse(node0.isBreak());
450:       assertFalse(node0.isName());
451:       assertFalse(node0.isVoid());
452:       assertFalse(node0.isTrue());
453:       assertFalse(node0.isIn());
454:       assertFalse(node0.isInc());
455:       assertFalse(node0.isCase());
456:       assertFalse(node0.isFor());
457:       assertFalse(node0.isArrayLit());
458:       assertFalse(node0.isFalse());
459:       assertFalse(node0.isFunction());
460:       assertFalse(node0.isGetterDef());
461:       assertFalse(node0.isDebugger());
462:       assertEquals((-1), node0.getCharno());
463:       assertFalse(node0.isSwitch());
464:       assertFalse(node0.isInstanceOf());
465:       assertFalse(node0.isCatch());
466:       assertFalse(node0.isWith());
467:       assertFalse(node0.isRegExp());
468:       assertFalse(node0.isScript());
469:       assertFalse(node0.isSetterDef());
470:       assertFalse(node0.isThis());
471:       assertFalse(node0.isThrow());
472:       assertEquals(40, node0.getType());
473:       assertFalse(node0.isTry());
474:       assertFalse(node0.isHook());
475:       assertFalse(node0.isIf());
476:       assertFalse(node0.isNE());
477:       assertFalse(node1.isBlock());
478:       assertFalse(node1.isNew());
479:       assertFalse(node1.isAdd());
480:       assertFalse(node1.isCall());
481:       assertEquals(28709, node1.getSourcePosition());
482:       assertFalse(node1.isDo());
483:       assertFalse(node1.isWhile());
484:       assertFalse(node1.hasMoreThanOneChild());
485:       assertFalse(node1.isContinue());
486:       assertFalse(node1.isVar());
487:       assertFalse(node1.isReturn());
488:       assertFalse(node1.isLabel());
489:       assertFalse(node1.isOr());
490:       assertFalse(node1.isAssignAdd());
491:       assertFalse(node1.isSetterDef());
492:       assertFalse(node1.isName());
493:       assertFalse(node1.isNull());
494:       assertFalse(node1.isTrue());
495:       assertFalse(node1.isVoid());
496:       assertFalse(node1.isFunction());
497:       assertFalse(node1.isCast());
498:       assertFalse(node1.isExprResult());
499:       assertTrue(node1.isRegExp());
500:       assertFalse(node1.isGetElem());
501:       assertFalse(node1.isAssign());
502:       assertFalse(node1.isDec());
503:       assertFalse(node1.isTypeOf());
504:       assertTrue(node1.hasOneChild());
505:       assertFalse(node1.isGetProp());
506:       assertFalse(node1.isNot());
507:       assertFalse(node1.isObjectLit());
508:       assertFalse(node1.isString());
509:       assertFalse(node1.isAnd());
510:       assertFalse(node1.isDebugger());
511:       assertFalse(node1.isSwitch());
512:       assertFalse(node1.isInc());
513:       assertFalse(node1.isFalse());
514:       assertFalse(node1.isCase());
515:       assertFalse(node1.isThrow());
516:       assertFalse(node1.isHook());
517:       assertFalse(node1.isComma());
518:       assertEquals(1, node1.getChildCount());
519:       assertFalse(node1.isThis());
520:       assertTrue(node1.hasChildren());
521:       assertFalse(node1.isIn());
522:       assertFalse(node1.isInstanceOf());
523:       assertFalse(node1.isDelProp());
524:       assertFalse(node1.isBreak());
525:       assertFalse(node1.isEmpty());
526:       assertEquals(37, node1.getCharno());
527:       assertFalse(node1.isIf());
528:       assertFalse(node1.isNE());
529:       assertFalse(node1.isTry());
530:       assertFalse(node1.isScript());
531:       assertFalse(node1.isArrayLit());
532:       assertFalse(node1.isFor());
533:       assertFalse(node1.isCatch());
534:       assertFalse(node1.isWith());
535:       assertFalse(node1.isDefaultCase());
536:       assertEquals(7, node1.getLineno());
537:       assertFalse(node1.isParamList());
538:       assertEquals(47, node1.getType());
539:       assertFalse(node1.isStringKey());
540:       assertFalse(node1.isLabelName());
541:       assertFalse(node1.isNumber());
542:       assertFalse(node1.isGetterDef());
543:       
544:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
545:       assertFalse(node0.equals((Object)node1));
546:       assertNull(node_NodeMismatch0);
547:       assertEquals(51, Node.STATIC_SOURCE_FILE);
548:       assertEquals(30, Node.VAR_ARGS_NAME);
549:       assertEquals(49, Node.DIRECT_EVAL);
550:       assertEquals(1, Node.DECR_FLAG);
551:       assertEquals(15, Node.NO_SIDE_EFFECTS);
552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
554:       assertEquals(2, Node.POST_FLAG);
555:       assertEquals(32, Node.INCRDECR_PROP);
556:       assertEquals(57, Node.LAST_PROP);
557:       assertEquals(47, Node.IS_DISPATCHER);
558:       assertEquals(12, Node.COLUMN_BITS);
559:       assertEquals(40, Node.ORIGINALNAME_PROP);
560:       assertEquals(50, Node.FREE_CALL);
561:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
562:       assertEquals(43, Node.IS_CONSTANT_NAME);
563:       assertEquals(46, Node.IS_NAMESPACE);
564:       assertEquals(54, Node.SLASH_V);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(4095, Node.COLUMN_MASK);
567:       assertEquals(55, Node.INFERRED_FUNCTION);
568:       assertEquals(39, Node.EMPTY_BLOCK);
569:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
571:       assertEquals(52, Node.LENGTH);
572:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
573:       assertEquals(53, Node.INPUT_ID);
574:       assertEquals(29, Node.JSDOC_INFO_PROP);
575:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(37, Node.OPT_ARG_NAME);
578:       assertEquals(8, Node.FLAG_NO_THROWS);
579:       assertEquals(36, Node.QUOTED_PROP);
580:       assertEquals(48, Node.DIRECTIVES);
581:       assertEquals(56, Node.CHANGE_TIME);
582:       assertEquals(57, Node.REFLECTED_OBJECT);
583:       assertFalse(node0.isReturn());
584:       assertFalse(node0.isOr());
585:       assertEquals((-1), node0.getLineno());
586:       assertFalse(node0.isLabel());
587:       assertFalse(node0.hasMoreThanOneChild());
588:       assertFalse(node0.isContinue());
589:       assertFalse(node0.isDec());
590:       assertFalse(node0.isTypeOf());
591:       assertFalse(node0.isDo());
592:       assertFalse(node0.isAssign());
593:       assertFalse(node0.hasChildren());
594:       assertFalse(node0.isBlock());
595:       assertTrue(node0.isString());
596:       assertFalse(node0.isAssignAdd());
597:       assertFalse(node0.isWhile());
598:       assertFalse(node0.hasOneChild());
599:       assertFalse(node0.isVar());
600:       assertFalse(node0.isCast());
601:       assertFalse(node0.isNumber());
602:       assertFalse(node0.isNot());
603:       assertEquals((-1), node0.getSourcePosition());
604:       assertFalse(node0.isStringKey());
605:       assertFalse(node0.isLabelName());
606:       assertFalse(node0.isAnd());
607:       assertFalse(node0.isParamList());
608:       assertEquals(0, node0.getChildCount());
609:       assertFalse(node0.isGetProp());
610:       assertFalse(node0.isObjectLit());
611:       assertFalse(node0.isDefaultCase());
612:       assertFalse(node0.isComma());
613:       assertFalse(node0.isNew());
614:       assertFalse(node0.isGetElem());
615:       assertFalse(node0.isCall());
616:       assertFalse(node0.isAdd());
617:       assertFalse(node0.isExprResult());
618:       assertFalse(node0.isEmpty());
619:       assertFalse(node0.isNull());
620:       assertFalse(node0.isDelProp());
621:       assertFalse(node0.isBreak());
622:       assertFalse(node0.isName());
623:       assertFalse(node0.isVoid());
624:       assertFalse(node0.isTrue());
625:       assertFalse(node0.isIn());
626:       assertFalse(node0.isInc());
627:       assertFalse(node0.isCase());
628:       assertFalse(node0.isFor());
629:       assertFalse(node0.isArrayLit());
630:       assertFalse(node0.isFalse());
631:       assertFalse(node0.isFunction());
632:       assertFalse(node0.isGetterDef());
633:       assertFalse(node0.isDebugger());
634:       assertEquals((-1), node0.getCharno());
635:       assertFalse(node0.isSwitch());
636:       assertFalse(node0.isInstanceOf());
637:       assertFalse(node0.isCatch());
638:       assertFalse(node0.isWith());
639:       assertFalse(node0.isRegExp());
640:       assertFalse(node0.isScript());
641:       assertFalse(node0.isSetterDef());
642:       assertFalse(node0.isThis());
643:       assertFalse(node0.isThrow());
644:       assertEquals(40, node0.getType());
645:       assertFalse(node0.isTry());
646:       assertFalse(node0.isHook());
647:       assertFalse(node0.isIf());
648:       assertFalse(node0.isNE());
649:       
650:       Node node2 = node1.removeFirstChild();
651:       assertFalse(node0.equals((Object)node1));
652:       assertFalse(node1.equals((Object)node0));
653:       assertFalse(node2.equals((Object)node1));
654:       assertNotNull(node2);
655:       assertEquals(51, Node.STATIC_SOURCE_FILE);
656:       assertEquals(30, Node.VAR_ARGS_NAME);
657:       assertEquals(49, Node.DIRECT_EVAL);
658:       assertEquals(1, Node.DECR_FLAG);
659:       assertEquals(15, Node.NO_SIDE_EFFECTS);
660:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
662:       assertEquals(2, Node.POST_FLAG);
663:       assertEquals(32, Node.INCRDECR_PROP);
664:       assertEquals(57, Node.LAST_PROP);
665:       assertEquals(47, Node.IS_DISPATCHER);
666:       assertEquals(12, Node.COLUMN_BITS);
667:       assertEquals(40, Node.ORIGINALNAME_PROP);
668:       assertEquals(50, Node.FREE_CALL);
669:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
670:       assertEquals(43, Node.IS_CONSTANT_NAME);
671:       assertEquals(46, Node.IS_NAMESPACE);
672:       assertEquals(54, Node.SLASH_V);
673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
674:       assertEquals(4095, Node.COLUMN_MASK);
675:       assertEquals(55, Node.INFERRED_FUNCTION);
676:       assertEquals(39, Node.EMPTY_BLOCK);
677:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
678:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
679:       assertEquals(52, Node.LENGTH);
680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(29, Node.JSDOC_INFO_PROP);
683:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(37, Node.OPT_ARG_NAME);
686:       assertEquals(8, Node.FLAG_NO_THROWS);
687:       assertEquals(36, Node.QUOTED_PROP);
688:       assertEquals(48, Node.DIRECTIVES);
689:       assertEquals(56, Node.CHANGE_TIME);
690:       assertEquals(57, Node.REFLECTED_OBJECT);
691:       assertEquals(52, Node.LENGTH);
692:       assertEquals(57, Node.REFLECTED_OBJECT);
693:       assertEquals(40, Node.ORIGINALNAME_PROP);
694:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
695:       assertEquals(57, Node.LAST_PROP);
696:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
697:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
698:       assertEquals(30, Node.VAR_ARGS_NAME);
699:       assertEquals(4095, Node.COLUMN_MASK);
700:       assertEquals(55, Node.INFERRED_FUNCTION);
701:       assertEquals(37, Node.OPT_ARG_NAME);
702:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
703:       assertEquals(39, Node.EMPTY_BLOCK);
704:       assertEquals(49, Node.DIRECT_EVAL);
705:       assertEquals(48, Node.DIRECTIVES);
706:       assertEquals(15, Node.NO_SIDE_EFFECTS);
707:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
708:       assertEquals(29, Node.JSDOC_INFO_PROP);
709:       assertEquals(56, Node.CHANGE_TIME);
710:       assertEquals(8, Node.FLAG_NO_THROWS);
711:       assertEquals(36, Node.QUOTED_PROP);
712:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
713:       assertEquals(53, Node.INPUT_ID);
714:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
715:       assertEquals(47, Node.IS_DISPATCHER);
716:       assertEquals(2, Node.POST_FLAG);
717:       assertEquals(32, Node.INCRDECR_PROP);
718:       assertEquals(46, Node.IS_NAMESPACE);
719:       assertEquals(12, Node.COLUMN_BITS);
720:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
721:       assertEquals(1, Node.DECR_FLAG);
722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
723:       assertEquals(43, Node.IS_CONSTANT_NAME);
724:       assertEquals(54, Node.SLASH_V);
725:       assertEquals(50, Node.FREE_CALL);
726:       assertEquals(51, Node.STATIC_SOURCE_FILE);
727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
728:       assertEquals(29, Node.JSDOC_INFO_PROP);
729:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
731:       assertEquals(37, Node.OPT_ARG_NAME);
732:       assertEquals(43, Node.IS_CONSTANT_NAME);
733:       assertEquals(36, Node.QUOTED_PROP);
734:       assertEquals(56, Node.CHANGE_TIME);
735:       assertEquals(51, Node.STATIC_SOURCE_FILE);
736:       assertEquals(4095, Node.COLUMN_MASK);
737:       assertEquals(12, Node.COLUMN_BITS);
738:       assertEquals(46, Node.IS_NAMESPACE);
739:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
740:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
741:       assertEquals(1, Node.DECR_FLAG);
742:       assertEquals(32, Node.INCRDECR_PROP);
743:       assertEquals(40, Node.ORIGINALNAME_PROP);
744:       assertEquals(57, Node.REFLECTED_OBJECT);
745:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
746:       assertEquals(52, Node.LENGTH);
747:       assertEquals(50, Node.FREE_CALL);
748:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
749:       assertEquals(54, Node.SLASH_V);
750:       assertEquals(48, Node.DIRECTIVES);
751:       assertEquals(49, Node.DIRECT_EVAL);
752:       assertEquals(55, Node.INFERRED_FUNCTION);
753:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
754:       assertEquals(30, Node.VAR_ARGS_NAME);
755:       assertEquals(2, Node.POST_FLAG);
756:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
757:       assertEquals(8, Node.FLAG_NO_THROWS);
758:       assertEquals(39, Node.EMPTY_BLOCK);
759:       assertEquals(15, Node.NO_SIDE_EFFECTS);
760:       assertEquals(47, Node.IS_DISPATCHER);
761:       assertEquals(53, Node.INPUT_ID);
762:       assertEquals(57, Node.LAST_PROP);
763:       assertFalse(node0.isReturn());
764:       assertFalse(node0.isOr());
765:       assertEquals((-1), node0.getLineno());
766:       assertFalse(node0.isLabel());
767:       assertFalse(node0.hasMoreThanOneChild());
768:       assertFalse(node0.isContinue());
769:       assertFalse(node0.isDec());
770:       assertFalse(node0.isTypeOf());
771:       assertFalse(node0.isDo());
772:       assertFalse(node0.isAssign());
773:       assertFalse(node0.hasChildren());
774:       assertFalse(node0.isBlock());
775:       assertTrue(node0.isString());
776:       assertFalse(node0.isAssignAdd());
777:       assertFalse(node0.isWhile());
778:       assertFalse(node0.hasOneChild());
779:       assertFalse(node0.isVar());
780:       assertFalse(node0.isCast());
781:       assertFalse(node0.isNumber());
782:       assertFalse(node0.isNot());
783:       assertEquals((-1), node0.getSourcePosition());
784:       assertFalse(node0.isStringKey());
785:       assertFalse(node0.isLabelName());
786:       assertFalse(node0.isAnd());
787:       assertFalse(node0.isParamList());
788:       assertEquals(0, node0.getChildCount());
789:       assertFalse(node0.isGetProp());
790:       assertFalse(node0.isObjectLit());
791:       assertFalse(node0.isDefaultCase());
792:       assertFalse(node0.isComma());
793:       assertFalse(node0.isNew());
794:       assertFalse(node0.isGetElem());
795:       assertFalse(node0.isCall());
796:       assertFalse(node0.isAdd());
797:       assertFalse(node0.isExprResult());
798:       assertFalse(node0.isEmpty());
799:       assertFalse(node0.isNull());
800:       assertFalse(node0.isDelProp());
801:       assertFalse(node0.isBreak());
802:       assertFalse(node0.isName());
803:       assertFalse(node0.isVoid());
804:       assertFalse(node0.isTrue());
805:       assertFalse(node0.isIn());
806:       assertFalse(node0.isInc());
807:       assertFalse(node0.isCase());
808:       assertFalse(node0.isFor());
809:       assertFalse(node0.isArrayLit());
810:       assertFalse(node0.isFalse());
811:       assertFalse(node0.isFunction());
812:       assertFalse(node0.isGetterDef());
813:       assertFalse(node0.isDebugger());
814:       assertEquals((-1), node0.getCharno());
815:       assertFalse(node0.isSwitch());
816:       assertFalse(node0.isInstanceOf());
817:       assertFalse(node0.isCatch());
818:       assertFalse(node0.isWith());
819:       assertFalse(node0.isRegExp());
820:       assertFalse(node0.isScript());
821:       assertFalse(node0.isSetterDef());
822:       assertFalse(node0.isThis());
823:       assertFalse(node0.isThrow());
824:       assertEquals(40, node0.getType());
825:       assertFalse(node0.isTry());
826:       assertFalse(node0.isHook());
827:       assertFalse(node0.isIf());
828:       assertFalse(node0.isNE());
829:       assertFalse(node1.isBlock());
830:       assertFalse(node1.isNew());
831:       assertFalse(node1.isAdd());
832:       assertFalse(node1.isCall());
833:       assertEquals(28709, node1.getSourcePosition());
834:       assertFalse(node1.isDo());
835:       assertFalse(node1.isWhile());
836:       assertFalse(node1.hasMoreThanOneChild());
837:       assertFalse(node1.isContinue());
838:       assertFalse(node1.isVar());
839:       assertFalse(node1.isReturn());
840:       assertFalse(node1.isLabel());
841:       assertFalse(node1.isOr());
842:       assertFalse(node1.isAssignAdd());
843:       assertFalse(node1.isSetterDef());
844:       assertFalse(node1.isName());
845:       assertFalse(node1.isNull());
846:       assertFalse(node1.isTrue());
847:       assertFalse(node1.isVoid());
848:       assertFalse(node1.isFunction());
849:       assertFalse(node1.isCast());
850:       assertFalse(node1.isExprResult());
851:       assertTrue(node1.isRegExp());
852:       assertFalse(node1.isGetElem());
853:       assertFalse(node1.isAssign());
854:       assertFalse(node1.isDec());
855:       assertFalse(node1.isTypeOf());
856:       assertFalse(node1.hasChildren());
857:       assertFalse(node1.isGetProp());
858:       assertFalse(node1.isNot());
859:       assertFalse(node1.isObjectLit());
860:       assertFalse(node1.isString());
861:       assertFalse(node1.isAnd());
862:       assertFalse(node1.isDebugger());
863:       assertFalse(node1.isSwitch());
864:       assertFalse(node1.isInc());
865:       assertFalse(node1.isFalse());
866:       assertFalse(node1.isCase());
867:       assertFalse(node1.isThrow());
868:       assertFalse(node1.isHook());
869:       assertFalse(node1.isComma());
870:       assertFalse(node1.isThis());
871:       assertFalse(node1.isIn());
872:       assertFalse(node1.isInstanceOf());
873:       assertFalse(node1.isDelProp());
874:       assertFalse(node1.isBreak());
875:       assertFalse(node1.isEmpty());
876:       assertEquals(37, node1.getCharno());
877:       assertFalse(node1.isIf());
878:       assertFalse(node1.isNE());
879:       assertFalse(node1.isTry());
880:       assertFalse(node1.hasOneChild());
881:       assertFalse(node1.isScript());
882:       assertFalse(node1.isArrayLit());
883:       assertFalse(node1.isFor());
884:       assertFalse(node1.isCatch());
885:       assertFalse(node1.isWith());
886:       assertFalse(node1.isDefaultCase());
887:       assertEquals(0, node1.getChildCount());
888:       assertEquals(7, node1.getLineno());
889:       assertFalse(node1.isParamList());
890:       assertEquals(47, node1.getType());
891:       assertFalse(node1.isStringKey());
892:       assertFalse(node1.isLabelName());
893:       assertFalse(node1.isNumber());
894:       assertFalse(node1.isGetterDef());
895:       assertFalse(node2.isDebugger());
896:       assertFalse(node2.isFunction());
897:       assertFalse(node2.isTrue());
898:       assertFalse(node2.isRegExp());
899:       assertFalse(node2.isIf());
900:       assertFalse(node2.isDelProp());
901:       assertFalse(node2.isNE());
902:       assertFalse(node2.isVoid());
903:       assertFalse(node2.isArrayLit());
904:       assertFalse(node2.isCatch());
905:       assertFalse(node2.isGetterDef());
906:       assertFalse(node2.isFor());
907:       assertFalse(node2.isTry());
908:       assertFalse(node2.isCase());
909:       assertFalse(node2.isHook());
910:       assertFalse(node2.isThrow());
911:       assertFalse(node2.isBlock());
912:       assertFalse(node2.isFalse());
913:       assertFalse(node2.isIn());
914:       assertFalse(node2.isContinue());
915:       assertEquals(40, node2.getType());
916:       assertFalse(node2.isSetterDef());
917:       assertFalse(node2.isInc());
918:       assertFalse(node2.isCast());
919:       assertFalse(node2.isAssign());
920:       assertFalse(node2.isWith());
921:       assertFalse(node2.isAnd());
922:       assertFalse(node2.isExprResult());
923:       assertFalse(node2.isGetElem());
924:       assertFalse(node2.isLabelName());
925:       assertEquals((-1), node2.getLineno());
926:       assertFalse(node2.isReturn());
927:       assertFalse(node2.isInstanceOf());
928:       assertFalse(node2.isObjectLit());
929:       assertFalse(node2.hasMoreThanOneChild());
930:       assertFalse(node2.isThis());
931:       assertFalse(node2.isTypeOf());
932:       assertFalse(node2.isNot());
933:       assertFalse(node2.isDec());
934:       assertEquals((-1), node2.getSourcePosition());
935:       assertFalse(node2.isComma());
936:       assertFalse(node2.hasChildren());
937:       assertFalse(node2.isNumber());
938:       assertFalse(node2.isScript());
939:       assertFalse(node2.isWhile());
940:       assertFalse(node2.isGetProp());
941:       assertTrue(node2.isString());
942:       assertFalse(node2.hasOneChild());
943:       assertFalse(node2.isVar());
944:       assertFalse(node2.isAdd());
945:       assertEquals((-1), node2.getCharno());
946:       assertFalse(node2.isBreak());
947:       assertFalse(node2.isNull());
948:       assertFalse(node2.isStringKey());
949:       assertFalse(node2.isParamList());
950:       assertFalse(node2.isCall());
951:       assertFalse(node2.isName());
952:       assertFalse(node2.isSwitch());
953:       assertEquals(0, node2.getChildCount());
954:       assertFalse(node2.isAssignAdd());
955:       assertFalse(node2.isLabel());
956:       assertFalse(node2.isOr());
957:       assertFalse(node2.isDefaultCase());
958:       assertFalse(node2.isEmpty());
959:       assertFalse(node2.isDo());
960:       assertFalse(node2.isNew());
961:       assertSame(node0, node2);
962:       assertSame(node2, node0);
963:       
964:       boolean boolean0 = node2.mayMutateGlobalStateOrThrow();
965:       assertTrue(boolean0);
966:       assertFalse(node0.equals((Object)node1));
967:       assertFalse(node1.equals((Object)node2));
968:       assertFalse(node1.equals((Object)node0));
969:       assertFalse(node2.equals((Object)node1));
970:       assertEquals(51, Node.STATIC_SOURCE_FILE);
971:       assertEquals(30, Node.VAR_ARGS_NAME);
972:       assertEquals(49, Node.DIRECT_EVAL);
973:       assertEquals(1, Node.DECR_FLAG);
974:       assertEquals(15, Node.NO_SIDE_EFFECTS);
975:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
976:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
977:       assertEquals(2, Node.POST_FLAG);
978:       assertEquals(32, Node.INCRDECR_PROP);
979:       assertEquals(57, Node.LAST_PROP);
980:       assertEquals(47, Node.IS_DISPATCHER);
981:       assertEquals(12, Node.COLUMN_BITS);
982:       assertEquals(40, Node.ORIGINALNAME_PROP);
983:       assertEquals(50, Node.FREE_CALL);
984:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
985:       assertEquals(43, Node.IS_CONSTANT_NAME);
986:       assertEquals(46, Node.IS_NAMESPACE);
987:       assertEquals(54, Node.SLASH_V);
988:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
989:       assertEquals(4095, Node.COLUMN_MASK);
990:       assertEquals(55, Node.INFERRED_FUNCTION);
991:       assertEquals(39, Node.EMPTY_BLOCK);
992:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
993:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
994:       assertEquals(52, Node.LENGTH);
995:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
996:       assertEquals(53, Node.INPUT_ID);
997:       assertEquals(29, Node.JSDOC_INFO_PROP);
998:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
999:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1000:       assertEquals(37, Node.OPT_ARG_NAME);
1001:       assertEquals(8, Node.FLAG_NO_THROWS);
1002:       assertEquals(36, Node.QUOTED_PROP);
1003:       assertEquals(48, Node.DIRECTIVES);
1004:       assertEquals(56, Node.CHANGE_TIME);
1005:       assertEquals(57, Node.REFLECTED_OBJECT);
1006:       assertEquals(52, Node.LENGTH);
1007:       assertEquals(57, Node.REFLECTED_OBJECT);
1008:       assertEquals(40, Node.ORIGINALNAME_PROP);
1009:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1010:       assertEquals(57, Node.LAST_PROP);
1011:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1012:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1013:       assertEquals(30, Node.VAR_ARGS_NAME);
1014:       assertEquals(4095, Node.COLUMN_MASK);
1015:       assertEquals(55, Node.INFERRED_FUNCTION);
1016:       assertEquals(37, Node.OPT_ARG_NAME);
1017:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1018:       assertEquals(39, Node.EMPTY_BLOCK);
1019:       assertEquals(49, Node.DIRECT_EVAL);
1020:       assertEquals(48, Node.DIRECTIVES);
1021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1022:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1023:       assertEquals(29, Node.JSDOC_INFO_PROP);
1024:       assertEquals(56, Node.CHANGE_TIME);
1025:       assertEquals(8, Node.FLAG_NO_THROWS);
1026:       assertEquals(36, Node.QUOTED_PROP);
1027:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1028:       assertEquals(53, Node.INPUT_ID);
1029:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1030:       assertEquals(47, Node.IS_DISPATCHER);
1031:       assertEquals(2, Node.POST_FLAG);
1032:       assertEquals(32, Node.INCRDECR_PROP);
1033:       assertEquals(46, Node.IS_NAMESPACE);
1034:       assertEquals(12, Node.COLUMN_BITS);
1035:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1036:       assertEquals(1, Node.DECR_FLAG);
1037:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1038:       assertEquals(43, Node.IS_CONSTANT_NAME);
1039:       assertEquals(54, Node.SLASH_V);
1040:       assertEquals(50, Node.FREE_CALL);
1041:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1042:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1043:       assertEquals(29, Node.JSDOC_INFO_PROP);
1044:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1045:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1046:       assertEquals(37, Node.OPT_ARG_NAME);
1047:       assertEquals(43, Node.IS_CONSTANT_NAME);
1048:       assertEquals(36, Node.QUOTED_PROP);
1049:       assertEquals(56, Node.CHANGE_TIME);
1050:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1051:       assertEquals(4095, Node.COLUMN_MASK);
1052:       assertEquals(12, Node.COLUMN_BITS);
1053:       assertEquals(46, Node.IS_NAMESPACE);
1054:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1055:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1056:       assertEquals(1, Node.DECR_FLAG);
1057:       assertEquals(32, Node.INCRDECR_PROP);
1058:       assertEquals(40, Node.ORIGINALNAME_PROP);
1059:       assertEquals(57, Node.REFLECTED_OBJECT);
1060:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1061:       assertEquals(52, Node.LENGTH);
1062:       assertEquals(50, Node.FREE_CALL);
1063:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1064:       assertEquals(54, Node.SLASH_V);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(49, Node.DIRECT_EVAL);
1067:       assertEquals(55, Node.INFERRED_FUNCTION);
1068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1069:       assertEquals(30, Node.VAR_ARGS_NAME);
1070:       assertEquals(2, Node.POST_FLAG);
1071:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(39, Node.EMPTY_BLOCK);
1074:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1075:       assertEquals(47, Node.IS_DISPATCHER);
1076:       assertEquals(53, Node.INPUT_ID);
1077:       assertEquals(57, Node.LAST_PROP);
1078:       assertFalse(node0.isReturn());
1079:       assertFalse(node0.isOr());
1080:       assertEquals((-1), node0.getLineno());
1081:       assertFalse(node0.isLabel());
1082:       assertFalse(node0.hasMoreThanOneChild());
1083:       assertFalse(node0.isContinue());
1084:       assertFalse(node0.isDec());
1085:       assertFalse(node0.isTypeOf());
1086:       assertFalse(node0.isDo());
1087:       assertFalse(node0.isAssign());
1088:       assertFalse(node0.hasChildren());
1089:       assertFalse(node0.isBlock());
1090:       assertTrue(node0.isString());
1091:       assertFalse(node0.isAssignAdd());
1092:       assertFalse(node0.isWhile());
1093:       assertFalse(node0.hasOneChild());
1094:       assertFalse(node0.isVar());
1095:       assertFalse(node0.isCast());
1096:       assertFalse(node0.isNumber());
1097:       assertFalse(node0.isNot());
1098:       assertEquals((-1), node0.getSourcePosition());
1099:       assertFalse(node0.isStringKey());
1100:       assertFalse(node0.isLabelName());
1101:       assertFalse(node0.isAnd());
1102:       assertFalse(node0.isParamList());
1103:       assertEquals(0, node0.getChildCount());
1104:       assertFalse(node0.isGetProp());
1105:       assertFalse(node0.isObjectLit());
1106:       assertFalse(node0.isDefaultCase());
1107:       assertFalse(node0.isComma());
1108:       assertFalse(node0.isNew());
1109:       assertFalse(node0.isGetElem());
1110:       assertFalse(node0.isCall());
1111:       assertFalse(node0.isAdd());
1112:       assertFalse(node0.isExprResult());
1113:       assertFalse(node0.isEmpty());
1114:       assertFalse(node0.isNull());
1115:       assertFalse(node0.isDelProp());
1116:       assertFalse(node0.isBreak());
1117:       assertFalse(node0.isName());
1118:       assertFalse(node0.isVoid());
1119:       assertFalse(node0.isTrue());
1120:       assertFalse(node0.isIn());
1121:       assertFalse(node0.isInc());
1122:       assertFalse(node0.isCase());
1123:       assertFalse(node0.isFor());
1124:       assertFalse(node0.isArrayLit());
1125:       assertFalse(node0.isFalse());
1126:       assertFalse(node0.isFunction());
1127:       assertFalse(node0.isGetterDef());
1128:       assertFalse(node0.isDebugger());
1129:       assertEquals((-1), node0.getCharno());
1130:       assertFalse(node0.isSwitch());
1131:       assertFalse(node0.isInstanceOf());
1132:       assertFalse(node0.isCatch());
1133:       assertFalse(node0.isWith());
1134:       assertFalse(node0.isRegExp());
1135:       assertFalse(node0.isScript());
1136:       assertFalse(node0.isSetterDef());
1137:       assertFalse(node0.isThis());
1138:       assertFalse(node0.isThrow());
1139:       assertEquals(40, node0.getType());
1140:       assertFalse(node0.isTry());
1141:       assertFalse(node0.isHook());
1142:       assertFalse(node0.isIf());
1143:       assertFalse(node0.isNE());
1144:       assertFalse(node1.isBlock());
1145:       assertFalse(node1.isNew());
1146:       assertFalse(node1.isAdd());
1147:       assertFalse(node1.isCall());
1148:       assertEquals(28709, node1.getSourcePosition());
1149:       assertFalse(node1.isDo());
1150:       assertFalse(node1.isWhile());
1151:       assertFalse(node1.hasMoreThanOneChild());
1152:       assertFalse(node1.isContinue());
1153:       assertFalse(node1.isVar());
1154:       assertFalse(node1.isReturn());
1155:       assertFalse(node1.isLabel());
1156:       assertFalse(node1.isOr());
1157:       assertFalse(node1.isAssignAdd());
1158:       assertFalse(node1.isSetterDef());
1159:       assertFalse(node1.isName());
1160:       assertFalse(node1.isNull());
1161:       assertFalse(node1.isTrue());
1162:       assertFalse(node1.isVoid());
1163:       assertFalse(node1.isFunction());
1164:       assertFalse(node1.isCast());
1165:       assertFalse(node1.isExprResult());
1166:       assertTrue(node1.isRegExp());
1167:       assertFalse(node1.isGetElem());
1168:       assertFalse(node1.isAssign());
1169:       assertFalse(node1.isDec());
1170:       assertFalse(node1.isTypeOf());
1171:       assertFalse(node1.hasChildren());
1172:       assertFalse(node1.isGetProp());
1173:       assertFalse(node1.isNot());
1174:       assertFalse(node1.isObjectLit());
1175:       assertFalse(node1.isString());
1176:       assertFalse(node1.isAnd());
1177:       assertFalse(node1.isDebugger());
1178:       assertFalse(node1.isSwitch());
1179:       assertFalse(node1.isInc());
1180:       assertFalse(node1.isFalse());
1181:       assertFalse(node1.isCase());
1182:       assertFalse(node1.isThrow());
1183:       assertFalse(node1.isHook());
1184:       assertFalse(node1.isComma());
1185:       assertFalse(node1.isThis());
1186:       assertFalse(node1.isIn());
1187:       assertFalse(node1.isInstanceOf());
1188:       assertFalse(node1.isDelProp());
1189:       assertFalse(node1.isBreak());
1190:       assertFalse(node1.isEmpty());
1191:       assertEquals(37, node1.getCharno());
1192:       assertFalse(node1.isIf());
1193:       assertFalse(node1.isNE());
1194:       assertFalse(node1.isTry());
1195:       assertFalse(node1.hasOneChild());
1196:       assertFalse(node1.isScript());
1197:       assertFalse(node1.isArrayLit());
1198:       assertFalse(node1.isFor());
1199:       assertFalse(node1.isCatch());
1200:       assertFalse(node1.isWith());
1201:       assertFalse(node1.isDefaultCase());
1202:       assertEquals(0, node1.getChildCount());
1203:       assertEquals(7, node1.getLineno());
1204:       assertFalse(node1.isParamList());
1205:       assertEquals(47, node1.getType());
1206:       assertFalse(node1.isStringKey());
1207:       assertFalse(node1.isLabelName());
1208:       assertFalse(node1.isNumber());
1209:       assertFalse(node1.isGetterDef());
1210:       assertFalse(node2.isDebugger());
1211:       assertFalse(node2.isFunction());
1212:       assertFalse(node2.isTrue());
1213:       assertFalse(node2.isRegExp());
1214:       assertFalse(node2.isIf());
1215:       assertFalse(node2.isDelProp());
1216:       assertFalse(node2.isNE());
1217:       assertFalse(node2.isVoid());
1218:       assertFalse(node2.isArrayLit());
1219:       assertFalse(node2.isCatch());
1220:       assertFalse(node2.isGetterDef());
1221:       assertFalse(node2.isFor());
1222:       assertFalse(node2.isTry());
1223:       assertFalse(node2.isCase());
1224:       assertFalse(node2.isHook());
1225:       assertFalse(node2.isThrow());
1226:       assertFalse(node2.isBlock());
1227:       assertFalse(node2.isFalse());
1228:       assertFalse(node2.isIn());
1229:       assertFalse(node2.isContinue());
1230:       assertEquals(40, node2.getType());
1231:       assertFalse(node2.isSetterDef());
1232:       assertFalse(node2.isInc());
1233:       assertFalse(node2.isCast());
1234:       assertFalse(node2.isAssign());
1235:       assertFalse(node2.isWith());
1236:       assertFalse(node2.isAnd());
1237:       assertFalse(node2.isExprResult());
1238:       assertFalse(node2.isGetElem());
1239:       assertFalse(node2.isLabelName());
1240:       assertEquals((-1), node2.getLineno());
1241:       assertFalse(node2.isReturn());
1242:       assertFalse(node2.isInstanceOf());
1243:       assertFalse(node2.isObjectLit());
1244:       assertFalse(node2.hasMoreThanOneChild());
1245:       assertFalse(node2.isThis());
1246:       assertFalse(node2.isTypeOf());
1247:       assertFalse(node2.isNot());
1248:       assertFalse(node2.isDec());
1249:       assertEquals((-1), node2.getSourcePosition());
1250:       assertFalse(node2.isComma());
1251:       assertFalse(node2.hasChildren());
1252:       assertFalse(node2.isNumber());
1253:       assertFalse(node2.isScript());
1254:       assertFalse(node2.isWhile());
1255:       assertFalse(node2.isGetProp());
1256:       assertTrue(node2.isString());
1257:       assertFalse(node2.hasOneChild());
1258:       assertFalse(node2.isVar());
1259:       assertFalse(node2.isAdd());
1260:       assertEquals((-1), node2.getCharno());
1261:       assertFalse(node2.isBreak());
1262:       assertFalse(node2.isNull());
1263:       assertFalse(node2.isStringKey());
1264:       assertFalse(node2.isParamList());
1265:       assertFalse(node2.isCall());
1266:       assertFalse(node2.isName());
1267:       assertFalse(node2.isSwitch());
1268:       assertEquals(0, node2.getChildCount());
1269:       assertFalse(node2.isAssignAdd());
1270:       assertFalse(node2.isLabel());
1271:       assertFalse(node2.isOr());
1272:       assertFalse(node2.isDefaultCase());
1273:       assertFalse(node2.isEmpty());
1274:       assertFalse(node2.isDo());
1275:       assertFalse(node2.isNew());
1276:       assertSame(node0, node2);
1277:       assertSame(node2, node0);
1278:       
1279:       boolean boolean1 = node2.isEquivalentTo(node1, false, false, true);
1280:       assertFalse(boolean1);
1281:       assertFalse(node0.equals((Object)node1));
1282:       assertFalse(node1.equals((Object)node2));
1283:       assertFalse(node1.equals((Object)node0));
1284:       assertFalse(node2.equals((Object)node1));
1285:       assertFalse(boolean1 == boolean0);
1286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1287:       assertEquals(30, Node.VAR_ARGS_NAME);
1288:       assertEquals(49, Node.DIRECT_EVAL);
1289:       assertEquals(1, Node.DECR_FLAG);
1290:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1291:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1293:       assertEquals(2, Node.POST_FLAG);
1294:       assertEquals(32, Node.INCRDECR_PROP);
1295:       assertEquals(57, Node.LAST_PROP);
1296:       assertEquals(47, Node.IS_DISPATCHER);
1297:       assertEquals(12, Node.COLUMN_BITS);
1298:       assertEquals(40, Node.ORIGINALNAME_PROP);
1299:       assertEquals(50, Node.FREE_CALL);
1300:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1301:       assertEquals(43, Node.IS_CONSTANT_NAME);
1302:       assertEquals(46, Node.IS_NAMESPACE);
1303:       assertEquals(54, Node.SLASH_V);
1304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1305:       assertEquals(4095, Node.COLUMN_MASK);
1306:       assertEquals(55, Node.INFERRED_FUNCTION);
1307:       assertEquals(39, Node.EMPTY_BLOCK);
1308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1309:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1310:       assertEquals(52, Node.LENGTH);
1311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1312:       assertEquals(53, Node.INPUT_ID);
1313:       assertEquals(29, Node.JSDOC_INFO_PROP);
1314:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1315:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1316:       assertEquals(37, Node.OPT_ARG_NAME);
1317:       assertEquals(8, Node.FLAG_NO_THROWS);
1318:       assertEquals(36, Node.QUOTED_PROP);
1319:       assertEquals(48, Node.DIRECTIVES);
1320:       assertEquals(56, Node.CHANGE_TIME);
1321:       assertEquals(57, Node.REFLECTED_OBJECT);
1322:       assertEquals(52, Node.LENGTH);
1323:       assertEquals(57, Node.REFLECTED_OBJECT);
1324:       assertEquals(40, Node.ORIGINALNAME_PROP);
1325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1326:       assertEquals(57, Node.LAST_PROP);
1327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1328:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1329:       assertEquals(30, Node.VAR_ARGS_NAME);
1330:       assertEquals(4095, Node.COLUMN_MASK);
1331:       assertEquals(55, Node.INFERRED_FUNCTION);
1332:       assertEquals(37, Node.OPT_ARG_NAME);
1333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1334:       assertEquals(39, Node.EMPTY_BLOCK);
1335:       assertEquals(49, Node.DIRECT_EVAL);
1336:       assertEquals(48, Node.DIRECTIVES);
1337:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1338:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1339:       assertEquals(29, Node.JSDOC_INFO_PROP);
1340:       assertEquals(56, Node.CHANGE_TIME);
1341:       assertEquals(8, Node.FLAG_NO_THROWS);
1342:       assertEquals(36, Node.QUOTED_PROP);
1343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1344:       assertEquals(53, Node.INPUT_ID);
1345:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1346:       assertEquals(47, Node.IS_DISPATCHER);
1347:       assertEquals(2, Node.POST_FLAG);
1348:       assertEquals(32, Node.INCRDECR_PROP);
1349:       assertEquals(46, Node.IS_NAMESPACE);
1350:       assertEquals(12, Node.COLUMN_BITS);
1351:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1352:       assertEquals(1, Node.DECR_FLAG);
1353:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1354:       assertEquals(43, Node.IS_CONSTANT_NAME);
1355:       assertEquals(54, Node.SLASH_V);
1356:       assertEquals(50, Node.FREE_CALL);
1357:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1359:       assertEquals(29, Node.JSDOC_INFO_PROP);
1360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1362:       assertEquals(37, Node.OPT_ARG_NAME);
1363:       assertEquals(43, Node.IS_CONSTANT_NAME);
1364:       assertEquals(36, Node.QUOTED_PROP);
1365:       assertEquals(56, Node.CHANGE_TIME);
1366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1367:       assertEquals(4095, Node.COLUMN_MASK);
1368:       assertEquals(12, Node.COLUMN_BITS);
1369:       assertEquals(46, Node.IS_NAMESPACE);
1370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1371:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1372:       assertEquals(1, Node.DECR_FLAG);
1373:       assertEquals(32, Node.INCRDECR_PROP);
1374:       assertEquals(40, Node.ORIGINALNAME_PROP);
1375:       assertEquals(57, Node.REFLECTED_OBJECT);
1376:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1377:       assertEquals(52, Node.LENGTH);
1378:       assertEquals(50, Node.FREE_CALL);
1379:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1380:       assertEquals(54, Node.SLASH_V);
1381:       assertEquals(48, Node.DIRECTIVES);
1382:       assertEquals(49, Node.DIRECT_EVAL);
1383:       assertEquals(55, Node.INFERRED_FUNCTION);
1384:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1385:       assertEquals(30, Node.VAR_ARGS_NAME);
1386:       assertEquals(2, Node.POST_FLAG);
1387:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1388:       assertEquals(8, Node.FLAG_NO_THROWS);
1389:       assertEquals(39, Node.EMPTY_BLOCK);
1390:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1391:       assertEquals(47, Node.IS_DISPATCHER);
1392:       assertEquals(53, Node.INPUT_ID);
1393:       assertEquals(57, Node.LAST_PROP);
1394:       assertFalse(node0.isReturn());
1395:       assertFalse(node0.isOr());
1396:       assertEquals((-1), node0.getLineno());
1397:       assertFalse(node0.isLabel());
1398:       assertFalse(node0.hasMoreThanOneChild());
1399:       assertFalse(node0.isContinue());
1400:       assertFalse(node0.isDec());
1401:       assertFalse(node0.isTypeOf());
1402:       assertFalse(node0.isDo());
1403:       assertFalse(node0.isAssign());
1404:       assertFalse(node0.hasChildren());
1405:       assertFalse(node0.isBlock());
1406:       assertTrue(node0.isString());
1407:       assertFalse(node0.isAssignAdd());
1408:       assertFalse(node0.isWhile());
1409:       assertFalse(node0.hasOneChild());
1410:       assertFalse(node0.isVar());
1411:       assertFalse(node0.isCast());
1412:       assertFalse(node0.isNumber());
1413:       assertFalse(node0.isNot());
1414:       assertEquals((-1), node0.getSourcePosition());
1415:       assertFalse(node0.isStringKey());
1416:       assertFalse(node0.isLabelName());
1417:       assertFalse(node0.isAnd());
1418:       assertFalse(node0.isParamList());
1419:       assertEquals(0, node0.getChildCount());
1420:       assertFalse(node0.isGetProp());
1421:       assertFalse(node0.isObjectLit());
1422:       assertFalse(node0.isDefaultCase());
1423:       assertFalse(node0.isComma());
1424:       assertFalse(node0.isNew());
1425:       assertFalse(node0.isGetElem());
1426:       assertFalse(node0.isCall());
1427:       assertFalse(node0.isAdd());
1428:       assertFalse(node0.isExprResult());
1429:       assertFalse(node0.isEmpty());
1430:       assertFalse(node0.isNull());
1431:       assertFalse(node0.isDelProp());
1432:       assertFalse(node0.isBreak());
1433:       assertFalse(node0.isName());
1434:       assertFalse(node0.isVoid());
1435:       assertFalse(node0.isTrue());
1436:       assertFalse(node0.isIn());
1437:       assertFalse(node0.isInc());
1438:       assertFalse(node0.isCase());
1439:       assertFalse(node0.isFor());
1440:       assertFalse(node0.isArrayLit());
1441:       assertFalse(node0.isFalse());
1442:       assertFalse(node0.isFunction());
1443:       assertFalse(node0.isGetterDef());
1444:       assertFalse(node0.isDebugger());
1445:       assertEquals((-1), node0.getCharno());
1446:       assertFalse(node0.isSwitch());
1447:       assertFalse(node0.isInstanceOf());
1448:       assertFalse(node0.isCatch());
1449:       assertFalse(node0.isWith());
1450:       assertFalse(node0.isRegExp());
1451:       assertFalse(node0.isScript());
1452:       assertFalse(node0.isSetterDef());
1453:       assertFalse(node0.isThis());
1454:       assertFalse(node0.isThrow());
1455:       assertEquals(40, node0.getType());
1456:       assertFalse(node0.isTry());
1457:       assertFalse(node0.isHook());
1458:       assertFalse(node0.isIf());
1459:       assertFalse(node0.isNE());
1460:       assertFalse(node1.isBlock());
1461:       assertFalse(node1.isNew());
1462:       assertFalse(node1.isAdd());
1463:       assertFalse(node1.isCall());
1464:       assertEquals(28709, node1.getSourcePosition());
1465:       assertFalse(node1.isDo());
1466:       assertFalse(node1.isWhile());
1467:       assertFalse(node1.hasMoreThanOneChild());
1468:       assertFalse(node1.isContinue());
1469:       assertFalse(node1.isVar());
1470:       assertFalse(node1.isReturn());
1471:       assertFalse(node1.isLabel());
1472:       assertFalse(node1.isOr());
1473:       assertFalse(node1.isAssignAdd());
1474:       assertFalse(node1.isSetterDef());
1475:       assertFalse(node1.isName());
1476:       assertFalse(node1.isNull());
1477:       assertFalse(node1.isTrue());
1478:       assertFalse(node1.isVoid());
1479:       assertFalse(node1.isFunction());
1480:       assertFalse(node1.isCast());
1481:       assertFalse(node1.isExprResult());
1482:       assertTrue(node1.isRegExp());
1483:       assertFalse(node1.isGetElem());
1484:       assertFalse(node1.isAssign());
1485:       assertFalse(node1.isDec());
1486:       assertFalse(node1.isTypeOf());
1487:       assertFalse(node1.hasChildren());
1488:       assertFalse(node1.isGetProp());
1489:       assertFalse(node1.isNot());
1490:       assertFalse(node1.isObjectLit());
1491:       assertFalse(node1.isString());
1492:       assertFalse(node1.isAnd());
1493:       assertFalse(node1.isDebugger());
1494:       assertFalse(node1.isSwitch());
1495:       assertFalse(node1.isInc());
1496:       assertFalse(node1.isFalse());
1497:       assertFalse(node1.isCase());
1498:       assertFalse(node1.isThrow());
1499:       assertFalse(node1.isHook());
1500:       assertFalse(node1.isComma());
1501:       assertFalse(node1.isThis());
1502:       assertFalse(node1.isIn());
1503:       assertFalse(node1.isInstanceOf());
1504:       assertFalse(node1.isDelProp());
1505:       assertFalse(node1.isBreak());
1506:       assertFalse(node1.isEmpty());
1507:       assertEquals(37, node1.getCharno());
1508:       assertFalse(node1.isIf());
1509:       assertFalse(node1.isNE());
1510:       assertFalse(node1.isTry());
1511:       assertFalse(node1.hasOneChild());
1512:       assertFalse(node1.isScript());
1513:       assertFalse(node1.isArrayLit());
1514:       assertFalse(node1.isFor());
1515:       assertFalse(node1.isCatch());
1516:       assertFalse(node1.isWith());
1517:       assertFalse(node1.isDefaultCase());
1518:       assertEquals(0, node1.getChildCount());
1519:       assertEquals(7, node1.getLineno());
1520:       assertFalse(node1.isParamList());
1521:       assertEquals(47, node1.getType());
1522:       assertFalse(node1.isStringKey());
1523:       assertFalse(node1.isLabelName());
1524:       assertFalse(node1.isNumber());
1525:       assertFalse(node1.isGetterDef());
1526:       assertFalse(node2.isDebugger());
1527:       assertFalse(node2.isFunction());
1528:       assertFalse(node2.isTrue());
1529:       assertFalse(node2.isRegExp());
1530:       assertFalse(node2.isIf());
1531:       assertFalse(node2.isDelProp());
1532:       assertFalse(node2.isNE());
1533:       assertFalse(node2.isVoid());
1534:       assertFalse(node2.isArrayLit());
1535:       assertFalse(node2.isCatch());
1536:       assertFalse(node2.isGetterDef());
1537:       assertFalse(node2.isFor());
1538:       assertFalse(node2.isTry());
1539:       assertFalse(node2.isCase());
1540:       assertFalse(node2.isHook());
1541:       assertFalse(node2.isThrow());
1542:       assertFalse(node2.isBlock());
1543:       assertFalse(node2.isFalse());
1544:       assertFalse(node2.isIn());
1545:       assertFalse(node2.isContinue());
1546:       assertEquals(40, node2.getType());
1547:       assertFalse(node2.isSetterDef());
1548:       assertFalse(node2.isInc());
1549:       assertFalse(node2.isCast());
1550:       assertFalse(node2.isAssign());
1551:       assertFalse(node2.isWith());
1552:       assertFalse(node2.isAnd());
1553:       assertFalse(node2.isExprResult());
1554:       assertFalse(node2.isGetElem());
1555:       assertFalse(node2.isLabelName());
1556:       assertEquals((-1), node2.getLineno());
1557:       assertFalse(node2.isReturn());
1558:       assertFalse(node2.isInstanceOf());
1559:       assertFalse(node2.isObjectLit());
1560:       assertFalse(node2.hasMoreThanOneChild());
1561:       assertFalse(node2.isThis());
1562:       assertFalse(node2.isTypeOf());
1563:       assertFalse(node2.isNot());
1564:       assertFalse(node2.isDec());
1565:       assertEquals((-1), node2.getSourcePosition());
1566:       assertFalse(node2.isComma());
1567:       assertFalse(node2.hasChildren());
1568:       assertFalse(node2.isNumber());
1569:       assertFalse(node2.isScript());
1570:       assertFalse(node2.isWhile());
1571:       assertFalse(node2.isGetProp());
1572:       assertTrue(node2.isString());
1573:       assertFalse(node2.hasOneChild());
1574:       assertFalse(node2.isVar());
1575:       assertFalse(node2.isAdd());
1576:       assertEquals((-1), node2.getCharno());
1577:       assertFalse(node2.isBreak());
1578:       assertFalse(node2.isNull());
1579:       assertFalse(node2.isStringKey());
1580:       assertFalse(node2.isParamList());
1581:       assertFalse(node2.isCall());
1582:       assertFalse(node2.isName());
1583:       assertFalse(node2.isSwitch());
1584:       assertEquals(0, node2.getChildCount());
1585:       assertFalse(node2.isAssignAdd());
1586:       assertFalse(node2.isLabel());
1587:       assertFalse(node2.isOr());
1588:       assertFalse(node2.isDefaultCase());
1589:       assertFalse(node2.isEmpty());
1590:       assertFalse(node2.isDo());
1591:       assertFalse(node2.isNew());
1592:       assertSame(node0, node2);
1593:       assertSame(node2, node0);
1594:       
1595:       boolean boolean2 = node1.isEquivalentTo(node2, true, true, false);
1596:       assertFalse(boolean2);
1597:       assertFalse(node0.equals((Object)node1));
1598:       assertFalse(node1.equals((Object)node2));
1599:       assertFalse(node1.equals((Object)node0));
1600:       assertFalse(node2.equals((Object)node1));
1601:       assertFalse(boolean2 == boolean0);
1602:       assertTrue(boolean2 == boolean1);
1603:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1604:       assertEquals(30, Node.VAR_ARGS_NAME);
1605:       assertEquals(49, Node.DIRECT_EVAL);
1606:       assertEquals(1, Node.DECR_FLAG);
1607:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1608:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1609:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1610:       assertEquals(2, Node.POST_FLAG);
1611:       assertEquals(32, Node.INCRDECR_PROP);
1612:       assertEquals(57, Node.LAST_PROP);
1613:       assertEquals(47, Node.IS_DISPATCHER);
1614:       assertEquals(12, Node.COLUMN_BITS);
1615:       assertEquals(40, Node.ORIGINALNAME_PROP);
1616:       assertEquals(50, Node.FREE_CALL);
1617:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1618:       assertEquals(43, Node.IS_CONSTANT_NAME);
1619:       assertEquals(46, Node.IS_NAMESPACE);
1620:       assertEquals(54, Node.SLASH_V);
1621:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1622:       assertEquals(4095, Node.COLUMN_MASK);
1623:       assertEquals(55, Node.INFERRED_FUNCTION);
1624:       assertEquals(39, Node.EMPTY_BLOCK);
1625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1626:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1627:       assertEquals(52, Node.LENGTH);
1628:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1629:       assertEquals(53, Node.INPUT_ID);
1630:       assertEquals(29, Node.JSDOC_INFO_PROP);
1631:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1632:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1633:       assertEquals(37, Node.OPT_ARG_NAME);
1634:       assertEquals(8, Node.FLAG_NO_THROWS);
1635:       assertEquals(36, Node.QUOTED_PROP);
1636:       assertEquals(48, Node.DIRECTIVES);
1637:       assertEquals(56, Node.CHANGE_TIME);
1638:       assertEquals(57, Node.REFLECTED_OBJECT);
1639:       assertEquals(52, Node.LENGTH);
1640:       assertEquals(57, Node.REFLECTED_OBJECT);
1641:       assertEquals(40, Node.ORIGINALNAME_PROP);
1642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1643:       assertEquals(57, Node.LAST_PROP);
1644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1645:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1646:       assertEquals(30, Node.VAR_ARGS_NAME);
1647:       assertEquals(4095, Node.COLUMN_MASK);
1648:       assertEquals(55, Node.INFERRED_FUNCTION);
1649:       assertEquals(37, Node.OPT_ARG_NAME);
1650:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1651:       assertEquals(39, Node.EMPTY_BLOCK);
1652:       assertEquals(49, Node.DIRECT_EVAL);
1653:       assertEquals(48, Node.DIRECTIVES);
1654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1655:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1656:       assertEquals(29, Node.JSDOC_INFO_PROP);
1657:       assertEquals(56, Node.CHANGE_TIME);
1658:       assertEquals(8, Node.FLAG_NO_THROWS);
1659:       assertEquals(36, Node.QUOTED_PROP);
1660:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1661:       assertEquals(53, Node.INPUT_ID);
1662:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1663:       assertEquals(47, Node.IS_DISPATCHER);
1664:       assertEquals(2, Node.POST_FLAG);
1665:       assertEquals(32, Node.INCRDECR_PROP);
1666:       assertEquals(46, Node.IS_NAMESPACE);
1667:       assertEquals(12, Node.COLUMN_BITS);
1668:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1669:       assertEquals(1, Node.DECR_FLAG);
1670:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1671:       assertEquals(43, Node.IS_CONSTANT_NAME);
1672:       assertEquals(54, Node.SLASH_V);
1673:       assertEquals(50, Node.FREE_CALL);
1674:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1675:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1676:       assertEquals(29, Node.JSDOC_INFO_PROP);
1677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1678:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1679:       assertEquals(37, Node.OPT_ARG_NAME);
1680:       assertEquals(43, Node.IS_CONSTANT_NAME);
1681:       assertEquals(36, Node.QUOTED_PROP);
1682:       assertEquals(56, Node.CHANGE_TIME);
1683:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1684:       assertEquals(4095, Node.COLUMN_MASK);
1685:       assertEquals(12, Node.COLUMN_BITS);
1686:       assertEquals(46, Node.IS_NAMESPACE);
1687:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1688:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1689:       assertEquals(1, Node.DECR_FLAG);
1690:       assertEquals(32, Node.INCRDECR_PROP);
1691:       assertEquals(40, Node.ORIGINALNAME_PROP);
1692:       assertEquals(57, Node.REFLECTED_OBJECT);
1693:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1694:       assertEquals(52, Node.LENGTH);
1695:       assertEquals(50, Node.FREE_CALL);
1696:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1697:       assertEquals(54, Node.SLASH_V);
1698:       assertEquals(48, Node.DIRECTIVES);
1699:       assertEquals(49, Node.DIRECT_EVAL);
1700:       assertEquals(55, Node.INFERRED_FUNCTION);
1701:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1702:       assertEquals(30, Node.VAR_ARGS_NAME);
1703:       assertEquals(2, Node.POST_FLAG);
1704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1705:       assertEquals(8, Node.FLAG_NO_THROWS);
1706:       assertEquals(39, Node.EMPTY_BLOCK);
1707:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1708:       assertEquals(47, Node.IS_DISPATCHER);
1709:       assertEquals(53, Node.INPUT_ID);
1710:       assertEquals(57, Node.LAST_PROP);
1711:       assertFalse(node0.isReturn());
1712:       assertFalse(node0.isOr());
1713:       assertEquals((-1), node0.getLineno());
1714:       assertFalse(node0.isLabel());
1715:       assertFalse(node0.hasMoreThanOneChild());
1716:       assertFalse(node0.isContinue());
1717:       assertFalse(node0.isDec());
1718:       assertFalse(node0.isTypeOf());
1719:       assertFalse(node0.isDo());
1720:       assertFalse(node0.isAssign());
1721:       assertFalse(node0.hasChildren());
1722:       assertFalse(node0.isBlock());
1723:       assertTrue(node0.isString());
1724:       assertFalse(node0.isAssignAdd());
1725:       assertFalse(node0.isWhile());
1726:       assertFalse(node0.hasOneChild());
1727:       assertFalse(node0.isVar());
1728:       assertFalse(node0.isCast());
1729:       assertFalse(node0.isNumber());
1730:       assertFalse(node0.isNot());
1731:       assertEquals((-1), node0.getSourcePosition());
1732:       assertFalse(node0.isStringKey());
1733:       assertFalse(node0.isLabelName());
1734:       assertFalse(node0.isAnd());
1735:       assertFalse(node0.isParamList());
1736:       assertEquals(0, node0.getChildCount());
1737:       assertFalse(node0.isGetProp());
1738:       assertFalse(node0.isObjectLit());
1739:       assertFalse(node0.isDefaultCase());
1740:       assertFalse(node0.isComma());
1741:       assertFalse(node0.isNew());
1742:       assertFalse(node0.isGetElem());
1743:       assertFalse(node0.isCall());
1744:       assertFalse(node0.isAdd());
1745:       assertFalse(node0.isExprResult());
1746:       assertFalse(node0.isEmpty());
1747:       assertFalse(node0.isNull());
1748:       assertFalse(node0.isDelProp());
1749:       assertFalse(node0.isBreak());
1750:       assertFalse(node0.isName());
1751:       assertFalse(node0.isVoid());
1752:       assertFalse(node0.isTrue());
1753:       assertFalse(node0.isIn());
1754:       assertFalse(node0.isInc());
1755:       assertFalse(node0.isCase());
1756:       assertFalse(node0.isFor());
1757:       assertFalse(node0.isArrayLit());
1758:       assertFalse(node0.isFalse());
1759:       assertFalse(node0.isFunction());
1760:       assertFalse(node0.isGetterDef());
1761:       assertFalse(node0.isDebugger());
1762:       assertEquals((-1), node0.getCharno());
1763:       assertFalse(node0.isSwitch());
1764:       assertFalse(node0.isInstanceOf());
1765:       assertFalse(node0.isCatch());
1766:       assertFalse(node0.isWith());
1767:       assertFalse(node0.isRegExp());
1768:       assertFalse(node0.isScript());
1769:       assertFalse(node0.isSetterDef());
1770:       assertFalse(node0.isThis());
1771:       assertFalse(node0.isThrow());
1772:       assertEquals(40, node0.getType());
1773:       assertFalse(node0.isTry());
1774:       assertFalse(node0.isHook());
1775:       assertFalse(node0.isIf());
1776:       assertFalse(node0.isNE());
1777:       assertFalse(node1.isBlock());
1778:       assertFalse(node1.isNew());
1779:       assertFalse(node1.isAdd());
1780:       assertFalse(node1.isCall());
1781:       assertEquals(28709, node1.getSourcePosition());
1782:       assertFalse(node1.isDo());
1783:       assertFalse(node1.isWhile());
1784:       assertFalse(node1.hasMoreThanOneChild());
1785:       assertFalse(node1.isContinue());
1786:       assertFalse(node1.isVar());
1787:       assertFalse(node1.isReturn());
1788:       assertFalse(node1.isLabel());
1789:       assertFalse(node1.isOr());
1790:       assertFalse(node1.isAssignAdd());
1791:       assertFalse(node1.isSetterDef());
1792:       assertFalse(node1.isName());
1793:       assertFalse(node1.isNull());
1794:       assertFalse(node1.isTrue());
1795:       assertFalse(node1.isVoid());
1796:       assertFalse(node1.isFunction());
1797:       assertFalse(node1.isCast());
1798:       assertFalse(node1.isExprResult());
1799:       assertTrue(node1.isRegExp());
1800:       assertFalse(node1.isGetElem());
1801:       assertFalse(node1.isAssign());
1802:       assertFalse(node1.isDec());
1803:       assertFalse(node1.isTypeOf());
1804:       assertFalse(node1.hasChildren());
1805:       assertFalse(node1.isGetProp());
1806:       assertFalse(node1.isNot());
1807:       assertFalse(node1.isObjectLit());
1808:       assertFalse(node1.isString());
1809:       assertFalse(node1.isAnd());
1810:       assertFalse(node1.isDebugger());
1811:       assertFalse(node1.isSwitch());
1812:       assertFalse(node1.isInc());
1813:       assertFalse(node1.isFalse());
1814:       assertFalse(node1.isCase());
1815:       assertFalse(node1.isThrow());
1816:       assertFalse(node1.isHook());
1817:       assertFalse(node1.isComma());
1818:       assertFalse(node1.isThis());
1819:       assertFalse(node1.isIn());
1820:       assertFalse(node1.isInstanceOf());
1821:       assertFalse(node1.isDelProp());
1822:       assertFalse(node1.isBreak());
1823:       assertFalse(node1.isEmpty());
1824:       assertEquals(37, node1.getCharno());
1825:       assertFalse(node1.isIf());
1826:       assertFalse(node1.isNE());
1827:       assertFalse(node1.isTry());
1828:       assertFalse(node1.hasOneChild());
1829:       assertFalse(node1.isScript());
1830:       assertFalse(node1.isArrayLit());
1831:       assertFalse(node1.isFor());
1832:       assertFalse(node1.isCatch());
1833:       assertFalse(node1.isWith());
1834:       assertFalse(node1.isDefaultCase());
1835:       assertEquals(0, node1.getChildCount());
1836:       assertEquals(7, node1.getLineno());
1837:       assertFalse(node1.isParamList());
1838:       assertEquals(47, node1.getType());
1839:       assertFalse(node1.isStringKey());
1840:       assertFalse(node1.isLabelName());
1841:       assertFalse(node1.isNumber());
1842:       assertFalse(node1.isGetterDef());
1843:       assertFalse(node2.isDebugger());
1844:       assertFalse(node2.isFunction());
1845:       assertFalse(node2.isTrue());
1846:       assertFalse(node2.isRegExp());
1847:       assertFalse(node2.isIf());
1848:       assertFalse(node2.isDelProp());
1849:       assertFalse(node2.isNE());
1850:       assertFalse(node2.isVoid());
1851:       assertFalse(node2.isArrayLit());
1852:       assertFalse(node2.isCatch());
1853:       assertFalse(node2.isGetterDef());
1854:       assertFalse(node2.isFor());
1855:       assertFalse(node2.isTry());
1856:       assertFalse(node2.isCase());
1857:       assertFalse(node2.isHook());
1858:       assertFalse(node2.isThrow());
1859:       assertFalse(node2.isBlock());
1860:       assertFalse(node2.isFalse());
1861:       assertFalse(node2.isIn());
1862:       assertFalse(node2.isContinue());
1863:       assertEquals(40, node2.getType());
1864:       assertFalse(node2.isSetterDef());
1865:       assertFalse(node2.isInc());
1866:       assertFalse(node2.isCast());
1867:       assertFalse(node2.isAssign());
1868:       assertFalse(node2.isWith());
1869:       assertFalse(node2.isAnd());
1870:       assertFalse(node2.isExprResult());
1871:       assertFalse(node2.isGetElem());
1872:       assertFalse(node2.isLabelName());
1873:       assertEquals((-1), node2.getLineno());
1874:       assertFalse(node2.isReturn());
1875:       assertFalse(node2.isInstanceOf());
1876:       assertFalse(node2.isObjectLit());
1877:       assertFalse(node2.hasMoreThanOneChild());
1878:       assertFalse(node2.isThis());
1879:       assertFalse(node2.isTypeOf());
1880:       assertFalse(node2.isNot());
1881:       assertFalse(node2.isDec());
1882:       assertEquals((-1), node2.getSourcePosition());
1883:       assertFalse(node2.isComma());
1884:       assertFalse(node2.hasChildren());
1885:       assertFalse(node2.isNumber());
1886:       assertFalse(node2.isScript());
1887:       assertFalse(node2.isWhile());
1888:       assertFalse(node2.isGetProp());
1889:       assertTrue(node2.isString());
1890:       assertFalse(node2.hasOneChild());
1891:       assertFalse(node2.isVar());
1892:       assertFalse(node2.isAdd());
1893:       assertEquals((-1), node2.getCharno());
1894:       assertFalse(node2.isBreak());
1895:       assertFalse(node2.isNull());
1896:       assertFalse(node2.isStringKey());
1897:       assertFalse(node2.isParamList());
1898:       assertFalse(node2.isCall());
1899:       assertFalse(node2.isName());
1900:       assertFalse(node2.isSwitch());
1901:       assertEquals(0, node2.getChildCount());
1902:       assertFalse(node2.isAssignAdd());
1903:       assertFalse(node2.isLabel());
1904:       assertFalse(node2.isOr());
1905:       assertFalse(node2.isDefaultCase());
1906:       assertFalse(node2.isEmpty());
1907:       assertFalse(node2.isDo());
1908:       assertFalse(node2.isNew());
1909:       assertSame(node0, node2);
1910:       assertSame(node2, node0);
1911:       
1912:       // Undeclared exception!
1913:       try { 
1914:         node1.detachFromParent();
1915:         fail("Expecting exception: IllegalStateException");
1916:       
1917:       } catch(IllegalStateException e) {
1918:          //
1919:          // no message in exception (getMessage() returned null)
1920:          //
1921:          verifyException("com.google.common.base.Preconditions", e);
1922:       }
1923:   }
1924: }
RegularFileObject[/tmp/EvoSuite_449_1628157557533/com/google/javascript/rhino/Node_449_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:17 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_449_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_449_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_449_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 09:59:17.974 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isNE());

node0.setCharno(536870912);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isNE());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isNE());

Node node1 = new Node(47, node0, 7, 37);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertEquals(7, node1.getLineno());
assertFalse(node1.isParamList());
assertEquals(47, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
assertFalse(node0.equals((Object)node1));
assertNull(node_NodeMismatch0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isNE());

Node node2 = node1.removeFirstChild();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(7, node1.getLineno());
assertFalse(node1.isParamList());
assertEquals(47, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNot());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertSame(node0, node2);
assertSame(node2, node0);

boolean boolean0 = node2.mayMutateGlobalStateOrThrow();
assertTrue(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(7, node1.getLineno());
assertFalse(node1.isParamList());
assertEquals(47, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNot());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertSame(node0, node2);
assertSame(node2, node0);

boolean boolean1 = node2.isEquivalentTo(node1, false, false, true);
assertFalse(boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean1 == boolean0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(7, node1.getLineno());
assertFalse(node1.isParamList());
assertEquals(47, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNot());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertSame(node0, node2);
assertSame(node2, node0);

boolean boolean2 = node1.isEquivalentTo(node2, true, true, false);
assertFalse(boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertEquals(28709, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(7, node1.getLineno());
assertFalse(node1.isParamList());
assertEquals(47, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNot());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertSame(node0, node2);
assertSame(node2, node0);

node1.detachFromParent();

[MASTER] 09:59:35.661 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:35.967 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:36.209 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:36.494 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:36.732 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:36.942 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.131 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.310 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.492 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.720 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.921 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:38.154 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/3
* Done!

* Computation finished
